# 1 "/home/zhengzhen/workspace/versapipe/examples/reyes/basicTypes/vecs.cu"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/usr/local/cuda-8.0/include/cuda_runtime.h" 1
# 56 "/usr/local/cuda-8.0/include/cuda_runtime.h"
#pragma GCC diagnostic push


#pragma GCC diagnostic ignored "-Wunused-function"
# 78 "/usr/local/cuda-8.0/include/cuda_runtime.h"
# 1 "/usr/local/cuda-8.0/include/host_config.h" 1
# 173 "/usr/local/cuda-8.0/include/host_config.h"
# 1 "/usr/include/features.h" 1 3 4
# 367 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 410 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 411 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 368 "/usr/include/features.h" 2 3 4
# 391 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 392 "/usr/include/features.h" 2 3 4
# 174 "/usr/local/cuda-8.0/include/host_config.h" 2
# 79 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2







# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 56 "/usr/local/cuda-8.0/include/builtin_types.h"
# 1 "/usr/local/cuda-8.0/include/device_types.h" 1
# 53 "/usr/local/cuda-8.0/include/device_types.h"
# 1 "/usr/local/cuda-8.0/include/host_defines.h" 1
# 54 "/usr/local/cuda-8.0/include/device_types.h" 2







enum __attribute__((device_builtin)) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/local/cuda-8.0/include/builtin_types.h" 2


# 1 "/usr/local/cuda-8.0/include/driver_types.h" 1
# 71 "/usr/local/cuda-8.0/include/driver_types.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 152 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed/limits.h" 2 3 4
# 72 "/usr/local/cuda-8.0/include/driver_types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4

# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 216 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 426 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 73 "/usr/local/cuda-8.0/include/driver_types.h" 2
# 156 "/usr/local/cuda-8.0/include/driver_types.h"

# 156 "/usr/local/cuda-8.0/include/driver_types.h"
enum __attribute__((device_builtin)) cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 191 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorLaunchFailure = 4,
# 200 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorPriorLaunchFailure = 5,
# 211 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorLaunchTimeout = 6,
# 220 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 235 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 316 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorAddressOfConstant = 22,
# 325 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorTextureFetchFailed = 23,
# 334 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorTextureNotBound = 24,
# 343 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 392 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 427 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 489 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 515 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,






    cudaErrorProfilerDisabled = 55,







    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,






     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,





    cudaErrorPeerAccessUnsupported = 64,






    cudaErrorLaunchMaxDepthExceeded = 65,







    cudaErrorLaunchFileScopedTex = 66,







    cudaErrorLaunchFileScopedSurf = 67,
# 640 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorSyncDepthExceeded = 68,
# 652 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorLaunchPendingCountExceeded = 69,




    cudaErrorNotPermitted = 70,





    cudaErrorNotSupported = 71,
# 672 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorHardwareStackError = 72,







    cudaErrorIllegalInstruction = 73,
# 689 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorMisalignedAddress = 74,
# 700 "/usr/local/cuda-8.0/include/driver_types.h"
    cudaErrorInvalidAddressSpace = 75,







    cudaErrorInvalidPc = 76,







    cudaErrorIllegalAddress = 77,





    cudaErrorInvalidPtx = 78,




    cudaErrorInvalidGraphicsContext = 79,





    cudaErrorNvlinkUncorrectable = 80,




    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum __attribute__((device_builtin)) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct __attribute__((device_builtin)) cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __attribute__((device_builtin)) cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum __attribute__((device_builtin)) cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};






struct __attribute__((device_builtin)) cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};






struct __attribute__((device_builtin)) cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};






struct __attribute__((device_builtin)) cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct __attribute__((device_builtin)) cudaMemcpy3DParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct __attribute__((device_builtin)) cudaMemcpy3DPeerParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum __attribute__((device_builtin)) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum __attribute__((device_builtin)) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum __attribute__((device_builtin)) cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




enum __attribute__((device_builtin)) cudaResourceType
{
    cudaResourceTypeArray = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear = 0x02,
    cudaResourceTypePitch2D = 0x03
};




enum __attribute__((device_builtin)) cudaResourceViewFormat
{
    cudaResViewFormatNone = 0x00,
    cudaResViewFormatUnsignedChar1 = 0x01,
    cudaResViewFormatUnsignedChar2 = 0x02,
    cudaResViewFormatUnsignedChar4 = 0x03,
    cudaResViewFormatSignedChar1 = 0x04,
    cudaResViewFormatSignedChar2 = 0x05,
    cudaResViewFormatSignedChar4 = 0x06,
    cudaResViewFormatUnsignedShort1 = 0x07,
    cudaResViewFormatUnsignedShort2 = 0x08,
    cudaResViewFormatUnsignedShort4 = 0x09,
    cudaResViewFormatSignedShort1 = 0x0a,
    cudaResViewFormatSignedShort2 = 0x0b,
    cudaResViewFormatSignedShort4 = 0x0c,
    cudaResViewFormatUnsignedInt1 = 0x0d,
    cudaResViewFormatUnsignedInt2 = 0x0e,
    cudaResViewFormatUnsignedInt4 = 0x0f,
    cudaResViewFormatSignedInt1 = 0x10,
    cudaResViewFormatSignedInt2 = 0x11,
    cudaResViewFormatSignedInt4 = 0x12,
    cudaResViewFormatHalf1 = 0x13,
    cudaResViewFormatHalf2 = 0x14,
    cudaResViewFormatHalf4 = 0x15,
    cudaResViewFormatFloat1 = 0x16,
    cudaResViewFormatFloat2 = 0x17,
    cudaResViewFormatFloat4 = 0x18,
    cudaResViewFormatUnsignedBlockCompressed1 = 0x19,
    cudaResViewFormatUnsignedBlockCompressed2 = 0x1a,
    cudaResViewFormatUnsignedBlockCompressed3 = 0x1b,
    cudaResViewFormatUnsignedBlockCompressed4 = 0x1c,
    cudaResViewFormatSignedBlockCompressed4 = 0x1d,
    cudaResViewFormatUnsignedBlockCompressed5 = 0x1e,
    cudaResViewFormatSignedBlockCompressed5 = 0x1f,
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20,
    cudaResViewFormatSignedBlockCompressed6H = 0x21,
    cudaResViewFormatUnsignedBlockCompressed7 = 0x22
};




struct __attribute__((device_builtin)) cudaResourceDesc {
 enum cudaResourceType resType;

 union {
  struct {
   cudaArray_t array;
  } array;
        struct {
            cudaMipmappedArray_t mipmap;
        } mipmap;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t sizeInBytes;
  } linear;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t width;
   size_t height;
   size_t pitchInBytes;
  } pitch2D;
 } res;
};




struct __attribute__((device_builtin)) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
};




struct __attribute__((device_builtin)) cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 1045 "/usr/local/cuda-8.0/include/driver_types.h"
    int device;





    void *devicePointer;





    void *hostPointer;




    int isManaged;
};




struct __attribute__((device_builtin)) cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;





   int cacheModeCA;
};




enum __attribute__((device_builtin)) cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};





enum __attribute__((device_builtin)) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __attribute__((device_builtin)) cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum __attribute__((device_builtin)) cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02,
    cudaLimitDevRuntimeSyncDepth = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04
};




enum __attribute__((device_builtin)) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6
};




enum __attribute__((device_builtin)) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4
};




enum __attribute__((device_builtin)) cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




enum __attribute__((device_builtin)) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91
};





enum __attribute__((device_builtin)) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3
};



struct __attribute__((device_builtin)) cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DMipmap;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DMipmap[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTexture3DAlt[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
    int streamPrioritiesSupported;
    int globalL1CacheSupported;
    int localL1CacheSupported;
    size_t sharedMemPerMultiprocessor;
    int regsPerMultiprocessor;
    int managedMemory;
    int isMultiGpuBoard;
    int multiGpuBoardGroupID;
    int hostNativeAtomicSupported;
    int singleToDoublePrecisionPerfRatio;
    int pageableMemoryAccess;
    int concurrentManagedAccess;
};
# 1456 "/usr/local/cuda-8.0/include/driver_types.h"
typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcMemHandle_st
{
    char reserved[64];
}cudaIpcMemHandle_t;
# 1478 "/usr/local/cuda-8.0/include/driver_types.h"
typedef __attribute__((device_builtin)) enum cudaError cudaError_t;




typedef __attribute__((device_builtin)) struct CUstream_st *cudaStream_t;




typedef __attribute__((device_builtin)) struct CUevent_st *cudaEvent_t;




typedef __attribute__((device_builtin)) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __attribute__((device_builtin)) struct CUuuid_st cudaUUID_t;




typedef __attribute__((device_builtin)) enum cudaOutputMode cudaOutputMode_t;
# 60 "/usr/local/cuda-8.0/include/builtin_types.h" 2


# 1 "/usr/local/cuda-8.0/include/surface_types.h" 1
# 84 "/usr/local/cuda-8.0/include/surface_types.h"
enum __attribute__((device_builtin)) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum __attribute__((device_builtin)) cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct __attribute__((device_builtin)) surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};




typedef __attribute__((device_builtin)) unsigned long long cudaSurfaceObject_t;
# 63 "/usr/local/cuda-8.0/include/builtin_types.h" 2
# 1 "/usr/local/cuda-8.0/include/texture_types.h" 1
# 84 "/usr/local/cuda-8.0/include/texture_types.h"
enum __attribute__((device_builtin)) cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum __attribute__((device_builtin)) cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum __attribute__((device_builtin)) cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct __attribute__((device_builtin)) textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
    int __cudaReserved[15];
};




struct __attribute__((device_builtin)) cudaTextureDesc
{



    enum cudaTextureAddressMode addressMode[3];



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureReadMode readMode;



    int sRGB;



    float borderColor[4];



    int normalizedCoords;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
};




typedef __attribute__((device_builtin)) unsigned long long cudaTextureObject_t;
# 64 "/usr/local/cuda-8.0/include/builtin_types.h" 2
# 1 "/usr/local/cuda-8.0/include/vector_types.h" 1
# 61 "/usr/local/cuda-8.0/include/vector_types.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 64 "/usr/local/cuda-8.0/include/builtin_types.h"
# 1 "/usr/local/cuda-8.0/include/vector_types.h" 1
# 64 "/usr/local/cuda-8.0/include/builtin_types.h" 2
# 62 "/usr/local/cuda-8.0/include/vector_types.h" 2
# 98 "/usr/local/cuda-8.0/include/vector_types.h"
struct __attribute__((device_builtin)) char1
{
    signed char x;
};

struct __attribute__((device_builtin)) uchar1
{
    unsigned char x;
};


struct __attribute__((device_builtin)) __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct __attribute__((device_builtin)) char3
{
    signed char x, y, z;
};

struct __attribute__((device_builtin)) uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct __attribute__((device_builtin)) short1
{
    short x;
};

struct __attribute__((device_builtin)) ushort1
{
    unsigned short x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct __attribute__((device_builtin)) short3
{
    short x, y, z;
};

struct __attribute__((device_builtin)) ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __attribute__((device_builtin)) int1
{
    int x;
};

struct __attribute__((device_builtin)) uint1
{
    unsigned int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct __attribute__((device_builtin)) int3
{
    int x, y, z;
};

struct __attribute__((device_builtin)) uint3
{
    unsigned int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct __attribute__((device_builtin)) long1
{
    long int x;
};

struct __attribute__((device_builtin)) ulong1
{
    unsigned long x;
};






struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct __attribute__((device_builtin)) long3
{
    long int x, y, z;
};

struct __attribute__((device_builtin)) ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct __attribute__((device_builtin)) float1
{
    float x;
};
# 274 "/usr/local/cuda-8.0/include/vector_types.h"
struct __attribute__((device_builtin)) __attribute__((aligned(8))) float2 { float x; float y; };




struct __attribute__((device_builtin)) float3
{
    float x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct __attribute__((device_builtin)) longlong1
{
    long long int x;
};

struct __attribute__((device_builtin)) ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct __attribute__((device_builtin)) longlong3
{
    long long int x, y, z;
};

struct __attribute__((device_builtin)) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __attribute__((device_builtin)) double1
{
    double x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double2
{
    double x, y;
};

struct __attribute__((device_builtin)) double3
{
    double x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 362 "/usr/local/cuda-8.0/include/vector_types.h"
typedef __attribute__((device_builtin)) struct char1 char1;
typedef __attribute__((device_builtin)) struct uchar1 uchar1;
typedef __attribute__((device_builtin)) struct char2 char2;
typedef __attribute__((device_builtin)) struct uchar2 uchar2;
typedef __attribute__((device_builtin)) struct char3 char3;
typedef __attribute__((device_builtin)) struct uchar3 uchar3;
typedef __attribute__((device_builtin)) struct char4 char4;
typedef __attribute__((device_builtin)) struct uchar4 uchar4;
typedef __attribute__((device_builtin)) struct short1 short1;
typedef __attribute__((device_builtin)) struct ushort1 ushort1;
typedef __attribute__((device_builtin)) struct short2 short2;
typedef __attribute__((device_builtin)) struct ushort2 ushort2;
typedef __attribute__((device_builtin)) struct short3 short3;
typedef __attribute__((device_builtin)) struct ushort3 ushort3;
typedef __attribute__((device_builtin)) struct short4 short4;
typedef __attribute__((device_builtin)) struct ushort4 ushort4;
typedef __attribute__((device_builtin)) struct int1 int1;
typedef __attribute__((device_builtin)) struct uint1 uint1;
typedef __attribute__((device_builtin)) struct int2 int2;
typedef __attribute__((device_builtin)) struct uint2 uint2;
typedef __attribute__((device_builtin)) struct int3 int3;
typedef __attribute__((device_builtin)) struct uint3 uint3;
typedef __attribute__((device_builtin)) struct int4 int4;
typedef __attribute__((device_builtin)) struct uint4 uint4;
typedef __attribute__((device_builtin)) struct long1 long1;
typedef __attribute__((device_builtin)) struct ulong1 ulong1;
typedef __attribute__((device_builtin)) struct long2 long2;
typedef __attribute__((device_builtin)) struct ulong2 ulong2;
typedef __attribute__((device_builtin)) struct long3 long3;
typedef __attribute__((device_builtin)) struct ulong3 ulong3;
typedef __attribute__((device_builtin)) struct long4 long4;
typedef __attribute__((device_builtin)) struct ulong4 ulong4;
typedef __attribute__((device_builtin)) struct float1 float1;
typedef __attribute__((device_builtin)) struct float2 float2;
typedef __attribute__((device_builtin)) struct float3 float3;
typedef __attribute__((device_builtin)) struct float4 float4;
typedef __attribute__((device_builtin)) struct longlong1 longlong1;
typedef __attribute__((device_builtin)) struct ulonglong1 ulonglong1;
typedef __attribute__((device_builtin)) struct longlong2 longlong2;
typedef __attribute__((device_builtin)) struct ulonglong2 ulonglong2;
typedef __attribute__((device_builtin)) struct longlong3 longlong3;
typedef __attribute__((device_builtin)) struct ulonglong3 ulonglong3;
typedef __attribute__((device_builtin)) struct longlong4 longlong4;
typedef __attribute__((device_builtin)) struct ulonglong4 ulonglong4;
typedef __attribute__((device_builtin)) struct double1 double1;
typedef __attribute__((device_builtin)) struct double2 double2;
typedef __attribute__((device_builtin)) struct double3 double3;
typedef __attribute__((device_builtin)) struct double4 double4;







struct __attribute__((device_builtin)) dim3
{
    unsigned int x, y, z;

    __attribute__((host)) __attribute__((device)) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __attribute__((host)) __attribute__((device)) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __attribute__((host)) __attribute__((device)) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};

typedef __attribute__((device_builtin)) struct dim3 dim3;
# 64 "/usr/local/cuda-8.0/include/builtin_types.h" 2
# 87 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-8.0/include/library_types.h" 1
# 54 "/usr/local/cuda-8.0/include/library_types.h"
typedef enum cudaDataType_t
{
 CUDA_R_16F= 2,
 CUDA_C_16F= 6,
 CUDA_R_32F= 0,
 CUDA_C_32F= 4,
 CUDA_R_64F= 1,
 CUDA_C_64F= 5,
 CUDA_R_8I = 3,
 CUDA_C_8I = 7,
 CUDA_R_8U = 8,
 CUDA_C_8U = 9,
 CUDA_R_32I= 10,
 CUDA_C_32I= 11,
 CUDA_R_32U= 12,
 CUDA_C_32U= 13
} cudaDataType;


typedef enum libraryPropertyType_t
{
 MAJOR_VERSION,
 MINOR_VERSION,
 PATCH_LEVEL
} libraryPropertyType;
# 88 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2


# 1 "/usr/local/cuda-8.0/include/channel_descriptor.h" 1
# 62 "/usr/local/cuda-8.0/include/channel_descriptor.h"
# 1 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 1
# 134 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 135 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 2


# 1 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h" 1
# 104 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h"
extern "C"
{
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceSynchronize(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetLastError(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaPeekAtLastError(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) const char* cudaGetErrorString(cudaError_t error);
extern __attribute__((device)) __attribute__((cudart_builtin)) const char* cudaGetErrorName(cudaError_t error);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceCount(int *count);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetDevice(int *device);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventDestroy(cudaEvent_t event);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFree(void *devPtr);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(void **devPtr, size_t size);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync_ptsz(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync_ptsz(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync_ptsz(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync_ptsz(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync_ptsz(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync_ptsz(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);
# 161 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h"
extern __attribute__((device)) __attribute__((cudart_builtin)) void * cudaGetParameterBuffer(size_t alignment, size_t size);
# 189 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h"
extern __attribute__((device)) __attribute__((cudart_builtin)) void * cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream);
# 209 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h"
    extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
    extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream);


extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags);

}

template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(T **devPtr, size_t size);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, T *entry);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned int flags);
# 138 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 2
# 219 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern "C" {
# 252 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceReset(void);
# 269 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceSynchronize(void);
# 344 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value);
# 373 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
# 404 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 439 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 481 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);
# 510 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
# 552 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);
# 575 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);
# 602 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);
# 644 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);
# 679 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);
# 717 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);
# 767 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
# 797 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcCloseMemHandle(void *devPtr);
# 837 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadExit(void);
# 861 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSynchronize(void);
# 908 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value);
# 939 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);
# 974 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 1020 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);
# 1074 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetLastError(void);
# 1115 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaPeekAtLastError(void);
# 1130 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorName(cudaError_t error);
# 1145 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorString(cudaError_t error);
# 1175 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceCount(int *count);
# 1421 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
# 1593 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
# 1628 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);
# 1647 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
# 1681 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDevice(int device);
# 1698 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDevice(int *device);
# 1727 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetValidDevices(int *device_arr, int len);
# 1789 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDeviceFlags( unsigned int flags );
# 1830 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetDeviceFlags( unsigned int *flags );
# 1867 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamCreate(cudaStream_t *pStream);
# 1896 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
# 1939 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);
# 1963 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority);
# 1984 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);
# 2005 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 2037 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
# 2051 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
typedef void ( *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
# 2108 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);
# 2128 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 2149 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamQuery(cudaStream_t stream);
# 2220 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);
# 2256 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventCreate(cudaEvent_t *event);
# 2290 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
# 2321 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);
# 2353 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventQuery(cudaEvent_t event);
# 2385 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 2410 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventDestroy(cudaEvent_t event);
# 2451 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
# 2510 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
# 2560 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);
# 2614 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);
# 2648 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
# 2671 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForDevice(double *d);
# 2694 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForHost(double *d);
# 2750 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);
# 2794 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 2845 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);
# 2874 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
# 2912 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunch(const void *func);
# 3030 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);
# 3056 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(void **devPtr, size_t size);
# 3085 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocHost(void **ptr, size_t size);
# 3124 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
# 3166 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);
# 3193 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFree(void *devPtr);
# 3213 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeHost(void *ptr);
# 3235 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeArray(cudaArray_t array);
# 3257 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);
# 3316 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
# 3393 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags);
# 3412 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostUnregister(void *ptr);
# 3454 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
# 3473 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);
# 3508 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
# 3643 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
# 3764 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);
# 3790 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);
# 3890 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
# 3918 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);
# 4029 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);
# 4052 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);
# 4071 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
# 4092 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);
# 4130 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4162 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
# 4200 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4237 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
# 4275 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4320 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4366 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4412 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4455 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4493 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);
# 4531 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
# 4582 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4614 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);
# 4660 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4705 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4765 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4820 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4874 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4920 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4966 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4992 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset(void *devPtr, int value, size_t count);
# 5022 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);
# 5065 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
# 5097 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);
# 5134 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
# 5184 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);
# 5207 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol);
# 5229 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol);
# 5296 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);
# 5382 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);
# 5438 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);
# 5474 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);
# 5627 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);
# 5665 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);
# 5704 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);
# 5723 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 5783 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 5815 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);
# 5851 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5883 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5912 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
# 5946 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
# 5971 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);
# 6011 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);
# 6046 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);
# 6093 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 
# 6093 "/usr/local/cuda-8.0/include/cuda_runtime_api.h" 3 4
                                                                                                                                                                                      (0x7fffffff * 2U + 1U)
# 6093 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
                                                                                                                                                                                                    );
# 6144 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
# 6172 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 6200 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);
# 6221 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaUnbindTexture(const struct textureReference *texref);
# 6246 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
# 6271 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureReference(const struct textureReference **texref, const void *symbol);
# 6311 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 6330 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);
# 6556 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);
# 6571 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject);
# 6587 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);
# 6603 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
# 6620 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);
# 6659 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);
# 6674 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);
# 6689 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);
# 6716 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDriverGetVersion(int *driverVersion);
# 6733 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);




extern __attribute__((host)) cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);
# 6964 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
}
# 63 "/usr/local/cuda-8.0/include/channel_descriptor.h" 2
# 107 "/usr/local/cuda-8.0/include/channel_descriptor.h"
template<class T> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;




  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);

}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}
# 379 "/usr/local/cuda-8.0/include/channel_descriptor.h"
template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}
# 91 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2

# 1 "/usr/local/cuda-8.0/include/driver_functions.h" 1
# 53 "/usr/local/cuda-8.0/include/driver_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 54 "/usr/local/cuda-8.0/include/driver_functions.h" 2
# 79 "/usr/local/cuda-8.0/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
{
  struct cudaPitchedPtr s;

  s.ptr = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
# 106 "/usr/local/cuda-8.0/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z)
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
# 132 "/usr/local/cuda-8.0/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
{
  struct cudaExtent e;

  e.width = w;
  e.height = h;
  e.depth = d;

  return e;
}
# 93 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2



# 1 "/usr/local/cuda-8.0/include/vector_functions.h" 1
# 59 "/usr/local/cuda-8.0/include/vector_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 60 "/usr/local/cuda-8.0/include/vector_functions.h" 2
# 176 "/usr/local/cuda-8.0/include/vector_functions.h"
# 1 "/usr/local/cuda-8.0/include/vector_functions.hpp" 1
# 59 "/usr/local/cuda-8.0/include/vector_functions.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 60 "/usr/local/cuda-8.0/include/vector_functions.hpp" 2
# 75 "/usr/local/cuda-8.0/include/vector_functions.hpp"
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z)
{
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}
# 177 "/usr/local/cuda-8.0/include/vector_functions.h" 2
# 97 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2
# 116 "/usr/local/cuda-8.0/include/cuda_runtime.h"
# 1 "/usr/local/cuda-8.0/include/common_functions.h" 1
# 61 "/usr/local/cuda-8.0/include/common_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 62 "/usr/local/cuda-8.0/include/common_functions.h" 2



# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4

# 27 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 160 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 206 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 377 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 433 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 635 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string3.h" 1 3 4
# 49 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) throw ()
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 77 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) throw ()
{
# 90 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) throw ()
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) throw ()
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) throw ();
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) throw () __asm__ ("" "stpncpy")
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char *__dest, const char *__src, size_t __n) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 636 "/usr/include/string.h" 2 3 4
# 658 "/usr/include/string.h" 3 4
}
# 66 "/usr/local/cuda-8.0/include/common_functions.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 27 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4



struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 88 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 42 "/usr/include/time.h" 2 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };








struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;





typedef __pid_t pid_t;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 67 "/usr/local/cuda-8.0/include/common_functions.h" 2


# 68 "/usr/local/cuda-8.0/include/common_functions.h"
extern "C"
{

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) clock_t clock(void) 
# 71 "/usr/local/cuda-8.0/include/common_functions.h" 3 4
                                                                                                    throw ()
# 71 "/usr/local/cuda-8.0/include/common_functions.h"
                                                                                                           ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memset(void*, int, size_t) 
# 72 "/usr/local/cuda-8.0/include/common_functions.h" 3 4
                                                                                                                   throw ()
# 72 "/usr/local/cuda-8.0/include/common_functions.h"
                                                                                                                          ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memcpy(void*, const void*, size_t) 
# 73 "/usr/local/cuda-8.0/include/common_functions.h" 3 4
                                                                                                                           throw ()
# 73 "/usr/local/cuda-8.0/include/common_functions.h"
                                                                                                                                  ;

}
# 91 "/usr/local/cuda-8.0/include/common_functions.h"
# 1 "/usr/include/c++/5/new" 1 3
# 37 "/usr/include/c++/5/new" 3
       
# 38 "/usr/include/c++/5/new" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 1 3
# 194 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3

# 194 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 216 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 482 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/os_defines.h" 1 3
# 483 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/5/bits/cpu_defines.h" 1 3
# 486 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 2 3
# 40 "/usr/include/c++/5/new" 2 3
# 1 "/usr/include/c++/5/exception" 1 3
# 33 "/usr/include/c++/5/exception" 3
       
# 34 "/usr/include/c++/5/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 1 3
# 33 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 3
       
# 34 "/usr/include/c++/5/bits/atomic_lockfree_defines.h" 3
# 39 "/usr/include/c++/5/exception" 2 3

extern "C++" {

namespace std
{
# 60 "/usr/include/c++/5/exception" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char* what() const noexcept;
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char* what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 127 "/usr/include/c++/5/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 152 "/usr/include/c++/5/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/5/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/5/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)


# 1 "/usr/include/c++/5/bits/exception_defines.h" 1 3
# 38 "/usr/include/c++/5/bits/exception_ptr.h" 2 3





extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 111 "/usr/include/c++/5/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 138 "/usr/include/c++/5/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {

      try
 {
   throw __ex;
 }
      catch(...)
 {
   return current_exception();
 }



    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 163 "/usr/include/c++/5/exception" 2 3
# 1 "/usr/include/c++/5/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/5/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "/usr/include/c++/5/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Tp,
    bool __with_nested = !__is_base_of(nested_exception, _Tp)>
    struct _Throw_with_nested_impl
    {
      template<typename _Up>
 static void _S_throw(_Up&& __t)
 { throw _Nested_exception<_Tp>{static_cast<_Up&&>(__t)}; }
    };

  template<typename _Tp>
    struct _Throw_with_nested_impl<_Tp, false>
    {
      template<typename _Up>
 static void _S_throw(_Up&& __t)
 { throw static_cast<_Up&&>(__t); }
    };

  template<typename _Tp, bool = __is_class(_Tp) && !__is_final(_Tp)>
    struct _Throw_with_nested_helper : _Throw_with_nested_impl<_Tp>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp, false>
    : _Throw_with_nested_impl<_Tp, false>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp&, false>
    : _Throw_with_nested_helper<_Tp>
    { };

  template<typename _Tp>
    struct _Throw_with_nested_helper<_Tp&&, false>
    : _Throw_with_nested_helper<_Tp>
    { };



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      _Throw_with_nested_helper<_Tp>::_S_throw(static_cast<_Tp&&>(__t));
    }

  template<typename _Tp, bool = __is_polymorphic(_Tp)>
    struct _Rethrow_if_nested_impl
    {
      static void _S_rethrow(const _Tp& __t)
      {
 if (auto __tp = dynamic_cast<const nested_exception*>(&__t))
   __tp->rethrow_nested();
      }
    };

  template<typename _Tp>
    struct _Rethrow_if_nested_impl<_Tp, false>
    {
      static void _S_rethrow(const _Tp&) { }
    };


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      _Rethrow_if_nested_impl<_Ex>::_S_rethrow(__ex);
    }


}

}



#pragma GCC visibility pop
# 164 "/usr/include/c++/5/exception" 2 3
# 41 "/usr/include/c++/5/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };


  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 111 "/usr/include/c++/5/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}

#pragma GCC visibility pop
# 92 "/usr/local/cuda-8.0/include/common_functions.h" 2
# 105 "/usr/local/cuda-8.0/include/common_functions.h"

# 105 "/usr/local/cuda-8.0/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*, void*) throw();







# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4

# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;





typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 173 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 241 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 289 "/usr/include/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 333 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 429 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 459 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 521 "/usr/include/libio.h" 3 4
}
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) throw () __attribute__ ((__warn_unused_result__));





extern char *tmpnam_r (char *__s) throw () __attribute__ ((__warn_unused_result__));
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 295 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) throw () __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () __attribute__ ((__warn_unused_result__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__warn_unused_result__)) __attribute__ ((__deprecated__));


# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
# 872 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) throw ();
# 933 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 934 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) throw ();
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) throw ()
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) throw ();
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) throw ()

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) throw ()

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 206 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 241 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 937 "/usr/include/stdio.h" 2 3 4





}
# 117 "/usr/local/cuda-8.0/include/common_functions.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () __attribute__ ((__warn_unused_result__));




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

# 239 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 136 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;







# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 54 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 129 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


}
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__leaf__)) gnu_dev_major (unsigned long long int __dev) throw ()
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__leaf__)) gnu_dev_minor (unsigned long long int __dev) throw ()
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
__attribute__ ((__leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}

}
# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 125 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    signed char __rwelision;




    unsigned char __pad1[7];


    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 220 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 629 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 651 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 673 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 683 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 693 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 705 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));









extern int system (const char *__command) __attribute__ ((__warn_unused_result__));






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 760 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));

# 811 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 898 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}

# 955 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) throw () __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) throw () __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) throw () __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved) throw ()
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {

      if (__builtin_object_size (__resolved, 2 > 1) < 4096)
 return __realpath_chk_warn (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));

      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  throw () __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) throw () __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char *__s, wchar_t __wchar) throw ()
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw () __asm__ ("" "mbstowcs")


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw () __asm__ ("" "wcstombs")


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 959 "/usr/include/stdlib.h" 2 3 4
# 967 "/usr/include/stdlib.h" 3 4
}
# 118 "/usr/local/cuda-8.0/include/common_functions.h" 2






# 123 "/usr/local/cuda-8.0/include/common_functions.h"
extern "C"
{
extern



__attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int printf(const char*, ...);

extern



__attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int fprintf(FILE*, const char*, ...);


extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* malloc(size_t) 
# 138 "/usr/local/cuda-8.0/include/common_functions.h" 3 4
                                                                                    throw ()
# 138 "/usr/local/cuda-8.0/include/common_functions.h"
                                                                                           ;
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void free(void*) 
# 139 "/usr/local/cuda-8.0/include/common_functions.h" 3 4
                                                                                 throw ()
# 139 "/usr/local/cuda-8.0/include/common_functions.h"
                                                                                        ;

}





# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4

# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 148 "/usr/local/cuda-8.0/include/common_functions.h" 2



# 150 "/usr/local/cuda-8.0/include/common_functions.h"
extern "C"
{
# 171 "/usr/local/cuda-8.0/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void __assert_fail(
  const char *, const char *, unsigned int, const char *)
  
# 173 "/usr/local/cuda-8.0/include/common_functions.h" 3 4
 throw ()
# 173 "/usr/local/cuda-8.0/include/common_functions.h"
        ;




}
# 222 "/usr/local/cuda-8.0/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t) ;
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t) ;
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*) throw();
# 249 "/usr/local/cuda-8.0/include/common_functions.h"
# 1 "/usr/local/cuda-8.0/include/math_functions.h" 1
# 83 "/usr/local/cuda-8.0/include/math_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 84 "/usr/local/cuda-8.0/include/math_functions.h" 2
# 93 "/usr/local/cuda-8.0/include/math_functions.h"
extern "C"
{
# 164 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int abs(int) 
# 164 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                      throw ()
# 164 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                             ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long int labs(long int) 
# 165 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                            throw ()
# 165 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                   ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long long int llabs(long long int) 
# 166 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                                  throw ()
# 166 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                         ;
# 216 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fabs(double x) 
# 216 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 216 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 257 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fabsf(float x) 
# 257 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 257 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;



extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int min(int, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umin(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmin(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmin(unsigned long long int, unsigned long long int);
# 286 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fminf(float x, float y) 
# 286 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 286 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 306 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmin(double x, double y) 
# 306 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                   throw ()
# 306 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                          ;






extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int max(int, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umax(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmax(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmax(unsigned long long int, unsigned long long int);
# 338 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaxf(float x, float y) 
# 338 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 338 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 358 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmax(double, double) 
# 358 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                               throw ()
# 358 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                      ;
# 402 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sin(double x) 
# 402 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 402 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 435 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cos(double x) 
# 435 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 435 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 454 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincos(double x, double *sptr, double *cptr) 
# 454 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                                       throw ()
# 454 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                              ;
# 470 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincosf(float x, float *sptr, float *cptr) 
# 470 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                                     throw ()
# 470 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                            ;
# 515 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tan(double x) 
# 515 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 515 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 584 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sqrt(double x) 
# 584 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 584 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 656 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rsqrt(double x);
# 726 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rsqrtf(float x);
# 782 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log2(double x) 
# 782 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 782 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 807 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp2(double x) 
# 807 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 807 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 832 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp2f(float x) 
# 832 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 832 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 859 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp10(double x) 
# 859 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 859 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 882 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp10f(float x) 
# 882 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 882 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 928 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double expm1(double x) 
# 928 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 928 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 973 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expm1f(float x) 
# 973 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 973 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1028 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log2f(float x) 
# 1028 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 1028 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 1082 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log10(double x) 
# 1082 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1082 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1153 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log(double x) 
# 1153 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 1153 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 1247 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log1p(double x) 
# 1247 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1247 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1344 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log1pf(float x) 
# 1344 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1344 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1419 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double floor(double x) 
# 1419 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                     throw ()
# 1419 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                            ;
# 1458 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp(double x) 
# 1458 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 1458 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 1489 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cosh(double x) 
# 1489 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 1489 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 1519 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinh(double x) 
# 1519 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 1519 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 1549 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tanh(double x) 
# 1549 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 1549 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 1584 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acosh(double x) 
# 1584 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1584 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1622 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acoshf(float x) 
# 1622 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1622 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1638 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asinh(double x) 
# 1638 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1638 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1654 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinhf(float x) 
# 1654 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1654 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1708 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atanh(double x) 
# 1708 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1708 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1762 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanhf(float x) 
# 1762 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 1762 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 1821 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ldexp(double x, int exp) 
# 1821 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                              throw ()
# 1821 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                     ;
# 1877 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ldexpf(float x, int exp) 
# 1877 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                   throw ()
# 1877 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                          ;
# 1929 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double logb(double x) 
# 1929 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 1929 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 1984 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logbf(float x) 
# 1984 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 1984 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 2014 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogb(double x) 
# 2014 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 2014 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 2044 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogbf(float x) 
# 2044 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 2044 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 2120 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbn(double x, int n) 
# 2120 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 2120 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 2196 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalbnf(float x, int n) 
# 2196 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 2196 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 2272 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbln(double x, long int n) 
# 2272 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                        throw ()
# 2272 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                               ;
# 2348 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalblnf(float x, long int n) 
# 2348 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                        throw ()
# 2348 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                               ;
# 2426 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double frexp(double x, int *nptr) 
# 2426 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                                throw ()
# 2426 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                       ;
# 2501 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float frexpf(float x, int *nptr) 
# 2501 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                     throw ()
# 2501 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                            ;
# 2515 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double round(double x) 
# 2515 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 2515 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 2532 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float roundf(float x) 
# 2532 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 2532 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 2550 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lround(double x) 
# 2550 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 2550 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 2568 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lroundf(float x) 
# 2568 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 2568 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 2586 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llround(double x) 
# 2586 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                            throw ()
# 2586 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                   ;
# 2604 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llroundf(float x) 
# 2604 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                            throw ()
# 2604 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                   ;
# 2640 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rint(double x) 
# 2640 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 2640 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 2656 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rintf(float x) 
# 2656 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 2656 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 2672 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrint(double x) 
# 2672 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 2672 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 2688 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrintf(float x) 
# 2688 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 2688 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 2704 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrint(double x) 
# 2704 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 2704 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 2720 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrintf(float x) 
# 2720 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 2720 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 2773 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nearbyint(double x) 
# 2773 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                              throw ()
# 2773 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                     ;
# 2826 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nearbyintf(float x) 
# 2826 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                              throw ()
# 2826 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                     ;
# 2888 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ceil(double x) 
# 2888 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                    throw ()
# 2888 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                           ;
# 2900 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double trunc(double x) 
# 2900 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 2900 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 2915 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float truncf(float x) 
# 2915 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 2915 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 2941 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fdim(double x, double y) 
# 2941 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                   throw ()
# 2941 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                          ;
# 2967 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fdimf(float x, float y) 
# 2967 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 2967 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 3003 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan2(double y, double x) 
# 3003 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                    throw ()
# 3003 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                           ;
# 3034 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan(double x) 
# 3034 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 3034 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 3057 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acos(double x) 
# 3057 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 3057 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 3089 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asin(double x) 
# 3089 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 3089 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 3135 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double hypot(double x, double y) 
# 3135 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                              throw ()
# 3135 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                     ;
# 3187 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rhypot(double x, double y) 
# 3187 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                    throw ()
# 3187 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                           ;
# 3233 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float hypotf(float x, float y) 
# 3233 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                            throw ()
# 3233 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                   ;
# 3285 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rhypotf(float x, float y) 
# 3285 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                   throw ()
# 3285 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                          ;
# 3332 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm3d(double a, double b, double c) 
# 3332 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                                          throw ()
# 3332 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                                 ;
# 3383 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm3d(double a, double b, double c) 
# 3383 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                               throw ()
# 3383 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                      ;
# 3432 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm4d(double a, double b, double c, double d) 
# 3432 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                                                    throw ()
# 3432 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                                           ;
# 3488 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm4d(double a, double b, double c, double d) 
# 3488 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                          throw ()
# 3488 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                 ;
# 3533 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm(int dim, double const * t) 
# 3533 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 3533 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 3584 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm(int dim, double const * t) 
# 3584 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 3584 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 3636 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnormf(int dim, float const * a) 
# 3636 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 3636 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 3680 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normf(int dim, float const * a) 
# 3680 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 3680 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 3725 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float norm3df(float a, float b, float c) 
# 3725 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                            throw ()
# 3725 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                   ;
# 3776 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnorm3df(float a, float b, float c) 
# 3776 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                             throw ()
# 3776 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                    ;
# 3825 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float norm4df(float a, float b, float c, float d) 
# 3825 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                     throw ()
# 3825 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                            ;
# 3881 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnorm4df(float a, float b, float c, float d) 
# 3881 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                      throw ()
# 3881 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                             ;
# 3965 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cbrt(double x) 
# 3965 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 3965 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 4051 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cbrtf(float x) 
# 4051 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 4051 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 4106 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rcbrt(double x);
# 4156 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rcbrtf(float x);
# 4216 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinpi(double x);
# 4276 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinpif(float x);
# 4328 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cospi(double x);
# 4380 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cospif(float x);
# 4410 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospi(double x, double *sptr, double *cptr);
# 4440 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospif(float x, float *sptr, float *cptr);
# 4752 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double pow(double x, double y) 
# 4752 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 4752 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 4808 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double modf(double x, double *iptr) 
# 4808 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                                  throw ()
# 4808 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                         ;
# 4867 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmod(double x, double y) 
# 4867 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                   throw ()
# 4867 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                          ;
# 4953 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remainder(double x, double y) 
# 4953 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                        throw ()
# 4953 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                               ;
# 5043 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remainderf(float x, float y) 
# 5043 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                       throw ()
# 5043 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                              ;
# 5097 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remquo(double x, double y, int *quo) 
# 5097 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                               throw ()
# 5097 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                      ;
# 5151 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remquof(float x, float y, int *quo) 
# 5151 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                              throw ()
# 5151 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                     ;
# 5192 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j0(double x) 
# 5192 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5192 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 5234 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j0f(float x) 
# 5234 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                       throw ()
# 5234 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                              ;
# 5295 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j1(double x) 
# 5295 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5295 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 5356 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j1f(float x) 
# 5356 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                       throw ()
# 5356 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                              ;
# 5399 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double jn(int n, double x) 
# 5399 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                         throw ()
# 5399 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                ;
# 5442 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float jnf(int n, float x) 
# 5442 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                              throw ()
# 5442 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                     ;
# 5494 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y0(double x) 
# 5494 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5494 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 5546 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y0f(float x) 
# 5546 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                       throw ()
# 5546 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                              ;
# 5598 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y1(double x) 
# 5598 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5598 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 5650 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y1f(float x) 
# 5650 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                       throw ()
# 5650 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                              ;
# 5703 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double yn(int n, double x) 
# 5703 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                         throw ()
# 5703 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                ;
# 5756 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ynf(int n, float x) 
# 5756 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                              throw ()
# 5756 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                     ;
# 5783 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i0(double x) 
# 5783 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                             throw ()
# 5783 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                    ;
# 5809 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i0f(float x) 
# 5809 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5809 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 5836 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i1(double x) 
# 5836 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                             throw ()
# 5836 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                    ;
# 5862 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i1f(float x) 
# 5862 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 5862 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 5945 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erf(double x) 
# 5945 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 5945 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 6027 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erff(float x) 
# 6027 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 6027 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 6091 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfinv(double y);
# 6148 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfinvf(float y);
# 6187 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfc(double x) 
# 6187 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 6187 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 6225 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcf(float x) 
# 6225 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 6225 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 6353 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double lgamma(double x) 
# 6353 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 6353 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 6416 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcinv(double y);
# 6472 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcinvf(float y);
# 6530 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdfinv(double y);
# 6588 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdfinvf(float y);
# 6631 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdf(double y);
# 6674 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdff(float y);
# 6749 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcx(double x);
# 6824 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcxf(float x);
# 6958 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float lgammaf(float x) 
# 6958 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 6958 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 7067 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tgamma(double x) 
# 7067 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 7067 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 7176 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tgammaf(float x) 
# 7176 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 7176 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
# 7189 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double copysign(double x, double y) 
# 7189 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                       throw ()
# 7189 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                              ;
# 7202 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float copysignf(float x, float y) 
# 7202 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                      throw ()
# 7202 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                             ;
# 7239 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nextafter(double x, double y) 
# 7239 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                        throw ()
# 7239 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                               ;
# 7276 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nextafterf(float x, float y) 
# 7276 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                       throw ()
# 7276 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                              ;
# 7292 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nan(const char *tagp) 
# 7292 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                throw ()
# 7292 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                       ;
# 7308 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nanf(const char *tagp) 
# 7308 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                 throw ()
# 7308 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                        ;






extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinff(float) 
# 7315 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 7315 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanf(float) 
# 7316 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 7316 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 7326 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finite(double) 
# 7326 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 7326 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitef(float) 
# 7327 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                           throw ()
# 7327 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                  ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbit(double) 
# 7328 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                            throw ()
# 7328 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                   ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnan(double) 
# 7329 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 7329 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinf(double) 
# 7330 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 7330 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;


extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitf(float) 
# 7333 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                            throw ()
# 7333 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                   ;
# 7492 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fma(double x, double y, double z) 
# 7492 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                            throw ()
# 7492 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                   ;
# 7650 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaf(float x, float y, float z) 
# 7650 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                          throw ()
# 7650 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                                 ;
# 7661 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitl(long double) 
# 7661 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 7661 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;





extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitel(long double) 
# 7667 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                 throw ()
# 7667 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                        ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinfl(long double) 
# 7668 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                throw ()
# 7668 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                       ;
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanl(long double) 
# 7669 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                throw ()
# 7669 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                       ;
# 7719 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acosf(float x) 
# 7719 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 7719 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 7759 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinf(float x) 
# 7759 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 7759 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 7799 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanf(float x) 
# 7799 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 7799 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 7832 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atan2f(float y, float x) 
# 7832 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                   throw ()
# 7832 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                          ;
# 7856 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cosf(float x) 
# 7856 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 7856 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 7898 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinf(float x) 
# 7898 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 7898 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 7940 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanf(float x) 
# 7940 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 7940 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 7964 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float coshf(float x) 
# 7964 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 7964 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 8005 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinhf(float x) 
# 8005 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 8005 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 8035 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanhf(float x) 
# 8035 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 8035 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 8086 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logf(float x) 
# 8086 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 8086 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 8136 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expf(float x) 
# 8136 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                        throw ()
# 8136 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                               ;
# 8187 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log10f(float x) 
# 8187 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 8187 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 8242 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float modff(float x, float *iptr) 
# 8242 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                      throw ()
# 8242 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                             ;
# 8550 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float powf(float x, float y) 
# 8550 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                 throw ()
# 8550 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                        ;
# 8619 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sqrtf(float x) 
# 8619 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 8619 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 8678 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ceilf(float x) 
# 8678 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                         throw ()
# 8678 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                ;
# 8750 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float floorf(float x) 
# 8750 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                          throw ()
# 8750 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                 ;
# 8809 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmodf(float x, float y) 
# 8809 "/usr/local/cuda-8.0/include/math_functions.h" 3 4
                                                                                                  throw ()
# 8809 "/usr/local/cuda-8.0/include/math_functions.h"
                                                                                                         ;
# 8823 "/usr/local/cuda-8.0/include/math_functions.h"
}



# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4

# 28 "/usr/include/math.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 32 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 45 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 49 "/usr/include/math.h" 2 3 4
# 83 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                        ;





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));

# 208 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));
# 247 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));






extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 84 "/usr/include/math.h" 2 3 4
# 104 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ()
                                                        ;





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));








extern int isinff (float __value) throw () __attribute__ ((__const__));



extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));






extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));






extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 105 "/usr/include/math.h" 2 3 4
# 151 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                        ;





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));








extern int isinfl (long double __value) throw () __attribute__ ((__const__));



extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));






extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));






extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 152 "/usr/include/math.h" 2 3 4
# 168 "/usr/include/math.h" 3 4
extern int signgam;
# 209 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 347 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 370 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 472 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 1 3 4
# 123 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3 4



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbitf (float __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x8) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbit (double __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x80) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbitl (long double __x) throw ()
{
  __extension__ union { long double __l; int __i[3]; } __u = { __l: __x };
  return (__u.__i[2] & 0x8000) != 0;
}


# 473 "/usr/include/math.h" 2 3 4
# 534 "/usr/include/math.h" 3 4
}
# 8828 "/usr/local/cuda-8.0/include/math_functions.h" 2



# 1 "/usr/include/c++/5/cmath" 1 3
# 39 "/usr/include/c++/5/cmath" 3
       
# 40 "/usr/include/c++/5/cmath" 3


# 1 "/usr/include/c++/5/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
# 68 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 287 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



}
# 43 "/usr/include/c++/5/cmath" 2 3
# 1 "/usr/include/c++/5/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/5/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/5/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 44 "/usr/include/c++/5/cmath" 2 3
# 75 "/usr/include/c++/5/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 431 "/usr/include/c++/5/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 555 "/usr/include/c++/5/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }


  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }


  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }


  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }


  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }



  constexpr bool
  signbit(float __x)
  { return __builtin_signbitf(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbitl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }


  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }


  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }


  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }


  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }


  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }


  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 946 "/usr/include/c++/5/cmath" 3

}
# 1062 "/usr/include/c++/5/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }


  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }


  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }


  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }


  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }


  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }


  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }


  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }


  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }


  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }


  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }


  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }


  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }


  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }


  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }


  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }


  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }


  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }


  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }


  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }


  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }



  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }


  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }


  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }


  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }


  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }


  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }


  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }


  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }


  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }


  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }


  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }


  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }


  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }


  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }


  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }


  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }


}
# 8832 "/usr/local/cuda-8.0/include/math_functions.h" 2
# 1 "/usr/include/c++/5/cstdlib" 1 3
# 39 "/usr/include/c++/5/cstdlib" 3
       
# 40 "/usr/include/c++/5/cstdlib" 3
# 114 "/usr/include/c++/5/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 195 "/usr/include/c++/5/cstdlib" 3

}
# 209 "/usr/include/c++/5/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 241 "/usr/include/c++/5/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 8833 "/usr/local/cuda-8.0/include/math_functions.h" 2
# 8925 "/usr/local/cuda-8.0/include/math_functions.h"

# 8925 "/usr/local/cuda-8.0/include/math_functions.h"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(double x) throw();

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(double x) throw();

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(long double x);
# 9002 "/usr/local/cuda-8.0/include/math_functions.h"
namespace std
{
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __pow_helper(T, int);
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __cmath_power(T, unsigned int);
}

using std::abs;
using std::fabs;
using std::ceil;
using std::floor;
using std::sqrt;
using std::pow;
using std::log;
using std::log10;
using std::fmod;
using std::modf;
using std::exp;
using std::frexp;
using std::ldexp;
using std::asin;
using std::sin;
using std::sinh;
using std::acos;
using std::cos;
using std::cosh;
using std::atan;
using std::atan2;
using std::tan;
using std::tanh;
# 9393 "/usr/local/cuda-8.0/include/math_functions.h"
namespace std {
# 9406 "/usr/local/cuda-8.0/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int abs(long long int);





extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int abs(long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float abs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double abs(double);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fabs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ceil(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float floor(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sqrt(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float pow(float, float);




template<typename _Tp, typename _Up>
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin))
typename __gnu_cxx::__promote_2<_Tp, _Up>::__type pow(_Tp, _Up);







extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log10(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fmod(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float modf(float, float*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float exp(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float frexp(float, int*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ldexp(float, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float asin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sinh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float acos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cosh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan2(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tanh(float);
# 9518 "/usr/local/cuda-8.0/include/math_functions.h"
}
# 9609 "/usr/local/cuda-8.0/include/math_functions.h"
static inline __attribute__((host)) __attribute__((device)) float logb(float a);

static inline __attribute__((host)) __attribute__((device)) int ilogb(float a);

static inline __attribute__((host)) __attribute__((device)) float scalbn(float a, int b);

static inline __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b);

static inline __attribute__((host)) __attribute__((device)) float exp2(float a);

static inline __attribute__((host)) __attribute__((device)) float expm1(float a);

static inline __attribute__((host)) __attribute__((device)) float log2(float a);

static inline __attribute__((host)) __attribute__((device)) float log1p(float a);

static inline __attribute__((host)) __attribute__((device)) float acosh(float a);

static inline __attribute__((host)) __attribute__((device)) float asinh(float a);

static inline __attribute__((host)) __attribute__((device)) float atanh(float a);

static inline __attribute__((host)) __attribute__((device)) float hypot(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float norm3d(float a, float b, float c);

static inline __attribute__((host)) __attribute__((device)) float norm4d(float a, float b, float c, float d);

static inline __attribute__((host)) __attribute__((device)) float cbrt(float a);

static inline __attribute__((host)) __attribute__((device)) float erf(float a);

static inline __attribute__((host)) __attribute__((device)) float erfc(float a);

static inline __attribute__((host)) __attribute__((device)) float lgamma(float a);

static inline __attribute__((host)) __attribute__((device)) float tgamma(float a);

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float nextafter(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float remainder(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo);

static inline __attribute__((host)) __attribute__((device)) float round(float a);

static inline __attribute__((host)) __attribute__((device)) long int lround(float a);

static inline __attribute__((host)) __attribute__((device)) long long int llround(float a);

static inline __attribute__((host)) __attribute__((device)) float trunc(float a);

static inline __attribute__((host)) __attribute__((device)) float rint(float a);

static inline __attribute__((host)) __attribute__((device)) long int lrint(float a);

static inline __attribute__((host)) __attribute__((device)) long long int llrint(float a);

static inline __attribute__((host)) __attribute__((device)) float nearbyint(float a);

static inline __attribute__((host)) __attribute__((device)) float fdim(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c);

static inline __attribute__((host)) __attribute__((device)) float fmax(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float fmin(float a, float b);
# 9718 "/usr/local/cuda-8.0/include/math_functions.h"
static inline __attribute__((host)) __attribute__((device)) float exp10(float a);

static inline __attribute__((host)) __attribute__((device)) float rsqrt(float a);

static inline __attribute__((host)) __attribute__((device)) float rcbrt(float a);

static inline __attribute__((host)) __attribute__((device)) float sinpi(float a);

static inline __attribute__((host)) __attribute__((device)) float cospi(float a);

static inline __attribute__((host)) __attribute__((device)) void sincospi(float a, float *sptr, float *cptr);

static inline __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr);

static inline __attribute__((host)) __attribute__((device)) float j0(float a);

static inline __attribute__((host)) __attribute__((device)) float j1(float a);

static inline __attribute__((host)) __attribute__((device)) float jn(int n, float a);

static inline __attribute__((host)) __attribute__((device)) float y0(float a);

static inline __attribute__((host)) __attribute__((device)) float y1(float a);

static inline __attribute__((host)) __attribute__((device)) float yn(int n, float a);

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i0(float a);

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i1(float a);

static inline __attribute__((host)) __attribute__((device)) float erfinv(float a);

static inline __attribute__((host)) __attribute__((device)) float erfcinv(float a);

static inline __attribute__((host)) __attribute__((device)) float normcdfinv(float a);

static inline __attribute__((host)) __attribute__((device)) float normcdf(float a);

static inline __attribute__((host)) __attribute__((device)) float erfcx(float a);

static inline __attribute__((host)) __attribute__((device)) double copysign(double a, float b);

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, double b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b);

static inline __attribute__((host)) __attribute__((device)) long int min(long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) float min(float a, float b);

static inline __attribute__((host)) __attribute__((device)) double min(double a, double b);

static inline __attribute__((host)) __attribute__((device)) double min(float a, double b);

static inline __attribute__((host)) __attribute__((device)) double min(double a, float b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b);

static inline __attribute__((host)) __attribute__((device)) long int max(long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) float max(float a, float b);

static inline __attribute__((host)) __attribute__((device)) double max(double a, double b);

static inline __attribute__((host)) __attribute__((device)) double max(float a, double b);

static inline __attribute__((host)) __attribute__((device)) double max(double a, float b);
# 10327 "/usr/local/cuda-8.0/include/math_functions.h"
# 1 "/usr/local/cuda-8.0/include/math_functions.hpp" 1
# 67 "/usr/local/cuda-8.0/include/math_functions.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 68 "/usr/local/cuda-8.0/include/math_functions.hpp" 2
# 248 "/usr/local/cuda-8.0/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(float x) { return __signbitf(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(double x) { return __signbit(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(long double x) { return __signbitl(x);}
# 265 "/usr/local/cuda-8.0/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(float x) { return __finitef(x); }
# 280 "/usr/local/cuda-8.0/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(double x) { return __finite(x); }
# 293 "/usr/local/cuda-8.0/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(long double x) { return __finitel(x); }


__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(float x) { return __isnanf(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(double x) throw() { return __isnan(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(long double x) { return __isnanl(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(float x) { return __isinff(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(double x) throw() { return __isinf(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(long double x) { return __isinfl(x); }
# 503 "/usr/local/cuda-8.0/include/math_functions.hpp"
static inline __attribute__((host)) __attribute__((device)) float logb(float a)
{
  return logbf(a);
}

static inline __attribute__((host)) __attribute__((device)) int ilogb(float a)
{
  return ilogbf(a);
}

static inline __attribute__((host)) __attribute__((device)) float scalbn(float a, int b)
{
  return scalbnf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b)
{
  return scalblnf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float exp2(float a)
{
  return exp2f(a);
}

static inline __attribute__((host)) __attribute__((device)) float expm1(float a)
{
  return expm1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float log2(float a)
{
  return log2f(a);
}

static inline __attribute__((host)) __attribute__((device)) float log1p(float a)
{
  return log1pf(a);
}

static inline __attribute__((host)) __attribute__((device)) float acosh(float a)
{
  return acoshf(a);
}

static inline __attribute__((host)) __attribute__((device)) float asinh(float a)
{
  return asinhf(a);
}

static inline __attribute__((host)) __attribute__((device)) float atanh(float a)
{
  return atanhf(a);
}

static inline __attribute__((host)) __attribute__((device)) float hypot(float a, float b)
{
  return hypotf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float norm3d(float a, float b, float c)
{
  return norm3df(a, b, c);
}

static inline __attribute__((host)) __attribute__((device)) float norm4d(float a, float b, float c, float d)
{
  return norm4df(a, b, c, d);
}

static inline __attribute__((host)) __attribute__((device)) float cbrt(float a)
{
  return cbrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float erf(float a)
{
  return erff(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfc(float a)
{
  return erfcf(a);
}

static inline __attribute__((host)) __attribute__((device)) float lgamma(float a)
{
  return lgammaf(a);
}

static inline __attribute__((host)) __attribute__((device)) float tgamma(float a)
{
  return tgammaf(a);
}

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, float b)
{
  return copysignf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float nextafter(float a, float b)
{
  return nextafterf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float remainder(float a, float b)
{
  return remainderf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo)
{
  return remquof(a, b, quo);
}

static inline __attribute__((host)) __attribute__((device)) float round(float a)
{
  return roundf(a);
}

static inline __attribute__((host)) __attribute__((device)) long int lround(float a)
{
  return lroundf(a);
}

static inline __attribute__((host)) __attribute__((device)) long long int llround(float a)
{
  return llroundf(a);
}

static inline __attribute__((host)) __attribute__((device)) float trunc(float a)
{
  return truncf(a);
}

static inline __attribute__((host)) __attribute__((device)) float rint(float a)
{
  return rintf(a);
}

static inline __attribute__((host)) __attribute__((device)) long int lrint(float a)
{
  return lrintf(a);
}

static inline __attribute__((host)) __attribute__((device)) long long int llrint(float a)
{
  return llrintf(a);
}

static inline __attribute__((host)) __attribute__((device)) float nearbyint(float a)
{
  return nearbyintf(a);
}

static inline __attribute__((host)) __attribute__((device)) float fdim(float a, float b)
{
  return fdimf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c)
{
  return fmaf(a, b, c);
}

static inline __attribute__((host)) __attribute__((device)) float fmax(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float fmin(float a, float b)
{
  return fminf(a, b);
}




static inline __attribute__((host)) __attribute__((device)) float exp10(float a)
{
  return exp10f(a);
}

static inline __attribute__((host)) __attribute__((device)) float rsqrt(float a)
{
  return rsqrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float rcbrt(float a)
{
  return rcbrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float sinpi(float a)
{
  return sinpif(a);
}

static inline __attribute__((host)) __attribute__((device)) float cospi(float a)
{
  return cospif(a);
}

static inline __attribute__((host)) __attribute__((device)) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __attribute__((host)) __attribute__((device)) float j0(float a)
{
  return j0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float j1(float a)
{
  return j1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float jn(int n, float a)
{
  return jnf(n, a);
}

static inline __attribute__((host)) __attribute__((device)) float y0(float a)
{
  return y0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float y1(float a)
{
  return y1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float yn(int n, float a)
{
  return ynf(n, a);
}

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfinv(float a)
{
  return erfinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfcinv(float a)
{
  return erfcinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float normcdf(float a)
{
  return normcdff(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfcx(float a)
{
  return erfcxf(a);
}

static inline __attribute__((host)) __attribute__((device)) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static inline __attribute__((host)) __attribute__((device)) long int min(long int a, long int b)
{





  if (sizeof(long int) == sizeof(int)) {



    return (long int)min((int)a, (int)b);
  } else {
    return (long int)llmin((long long int)a, (long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static inline __attribute__((host)) __attribute__((device)) float min(float a, float b)
{
  return fminf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(double a, double b)
{
  return fmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(float a, double b)
{
  return fmin((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static inline __attribute__((host)) __attribute__((device)) long int max(long int a, long int b)
{




  if (sizeof(long int) == sizeof(int)) {



    return (long int)max((int)a, (int)b);
  } else {
    return (long int)llmax((long long int)a, (long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static inline __attribute__((host)) __attribute__((device)) float max(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(double a, double b)
{
  return fmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(float a, double b)
{
  return fmax((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(double a, float b)
{
  return fmax(a, (double)b);
}
# 10328 "/usr/local/cuda-8.0/include/math_functions.h" 2



# 1 "/usr/local/cuda-8.0/include/math_functions_dbl_ptx3.h" 1
# 270 "/usr/local/cuda-8.0/include/math_functions_dbl_ptx3.h"
# 1 "/usr/local/cuda-8.0/include/math_functions_dbl_ptx3.hpp" 1
# 271 "/usr/local/cuda-8.0/include/math_functions_dbl_ptx3.h" 2
# 10332 "/usr/local/cuda-8.0/include/math_functions.h" 2
# 250 "/usr/local/cuda-8.0/include/common_functions.h" 2
# 117 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-8.0/include/cuda_surface_types.h" 1
# 61 "/usr/local/cuda-8.0/include/cuda_surface_types.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 62 "/usr/local/cuda-8.0/include/cuda_surface_types.h" 2
# 77 "/usr/local/cuda-8.0/include/cuda_surface_types.h"
template<class T, int dim = 1>
struct __attribute__((device_builtin_surface_type)) surface : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __attribute__((host)) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }

};

template<int dim>
struct __attribute__((device_builtin_surface_type)) surface<void, dim> : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }

};
# 118 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-8.0/include/cuda_texture_types.h" 1
# 61 "/usr/local/cuda-8.0/include/cuda_texture_types.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 62 "/usr/local/cuda-8.0/include/cuda_texture_types.h" 2
# 77 "/usr/local/cuda-8.0/include/cuda_texture_types.h"
template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __attribute__((device_builtin_texture_type)) texture : public textureReference
{

  __attribute__((host)) texture(int norm = 0,
                   enum cudaTextureFilterMode fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = cudaCreateChannelDesc<T>();
    sRGB = 0;
  }

  __attribute__((host)) texture(int norm,
                   enum cudaTextureFilterMode fMode,
                   enum cudaTextureAddressMode aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = desc;
    sRGB = 0;
  }

};
# 119 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-8.0/include/device_functions.h" 1
# 80 "/usr/local/cuda-8.0/include/device_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 81 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 90 "/usr/local/cuda-8.0/include/device_functions.h"
extern "C"
{
# 101 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __mulhi(int x, int y);
# 111 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __umulhi(unsigned int x, unsigned int y);
# 121 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __mul64hi(long long int x, long long int y);
# 131 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);
# 140 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int_as_float(int x);
# 149 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float_as_int(float x);
# 158 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint_as_float(unsigned int x);
# 167 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float_as_uint(float x);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __syncthreads(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __prof_trigger(int);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __threadfence(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __threadfence_block(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __trap(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __brkpt(int c = 0);
# 196 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __saturatef(float x);
# 265 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __sad(int x, int y, unsigned int z);
# 333 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __usad(unsigned int x, unsigned int y, unsigned int z);
# 343 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __mul24(int x, int y);
# 353 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __umul24(unsigned int x, unsigned int y);
# 366 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float fdividef(float x, float y);
# 441 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdividef(float x, float y);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) double fdivide(double x, double y);
# 454 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __sinf(float x) 
# 454 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                      throw ()
# 454 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                             ;
# 466 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __cosf(float x) 
# 466 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                      throw ()
# 466 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                             ;
# 480 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __tanf(float x) 
# 480 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                      throw ()
# 480 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                             ;
# 495 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void __sincosf(float x, float *sptr, float *cptr) 
# 495 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                                                   throw ()
# 495 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                                                          ;
# 545 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __expf(float x) 
# 545 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                      throw ()
# 545 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                             ;
# 577 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __exp10f(float x) 
# 577 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                        throw ()
# 577 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                               ;
# 603 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log2f(float x) 
# 603 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                       throw ()
# 603 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                              ;
# 631 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log10f(float x) 
# 631 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                        throw ()
# 631 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                               ;
# 675 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __logf(float x) 
# 675 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                      throw ()
# 675 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                             ;
# 718 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __powf(float x, float y) 
# 718 "/usr/local/cuda-8.0/include/device_functions.h" 3 4
                                                                                                               throw ()
# 718 "/usr/local/cuda-8.0/include/device_functions.h"
                                                                                                                      ;
# 727 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rn(float x);
# 736 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rz(float x);
# 745 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_ru(float);
# 754 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rd(float x);
# 763 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rn(float x);
# 772 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rz(float x);
# 781 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_ru(float x);
# 790 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rd(float x);
# 799 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rn(int x);
# 808 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rz(int x);
# 817 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_ru(int x);
# 826 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rd(int x);
# 835 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rn(unsigned int x);
# 844 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rz(unsigned int x);
# 853 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_ru(unsigned int x);
# 862 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rd(unsigned int x);
# 871 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rn(float x);
# 880 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rz(float x);
# 889 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_ru(float x);
# 898 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rd(float x);
# 907 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rn(float x);
# 916 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rz(float x);
# 925 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_ru(float x);
# 934 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rd(float x);
# 943 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rn(long long int x);
# 952 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rz(long long int x);
# 961 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_ru(long long int x);
# 970 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rd(long long int x);
# 979 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rn(unsigned long long int x);
# 988 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rz(unsigned long long int x);
# 997 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_ru(unsigned long long int x);
# 1006 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rd(unsigned long long int x);
# 1015 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned short __float2half_rn(float x);
# 1024 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __half2float(unsigned short x);
# 1036 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rn(float x, float y);
# 1048 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rz(float x, float y);
# 1060 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_ru(float x, float y);
# 1072 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rd(float x, float y);
# 1084 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rn(float x, float y);
# 1096 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rz(float x, float y);
# 1108 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_ru(float x, float y);
# 1120 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rd(float x, float y);
# 1132 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rn(float x, float y);
# 1144 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rz(float x, float y);
# 1156 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_ru(float x, float y);
# 1168 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rd(float x, float y);
# 1321 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rn(float x, float y, float z);
# 1474 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rz(float x, float y, float z);
# 1627 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_ru(float x, float y, float z);
# 1780 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rd(float x, float y, float z);
# 1813 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rn(float x);
# 1846 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rz(float x);
# 1879 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_ru(float x);
# 1912 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rd(float x);
# 1943 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rn(float x);
# 1974 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rz(float x);
# 2005 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_ru(float x);
# 2036 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rd(float x);
# 2075 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frsqrt_rn(float x);
# 2086 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rn(float x, float y);
# 2097 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rz(float x, float y);
# 2108 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_ru(float x, float y);
# 2119 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rd(float x, float y);
# 2128 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __clz(int x);
# 2139 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __ffs(int x);
# 2148 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __popc(unsigned int x);
# 2157 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __brev(unsigned int x);
# 2166 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __clzll(long long int x);
# 2177 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __ffsll(long long int x);
# 2188 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __popcll(unsigned long long int x);
# 2197 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __brevll(unsigned long long int x);
# 2221 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s);
# 2233 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __hadd(int, int);
# 2246 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __rhadd(int, int);
# 2258 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __uhadd(unsigned int, unsigned int);
# 2271 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __urhadd(unsigned int, unsigned int);
# 2281 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __double2int_rz(double);
# 2290 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __double2uint_rz(double);
# 2299 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __double2ll_rz(double);
# 2308 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __double2ull_rz(double);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm0(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm1(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm2(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm3(void);
# 2338 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabs2(unsigned int a);
# 2349 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsss2(unsigned int a);
# 2360 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vadd2(unsigned int a, unsigned int b);
# 2371 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddss2 (unsigned int a, unsigned int b);
# 2381 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddus2 (unsigned int a, unsigned int b);
# 2392 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgs2(unsigned int a, unsigned int b);
# 2403 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgu2(unsigned int a, unsigned int b);
# 2414 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vhaddu2(unsigned int a, unsigned int b);
# 2425 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpeq2(unsigned int a, unsigned int b);
# 2436 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpges2(unsigned int a, unsigned int b);
# 2447 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);
# 2458 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgts2(unsigned int a, unsigned int b);
# 2469 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);
# 2480 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmples2(unsigned int a, unsigned int b);
# 2492 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpleu2(unsigned int a, unsigned int b);
# 2503 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmplts2(unsigned int a, unsigned int b);
# 2514 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpltu2(unsigned int a, unsigned int b);
# 2525 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpne2(unsigned int a, unsigned int b);
# 2536 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);
# 2547 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxs2(unsigned int a, unsigned int b);
# 2558 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxu2(unsigned int a, unsigned int b);
# 2569 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmins2(unsigned int a, unsigned int b);
# 2580 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vminu2(unsigned int a, unsigned int b);
# 2591 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vseteq2(unsigned int a, unsigned int b);
# 2602 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetges2(unsigned int a, unsigned int b);
# 2613 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgeu2(unsigned int a, unsigned int b);
# 2624 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgts2(unsigned int a, unsigned int b);
# 2635 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgtu2(unsigned int a, unsigned int b);
# 2646 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetles2(unsigned int a, unsigned int b);
# 2657 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetleu2(unsigned int a, unsigned int b);
# 2668 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetlts2(unsigned int a, unsigned int b);
# 2679 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetltu2(unsigned int a, unsigned int b);
# 2690 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetne2(unsigned int a, unsigned int b);
# 2701 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsadu2(unsigned int a, unsigned int b);
# 2712 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsub2(unsigned int a, unsigned int b);
# 2723 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubss2 (unsigned int a, unsigned int b);
# 2734 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubus2 (unsigned int a, unsigned int b);
# 2744 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vneg2(unsigned int a);
# 2754 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vnegss2(unsigned int a);
# 2765 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);
# 2776 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsads2(unsigned int a, unsigned int b);
# 2786 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabs4(unsigned int a);
# 2797 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsss4(unsigned int a);
# 2808 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vadd4(unsigned int a, unsigned int b);
# 2819 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddss4 (unsigned int a, unsigned int b);
# 2829 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddus4 (unsigned int a, unsigned int b);
# 2840 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgs4(unsigned int a, unsigned int b);
# 2851 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgu4(unsigned int a, unsigned int b);
# 2862 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vhaddu4(unsigned int a, unsigned int b);
# 2873 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpeq4(unsigned int a, unsigned int b);
# 2884 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpges4(unsigned int a, unsigned int b);
# 2895 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);
# 2906 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgts4(unsigned int a, unsigned int b);
# 2917 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);
# 2928 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmples4(unsigned int a, unsigned int b);
# 2939 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpleu4(unsigned int a, unsigned int b);
# 2950 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmplts4(unsigned int a, unsigned int b);
# 2961 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpltu4(unsigned int a, unsigned int b);
# 2972 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpne4(unsigned int a, unsigned int b);
# 2983 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);
# 2994 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxs4(unsigned int a, unsigned int b);
# 3005 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxu4(unsigned int a, unsigned int b);
# 3016 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmins4(unsigned int a, unsigned int b);
# 3027 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vminu4(unsigned int a, unsigned int b);
# 3038 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vseteq4(unsigned int a, unsigned int b);
# 3049 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetles4(unsigned int a, unsigned int b);
# 3060 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetleu4(unsigned int a, unsigned int b);
# 3071 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetlts4(unsigned int a, unsigned int b);
# 3082 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetltu4(unsigned int a, unsigned int b);
# 3093 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetges4(unsigned int a, unsigned int b);
# 3104 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgeu4(unsigned int a, unsigned int b);
# 3115 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgts4(unsigned int a, unsigned int b);
# 3126 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgtu4(unsigned int a, unsigned int b);
# 3137 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetne4(unsigned int a, unsigned int b);
# 3148 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsadu4(unsigned int a, unsigned int b);
# 3159 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsub4(unsigned int a, unsigned int b);
# 3170 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubss4(unsigned int a, unsigned int b);
# 3181 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubus4(unsigned int a, unsigned int b);
# 3191 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vneg4(unsigned int a);
# 3201 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vnegss4(unsigned int a);
# 3212 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);
# 3223 "/usr/local/cuda-8.0/include/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int mulhi(int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(unsigned int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(unsigned int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) long long int mul64hi(long long int a, long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(long long int a, unsigned long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(unsigned long long int a, long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int float_as_int(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float int_as_float(int a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int float_as_uint(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float uint_as_float(unsigned int a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float saturate(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int mul24(int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int umul24(unsigned int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __trap() instead."))) void trap(void);


static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __brkpt() instead."))) void brkpt(int c = 0);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __syncthreads() instead."))) void syncthreads(void);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __prof_trigger() instead."))) void prof_trigger(int e);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) __attribute((deprecated("Please use __threadfence() instead."))) void threadfence(bool global = true);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);
# 4511 "/usr/local/cuda-8.0/include/device_functions.h"
# 1 "/usr/local/cuda-8.0/include/device_functions.hpp" 1
# 72 "/usr/local/cuda-8.0/include/device_functions.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 73 "/usr/local/cuda-8.0/include/device_functions.hpp" 2
# 83 "/usr/local/cuda-8.0/include/device_functions.hpp"
static __inline__ __attribute__((device)) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline__ __attribute__((device)) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline__ __attribute__((device)) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline__ __attribute__((device)) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline__ __attribute__((device)) unsigned int float_as_uint(float a)
{
  return __float_as_uint(a);
}

static __inline__ __attribute__((device)) float uint_as_float(unsigned int a)
{
  return __uint_as_float(a);
}
static __inline__ __attribute__((device)) float saturate(float a)
{
  return __saturatef(a);
}

static __inline__ __attribute__((device)) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline__ __attribute__((device)) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline__ __attribute__((device)) void trap(void)
{
  __trap();
}


static __inline__ __attribute__((device)) void brkpt(int c)
{
  __brkpt(c);
}

static __inline__ __attribute__((device)) void syncthreads(void)
{
  __syncthreads();
}

static __inline__ __attribute__((device)) void prof_trigger(int e)
{
       if (e == 0) __prof_trigger( 0);
  else if (e == 1) __prof_trigger( 1);
  else if (e == 2) __prof_trigger( 2);
  else if (e == 3) __prof_trigger( 3);
  else if (e == 4) __prof_trigger( 4);
  else if (e == 5) __prof_trigger( 5);
  else if (e == 6) __prof_trigger( 6);
  else if (e == 7) __prof_trigger( 7);
  else if (e == 8) __prof_trigger( 8);
  else if (e == 9) __prof_trigger( 9);
  else if (e == 10) __prof_trigger(10);
  else if (e == 11) __prof_trigger(11);
  else if (e == 12) __prof_trigger(12);
  else if (e == 13) __prof_trigger(13);
  else if (e == 14) __prof_trigger(14);
  else if (e == 15) __prof_trigger(15);
}

static __inline__ __attribute__((device)) void threadfence(bool global)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline__ __attribute__((device)) int float2int(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf ? __float2int_ru(a) :
         mode == cudaRoundMinInf ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int float2uint(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf ? __float2uint_ru(a) :
         mode == cudaRoundMinInf ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline__ __attribute__((device)) float int2float(int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline__ __attribute__((device)) float uint2float(unsigned int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}
# 4512 "/usr/local/cuda-8.0/include/device_functions.h" 2


# 1 "/usr/local/cuda-8.0/include/device_atomic_functions.h" 1
# 67 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 68 "/usr/local/cuda-8.0/include/device_atomic_functions.h" 2
# 78 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicAdd(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicExch(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) float __fAtomicExch(float *address, float val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicMin(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicMax(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicAnd(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicOr(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicXor(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicCAS(int *address, int compare, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);

}
# 111 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
static __inline__ __attribute__((device)) int atomicAdd(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicSub(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicExch(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) float atomicExch(float *address, float val) ;

static __inline__ __attribute__((device)) int atomicMin(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicMax(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicOr(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicXor(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val) ;







# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 160 "/usr/local/cuda-8.0/include/device_atomic_functions.h" 2




extern "C"
{


extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);

extern __attribute__((device)) __attribute__((device_builtin)) int __any(int cond);
extern __attribute__((device)) __attribute__((device_builtin)) int __all(int cond);

}
# 185 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val) ;

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val) ;

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val) ;

static __inline__ __attribute__((device)) bool any(bool cond) ;

static __inline__ __attribute__((device)) bool all(bool cond) ;







# 1 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp" 1
# 67 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 68 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp" 2
# 76 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp"
static __inline__ __attribute__((device)) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline__ __attribute__((device)) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline__ __attribute__((device)) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline__ __attribute__((device)) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline__ __attribute__((device)) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}







# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 188 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp" 2
# 196 "/usr/local/cuda-8.0/include/device_atomic_functions.hpp"
static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline__ __attribute__((device)) bool all(bool cond)
{
  return (bool)__all((int)cond);
}
# 202 "/usr/local/cuda-8.0/include/device_atomic_functions.h" 2
# 4515 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/device_double_functions.h" 1
# 75 "/usr/local/cuda-8.0/include/device_double_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 76 "/usr/local/cuda-8.0/include/device_double_functions.h" 2




extern "C"
{
# 91 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double_as_longlong(double x);
# 100 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __longlong_as_double(long long int x);
# 257 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rn(double x, double y, double z);
# 414 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rz(double x, double y, double z);
# 571 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_ru(double x, double y, double z);
# 728 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rd(double x, double y, double z);
# 740 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rn(double x, double y);
# 752 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rz(double x, double y);
# 764 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_ru(double x, double y);
# 776 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rd(double x, double y);
# 788 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rn(double x, double y);
# 800 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rz(double x, double y);
# 812 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_ru(double x, double y);
# 824 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rd(double x, double y);
# 836 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rn(double x, double y);
# 848 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rz(double x, double y);
# 860 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_ru(double x, double y);
# 872 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rd(double x, double y);
# 881 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rn(double x);
# 890 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rz(double x);
# 899 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_ru(double x);
# 908 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rd(double x);
# 917 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rn(double x);
# 926 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_ru(double x);
# 935 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rd(double x);
# 944 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rn(double x);
# 953 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_ru(double x);
# 962 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rd(double x);
# 971 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rn(double x);
# 980 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_ru(double x);
# 989 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rd(double x);
# 998 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rn(double x);
# 1007 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_ru(double x);
# 1016 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rd(double x);







extern __attribute__((device)) __attribute__((device_builtin)) double __int2double_rn(int x);







extern __attribute__((device)) __attribute__((device_builtin)) double __uint2double_rn(unsigned int x);
# 1041 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rn(long long int x);
# 1050 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rz(long long int x);
# 1059 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_ru(long long int x);
# 1068 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rd(long long int x);
# 1077 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rn(unsigned long long int x);
# 1086 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rz(unsigned long long int x);
# 1095 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_ru(unsigned long long int x);
# 1104 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rd(unsigned long long int x);
# 1113 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2hiint(double x);
# 1122 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2loint(double x);
# 1132 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __hiloint2double(int hi, int lo);

}
# 1143 "/usr/local/cuda-8.0/include/device_double_functions.h"
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);
# 1195 "/usr/local/cuda-8.0/include/device_double_functions.h"
# 1 "/usr/local/cuda-8.0/include/device_double_functions.hpp" 1
# 75 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 76 "/usr/local/cuda-8.0/include/device_double_functions.hpp" 2
# 85 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf ? __double2int_ru(a) :
         mode == cudaRoundMinInf ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf ? __double2uint_ru(a) :
         mode == cudaRoundMinInf ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf ? __double2ll_ru(a) :
         mode == cudaRoundMinInf ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf ? __double2ull_ru(a) :
         mode == cudaRoundMinInf ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}
# 1196 "/usr/local/cuda-8.0/include/device_double_functions.h" 2
# 4516 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.h" 1
# 67 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 68 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.h" 2
# 79 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) float __fAtomicAdd(float *address, float val);

}
# 94 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.h"
static __inline__ __attribute__((device)) float atomicAdd(float *address, float val) ;







# 1 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.hpp" 1
# 67 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 68 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.hpp" 2
# 76 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.hpp"
static __inline__ __attribute__((device)) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}
# 103 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.h" 2
# 4517 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h" 1
# 69 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 70 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h" 2
# 81 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) long long __illAtomicMin(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) long long __illAtomicMax(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicMin(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicMax(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicAnd(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicOr (unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicXor(unsigned long long *address, unsigned long long val);

}
# 102 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
static __inline__ __attribute__((device)) long long atomicMin(long long *address, long long val) ;

static __inline__ __attribute__((device)) long long atomicMax(long long *address, long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicMin(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicMax(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicOr(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicXor(unsigned long long *address, unsigned long long val) ;
# 124 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
# 1 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.hpp" 1
# 69 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 70 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.hpp" 2
# 78 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.hpp"
static __inline__ __attribute__((device)) long long atomicMin(long long *address, long long val)
{
    return __illAtomicMin(address, val);
}

static __inline__ __attribute__((device)) long long atomicMax(long long *address, long long val)
{
    return __illAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicMin(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicMax(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicOr(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicXor(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicXor(address, val);
}
# 125 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h" 2
# 4518 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_35_atomic_functions.h" 1
# 4519 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h" 1
# 70 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 71 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h" 2
# 83 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) double __dAtomicAdd(double *address, double val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicAdd_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicAdd_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicAdd_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicAdd_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicAdd_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicAdd_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
float __fAtomicAdd_block(float *address, float val);

extern __attribute__((device)) __attribute__((device_builtin))
float __fAtomicAdd_system(float *address, float val);

extern __attribute__((device)) __attribute__((device_builtin))
double __dAtomicAdd_block(double *address, double val);

extern __attribute__((device)) __attribute__((device_builtin))
double __dAtomicAdd_system(double *address, double val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicExch_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicExch_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicExch_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicExch_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicExch_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicExch_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
float __fAtomicExch_block(float *address, float val);

extern __attribute__((device)) __attribute__((device_builtin))
float __fAtomicExch_system(float *address, float val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicMin_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicMin_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __illAtomicMin_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __illAtomicMin_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicMin_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicMin_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicMin_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicMin_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicMax_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicMax_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __illAtomicMax_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __illAtomicMax_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicMax_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicMax_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicMax_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicMax_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicInc_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicInc_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicDec_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicDec_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicCAS_block(int *address, int compare, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicCAS_system(int *address, int compare, int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicCAS_block(unsigned int *address, unsigned int compare,
                                unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicCAS_system(unsigned int *address, unsigned int compare,
                                 unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicCAS_block(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicCAS_system(unsigned long long int *address,
                                         unsigned long long int compare,
                                         unsigned long long int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicAnd_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicAnd_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicAnd_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicAnd_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicAnd_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicAnd_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicAnd_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicAnd_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicOr_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicOr_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicOr_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicOr_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicOr_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicOr_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicOr_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicOr_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicXor_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicXor_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicXor_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicXor_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicXor_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicXor_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicXor_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicXor_system(unsigned long long *address, unsigned long long val);

}
# 308 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
static __inline__ __attribute__((device)) double atomicAdd(double *address, double val) ;

static __inline__ __attribute__((device))
int atomicAdd_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicAdd_system(int *address, int val) ;

static __inline__ __attribute__((device))
unsigned int atomicAdd_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicAdd_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
float atomicAdd_block(float *address, float val) ;

static __inline__ __attribute__((device))
float atomicAdd_system(float *address, float val) ;

static __inline__ __attribute__((device))
double atomicAdd_block(double *address, double val) ;

static __inline__ __attribute__((device))
double atomicAdd_system(double *address, double val) ;

static __inline__ __attribute__((device))
int atomicExch_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicExch_system(int *address, int val) ;

static __inline__ __attribute__((device))
unsigned int atomicExch_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicExch_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
float atomicExch_block(float *address, float val) ;

static __inline__ __attribute__((device))
float atomicExch_system(float *address, float val) ;

static __inline__ __attribute__((device))
int atomicMin_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicMin_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicMin_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicMin_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicMin_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicMin_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
int atomicMax_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicMax_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicMax_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicMax_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicMax_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicMax_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicInc_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicInc_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicDec_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicDec_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
int atomicCAS_block(int *address, int compare, int val) ;

static __inline__ __attribute__((device))
int atomicCAS_system(int *address, int compare, int val) ;

static __inline__ __attribute__((device))
unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,
                             unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,
                              unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_block(unsigned long long int *address,
                                       unsigned long long int compare,
                                       unsigned long long int val) ;

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_system(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val) ;

static __inline__ __attribute__((device))
int atomicAnd_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicAnd_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicAnd_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicAnd_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicAnd_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicAnd_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
int atomicOr_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicOr_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicOr_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicOr_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicOr_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicOr_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
int atomicXor_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicXor_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicXor_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicXor_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicXor_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicXor_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) ;
# 528 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
# 1 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.hpp" 1
# 69 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 70 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.hpp" 2
# 78 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.hpp"
static __inline__ __attribute__((device)) double atomicAdd(double *address, double val)
{
  return __dAtomicAdd(address, val);
}

static __inline__ __attribute__((device))
int atomicAdd_block(int *address, int val)
{
  return __iAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
int atomicAdd_system(int *address, int val)
{
  return __iAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAdd_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAdd_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
float atomicAdd_block(float *address, float val)
{
  return __fAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
float atomicAdd_system(float *address, float val)
{
  return __fAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
double atomicAdd_block(double *address, double val)
{
  return __dAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
double atomicAdd_system(double *address, double val)
{
  return __dAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
int atomicExch_block(int *address, int val)
{
  return __iAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
int atomicExch_system(int *address, int val)
{
  return __iAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicExch_block(unsigned int *address, unsigned int val)
{
  return __uAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicExch_system(unsigned int *address, unsigned int val)
{
  return __uAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
float atomicExch_block(float *address, float val)
{
  return __fAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
float atomicExch_system(float *address, float val)
{
  return __fAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
int atomicMin_block(int *address, int val)
{
  return __iAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
int atomicMin_system(int *address, int val)
{
  return __iAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicMin_block(long long *address, long long val)
{
  return __illAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicMin_system(long long *address, long long val)
{
  return __illAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMin_block(unsigned int *address, unsigned int val)
{
  return __uAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMin_system(unsigned int *address, unsigned int val)
{
  return __uAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
int atomicMax_block(int *address, int val)
{
  return __iAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
int atomicMax_system(int *address, int val)
{
  return __iAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicMax_block(long long *address, long long val)
{
  return __illAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicMax_system(long long *address, long long val)
{
  return __illAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMax_block(unsigned int *address, unsigned int val)
{
  return __uAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMax_system(unsigned int *address, unsigned int val)
{
  return __uAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicInc_block(unsigned int *address, unsigned int val)
{
  return __uAtomicInc_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicInc_system(unsigned int *address, unsigned int val)
{
  return __uAtomicInc_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicDec_block(unsigned int *address, unsigned int val)
{
  return __uAtomicDec_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicDec_system(unsigned int *address, unsigned int val)
{
  return __uAtomicDec_system(address, val);
}

static __inline__ __attribute__((device))
int atomicCAS_block(int *address, int compare, int val)
{
  return __iAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
int atomicCAS_system(int *address, int compare, int val)
{
  return __iAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,
                             unsigned int val)
{
  return __uAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,
                              unsigned int val)
{
  return __uAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_block(unsigned long long int *address,
                                       unsigned long long int compare,
                                       unsigned long long int val)
{
  return __ullAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_system(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val)
{
  return __ullAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
int atomicAnd_block(int *address, int val)
{
  return __iAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
int atomicAnd_system(int *address, int val)
{
  return __iAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicAnd_block(long long *address, long long val)
{
  return __llAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicAnd_system(long long *address, long long val)
{
  return __llAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAnd_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAnd_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
int atomicOr_block(int *address, int val)
{
  return __iAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
int atomicOr_system(int *address, int val)
{
  return __iAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicOr_block(long long *address, long long val)
{
  return __llAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicOr_system(long long *address, long long val)
{
  return __llAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicOr_block(unsigned int *address, unsigned int val)
{
  return __uAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicOr_system(unsigned int *address, unsigned int val)
{
  return __uAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
int atomicXor_block(int *address, int val)
{
  return __iAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
int atomicXor_system(int *address, int val)
{
  return __iAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicXor_block(long long *address, long long val)
{
  return __llAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicXor_system(long long *address, long long val)
{
  return __llAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicXor_block(unsigned int *address, unsigned int val)
{
  return __uAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicXor_system(unsigned int *address, unsigned int val)
{
  return __uAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicXor_system(address, val);
}
# 529 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h" 2
# 4520 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h" 1
# 67 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 68 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h" 2
# 79 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) void __threadfence_system(void);
# 94 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rn(double x, double y);
# 106 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rz(double x, double y);
# 118 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_ru(double x, double y);
# 130 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rd(double x, double y);
# 164 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rn(double x);
# 198 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rz(double x);
# 232 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_ru(double x);
# 266 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rd(double x);
# 298 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rn(double x);
# 330 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rz(double x);
# 362 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_ru(double x);
# 394 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rd(double x);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __ballot(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_count(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_and(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_or(int);
extern __attribute__((device)) __attribute__((device_builtin)) long long int clock64(void);






extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rn(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rz(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_ru(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rd(float, float, float);
# 421 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double_as_longlong(double x);
# 430 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __longlong_as_double(long long int x);
# 587 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rn(double x, double y, double z);
# 744 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rz(double x, double y, double z);
# 901 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_ru(double x, double y, double z);
# 1058 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rd(double x, double y, double z);
# 1070 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rn(double x, double y);
# 1082 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rz(double x, double y);
# 1094 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_ru(double x, double y);
# 1106 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rd(double x, double y);
# 1118 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rn(double x, double y);
# 1130 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rz(double x, double y);
# 1142 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_ru(double x, double y);
# 1154 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rd(double x, double y);
# 1166 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rn(double x, double y);
# 1178 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rz(double x, double y);
# 1190 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_ru(double x, double y);
# 1202 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rd(double x, double y);
# 1211 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rn(double x);
# 1220 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rz(double x);
# 1229 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_ru(double x);
# 1238 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rd(double x);
# 1247 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rn(double x);
# 1256 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_ru(double x);
# 1265 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rd(double x);
# 1274 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rn(double x);
# 1283 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_ru(double x);
# 1292 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rd(double x);
# 1301 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rn(double x);
# 1310 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_ru(double x);
# 1319 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rd(double x);
# 1328 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rn(double x);
# 1337 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_ru(double x);
# 1346 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rd(double x);







extern __attribute__((device)) __attribute__((device_builtin)) double __int2double_rn(int x);







extern __attribute__((device)) __attribute__((device_builtin)) double __uint2double_rn(unsigned int x);
# 1371 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rn(long long int x);
# 1380 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rz(long long int x);
# 1389 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_ru(long long int x);
# 1398 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rd(long long int x);
# 1407 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rn(unsigned long long int x);
# 1416 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rz(unsigned long long int x);
# 1425 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_ru(unsigned long long int x);
# 1434 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rd(unsigned long long int x);
# 1443 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2hiint(double x);
# 1452 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2loint(double x);
# 1462 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __hiloint2double(int hi, int lo);



}
# 1475 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
static __inline__ __attribute__((device)) unsigned int ballot(bool pred) ;

static __inline__ __attribute__((device)) int syncthreads_count(bool pred) ;

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred) ;

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred) ;




static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr) ;







# 1 "/usr/local/cuda-8.0/include/sm_20_intrinsics.hpp" 1
# 67 "/usr/local/cuda-8.0/include/sm_20_intrinsics.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 68 "/usr/local/cuda-8.0/include/sm_20_intrinsics.hpp" 2
# 77 "/usr/local/cuda-8.0/include/sm_20_intrinsics.hpp"
static __inline__ __attribute__((device)) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline__ __attribute__((device)) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"

                  "} \n\t" : "=r"(ret) : "l"(ptr));




    return ret;
}
# 1495 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h" 2
# 4521 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h" 1
# 69 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 70 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h" 2
# 98 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
static __attribute__((device)) __inline__ int __shfl(int var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ unsigned int __shfl(unsigned int var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ int __shfl_up(int var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ unsigned int __shfl_up(unsigned int var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ int __shfl_down(int var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ unsigned int __shfl_down(unsigned int var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ int __shfl_xor(int var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ unsigned int __shfl_xor(unsigned int var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ float __shfl(float var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ float __shfl_up(float var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ float __shfl_down(float var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ float __shfl_xor(float var, int laneMask, int width=32) ;


static __attribute__((device)) __inline__ long long __shfl(long long var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ unsigned long long __shfl(unsigned long long var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ long long __shfl_up(long long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ long long __shfl_down(long long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ long long __shfl_xor(long long var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ double __shfl(double var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ double __shfl_up(double var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ double __shfl_down(double var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ double __shfl_xor(double var, int laneMask, int width=32) ;



static __attribute__((device)) __inline__ long __shfl(long var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ unsigned long __shfl(unsigned long var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ long __shfl_up(long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ unsigned long __shfl_up(unsigned long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ long __shfl_down(long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ unsigned long __shfl_down(unsigned long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ long __shfl_xor(long var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ unsigned long __shfl_xor(unsigned long var, int laneMask, int width=32) ;
# 177 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
# 1 "/usr/local/cuda-8.0/include/sm_30_intrinsics.hpp" 1
# 69 "/usr/local/cuda-8.0/include/sm_30_intrinsics.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 70 "/usr/local/cuda-8.0/include/sm_30_intrinsics.hpp" 2





extern "C"
{


}
# 99 "/usr/local/cuda-8.0/include/sm_30_intrinsics.hpp"
static __attribute__((device)) __inline__ int __shfl(int var, int srcLane, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(srcLane), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl(unsigned int var, int srcLane, int width) {
 return (unsigned int) __shfl((int)var, srcLane, width);
}

static __attribute__((device)) __inline__ int __shfl_up(int var, unsigned int delta, int width) {
 int ret;
 int c = (32 -width) << 8;
 asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
 return ret;
}
static __attribute__((device)) __inline__ unsigned int __shfl_up(unsigned int var, unsigned int delta, int width) {
 return (unsigned int) __shfl_up((int)var, delta, width);
}

static __attribute__((device)) __inline__ int __shfl_down(int var, unsigned int delta, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl_down(unsigned int var, unsigned int delta, int width) {
 return (unsigned int) __shfl_down((int)var, delta, width);
}

static __attribute__((device)) __inline__ int __shfl_xor(int var, int laneMask, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(laneMask), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl_xor(unsigned int var, int laneMask, int width) {
 return (unsigned int) __shfl_xor((int)var, laneMask, width);
}

static __attribute__((device)) __inline__ float __shfl(float var, int srcLane, int width) {
 float ret;
    int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(srcLane), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_up(float var, unsigned int delta, int width) {
 float ret;
    int c;
 c = (32 -width) << 8;
 asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_down(float var, unsigned int delta, int width) {
 float ret;
    int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_xor(float var, int laneMask, int width) {
 float ret;
    int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(laneMask), "r"(c));
 return ret;
}


static __attribute__((device)) __inline__ long long __shfl(long long var, int srcLane, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl(hi, srcLane, width);
 lo = __shfl(lo, srcLane, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl(unsigned long long var, int srcLane, int width) {
 return (unsigned long long) __shfl((long long) var, srcLane, width);
}

static __attribute__((device)) __inline__ long long __shfl_up(long long var, unsigned int delta, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_up(hi, delta, width);
 lo = __shfl_up(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width) {
 return (unsigned long long) __shfl_up((long long) var, delta, width);
}

static __attribute__((device)) __inline__ long long __shfl_down(long long var, unsigned int delta, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_down(hi, delta, width);
 lo = __shfl_down(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width) {
 return (unsigned long long) __shfl_down((long long) var, delta, width);
}

static __attribute__((device)) __inline__ long long __shfl_xor(long long var, int laneMask, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_xor(hi, laneMask, width);
 lo = __shfl_xor(lo, laneMask, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width) {
 return (unsigned long long) __shfl_xor((long long) var, laneMask, width);
}

static __attribute__((device)) __inline__ double __shfl(double var, int srcLane, int width) {
 float lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
 hi = __shfl(hi, srcLane, width);
 lo = __shfl(lo, srcLane, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_up(double var, unsigned int delta, int width) {
 float lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
 hi = __shfl_up(hi, delta, width);
 lo = __shfl_up(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_down(double var, unsigned int delta, int width) {
 float lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
 hi = __shfl_down(hi, delta, width);
 lo = __shfl_down(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_xor(double var, int laneMask, int width) {
 float lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
 hi = __shfl_xor(hi, laneMask, width);
 lo = __shfl_xor(lo, laneMask, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
 return var;
}



static __attribute__((device)) __inline__ long __shfl(long var, int srcLane, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl((long long) var, srcLane, width) :
  __shfl((int) var, srcLane, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl(unsigned long var, int srcLane, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl((unsigned long long) var, srcLane, width) :
  __shfl((unsigned int) var, srcLane, width);
}

static __attribute__((device)) __inline__ long __shfl_up(long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_up((long long) var, delta, width) :
  __shfl_up((int) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_up(unsigned long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_up((unsigned long long) var, delta, width) :
  __shfl_up((unsigned int) var, delta, width);
}

static __attribute__((device)) __inline__ long __shfl_down(long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_down((long long) var, delta, width) :
  __shfl_down((int) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_down(unsigned long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_down((unsigned long long) var, delta, width) :
  __shfl_down((unsigned int) var, delta, width);
}

static __attribute__((device)) __inline__ long __shfl_xor(long var, int laneMask, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_xor((long long) var, laneMask, width) :
  __shfl_xor((int) var, laneMask, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_xor(unsigned long var, int laneMask, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_xor((unsigned long long) var, laneMask, width) :
  __shfl_xor((unsigned int) var, laneMask, width);
}
# 178 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h" 2
# 4522 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h" 1
# 69 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 70 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h" 2
# 89 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
static __attribute__((device)) __inline__ long __ldg(const long *ptr) ;
static __attribute__((device)) __inline__ unsigned long __ldg(const unsigned long *ptr) ;

static __attribute__((device)) __inline__ char __ldg(const char *ptr) ;
static __attribute__((device)) __inline__ signed char __ldg(const signed char *ptr) ;
static __attribute__((device)) __inline__ short __ldg(const short *ptr) ;
static __attribute__((device)) __inline__ int __ldg(const int *ptr) ;
static __attribute__((device)) __inline__ long long __ldg(const long long *ptr) ;
static __attribute__((device)) __inline__ char2 __ldg(const char2 *ptr) ;
static __attribute__((device)) __inline__ char4 __ldg(const char4 *ptr) ;
static __attribute__((device)) __inline__ short2 __ldg(const short2 *ptr) ;
static __attribute__((device)) __inline__ short4 __ldg(const short4 *ptr) ;
static __attribute__((device)) __inline__ int2 __ldg(const int2 *ptr) ;
static __attribute__((device)) __inline__ int4 __ldg(const int4 *ptr) ;
static __attribute__((device)) __inline__ longlong2 __ldg(const longlong2 *ptr) ;

static __attribute__((device)) __inline__ unsigned char __ldg(const unsigned char *ptr) ;
static __attribute__((device)) __inline__ unsigned short __ldg(const unsigned short *ptr) ;
static __attribute__((device)) __inline__ unsigned int __ldg(const unsigned int *ptr) ;
static __attribute__((device)) __inline__ unsigned long long __ldg(const unsigned long long *ptr) ;
static __attribute__((device)) __inline__ uchar2 __ldg(const uchar2 *ptr) ;
static __attribute__((device)) __inline__ uchar4 __ldg(const uchar4 *ptr) ;
static __attribute__((device)) __inline__ ushort2 __ldg(const ushort2 *ptr) ;
static __attribute__((device)) __inline__ ushort4 __ldg(const ushort4 *ptr) ;
static __attribute__((device)) __inline__ uint2 __ldg(const uint2 *ptr) ;
static __attribute__((device)) __inline__ uint4 __ldg(const uint4 *ptr) ;
static __attribute__((device)) __inline__ ulonglong2 __ldg(const ulonglong2 *ptr) ;

static __attribute__((device)) __inline__ float __ldg(const float *ptr) ;
static __attribute__((device)) __inline__ double __ldg(const double *ptr) ;
static __attribute__((device)) __inline__ float2 __ldg(const float2 *ptr) ;
static __attribute__((device)) __inline__ float4 __ldg(const float4 *ptr) ;
static __attribute__((device)) __inline__ double2 __ldg(const double2 *ptr) ;



static __attribute__((device)) __inline__ long __ldcg(const long *ptr) ;
static __attribute__((device)) __inline__ unsigned long __ldcg(const unsigned long *ptr) ;

static __attribute__((device)) __inline__ char __ldcg(const char *ptr) ;
static __attribute__((device)) __inline__ signed char __ldcg(const signed char *ptr) ;
static __attribute__((device)) __inline__ short __ldcg(const short *ptr) ;
static __attribute__((device)) __inline__ int __ldcg(const int *ptr) ;
static __attribute__((device)) __inline__ long long __ldcg(const long long *ptr) ;
static __attribute__((device)) __inline__ char2 __ldcg(const char2 *ptr) ;
static __attribute__((device)) __inline__ char4 __ldcg(const char4 *ptr) ;
static __attribute__((device)) __inline__ short2 __ldcg(const short2 *ptr) ;
static __attribute__((device)) __inline__ short4 __ldcg(const short4 *ptr) ;
static __attribute__((device)) __inline__ int2 __ldcg(const int2 *ptr) ;
static __attribute__((device)) __inline__ int4 __ldcg(const int4 *ptr) ;
static __attribute__((device)) __inline__ longlong2 __ldcg(const longlong2 *ptr) ;

static __attribute__((device)) __inline__ unsigned char __ldcg(const unsigned char *ptr) ;
static __attribute__((device)) __inline__ unsigned short __ldcg(const unsigned short *ptr) ;
static __attribute__((device)) __inline__ unsigned int __ldcg(const unsigned int *ptr) ;
static __attribute__((device)) __inline__ unsigned long long __ldcg(const unsigned long long *ptr) ;
static __attribute__((device)) __inline__ uchar2 __ldcg(const uchar2 *ptr) ;
static __attribute__((device)) __inline__ uchar4 __ldcg(const uchar4 *ptr) ;
static __attribute__((device)) __inline__ ushort2 __ldcg(const ushort2 *ptr) ;
static __attribute__((device)) __inline__ ushort4 __ldcg(const ushort4 *ptr) ;
static __attribute__((device)) __inline__ uint2 __ldcg(const uint2 *ptr) ;
static __attribute__((device)) __inline__ uint4 __ldcg(const uint4 *ptr) ;
static __attribute__((device)) __inline__ ulonglong2 __ldcg(const ulonglong2 *ptr) ;

static __attribute__((device)) __inline__ float __ldcg(const float *ptr) ;
static __attribute__((device)) __inline__ double __ldcg(const double *ptr) ;
static __attribute__((device)) __inline__ float2 __ldcg(const float2 *ptr) ;
static __attribute__((device)) __inline__ float4 __ldcg(const float4 *ptr) ;
static __attribute__((device)) __inline__ double2 __ldcg(const double2 *ptr) ;



static __attribute__((device)) __inline__ long __ldca(const long *ptr) ;
static __attribute__((device)) __inline__ unsigned long __ldca(const unsigned long *ptr) ;

static __attribute__((device)) __inline__ char __ldca(const char *ptr) ;
static __attribute__((device)) __inline__ signed char __ldca(const signed char *ptr) ;
static __attribute__((device)) __inline__ short __ldca(const short *ptr) ;
static __attribute__((device)) __inline__ int __ldca(const int *ptr) ;
static __attribute__((device)) __inline__ long long __ldca(const long long *ptr) ;
static __attribute__((device)) __inline__ char2 __ldca(const char2 *ptr) ;
static __attribute__((device)) __inline__ char4 __ldca(const char4 *ptr) ;
static __attribute__((device)) __inline__ short2 __ldca(const short2 *ptr) ;
static __attribute__((device)) __inline__ short4 __ldca(const short4 *ptr) ;
static __attribute__((device)) __inline__ int2 __ldca(const int2 *ptr) ;
static __attribute__((device)) __inline__ int4 __ldca(const int4 *ptr) ;
static __attribute__((device)) __inline__ longlong2 __ldca(const longlong2 *ptr) ;

static __attribute__((device)) __inline__ unsigned char __ldca(const unsigned char *ptr) ;
static __attribute__((device)) __inline__ unsigned short __ldca(const unsigned short *ptr) ;
static __attribute__((device)) __inline__ unsigned int __ldca(const unsigned int *ptr) ;
static __attribute__((device)) __inline__ unsigned long long __ldca(const unsigned long long *ptr) ;
static __attribute__((device)) __inline__ uchar2 __ldca(const uchar2 *ptr) ;
static __attribute__((device)) __inline__ uchar4 __ldca(const uchar4 *ptr) ;
static __attribute__((device)) __inline__ ushort2 __ldca(const ushort2 *ptr) ;
static __attribute__((device)) __inline__ ushort4 __ldca(const ushort4 *ptr) ;
static __attribute__((device)) __inline__ uint2 __ldca(const uint2 *ptr) ;
static __attribute__((device)) __inline__ uint4 __ldca(const uint4 *ptr) ;
static __attribute__((device)) __inline__ ulonglong2 __ldca(const ulonglong2 *ptr) ;

static __attribute__((device)) __inline__ float __ldca(const float *ptr) ;
static __attribute__((device)) __inline__ double __ldca(const double *ptr) ;
static __attribute__((device)) __inline__ float2 __ldca(const float2 *ptr) ;
static __attribute__((device)) __inline__ float4 __ldca(const float4 *ptr) ;
static __attribute__((device)) __inline__ double2 __ldca(const double2 *ptr) ;



static __attribute__((device)) __inline__ long __ldcs(const long *ptr) ;
static __attribute__((device)) __inline__ unsigned long __ldcs(const unsigned long *ptr) ;

static __attribute__((device)) __inline__ char __ldcs(const char *ptr) ;
static __attribute__((device)) __inline__ signed char __ldcs(const signed char *ptr) ;
static __attribute__((device)) __inline__ short __ldcs(const short *ptr) ;
static __attribute__((device)) __inline__ int __ldcs(const int *ptr) ;
static __attribute__((device)) __inline__ long long __ldcs(const long long *ptr) ;
static __attribute__((device)) __inline__ char2 __ldcs(const char2 *ptr) ;
static __attribute__((device)) __inline__ char4 __ldcs(const char4 *ptr) ;
static __attribute__((device)) __inline__ short2 __ldcs(const short2 *ptr) ;
static __attribute__((device)) __inline__ short4 __ldcs(const short4 *ptr) ;
static __attribute__((device)) __inline__ int2 __ldcs(const int2 *ptr) ;
static __attribute__((device)) __inline__ int4 __ldcs(const int4 *ptr) ;
static __attribute__((device)) __inline__ longlong2 __ldcs(const longlong2 *ptr) ;

static __attribute__((device)) __inline__ unsigned char __ldcs(const unsigned char *ptr) ;
static __attribute__((device)) __inline__ unsigned short __ldcs(const unsigned short *ptr) ;
static __attribute__((device)) __inline__ unsigned int __ldcs(const unsigned int *ptr) ;
static __attribute__((device)) __inline__ unsigned long long __ldcs(const unsigned long long *ptr) ;
static __attribute__((device)) __inline__ uchar2 __ldcs(const uchar2 *ptr) ;
static __attribute__((device)) __inline__ uchar4 __ldcs(const uchar4 *ptr) ;
static __attribute__((device)) __inline__ ushort2 __ldcs(const ushort2 *ptr) ;
static __attribute__((device)) __inline__ ushort4 __ldcs(const ushort4 *ptr) ;
static __attribute__((device)) __inline__ uint2 __ldcs(const uint2 *ptr) ;
static __attribute__((device)) __inline__ uint4 __ldcs(const uint4 *ptr) ;
static __attribute__((device)) __inline__ ulonglong2 __ldcs(const ulonglong2 *ptr) ;

static __attribute__((device)) __inline__ float __ldcs(const float *ptr) ;
static __attribute__((device)) __inline__ double __ldcs(const double *ptr) ;
static __attribute__((device)) __inline__ float2 __ldcs(const float2 *ptr) ;
static __attribute__((device)) __inline__ float4 __ldcs(const float4 *ptr) ;
static __attribute__((device)) __inline__ double2 __ldcs(const double2 *ptr) ;






static __attribute__((device)) __inline__ unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift) ;
static __attribute__((device)) __inline__ unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift) ;


static __attribute__((device)) __inline__ unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift) ;
static __attribute__((device)) __inline__ unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift) ;
# 251 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
# 1 "/usr/local/cuda-8.0/include/sm_32_intrinsics.hpp" 1
# 69 "/usr/local/cuda-8.0/include/sm_32_intrinsics.hpp"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 70 "/usr/local/cuda-8.0/include/sm_32_intrinsics.hpp" 2





extern "C"
{


}
# 103 "/usr/local/cuda-8.0/include/sm_32_intrinsics.hpp"
static __attribute__((device)) __inline__ long __ldg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ signed char __ldg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __attribute__((device)) __inline__ short __ldg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.nc.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.nc.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.nc.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.nc.v2.s64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.nc.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.nc.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.nc.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.nc.v2.u64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldg(const float *ptr) { float ret; asm volatile ("ld.global.nc.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldg(const double *ptr) { double ret; asm volatile ("ld.global.nc.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.nc.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.nc.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }
# 149 "/usr/local/cuda-8.0/include/sm_32_intrinsics.hpp"
static __attribute__((device)) __inline__ long __ldcg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldcg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldcg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ signed char __ldcg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __attribute__((device)) __inline__ short __ldcg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldcg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldcg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldcg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cg.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldcg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cg.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldcg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cg.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldcg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cg.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldcg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cg.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldcg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cg.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldcg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cg.v2.s64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldcg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldcg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldcg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldcg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldcg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cg.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldcg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cg.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldcg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cg.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldcg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cg.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldcg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cg.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldcg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cg.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldcg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cg.v2.u64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldcg(const float *ptr) { float ret; asm volatile ("ld.global.cg.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldcg(const double *ptr) { double ret; asm volatile ("ld.global.cg.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldcg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cg.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldcg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cg.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldcg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cg.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }







static __attribute__((device)) __inline__ long __ldca(const long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldca(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldca(const char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ signed char __ldca(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __attribute__((device)) __inline__ short __ldca(const short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldca(const int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldca(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldca(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.ca.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldca(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.ca.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldca(const short2 *ptr) { short2 ret; asm volatile ("ld.global.ca.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldca(const short4 *ptr) { short4 ret; asm volatile ("ld.global.ca.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldca(const int2 *ptr) { int2 ret; asm volatile ("ld.global.ca.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldca(const int4 *ptr) { int4 ret; asm volatile ("ld.global.ca.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldca(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.ca.v2.s64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldca(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldca(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldca(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldca(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldca(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.ca.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldca(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.ca.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldca(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.ca.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldca(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.ca.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldca(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.ca.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldca(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.ca.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldca(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.ca.v2.u64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldca(const float *ptr) { float ret; asm volatile ("ld.global.ca.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldca(const double *ptr) { double ret; asm volatile ("ld.global.ca.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldca(const float2 *ptr) { float2 ret; asm volatile ("ld.global.ca.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldca(const float4 *ptr) { float4 ret; asm volatile ("ld.global.ca.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldca(const double2 *ptr) { double2 ret; asm volatile ("ld.global.ca.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }







static __attribute__((device)) __inline__ long __ldcs(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldcs(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldcs(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ signed char __ldcs(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __attribute__((device)) __inline__ short __ldcs(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldcs(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldcs(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldcs(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cs.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldcs(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cs.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldcs(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cs.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldcs(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cs.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldcs(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cs.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldcs(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cs.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldcs(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cs.v2.s64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldcs(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldcs(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldcs(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldcs(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldcs(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cs.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldcs(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cs.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldcs(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cs.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldcs(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cs.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldcs(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cs.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldcs(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cs.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldcs(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cs.v2.u64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldcs(const float *ptr) { float ret; asm volatile ("ld.global.cs.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldcs(const double *ptr) { double ret; asm volatile ("ld.global.cs.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldcs(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cs.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldcs(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cs.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldcs(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cs.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }
# 286 "/usr/local/cuda-8.0/include/sm_32_intrinsics.hpp"
static __attribute__((device)) __inline__ unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __attribute__((device)) __inline__ unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


static __attribute__((device)) __inline__ unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __attribute__((device)) __inline__ unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
# 252 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h" 2
# 4523 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_35_intrinsics.h" 1
# 4524 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h" 1
# 122 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
# 1 "/usr/local/cuda-8.0/include/sm_61_intrinsics.hpp" 1
# 123 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h" 2
# 4525 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/surface_functions.h" 1
# 68 "/usr/local/cuda-8.0/include/surface_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 69 "/usr/local/cuda-8.0/include/surface_functions.h" 2
# 82 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1Dreadc1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1Dreadc2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc2");
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1Dreadc4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadc4");
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1Dreads1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads1");
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1Dreads2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads2");
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1Dreads4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreads4");
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1Dreadu1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu1");
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1Dreadu2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu2");
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1Dreadu4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadu4");
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1Dreadl1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadl1");
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1Dreadl2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dreadl2");







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu2(surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu4(surf, x, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf1Dread(&tmp, surf, x, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1Dread<T>(surf, x, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_ulonglong2") ;
# 228 "/usr/local/cuda-8.0/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dread_float4") ;
# 242 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2Dreadc1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2Dreadc2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2Dreadc4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2Dreads1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2Dreads2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2Dreads4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2Dreadu1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2Dreadu2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2Dreadu4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2Dreadl1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2Dreadl2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dreadl2");







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2Dread<T>(surf, x, y, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong1") ;
template<>__attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_ulonglong2") ;
# 390 "/usr/local/cuda-8.0/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dread_float4") ;
# 404 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf3Dreadc1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf3Dreadc2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf3Dreadc4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf3Dreads1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf3Dreads2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf3Dreads4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf3Dreadu1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf3Dreadu2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf3Dreadu4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf3Dreadl1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf3Dreadl2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dreadl2") ;







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf3Dread<T>(surf, x, y, z, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_ulonglong2") ;
# 551 "/usr/local/cuda-8.0/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dread_float4") ;
# 564 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1DLayeredreadc1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1DLayeredreadc2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc2");
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1DLayeredreadc4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadc4");
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1DLayeredreads1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads1");
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1DLayeredreads2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads2");
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1DLayeredreads4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreads4");
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1DLayeredreadu1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu1");
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1DLayeredreadu2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu2");
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1DLayeredreadu4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadu4");
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1DLayeredreadl1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadl1");
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1DLayeredreadl2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredreadl2");







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1DLayeredread<T>(surf, x, layer, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_ulonglong2") ;
# 712 "/usr/local/cuda-8.0/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredread_float4") ;
# 726 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;

extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(surface<void, 0x0C> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;

extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc1");
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadc4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads2") ;
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreads4") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl1") ;
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xFC> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredreadl2") ;







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_ulonglong2") ;
# 898 "/usr/local/cuda-8.0/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf2DLayeredread_float4") ;
# 919 "/usr/local/cuda-8.0/include/surface_functions.h"
template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapread<T>(surf, x, y, face, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_ulonglong2") ;
# 1049 "/usr/local/cuda-8.0/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapread_float4") ;
# 1070 "/usr/local/cuda-8.0/include/surface_functions.h"
template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T tmp;

  surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode);

  return tmp;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);

}


template<> __attribute__((device)) __attribute__((cudart_builtin)) char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) signed char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_schar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) char4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_char4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uchar4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uchar4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) short4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_short4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ushort4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ushort4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) int4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_int4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) uint4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_uint4") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) longlong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_longlong2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) ulonglong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_ulonglong2") ;
# 1200 "/usr/local/cuda-8.0/include/surface_functions.h"
template<> __attribute__((device)) __attribute__((cudart_builtin)) float surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float1") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float2") ;
template<> __attribute__((device)) __attribute__((cudart_builtin)) float4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode) asm("__surfCubemapLayeredread_float4") ;
# 1214 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec1( uchar1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec1");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec2( uchar2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec2");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec4( uchar4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritec4");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites1( ushort1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites1");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites2( ushort2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites2");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites4( ushort4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwrites4");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu1( uint1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu1");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu2( uint2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu2");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu4( uint4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwriteu4");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel1(ulonglong1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritel1");
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel2(ulonglong2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode) asm("__surf1Dwritel2");







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf1Dwrite(val, surf, x, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_ulonglong2") ;
# 1345 "/usr/local/cuda-8.0/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1Dwrite_float4") ;
# 1359 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec1( uchar1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec2( uchar2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec4( uchar4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritec4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites1( ushort1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites2( ushort2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites4( ushort4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwrites4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu1( uint1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu2( uint2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu4( uint4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwriteu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel1(ulonglong1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritel1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel2(ulonglong2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode) asm("__surf2Dwritel2") ;







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode);

}

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_ulonglong2") ;
# 1489 "/usr/local/cuda-8.0/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2Dwrite_float4") ;
# 1502 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec1( uchar1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec2( uchar2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec4( uchar4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritec4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites1( ushort1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites2( ushort2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites4( ushort4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwrites4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu1( uint1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu2( uint2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu4( uint4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwriteu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel1(ulonglong1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritel1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel2(ulonglong2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode) asm("__surf3Dwritel2") ;







template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_ulonglong2") ;
# 1633 "/usr/local/cuda-8.0/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf3Dwrite_float4") ;
# 1647 "/usr/local/cuda-8.0/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec1( uchar1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec2( uchar2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec4( uchar4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritec4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites1( ushort1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites2( ushort2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites4( ushort4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwrites4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu1( uint1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu2( uint2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu2") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu4( uint4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwriteu4") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel1(ulonglong1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritel1") ;
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel2(ulonglong2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode) asm("__surf1DLayeredwritel2") ;
# 1666 "/usr/local/cuda-8.0/include/surface_functions.h"
template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_ulonglong2") ;
# 1779 "/usr/local/cuda-8.0/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf1DLayeredwrite_float4") ;
# 1792 "/usr/local/cuda-8.0/include/surface_functions.h"
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec1( uchar1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec2( uchar2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec4( uchar4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites1( ushort1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites2( ushort2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites4( ushort4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu1( uint1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu2( uint2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu4( uint4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel1(ulonglong1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel2(ulonglong2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode) ;
# 1822 "/usr/local/cuda-8.0/include/surface_functions.h"
template<class T>
 __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_ulonglong2") ;
# 1936 "/usr/local/cuda-8.0/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surf2DLayeredwrite_float4") ;
# 1958 "/usr/local/cuda-8.0/include/surface_functions.h"
template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_ulonglong2") ;
# 2071 "/usr/local/cuda-8.0/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapwrite_float4") ;
# 2093 "/usr/local/cuda-8.0/include/surface_functions.h"
template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode);

}


__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_longlong2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_ulonglong2") ;
# 2206 "/usr/local/cuda-8.0/include/surface_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) asm("__surfCubemapLayeredwrite_float4") ;
# 4526 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/texture_fetch_functions.h" 1
# 62 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 63 "/usr/local/cuda-8.0/include/texture_fetch_functions.h" 2
# 100 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_uint4") ;
# 183 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x) asm("__tex1Dfetch_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_char4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x) asm("__tex1Dfetch_rmnf_ushort4") ;
# 224 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_ushort4") ;


__attribute__((device)) __attribute__((cudart_builtin)) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_uint4") ;
# 313 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x) asm("__tex1D_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x) asm("__tex1D_rmnf_ushort4") ;
# 354 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_uint4") ;
# 445 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y) asm("__tex2D_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y) asm("__tex2D_rmnf_ushort4") ;
# 484 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_uint4") ;
# 573 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer) asm("__tex1DLayered_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer) asm("__tex1DLayered_rmnf_ushort4") ;
# 612 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_uint4") ;
# 703 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer) asm("__tex2DLayered_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer) asm("__tex2DLayered_rmnf_ushort4") ;
# 744 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_uint4") ;
# 833 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z) asm("__tex3D_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__tex3D_rmnf_ushort4") ;
# 873 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_uint4") ;
# 962 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z) asm("__texCubemap_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z) asm("__texCubemap_rmnf_ushort4") ;
# 1001 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_uint4") ;
# 1090 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer) asm("__texCubemapLayered_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer) asm("__texCubemapLayered_rmnf_ushort4") ;
# 1170 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char3") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar3") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2Dgather(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<signed short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<short3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short3") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort3") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2Dgather(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_ushort4") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<signed int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<int3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int3") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<uint3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint3") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2Dgather(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2Dgather(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_uint4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0) asm("__tex2Dgather_float4") ;


__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<signed short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<short3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort3") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0) asm("__tex2Dgather_rmnf_ushort4") ;
# 1241 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DLod(texture<char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DLod(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DLod(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DLod(texture<char1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DLod(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DLod(texture<char2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DLod(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DLod(texture<char4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DLod(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DLod(texture<short, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DLod(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DLod(texture<short1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DLod(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DLod(texture<short2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DLod(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DLod(texture<short4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DLod(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DLod(texture<int, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DLod(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DLod(texture<int1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DLod(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DLod(texture<int2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DLod(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DLod(texture<int4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DLod(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_uint4") ;
# 1330 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<float, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<float1, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<float2, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<float4, 0x01, cudaReadModeElementType> t, float x, float level) asm("__tex1DLod_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLod(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLod(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLod(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLod(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level) asm("__tex1DLod_rmnf_ushort4") ;
# 1369 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DLod(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DLod(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DLod(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DLod(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DLod(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DLod(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DLod(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DLod(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DLod(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DLod(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DLod(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DLod(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DLod(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DLod(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DLod(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DLod(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DLod(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DLod(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DLod(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DLod(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DLod(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DLod(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DLod(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DLod(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DLod(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_uint4") ;
# 1453 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float level) asm("__tex2DLod_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_uchar4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLod(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLod(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLod(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLod(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level) asm("__tex2DLod_rmnf_ushort4") ;
# 1493 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DLayeredLod(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DLayeredLod(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DLayeredLod(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DLayeredLod(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DLayeredLod(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DLayeredLod(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DLayeredLod(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DLayeredLod(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DLayeredLod(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DLayeredLod(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_uint4") ;
# 1582 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level) asm("__tex1DLayeredLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level) asm("__tex1DLayeredLod_rmnf_ushort4") ;
# 1621 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DLayeredLod(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DLayeredLod(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DLayeredLod(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DLayeredLod(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DLayeredLod(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DLayeredLod(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DLayeredLod(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DLayeredLod(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DLayeredLod(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DLayeredLod(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_uint4") ;
# 1710 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level) asm("__tex2DLayeredLod_rmnf_ushort4") ;
# 1749 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex3DLod(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex3DLod(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex3DLod(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex3DLod(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex3DLod(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex3DLod(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex3DLod(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex3DLod(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex3DLod(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex3DLod(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex3DLod(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex3DLod(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex3DLod(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex3DLod(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex3DLod(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex3DLod(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex3DLod(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex3DLod(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex3DLod(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex3DLod(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex3DLod(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex3DLod(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex3DLod(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex3DLod(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex3DLod(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_uint4") ;
# 1838 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__tex3DLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DLod(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DLod(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DLod(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DLod(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__tex3DLod_rmnf_ushort4") ;
# 1877 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char texCubemapLod(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char texCubemapLod(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 texCubemapLod(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 texCubemapLod(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 texCubemapLod(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short texCubemapLod(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 texCubemapLod(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 texCubemapLod(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 texCubemapLod(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int texCubemapLod(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int texCubemapLod(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 texCubemapLod(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 texCubemapLod(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 texCubemapLod(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 texCubemapLod(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 texCubemapLod(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 texCubemapLod(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_uint4") ;
# 1966 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level) asm("__texCubemapLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level) asm("__texCubemapLod_rmnf_ushort4") ;
# 2005 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int texCubemapLayeredLod(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int texCubemapLayeredLod(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 texCubemapLayeredLod(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 texCubemapLayeredLod(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 texCubemapLayeredLod(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 texCubemapLayeredLod(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 texCubemapLayeredLod(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 texCubemapLayeredLod(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_uint4") ;
# 2094 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level) asm("__texCubemapLayeredLod_rmnf_ushort4") ;
# 2133 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DGrad(texture<char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DGrad(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DGrad(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DGrad(texture<char1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DGrad(texture<char2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DGrad(texture<char4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DGrad(texture<short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DGrad(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DGrad(texture<short1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DGrad(texture<short2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DGrad(texture<short4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DGrad(texture<int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DGrad(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DGrad(texture<int1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DGrad(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DGrad(texture<int2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DGrad(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DGrad(texture<int4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DGrad(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_uint4") ;
# 2222 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<float, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<float1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<float2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<float4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DGrad(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy) asm("__tex1DGrad_rmnf_ushort4") ;
# 2261 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DGrad(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DGrad(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DGrad(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DGrad(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DGrad(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DGrad(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DGrad(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DGrad(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DGrad(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DGrad(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DGrad(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DGrad(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DGrad(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DGrad(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DGrad(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DGrad(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DGrad(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DGrad(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DGrad(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_uint4") ;
# 2350 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DGrad(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy) asm("__tex2DGrad_rmnf_ushort4") ;
# 2389 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex1DLayeredGrad(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex1DLayeredGrad(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex1DLayeredGrad(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex1DLayeredGrad(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex1DLayeredGrad(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex1DLayeredGrad(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex1DLayeredGrad(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex1DLayeredGrad(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_uint4") ;
# 2478 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_float4") ;





__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy) asm("__tex1DLayeredGrad_rmnf_ushort4") ;
# 2518 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex2DLayeredGrad(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex2DLayeredGrad(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex2DLayeredGrad(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex2DLayeredGrad(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex2DLayeredGrad(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex2DLayeredGrad(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex2DLayeredGrad(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex2DLayeredGrad(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_uint4") ;
# 2607 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy) asm("__tex2DLayeredGrad_rmnf_ushort4") ;
# 2646 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) char tex3DGrad(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) signed char tex3DGrad(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned char tex3DGrad(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) char1 tex3DGrad(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) char2 tex3DGrad(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) char4 tex3DGrad(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uchar4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) short tex3DGrad(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned short tex3DGrad(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) short1 tex3DGrad(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) short2 tex3DGrad(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) short4 tex3DGrad(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) ushort4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_ushort4") ;

__attribute__((device)) __attribute__((cudart_builtin)) int tex3DGrad(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int") ;
__attribute__((device)) __attribute__((cudart_builtin)) unsigned int tex3DGrad(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint") ;
__attribute__((device)) __attribute__((cudart_builtin)) int1 tex3DGrad(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int1") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint1 tex3DGrad(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint1") ;
__attribute__((device)) __attribute__((cudart_builtin)) int2 tex3DGrad(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int2") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint2 tex3DGrad(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint2") ;
__attribute__((device)) __attribute__((cudart_builtin)) int4 tex3DGrad(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_int4") ;
__attribute__((device)) __attribute__((cudart_builtin)) uint4 tex3DGrad(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_uint4") ;
# 2736 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_float4") ;




__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char_as_schar") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_schar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_char4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_uchar4") ;

__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short") ;
__attribute__((device)) __attribute__((cudart_builtin)) float tex3DGrad(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort1") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort2") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_short4") ;
__attribute__((device)) __attribute__((cudart_builtin)) float4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy) asm("__tex3DGrad_rmnf_ushort4") ;
# 4527 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 1
# 57 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 58 "/usr/local/cuda-8.0/include/texture_indirect_functions.h" 2
# 74 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(char *, cudaTextureObject_t, int) asm("__itex1Dfetch_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(signed char *, cudaTextureObject_t, int) asm("__itex1Dfetch_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(char1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(char2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(char4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(unsigned char *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uchar1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uchar2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uchar4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(short *, cudaTextureObject_t, int) asm("__itex1Dfetch_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(short1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(short2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(short4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(unsigned short *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(ushort1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(ushort2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(ushort4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(int *, cudaTextureObject_t, int) asm("__itex1Dfetch_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(int1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(int2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(int4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(unsigned int *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uint1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uint2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(uint4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_uint4");
# 114 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(float *, cudaTextureObject_t, int) asm("__itex1Dfetch_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(float1 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(float2 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1Dfetch(float4 *, cudaTextureObject_t, int) asm("__itex1Dfetch_float4");



template <class T>
static __attribute__((device)) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{
  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
}
# 142 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(char *, cudaTextureObject_t, float) asm("__itex1D_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(signed char *, cudaTextureObject_t, float) asm("__itex1D_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(char1 *, cudaTextureObject_t, float) asm("__itex1D_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(char2 *, cudaTextureObject_t, float) asm("__itex1D_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(char4 *, cudaTextureObject_t, float) asm("__itex1D_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(unsigned char *, cudaTextureObject_t, float) asm("__itex1D_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uchar1 *, cudaTextureObject_t, float) asm("__itex1D_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uchar2 *, cudaTextureObject_t, float) asm("__itex1D_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uchar4 *, cudaTextureObject_t, float) asm("__itex1D_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(short *, cudaTextureObject_t, float) asm("__itex1D_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(short1 *, cudaTextureObject_t, float) asm("__itex1D_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(short2 *, cudaTextureObject_t, float) asm("__itex1D_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(short4 *, cudaTextureObject_t, float) asm("__itex1D_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(unsigned short *, cudaTextureObject_t, float) asm("__itex1D_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(ushort1 *, cudaTextureObject_t, float) asm("__itex1D_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(ushort2 *, cudaTextureObject_t, float) asm("__itex1D_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(ushort4 *, cudaTextureObject_t, float) asm("__itex1D_ushort4");


__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(int *, cudaTextureObject_t, float) asm("__itex1D_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(int1 *, cudaTextureObject_t, float) asm("__itex1D_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(int2 *, cudaTextureObject_t, float) asm("__itex1D_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(int4 *, cudaTextureObject_t, float) asm("__itex1D_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(unsigned int *, cudaTextureObject_t, float) asm("__itex1D_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uint1 *, cudaTextureObject_t, float) asm("__itex1D_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uint2 *, cudaTextureObject_t, float) asm("__itex1D_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(uint4 *, cudaTextureObject_t, float) asm("__itex1D_uint4");
# 184 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(float *, cudaTextureObject_t, float) asm("__itex1D_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(float1 *, cudaTextureObject_t, float) asm("__itex1D_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(float2 *, cudaTextureObject_t, float) asm("__itex1D_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1D(float4 *, cudaTextureObject_t, float) asm("__itex1D_float4");


template <class T>
static __attribute__((device)) T tex1D(cudaTextureObject_t texObject, float x)
{
  T ret;
  tex1D(&ret, texObject, x);
  return ret;
}
# 212 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(char *, cudaTextureObject_t, float, float) asm("__itex2D_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(signed char *, cudaTextureObject_t, float, float) asm("__itex2D_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(char1 *, cudaTextureObject_t, float, float) asm("__itex2D_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(char2 *, cudaTextureObject_t, float, float) asm("__itex2D_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(char4 *, cudaTextureObject_t, float, float) asm("__itex2D_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(unsigned char *, cudaTextureObject_t, float, float) asm("__itex2D_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uchar1 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uchar2 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uchar4 *, cudaTextureObject_t, float, float) asm("__itex2D_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(short *, cudaTextureObject_t, float, float) asm("__itex2D_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(short1 *, cudaTextureObject_t, float, float) asm("__itex2D_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(short2 *, cudaTextureObject_t, float, float) asm("__itex2D_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(short4 *, cudaTextureObject_t, float, float) asm("__itex2D_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(unsigned short *, cudaTextureObject_t, float, float) asm("__itex2D_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(ushort1 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(ushort2 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(ushort4 *, cudaTextureObject_t, float, float) asm("__itex2D_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(int *, cudaTextureObject_t, float, float) asm("__itex2D_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(int1 *, cudaTextureObject_t, float, float) asm("__itex2D_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(int2 *, cudaTextureObject_t, float, float) asm("__itex2D_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(int4 *, cudaTextureObject_t, float, float) asm("__itex2D_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(unsigned int *, cudaTextureObject_t, float, float) asm("__itex2D_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uint1 *, cudaTextureObject_t, float, float) asm("__itex2D_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uint2 *, cudaTextureObject_t, float, float) asm("__itex2D_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(uint4 *, cudaTextureObject_t, float, float) asm("__itex2D_uint4");
# 252 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(float *, cudaTextureObject_t, float, float) asm("__itex2D_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(float1 *, cudaTextureObject_t, float, float) asm("__itex2D_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(float2 *, cudaTextureObject_t, float, float) asm("__itex2D_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2D(float4 *, cudaTextureObject_t, float, float) asm("__itex2D_float4");


template <class T>
static __attribute__((device)) T tex2D(cudaTextureObject_t texObject, float x, float y)
{
  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
}
# 279 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(char *, cudaTextureObject_t, float, float, float) asm("__itex3D_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(signed char *, cudaTextureObject_t, float, float, float) asm("__itex3D_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(char1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(char2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(char4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(short *, cudaTextureObject_t, float, float, float) asm("__itex3D_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(short1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(short2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(short4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(int *, cudaTextureObject_t, float, float, float) asm("__itex3D_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(int1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(int2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(int4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_uint4");
# 319 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(float *, cudaTextureObject_t, float, float, float) asm("__itex3D_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(float1 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(float2 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3D(float4 *, cudaTextureObject_t, float, float, float) asm("__itex3D_float4");


template <class T>
static __attribute__((device)) T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
}
# 347 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(signed char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(char1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(char2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(char4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(unsigned char *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uchar1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uchar2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uchar4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(short1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(short2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(short4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(unsigned short *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(ushort1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(ushort2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(ushort4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(int1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(int2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(int4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(unsigned int *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uint1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uint2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(uint4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_uint4");
# 387 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(float *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(float1 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(float2 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayered(float4 *, cudaTextureObject_t, float, int) asm("__itex1DLayered_float4");


template <class T>
static __attribute__((device)) T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{
  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
}
# 415 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(signed char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(char1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(char2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(char4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(unsigned char *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uchar1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uchar2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uchar4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(short1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(short2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(short4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(unsigned short *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(ushort1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(ushort2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(ushort4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(int1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(int2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(int4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(unsigned int *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uint1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uint2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(uint4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_uint4");
# 455 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(float *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(float1 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(float2 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayered(float4 *, cudaTextureObject_t, float, float, int) asm("__itex2DLayered_float4");


template <class T>
static __attribute__((device)) T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{
  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
}
# 483 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(signed char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(char1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(char2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(char4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(short1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(short2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(short4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(int1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(int2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(int4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uint1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uint2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(uint4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_uint4");
# 523 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(float *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(float1 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(float2 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemap(float4 *, cudaTextureObject_t, float, float, float) asm("__itexCubemap_float4");


template <class T>
static __attribute__((device)) T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
}
# 551 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(signed char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(char1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(char2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(char4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(unsigned char *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uchar1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uchar2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uchar4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(short1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(short2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(short4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(unsigned short *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(ushort1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(ushort2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(ushort4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(int1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(int2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(int4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(unsigned int *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uint1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uint2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(uint4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_uint4");
# 592 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(float *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(float1 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(float2 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayered(float4 *, cudaTextureObject_t, float, float, float, int) asm("__itexCubemapLayered_float4");


template <class T>
static __attribute__((device)) T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
}
# 617 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(signed char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(char1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(char2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(char4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(unsigned char *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uchar1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uchar2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uchar4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(short1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(short2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(short4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(unsigned short *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(ushort1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(ushort2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(ushort4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(int1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(int2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(int4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(unsigned int *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uint1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uint2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(uint4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_uint4");
# 654 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(float *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(float1 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(float2 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2Dgather(float4 *, cudaTextureObject_t, float, float, int = 0) asm("__itex2Dgather_float4");


template <class T>
static __attribute__((device)) T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{
  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
}
# 682 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(char *, cudaTextureObject_t, float, float) asm("__itex1DLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(signed char *, cudaTextureObject_t, float, float) asm("__itex1DLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(char1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(char2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(char4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(unsigned char *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uchar1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uchar2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uchar4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(short *, cudaTextureObject_t, float, float) asm("__itex1DLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(short1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(short2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(short4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(unsigned short *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(ushort1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(ushort2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(ushort4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(int *, cudaTextureObject_t, float, float) asm("__itex1DLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(int1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(int2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(int4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(unsigned int *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uint1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uint2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(uint4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_uint4");
# 722 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(float *, cudaTextureObject_t, float, float) asm("__itex1DLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(float1 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(float2 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLod(float4 *, cudaTextureObject_t, float, float) asm("__itex1DLod_float4");


template <class T>
static __attribute__((device)) T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{
  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
}
# 750 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(signed char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(char1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(char2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(char4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(short1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(short2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(short4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(int1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(int2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(int4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_uint4");
# 791 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(float *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(float1 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(float2 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLod(float4 *, cudaTextureObject_t, float, float, float) asm("__itex2DLod_float4");


template <class T>
static __attribute__((device)) T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{
  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
}
# 819 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(signed char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(char1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(char2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(char4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(unsigned char *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uchar1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uchar2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uchar4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(short1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(short2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(short4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(unsigned short *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(ushort1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(ushort2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(ushort4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(int1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(int2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(int4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(unsigned int *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uint1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uint2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(uint4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_uint4");
# 859 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(float *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(float1 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(float2 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DLod(float4 *, cudaTextureObject_t texObject, float, float, float, float) asm("__itex3DLod_float4");


template <class T>
static __attribute__((device)) T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
}
# 886 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(signed char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(char1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(char2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(char4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(unsigned char *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uchar1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uchar2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uchar4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(short1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(short2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(short4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(unsigned short *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(ushort1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(ushort2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(ushort4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(int1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(int2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(int4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(unsigned int *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uint1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uint2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(uint4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_uint4");
# 926 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(float *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(float1 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(float2 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredLod(float4 *, cudaTextureObject_t, float, int, float) asm("__itex1DLayeredLod_float4");


template <class T>
static __attribute__((device)) T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{
  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
}
# 954 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(signed char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(char1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(char2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(char4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(unsigned char *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uchar1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uchar2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uchar4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(short1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(short2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(short4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(unsigned short *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(ushort1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(ushort2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(ushort4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(int1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(int2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(int4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(unsigned int *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uint1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uint2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(uint4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_uint4");
# 994 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(float *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(float1 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(float2 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredLod(float4 *, cudaTextureObject_t, float, float, int, float) asm("__itex2DLayeredLod_float4");


template <class T>
static __attribute__((device)) T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
}
# 1021 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(signed char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(char1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(char2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(char4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(unsigned char *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uchar1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uchar2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uchar4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(short1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(short2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(short4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(unsigned short *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(ushort1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(ushort2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(ushort4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(int1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(int2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(int4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(unsigned int *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uint1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uint2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(uint4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_uint4");
# 1061 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(float *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(float1 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(float2 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLod(float4 *, cudaTextureObject_t, float, float, float, float) asm("__itexCubemapLod_float4");


template <class T>
static __attribute__((device)) T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
}
# 1088 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(signed char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(char1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(char2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(char4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(unsigned char *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uchar1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uchar2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uchar4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(short1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(short2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(short4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(unsigned short *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(ushort1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(ushort2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(ushort4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(int1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(int2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(int4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(unsigned int *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uint1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uint2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(uint4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_uint4");
# 1128 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(float *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(float1 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(float2 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void texCubemapLayeredLod(float4 *, cudaTextureObject_t, float, float, float, int, float) asm("__itexCubemapLayeredLod_float4");


template <class T>
static __attribute__((device)) T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
}
# 1155 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(signed char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(char1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(char2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(char4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(unsigned char *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uchar1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uchar2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uchar4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(short1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(short2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(short4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(unsigned short *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(ushort1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(ushort2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(ushort4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(int1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(int2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(int4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(unsigned int *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uint1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uint2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(uint4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_uint4");
# 1196 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(float *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(float1 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(float2 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DGrad(float4 *, cudaTextureObject_t, float, float, float) asm("__itex1DGrad_float4");


template <class T>
static __attribute__((device)) T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
}
# 1223 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(signed char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(char1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(char2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(char4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(unsigned char *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uchar1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uchar2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uchar4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(short1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(short2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(short4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(unsigned short *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(ushort1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(ushort2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(ushort4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(int1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(int2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(int4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(unsigned int *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uint1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uint2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(uint4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_uint4");
# 1263 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(float *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(float1 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(float2 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DGrad(float4 *, cudaTextureObject_t, float, float, float2, float2) asm("__itex2DGrad_float4");


template <class T>
static __attribute__((device)) T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
}
# 1290 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(signed char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(char1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(char2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(char4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(unsigned char *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uchar1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uchar2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uchar4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(short1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(short2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(short4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(unsigned short *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(ushort1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(ushort2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(ushort4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(int1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(int2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(int4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(unsigned int *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uint1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uint2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(uint4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_uint4");
# 1330 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(float *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(float1 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(float2 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex3DGrad(float4 *, cudaTextureObject_t,float, float, float, float4, float4) asm("__itex3DGrad_float4");


template <class T>
static __attribute__((device)) T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
}
# 1357 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char_as_schar");


__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(signed char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(char1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(char2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(char4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(unsigned char *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uchar1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uchar2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uchar4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(short1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(short2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(short4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(unsigned short *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(ushort1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(ushort2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(ushort4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(int1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(int2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(int4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(unsigned int *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uint1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uint2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(uint4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_uint4");
# 1398 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(float *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(float1 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(float2 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex1DLayeredGrad(float4 *, cudaTextureObject_t, float, int, float, float) asm("__itex1DLayeredGrad_float4");


template <class T>
static __attribute__((device)) T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
}
# 1425 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char_as_schar");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(signed char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(char1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(char2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(char4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(unsigned char *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uchar1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uchar2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uchar4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uchar4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(short1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(short2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(short4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(unsigned short *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(ushort1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(ushort2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(ushort4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_ushort4");

__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(int1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(int2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(int4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(unsigned int *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uint1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uint2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(uint4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_uint4");
# 1465 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(float *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(float1 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float1");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(float2 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float2");
__attribute__((device)) __attribute__((cudart_builtin)) void tex2DLayeredGrad(float4 *, cudaTextureObject_t, float, float, int, float2, float2) asm("__itex2DLayeredGrad_float4");


template <class T>
static __attribute__((device)) T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
}
# 4528 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 1 "/usr/local/cuda-8.0/include/surface_indirect_functions.h" 1
# 57 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
# 1 "/usr/local/cuda-8.0/include/builtin_types.h" 1
# 58 "/usr/local/cuda-8.0/include/surface_indirect_functions.h" 2
# 71 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(signed char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(char1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(unsigned char *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uchar1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(short *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(short1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(unsigned short *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ushort1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(int *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(int1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(unsigned int *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uint1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(long long *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(longlong1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(unsigned long long *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ulonglong1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(float *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(float1 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(char2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uchar2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(short2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ushort2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(int2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uint2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(longlong2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ulonglong2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(float2 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(char4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uchar4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(short4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(ushort4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(int4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(uint4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dread(float4 *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dread_float4");



template <class T>
static __attribute__((device)) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;

}
# 131 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(signed char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(char1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(unsigned char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uchar1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(short1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(unsigned short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ushort1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(int1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(unsigned int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uint1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(longlong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(unsigned long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ulonglong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(float *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(float1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(char2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uchar2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(short2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ushort2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(int2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uint2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(longlong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ulonglong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(float2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(char4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uchar4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(short4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(ushort4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(int4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(uint4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dread(float4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dread_float4");



template <class T>
static __attribute__((device)) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;

}
# 192 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dread_float4");


template <class T>
static __attribute__((device)) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;

}
# 250 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(signed char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(char1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(short1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(int1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uint1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(float *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(float1 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(char2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(short2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(int2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uint2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(float2 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float2");


__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(char4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(short4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(int4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(uint4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredread(float4 *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode= cudaBoundaryModeTrap) asm("__isurf1DLayeredread_float4");


template <class T>
static __attribute__((device)) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;

}
# 309 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredread_float4");


template <class T>
static __attribute__((device)) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;

}
# 367 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapread_float4");


template <class T>
static __attribute__((device)) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapread(&ret, surfObject, face, x, y, boundaryMode);
   return ret;

}
# 425 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(signed char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(char1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(unsigned char *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uchar1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(short1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(unsigned short *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ushort1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(int1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(unsigned int *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uint1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(longlong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(unsigned long long *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ulonglong1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(float *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(float1 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(char2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uchar2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(short2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ushort2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(int2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uint2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(longlong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ulonglong2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(float2 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(char4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uchar4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(short4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(ushort4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(int4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(uint4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredread(float4 *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredread_float4");


template <class T>
static __attribute__((device)) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode);
   return ret;

}
# 483 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(signed char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned char, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned short, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned int, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(long long, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(longlong1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(unsigned long long, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ulonglong1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float1, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(longlong2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ulonglong2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float2, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(char4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uchar4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(short4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(ushort4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(int4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(uint4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1Dwrite(float4, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1Dwrite_float4");
# 531 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(signed char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(longlong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(unsigned long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ulonglong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(longlong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ulonglong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(char4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uchar4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(short4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(ushort4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(int4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(uint4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2Dwrite(float4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2Dwrite_float4");
# 579 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_float1");


__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf3Dwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf3Dwrite_float4");
# 630 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(signed char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float1, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float2, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(char4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(short4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(int4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(uint4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf1DLayeredwrite(float4, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf1DLayeredwrite_float4");
# 678 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surf2DLayeredwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurf2DLayeredwrite_float4");
# 726 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapwrite_float4");
# 774 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_char");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(signed char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_schar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_char1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned char, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uchar");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uchar1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_short");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_short1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned short, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ushort");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ushort1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_int");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_int1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned int, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uint");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uint1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_longlong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(longlong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_longlong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(unsigned long long, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ulonglong");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ulonglong1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ulonglong1");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_float");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float1, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_float1");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_char2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uchar2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_short2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ushort2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_int2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uint2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(longlong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_longlong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ulonglong2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ulonglong2");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float2, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_float2");

__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(char4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_char4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uchar4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uchar4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(short4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_short4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(ushort4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_ushort4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(int4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_int4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(uint4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_uint4");
__attribute__((device)) __attribute__((cudart_builtin)) void surfCubemapLayeredwrite(float4, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) asm("__isurfCubemapLayeredwrite_float4");
# 4529 "/usr/local/cuda-8.0/include/device_functions.h" 2
# 120 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-8.0/include/device_launch_parameters.h" 1
# 68 "/usr/local/cuda-8.0/include/device_launch_parameters.h"
extern "C" {


uint3 __attribute__((device_builtin)) extern const threadIdx;
uint3 __attribute__((device_builtin)) extern const blockIdx;
dim3 __attribute__((device_builtin)) extern const blockDim;
dim3 __attribute__((device_builtin)) extern const gridDim;
int __attribute__((device_builtin)) extern const warpSize;




}
# 121 "/usr/local/cuda-8.0/include/cuda_runtime.h" 2
# 183 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
# 221 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaSetupArgument(
  T arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}
# 260 "/usr/local/cuda-8.0/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaEventCreate(
  cudaEvent_t *event,
  unsigned int flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
# 323 "/usr/local/cuda-8.0/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  void **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostAlloc(
  T **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostGetDevicePointer(
  T **pDevice,
  void *pHost,
  unsigned int flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}
# 449 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocManaged(
  T **devPtr,
  size_t size,
  unsigned int flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}
# 528 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t stream,
  T *devPtr,
  size_t length = 0,
  unsigned int flags = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMalloc(
  T **devPtr,
  size_t size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  T **ptr,
  size_t size,
  unsigned int flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocPitch(
  T **devPtr,
  size_t *pitch,
  size_t width,
  size_t height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}
# 604 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbol(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}
# 656 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}
# 702 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}
# 754 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}
# 787 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}
# 816 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}
# 859 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
        size_t size = 
# 865 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3 4
                                                (0x7fffffff * 2U + 1U)

# 866 "/usr/local/cuda-8.0/include/cuda_runtime.h"
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}
# 904 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
        size_t size = 
# 909 "/usr/local/cuda-8.0/include/cuda_runtime.h" 3 4
                                                (0x7fffffff * 2U + 1U)

# 910 "/usr/local/cuda-8.0/include/cuda_runtime.h"
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}
# 960 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}
# 1018 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}
# 1060 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}
# 1098 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}
# 1139 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}
# 1177 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t levelArray;
  cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);

  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}
# 1216 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}
# 1250 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}
# 1302 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(
  T *func,
  enum cudaFuncCache cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(
  T *func,
  enum cudaSharedMemConfig config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}
# 1347 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}
# 1398 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __attribute__((host)) __attribute__((device)) __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __attribute__((host)) __attribute__((device)) size_t operator()(int)
  {
      return n;
  }
};
# 1467 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    cudaError_t status;


    int device;
    struct cudaFuncAttributes attr;


    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;


    int maxBlockSize = 0;
    int numBlocks = 0;
    int maxOccupancy = 0;


    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;





    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }





    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }

    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;





    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {



        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }

        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }



        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }







    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}
# 1662 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}
# 1707 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}
# 1766 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}
# 1814 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}
# 1851 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}
# 1880 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}
# 1909 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}
# 1930 "/usr/local/cuda-8.0/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 1 "<command-line>" 2
# 1 "/home/zhengzhen/workspace/versapipe/examples/reyes/basicTypes/vecs.cu"
# 1 "/home/zhengzhen/workspace/versapipe/examples/reyes/basicTypes/vecs.h" 1



# 1 "/usr/include/c++/5/cstdio" 1 3
# 39 "/usr/include/c++/5/cstdio" 3
       
# 40 "/usr/include/c++/5/cstdio" 3
# 96 "/usr/include/c++/5/cstdio" 3

# 96 "/usr/include/c++/5/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;


  using ::gets;

  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/5/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/5/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 5 "/home/zhengzhen/workspace/versapipe/examples/reyes/basicTypes/vecs.h" 2
# 1 "/usr/include/c++/5/cmath" 1 3
# 39 "/usr/include/c++/5/cmath" 3
       
# 40 "/usr/include/c++/5/cmath" 3
# 6 "/home/zhengzhen/workspace/versapipe/examples/reyes/basicTypes/vecs.h" 2
# 17 "/home/zhengzhen/workspace/versapipe/examples/reyes/basicTypes/vecs.h"

# 17 "/home/zhengzhen/workspace/versapipe/examples/reyes/basicTypes/vecs.h"
class vec4f{
    private:
        float x_, y_, z_, w_;

    public:
        vec4f(float x=0.0f, float y=0.0f, float z=0.0f, float w=1.0f):
              x_(x), y_(y), z_(z), w_(w){}

        vec4f(const vec4f &v){
            x_ = v.x_;
            y_ = v.y_;
            z_ = v.z_;
            w_ = v.w_;
        }

  inline float& x(){return x_;}
        inline float& y(){return y_;}
        inline float& z(){return z_;}
        inline float& w(){return w_;}

        inline float& operator[] (int i){
            return (((i==0) ? x_:((i==1) ? y_:((i==2)?z_:w_))));
        }

        inline const float& peekx() const{return x_;}
        inline const float& peeky() const{return y_;}
        inline const float& peekz() const{return z_;}
        inline const float& peekw() const{return w_;}

        inline vec4f negative() const{return vec4f(-x_, -y_, -z_, -w_);}

  inline float magsqr() const{return (x_*x_ + y_*y_ + z_*z_ + w_*w_);}

        inline float mag() const{return sqrt(magsqr());}

        inline vec4f& normalize() {
   float m=mag();
   if(m!=0.0f){
    x_/=m;
    y_/=m;
    z_/=m;
                w_/=m;
   }

   return (*this);
  }

        inline vec4f& operator=(const vec4f &v){
            if(this!=&v){ x_=v.x_; y_=v.y_; z_=v.z_; w_=v.w_;}
            return *this;
        }

        inline vec4f& operator+=(const vec4f &v){
            x_ += v.x_; y_ += v.y_; z_ += v.z_; w_ += v.w_;
            return *this;
        }

        inline vec4f& operator-=(const vec4f &v){
            x_ -= v.x_; y_ -= v.y_; z_ -= v.z_; w_ -= v.w_;
            return *this;
        }

        inline vec4f& operator*=(const float k){
            x_ *= k; y_ *= k; z_ *= k; w_ *= k;
            return *this;
        }

  inline vec4f& operator*=(vec4f& k){
            x_ *= k.x_; y_ *= k.y_; z_ *= k.z_; w_ *= k.w_;
            return *this;
        }

        inline bool operator==(const vec4f &v) const{return (x_==v.x_ && y_==v.y_ && z_==v.z_ && w_==v.w_);}

        inline bool operator!=(const vec4f &v) const{return !(*this==v);}

  inline vec4f& operator/(float m) {
            if(m != 0){
                x_ = x_ / m;
                y_ = y_ / m;
                z_ = z_ / m;
                w_ = w_ / m;
            }
   return *this;
  }

  inline vec4f operator-() { return vec4f(-x_, -y_, -z_, -w_);}

        inline void display1d() const{printf("v(%0.4f)\n",x_);}
        inline void display2d() const{printf("v(%0.4f %0.4f)\n",x_,y_);}
        inline void display3d() const{printf("v(%0.4f %0.4f %0.4f)\n",x_,y_,z_);}
        inline void display4d() const{printf("v(%0.4f %0.4f %0.4f %0.4f)\n",x_,y_,z_,w_);}

};

class vec3f{
    private:
        float x_, y_, z_;

    public:
        vec3f(float x=0.0f, float y=0.0f, float z=0.0f):
              x_(x), y_(y), z_(z){}

        vec3f(const vec3f &v){
            x_ = v.x_;
            y_ = v.y_;
            z_ = v.z_;
        }

        inline float& x(){return x_;}
        inline float& y(){return y_;}
        inline float& z(){return z_;}

        inline float& operator[] (int i){
            return (((i==0) ? x_:((i==1) ? y_:z_)));
        }

        inline const float& peekx() const{return x_;}
        inline const float& peeky() const{return y_;}
        inline const float& peekz() const{return z_;}

        inline vec3f negative() const{return vec3f(-x_, -y_, -z_);}

  inline float magsqr() const{return (x_*x_ + y_*y_ + z_*z_);}

        inline float mag() const{return sqrt(magsqr());}

        inline void saturatef(float& val){
            if(val < 0.0f) val = 0.0f;
            if(val > 1.0f) val = 1.0f;
        }

        inline vec3f& saturate(){
            saturatef(x_);
            saturatef(y_);
            saturatef(z_);
            return *this;
        }

        inline vec3f& normalize() {
   float m=mag();
   if(m!=0.0f){
    x_/=m;
    y_/=m;
    z_/=m;
   }

   return (*this);
  }

        inline vec3f& operator=(const vec3f &v){
            if(this!=&v){ x_=v.x_; y_=v.y_; z_=v.z_; }
            return *this;
        }

        inline vec3f& operator+=(const vec3f &v){
            x_ += v.x_; y_ += v.y_; z_ += v.z_;
            return *this;
        }

        inline vec3f& operator-=(const vec3f &v){
            x_ -= v.x_; y_ -= v.y_; z_ -= v.z_;
            return *this;
        }

        inline vec3f& operator*=(const float k){
            x_ *= k; y_ *= k; z_ *= k;
            return *this;
        }

  inline vec3f& operator*=(vec3f& k){
            x_ *= k.x_; y_ *= k.y_; z_ *= k.z_;
            return *this;
        }

        inline bool operator==(const vec3f &v) const{return (x_==v.x_ && y_==v.y_ && z_==v.z_);}

        inline bool operator!=(const vec3f &v) const{return !(*this==v);}

  inline vec3f& operator/(float m) {
            if(m != 0){
                x_ = x_ / m;
                y_ = y_ / m;
                z_ = z_ / m;
            }
   return *this;
  }

  inline vec3f operator-() { return vec3f(-x_, -y_, -z_);}

        inline void display1d() const{printf("v(%0.4f)\n",x_);}
        inline void display2d() const{printf("v(%0.4f %0.4f)\n",x_,y_);}
        inline void display3d() const{printf("v(%0.4f %0.4f %0.4f)\n",x_,y_,z_);}

};


class vec2f
{
    private:
        float x_, y_;

    public:
        vec2f(float x=0.0f, float y=0.0f):
              x_(x), y_(y){}

        vec2f(const vec2f &v){
            x_ = v.x_;
            y_ = v.y_;
         }

        inline float& x(){return x_;}
        inline float& y(){return y_;}

        inline float& operator[] (int i){
            return ((i==0) ? x_:y_);
        }

        inline const float& peekx() const{return x_;}
        inline const float& peeky() const{return y_;}

        inline vec2f negative() const{return vec2f(-x_, -y_);}

  inline float magsqr() const{return (x_*x_ + y_*y_);}

        inline float mag() const{return sqrt(magsqr());}

        inline vec2f& normalize() {
   float m=mag();
   if(m!=0.0f){
    x_/=m;
    y_/=m;
   }

   return (*this);
  }

        inline vec2f& operator=(const vec2f &v){
            if(this!=&v){ x_=v.x_; y_=v.y_; }
            return *this;
        }

        inline vec2f& operator+=(const vec2f &v){
            x_ += v.x_; y_ += v.y_;
            return *this;
        }

        inline vec2f& operator-=(const vec2f &v){
            x_ -= v.x_; y_ -= v.y_;
            return *this;
        }

        inline vec2f& operator*=(const float k){
            x_ *= k; y_ *= k;
            return *this;
        }

  inline vec2f& operator*=(vec2f& k){
            x_ *= k.x_; y_ *= k.y_;
            return *this;
        }

        inline bool operator==(const vec2f &v) const{return (x_==v.x_ && y_==v.y_);}

        inline bool operator!=(const vec2f &v) const{return !(*this==v);}

  inline vec2f& operator/(float m) {
            if(m != 0){
                x_ = x_ / m;
                y_ = y_ / m;
            }
   return *this;
  }

  inline vec2f operator-() { return vec2f(-x_, -y_);}

        inline void display1d() const{printf("v(%0.4f)\n",x_);}
        inline void display2d() const{printf("v(%0.4f %0.4f)\n",x_,y_);}

};

vec2f operator+(const vec2f& v1, const vec2f &v2);
vec2f operator-(const vec2f& v1, const vec2f &v2);
vec2f operator*(const vec2f& v1, const float k);
vec2f operator*(const float k, const vec2f& v1);
float dot(const vec2f& v1, const vec2f& v2);

vec3f operator+(const vec3f& v1, const vec3f &v2);
vec3f operator-(const vec3f& v1, const vec3f &v2);
vec3f operator*(const vec3f& v1, const float k);
vec3f operator*(const float k, const vec3f& v1);
vec3f operator*(const vec3f& v1, const vec3f &v2);
float dot(const vec3f& v1, const vec3f& v2);
float dot(const vec4f& v1, const vec3f& v2);
float dot(const vec3f& v1, const vec4f& v2);
float dot(const vec4f& v1, const vec4f& v2);


vec4f operator+(const vec4f& v1, const vec4f &v2);
vec4f operator-(const vec4f& v1, const vec4f &v2);
vec4f operator*(const vec4f& v1, const vec4f &v2);
vec4f operator*(const float& k, const vec4f& v1);
vec4f operator*(const vec4f& v1, const float& k);

inline vec3f lerp(vec3f& a, vec3f& b, float t) { return (a * (1 - t) + b * t); }

inline vec3f cross( const vec3f& v1, const vec3f& v2 )
{
 return vec3f( v1.peeky() * v2.peekz() - v1.peekz() * v2.peeky(),
     v1.peekz() * v2.peekx() - v1.peekx() * v2.peekz(),
     v1.peekx() * v2.peeky() - v1.peeky() * v2.peekx() );
}



bool baryCentricTriangle(vec2f p, vec4f v1, vec4f v2, vec4f v3, float &u, float &v, float &r);
bool baryCentricTriangle(vec2f p, vec3f v1, vec3f v2, vec3f v3, float &u, float &v, float &r);
void clamp(vec3f & v, float min, float max);

void matmultvec4f(const float * matrix, const vec4f& v, vec4f& ssv);


inline float absf(float a)
{
 if (a < 0.0f) return -1.0f * a;

 return a;
}

inline void clamp(vec2f & v, float min, float max)
{
 if(v.peekx() > max) v.x() = max;
 if(v.peekx() < min) v.x() = min;

 if(v.peeky() > max) v.y() = max;
 if(v.peeky() < min) v.y() = min;

}

inline vec3f reflect(vec3f & n, vec3f & d)
{
 vec3f output = d - 2 *dot(n,d) * n;
 return output;
}




class vec2i
{
    private:
        int x_, y_;

    public:
        vec2i(int x=0, int y=0):
              x_(x), y_(y){}

        vec2i(const vec2i &v){
            x_ = v.x_;
            y_ = v.y_;
         }

  inline int& x(){return x_;}
        inline int& y(){return y_;}

        inline int& operator[] (int i){
            return ((i==0) ? x_:y_);
        }

        inline const int& peekx() const{return x_;}
        inline const int& peeky() const{return y_;}

        inline vec2i negative() const{return vec2i(-x_, -y_);}

  inline int magsqr() const{return (x_*x_ + y_*y_);}

        inline vec2i& operator=(const vec2i &v){
            if(this!=&v){ x_=v.x_; y_=v.y_; }
            return *this;
        }

        inline vec2i& operator+=(const vec2i &v){
            x_ += v.x_; y_ += v.y_;
            return *this;
        }

        inline vec2i& operator-=(const vec2i &v){
            x_ -= v.x_; y_ -= v.y_;
            return *this;
        }

        inline vec2i& operator*=(const int k){
            x_ *= k; y_ *= k;
            return *this;
        }

  inline vec2i& operator*=(vec2i& k){
            x_ *= k.x_; y_ *= k.y_;
            return *this;
        }

        inline bool operator==(const vec2i &v) const{return (x_==v.x_ && y_==v.y_);}

        inline bool operator!=(const vec2i &v) const{return !(*this==v);}

  inline vec2i& operator/(int m) {
            if(m != 0){
                x_ = x_ / m;
                y_ = y_ / m;
            }
   return *this;
  }

  inline vec2i operator-() { return vec2i(-x_, -y_);}

        inline void display1d() const{printf("v(%d)\n",x_);}
        inline void display2d() const{printf("v(%d %d)\n",x_,y_);}

};

vec2i operator+(const vec2i& v1, const vec2i &v2);
vec2i operator-(const vec2i& v1, const vec2i &v2);
vec2i operator*(const vec2i& v1, const int k);
vec2i operator*(const int k, const vec2i& v1);
int dot(const vec2i& v1, const vec2i& v2);
# 2 "/home/zhengzhen/workspace/versapipe/examples/reyes/basicTypes/vecs.cu" 2


vec4f operator+(const vec4f& v1, const vec4f &v2)
{
 return vec4f(v1.peekx()+v2.peekx(),
                 v1.peeky()+v2.peeky(),
                 v1.peekz()+v2.peekz(),
     v1.peekw()+v2.peekw());
}

vec4f operator-(const vec4f& v1, const vec4f &v2)
{
 return vec4f(v1.peekx()-v2.peekx(),
                 v1.peeky()-v2.peeky(),
                 v1.peekz()-v2.peekz(),
     v1.peekw()-v2.peekw());
}
vec4f operator*(const vec4f& v1, const vec4f &v2)
{
 return vec4f(v1.peekx()*v2.peekx(),
                 v1.peeky()*v2.peeky(),
                 v1.peekz()*v2.peekz(),
     v1.peekw()*v2.peekw());
}


vec4f operator*(const float& k, const vec4f& v1){
    return vec4f(v1.peekx()*k,
                 v1.peeky()*k,
                 v1.peekz()*k,
     v1.peekw()*k);
}

vec4f operator*(const vec4f& v1, const float& k){
    return vec4f(v1.peekx()*k,
                 v1.peeky()*k,
                 v1.peekz()*k,
     v1.peekw()*k);
}





vec3f operator+(const vec3f& v1, const vec3f &v2){
    return vec3f(v1.peekx()+v2.peekx(),
                 v1.peeky()+v2.peeky(),
                 v1.peekz()+v2.peekz());
}

vec3f operator-(const vec3f& v1, const vec3f &v2){
    return vec3f(v1.peekx()-v2.peekx(),
                 v1.peeky()-v2.peeky(),
                 v1.peekz()-v2.peekz());
}

vec3f operator*(const vec3f& v1, const float k){
    return vec3f(v1.peekx()*k,
                 v1.peeky()*k,
                 v1.peekz()*k);
}

vec3f operator*(const float k, const vec3f& v1){
    return vec3f(v1.peekx()*k,
                 v1.peeky()*k,
                 v1.peekz()*k);
}

vec3f operator*(const vec3f& v1, const vec3f &v2)
{
 return vec3f(v1.peekx()*v2.peekx(),
                 v1.peeky()*v2.peeky(),
                 v1.peekz()*v2.peekz());
}

float dot(const vec3f& v1, const vec3f& v2){
    return ((v1.peekx()*v2.peekx())+
            (v1.peeky()*v2.peeky())+
            (v1.peekz()*v2.peekz()));
}

float dot(const vec4f& v1, const vec3f& v2){
    return ((v1.peekx()*v2.peekx())+
            (v1.peeky()*v2.peeky())+
            (v1.peekz()*v2.peekz()));
}

float dot(const vec3f& v1, const vec4f& v2){
    return ((v1.peekx()*v2.peekx())+
            (v1.peeky()*v2.peeky())+
            (v1.peekz()*v2.peekz()));
}

float dot(const vec4f& v1, const vec4f& v2){
    return ((v1.peekx()*v2.peekx())+
            (v1.peeky()*v2.peeky())+
            (v1.peekz()*v2.peekz()));
}





vec2f operator+(const vec2f& v1, const vec2f &v2){
    return vec2f(v1.peekx()+v2.peekx(),
                 v1.peeky()+v2.peeky());
}

vec2f operator-(const vec2f& v1, const vec2f &v2){
    return vec2f(v1.peekx()-v2.peekx(),
                 v1.peeky()-v2.peeky());
}

vec2f operator*(const vec2f& v1, const float k){
    return vec2f(v1.peekx()*k,
                 v1.peeky()*k);
}

vec2f operator*(const float k, const vec2f& v1){
    return vec2f(v1.peekx()*k,
                 v1.peeky()*k);
}

float dot(const vec2f& v1, const vec2f& v2){
    return ((v1.peekx()*v2.peekx())+
            (v1.peeky()*v2.peeky()));
}





vec2i operator+(const vec2i& v1, const vec2i &v2){
    return vec2i(v1.peekx()+v2.peekx(),
                 v1.peeky()+v2.peeky());
}

vec2i operator-(const vec2i& v1, const vec2i &v2){
    return vec2i(v1.peekx()-v2.peekx(),
                 v1.peeky()-v2.peeky());
}

vec2i operator*(const vec2i& v1, const int k){
    return vec2i(v1.peekx()*k,
                 v1.peeky()*k);
}

vec2i operator*(const int k, const vec2i& v1){
    return vec2i(v1.peekx()*k,
                 v1.peeky()*k);
}

int dot(const vec2i& v1, const vec2i& v2){
    return ((v1.peekx()*v2.peekx())+
            (v1.peeky()*v2.peeky()));
}



bool baryCentricTriangle(vec2f p, vec4f v1, vec4f v2, vec4f v3, float &u, float &v, float &r)
{
 float x1mx3 = v1.x() - v3.x();
 float x2mx3 = v2.x() - v3.x();
 float y1my3 = v1.y() - v3.y();
 float y2my3 = v2.y() - v3.y();

 float det = (x1mx3 * y2my3) - (y1my3*x2mx3);

 float pxmx3 = p.x() - v3.x();
 float pymy3 = p.y() - v3.y();

 if(det == 0.0 || det == -0.0) return false;

 u = (y2my3*pxmx3 + x2mx3*-1*pymy3)/det;
 v = (y1my3*-1*pxmx3 + x1mx3*pymy3)/det;
 r = 1-u-v;

 if (u > 1.0f || v > 1.0f || r > 1.0f) return false;
 if (u < 0.0f || v < 0.0f || r < 0.0f) return false;

 return true;
}

bool baryCentricTriangle(vec2f p, vec3f v1, vec3f v2, vec3f v3, float &u, float &v, float &r)
{
 float x1mx3 = v1.x() - v3.x();
 float x2mx3 = v2.x() - v3.x();
 float y1my3 = v1.y() - v3.y();
 float y2my3 = v2.y() - v3.y();

 float det = (x1mx3 * y2my3) - (y1my3*x2mx3);

 float pxmx3 = p.x() - v3.x();
 float pymy3 = p.y() - v3.y();

 if(det == 0.0 || det == -0.0) return false;

 u = (y2my3*pxmx3 + x2mx3*-1*pymy3)/det;
 v = (y1my3*-1*pxmx3 + x1mx3*pymy3)/det;
 r = 1-u-v;

 if (u > 1.0f || v > 1.0f || r > 1.0f) return false;
 if (u < 0.0f || v < 0.0f || r < 0.0f) return false;

 return true;
}

void clamp(vec3f & v, float min, float max)
{
 if(v.peekx() > max) v.x() = max;
 if(v.peekx() < min) v.x() = min;

 if(v.peeky() > max) v.y() = max;
 if(v.peeky() < min) v.y() = min;

 if(v.peekz() > max) v.z() = max;
 if(v.peekz() < min) v.z() = min;
}

void matmultvec4f(const float * matrix, const vec4f& v, vec4f& ssv)
{
 ssv.x() = matrix[0] * v.peekx() + matrix[4] * v.peeky() + matrix[8] * v.peekz() + matrix[12] * v.peekw();
 ssv.y() = matrix[1] * v.peekx() + matrix[5] * v.peeky() + matrix[9] * v.peekz() + matrix[13] * v.peekw();
 ssv.z() = matrix[2] * v.peekx() + matrix[6] * v.peeky() + matrix[10] * v.peekz() + matrix[14] * v.peekw();
 ssv.w() = matrix[3] * v.peekx() + matrix[7] * v.peeky() + matrix[11] * v.peekz() + matrix[15] * v.peekw();
}
