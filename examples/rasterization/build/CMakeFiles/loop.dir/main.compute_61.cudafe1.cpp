# 1 "/home/zhengzhen/workspace/versapipe/examples/rasterization/main.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false

# 1
# 56 "/usr/local/cuda-8.0/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 59
#pragma GCC diagnostic ignored "-Wunused-function"
# 61 "/usr/local/cuda-8.0/include/device_types.h"
#if 0
# 61
enum cudaRoundMode { 
# 63
cudaRoundNearest, 
# 64
cudaRoundZero, 
# 65
cudaRoundPosInf, 
# 66
cudaRoundMinInf
# 67
}; 
#endif
# 149 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3
typedef long ptrdiff_t; 
# 216
typedef unsigned long size_t; 
#include "crt/host_runtime.h"
# 429
typedef 
# 426
struct { 
# 427
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 428
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 429
} max_align_t; 
# 436
typedef __decltype((nullptr)) nullptr_t; 
# 156 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 156
enum cudaError { 
# 163
cudaSuccess, 
# 169
cudaErrorMissingConfiguration, 
# 175
cudaErrorMemoryAllocation, 
# 181
cudaErrorInitializationError, 
# 191
cudaErrorLaunchFailure, 
# 200
cudaErrorPriorLaunchFailure, 
# 211
cudaErrorLaunchTimeout, 
# 220
cudaErrorLaunchOutOfResources, 
# 226
cudaErrorInvalidDeviceFunction, 
# 235
cudaErrorInvalidConfiguration, 
# 241
cudaErrorInvalidDevice, 
# 247
cudaErrorInvalidValue, 
# 253
cudaErrorInvalidPitchValue, 
# 259
cudaErrorInvalidSymbol, 
# 264
cudaErrorMapBufferObjectFailed, 
# 269
cudaErrorUnmapBufferObjectFailed, 
# 275
cudaErrorInvalidHostPointer, 
# 281
cudaErrorInvalidDevicePointer, 
# 287
cudaErrorInvalidTexture, 
# 293
cudaErrorInvalidTextureBinding, 
# 300
cudaErrorInvalidChannelDescriptor, 
# 306
cudaErrorInvalidMemcpyDirection, 
# 316
cudaErrorAddressOfConstant, 
# 325
cudaErrorTextureFetchFailed, 
# 334
cudaErrorTextureNotBound, 
# 343
cudaErrorSynchronizationError, 
# 349
cudaErrorInvalidFilterSetting, 
# 355
cudaErrorInvalidNormSetting, 
# 363
cudaErrorMixedDeviceExecution, 
# 370
cudaErrorCudartUnloading, 
# 375
cudaErrorUnknown, 
# 383
cudaErrorNotYetImplemented, 
# 392
cudaErrorMemoryValueTooLarge, 
# 399
cudaErrorInvalidResourceHandle, 
# 407
cudaErrorNotReady, 
# 414
cudaErrorInsufficientDriver, 
# 427
cudaErrorSetOnActiveProcess, 
# 433
cudaErrorInvalidSurface, 
# 439
cudaErrorNoDevice, 
# 445
cudaErrorECCUncorrectable, 
# 450
cudaErrorSharedObjectSymbolNotFound, 
# 455
cudaErrorSharedObjectInitFailed, 
# 461
cudaErrorUnsupportedLimit, 
# 467
cudaErrorDuplicateVariableName, 
# 473
cudaErrorDuplicateTextureName, 
# 479
cudaErrorDuplicateSurfaceName, 
# 489
cudaErrorDevicesUnavailable, 
# 494
cudaErrorInvalidKernelImage, 
# 502
cudaErrorNoKernelImageForDevice, 
# 515
cudaErrorIncompatibleDriverContext, 
# 522
cudaErrorPeerAccessAlreadyEnabled, 
# 529
cudaErrorPeerAccessNotEnabled, 
# 535
cudaErrorDeviceAlreadyInUse = 54, 
# 542
cudaErrorProfilerDisabled, 
# 550
cudaErrorProfilerNotInitialized, 
# 557
cudaErrorProfilerAlreadyStarted, 
# 564
cudaErrorProfilerAlreadyStopped, 
# 572
cudaErrorAssert, 
# 579
cudaErrorTooManyPeers, 
# 585
cudaErrorHostMemoryAlreadyRegistered, 
# 591
cudaErrorHostMemoryNotRegistered, 
# 596
cudaErrorOperatingSystem, 
# 602
cudaErrorPeerAccessUnsupported, 
# 609
cudaErrorLaunchMaxDepthExceeded, 
# 617
cudaErrorLaunchFileScopedTex, 
# 625
cudaErrorLaunchFileScopedSurf, 
# 640
cudaErrorSyncDepthExceeded, 
# 652
cudaErrorLaunchPendingCountExceeded, 
# 657
cudaErrorNotPermitted, 
# 663
cudaErrorNotSupported, 
# 672
cudaErrorHardwareStackError, 
# 680
cudaErrorIllegalInstruction, 
# 689
cudaErrorMisalignedAddress, 
# 700
cudaErrorInvalidAddressSpace, 
# 708
cudaErrorInvalidPc, 
# 716
cudaErrorIllegalAddress, 
# 722
cudaErrorInvalidPtx, 
# 727
cudaErrorInvalidGraphicsContext, 
# 733
cudaErrorNvlinkUncorrectable, 
# 738
cudaErrorStartupFailure = 127, 
# 746
cudaErrorApiFailureBase = 10000
# 747
}; 
#endif
# 752 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 752
enum cudaChannelFormatKind { 
# 754
cudaChannelFormatKindSigned, 
# 755
cudaChannelFormatKindUnsigned, 
# 756
cudaChannelFormatKindFloat, 
# 757
cudaChannelFormatKindNone
# 758
}; 
#endif
# 763 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 763
struct cudaChannelFormatDesc { 
# 765
int x; 
# 766
int y; 
# 767
int z; 
# 768
int w; 
# 769
cudaChannelFormatKind f; 
# 770
}; 
#endif
# 775 "/usr/local/cuda-8.0/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 780
typedef const cudaArray *cudaArray_const_t; 
# 782
struct cudaArray; 
# 787
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 792
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 794
struct cudaMipmappedArray; 
# 799
#if 0
# 799
enum cudaMemoryType { 
# 801
cudaMemoryTypeHost = 1, 
# 802
cudaMemoryTypeDevice
# 803
}; 
#endif
# 808 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 808
enum cudaMemcpyKind { 
# 810
cudaMemcpyHostToHost, 
# 811
cudaMemcpyHostToDevice, 
# 812
cudaMemcpyDeviceToHost, 
# 813
cudaMemcpyDeviceToDevice, 
# 814
cudaMemcpyDefault
# 815
}; 
#endif
# 822 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 822
struct cudaPitchedPtr { 
# 824
void *ptr; 
# 825
::size_t pitch; 
# 826
::size_t xsize; 
# 827
::size_t ysize; 
# 828
}; 
#endif
# 835 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 835
struct cudaExtent { 
# 837
::size_t width; 
# 838
::size_t height; 
# 839
::size_t depth; 
# 840
}; 
#endif
# 847 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 847
struct cudaPos { 
# 849
::size_t x; 
# 850
::size_t y; 
# 851
::size_t z; 
# 852
}; 
#endif
# 857 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 857
struct cudaMemcpy3DParms { 
# 859
cudaArray_t srcArray; 
# 860
cudaPos srcPos; 
# 861
cudaPitchedPtr srcPtr; 
# 863
cudaArray_t dstArray; 
# 864
cudaPos dstPos; 
# 865
cudaPitchedPtr dstPtr; 
# 867
cudaExtent extent; 
# 868
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 869
}; 
#endif
# 874 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 874
struct cudaMemcpy3DPeerParms { 
# 876
cudaArray_t srcArray; 
# 877
cudaPos srcPos; 
# 878
cudaPitchedPtr srcPtr; 
# 879
int srcDevice; 
# 881
cudaArray_t dstArray; 
# 882
cudaPos dstPos; 
# 883
cudaPitchedPtr dstPtr; 
# 884
int dstDevice; 
# 886
cudaExtent extent; 
# 887
}; 
#endif
# 892 "/usr/local/cuda-8.0/include/driver_types.h"
struct cudaGraphicsResource; 
# 897
#if 0
# 897
enum cudaGraphicsRegisterFlags { 
# 899
cudaGraphicsRegisterFlagsNone, 
# 900
cudaGraphicsRegisterFlagsReadOnly, 
# 901
cudaGraphicsRegisterFlagsWriteDiscard, 
# 902
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 903
cudaGraphicsRegisterFlagsTextureGather = 8
# 904
}; 
#endif
# 909 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 909
enum cudaGraphicsMapFlags { 
# 911
cudaGraphicsMapFlagsNone, 
# 912
cudaGraphicsMapFlagsReadOnly, 
# 913
cudaGraphicsMapFlagsWriteDiscard
# 914
}; 
#endif
# 919 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 919
enum cudaGraphicsCubeFace { 
# 921
cudaGraphicsCubeFacePositiveX, 
# 922
cudaGraphicsCubeFaceNegativeX, 
# 923
cudaGraphicsCubeFacePositiveY, 
# 924
cudaGraphicsCubeFaceNegativeY, 
# 925
cudaGraphicsCubeFacePositiveZ, 
# 926
cudaGraphicsCubeFaceNegativeZ
# 927
}; 
#endif
# 932 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 932
enum cudaResourceType { 
# 934
cudaResourceTypeArray, 
# 935
cudaResourceTypeMipmappedArray, 
# 936
cudaResourceTypeLinear, 
# 937
cudaResourceTypePitch2D
# 938
}; 
#endif
# 943 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 943
enum cudaResourceViewFormat { 
# 945
cudaResViewFormatNone, 
# 946
cudaResViewFormatUnsignedChar1, 
# 947
cudaResViewFormatUnsignedChar2, 
# 948
cudaResViewFormatUnsignedChar4, 
# 949
cudaResViewFormatSignedChar1, 
# 950
cudaResViewFormatSignedChar2, 
# 951
cudaResViewFormatSignedChar4, 
# 952
cudaResViewFormatUnsignedShort1, 
# 953
cudaResViewFormatUnsignedShort2, 
# 954
cudaResViewFormatUnsignedShort4, 
# 955
cudaResViewFormatSignedShort1, 
# 956
cudaResViewFormatSignedShort2, 
# 957
cudaResViewFormatSignedShort4, 
# 958
cudaResViewFormatUnsignedInt1, 
# 959
cudaResViewFormatUnsignedInt2, 
# 960
cudaResViewFormatUnsignedInt4, 
# 961
cudaResViewFormatSignedInt1, 
# 962
cudaResViewFormatSignedInt2, 
# 963
cudaResViewFormatSignedInt4, 
# 964
cudaResViewFormatHalf1, 
# 965
cudaResViewFormatHalf2, 
# 966
cudaResViewFormatHalf4, 
# 967
cudaResViewFormatFloat1, 
# 968
cudaResViewFormatFloat2, 
# 969
cudaResViewFormatFloat4, 
# 970
cudaResViewFormatUnsignedBlockCompressed1, 
# 971
cudaResViewFormatUnsignedBlockCompressed2, 
# 972
cudaResViewFormatUnsignedBlockCompressed3, 
# 973
cudaResViewFormatUnsignedBlockCompressed4, 
# 974
cudaResViewFormatSignedBlockCompressed4, 
# 975
cudaResViewFormatUnsignedBlockCompressed5, 
# 976
cudaResViewFormatSignedBlockCompressed5, 
# 977
cudaResViewFormatUnsignedBlockCompressed6H, 
# 978
cudaResViewFormatSignedBlockCompressed6H, 
# 979
cudaResViewFormatUnsignedBlockCompressed7
# 980
}; 
#endif
# 985 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 985
struct cudaResourceDesc { 
# 986
cudaResourceType resType; 
# 988
union { 
# 989
struct { 
# 990
cudaArray_t array; 
# 991
} array; 
# 992
struct { 
# 993
cudaMipmappedArray_t mipmap; 
# 994
} mipmap; 
# 995
struct { 
# 996
void *devPtr; 
# 997
cudaChannelFormatDesc desc; 
# 998
::size_t sizeInBytes; 
# 999
} linear; 
# 1000
struct { 
# 1001
void *devPtr; 
# 1002
cudaChannelFormatDesc desc; 
# 1003
::size_t width; 
# 1004
::size_t height; 
# 1005
::size_t pitchInBytes; 
# 1006
} pitch2D; 
# 1007
} res; 
# 1008
}; 
#endif
# 1013 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1013
struct cudaResourceViewDesc { 
# 1015
cudaResourceViewFormat format; 
# 1016
::size_t width; 
# 1017
::size_t height; 
# 1018
::size_t depth; 
# 1019
unsigned firstMipmapLevel; 
# 1020
unsigned lastMipmapLevel; 
# 1021
unsigned firstLayer; 
# 1022
unsigned lastLayer; 
# 1023
}; 
#endif
# 1028 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1028
struct cudaPointerAttributes { 
# 1034
cudaMemoryType memoryType; 
# 1045
int device; 
# 1051
void *devicePointer; 
# 1057
void *hostPointer; 
# 1062
int isManaged; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1063
}; 
#endif
# 1068 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1068
struct cudaFuncAttributes { 
# 1075
::size_t sharedSizeBytes; 
# 1081
::size_t constSizeBytes; 
# 1086
::size_t localSizeBytes; 
# 1093
int maxThreadsPerBlock; 
# 1098
int numRegs; 
# 1105
int ptxVersion; 
# 1112
int binaryVersion; 
# 1118
int cacheModeCA; 
# 1119
}; 
#endif
# 1124 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1124
enum cudaFuncCache { 
# 1126
cudaFuncCachePreferNone, 
# 1127
cudaFuncCachePreferShared, 
# 1128
cudaFuncCachePreferL1, 
# 1129
cudaFuncCachePreferEqual
# 1130
}; 
#endif
# 1136 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1136
enum cudaSharedMemConfig { 
# 1138
cudaSharedMemBankSizeDefault, 
# 1139
cudaSharedMemBankSizeFourByte, 
# 1140
cudaSharedMemBankSizeEightByte
# 1141
}; 
#endif
# 1146 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1146
enum cudaComputeMode { 
# 1148
cudaComputeModeDefault, 
# 1149
cudaComputeModeExclusive, 
# 1150
cudaComputeModeProhibited, 
# 1151
cudaComputeModeExclusiveProcess
# 1152
}; 
#endif
# 1157 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1157
enum cudaLimit { 
# 1159
cudaLimitStackSize, 
# 1160
cudaLimitPrintfFifoSize, 
# 1161
cudaLimitMallocHeapSize, 
# 1162
cudaLimitDevRuntimeSyncDepth, 
# 1163
cudaLimitDevRuntimePendingLaunchCount
# 1164
}; 
#endif
# 1169 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1169
enum cudaMemoryAdvise { 
# 1171
cudaMemAdviseSetReadMostly = 1, 
# 1172
cudaMemAdviseUnsetReadMostly, 
# 1173
cudaMemAdviseSetPreferredLocation, 
# 1174
cudaMemAdviseUnsetPreferredLocation, 
# 1175
cudaMemAdviseSetAccessedBy, 
# 1176
cudaMemAdviseUnsetAccessedBy
# 1177
}; 
#endif
# 1182 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1182
enum cudaMemRangeAttribute { 
# 1184
cudaMemRangeAttributeReadMostly = 1, 
# 1185
cudaMemRangeAttributePreferredLocation, 
# 1186
cudaMemRangeAttributeAccessedBy, 
# 1187
cudaMemRangeAttributeLastPrefetchLocation
# 1188
}; 
#endif
# 1193 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1193
enum cudaOutputMode { 
# 1195
cudaKeyValuePair, 
# 1196
cudaCSV
# 1197
}; 
#endif
# 1202 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1202
enum cudaDeviceAttr { 
# 1204
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1205
cudaDevAttrMaxBlockDimX, 
# 1206
cudaDevAttrMaxBlockDimY, 
# 1207
cudaDevAttrMaxBlockDimZ, 
# 1208
cudaDevAttrMaxGridDimX, 
# 1209
cudaDevAttrMaxGridDimY, 
# 1210
cudaDevAttrMaxGridDimZ, 
# 1211
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1212
cudaDevAttrTotalConstantMemory, 
# 1213
cudaDevAttrWarpSize, 
# 1214
cudaDevAttrMaxPitch, 
# 1215
cudaDevAttrMaxRegistersPerBlock, 
# 1216
cudaDevAttrClockRate, 
# 1217
cudaDevAttrTextureAlignment, 
# 1218
cudaDevAttrGpuOverlap, 
# 1219
cudaDevAttrMultiProcessorCount, 
# 1220
cudaDevAttrKernelExecTimeout, 
# 1221
cudaDevAttrIntegrated, 
# 1222
cudaDevAttrCanMapHostMemory, 
# 1223
cudaDevAttrComputeMode, 
# 1224
cudaDevAttrMaxTexture1DWidth, 
# 1225
cudaDevAttrMaxTexture2DWidth, 
# 1226
cudaDevAttrMaxTexture2DHeight, 
# 1227
cudaDevAttrMaxTexture3DWidth, 
# 1228
cudaDevAttrMaxTexture3DHeight, 
# 1229
cudaDevAttrMaxTexture3DDepth, 
# 1230
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1231
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1232
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1233
cudaDevAttrSurfaceAlignment, 
# 1234
cudaDevAttrConcurrentKernels, 
# 1235
cudaDevAttrEccEnabled, 
# 1236
cudaDevAttrPciBusId, 
# 1237
cudaDevAttrPciDeviceId, 
# 1238
cudaDevAttrTccDriver, 
# 1239
cudaDevAttrMemoryClockRate, 
# 1240
cudaDevAttrGlobalMemoryBusWidth, 
# 1241
cudaDevAttrL2CacheSize, 
# 1242
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1243
cudaDevAttrAsyncEngineCount, 
# 1244
cudaDevAttrUnifiedAddressing, 
# 1245
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1246
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1247
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1248
cudaDevAttrMaxTexture2DGatherHeight, 
# 1249
cudaDevAttrMaxTexture3DWidthAlt, 
# 1250
cudaDevAttrMaxTexture3DHeightAlt, 
# 1251
cudaDevAttrMaxTexture3DDepthAlt, 
# 1252
cudaDevAttrPciDomainId, 
# 1253
cudaDevAttrTexturePitchAlignment, 
# 1254
cudaDevAttrMaxTextureCubemapWidth, 
# 1255
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1256
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1257
cudaDevAttrMaxSurface1DWidth, 
# 1258
cudaDevAttrMaxSurface2DWidth, 
# 1259
cudaDevAttrMaxSurface2DHeight, 
# 1260
cudaDevAttrMaxSurface3DWidth, 
# 1261
cudaDevAttrMaxSurface3DHeight, 
# 1262
cudaDevAttrMaxSurface3DDepth, 
# 1263
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1264
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1265
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1266
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1267
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1268
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1269
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1270
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1271
cudaDevAttrMaxTexture1DLinearWidth, 
# 1272
cudaDevAttrMaxTexture2DLinearWidth, 
# 1273
cudaDevAttrMaxTexture2DLinearHeight, 
# 1274
cudaDevAttrMaxTexture2DLinearPitch, 
# 1275
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1276
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1277
cudaDevAttrComputeCapabilityMajor, 
# 1278
cudaDevAttrComputeCapabilityMinor, 
# 1279
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1280
cudaDevAttrStreamPrioritiesSupported, 
# 1281
cudaDevAttrGlobalL1CacheSupported, 
# 1282
cudaDevAttrLocalL1CacheSupported, 
# 1283
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1284
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1285
cudaDevAttrManagedMemory, 
# 1286
cudaDevAttrIsMultiGpuBoard, 
# 1287
cudaDevAttrMultiGpuBoardGroupID, 
# 1288
cudaDevAttrHostNativeAtomicSupported, 
# 1289
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1290
cudaDevAttrPageableMemoryAccess, 
# 1291
cudaDevAttrConcurrentManagedAccess, 
# 1292
cudaDevAttrComputePreemptionSupported, 
# 1293
cudaDevAttrCanUseHostPointerForRegisteredMem
# 1294
}; 
#endif
# 1300 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1300
enum cudaDeviceP2PAttr { 
# 1301
cudaDevP2PAttrPerformanceRank = 1, 
# 1302
cudaDevP2PAttrAccessSupported, 
# 1303
cudaDevP2PAttrNativeAtomicSupported
# 1304
}; 
#endif
# 1308 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
# 1308
struct cudaDeviceProp { 
# 1310
char name[256]; 
# 1311
::size_t totalGlobalMem; 
# 1312
::size_t sharedMemPerBlock; 
# 1313
int regsPerBlock; 
# 1314
int warpSize; 
# 1315
::size_t memPitch; 
# 1316
int maxThreadsPerBlock; 
# 1317
int maxThreadsDim[3]; 
# 1318
int maxGridSize[3]; 
# 1319
int clockRate; 
# 1320
::size_t totalConstMem; 
# 1321
int major; 
# 1322
int minor; 
# 1323
::size_t textureAlignment; 
# 1324
::size_t texturePitchAlignment; 
# 1325
int deviceOverlap; 
# 1326
int multiProcessorCount; 
# 1327
int kernelExecTimeoutEnabled; 
# 1328
int integrated; 
# 1329
int canMapHostMemory; 
# 1330
int computeMode; 
# 1331
int maxTexture1D; 
# 1332
int maxTexture1DMipmap; 
# 1333
int maxTexture1DLinear; 
# 1334
int maxTexture2D[2]; 
# 1335
int maxTexture2DMipmap[2]; 
# 1336
int maxTexture2DLinear[3]; 
# 1337
int maxTexture2DGather[2]; 
# 1338
int maxTexture3D[3]; 
# 1339
int maxTexture3DAlt[3]; 
# 1340
int maxTextureCubemap; 
# 1341
int maxTexture1DLayered[2]; 
# 1342
int maxTexture2DLayered[3]; 
# 1343
int maxTextureCubemapLayered[2]; 
# 1344
int maxSurface1D; 
# 1345
int maxSurface2D[2]; 
# 1346
int maxSurface3D[3]; 
# 1347
int maxSurface1DLayered[2]; 
# 1348
int maxSurface2DLayered[3]; 
# 1349
int maxSurfaceCubemap; 
# 1350
int maxSurfaceCubemapLayered[2]; 
# 1351
::size_t surfaceAlignment; 
# 1352
int concurrentKernels; 
# 1353
int ECCEnabled; 
# 1354
int pciBusID; 
# 1355
int pciDeviceID; 
# 1356
int pciDomainID; 
# 1357
int tccDriver; 
# 1358
int asyncEngineCount; 
# 1359
int unifiedAddressing; 
# 1360
int memoryClockRate; 
# 1361
int memoryBusWidth; 
# 1362
int l2CacheSize; 
# 1363
int maxThreadsPerMultiProcessor; 
# 1364
int streamPrioritiesSupported; 
# 1365
int globalL1CacheSupported; 
# 1366
int localL1CacheSupported; 
# 1367
::size_t sharedMemPerMultiprocessor; 
# 1368
int regsPerMultiprocessor; 
# 1369
int managedMemory; 
# 1370
int isMultiGpuBoard; 
# 1371
int multiGpuBoardGroupID; 
# 1372
int hostNativeAtomicSupported; 
# 1373
int singleToDoublePrecisionPerfRatio; 
# 1374
int pageableMemoryAccess; 
# 1375
int concurrentManagedAccess; 
# 1376
}; 
#endif
# 1459 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
typedef 
# 1456
struct cudaIpcEventHandle_st { 
# 1458
char reserved[64]; 
# 1459
} cudaIpcEventHandle_t; 
#endif
# 1467 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
typedef 
# 1464
struct cudaIpcMemHandle_st { 
# 1466
char reserved[64]; 
# 1467
} cudaIpcMemHandle_t; 
#endif
# 1478 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
typedef cudaError 
# 1478
cudaError_t; 
#endif
# 1483 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 1483
cudaStream_t; 
#endif
# 1488 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 1488
cudaEvent_t; 
#endif
# 1493 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 1493
cudaGraphicsResource_t; 
#endif
# 1498 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
typedef struct CUuuid_st 
# 1498
cudaUUID_t; 
#endif
# 1503 "/usr/local/cuda-8.0/include/driver_types.h"
#if 0
typedef cudaOutputMode 
# 1503
cudaOutputMode_t; 
#endif
# 84 "/usr/local/cuda-8.0/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/usr/local/cuda-8.0/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/usr/local/cuda-8.0/include/surface_types.h"
#if 0
# 103
struct surfaceReference { 
# 108
cudaChannelFormatDesc channelDesc; 
# 109
}; 
#endif
# 114 "/usr/local/cuda-8.0/include/surface_types.h"
#if 0
typedef unsigned long long 
# 114
cudaSurfaceObject_t; 
#endif
# 84 "/usr/local/cuda-8.0/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/usr/local/cuda-8.0/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/usr/local/cuda-8.0/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/usr/local/cuda-8.0/include/texture_types.h"
#if 0
# 113
struct textureReference { 
# 118
int normalized; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureAddressMode addressMode[3]; 
# 130
cudaChannelFormatDesc channelDesc; 
# 134
int sRGB; 
# 138
unsigned maxAnisotropy; 
# 142
cudaTextureFilterMode mipmapFilterMode; 
# 146
float mipmapLevelBias; 
# 150
float minMipmapLevelClamp; 
# 154
float maxMipmapLevelClamp; 
# 155
int __cudaReserved[15]; 
# 156
}; 
#endif
# 161 "/usr/local/cuda-8.0/include/texture_types.h"
#if 0
# 161
struct cudaTextureDesc { 
# 166
cudaTextureAddressMode addressMode[3]; 
# 170
cudaTextureFilterMode filterMode; 
# 174
cudaTextureReadMode readMode; 
# 178
int sRGB; 
# 182
float borderColor[4]; 
# 186
int normalizedCoords; 
# 190
unsigned maxAnisotropy; 
# 194
cudaTextureFilterMode mipmapFilterMode; 
# 198
float mipmapLevelBias; 
# 202
float minMipmapLevelClamp; 
# 206
float maxMipmapLevelClamp; 
# 207
}; 
#endif
# 212 "/usr/local/cuda-8.0/include/texture_types.h"
#if 0
typedef unsigned long long 
# 212
cudaTextureObject_t; 
#endif
# 98 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 98
struct char1 { 
# 100
signed char x; 
# 101
}; 
#endif
# 103 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 103
struct uchar1 { 
# 105
unsigned char x; 
# 106
}; 
#endif
# 109 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 109
struct __attribute((aligned(2))) char2 { 
# 111
signed char x, y; 
# 112
}; 
#endif
# 114 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 114
struct __attribute((aligned(2))) uchar2 { 
# 116
unsigned char x, y; 
# 117
}; 
#endif
# 119 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 119
struct char3 { 
# 121
signed char x, y, z; 
# 122
}; 
#endif
# 124 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 124
struct uchar3 { 
# 126
unsigned char x, y, z; 
# 127
}; 
#endif
# 129 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 129
struct __attribute((aligned(4))) char4 { 
# 131
signed char x, y, z, w; 
# 132
}; 
#endif
# 134 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 134
struct __attribute((aligned(4))) uchar4 { 
# 136
unsigned char x, y, z, w; 
# 137
}; 
#endif
# 139 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 139
struct short1 { 
# 141
short x; 
# 142
}; 
#endif
# 144 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 144
struct ushort1 { 
# 146
unsigned short x; 
# 147
}; 
#endif
# 149 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 149
struct __attribute((aligned(4))) short2 { 
# 151
short x, y; 
# 152
}; 
#endif
# 154 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 154
struct __attribute((aligned(4))) ushort2 { 
# 156
unsigned short x, y; 
# 157
}; 
#endif
# 159 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 159
struct short3 { 
# 161
short x, y, z; 
# 162
}; 
#endif
# 164 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 164
struct ushort3 { 
# 166
unsigned short x, y, z; 
# 167
}; 
#endif
# 169 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 169
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 170 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 170
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 172 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 172
struct int1 { 
# 174
int x; 
# 175
}; 
#endif
# 177 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 177
struct uint1 { 
# 179
unsigned x; 
# 180
}; 
#endif
# 182 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 182
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 183 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 183
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 185 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 185
struct int3 { 
# 187
int x, y, z; 
# 188
}; 
#endif
# 190 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 190
struct uint3 { 
# 192
unsigned x, y, z; 
# 193
}; 
#endif
# 195 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 195
struct __attribute((aligned(16))) int4 { 
# 197
int x, y, z, w; 
# 198
}; 
#endif
# 200 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 200
struct __attribute((aligned(16))) uint4 { 
# 202
unsigned x, y, z, w; 
# 203
}; 
#endif
# 205 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 205
struct long1 { 
# 207
long x; 
# 208
}; 
#endif
# 210 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 210
struct ulong1 { 
# 212
unsigned long x; 
# 213
}; 
#endif
# 220 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 220
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 222
long x, y; 
# 223
}; 
#endif
# 225 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 225
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 227
unsigned long x, y; 
# 228
}; 
#endif
# 232 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 232
struct long3 { 
# 234
long x, y, z; 
# 235
}; 
#endif
# 237 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 237
struct ulong3 { 
# 239
unsigned long x, y, z; 
# 240
}; 
#endif
# 242 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 242
struct __attribute((aligned(16))) long4 { 
# 244
long x, y, z, w; 
# 245
}; 
#endif
# 247 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 247
struct __attribute((aligned(16))) ulong4 { 
# 249
unsigned long x, y, z, w; 
# 250
}; 
#endif
# 252 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 252
struct float1 { 
# 254
float x; 
# 255
}; 
#endif
# 274 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 274
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 279 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 279
struct float3 { 
# 281
float x, y, z; 
# 282
}; 
#endif
# 284 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 284
struct __attribute((aligned(16))) float4 { 
# 286
float x, y, z, w; 
# 287
}; 
#endif
# 289 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 289
struct longlong1 { 
# 291
long long x; 
# 292
}; 
#endif
# 294 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 294
struct ulonglong1 { 
# 296
unsigned long long x; 
# 297
}; 
#endif
# 299 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 299
struct __attribute((aligned(16))) longlong2 { 
# 301
long long x, y; 
# 302
}; 
#endif
# 304 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 304
struct __attribute((aligned(16))) ulonglong2 { 
# 306
unsigned long long x, y; 
# 307
}; 
#endif
# 309 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 309
struct longlong3 { 
# 311
long long x, y, z; 
# 312
}; 
#endif
# 314 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 314
struct ulonglong3 { 
# 316
unsigned long long x, y, z; 
# 317
}; 
#endif
# 319 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 319
struct __attribute((aligned(16))) longlong4 { 
# 321
long long x, y, z, w; 
# 322
}; 
#endif
# 324 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 324
struct __attribute((aligned(16))) ulonglong4 { 
# 326
unsigned long long x, y, z, w; 
# 327
}; 
#endif
# 329 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 329
struct double1 { 
# 331
double x; 
# 332
}; 
#endif
# 334 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 334
struct __attribute((aligned(16))) double2 { 
# 336
double x, y; 
# 337
}; 
#endif
# 339 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 339
struct double3 { 
# 341
double x, y, z; 
# 342
}; 
#endif
# 344 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 344
struct __attribute((aligned(16))) double4 { 
# 346
double x, y, z, w; 
# 347
}; 
#endif
# 362 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef char1 
# 362
char1; 
#endif
# 363 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef uchar1 
# 363
uchar1; 
#endif
# 364 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef char2 
# 364
char2; 
#endif
# 365 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef uchar2 
# 365
uchar2; 
#endif
# 366 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef char3 
# 366
char3; 
#endif
# 367 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef uchar3 
# 367
uchar3; 
#endif
# 368 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef char4 
# 368
char4; 
#endif
# 369 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef uchar4 
# 369
uchar4; 
#endif
# 370 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef short1 
# 370
short1; 
#endif
# 371 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ushort1 
# 371
ushort1; 
#endif
# 372 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef short2 
# 372
short2; 
#endif
# 373 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ushort2 
# 373
ushort2; 
#endif
# 374 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef short3 
# 374
short3; 
#endif
# 375 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ushort3 
# 375
ushort3; 
#endif
# 376 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef short4 
# 376
short4; 
#endif
# 377 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ushort4 
# 377
ushort4; 
#endif
# 378 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef int1 
# 378
int1; 
#endif
# 379 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef uint1 
# 379
uint1; 
#endif
# 380 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef int2 
# 380
int2; 
#endif
# 381 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef uint2 
# 381
uint2; 
#endif
# 382 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef int3 
# 382
int3; 
#endif
# 383 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef uint3 
# 383
uint3; 
#endif
# 384 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef int4 
# 384
int4; 
#endif
# 385 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef uint4 
# 385
uint4; 
#endif
# 386 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef long1 
# 386
long1; 
#endif
# 387 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ulong1 
# 387
ulong1; 
#endif
# 388 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef long2 
# 388
long2; 
#endif
# 389 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ulong2 
# 389
ulong2; 
#endif
# 390 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef long3 
# 390
long3; 
#endif
# 391 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ulong3 
# 391
ulong3; 
#endif
# 392 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef long4 
# 392
long4; 
#endif
# 393 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ulong4 
# 393
ulong4; 
#endif
# 394 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef float1 
# 394
float1; 
#endif
# 395 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef float2 
# 395
float2; 
#endif
# 396 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef float3 
# 396
float3; 
#endif
# 397 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef float4 
# 397
float4; 
#endif
# 398 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef longlong1 
# 398
longlong1; 
#endif
# 399 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ulonglong1 
# 399
ulonglong1; 
#endif
# 400 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef longlong2 
# 400
longlong2; 
#endif
# 401 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ulonglong2 
# 401
ulonglong2; 
#endif
# 402 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef longlong3 
# 402
longlong3; 
#endif
# 403 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ulonglong3 
# 403
ulonglong3; 
#endif
# 404 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef longlong4 
# 404
longlong4; 
#endif
# 405 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef ulonglong4 
# 405
ulonglong4; 
#endif
# 406 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef double1 
# 406
double1; 
#endif
# 407 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef double2 
# 407
double2; 
#endif
# 408 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef double3 
# 408
double3; 
#endif
# 409 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef double4 
# 409
double4; 
#endif
# 417 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
# 417
struct dim3 { 
# 419
unsigned x, y, z; 
# 425
}; 
#endif
# 427 "/usr/local/cuda-8.0/include/vector_types.h"
#if 0
typedef dim3 
# 427
dim3; 
#endif
# 70 "/usr/local/cuda-8.0/include/library_types.h"
typedef 
# 54
enum cudaDataType_t { 
# 56
CUDA_R_16F = 2, 
# 57
CUDA_C_16F = 6, 
# 58
CUDA_R_32F = 0, 
# 59
CUDA_C_32F = 4, 
# 60
CUDA_R_64F = 1, 
# 61
CUDA_C_64F = 5, 
# 62
CUDA_R_8I = 3, 
# 63
CUDA_C_8I = 7, 
# 64
CUDA_R_8U, 
# 65
CUDA_C_8U, 
# 66
CUDA_R_32I, 
# 67
CUDA_C_32I, 
# 68
CUDA_R_32U, 
# 69
CUDA_C_32U
# 70
} cudaDataType; 
# 78
typedef 
# 73
enum libraryPropertyType_t { 
# 75
MAJOR_VERSION, 
# 76
MINOR_VERSION, 
# 77
PATCH_LEVEL
# 78
} libraryPropertyType; 
# 104 "/usr/local/cuda-8.0/include/cuda_device_runtime_api.h"
extern "C" {
# 106
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 107
extern cudaError_t cudaDeviceGetLimit(::size_t * pValue, cudaLimit limit); 
# 108
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 109
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 110
extern cudaError_t cudaDeviceSynchronize(); 
# 111
extern cudaError_t cudaGetLastError(); 
# 112
extern cudaError_t cudaPeekAtLastError(); 
# 113
extern const char *cudaGetErrorString(cudaError_t error); 
# 114
extern const char *cudaGetErrorName(cudaError_t error); 
# 115
extern cudaError_t cudaGetDeviceCount(int * count); 
# 116
extern cudaError_t cudaGetDevice(int * device); 
# 117
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 118
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 119
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 120
__attribute__((unused)) extern cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 121
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 122
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream); 
# 123
__attribute__((unused)) extern cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 124
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 125
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 126
extern cudaError_t cudaFree(void * devPtr); 
# 127
extern cudaError_t cudaMalloc(void ** devPtr, ::size_t size); 
# 128
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 129
__attribute__((unused)) extern cudaError_t cudaMemcpyAsync_ptsz(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 130
extern cudaError_t cudaMemcpy2DAsync(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 131
__attribute__((unused)) extern cudaError_t cudaMemcpy2DAsync_ptsz(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 132
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 133
__attribute__((unused)) extern cudaError_t cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 134
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, ::size_t count, cudaStream_t stream); 
# 135
__attribute__((unused)) extern cudaError_t cudaMemsetAsync_ptsz(void * devPtr, int value, ::size_t count, cudaStream_t stream); 
# 136
extern cudaError_t cudaMemset2DAsync(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream); 
# 137
__attribute__((unused)) extern cudaError_t cudaMemset2DAsync_ptsz(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream); 
# 138
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 139
__attribute__((unused)) extern cudaError_t cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 140
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 161
__attribute__((unused)) extern void *cudaGetParameterBuffer(::size_t alignment, ::size_t size); 
# 189
__attribute__((unused)) extern void *cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 190
__attribute__((unused)) extern cudaError_t cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 191
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 209
__attribute__((unused)) extern cudaError_t cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 210
__attribute__((unused)) extern cudaError_t cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 213
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSmemSize); 
# 214
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSmemSize, unsigned flags); 
# 216
}
# 218
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, ::size_t size); 
# 219
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 220
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, ::size_t dynamicSmemSize); 
# 221
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, ::size_t dynamicSmemSize, unsigned flags); 
# 219 "/usr/local/cuda-8.0/include/cuda_runtime_api.h"
extern "C" {
# 252
extern cudaError_t cudaDeviceReset(); 
# 269
extern cudaError_t cudaDeviceSynchronize(); 
# 344
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, ::size_t value); 
# 373
extern cudaError_t cudaDeviceGetLimit(::size_t * pValue, cudaLimit limit); 
# 404
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 439
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 481
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 510
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 552
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 575
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 602
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 644
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 679
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 717
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 767
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 797
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 837
extern cudaError_t cudaThreadExit(); 
# 861
extern cudaError_t cudaThreadSynchronize(); 
# 908
extern cudaError_t cudaThreadSetLimit(cudaLimit limit, ::size_t value); 
# 939
extern cudaError_t cudaThreadGetLimit(::size_t * pValue, cudaLimit limit); 
# 974
extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1020
extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1074
extern cudaError_t cudaGetLastError(); 
# 1115
extern cudaError_t cudaPeekAtLastError(); 
# 1130
extern const char *cudaGetErrorName(cudaError_t error); 
# 1145
extern const char *cudaGetErrorString(cudaError_t error); 
# 1175
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1421
extern cudaError_t cudaGetDeviceProperties(cudaDeviceProp * prop, int device); 
# 1593
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1628
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 1647
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 1681
extern cudaError_t cudaSetDevice(int device); 
# 1698
extern cudaError_t cudaGetDevice(int * device); 
# 1727
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 1789
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 1830
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 1867
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 1896
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 1939
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 1963
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 1984
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2005
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2037
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 2051
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2108
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2128
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2149
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2220
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, ::size_t length = 0, unsigned flags = 4); 
# 2256
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 2290
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 2321
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 2353
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 2385
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 2410
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 2451
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 2510
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, ::size_t sharedMem, cudaStream_t stream); 
# 2560
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 2614
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 2648
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 2671
extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 2694
extern cudaError_t cudaSetDoubleForHost(double * d); 
# 2750
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSMemSize); 
# 2794
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, ::size_t dynamicSMemSize, unsigned flags); 
# 2845
extern cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, ::size_t sharedMem = 0, cudaStream_t stream = 0); 
# 2874
extern cudaError_t cudaSetupArgument(const void * arg, ::size_t size, ::size_t offset); 
# 2912
extern cudaError_t cudaLaunch(const void * func); 
# 3030
extern cudaError_t cudaMallocManaged(void ** devPtr, ::size_t size, unsigned flags = 1); 
# 3056
extern cudaError_t cudaMalloc(void ** devPtr, ::size_t size); 
# 3085
extern cudaError_t cudaMallocHost(void ** ptr, ::size_t size); 
# 3124
extern cudaError_t cudaMallocPitch(void ** devPtr, ::size_t * pitch, ::size_t width, ::size_t height); 
# 3166
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, ::size_t width, ::size_t height = 0, unsigned flags = 0); 
# 3193
extern cudaError_t cudaFree(void * devPtr); 
# 3213
extern cudaError_t cudaFreeHost(void * ptr); 
# 3235
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 3257
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 3316
extern cudaError_t cudaHostAlloc(void ** pHost, ::size_t size, unsigned flags); 
# 3393
extern cudaError_t cudaHostRegister(void * ptr, ::size_t size, unsigned flags); 
# 3412
extern cudaError_t cudaHostUnregister(void * ptr); 
# 3454
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 3473
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 3508
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 3643
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 3764
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 3790
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 3890
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 3918
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 4029
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 4052
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 4071
extern cudaError_t cudaMemGetInfo(::size_t * free, ::size_t * total); 
# 4092
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 4130
extern cudaError_t cudaMemcpy(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 4162
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, ::size_t count); 
# 4200
extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t count, cudaMemcpyKind kind); 
# 4237
extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t count, cudaMemcpyKind kind); 
# 4275
extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, ::size_t wOffsetDst, ::size_t hOffsetDst, cudaArray_const_t src, ::size_t wOffsetSrc, ::size_t hOffsetSrc, ::size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 4320
extern cudaError_t cudaMemcpy2D(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 4366
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 4412
extern cudaError_t cudaMemcpy2DFromArray(void * dst, ::size_t dpitch, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t width, ::size_t height, cudaMemcpyKind kind); 
# 4455
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, ::size_t wOffsetDst, ::size_t hOffsetDst, cudaArray_const_t src, ::size_t wOffsetSrc, ::size_t hOffsetSrc, ::size_t width, ::size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 4493
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, ::size_t count, ::size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 4531
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, ::size_t count, ::size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 4582
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4614
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, ::size_t count, cudaStream_t stream = 0); 
# 4660
extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4705
extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4765
extern cudaError_t cudaMemcpy2DAsync(void * dst, ::size_t dpitch, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4820
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, ::size_t wOffset, ::size_t hOffset, const void * src, ::size_t spitch, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4874
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, ::size_t dpitch, cudaArray_const_t src, ::size_t wOffset, ::size_t hOffset, ::size_t width, ::size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4920
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, ::size_t count, ::size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4966
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, ::size_t count, ::size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 4992
extern cudaError_t cudaMemset(void * devPtr, int value, ::size_t count); 
# 5022
extern cudaError_t cudaMemset2D(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height); 
# 5065
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 5097
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, ::size_t count, cudaStream_t stream = 0); 
# 5134
extern cudaError_t cudaMemset2DAsync(void * devPtr, ::size_t pitch, int value, ::size_t width, ::size_t height, cudaStream_t stream = 0); 
# 5184
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 5207
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 5229
extern cudaError_t cudaGetSymbolSize(::size_t * size, const void * symbol); 
# 5296
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, ::size_t count, int dstDevice, cudaStream_t stream = 0); 
# 5382
extern cudaError_t cudaMemAdvise(const void * devPtr, ::size_t count, cudaMemoryAdvise advice, int device); 
# 5438
extern cudaError_t cudaMemRangeGetAttribute(void * data, ::size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, ::size_t count); 
# 5474
extern cudaError_t cudaMemRangeGetAttributes(void ** data, ::size_t * dataSizes, cudaMemRangeAttribute * attributes, ::size_t numAttributes, const void * devPtr, ::size_t count); 
# 5627
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 5665
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 5704
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 5723
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 5783
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 5815
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 5851
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 5883
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 5912
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, ::size_t * size, cudaGraphicsResource_t resource); 
# 5946
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 5971
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 6011
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 6046
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 6093
extern cudaError_t cudaBindTexture(::size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, ::size_t size = ((2147483647) * 2U) + 1U); 
# 6144
extern cudaError_t cudaBindTexture2D(::size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, ::size_t width, ::size_t height, ::size_t pitch); 
# 6172
extern cudaError_t cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 6200
extern cudaError_t cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); 
# 6221
extern cudaError_t cudaUnbindTexture(const textureReference * texref); 
# 6246
extern cudaError_t cudaGetTextureAlignmentOffset(::size_t * offset, const textureReference * texref); 
# 6271
extern cudaError_t cudaGetTextureReference(const textureReference ** texref, const void * symbol); 
# 6311
extern cudaError_t cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); 
# 6330
extern cudaError_t cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); 
# 6556
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 6571
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 6587
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 6603
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 6620
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 6659
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 6674
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 6689
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 6716
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 6733
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 6738
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 6964
}
# 107 "/usr/local/cuda-8.0/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 108
{ 
# 109
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 110
} 
# 112
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 113
{ 
# 114
int e = (((int)sizeof(unsigned short)) * 8); 
# 116
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 117
} 
# 119
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 120
{ 
# 121
int e = (((int)sizeof(unsigned short)) * 8); 
# 123
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 124
} 
# 126
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 127
{ 
# 128
int e = (((int)sizeof(unsigned short)) * 8); 
# 130
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 131
} 
# 133
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 134
{ 
# 135
int e = (((int)sizeof(unsigned short)) * 8); 
# 137
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 138
} 
# 140
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 141
{ 
# 142
int e = (((int)sizeof(char)) * 8); 
# 147
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 149
} 
# 151
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 152
{ 
# 153
int e = (((int)sizeof(signed char)) * 8); 
# 155
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 156
} 
# 158
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 159
{ 
# 160
int e = (((int)sizeof(unsigned char)) * 8); 
# 162
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 163
} 
# 165
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 166
{ 
# 167
int e = (((int)sizeof(signed char)) * 8); 
# 169
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 170
} 
# 172
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 173
{ 
# 174
int e = (((int)sizeof(unsigned char)) * 8); 
# 176
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 177
} 
# 179
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 180
{ 
# 181
int e = (((int)sizeof(signed char)) * 8); 
# 183
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 184
} 
# 186
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 187
{ 
# 188
int e = (((int)sizeof(unsigned char)) * 8); 
# 190
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 191
} 
# 193
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 194
{ 
# 195
int e = (((int)sizeof(signed char)) * 8); 
# 197
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 198
} 
# 200
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 201
{ 
# 202
int e = (((int)sizeof(unsigned char)) * 8); 
# 204
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 205
} 
# 207
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 208
{ 
# 209
int e = (((int)sizeof(short)) * 8); 
# 211
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 212
} 
# 214
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 215
{ 
# 216
int e = (((int)sizeof(unsigned short)) * 8); 
# 218
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 219
} 
# 221
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 222
{ 
# 223
int e = (((int)sizeof(short)) * 8); 
# 225
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 226
} 
# 228
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 229
{ 
# 230
int e = (((int)sizeof(unsigned short)) * 8); 
# 232
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 233
} 
# 235
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 236
{ 
# 237
int e = (((int)sizeof(short)) * 8); 
# 239
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 240
} 
# 242
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 243
{ 
# 244
int e = (((int)sizeof(unsigned short)) * 8); 
# 246
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 247
} 
# 249
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 250
{ 
# 251
int e = (((int)sizeof(short)) * 8); 
# 253
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 254
} 
# 256
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 257
{ 
# 258
int e = (((int)sizeof(unsigned short)) * 8); 
# 260
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 261
} 
# 263
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 264
{ 
# 265
int e = (((int)sizeof(int)) * 8); 
# 267
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 268
} 
# 270
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 271
{ 
# 272
int e = (((int)sizeof(unsigned)) * 8); 
# 274
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 275
} 
# 277
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 278
{ 
# 279
int e = (((int)sizeof(int)) * 8); 
# 281
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 282
} 
# 284
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 285
{ 
# 286
int e = (((int)sizeof(unsigned)) * 8); 
# 288
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 289
} 
# 291
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 292
{ 
# 293
int e = (((int)sizeof(int)) * 8); 
# 295
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 296
} 
# 298
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 299
{ 
# 300
int e = (((int)sizeof(unsigned)) * 8); 
# 302
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 303
} 
# 305
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 306
{ 
# 307
int e = (((int)sizeof(int)) * 8); 
# 309
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 310
} 
# 312
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 313
{ 
# 314
int e = (((int)sizeof(unsigned)) * 8); 
# 316
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 317
} 
# 379
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 380
{ 
# 381
int e = (((int)sizeof(float)) * 8); 
# 383
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 384
} 
# 386
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 387
{ 
# 388
int e = (((int)sizeof(float)) * 8); 
# 390
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 391
} 
# 393
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 394
{ 
# 395
int e = (((int)sizeof(float)) * 8); 
# 397
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 398
} 
# 400
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 401
{ 
# 402
int e = (((int)sizeof(float)) * 8); 
# 404
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 405
} 
# 79 "/usr/local/cuda-8.0/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, ::size_t p, ::size_t xsz, ::size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106
static inline cudaPos make_cudaPos(::size_t x, ::size_t y, ::size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132
static inline cudaExtent make_cudaExtent(::size_t w, ::size_t h, ::size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 75 "/usr/local/cuda-8.0/include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 76
{ 
# 77
char1 t; (t.x) = x; return t; 
# 78
} 
# 80
static inline uchar1 make_uchar1(unsigned char x) 
# 81
{ 
# 82
uchar1 t; (t.x) = x; return t; 
# 83
} 
# 85
static inline char2 make_char2(signed char x, signed char y) 
# 86
{ 
# 87
char2 t; (t.x) = x; (t.y) = y; return t; 
# 88
} 
# 90
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 91
{ 
# 92
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 93
} 
# 95
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 96
{ 
# 97
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 98
} 
# 100
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 101
{ 
# 102
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 103
} 
# 105
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 106
{ 
# 107
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 108
} 
# 110
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 111
{ 
# 112
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 113
} 
# 115
static inline short1 make_short1(short x) 
# 116
{ 
# 117
short1 t; (t.x) = x; return t; 
# 118
} 
# 120
static inline ushort1 make_ushort1(unsigned short x) 
# 121
{ 
# 122
ushort1 t; (t.x) = x; return t; 
# 123
} 
# 125
static inline short2 make_short2(short x, short y) 
# 126
{ 
# 127
short2 t; (t.x) = x; (t.y) = y; return t; 
# 128
} 
# 130
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 131
{ 
# 132
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 133
} 
# 135
static inline short3 make_short3(short x, short y, short z) 
# 136
{ 
# 137
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 138
} 
# 140
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 141
{ 
# 142
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 143
} 
# 145
static inline short4 make_short4(short x, short y, short z, short w) 
# 146
{ 
# 147
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 148
} 
# 150
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 151
{ 
# 152
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 153
} 
# 155
static inline int1 make_int1(int x) 
# 156
{ 
# 157
int1 t; (t.x) = x; return t; 
# 158
} 
# 160
static inline uint1 make_uint1(unsigned x) 
# 161
{ 
# 162
uint1 t; (t.x) = x; return t; 
# 163
} 
# 165
static inline int2 make_int2(int x, int y) 
# 166
{ 
# 167
int2 t; (t.x) = x; (t.y) = y; return t; 
# 168
} 
# 170
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 171
{ 
# 172
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 173
} 
# 175
static inline int3 make_int3(int x, int y, int z) 
# 176
{ 
# 177
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 178
} 
# 180
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 181
{ 
# 182
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 183
} 
# 185
static inline int4 make_int4(int x, int y, int z, int w) 
# 186
{ 
# 187
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 188
} 
# 190
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 191
{ 
# 192
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 193
} 
# 195
static inline long1 make_long1(long x) 
# 196
{ 
# 197
long1 t; (t.x) = x; return t; 
# 198
} 
# 200
static inline ulong1 make_ulong1(unsigned long x) 
# 201
{ 
# 202
ulong1 t; (t.x) = x; return t; 
# 203
} 
# 205
static inline long2 make_long2(long x, long y) 
# 206
{ 
# 207
long2 t; (t.x) = x; (t.y) = y; return t; 
# 208
} 
# 210
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 211
{ 
# 212
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 213
} 
# 215
static inline long3 make_long3(long x, long y, long z) 
# 216
{ 
# 217
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 218
} 
# 220
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 221
{ 
# 222
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 223
} 
# 225
static inline long4 make_long4(long x, long y, long z, long w) 
# 226
{ 
# 227
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 228
} 
# 230
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 231
{ 
# 232
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 233
} 
# 235
static inline float1 make_float1(float x) 
# 236
{ 
# 237
float1 t; (t.x) = x; return t; 
# 238
} 
# 240
static inline float2 make_float2(float x, float y) 
# 241
{ 
# 242
float2 t; (t.x) = x; (t.y) = y; return t; 
# 243
} 
# 245
static inline float3 make_float3(float x, float y, float z) 
# 246
{ 
# 247
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 248
} 
# 250
static inline float4 make_float4(float x, float y, float z, float w) 
# 251
{ 
# 252
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 253
} 
# 255
static inline longlong1 make_longlong1(long long x) 
# 256
{ 
# 257
longlong1 t; (t.x) = x; return t; 
# 258
} 
# 260
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 261
{ 
# 262
ulonglong1 t; (t.x) = x; return t; 
# 263
} 
# 265
static inline longlong2 make_longlong2(long long x, long long y) 
# 266
{ 
# 267
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 268
} 
# 270
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 271
{ 
# 272
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 273
} 
# 275
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 276
{ 
# 277
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 278
} 
# 280
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 281
{ 
# 282
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 283
} 
# 285
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 286
{ 
# 287
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 288
} 
# 290
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 291
{ 
# 292
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 293
} 
# 295
static inline double1 make_double1(double x) 
# 296
{ 
# 297
double1 t; (t.x) = x; return t; 
# 298
} 
# 300
static inline double2 make_double2(double x, double y) 
# 301
{ 
# 302
double2 t; (t.x) = x; (t.y) = y; return t; 
# 303
} 
# 305
static inline double3 make_double3(double x, double y, double z) 
# 306
{ 
# 307
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 308
} 
# 310
static inline double4 make_double4(double x, double y, double z, double w) 
# 311
{ 
# 312
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 313
} 
# 27 "/usr/include/string.h" 3
extern "C" {
# 42
extern __attribute((gnu_inline)) inline void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) throw()
# 43
 __attribute((__nonnull__(1, 2))); 
# 46
extern __attribute((gnu_inline)) inline void *memmove(void * __dest, const void * __src, ::size_t __n) throw()
# 47
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, ::size_t __n) throw()
# 56
 __attribute((__nonnull__(1, 2))); 
# 62
extern __attribute((gnu_inline)) inline void *memset(void * __s, int __c, ::size_t __n) throw() __attribute((__nonnull__(1))); 
# 65
extern int memcmp(const void * __s1, const void * __s2, ::size_t __n) throw()
# 66
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 70
extern "C++" {
# 72
extern __attribute((gnu_inline)) inline void *memchr(void * __s, int __c, ::size_t __n) throw() __asm__("memchr")
# 73
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 74
extern __attribute((gnu_inline)) inline const void *memchr(const void * __s, int __c, ::size_t __n) throw() __asm__("memchr")
# 75
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline void *
# 79
memchr(void *__s, int __c, ::size_t __n) throw() 
# 80
{ 
# 81
return __builtin_memchr(__s, __c, __n); 
# 82
} 
# 84
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const void *
# 85
memchr(const void *__s, int __c, ::size_t __n) throw() 
# 86
{ 
# 87
return __builtin_memchr(__s, __c, __n); 
# 88
} 
# 90
}
# 101
extern "C++" void *rawmemchr(void * __s, int __c) throw() __asm__("rawmemchr")
# 102
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 103
extern "C++" const void *rawmemchr(const void * __s, int __c) throw() __asm__("rawmemchr")
# 104
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 112
extern "C++" void *memrchr(void * __s, int __c, ::size_t __n) throw() __asm__("memrchr")
# 113
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 114
extern "C++" const void *memrchr(const void * __s, int __c, ::size_t __n) throw() __asm__("memrchr")
# 115
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 125
extern __attribute((gnu_inline)) inline char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 126
 __attribute((__nonnull__(1, 2))); 
# 128
extern __attribute((gnu_inline)) inline char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 130
 __attribute((__nonnull__(1, 2))); 
# 133
extern __attribute((gnu_inline)) inline char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 134
 __attribute((__nonnull__(1, 2))); 
# 136
extern __attribute((gnu_inline)) inline char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 137
 __attribute((__nonnull__(1, 2))); 
# 140
extern int strcmp(const char * __s1, const char * __s2) throw()
# 141
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 143
extern int strncmp(const char * __s1, const char * __s2, ::size_t __n) throw()
# 144
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 147
extern int strcoll(const char * __s1, const char * __s2) throw()
# 148
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 150
extern ::size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 152
 __attribute((__nonnull__(2))); 
# 39 "/usr/include/xlocale.h" 3
typedef 
# 27
struct __locale_struct { 
# 30
struct __locale_data *__locales[13]; 
# 33
const unsigned short *__ctype_b; 
# 34
const int *__ctype_tolower; 
# 35
const int *__ctype_toupper; 
# 38
const char *__names[13]; 
# 39
} *__locale_t; 
# 42
typedef __locale_t locale_t; 
# 162 "/usr/include/string.h" 3
extern int strcoll_l(const char * __s1, const char * __s2, __locale_t __l) throw()
# 163
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 165
extern ::size_t strxfrm_l(char * __dest, const char * __src, ::size_t __n, __locale_t __l) throw()
# 166
 __attribute((__nonnull__(2, 4))); 
# 171
extern char *strdup(const char * __s) throw()
# 172
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 179
extern char *strndup(const char * __string, ::size_t __n) throw()
# 180
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 209
extern "C++" {
# 211
extern __attribute((gnu_inline)) inline char *strchr(char * __s, int __c) throw() __asm__("strchr")
# 212
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 213
extern __attribute((gnu_inline)) inline const char *strchr(const char * __s, int __c) throw() __asm__("strchr")
# 214
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 217
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 218
strchr(char *__s, int __c) throw() 
# 219
{ 
# 220
return __builtin_strchr(__s, __c); 
# 221
} 
# 223
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 224
strchr(const char *__s, int __c) throw() 
# 225
{ 
# 226
return __builtin_strchr(__s, __c); 
# 227
} 
# 229
}
# 236
extern "C++" {
# 238
extern __attribute((gnu_inline)) inline char *strrchr(char * __s, int __c) throw() __asm__("strrchr")
# 239
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 240
extern __attribute((gnu_inline)) inline const char *strrchr(const char * __s, int __c) throw() __asm__("strrchr")
# 241
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 244
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 245
strrchr(char *__s, int __c) throw() 
# 246
{ 
# 247
return __builtin_strrchr(__s, __c); 
# 248
} 
# 250
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 251
strrchr(const char *__s, int __c) throw() 
# 252
{ 
# 253
return __builtin_strrchr(__s, __c); 
# 254
} 
# 256
}
# 267
extern "C++" char *strchrnul(char * __s, int __c) throw() __asm__("strchrnul")
# 268
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 269
extern "C++" const char *strchrnul(const char * __s, int __c) throw() __asm__("strchrnul")
# 270
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 280
extern ::size_t strcspn(const char * __s, const char * __reject) throw()
# 281
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 284
extern ::size_t strspn(const char * __s, const char * __accept) throw()
# 285
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 288
extern "C++" {
# 290
extern __attribute((gnu_inline)) inline char *strpbrk(char * __s, const char * __accept) throw() __asm__("strpbrk")
# 291
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 292
extern __attribute((gnu_inline)) inline const char *strpbrk(const char * __s, const char * __accept) throw() __asm__("strpbrk")
# 293
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 296
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 297
strpbrk(char *__s, const char *__accept) throw() 
# 298
{ 
# 299
return __builtin_strpbrk(__s, __accept); 
# 300
} 
# 302
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 303
strpbrk(const char *__s, const char *__accept) throw() 
# 304
{ 
# 305
return __builtin_strpbrk(__s, __accept); 
# 306
} 
# 308
}
# 315
extern "C++" {
# 317
extern __attribute((gnu_inline)) inline char *strstr(char * __haystack, const char * __needle) throw() __asm__("strstr")
# 318
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 319
extern __attribute((gnu_inline)) inline const char *strstr(const char * __haystack, const char * __needle) throw() __asm__("strstr")
# 320
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 323
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 324
strstr(char *__haystack, const char *__needle) throw() 
# 325
{ 
# 326
return __builtin_strstr(__haystack, __needle); 
# 327
} 
# 329
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 330
strstr(const char *__haystack, const char *__needle) throw() 
# 331
{ 
# 332
return __builtin_strstr(__haystack, __needle); 
# 333
} 
# 335
}
# 343
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) throw()
# 344
 __attribute((__nonnull__(2))); 
# 349
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 352
 __attribute((__nonnull__(2, 3))); 
# 354
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) throw()
# 356
 __attribute((__nonnull__(2, 3))); 
# 362
extern "C++" char *strcasestr(char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 363
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 364
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) throw() __asm__("strcasestr")
# 366
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 377
extern void *memmem(const void * __haystack, ::size_t __haystacklen, const void * __needle, ::size_t __needlelen) throw()
# 379
 __attribute((__pure__)) __attribute((__nonnull__(1, 3))); 
# 383
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) throw()
# 385
 __attribute((__nonnull__(1, 2))); 
# 386
extern __attribute((gnu_inline)) inline void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __n) throw()
# 388
 __attribute((__nonnull__(1, 2))); 
# 394
extern ::size_t strlen(const char * __s) throw()
# 395
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 401
extern ::size_t strnlen(const char * __string, ::size_t __maxlen) throw()
# 402
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 408
extern char *strerror(int __errnum) throw(); 
# 433
extern char *strerror_r(int __errnum, char * __buf, ::size_t __buflen) throw()
# 434
 __attribute((__nonnull__(2))) __attribute((__warn_unused_result__)); 
# 440
extern char *strerror_l(int __errnum, __locale_t __l) throw(); 
# 446
extern void __bzero(void * __s, ::size_t __n) throw() __attribute((__nonnull__(1))); 
# 450
extern __attribute((gnu_inline)) inline void bcopy(const void * __src, void * __dest, ::size_t __n) throw()
# 451
 __attribute((__nonnull__(1, 2))); 
# 454
extern __attribute((gnu_inline)) inline void bzero(void * __s, ::size_t __n) throw() __attribute((__nonnull__(1))); 
# 457
extern int bcmp(const void * __s1, const void * __s2, ::size_t __n) throw()
# 458
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 462
extern "C++" {
# 464
extern __attribute((gnu_inline)) inline char *index(char * __s, int __c) throw() __asm__("index")
# 465
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 466
extern __attribute((gnu_inline)) inline const char *index(const char * __s, int __c) throw() __asm__("index")
# 467
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 470
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 471
index(char *__s, int __c) throw() 
# 472
{ 
# 473
return __builtin_index(__s, __c); 
# 474
} 
# 476
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 477
index(const char *__s, int __c) throw() 
# 478
{ 
# 479
return __builtin_index(__s, __c); 
# 480
} 
# 482
}
# 490
extern "C++" {
# 492
extern __attribute((gnu_inline)) inline char *rindex(char * __s, int __c) throw() __asm__("rindex")
# 493
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 494
extern __attribute((gnu_inline)) inline const char *rindex(const char * __s, int __c) throw() __asm__("rindex")
# 495
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 498
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline char *
# 499
rindex(char *__s, int __c) throw() 
# 500
{ 
# 501
return __builtin_rindex(__s, __c); 
# 502
} 
# 504
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline const char *
# 505
rindex(const char *__s, int __c) throw() 
# 506
{ 
# 507
return __builtin_rindex(__s, __c); 
# 508
} 
# 510
}
# 518
extern int ffs(int __i) throw() __attribute((const)); 
# 523
extern int ffsl(long __l) throw() __attribute((const)); 
# 524
__extension__ extern int ffsll(long long __ll) throw()
# 525
 __attribute((const)); 
# 529
extern int strcasecmp(const char * __s1, const char * __s2) throw()
# 530
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 533
extern int strncasecmp(const char * __s1, const char * __s2, ::size_t __n) throw()
# 534
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 540
extern int strcasecmp_l(const char * __s1, const char * __s2, __locale_t __loc) throw()
# 542
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 544
extern int strncasecmp_l(const char * __s1, const char * __s2, ::size_t __n, __locale_t __loc) throw()
# 546
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 552
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) throw()
# 554
 __attribute((__nonnull__(1, 2))); 
# 559
extern char *strsignal(int __sig) throw(); 
# 562
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 563
 __attribute((__nonnull__(1, 2))); 
# 564
extern __attribute((gnu_inline)) inline char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw()
# 565
 __attribute((__nonnull__(1, 2))); 
# 569
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 571
 __attribute((__nonnull__(1, 2))); 
# 572
extern __attribute((gnu_inline)) inline char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __n) throw()
# 574
 __attribute((__nonnull__(1, 2))); 
# 579
extern int strverscmp(const char * __s1, const char * __s2) throw()
# 580
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 583
extern char *strfry(char * __string) throw() __attribute((__nonnull__(1))); 
# 586
extern void *memfrob(void * __s, ::size_t __n) throw() __attribute((__nonnull__(1))); 
# 594
extern "C++" char *basename(char * __filename) throw() __asm__("basename")
# 595
 __attribute((__nonnull__(1))); 
# 596
extern "C++" const char *basename(const char * __filename) throw() __asm__("basename")
# 597
 __attribute((__nonnull__(1))); 
# 49 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 50
__attribute((__leaf__)) extern inline void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __len) throw() 
# 52
{ 
# 53
return __builtin___memcpy_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 54
} 
# 56
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 57
__attribute((__leaf__)) extern inline void *memmove(void *__dest, const void *__src, ::size_t __len) throw() 
# 58
{ 
# 59
return __builtin___memmove_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 60
} 
# 63
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 64
__attribute((__leaf__)) extern inline void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, ::size_t __len) throw() 
# 66
{ 
# 67
return __builtin___mempcpy_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 68
} 
# 77
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 78
__attribute((__leaf__)) extern inline void *memset(void *__dest, int __ch, ::size_t __len) throw() 
# 79
{ 
# 90
return __builtin___memset_chk(__dest, __ch, __len, __builtin_object_size(__dest, 0)); 
# 91
} 
# 94
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline void
# 95
 __attribute((__leaf__)) bcopy(const void *__src, void *__dest, ::size_t __len) throw() 
# 96
{ 
# 97
(void)__builtin___memmove_chk(__dest, __src, __len, __builtin_object_size(__dest, 0)); 
# 98
} 
# 100
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline void
# 101
 __attribute((__leaf__)) bzero(void *__dest, ::size_t __len) throw() 
# 102
{ 
# 103
(void)__builtin___memset_chk(__dest, '\000', __len, __builtin_object_size(__dest, 0)); 
# 104
} 
# 107
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 108
__attribute((__leaf__)) extern inline char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 109
{ 
# 110
return __builtin___strcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 111
} 
# 114
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 115
__attribute((__leaf__)) extern inline char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 116
{ 
# 117
return __builtin___stpcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 118
} 
# 122
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 123
__attribute((__leaf__)) extern inline char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __len) throw() 
# 125
{ 
# 126
return __builtin___strncpy_chk(__dest, __src, __len, __builtin_object_size(__dest, 2 > 1)); 
# 127
} 
# 130
extern char *__stpncpy_chk(char * __dest, const char * __src, ::size_t __n, ::size_t __destlen) throw(); 
# 132
extern char *__stpncpy_alias(char * __dest, const char * __src, ::size_t __n) throw() __asm__("stpncpy"); 
# 135
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 136
__attribute((__leaf__)) extern inline char *stpncpy(char *__dest, const char *__src, ::size_t __n) throw() 
# 137
{ 
# 138
if ((__builtin_object_size(__dest, 2 > 1) != ((::size_t)(-1))) && ((!(0)) || (__n > __builtin_object_size(__dest, 2 > 1)))) { 
# 140
return __stpncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1)); }  
# 141
return __stpncpy_alias(__dest, __src, __n); 
# 142
} 
# 145
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 146
__attribute((__leaf__)) extern inline char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) throw() 
# 147
{ 
# 148
return __builtin___strcat_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1)); 
# 149
} 
# 152
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 153
__attribute((__leaf__)) extern inline char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, ::size_t __len) throw() 
# 155
{ 
# 156
return __builtin___strncat_chk(__dest, __src, __len, __builtin_object_size(__dest, 2 > 1)); 
# 157
} 
# 658 "/usr/include/string.h" 3
}
# 29 "/usr/include/time.h" 3
extern "C" {
# 30 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char; 
# 31
typedef unsigned short __u_short; 
# 32
typedef unsigned __u_int; 
# 33
typedef unsigned long __u_long; 
# 36
typedef signed char __int8_t; 
# 37
typedef unsigned char __uint8_t; 
# 38
typedef signed short __int16_t; 
# 39
typedef unsigned short __uint16_t; 
# 40
typedef signed int __int32_t; 
# 41
typedef unsigned __uint32_t; 
# 43
typedef signed long __int64_t; 
# 44
typedef unsigned long __uint64_t; 
# 52
typedef long __quad_t; 
# 53
typedef unsigned long __u_quad_t; 
# 124
typedef unsigned long __dev_t; 
# 125
typedef unsigned __uid_t; 
# 126
typedef unsigned __gid_t; 
# 127
typedef unsigned long __ino_t; 
# 128
typedef unsigned long __ino64_t; 
# 129
typedef unsigned __mode_t; 
# 130
typedef unsigned long __nlink_t; 
# 131
typedef long __off_t; 
# 132
typedef long __off64_t; 
# 133
typedef int __pid_t; 
# 134
typedef struct { int __val[2]; } __fsid_t; 
# 135
typedef long __clock_t; 
# 136
typedef unsigned long __rlim_t; 
# 137
typedef unsigned long __rlim64_t; 
# 138
typedef unsigned __id_t; 
# 139
typedef long __time_t; 
# 140
typedef unsigned __useconds_t; 
# 141
typedef long __suseconds_t; 
# 143
typedef int __daddr_t; 
# 144
typedef int __key_t; 
# 147
typedef int __clockid_t; 
# 150
typedef void *__timer_t; 
# 153
typedef long __blksize_t; 
# 158
typedef long __blkcnt_t; 
# 159
typedef long __blkcnt64_t; 
# 162
typedef unsigned long __fsblkcnt_t; 
# 163
typedef unsigned long __fsblkcnt64_t; 
# 166
typedef unsigned long __fsfilcnt_t; 
# 167
typedef unsigned long __fsfilcnt64_t; 
# 170
typedef long __fsword_t; 
# 172
typedef long __ssize_t; 
# 175
typedef long __syscall_slong_t; 
# 177
typedef unsigned long __syscall_ulong_t; 
# 181
typedef __off64_t __loff_t; 
# 182
typedef __quad_t *__qaddr_t; 
# 183
typedef char *__caddr_t; 
# 186
typedef long __intptr_t; 
# 189
typedef unsigned __socklen_t; 
# 30 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
struct timeval { 
# 32
__time_t tv_sec; 
# 33
__suseconds_t tv_usec; 
# 34
}; 
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
struct timex { 
# 27
unsigned modes; 
# 28
__syscall_slong_t offset; 
# 29
__syscall_slong_t freq; 
# 30
__syscall_slong_t maxerror; 
# 31
__syscall_slong_t esterror; 
# 32
int status; 
# 33
__syscall_slong_t constant; 
# 34
__syscall_slong_t precision; 
# 35
__syscall_slong_t tolerance; 
# 36
timeval time; 
# 37
__syscall_slong_t tick; 
# 38
__syscall_slong_t ppsfreq; 
# 39
__syscall_slong_t jitter; 
# 40
int shift; 
# 41
__syscall_slong_t stabil; 
# 42
__syscall_slong_t jitcnt; 
# 43
__syscall_slong_t calcnt; 
# 44
__syscall_slong_t errcnt; 
# 45
__syscall_slong_t stbcnt; 
# 47
int tai; 
# 50
int:32; int:32; int:32; int:32; 
# 51
int:32; int:32; int:32; int:32; 
# 52
int:32; int:32; int:32; 
# 53
}; 
# 90 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" {
# 93
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) throw(); 
# 95
}
# 59 "/usr/include/time.h" 3
typedef __clock_t clock_t; 
# 75
typedef __time_t time_t; 
# 91
typedef __clockid_t clockid_t; 
# 103
typedef __timer_t timer_t; 
# 120
struct timespec { 
# 122
__time_t tv_sec; 
# 123
__syscall_slong_t tv_nsec; 
# 124
}; 
# 133
struct tm { 
# 135
int tm_sec; 
# 136
int tm_min; 
# 137
int tm_hour; 
# 138
int tm_mday; 
# 139
int tm_mon; 
# 140
int tm_year; 
# 141
int tm_wday; 
# 142
int tm_yday; 
# 143
int tm_isdst; 
# 146
long tm_gmtoff; 
# 147
const char *tm_zone; 
# 152
}; 
# 161
struct itimerspec { 
# 163
timespec it_interval; 
# 164
timespec it_value; 
# 165
}; 
# 168
struct sigevent; 
# 174
typedef __pid_t pid_t; 
# 189
extern clock_t clock() throw(); 
# 192
extern time_t time(time_t * __timer) throw(); 
# 195
extern double difftime(time_t __time1, time_t __time0) throw()
# 196
 __attribute((const)); 
# 199
extern time_t mktime(tm * __tp) throw(); 
# 205
extern ::size_t strftime(char *__restrict__ __s, ::size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 213
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) throw(); 
# 223
extern ::size_t strftime_l(char *__restrict__ __s, ::size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, __locale_t __loc) throw(); 
# 230
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, __locale_t __loc) throw(); 
# 239
extern tm *gmtime(const time_t * __timer) throw(); 
# 243
extern tm *localtime(const time_t * __timer) throw(); 
# 249
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 254
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) throw(); 
# 261
extern char *asctime(const tm * __tp) throw(); 
# 264
extern char *ctime(const time_t * __timer) throw(); 
# 272
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) throw(); 
# 276
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) throw(); 
# 282
extern char *__tzname[2]; 
# 283
extern int __daylight; 
# 284
extern long __timezone; 
# 289
extern char *tzname[2]; 
# 293
extern void tzset() throw(); 
# 297
extern int daylight; 
# 298
extern long timezone; 
# 304
extern int stime(const time_t * __when) throw(); 
# 319
extern time_t timegm(tm * __tp) throw(); 
# 322
extern time_t timelocal(tm * __tp) throw(); 
# 325
extern int dysize(int __year) throw() __attribute((const)); 
# 334
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 339
extern int clock_getres(clockid_t __clock_id, timespec * __res) throw(); 
# 342
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) throw(); 
# 345
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) throw(); 
# 353
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 358
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) throw(); 
# 363
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) throw(); 
# 368
extern int timer_delete(timer_t __timerid) throw(); 
# 371
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) throw(); 
# 376
extern int timer_gettime(timer_t __timerid, itimerspec * __value) throw(); 
# 380
extern int timer_getoverrun(timer_t __timerid) throw(); 
# 386
extern int timespec_get(timespec * __ts, int __base) throw()
# 387
 __attribute((__nonnull__(1))); 
# 403
extern int getdate_err; 
# 412
extern tm *getdate(const char * __string); 
# 426
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 430
}
# 68 "/usr/local/cuda-8.0/include/common_functions.h"
extern "C" {
# 71
extern clock_t clock() throw(); 
# 72
extern void *memset(void *, int, ::size_t) throw(); 
# 73
extern void *memcpy(void *, const void *, ::size_t) throw(); 
# 75
}
# 93 "/usr/local/cuda-8.0/include/math_functions.h"
extern "C" {
# 164
extern int abs(int) throw(); 
# 165
extern long labs(long) throw(); 
# 166
extern long long llabs(long long) throw(); 
# 216
extern double fabs(double x) throw(); 
# 257
extern float fabsf(float x) throw(); 
# 261
extern inline int min(int, int); 
# 263
extern inline unsigned umin(unsigned, unsigned); 
# 264
extern inline long long llmin(long long, long long); 
# 265
extern inline unsigned long long ullmin(unsigned long long, unsigned long long); 
# 286
extern float fminf(float x, float y) throw(); 
# 306
extern double fmin(double x, double y) throw(); 
# 313
extern inline int max(int, int); 
# 315
extern inline unsigned umax(unsigned, unsigned); 
# 316
extern inline long long llmax(long long, long long); 
# 317
extern inline unsigned long long ullmax(unsigned long long, unsigned long long); 
# 338
extern float fmaxf(float x, float y) throw(); 
# 358
extern double fmax(double, double) throw(); 
# 402
extern double sin(double x) throw(); 
# 435
extern double cos(double x) throw(); 
# 454
extern void sincos(double x, double * sptr, double * cptr) throw(); 
# 470
extern void sincosf(float x, float * sptr, float * cptr) throw(); 
# 515
extern double tan(double x) throw(); 
# 584
extern double sqrt(double x) throw(); 
# 656
extern double rsqrt(double x); 
# 726
extern float rsqrtf(float x); 
# 782
extern double log2(double x) throw(); 
# 807
extern double exp2(double x) throw(); 
# 832
extern float exp2f(float x) throw(); 
# 859
extern double exp10(double x) throw(); 
# 882
extern float exp10f(float x) throw(); 
# 928
extern double expm1(double x) throw(); 
# 973
extern float expm1f(float x) throw(); 
# 1028
extern float log2f(float x) throw(); 
# 1082
extern double log10(double x) throw(); 
# 1153
extern double log(double x) throw(); 
# 1247
extern double log1p(double x) throw(); 
# 1344
extern float log1pf(float x) throw(); 
# 1419
extern double floor(double x) throw(); 
# 1458
extern double exp(double x) throw(); 
# 1489
extern double cosh(double x) throw(); 
# 1519
extern double sinh(double x) throw(); 
# 1549
extern double tanh(double x) throw(); 
# 1584
extern double acosh(double x) throw(); 
# 1622
extern float acoshf(float x) throw(); 
# 1638
extern double asinh(double x) throw(); 
# 1654
extern float asinhf(float x) throw(); 
# 1708
extern double atanh(double x) throw(); 
# 1762
extern float atanhf(float x) throw(); 
# 1821
extern double ldexp(double x, int exp) throw(); 
# 1877
extern float ldexpf(float x, int exp) throw(); 
# 1929
extern double logb(double x) throw(); 
# 1984
extern float logbf(float x) throw(); 
# 2014
extern int ilogb(double x) throw(); 
# 2044
extern int ilogbf(float x) throw(); 
# 2120
extern double scalbn(double x, int n) throw(); 
# 2196
extern float scalbnf(float x, int n) throw(); 
# 2272
extern double scalbln(double x, long n) throw(); 
# 2348
extern float scalblnf(float x, long n) throw(); 
# 2426
extern double frexp(double x, int * nptr) throw(); 
# 2501
extern float frexpf(float x, int * nptr) throw(); 
# 2515
extern double round(double x) throw(); 
# 2532
extern float roundf(float x) throw(); 
# 2550
extern long lround(double x) throw(); 
# 2568
extern long lroundf(float x) throw(); 
# 2586
extern long long llround(double x) throw(); 
# 2604
extern long long llroundf(float x) throw(); 
# 2656
extern float rintf(float x) throw(); 
# 2672
extern long lrint(double x) throw(); 
# 2688
extern long lrintf(float x) throw(); 
# 2704
extern long long llrint(double x) throw(); 
# 2720
extern long long llrintf(float x) throw(); 
# 2773
extern double nearbyint(double x) throw(); 
# 2826
extern float nearbyintf(float x) throw(); 
# 2888
extern double ceil(double x) throw(); 
# 2900
extern double trunc(double x) throw(); 
# 2915
extern float truncf(float x) throw(); 
# 2941
extern double fdim(double x, double y) throw(); 
# 2967
extern float fdimf(float x, float y) throw(); 
# 3003
extern double atan2(double y, double x) throw(); 
# 3034
extern double atan(double x) throw(); 
# 3057
extern double acos(double x) throw(); 
# 3089
extern double asin(double x) throw(); 
# 3135
extern double hypot(double x, double y) throw(); 
# 3187
extern double rhypot(double x, double y) throw(); 
# 3233
extern float hypotf(float x, float y) throw(); 
# 3285
extern float rhypotf(float x, float y) throw(); 
# 3332
extern double norm3d(double a, double b, double c) throw(); 
# 3383
extern double rnorm3d(double a, double b, double c) throw(); 
# 3432
extern double norm4d(double a, double b, double c, double d) throw(); 
# 3488
extern double rnorm4d(double a, double b, double c, double d) throw(); 
# 3533
extern double norm(int dim, const double * t) throw(); 
# 3584
extern double rnorm(int dim, const double * t) throw(); 
# 3636
extern float rnormf(int dim, const float * a) throw(); 
# 3680
extern float normf(int dim, const float * a) throw(); 
# 3725
extern float norm3df(float a, float b, float c) throw(); 
# 3776
extern float rnorm3df(float a, float b, float c) throw(); 
# 3825
extern float norm4df(float a, float b, float c, float d) throw(); 
# 3881
extern float rnorm4df(float a, float b, float c, float d) throw(); 
# 3965
extern double cbrt(double x) throw(); 
# 4051
extern float cbrtf(float x) throw(); 
# 4106
extern double rcbrt(double x); 
# 4156
extern float rcbrtf(float x); 
# 4216
extern double sinpi(double x); 
# 4276
extern float sinpif(float x); 
# 4328
extern double cospi(double x); 
# 4380
extern float cospif(float x); 
# 4410
extern void sincospi(double x, double * sptr, double * cptr); 
# 4440
extern void sincospif(float x, float * sptr, float * cptr); 
# 4752
extern double pow(double x, double y) throw(); 
# 4808
extern double modf(double x, double * iptr) throw(); 
# 4867
extern double fmod(double x, double y) throw(); 
# 4953
extern double remainder(double x, double y) throw(); 
# 5043
extern float remainderf(float x, float y) throw(); 
# 5097
extern double remquo(double x, double y, int * quo) throw(); 
# 5151
extern float remquof(float x, float y, int * quo) throw(); 
# 5192
extern double j0(double x) throw(); 
# 5234
extern float j0f(float x) throw(); 
# 5295
extern double j1(double x) throw(); 
# 5356
extern float j1f(float x) throw(); 
# 5399
extern double jn(int n, double x) throw(); 
# 5442
extern float jnf(int n, float x) throw(); 
# 5494
extern double y0(double x) throw(); 
# 5546
extern float y0f(float x) throw(); 
# 5598
extern double y1(double x) throw(); 
# 5650
extern float y1f(float x) throw(); 
# 5703
extern double yn(int n, double x) throw(); 
# 5756
extern float ynf(int n, float x) throw(); 
# 5783
extern double cyl_bessel_i0(double x) throw(); 
# 5809
extern float cyl_bessel_i0f(float x) throw(); 
# 5836
extern double cyl_bessel_i1(double x) throw(); 
# 5862
extern float cyl_bessel_i1f(float x) throw(); 
# 5945
extern double erf(double x) throw(); 
# 6027
extern float erff(float x) throw(); 
# 6091
extern double erfinv(double y); 
# 6148
extern float erfinvf(float y); 
# 6187
extern double erfc(double x) throw(); 
# 6225
extern float erfcf(float x) throw(); 
# 6353
extern double lgamma(double x) throw(); 
# 6416
extern double erfcinv(double y); 
# 6472
extern float erfcinvf(float y); 
# 6530
extern double normcdfinv(double y); 
# 6588
extern float normcdfinvf(float y); 
# 6631
extern double normcdf(double y); 
# 6674
extern float normcdff(float y); 
# 6749
extern double erfcx(double x); 
# 6824
extern float erfcxf(float x); 
# 6958
extern float lgammaf(float x) throw(); 
# 7067
extern double tgamma(double x) throw(); 
# 7176
extern float tgammaf(float x) throw(); 
# 7189
extern double copysign(double x, double y) throw(); 
# 7202
extern float copysignf(float x, float y) throw(); 
# 7239
extern double nextafter(double x, double y) throw(); 
# 7276
extern float nextafterf(float x, float y) throw(); 
# 7292
extern double nan(const char * tagp) throw(); 
# 7308
extern float nanf(const char * tagp) throw(); 
# 7315
extern int __isinff(float) throw(); 
# 7316
extern int __isnanf(float) throw(); 
# 7326
extern int __finite(double) throw(); 
# 7327
extern int __finitef(float) throw(); 
# 7328
extern __attribute((gnu_inline)) inline int __signbit(double) throw(); 
# 7329
extern int __isnan(double) throw(); 
# 7330
extern int __isinf(double) throw(); 
# 7333
extern __attribute((gnu_inline)) inline int __signbitf(float) throw(); 
# 7492
extern double fma(double x, double y, double z) throw(); 
# 7650
extern float fmaf(float x, float y, float z) throw(); 
# 7661
extern __attribute((gnu_inline)) inline int __signbitl(long double) throw(); 
# 7667
extern int __finitel(long double) throw(); 
# 7668
extern int __isinfl(long double) throw(); 
# 7669
extern int __isnanl(long double) throw(); 
# 7719
extern float acosf(float x) throw(); 
# 7759
extern float asinf(float x) throw(); 
# 7799
extern float atanf(float x) throw(); 
# 7832
extern float atan2f(float y, float x) throw(); 
# 7856
extern float cosf(float x) throw(); 
# 7898
extern float sinf(float x) throw(); 
# 7940
extern float tanf(float x) throw(); 
# 7964
extern float coshf(float x) throw(); 
# 8005
extern float sinhf(float x) throw(); 
# 8035
extern float tanhf(float x) throw(); 
# 8086
extern float logf(float x) throw(); 
# 8136
extern float expf(float x) throw(); 
# 8187
extern float log10f(float x) throw(); 
# 8242
extern float modff(float x, float * iptr) throw(); 
# 8550
extern float powf(float x, float y) throw(); 
# 8619
extern float sqrtf(float x) throw(); 
# 8678
extern float ceilf(float x) throw(); 
# 8750
extern float floorf(float x) throw(); 
# 8809
extern float fmodf(float x, float y) throw(); 
# 8823
}
# 28 "/usr/include/math.h" 3
extern "C" {
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3
typedef float float_t; 
# 29
typedef double double_t; 
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) throw(); extern double __acos(double __x) throw(); 
# 56
extern double asin(double __x) throw(); extern double __asin(double __x) throw(); 
# 58
extern double atan(double __x) throw(); extern double __atan(double __x) throw(); 
# 60
extern double atan2(double __y, double __x) throw(); extern double __atan2(double __y, double __x) throw(); 
# 63
extern double cos(double __x) throw(); extern double __cos(double __x) throw(); 
# 65
extern double sin(double __x) throw(); extern double __sin(double __x) throw(); 
# 67
extern double tan(double __x) throw(); extern double __tan(double __x) throw(); 
# 72
extern double cosh(double __x) throw(); extern double __cosh(double __x) throw(); 
# 74
extern double sinh(double __x) throw(); extern double __sinh(double __x) throw(); 
# 76
extern double tanh(double __x) throw(); extern double __tanh(double __x) throw(); 
# 81
extern void sincos(double __x, double * __sinx, double * __cosx) throw(); extern void __sincos(double __x, double * __sinx, double * __cosx) throw(); 
# 88
extern double acosh(double __x) throw(); extern double __acosh(double __x) throw(); 
# 90
extern double asinh(double __x) throw(); extern double __asinh(double __x) throw(); 
# 92
extern double atanh(double __x) throw(); extern double __atanh(double __x) throw(); 
# 100
extern double exp(double __x) throw(); extern double __exp(double __x) throw(); 
# 103
extern double frexp(double __x, int * __exponent) throw(); extern double __frexp(double __x, int * __exponent) throw(); 
# 106
extern double ldexp(double __x, int __exponent) throw(); extern double __ldexp(double __x, int __exponent) throw(); 
# 109
extern double log(double __x) throw(); extern double __log(double __x) throw(); 
# 112
extern double log10(double __x) throw(); extern double __log10(double __x) throw(); 
# 115
extern double modf(double __x, double * __iptr) throw(); extern double __modf(double __x, double * __iptr) throw() __attribute((__nonnull__(2))); 
# 120
extern double exp10(double __x) throw(); extern double __exp10(double __x) throw(); 
# 122
extern double pow10(double __x) throw(); extern double __pow10(double __x) throw(); 
# 128
extern double expm1(double __x) throw(); extern double __expm1(double __x) throw(); 
# 131
extern double log1p(double __x) throw(); extern double __log1p(double __x) throw(); 
# 134
extern double logb(double __x) throw(); extern double __logb(double __x) throw(); 
# 141
extern double exp2(double __x) throw(); extern double __exp2(double __x) throw(); 
# 144
extern double log2(double __x) throw(); extern double __log2(double __x) throw(); 
# 153
extern double pow(double __x, double __y) throw(); extern double __pow(double __x, double __y) throw(); 
# 156
extern double sqrt(double __x) throw(); extern double __sqrt(double __x) throw(); 
# 162
extern double hypot(double __x, double __y) throw(); extern double __hypot(double __x, double __y) throw(); 
# 169
extern double cbrt(double __x) throw(); extern double __cbrt(double __x) throw(); 
# 178
extern double ceil(double __x) throw() __attribute((const)); extern double __ceil(double __x) throw() __attribute((const)); 
# 181
extern double fabs(double __x) throw() __attribute((const)); extern double __fabs(double __x) throw() __attribute((const)); 
# 184
extern double floor(double __x) throw() __attribute((const)); extern double __floor(double __x) throw() __attribute((const)); 
# 187
extern double fmod(double __x, double __y) throw(); extern double __fmod(double __x, double __y) throw(); 
# 192
extern int __isinf(double __value) throw() __attribute((const)); 
# 195
extern int __finite(double __value) throw() __attribute((const)); 
# 208
extern int finite(double __value) throw() __attribute((const)); 
# 211
extern double drem(double __x, double __y) throw(); extern double __drem(double __x, double __y) throw(); 
# 215
extern double significand(double __x) throw(); extern double __significand(double __x) throw(); 
# 221
extern double copysign(double __x, double __y) throw() __attribute((const)); extern double __copysign(double __x, double __y) throw() __attribute((const)); 
# 228
extern double nan(const char * __tagb) throw() __attribute((const)); extern double __nan(const char * __tagb) throw() __attribute((const)); 
# 234
extern int __isnan(double __value) throw() __attribute((const)); 
# 247
extern double j0(double) throw(); extern double __j0(double) throw(); 
# 248
extern double j1(double) throw(); extern double __j1(double) throw(); 
# 249
extern double jn(int, double) throw(); extern double __jn(int, double) throw(); 
# 250
extern double y0(double) throw(); extern double __y0(double) throw(); 
# 251
extern double y1(double) throw(); extern double __y1(double) throw(); 
# 252
extern double yn(int, double) throw(); extern double __yn(int, double) throw(); 
# 259
extern double erf(double) throw(); extern double __erf(double) throw(); 
# 260
extern double erfc(double) throw(); extern double __erfc(double) throw(); 
# 261
extern double lgamma(double) throw(); extern double __lgamma(double) throw(); 
# 268
extern double tgamma(double) throw(); extern double __tgamma(double) throw(); 
# 274
extern double gamma(double) throw(); extern double __gamma(double) throw(); 
# 281
extern double lgamma_r(double, int * __signgamp) throw(); extern double __lgamma_r(double, int * __signgamp) throw(); 
# 289
extern double rint(double __x) throw(); extern double __rint(double __x) throw(); 
# 292
extern double nextafter(double __x, double __y) throw() __attribute((const)); extern double __nextafter(double __x, double __y) throw() __attribute((const)); 
# 294
extern double nexttoward(double __x, long double __y) throw() __attribute((const)); extern double __nexttoward(double __x, long double __y) throw() __attribute((const)); 
# 298
extern double remainder(double __x, double __y) throw(); extern double __remainder(double __x, double __y) throw(); 
# 302
extern double scalbn(double __x, int __n) throw(); extern double __scalbn(double __x, int __n) throw(); 
# 306
extern int ilogb(double __x) throw(); extern int __ilogb(double __x) throw(); 
# 311
extern double scalbln(double __x, long __n) throw(); extern double __scalbln(double __x, long __n) throw(); 
# 315
extern double nearbyint(double __x) throw(); extern double __nearbyint(double __x) throw(); 
# 319
extern double round(double __x) throw() __attribute((const)); extern double __round(double __x) throw() __attribute((const)); 
# 323
extern double trunc(double __x) throw() __attribute((const)); extern double __trunc(double __x) throw() __attribute((const)); 
# 328
extern double remquo(double __x, double __y, int * __quo) throw(); extern double __remquo(double __x, double __y, int * __quo) throw(); 
# 335
extern long lrint(double __x) throw(); extern long __lrint(double __x) throw(); 
# 337
__extension__ extern long long llrint(double __x) throw(); extern long long __llrint(double __x) throw(); 
# 341
extern long lround(double __x) throw(); extern long __lround(double __x) throw(); 
# 343
__extension__ extern long long llround(double __x) throw(); extern long long __llround(double __x) throw(); 
# 347
extern double fdim(double __x, double __y) throw(); extern double __fdim(double __x, double __y) throw(); 
# 350
extern double fmax(double __x, double __y) throw() __attribute((const)); extern double __fmax(double __x, double __y) throw() __attribute((const)); 
# 353
extern double fmin(double __x, double __y) throw() __attribute((const)); extern double __fmin(double __x, double __y) throw() __attribute((const)); 
# 357
extern int __fpclassify(double __value) throw()
# 358
 __attribute((const)); 
# 361
extern __attribute((gnu_inline)) inline int __signbit(double __value) throw()
# 362
 __attribute((const)); 
# 366
extern double fma(double __x, double __y, double __z) throw(); extern double __fma(double __x, double __y, double __z) throw(); 
# 375
extern int __issignaling(double __value) throw()
# 376
 __attribute((const)); 
# 383
extern double scalb(double __x, double __n) throw(); extern double __scalb(double __x, double __n) throw(); 
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) throw(); extern float __acosf(float __x) throw(); 
# 56
extern float asinf(float __x) throw(); extern float __asinf(float __x) throw(); 
# 58
extern float atanf(float __x) throw(); extern float __atanf(float __x) throw(); 
# 60
extern float atan2f(float __y, float __x) throw(); extern float __atan2f(float __y, float __x) throw(); 
# 63
extern float cosf(float __x) throw(); 
# 65
extern float sinf(float __x) throw(); 
# 67
extern float tanf(float __x) throw(); 
# 72
extern float coshf(float __x) throw(); extern float __coshf(float __x) throw(); 
# 74
extern float sinhf(float __x) throw(); extern float __sinhf(float __x) throw(); 
# 76
extern float tanhf(float __x) throw(); extern float __tanhf(float __x) throw(); 
# 81
extern void sincosf(float __x, float * __sinx, float * __cosx) throw(); 
# 88
extern float acoshf(float __x) throw(); extern float __acoshf(float __x) throw(); 
# 90
extern float asinhf(float __x) throw(); extern float __asinhf(float __x) throw(); 
# 92
extern float atanhf(float __x) throw(); extern float __atanhf(float __x) throw(); 
# 100
extern float expf(float __x) throw(); 
# 103
extern float frexpf(float __x, int * __exponent) throw(); extern float __frexpf(float __x, int * __exponent) throw(); 
# 106
extern float ldexpf(float __x, int __exponent) throw(); extern float __ldexpf(float __x, int __exponent) throw(); 
# 109
extern float logf(float __x) throw(); 
# 112
extern float log10f(float __x) throw(); 
# 115
extern float modff(float __x, float * __iptr) throw(); extern float __modff(float __x, float * __iptr) throw() __attribute((__nonnull__(2))); 
# 120
extern float exp10f(float __x) throw(); 
# 122
extern float pow10f(float __x) throw(); extern float __pow10f(float __x) throw(); 
# 128
extern float expm1f(float __x) throw(); extern float __expm1f(float __x) throw(); 
# 131
extern float log1pf(float __x) throw(); extern float __log1pf(float __x) throw(); 
# 134
extern float logbf(float __x) throw(); extern float __logbf(float __x) throw(); 
# 141
extern float exp2f(float __x) throw(); extern float __exp2f(float __x) throw(); 
# 144
extern float log2f(float __x) throw(); 
# 153
extern float powf(float __x, float __y) throw(); 
# 156
extern float sqrtf(float __x) throw(); extern float __sqrtf(float __x) throw(); 
# 162
extern float hypotf(float __x, float __y) throw(); extern float __hypotf(float __x, float __y) throw(); 
# 169
extern float cbrtf(float __x) throw(); extern float __cbrtf(float __x) throw(); 
# 178
extern float ceilf(float __x) throw() __attribute((const)); extern float __ceilf(float __x) throw() __attribute((const)); 
# 181
extern float fabsf(float __x) throw() __attribute((const)); extern float __fabsf(float __x) throw() __attribute((const)); 
# 184
extern float floorf(float __x) throw() __attribute((const)); extern float __floorf(float __x) throw() __attribute((const)); 
# 187
extern float fmodf(float __x, float __y) throw(); extern float __fmodf(float __x, float __y) throw(); 
# 192
extern int __isinff(float __value) throw() __attribute((const)); 
# 195
extern int __finitef(float __value) throw() __attribute((const)); 
# 204
extern int isinff(float __value) throw() __attribute((const)); 
# 208
extern int finitef(float __value) throw() __attribute((const)); 
# 211
extern float dremf(float __x, float __y) throw(); extern float __dremf(float __x, float __y) throw(); 
# 215
extern float significandf(float __x) throw(); extern float __significandf(float __x) throw(); 
# 221
extern float copysignf(float __x, float __y) throw() __attribute((const)); extern float __copysignf(float __x, float __y) throw() __attribute((const)); 
# 228
extern float nanf(const char * __tagb) throw() __attribute((const)); extern float __nanf(const char * __tagb) throw() __attribute((const)); 
# 234
extern int __isnanf(float __value) throw() __attribute((const)); 
# 241
extern int isnanf(float __value) throw() __attribute((const)); 
# 247
extern float j0f(float) throw(); extern float __j0f(float) throw(); 
# 248
extern float j1f(float) throw(); extern float __j1f(float) throw(); 
# 249
extern float jnf(int, float) throw(); extern float __jnf(int, float) throw(); 
# 250
extern float y0f(float) throw(); extern float __y0f(float) throw(); 
# 251
extern float y1f(float) throw(); extern float __y1f(float) throw(); 
# 252
extern float ynf(int, float) throw(); extern float __ynf(int, float) throw(); 
# 259
extern float erff(float) throw(); extern float __erff(float) throw(); 
# 260
extern float erfcf(float) throw(); extern float __erfcf(float) throw(); 
# 261
extern float lgammaf(float) throw(); extern float __lgammaf(float) throw(); 
# 268
extern float tgammaf(float) throw(); extern float __tgammaf(float) throw(); 
# 274
extern float gammaf(float) throw(); extern float __gammaf(float) throw(); 
# 281
extern float lgammaf_r(float, int * __signgamp) throw(); extern float __lgammaf_r(float, int * __signgamp) throw(); 
# 289
extern float rintf(float __x) throw(); extern float __rintf(float __x) throw(); 
# 292
extern float nextafterf(float __x, float __y) throw() __attribute((const)); extern float __nextafterf(float __x, float __y) throw() __attribute((const)); 
# 294
extern float nexttowardf(float __x, long double __y) throw() __attribute((const)); extern float __nexttowardf(float __x, long double __y) throw() __attribute((const)); 
# 298
extern float remainderf(float __x, float __y) throw(); extern float __remainderf(float __x, float __y) throw(); 
# 302
extern float scalbnf(float __x, int __n) throw(); extern float __scalbnf(float __x, int __n) throw(); 
# 306
extern int ilogbf(float __x) throw(); extern int __ilogbf(float __x) throw(); 
# 311
extern float scalblnf(float __x, long __n) throw(); extern float __scalblnf(float __x, long __n) throw(); 
# 315
extern float nearbyintf(float __x) throw(); extern float __nearbyintf(float __x) throw(); 
# 319
extern float roundf(float __x) throw() __attribute((const)); extern float __roundf(float __x) throw() __attribute((const)); 
# 323
extern float truncf(float __x) throw() __attribute((const)); extern float __truncf(float __x) throw() __attribute((const)); 
# 328
extern float remquof(float __x, float __y, int * __quo) throw(); extern float __remquof(float __x, float __y, int * __quo) throw(); 
# 335
extern long lrintf(float __x) throw(); extern long __lrintf(float __x) throw(); 
# 337
__extension__ extern long long llrintf(float __x) throw(); extern long long __llrintf(float __x) throw(); 
# 341
extern long lroundf(float __x) throw(); extern long __lroundf(float __x) throw(); 
# 343
__extension__ extern long long llroundf(float __x) throw(); extern long long __llroundf(float __x) throw(); 
# 347
extern float fdimf(float __x, float __y) throw(); extern float __fdimf(float __x, float __y) throw(); 
# 350
extern float fmaxf(float __x, float __y) throw() __attribute((const)); extern float __fmaxf(float __x, float __y) throw() __attribute((const)); 
# 353
extern float fminf(float __x, float __y) throw() __attribute((const)); extern float __fminf(float __x, float __y) throw() __attribute((const)); 
# 357
extern int __fpclassifyf(float __value) throw()
# 358
 __attribute((const)); 
# 361
extern __attribute((gnu_inline)) inline int __signbitf(float __value) throw()
# 362
 __attribute((const)); 
# 366
extern float fmaf(float __x, float __y, float __z) throw(); extern float __fmaf(float __x, float __y, float __z) throw(); 
# 375
extern int __issignalingf(float __value) throw()
# 376
 __attribute((const)); 
# 383
extern float scalbf(float __x, float __n) throw(); extern float __scalbf(float __x, float __n) throw(); 
# 54 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) throw(); extern long double __acosl(long double __x) throw(); 
# 56
extern long double asinl(long double __x) throw(); extern long double __asinl(long double __x) throw(); 
# 58
extern long double atanl(long double __x) throw(); extern long double __atanl(long double __x) throw(); 
# 60
extern long double atan2l(long double __y, long double __x) throw(); extern long double __atan2l(long double __y, long double __x) throw(); 
# 63
extern long double cosl(long double __x) throw(); extern long double __cosl(long double __x) throw(); 
# 65
extern long double sinl(long double __x) throw(); extern long double __sinl(long double __x) throw(); 
# 67
extern long double tanl(long double __x) throw(); extern long double __tanl(long double __x) throw(); 
# 72
extern long double coshl(long double __x) throw(); extern long double __coshl(long double __x) throw(); 
# 74
extern long double sinhl(long double __x) throw(); extern long double __sinhl(long double __x) throw(); 
# 76
extern long double tanhl(long double __x) throw(); extern long double __tanhl(long double __x) throw(); 
# 81
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) throw(); 
# 88
extern long double acoshl(long double __x) throw(); extern long double __acoshl(long double __x) throw(); 
# 90
extern long double asinhl(long double __x) throw(); extern long double __asinhl(long double __x) throw(); 
# 92
extern long double atanhl(long double __x) throw(); extern long double __atanhl(long double __x) throw(); 
# 100
extern long double expl(long double __x) throw(); extern long double __expl(long double __x) throw(); 
# 103
extern long double frexpl(long double __x, int * __exponent) throw(); extern long double __frexpl(long double __x, int * __exponent) throw(); 
# 106
extern long double ldexpl(long double __x, int __exponent) throw(); extern long double __ldexpl(long double __x, int __exponent) throw(); 
# 109
extern long double logl(long double __x) throw(); extern long double __logl(long double __x) throw(); 
# 112
extern long double log10l(long double __x) throw(); extern long double __log10l(long double __x) throw(); 
# 115
extern long double modfl(long double __x, long double * __iptr) throw(); extern long double __modfl(long double __x, long double * __iptr) throw() __attribute((__nonnull__(2))); 
# 120
extern long double exp10l(long double __x) throw(); extern long double __exp10l(long double __x) throw(); 
# 122
extern long double pow10l(long double __x) throw(); extern long double __pow10l(long double __x) throw(); 
# 128
extern long double expm1l(long double __x) throw(); extern long double __expm1l(long double __x) throw(); 
# 131
extern long double log1pl(long double __x) throw(); extern long double __log1pl(long double __x) throw(); 
# 134
extern long double logbl(long double __x) throw(); extern long double __logbl(long double __x) throw(); 
# 141
extern long double exp2l(long double __x) throw(); extern long double __exp2l(long double __x) throw(); 
# 144
extern long double log2l(long double __x) throw(); extern long double __log2l(long double __x) throw(); 
# 153
extern long double powl(long double __x, long double __y) throw(); extern long double __powl(long double __x, long double __y) throw(); 
# 156
extern long double sqrtl(long double __x) throw(); extern long double __sqrtl(long double __x) throw(); 
# 162
extern long double hypotl(long double __x, long double __y) throw(); extern long double __hypotl(long double __x, long double __y) throw(); 
# 169
extern long double cbrtl(long double __x) throw(); extern long double __cbrtl(long double __x) throw(); 
# 178
extern long double ceill(long double __x) throw() __attribute((const)); extern long double __ceill(long double __x) throw() __attribute((const)); 
# 181
extern long double fabsl(long double __x) throw() __attribute((const)); extern long double __fabsl(long double __x) throw() __attribute((const)); 
# 184
extern long double floorl(long double __x) throw() __attribute((const)); extern long double __floorl(long double __x) throw() __attribute((const)); 
# 187
extern long double fmodl(long double __x, long double __y) throw(); extern long double __fmodl(long double __x, long double __y) throw(); 
# 192
extern int __isinfl(long double __value) throw() __attribute((const)); 
# 195
extern int __finitel(long double __value) throw() __attribute((const)); 
# 204
extern int isinfl(long double __value) throw() __attribute((const)); 
# 208
extern int finitel(long double __value) throw() __attribute((const)); 
# 211
extern long double dreml(long double __x, long double __y) throw(); extern long double __dreml(long double __x, long double __y) throw(); 
# 215
extern long double significandl(long double __x) throw(); extern long double __significandl(long double __x) throw(); 
# 221
extern long double copysignl(long double __x, long double __y) throw() __attribute((const)); extern long double __copysignl(long double __x, long double __y) throw() __attribute((const)); 
# 228
extern long double nanl(const char * __tagb) throw() __attribute((const)); extern long double __nanl(const char * __tagb) throw() __attribute((const)); 
# 234
extern int __isnanl(long double __value) throw() __attribute((const)); 
# 241
extern int isnanl(long double __value) throw() __attribute((const)); 
# 247
extern long double j0l(long double) throw(); extern long double __j0l(long double) throw(); 
# 248
extern long double j1l(long double) throw(); extern long double __j1l(long double) throw(); 
# 249
extern long double jnl(int, long double) throw(); extern long double __jnl(int, long double) throw(); 
# 250
extern long double y0l(long double) throw(); extern long double __y0l(long double) throw(); 
# 251
extern long double y1l(long double) throw(); extern long double __y1l(long double) throw(); 
# 252
extern long double ynl(int, long double) throw(); extern long double __ynl(int, long double) throw(); 
# 259
extern long double erfl(long double) throw(); extern long double __erfl(long double) throw(); 
# 260
extern long double erfcl(long double) throw(); extern long double __erfcl(long double) throw(); 
# 261
extern long double lgammal(long double) throw(); extern long double __lgammal(long double) throw(); 
# 268
extern long double tgammal(long double) throw(); extern long double __tgammal(long double) throw(); 
# 274
extern long double gammal(long double) throw(); extern long double __gammal(long double) throw(); 
# 281
extern long double lgammal_r(long double, int * __signgamp) throw(); extern long double __lgammal_r(long double, int * __signgamp) throw(); 
# 289
extern long double rintl(long double __x) throw(); extern long double __rintl(long double __x) throw(); 
# 292
extern long double nextafterl(long double __x, long double __y) throw() __attribute((const)); extern long double __nextafterl(long double __x, long double __y) throw() __attribute((const)); 
# 294
extern long double nexttowardl(long double __x, long double __y) throw() __attribute((const)); extern long double __nexttowardl(long double __x, long double __y) throw() __attribute((const)); 
# 298
extern long double remainderl(long double __x, long double __y) throw(); extern long double __remainderl(long double __x, long double __y) throw(); 
# 302
extern long double scalbnl(long double __x, int __n) throw(); extern long double __scalbnl(long double __x, int __n) throw(); 
# 306
extern int ilogbl(long double __x) throw(); extern int __ilogbl(long double __x) throw(); 
# 311
extern long double scalblnl(long double __x, long __n) throw(); extern long double __scalblnl(long double __x, long __n) throw(); 
# 315
extern long double nearbyintl(long double __x) throw(); extern long double __nearbyintl(long double __x) throw(); 
# 319
extern long double roundl(long double __x) throw() __attribute((const)); extern long double __roundl(long double __x) throw() __attribute((const)); 
# 323
extern long double truncl(long double __x) throw() __attribute((const)); extern long double __truncl(long double __x) throw() __attribute((const)); 
# 328
extern long double remquol(long double __x, long double __y, int * __quo) throw(); extern long double __remquol(long double __x, long double __y, int * __quo) throw(); 
# 335
extern long lrintl(long double __x) throw(); extern long __lrintl(long double __x) throw(); 
# 337
__extension__ extern long long llrintl(long double __x) throw(); extern long long __llrintl(long double __x) throw(); 
# 341
extern long lroundl(long double __x) throw(); extern long __lroundl(long double __x) throw(); 
# 343
__extension__ extern long long llroundl(long double __x) throw(); extern long long __llroundl(long double __x) throw(); 
# 347
extern long double fdiml(long double __x, long double __y) throw(); extern long double __fdiml(long double __x, long double __y) throw(); 
# 350
extern long double fmaxl(long double __x, long double __y) throw() __attribute((const)); extern long double __fmaxl(long double __x, long double __y) throw() __attribute((const)); 
# 353
extern long double fminl(long double __x, long double __y) throw() __attribute((const)); extern long double __fminl(long double __x, long double __y) throw() __attribute((const)); 
# 357
extern int __fpclassifyl(long double __value) throw()
# 358
 __attribute((const)); 
# 361
extern __attribute((gnu_inline)) inline int __signbitl(long double __value) throw()
# 362
 __attribute((const)); 
# 366
extern long double fmal(long double __x, long double __y, long double __z) throw(); extern long double __fmal(long double __x, long double __y, long double __z) throw(); 
# 375
extern int __issignalingl(long double __value) throw()
# 376
 __attribute((const)); 
# 383
extern long double scalbl(long double __x, long double __n) throw(); extern long double __scalbl(long double __x, long double __n) throw(); 
# 168 "/usr/include/math.h" 3
extern int signgam; 
# 210
enum { 
# 211
FP_NAN, 
# 214
FP_INFINITE, 
# 217
FP_ZERO, 
# 220
FP_SUBNORMAL, 
# 223
FP_NORMAL
# 226
}; 
# 354
typedef 
# 348
enum { 
# 349
_IEEE_ = (-1), 
# 350
_SVID_ = 0, 
# 351
_XOPEN_, 
# 352
_POSIX_, 
# 353
_ISOC_
# 354
} _LIB_VERSION_TYPE; 
# 359
extern _LIB_VERSION_TYPE _LIB_VERSION; 
# 370
struct __exception { 
# 375
int type; 
# 376
char *name; 
# 377
double arg1; 
# 378
double arg2; 
# 379
double retval; 
# 380
}; 
# 383
extern int matherr(__exception * __exc) throw(); 
# 126 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline int
# 127
 __attribute((__leaf__)) __signbitf(float __x) throw() 
# 128
{ 
# 130
int __m; 
# 131
__asm__("pmovmskb %1, %0" : "=r" (__m) : "x" (__x)); 
# 132
return (__m & 8) != 0; 
# 137
} 
# 138
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline int
# 139
 __attribute((__leaf__)) __signbit(double __x) throw() 
# 140
{ 
# 142
int __m; 
# 143
__asm__("pmovmskb %1, %0" : "=r" (__m) : "x" (__x)); 
# 144
return (__m & 128) != 0; 
# 149
} 
# 150
__attribute((__always_inline__)) __attribute((__gnu_inline__)) extern inline int
# 151
 __attribute((__leaf__)) __signbitl(long double __x) throw() 
# 152
{ 
# 153
__extension__ union { long double __l; int __i[3]; } __u = {__l: __x}; 
# 154
return (((__u.__i)[2]) & 32768) != 0; 
# 155
} 
# 534 "/usr/include/math.h" 3
}
# 34 "/usr/include/stdlib.h" 3
extern "C" {
# 55 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3
typedef 
# 51
enum { 
# 52
P_ALL, 
# 53
P_PID, 
# 54
P_PGID
# 55
} idtype_t; 
# 45 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline unsigned __bswap_32(unsigned __bsx) 
# 46
{ 
# 47
return __builtin_bswap32(__bsx); 
# 48
} 
# 109
static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 110
{ 
# 111
return __builtin_bswap64(__bsx); 
# 112
} 
# 66 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3
union wait { 
# 68
int w_status; 
# 70
struct { 
# 72
unsigned __w_termsig:7; 
# 73
unsigned __w_coredump:1; 
# 74
unsigned __w_retcode:8; 
# 75
unsigned:16; 
# 83
} __wait_terminated; 
# 85
struct { 
# 87
unsigned __w_stopval:8; 
# 88
unsigned __w_stopsig:8; 
# 89
unsigned:16; 
# 96
} __wait_stopped; 
# 97
}; 
# 101 "/usr/include/stdlib.h" 3
typedef 
# 98
struct { 
# 99
int quot; 
# 100
int rem; 
# 101
} div_t; 
# 109
typedef 
# 106
struct { 
# 107
long quot; 
# 108
long rem; 
# 109
} ldiv_t; 
# 121
__extension__ typedef 
# 118
struct { 
# 119
long long quot; 
# 120
long long rem; 
# 121
} lldiv_t; 
# 139
extern ::size_t __ctype_get_mb_cur_max() throw() __attribute((__warn_unused_result__)); 
# 144
extern __attribute((gnu_inline)) inline double atof(const char * __nptr) throw()
# 145
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 147
extern __attribute((gnu_inline)) inline int atoi(const char * __nptr) throw()
# 148
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 150
extern __attribute((gnu_inline)) inline long atol(const char * __nptr) throw()
# 151
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 157
__extension__ extern __attribute((gnu_inline)) inline long long atoll(const char * __nptr) throw()
# 158
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 164
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 166
 __attribute((__nonnull__(1))); 
# 172
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 173
 __attribute((__nonnull__(1))); 
# 175
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) throw()
# 177
 __attribute((__nonnull__(1))); 
# 183
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 185
 __attribute((__nonnull__(1))); 
# 187
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 189
 __attribute((__nonnull__(1))); 
# 195
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 197
 __attribute((__nonnull__(1))); 
# 200
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 202
 __attribute((__nonnull__(1))); 
# 209
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 211
 __attribute((__nonnull__(1))); 
# 214
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) throw()
# 216
 __attribute((__nonnull__(1))); 
# 239
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 241
 __attribute((__nonnull__(1, 4))); 
# 243
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 246
 __attribute((__nonnull__(1, 4))); 
# 249
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 252
 __attribute((__nonnull__(1, 4))); 
# 255
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, __locale_t __loc) throw()
# 258
 __attribute((__nonnull__(1, 4))); 
# 260
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 262
 __attribute((__nonnull__(1, 3))); 
# 264
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 266
 __attribute((__nonnull__(1, 3))); 
# 268
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, __locale_t __loc) throw()
# 271
 __attribute((__nonnull__(1, 3))); 
# 277
__attribute((__gnu_inline__)) extern inline int
# 278
 __attribute((__leaf__)) atoi(const char *__nptr) throw() 
# 279
{ 
# 280
return (int)strtol(__nptr, (char **)__null, 10); 
# 281
} 
# 282
__attribute((__gnu_inline__)) extern inline long
# 283
 __attribute((__leaf__)) atol(const char *__nptr) throw() 
# 284
{ 
# 285
return strtol(__nptr, (char **)__null, 10); 
# 286
} 
# 292
__extension__ 
# 291
__attribute((__gnu_inline__)) extern inline long long
# 292
 __attribute((__leaf__)) atoll(const char *__nptr) throw() 
# 293
{ 
# 294
return strtoll(__nptr, (char **)__null, 10); 
# 295
} 
# 305
extern char *l64a(long __n) throw() __attribute((__warn_unused_result__)); 
# 308
extern long a64l(const char * __s) throw()
# 309
 __attribute((__pure__)) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" {
# 33
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 44
typedef __loff_t loff_t; 
# 48
typedef __ino_t ino_t; 
# 55
typedef __ino64_t ino64_t; 
# 60
typedef __dev_t dev_t; 
# 65
typedef __gid_t gid_t; 
# 70
typedef __mode_t mode_t; 
# 75
typedef __nlink_t nlink_t; 
# 80
typedef __uid_t uid_t; 
# 86
typedef __off_t off_t; 
# 93
typedef __off64_t off64_t; 
# 104
typedef __id_t id_t; 
# 109
typedef __ssize_t ssize_t; 
# 115
typedef __daddr_t daddr_t; 
# 116
typedef __caddr_t caddr_t; 
# 122
typedef __key_t key_t; 
# 136
typedef __useconds_t useconds_t; 
# 140
typedef __suseconds_t suseconds_t; 
# 150
typedef unsigned long ulong; 
# 151
typedef unsigned short ushort; 
# 152
typedef unsigned uint; 
# 194
typedef signed char int8_t __attribute((__mode__(__QI__))); 
# 195
typedef short int16_t __attribute((__mode__(__HI__))); 
# 196
typedef int int32_t __attribute((__mode__(__SI__))); 
# 197
typedef long int64_t __attribute((__mode__(__DI__))); 
# 200
typedef unsigned char u_int8_t __attribute((__mode__(__QI__))); 
# 201
typedef unsigned short u_int16_t __attribute((__mode__(__HI__))); 
# 202
typedef unsigned u_int32_t __attribute((__mode__(__SI__))); 
# 203
typedef unsigned long u_int64_t __attribute((__mode__(__DI__))); 
# 205
typedef long register_t __attribute((__mode__(__word__))); 
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3
typedef int __sig_atomic_t; 
# 30
typedef 
# 28
struct { 
# 29
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 30
} __sigset_t; 
# 37 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef __sigset_t sigset_t; 
# 54
typedef long __fd_mask; 
# 75
typedef 
# 65
struct { 
# 69
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 75
} fd_set; 
# 82
typedef __fd_mask fd_mask; 
# 96
extern "C" {
# 106
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 118
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3
extern long __fdelt_chk(long __d); 
# 25
extern long __fdelt_warn(long __d)
# 26
 __attribute((__warning__("bit outside of fd_set selected"))); 
# 131 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
}
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3
extern "C" {
# 27
__extension__ extern __attribute((gnu_inline)) inline unsigned gnu_dev_major(unsigned long long __dev) throw()
# 28
 __attribute((const)); 
# 30
__extension__ extern __attribute((gnu_inline)) inline unsigned gnu_dev_minor(unsigned long long __dev) throw()
# 31
 __attribute((const)); 
# 33
__extension__ extern __attribute((gnu_inline)) inline unsigned long long gnu_dev_makedev(unsigned __major, unsigned __minor) throw()
# 35
 __attribute((const)); 
# 39
__extension__ 
# 38
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned
# 39
 __attribute((__leaf__)) gnu_dev_major(unsigned long long __dev) throw() 
# 40
{ 
# 41
return ((__dev >> 8) & (4095)) | (((unsigned)(__dev >> 32)) & (~4095)); 
# 42
} 
# 45
__extension__ 
# 44
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned
# 45
 __attribute((__leaf__)) gnu_dev_minor(unsigned long long __dev) throw() 
# 46
{ 
# 47
return (__dev & (255)) | (((unsigned)(__dev >> 12)) & (~255)); 
# 48
} 
# 51
__extension__ 
# 50
__attribute((__gnu_inline__)) __attribute((const)) extern inline unsigned long long
# 51
 __attribute((__leaf__)) gnu_dev_makedev(unsigned __major, unsigned __minor) throw() 
# 52
{ 
# 53
return (((__minor & (255)) | ((__major & (4095)) << 8)) | (((unsigned long long)(__minor & (~255))) << 12)) | (((unsigned long long)(__major & (~4095))) << 32); 
# 56
} 
# 58
}
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 235
typedef __blkcnt_t blkcnt_t; 
# 239
typedef __fsblkcnt_t fsblkcnt_t; 
# 243
typedef __fsfilcnt_t fsfilcnt_t; 
# 262
typedef __blkcnt64_t blkcnt64_t; 
# 263
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 264
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 63
union pthread_attr_t { 
# 65
char __size[56]; 
# 66
long __align; 
# 67
}; 
# 69
typedef pthread_attr_t pthread_attr_t; 
# 79
typedef 
# 75
struct __pthread_internal_list { 
# 77
__pthread_internal_list *__prev; 
# 78
__pthread_internal_list *__next; 
# 79
} __pthread_list_t; 
# 128
typedef 
# 91
union { 
# 92
struct __pthread_mutex_s { 
# 94
int __lock; 
# 95
unsigned __count; 
# 96
int __owner; 
# 98
unsigned __nusers; 
# 102
int __kind; 
# 104
short __spins; 
# 105
short __elision; 
# 106
__pthread_list_t __list; 
# 125
} __data; 
# 126
char __size[40]; 
# 127
long __align; 
# 128
} pthread_mutex_t; 
# 134
typedef 
# 131
union { 
# 132
char __size[4]; 
# 133
int __align; 
# 134
} pthread_mutexattr_t; 
# 154
typedef 
# 140
union { 
# 142
struct { 
# 143
int __lock; 
# 144
unsigned __futex; 
# 145
__extension__ unsigned long long __total_seq; 
# 146
__extension__ unsigned long long __wakeup_seq; 
# 147
__extension__ unsigned long long __woken_seq; 
# 148
void *__mutex; 
# 149
unsigned __nwaiters; 
# 150
unsigned __broadcast_seq; 
# 151
} __data; 
# 152
char __size[48]; 
# 153
__extension__ long long __align; 
# 154
} pthread_cond_t; 
# 160
typedef 
# 157
union { 
# 158
char __size[4]; 
# 159
int __align; 
# 160
} pthread_condattr_t; 
# 164
typedef unsigned pthread_key_t; 
# 168
typedef int pthread_once_t; 
# 222
typedef 
# 175
union { 
# 178
struct { 
# 179
int __lock; 
# 180
unsigned __nr_readers; 
# 181
unsigned __readers_wakeup; 
# 182
unsigned __writer_wakeup; 
# 183
unsigned __nr_readers_queued; 
# 184
unsigned __nr_writers_queued; 
# 185
int __writer; 
# 186
int __shared; 
# 187
signed char __rwelision; 
# 192
unsigned char __pad1[7]; 
# 195
unsigned long __pad2; 
# 198
unsigned __flags; 
# 200
} __data; 
# 220
char __size[56]; 
# 221
long __align; 
# 222
} pthread_rwlock_t; 
# 228
typedef 
# 225
union { 
# 226
char __size[8]; 
# 227
long __align; 
# 228
} pthread_rwlockattr_t; 
# 234
typedef volatile int pthread_spinlock_t; 
# 243
typedef 
# 240
union { 
# 241
char __size[32]; 
# 242
long __align; 
# 243
} pthread_barrier_t; 
# 249
typedef 
# 246
union { 
# 247
char __size[4]; 
# 248
int __align; 
# 249
} pthread_barrierattr_t; 
# 273 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
}
# 321 "/usr/include/stdlib.h" 3
extern long random() throw(); 
# 324
extern void srandom(unsigned __seed) throw(); 
# 330
extern char *initstate(unsigned __seed, char * __statebuf, ::size_t __statelen) throw()
# 331
 __attribute((__nonnull__(2))); 
# 335
extern char *setstate(char * __statebuf) throw() __attribute((__nonnull__(1))); 
# 343
struct random_data { 
# 345
int32_t *fptr; 
# 346
int32_t *rptr; 
# 347
int32_t *state; 
# 348
int rand_type; 
# 349
int rand_deg; 
# 350
int rand_sep; 
# 351
int32_t *end_ptr; 
# 352
}; 
# 354
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) throw()
# 355
 __attribute((__nonnull__(1, 2))); 
# 357
extern int srandom_r(unsigned __seed, random_data * __buf) throw()
# 358
 __attribute((__nonnull__(2))); 
# 360
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, ::size_t __statelen, random_data *__restrict__ __buf) throw()
# 363
 __attribute((__nonnull__(2, 4))); 
# 365
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) throw()
# 367
 __attribute((__nonnull__(1, 2))); 
# 374
extern int rand() throw(); 
# 376
extern void srand(unsigned __seed) throw(); 
# 381
extern int rand_r(unsigned * __seed) throw(); 
# 389
extern double drand48() throw(); 
# 390
extern double erand48(unsigned short  __xsubi[3]) throw() __attribute((__nonnull__(1))); 
# 393
extern long lrand48() throw(); 
# 394
extern long nrand48(unsigned short  __xsubi[3]) throw()
# 395
 __attribute((__nonnull__(1))); 
# 398
extern long mrand48() throw(); 
# 399
extern long jrand48(unsigned short  __xsubi[3]) throw()
# 400
 __attribute((__nonnull__(1))); 
# 403
extern void srand48(long __seedval) throw(); 
# 404
extern unsigned short *seed48(unsigned short  __seed16v[3]) throw()
# 405
 __attribute((__nonnull__(1))); 
# 406
extern void lcong48(unsigned short  __param[7]) throw() __attribute((__nonnull__(1))); 
# 412
struct drand48_data { 
# 414
unsigned short __x[3]; 
# 415
unsigned short __old_x[3]; 
# 416
unsigned short __c; 
# 417
unsigned short __init; 
# 418
__extension__ unsigned long long __a; 
# 420
}; 
# 423
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 424
 __attribute((__nonnull__(1, 2))); 
# 425
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) throw()
# 427
 __attribute((__nonnull__(1, 2))); 
# 430
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 432
 __attribute((__nonnull__(1, 2))); 
# 433
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 436
 __attribute((__nonnull__(1, 2))); 
# 439
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 441
 __attribute((__nonnull__(1, 2))); 
# 442
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) throw()
# 445
 __attribute((__nonnull__(1, 2))); 
# 448
extern int srand48_r(long __seedval, drand48_data * __buffer) throw()
# 449
 __attribute((__nonnull__(2))); 
# 451
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) throw()
# 452
 __attribute((__nonnull__(1, 2))); 
# 454
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) throw()
# 456
 __attribute((__nonnull__(1, 2))); 
# 466
extern void *malloc(::size_t __size) throw() __attribute((__malloc__)) __attribute((__warn_unused_result__)); 
# 468
extern void *calloc(::size_t __nmemb, ::size_t __size) throw()
# 469
 __attribute((__malloc__)) __attribute((__warn_unused_result__)); 
# 480
extern void *realloc(void * __ptr, ::size_t __size) throw()
# 481
 __attribute((__warn_unused_result__)); 
# 483
extern void free(void * __ptr) throw(); 
# 488
extern void cfree(void * __ptr) throw(); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(::size_t __size) throw(); 
# 38
}
# 498 "/usr/include/stdlib.h" 3
extern void *valloc(::size_t __size) throw() __attribute((__malloc__)) __attribute((__warn_unused_result__)); 
# 503
extern int posix_memalign(void ** __memptr, ::size_t __alignment, ::size_t __size) throw()
# 504
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 509
extern void *aligned_alloc(::size_t __alignment, ::size_t __size) throw()
# 510
 __attribute((__malloc__)) __attribute((__alloc_size__(2))) __attribute((__warn_unused_result__)); 
# 515
extern void abort() throw() __attribute((__noreturn__)); 
# 519
extern int atexit(void (* __func)(void)) throw() __attribute((__nonnull__(1))); 
# 524
extern "C++" int at_quick_exit(void (* __func)(void)) throw() __asm__("at_quick_exit")
# 525
 __attribute((__nonnull__(1))); 
# 535
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) throw()
# 536
 __attribute((__nonnull__(1))); 
# 543
extern void exit(int __status) throw() __attribute((__noreturn__)); 
# 549
extern void quick_exit(int __status) throw() __attribute((__noreturn__)); 
# 557
extern void _Exit(int __status) throw() __attribute((__noreturn__)); 
# 564
extern char *getenv(const char * __name) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 570
extern char *secure_getenv(const char * __name) throw()
# 571
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 578
extern int putenv(char * __string) throw() __attribute((__nonnull__(1))); 
# 584
extern int setenv(const char * __name, const char * __value, int __replace) throw()
# 585
 __attribute((__nonnull__(2))); 
# 588
extern int unsetenv(const char * __name) throw() __attribute((__nonnull__(1))); 
# 595
extern int clearenv() throw(); 
# 606
extern char *mktemp(char * __template) throw() __attribute((__nonnull__(1))); 
# 619
extern int mkstemp(char * __template) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 629
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 641
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 651
extern int mkstemps64(char * __template, int __suffixlen)
# 652
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 662
extern char *mkdtemp(char * __template) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 673
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 683
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 693
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 694
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 705
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 706
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 716
extern int system(const char * __command) __attribute((__warn_unused_result__)); 
# 723
extern char *canonicalize_file_name(const char * __name) throw()
# 724
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 733
extern __attribute((gnu_inline)) inline char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw()
# 734
 __attribute((__warn_unused_result__)); 
# 741
typedef int (*__compar_fn_t)(const void *, const void *); 
# 744
typedef __compar_fn_t comparison_fn_t; 
# 748
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 754
extern __attribute((gnu_inline)) inline void *bsearch(const void * __key, const void * __base, ::size_t __nmemb, ::size_t __size, __compar_fn_t __compar)
# 756
 __attribute((__nonnull__(1, 2, 5))) __attribute((__warn_unused_result__)); 
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3
__attribute((__gnu_inline__)) extern inline void *
# 20
bsearch(const void *__key, const void *__base, ::size_t __nmemb, ::size_t __size, __compar_fn_t 
# 21
__compar) 
# 22
{ 
# 23
::size_t __l, __u, __idx; 
# 24
const void *__p; 
# 25
int __comparison; 
# 27
__l = (0); 
# 28
__u = __nmemb; 
# 29
while (__l < __u) 
# 30
{ 
# 31
__idx = ((__l + __u) / (2)); 
# 32
__p = ((void *)(((const char *)__base) + (__idx * __size))); 
# 33
__comparison = (*__compar)(__key, __p); 
# 34
if (__comparison < 0) { 
# 35
__u = __idx; } else { 
# 36
if (__comparison > 0) { 
# 37
__l = (__idx + (1)); } else { 
# 39
return (void *)__p; }  }  
# 40
}  
# 42
return __null; 
# 43
} 
# 764 "/usr/include/stdlib.h" 3
extern void qsort(void * __base, ::size_t __nmemb, ::size_t __size, __compar_fn_t __compar)
# 765
 __attribute((__nonnull__(1, 4))); 
# 767
extern void qsort_r(void * __base, ::size_t __nmemb, ::size_t __size, __compar_d_fn_t __compar, void * __arg)
# 769
 __attribute((__nonnull__(1, 4))); 
# 774
extern int abs(int __x) throw() __attribute((const)) __attribute((__warn_unused_result__)); 
# 775
extern long labs(long __x) throw() __attribute((const)) __attribute((__warn_unused_result__)); 
# 779
__extension__ extern long long llabs(long long __x) throw()
# 780
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 788
extern div_t div(int __numer, int __denom) throw()
# 789
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 790
extern ldiv_t ldiv(long __numer, long __denom) throw()
# 791
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 796
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) throw()
# 798
 __attribute((const)) __attribute((__warn_unused_result__)); 
# 811
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 812
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 817
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 818
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 823
extern char *gcvt(double __value, int __ndigit, char * __buf) throw()
# 824
 __attribute((__nonnull__(3))) __attribute((__warn_unused_result__)); 
# 829
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 831
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 832
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) throw()
# 834
 __attribute((__nonnull__(3, 4))) __attribute((__warn_unused_result__)); 
# 835
extern char *qgcvt(long double __value, int __ndigit, char * __buf) throw()
# 836
 __attribute((__nonnull__(3))) __attribute((__warn_unused_result__)); 
# 841
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) throw()
# 843
 __attribute((__nonnull__(3, 4, 5))); 
# 844
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) throw()
# 846
 __attribute((__nonnull__(3, 4, 5))); 
# 848
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) throw()
# 851
 __attribute((__nonnull__(3, 4, 5))); 
# 852
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, ::size_t __len) throw()
# 855
 __attribute((__nonnull__(3, 4, 5))); 
# 862
extern int mblen(const char * __s, ::size_t __n) throw(); 
# 865
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, ::size_t __n) throw(); 
# 869
extern __attribute((gnu_inline)) inline int wctomb(char * __s, wchar_t __wchar) throw(); 
# 873
extern __attribute((gnu_inline)) inline ::size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, ::size_t __n) throw(); 
# 876
extern __attribute((gnu_inline)) inline ::size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, ::size_t __n) throw(); 
# 887
extern int rpmatch(const char * __response) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 898
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) throw()
# 901
 __attribute((__nonnull__(1, 2, 3))) __attribute((__warn_unused_result__)); 
# 907
extern void setkey(const char * __key) throw() __attribute((__nonnull__(1))); 
# 915
extern int posix_openpt(int __oflag) __attribute((__warn_unused_result__)); 
# 923
extern int grantpt(int __fd) throw(); 
# 927
extern int unlockpt(int __fd) throw(); 
# 932
extern char *ptsname(int __fd) throw() __attribute((__warn_unused_result__)); 
# 939
extern __attribute((gnu_inline)) inline int ptsname_r(int __fd, char * __buf, ::size_t __buflen) throw()
# 940
 __attribute((__nonnull__(2))); 
# 943
extern int getpt(); 
# 950
extern int getloadavg(double  __loadavg[], int __nelem) throw()
# 951
 __attribute((__nonnull__(1))); 
# 25 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3
__attribute((__gnu_inline__)) extern inline double
# 26
 __attribute((__leaf__)) atof(const char *__nptr) throw() 
# 27
{ 
# 28
return strtod(__nptr, (char **)__null); 
# 29
} 
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3
extern char *__realpath_chk(const char *__restrict__ __name, char *__restrict__ __resolved, ::size_t __resolvedlen) throw()
# 25
 __attribute((__warn_unused_result__)); 
# 26
extern char *__realpath_alias(const char *__restrict__ __name, char *__restrict__ __resolved) throw() __asm__("realpath")
# 28
 __attribute((__warn_unused_result__)); 
# 29
extern char *__realpath_chk_warn(const char *__restrict__ __name, char *__restrict__ __resolved, ::size_t __resolvedlen) throw() __asm__("__realpath_chk")
# 32
 __attribute((__warn_unused_result__))
# 33
 __attribute((__warning__("second argument of realpath must be either NULL or at least PATH_MAX bytes long buffer"))); 
# 36
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) 
# 37
__attribute((__leaf__)) extern inline char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) throw() 
# 38
{ 
# 39
if (__builtin_object_size(__resolved, 2 > 1) != ((::size_t)(-1))) 
# 40
{ 
# 42
if (__builtin_object_size(__resolved, 2 > 1) < (4096)) { 
# 43
return __realpath_chk_warn(__name, __resolved, __builtin_object_size(__resolved, 2 > 1)); }  
# 45
return __realpath_chk(__name, __resolved, __builtin_object_size(__resolved, 2 > 1)); 
# 46
}  
# 48
return __realpath_alias(__name, __resolved); 
# 49
} 
# 52
extern int __ptsname_r_chk(int __fd, char * __buf, ::size_t __buflen, ::size_t __nreal) throw()
# 53
 __attribute((__nonnull__(2))); 
# 54
extern int __ptsname_r_alias(int __fd, char * __buf, ::size_t __buflen) throw() __asm__("ptsname_r")
# 56
 __attribute((__nonnull__(2))); 
# 57
extern int __ptsname_r_chk_warn(int __fd, char * __buf, ::size_t __buflen, ::size_t __nreal) throw() __asm__("__ptsname_r_chk")
# 60
 __attribute((__nonnull__(2))) __attribute((__warning__("ptsname_r called with buflen bigger than size of buf"))); 
# 63
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 64
 __attribute((__leaf__)) ptsname_r(int __fd, char *__buf, ::size_t __buflen) throw() 
# 65
{ 
# 66
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 67
{ 
# 68
if (!(0)) { 
# 69
return __ptsname_r_chk(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 70
if (__buflen > __builtin_object_size(__buf, 2 > 1)) { 
# 71
return __ptsname_r_chk_warn(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 72
}  
# 73
return __ptsname_r_alias(__fd, __buf, __buflen); 
# 74
} 
# 77
extern int __wctomb_chk(char * __s, wchar_t __wchar, ::size_t __buflen) throw()
# 78
 __attribute((__warn_unused_result__)); 
# 79
extern int __wctomb_alias(char * __s, wchar_t __wchar) throw() __asm__("wctomb")
# 80
 __attribute((__warn_unused_result__)); 
# 82
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline int
# 83
 __attribute((__leaf__)) wctomb(char *__s, wchar_t __wchar) throw() 
# 84
{ 
# 92
if ((__builtin_object_size(__s, 2 > 1) != ((::size_t)(-1))) && ((16) > __builtin_object_size(__s, 2 > 1))) { 
# 93
return __wctomb_chk(__s, __wchar, __builtin_object_size(__s, 2 > 1)); }  
# 94
return __wctomb_alias(__s, __wchar); 
# 95
} 
# 98
extern ::size_t __mbstowcs_chk(wchar_t *__restrict__ __dst, const char *__restrict__ __src, ::size_t __len, ::size_t __dstlen) throw(); 
# 101
extern ::size_t __mbstowcs_alias(wchar_t *__restrict__ __dst, const char *__restrict__ __src, ::size_t __len) throw() __asm__("mbstowcs"); 
# 105
extern ::size_t __mbstowcs_chk_warn(wchar_t *__restrict__ __dst, const char *__restrict__ __src, ::size_t __len, ::size_t __dstlen) throw() __asm__("__mbstowcs_chk")
# 109
 __attribute((__warning__("mbstowcs called with dst buffer smaller than len * sizeof (wchar_t)"))); 
# 112
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline ::size_t
# 113
 __attribute((__leaf__)) mbstowcs(wchar_t *__restrict__ __dst, const char *__restrict__ __src, ::size_t __len) throw() 
# 115
{ 
# 116
if (__builtin_object_size(__dst, 2 > 1) != ((::size_t)(-1))) 
# 117
{ 
# 118
if (!(0)) { 
# 119
return __mbstowcs_chk(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 122
if (__len > (__builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))) { 
# 123
return __mbstowcs_chk_warn(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 125
}  
# 126
return __mbstowcs_alias(__dst, __src, __len); 
# 127
} 
# 130
extern ::size_t __wcstombs_chk(char *__restrict__ __dst, const wchar_t *__restrict__ __src, ::size_t __len, ::size_t __dstlen) throw(); 
# 133
extern ::size_t __wcstombs_alias(char *__restrict__ __dst, const wchar_t *__restrict__ __src, ::size_t __len) throw() __asm__("wcstombs"); 
# 137
extern ::size_t __wcstombs_chk_warn(char *__restrict__ __dst, const wchar_t *__restrict__ __src, ::size_t __len, ::size_t __dstlen) throw() __asm__("__wcstombs_chk")
# 141
 __attribute((__warning__("wcstombs called with dst buffer smaller than len"))); 
# 143
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline ::size_t
# 144
 __attribute((__leaf__)) wcstombs(char *__restrict__ __dst, const wchar_t *__restrict__ __src, ::size_t __len) throw() 
# 146
{ 
# 147
if (__builtin_object_size(__dst, 2 > 1) != ((::size_t)(-1))) 
# 148
{ 
# 149
if (!(0)) { 
# 150
return __wcstombs_chk(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1)); }  
# 151
if (__len > __builtin_object_size(__dst, 2 > 1)) { 
# 152
return __wcstombs_chk_warn(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1)); }  
# 153
}  
# 154
return __wcstombs_alias(__dst, __src, __len); 
# 155
} 
# 967 "/usr/include/stdlib.h" 3
}
# 194 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++config.h" 3
namespace std { 
# 196
typedef unsigned long size_t; 
# 197
typedef long ptrdiff_t; 
# 200
typedef __decltype((nullptr)) nullptr_t; 
# 202
}
# 216
namespace std { 
# 218
inline namespace __cxx11 __attribute((__abi_tag__("cxx11" ))) { }
# 219
}
# 220
namespace __gnu_cxx { 
# 222
inline namespace __cxx11 __attribute((__abi_tag__("cxx11" ))) { }
# 223
}
# 68 "/usr/include/c++/5/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 72
template< class _Iterator, class _Container> class __normal_iterator; 
# 76
}
# 78
namespace std __attribute((__visibility__("default"))) { 
# 82
struct __true_type { }; 
# 83
struct __false_type { }; 
# 85
template< bool > 
# 86
struct __truth_type { 
# 87
typedef __false_type __type; }; 
# 90
template<> struct __truth_type< true>  { 
# 91
typedef __true_type __type; }; 
# 95
template< class _Sp, class _Tp> 
# 96
struct __traitor { 
# 98
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 99
typedef typename __truth_type< __value> ::__type __type; 
# 100
}; 
# 103
template< class , class > 
# 104
struct __are_same { 
# 106
enum { __value}; 
# 107
typedef __false_type __type; 
# 108
}; 
# 110
template< class _Tp> 
# 111
struct __are_same< _Tp, _Tp>  { 
# 113
enum { __value = 1}; 
# 114
typedef __true_type __type; 
# 115
}; 
# 118
template< class _Tp> 
# 119
struct __is_void { 
# 121
enum { __value}; 
# 122
typedef __false_type __type; 
# 123
}; 
# 126
template<> struct __is_void< void>  { 
# 128
enum { __value = 1}; 
# 129
typedef __true_type __type; 
# 130
}; 
# 135
template< class _Tp> 
# 136
struct __is_integer { 
# 138
enum { __value}; 
# 139
typedef __false_type __type; 
# 140
}; 
# 147
template<> struct __is_integer< bool>  { 
# 149
enum { __value = 1}; 
# 150
typedef __true_type __type; 
# 151
}; 
# 154
template<> struct __is_integer< char>  { 
# 156
enum { __value = 1}; 
# 157
typedef __true_type __type; 
# 158
}; 
# 161
template<> struct __is_integer< signed char>  { 
# 163
enum { __value = 1}; 
# 164
typedef __true_type __type; 
# 165
}; 
# 168
template<> struct __is_integer< unsigned char>  { 
# 170
enum { __value = 1}; 
# 171
typedef __true_type __type; 
# 172
}; 
# 176
template<> struct __is_integer< wchar_t>  { 
# 178
enum { __value = 1}; 
# 179
typedef __true_type __type; 
# 180
}; 
# 185
template<> struct __is_integer< char16_t>  { 
# 187
enum { __value = 1}; 
# 188
typedef __true_type __type; 
# 189
}; 
# 192
template<> struct __is_integer< char32_t>  { 
# 194
enum { __value = 1}; 
# 195
typedef __true_type __type; 
# 196
}; 
# 200
template<> struct __is_integer< short>  { 
# 202
enum { __value = 1}; 
# 203
typedef __true_type __type; 
# 204
}; 
# 207
template<> struct __is_integer< unsigned short>  { 
# 209
enum { __value = 1}; 
# 210
typedef __true_type __type; 
# 211
}; 
# 214
template<> struct __is_integer< int>  { 
# 216
enum { __value = 1}; 
# 217
typedef __true_type __type; 
# 218
}; 
# 221
template<> struct __is_integer< unsigned>  { 
# 223
enum { __value = 1}; 
# 224
typedef __true_type __type; 
# 225
}; 
# 228
template<> struct __is_integer< long>  { 
# 230
enum { __value = 1}; 
# 231
typedef __true_type __type; 
# 232
}; 
# 235
template<> struct __is_integer< unsigned long>  { 
# 237
enum { __value = 1}; 
# 238
typedef __true_type __type; 
# 239
}; 
# 242
template<> struct __is_integer< long long>  { 
# 244
enum { __value = 1}; 
# 245
typedef __true_type __type; 
# 246
}; 
# 249
template<> struct __is_integer< unsigned long long>  { 
# 251
enum { __value = 1}; 
# 252
typedef __true_type __type; 
# 253
}; 
# 287
template< class _Tp> 
# 288
struct __is_floating { 
# 290
enum { __value}; 
# 291
typedef __false_type __type; 
# 292
}; 
# 296
template<> struct __is_floating< float>  { 
# 298
enum { __value = 1}; 
# 299
typedef __true_type __type; 
# 300
}; 
# 303
template<> struct __is_floating< double>  { 
# 305
enum { __value = 1}; 
# 306
typedef __true_type __type; 
# 307
}; 
# 310
template<> struct __is_floating< long double>  { 
# 312
enum { __value = 1}; 
# 313
typedef __true_type __type; 
# 314
}; 
# 319
template< class _Tp> 
# 320
struct __is_pointer { 
# 322
enum { __value}; 
# 323
typedef __false_type __type; 
# 324
}; 
# 326
template< class _Tp> 
# 327
struct __is_pointer< _Tp *>  { 
# 329
enum { __value = 1}; 
# 330
typedef __true_type __type; 
# 331
}; 
# 336
template< class _Tp> 
# 337
struct __is_normal_iterator { 
# 339
enum { __value}; 
# 340
typedef __false_type __type; 
# 341
}; 
# 343
template< class _Iterator, class _Container> 
# 344
struct __is_normal_iterator< __gnu_cxx::__normal_iterator< _Iterator, _Container> >  { 
# 347
enum { __value = 1}; 
# 348
typedef __true_type __type; 
# 349
}; 
# 354
template< class _Tp> 
# 355
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 357
}; 
# 362
template< class _Tp> 
# 363
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 365
}; 
# 370
template< class _Tp> 
# 371
struct __is_char { 
# 373
enum { __value}; 
# 374
typedef __false_type __type; 
# 375
}; 
# 378
template<> struct __is_char< char>  { 
# 380
enum { __value = 1}; 
# 381
typedef __true_type __type; 
# 382
}; 
# 386
template<> struct __is_char< wchar_t>  { 
# 388
enum { __value = 1}; 
# 389
typedef __true_type __type; 
# 390
}; 
# 393
template< class _Tp> 
# 394
struct __is_byte { 
# 396
enum { __value}; 
# 397
typedef __false_type __type; 
# 398
}; 
# 401
template<> struct __is_byte< char>  { 
# 403
enum { __value = 1}; 
# 404
typedef __true_type __type; 
# 405
}; 
# 408
template<> struct __is_byte< signed char>  { 
# 410
enum { __value = 1}; 
# 411
typedef __true_type __type; 
# 412
}; 
# 415
template<> struct __is_byte< unsigned char>  { 
# 417
enum { __value = 1}; 
# 418
typedef __true_type __type; 
# 419
}; 
# 424
template< class _Tp> 
# 425
struct __is_move_iterator { 
# 427
enum { __value}; 
# 428
typedef __false_type __type; 
# 429
}; 
# 432
template< class _Iterator> class move_iterator; 
# 435
template< class _Iterator> 
# 436
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 438
enum { __value = 1}; 
# 439
typedef __true_type __type; 
# 440
}; 
# 444
}
# 37 "/usr/include/c++/5/ext/type_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 42
template< bool , class > 
# 43
struct __enable_if { 
# 44
}; 
# 46
template< class _Tp> 
# 47
struct __enable_if< true, _Tp>  { 
# 48
typedef _Tp __type; }; 
# 52
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 53
struct __conditional_type { 
# 54
typedef _Iftrue __type; }; 
# 56
template< class _Iftrue, class _Iffalse> 
# 57
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 58
typedef _Iffalse __type; }; 
# 62
template< class _Tp> 
# 63
struct __add_unsigned { 
# 66
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 69
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 70
}; 
# 73
template<> struct __add_unsigned< char>  { 
# 74
typedef unsigned char __type; }; 
# 77
template<> struct __add_unsigned< signed char>  { 
# 78
typedef unsigned char __type; }; 
# 81
template<> struct __add_unsigned< short>  { 
# 82
typedef unsigned short __type; }; 
# 85
template<> struct __add_unsigned< int>  { 
# 86
typedef unsigned __type; }; 
# 89
template<> struct __add_unsigned< long>  { 
# 90
typedef unsigned long __type; }; 
# 93
template<> struct __add_unsigned< long long>  { 
# 94
typedef unsigned long long __type; }; 
# 98
template<> struct __add_unsigned< bool> ; 
# 101
template<> struct __add_unsigned< wchar_t> ; 
# 105
template< class _Tp> 
# 106
struct __remove_unsigned { 
# 109
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 112
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 113
}; 
# 116
template<> struct __remove_unsigned< char>  { 
# 117
typedef signed char __type; }; 
# 120
template<> struct __remove_unsigned< unsigned char>  { 
# 121
typedef signed char __type; }; 
# 124
template<> struct __remove_unsigned< unsigned short>  { 
# 125
typedef short __type; }; 
# 128
template<> struct __remove_unsigned< unsigned>  { 
# 129
typedef int __type; }; 
# 132
template<> struct __remove_unsigned< unsigned long>  { 
# 133
typedef long __type; }; 
# 136
template<> struct __remove_unsigned< unsigned long long>  { 
# 137
typedef long long __type; }; 
# 141
template<> struct __remove_unsigned< bool> ; 
# 144
template<> struct __remove_unsigned< wchar_t> ; 
# 148
template< class _Type> inline bool 
# 150
__is_null_pointer(_Type *__ptr) 
# 151
{ return __ptr == 0; } 
# 153
template< class _Type> inline bool 
# 155
__is_null_pointer(_Type) 
# 156
{ return false; } 
# 160
inline bool __is_null_pointer(std::nullptr_t) 
# 161
{ return true; } 
# 165
template< class _Tp, bool  = std::__is_integer< _Tp> ::__value> 
# 166
struct __promote { 
# 167
typedef double __type; }; 
# 172
template< class _Tp> 
# 173
struct __promote< _Tp, false>  { 
# 174
}; 
# 177
template<> struct __promote< long double>  { 
# 178
typedef long double __type; }; 
# 181
template<> struct __promote< double>  { 
# 182
typedef double __type; }; 
# 185
template<> struct __promote< float>  { 
# 186
typedef float __type; }; 
# 188
template< class _Tp, class _Up, class 
# 189
_Tp2 = typename __promote< _Tp> ::__type, class 
# 190
_Up2 = typename __promote< _Up> ::__type> 
# 191
struct __promote_2 { 
# 193
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 194
}; 
# 196
template< class _Tp, class _Up, class _Vp, class 
# 197
_Tp2 = typename __promote< _Tp> ::__type, class 
# 198
_Up2 = typename __promote< _Up> ::__type, class 
# 199
_Vp2 = typename __promote< _Vp> ::__type> 
# 200
struct __promote_3 { 
# 202
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 203
}; 
# 205
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 206
_Tp2 = typename __promote< _Tp> ::__type, class 
# 207
_Up2 = typename __promote< _Up> ::__type, class 
# 208
_Vp2 = typename __promote< _Vp> ::__type, class 
# 209
_Wp2 = typename __promote< _Wp> ::__type> 
# 210
struct __promote_4 { 
# 212
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 213
}; 
# 216
}
# 75 "/usr/include/c++/5/cmath" 3
namespace std __attribute((__visibility__("default"))) { 
# 81
constexpr double abs(double __x) 
# 82
{ return __builtin_fabs(__x); } 
# 87
constexpr float abs(float __x) 
# 88
{ return __builtin_fabsf(__x); } 
# 91
constexpr long double abs(long double __x) 
# 92
{ return __builtin_fabsl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
abs(_Tp __x) 
# 100
{ return __builtin_fabs(__x); } 
# 102
using ::acos;
# 106
constexpr float acos(float __x) 
# 107
{ return __builtin_acosf(__x); } 
# 110
constexpr long double acos(long double __x) 
# 111
{ return __builtin_acosl(__x); } 
# 114
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
acos(_Tp __x) 
# 119
{ return __builtin_acos(__x); } 
# 121
using ::asin;
# 125
constexpr float asin(float __x) 
# 126
{ return __builtin_asinf(__x); } 
# 129
constexpr long double asin(long double __x) 
# 130
{ return __builtin_asinl(__x); } 
# 133
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
asin(_Tp __x) 
# 138
{ return __builtin_asin(__x); } 
# 140
using ::atan;
# 144
constexpr float atan(float __x) 
# 145
{ return __builtin_atanf(__x); } 
# 148
constexpr long double atan(long double __x) 
# 149
{ return __builtin_atanl(__x); } 
# 152
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 156
atan(_Tp __x) 
# 157
{ return __builtin_atan(__x); } 
# 159
using ::atan2;
# 163
constexpr float atan2(float __y, float __x) 
# 164
{ return __builtin_atan2f(__y, __x); } 
# 167
constexpr long double atan2(long double __y, long double __x) 
# 168
{ return __builtin_atan2l(__y, __x); } 
# 171
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 174
atan2(_Tp __y, _Up __x) 
# 175
{ 
# 176
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 177
return atan2((__type)__y, (__type)__x); 
# 178
} 
# 180
using ::ceil;
# 184
constexpr float ceil(float __x) 
# 185
{ return __builtin_ceilf(__x); } 
# 188
constexpr long double ceil(long double __x) 
# 189
{ return __builtin_ceill(__x); } 
# 192
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
ceil(_Tp __x) 
# 197
{ return __builtin_ceil(__x); } 
# 199
using ::cos;
# 203
constexpr float cos(float __x) 
# 204
{ return __builtin_cosf(__x); } 
# 207
constexpr long double cos(long double __x) 
# 208
{ return __builtin_cosl(__x); } 
# 211
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cos(_Tp __x) 
# 216
{ return __builtin_cos(__x); } 
# 218
using ::cosh;
# 222
constexpr float cosh(float __x) 
# 223
{ return __builtin_coshf(__x); } 
# 226
constexpr long double cosh(long double __x) 
# 227
{ return __builtin_coshl(__x); } 
# 230
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
cosh(_Tp __x) 
# 235
{ return __builtin_cosh(__x); } 
# 237
using ::exp;
# 241
constexpr float exp(float __x) 
# 242
{ return __builtin_expf(__x); } 
# 245
constexpr long double exp(long double __x) 
# 246
{ return __builtin_expl(__x); } 
# 249
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
exp(_Tp __x) 
# 254
{ return __builtin_exp(__x); } 
# 256
using ::fabs;
# 260
constexpr float fabs(float __x) 
# 261
{ return __builtin_fabsf(__x); } 
# 264
constexpr long double fabs(long double __x) 
# 265
{ return __builtin_fabsl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
fabs(_Tp __x) 
# 273
{ return __builtin_fabs(__x); } 
# 275
using ::floor;
# 279
constexpr float floor(float __x) 
# 280
{ return __builtin_floorf(__x); } 
# 283
constexpr long double floor(long double __x) 
# 284
{ return __builtin_floorl(__x); } 
# 287
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 291
floor(_Tp __x) 
# 292
{ return __builtin_floor(__x); } 
# 294
using ::fmod;
# 298
constexpr float fmod(float __x, float __y) 
# 299
{ return __builtin_fmodf(__x, __y); } 
# 302
constexpr long double fmod(long double __x, long double __y) 
# 303
{ return __builtin_fmodl(__x, __y); } 
# 306
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 309
fmod(_Tp __x, _Up __y) 
# 310
{ 
# 311
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 312
return fmod((__type)__x, (__type)__y); 
# 313
} 
# 315
using ::frexp;
# 319
inline float frexp(float __x, int *__exp) 
# 320
{ return __builtin_frexpf(__x, __exp); } 
# 323
inline long double frexp(long double __x, int *__exp) 
# 324
{ return __builtin_frexpl(__x, __exp); } 
# 327
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
frexp(_Tp __x, int *__exp) 
# 332
{ return __builtin_frexp(__x, __exp); } 
# 334
using ::ldexp;
# 338
constexpr float ldexp(float __x, int __exp) 
# 339
{ return __builtin_ldexpf(__x, __exp); } 
# 342
constexpr long double ldexp(long double __x, int __exp) 
# 343
{ return __builtin_ldexpl(__x, __exp); } 
# 346
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
ldexp(_Tp __x, int __exp) 
# 351
{ return __builtin_ldexp(__x, __exp); } 
# 353
using ::log;
# 357
constexpr float log(float __x) 
# 358
{ return __builtin_logf(__x); } 
# 361
constexpr long double log(long double __x) 
# 362
{ return __builtin_logl(__x); } 
# 365
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log(_Tp __x) 
# 370
{ return __builtin_log(__x); } 
# 372
using ::log10;
# 376
constexpr float log10(float __x) 
# 377
{ return __builtin_log10f(__x); } 
# 380
constexpr long double log10(long double __x) 
# 381
{ return __builtin_log10l(__x); } 
# 384
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 388
log10(_Tp __x) 
# 389
{ return __builtin_log10(__x); } 
# 391
using ::modf;
# 395
inline float modf(float __x, float *__iptr) 
# 396
{ return __builtin_modff(__x, __iptr); } 
# 399
inline long double modf(long double __x, long double *__iptr) 
# 400
{ return __builtin_modfl(__x, __iptr); } 
# 403
using ::pow;
# 407
constexpr float pow(float __x, float __y) 
# 408
{ return __builtin_powf(__x, __y); } 
# 411
constexpr long double pow(long double __x, long double __y) 
# 412
{ return __builtin_powl(__x, __y); } 
# 431
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 434
pow(_Tp __x, _Up __y) 
# 435
{ 
# 436
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 437
return pow((__type)__x, (__type)__y); 
# 438
} 
# 440
using ::sin;
# 444
constexpr float sin(float __x) 
# 445
{ return __builtin_sinf(__x); } 
# 448
constexpr long double sin(long double __x) 
# 449
{ return __builtin_sinl(__x); } 
# 452
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sin(_Tp __x) 
# 457
{ return __builtin_sin(__x); } 
# 459
using ::sinh;
# 463
constexpr float sinh(float __x) 
# 464
{ return __builtin_sinhf(__x); } 
# 467
constexpr long double sinh(long double __x) 
# 468
{ return __builtin_sinhl(__x); } 
# 471
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sinh(_Tp __x) 
# 476
{ return __builtin_sinh(__x); } 
# 478
using ::sqrt;
# 482
constexpr float sqrt(float __x) 
# 483
{ return __builtin_sqrtf(__x); } 
# 486
constexpr long double sqrt(long double __x) 
# 487
{ return __builtin_sqrtl(__x); } 
# 490
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
sqrt(_Tp __x) 
# 495
{ return __builtin_sqrt(__x); } 
# 497
using ::tan;
# 501
constexpr float tan(float __x) 
# 502
{ return __builtin_tanf(__x); } 
# 505
constexpr long double tan(long double __x) 
# 506
{ return __builtin_tanl(__x); } 
# 509
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tan(_Tp __x) 
# 514
{ return __builtin_tan(__x); } 
# 516
using ::tanh;
# 520
constexpr float tanh(float __x) 
# 521
{ return __builtin_tanhf(__x); } 
# 524
constexpr long double tanh(long double __x) 
# 525
{ return __builtin_tanhl(__x); } 
# 528
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 532
tanh(_Tp __x) 
# 533
{ return __builtin_tanh(__x); } 
# 536
}
# 555
namespace std __attribute((__visibility__("default"))) { 
# 563
constexpr int fpclassify(float __x) 
# 564
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 565
} 
# 568
constexpr int fpclassify(double __x) 
# 569
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 570
} 
# 573
constexpr int fpclassify(long double __x) 
# 574
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 575
} 
# 578
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 581
fpclassify(_Tp __x) 
# 582
{ return (__x != 0) ? 4 : 2; } 
# 586
constexpr bool isfinite(float __x) 
# 587
{ return __builtin_isfinite(__x); } 
# 590
constexpr bool isfinite(double __x) 
# 591
{ return __builtin_isfinite(__x); } 
# 594
constexpr bool isfinite(long double __x) 
# 595
{ return __builtin_isfinite(__x); } 
# 598
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 601
isfinite(_Tp __x) 
# 602
{ return true; } 
# 606
constexpr bool isinf(float __x) 
# 607
{ return __builtin_isinf(__x); } 
# 610
constexpr bool isinf(double __x) 
# 611
{ return __builtin_isinf(__x); } 
# 614
constexpr bool isinf(long double __x) 
# 615
{ return __builtin_isinf(__x); } 
# 618
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 621
isinf(_Tp __x) 
# 622
{ return false; } 
# 626
constexpr bool isnan(float __x) 
# 627
{ return __builtin_isnan(__x); } 
# 630
constexpr bool isnan(double __x) 
# 631
{ return __builtin_isnan(__x); } 
# 634
constexpr bool isnan(long double __x) 
# 635
{ return __builtin_isnan(__x); } 
# 638
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 641
isnan(_Tp __x) 
# 642
{ return false; } 
# 646
constexpr bool isnormal(float __x) 
# 647
{ return __builtin_isnormal(__x); } 
# 650
constexpr bool isnormal(double __x) 
# 651
{ return __builtin_isnormal(__x); } 
# 654
constexpr bool isnormal(long double __x) 
# 655
{ return __builtin_isnormal(__x); } 
# 658
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 661
isnormal(_Tp __x) 
# 662
{ return (__x != 0) ? true : false; } 
# 667
constexpr bool signbit(float __x) 
# 668
{ return __builtin_signbitf(__x); } 
# 671
constexpr bool signbit(double __x) 
# 672
{ return __builtin_signbit(__x); } 
# 675
constexpr bool signbit(long double __x) 
# 676
{ return __builtin_signbitl(__x); } 
# 679
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 682
signbit(_Tp __x) 
# 683
{ return (__x < 0) ? true : false; } 
# 687
constexpr bool isgreater(float __x, float __y) 
# 688
{ return __builtin_isgreater(__x, __y); } 
# 691
constexpr bool isgreater(double __x, double __y) 
# 692
{ return __builtin_isgreater(__x, __y); } 
# 695
constexpr bool isgreater(long double __x, long double __y) 
# 696
{ return __builtin_isgreater(__x, __y); } 
# 699
template< class _Tp, class _Up> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 703
isgreater(_Tp __x, _Up __y) 
# 704
{ 
# 705
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 706
return __builtin_isgreater((__type)__x, (__type)__y); 
# 707
} 
# 711
constexpr bool isgreaterequal(float __x, float __y) 
# 712
{ return __builtin_isgreaterequal(__x, __y); } 
# 715
constexpr bool isgreaterequal(double __x, double __y) 
# 716
{ return __builtin_isgreaterequal(__x, __y); } 
# 719
constexpr bool isgreaterequal(long double __x, long double __y) 
# 720
{ return __builtin_isgreaterequal(__x, __y); } 
# 723
template< class _Tp, class _Up> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 727
isgreaterequal(_Tp __x, _Up __y) 
# 728
{ 
# 729
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 730
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 731
} 
# 735
constexpr bool isless(float __x, float __y) 
# 736
{ return __builtin_isless(__x, __y); } 
# 739
constexpr bool isless(double __x, double __y) 
# 740
{ return __builtin_isless(__x, __y); } 
# 743
constexpr bool isless(long double __x, long double __y) 
# 744
{ return __builtin_isless(__x, __y); } 
# 747
template< class _Tp, class _Up> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 751
isless(_Tp __x, _Up __y) 
# 752
{ 
# 753
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 754
return __builtin_isless((__type)__x, (__type)__y); 
# 755
} 
# 759
constexpr bool islessequal(float __x, float __y) 
# 760
{ return __builtin_islessequal(__x, __y); } 
# 763
constexpr bool islessequal(double __x, double __y) 
# 764
{ return __builtin_islessequal(__x, __y); } 
# 767
constexpr bool islessequal(long double __x, long double __y) 
# 768
{ return __builtin_islessequal(__x, __y); } 
# 771
template< class _Tp, class _Up> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 775
islessequal(_Tp __x, _Up __y) 
# 776
{ 
# 777
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 778
return __builtin_islessequal((__type)__x, (__type)__y); 
# 779
} 
# 783
constexpr bool islessgreater(float __x, float __y) 
# 784
{ return __builtin_islessgreater(__x, __y); } 
# 787
constexpr bool islessgreater(double __x, double __y) 
# 788
{ return __builtin_islessgreater(__x, __y); } 
# 791
constexpr bool islessgreater(long double __x, long double __y) 
# 792
{ return __builtin_islessgreater(__x, __y); } 
# 795
template< class _Tp, class _Up> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 799
islessgreater(_Tp __x, _Up __y) 
# 800
{ 
# 801
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 802
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 803
} 
# 807
constexpr bool isunordered(float __x, float __y) 
# 808
{ return __builtin_isunordered(__x, __y); } 
# 811
constexpr bool isunordered(double __x, double __y) 
# 812
{ return __builtin_isunordered(__x, __y); } 
# 815
constexpr bool isunordered(long double __x, long double __y) 
# 816
{ return __builtin_isunordered(__x, __y); } 
# 819
template< class _Tp, class _Up> inline typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 823
isunordered(_Tp __x, _Up __y) 
# 824
{ 
# 825
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 826
return __builtin_isunordered((__type)__x, (__type)__y); 
# 827
} 
# 947
}
# 1062
namespace std __attribute((__visibility__("default"))) { 
# 1067
using ::double_t;
# 1068
using ::float_t;
# 1071
using ::acosh;
# 1072
using ::acoshf;
# 1073
using ::acoshl;
# 1075
using ::asinh;
# 1076
using ::asinhf;
# 1077
using ::asinhl;
# 1079
using ::atanh;
# 1080
using ::atanhf;
# 1081
using ::atanhl;
# 1083
using ::cbrt;
# 1084
using ::cbrtf;
# 1085
using ::cbrtl;
# 1087
using ::copysign;
# 1088
using ::copysignf;
# 1089
using ::copysignl;
# 1091
using ::erf;
# 1092
using ::erff;
# 1093
using ::erfl;
# 1095
using ::erfc;
# 1096
using ::erfcf;
# 1097
using ::erfcl;
# 1099
using ::exp2;
# 1100
using ::exp2f;
# 1101
using ::exp2l;
# 1103
using ::expm1;
# 1104
using ::expm1f;
# 1105
using ::expm1l;
# 1107
using ::fdim;
# 1108
using ::fdimf;
# 1109
using ::fdiml;
# 1111
using ::fma;
# 1112
using ::fmaf;
# 1113
using ::fmal;
# 1115
using ::fmax;
# 1116
using ::fmaxf;
# 1117
using ::fmaxl;
# 1119
using ::fmin;
# 1120
using ::fminf;
# 1121
using ::fminl;
# 1123
using ::hypot;
# 1124
using ::hypotf;
# 1125
using ::hypotl;
# 1127
using ::ilogb;
# 1128
using ::ilogbf;
# 1129
using ::ilogbl;
# 1131
using ::lgamma;
# 1132
using ::lgammaf;
# 1133
using ::lgammal;
# 1135
using ::llrint;
# 1136
using ::llrintf;
# 1137
using ::llrintl;
# 1139
using ::llround;
# 1140
using ::llroundf;
# 1141
using ::llroundl;
# 1143
using ::log1p;
# 1144
using ::log1pf;
# 1145
using ::log1pl;
# 1147
using ::log2;
# 1148
using ::log2f;
# 1149
using ::log2l;
# 1151
using ::logb;
# 1152
using ::logbf;
# 1153
using ::logbl;
# 1155
using ::lrint;
# 1156
using ::lrintf;
# 1157
using ::lrintl;
# 1159
using ::lround;
# 1160
using ::lroundf;
# 1161
using ::lroundl;
# 1163
using ::nan;
# 1164
using ::nanf;
# 1165
using ::nanl;
# 1167
using ::nearbyint;
# 1168
using ::nearbyintf;
# 1169
using ::nearbyintl;
# 1171
using ::nextafter;
# 1172
using ::nextafterf;
# 1173
using ::nextafterl;
# 1175
using ::nexttoward;
# 1176
using ::nexttowardf;
# 1177
using ::nexttowardl;
# 1179
using ::remainder;
# 1180
using ::remainderf;
# 1181
using ::remainderl;
# 1183
using ::remquo;
# 1184
using ::remquof;
# 1185
using ::remquol;
# 1187
using ::rint;
# 1188
using ::rintf;
# 1189
using ::rintl;
# 1191
using ::round;
# 1192
using ::roundf;
# 1193
using ::roundl;
# 1195
using ::scalbln;
# 1196
using ::scalblnf;
# 1197
using ::scalblnl;
# 1199
using ::scalbn;
# 1200
using ::scalbnf;
# 1201
using ::scalbnl;
# 1203
using ::tgamma;
# 1204
using ::tgammaf;
# 1205
using ::tgammal;
# 1207
using ::trunc;
# 1208
using ::truncf;
# 1209
using ::truncl;
# 1214
constexpr float acosh(float __x) 
# 1215
{ return __builtin_acoshf(__x); } 
# 1218
constexpr long double acosh(long double __x) 
# 1219
{ return __builtin_acoshl(__x); } 
# 1222
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1225
acosh(_Tp __x) 
# 1226
{ return __builtin_acosh(__x); } 
# 1230
constexpr float asinh(float __x) 
# 1231
{ return __builtin_asinhf(__x); } 
# 1234
constexpr long double asinh(long double __x) 
# 1235
{ return __builtin_asinhl(__x); } 
# 1238
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1241
asinh(_Tp __x) 
# 1242
{ return __builtin_asinh(__x); } 
# 1246
constexpr float atanh(float __x) 
# 1247
{ return __builtin_atanhf(__x); } 
# 1250
constexpr long double atanh(long double __x) 
# 1251
{ return __builtin_atanhl(__x); } 
# 1254
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1257
atanh(_Tp __x) 
# 1258
{ return __builtin_atanh(__x); } 
# 1262
constexpr float cbrt(float __x) 
# 1263
{ return __builtin_cbrtf(__x); } 
# 1266
constexpr long double cbrt(long double __x) 
# 1267
{ return __builtin_cbrtl(__x); } 
# 1270
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1273
cbrt(_Tp __x) 
# 1274
{ return __builtin_cbrt(__x); } 
# 1278
constexpr float copysign(float __x, float __y) 
# 1279
{ return __builtin_copysignf(__x, __y); } 
# 1282
constexpr long double copysign(long double __x, long double __y) 
# 1283
{ return __builtin_copysignl(__x, __y); } 
# 1286
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1288
copysign(_Tp __x, _Up __y) 
# 1289
{ 
# 1290
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1291
return copysign((__type)__x, (__type)__y); 
# 1292
} 
# 1296
constexpr float erf(float __x) 
# 1297
{ return __builtin_erff(__x); } 
# 1300
constexpr long double erf(long double __x) 
# 1301
{ return __builtin_erfl(__x); } 
# 1304
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1307
erf(_Tp __x) 
# 1308
{ return __builtin_erf(__x); } 
# 1312
constexpr float erfc(float __x) 
# 1313
{ return __builtin_erfcf(__x); } 
# 1316
constexpr long double erfc(long double __x) 
# 1317
{ return __builtin_erfcl(__x); } 
# 1320
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1323
erfc(_Tp __x) 
# 1324
{ return __builtin_erfc(__x); } 
# 1328
constexpr float exp2(float __x) 
# 1329
{ return __builtin_exp2f(__x); } 
# 1332
constexpr long double exp2(long double __x) 
# 1333
{ return __builtin_exp2l(__x); } 
# 1336
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1339
exp2(_Tp __x) 
# 1340
{ return __builtin_exp2(__x); } 
# 1344
constexpr float expm1(float __x) 
# 1345
{ return __builtin_expm1f(__x); } 
# 1348
constexpr long double expm1(long double __x) 
# 1349
{ return __builtin_expm1l(__x); } 
# 1352
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1355
expm1(_Tp __x) 
# 1356
{ return __builtin_expm1(__x); } 
# 1360
constexpr float fdim(float __x, float __y) 
# 1361
{ return __builtin_fdimf(__x, __y); } 
# 1364
constexpr long double fdim(long double __x, long double __y) 
# 1365
{ return __builtin_fdiml(__x, __y); } 
# 1368
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1370
fdim(_Tp __x, _Up __y) 
# 1371
{ 
# 1372
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1373
return fdim((__type)__x, (__type)__y); 
# 1374
} 
# 1378
constexpr float fma(float __x, float __y, float __z) 
# 1379
{ return __builtin_fmaf(__x, __y, __z); } 
# 1382
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1383
{ return __builtin_fmal(__x, __y, __z); } 
# 1386
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1388
fma(_Tp __x, _Up __y, _Vp __z) 
# 1389
{ 
# 1390
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1391
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1392
} 
# 1396
constexpr float fmax(float __x, float __y) 
# 1397
{ return __builtin_fmaxf(__x, __y); } 
# 1400
constexpr long double fmax(long double __x, long double __y) 
# 1401
{ return __builtin_fmaxl(__x, __y); } 
# 1404
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1406
fmax(_Tp __x, _Up __y) 
# 1407
{ 
# 1408
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1409
return fmax((__type)__x, (__type)__y); 
# 1410
} 
# 1414
constexpr float fmin(float __x, float __y) 
# 1415
{ return __builtin_fminf(__x, __y); } 
# 1418
constexpr long double fmin(long double __x, long double __y) 
# 1419
{ return __builtin_fminl(__x, __y); } 
# 1422
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1424
fmin(_Tp __x, _Up __y) 
# 1425
{ 
# 1426
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1427
return fmin((__type)__x, (__type)__y); 
# 1428
} 
# 1432
constexpr float hypot(float __x, float __y) 
# 1433
{ return __builtin_hypotf(__x, __y); } 
# 1436
constexpr long double hypot(long double __x, long double __y) 
# 1437
{ return __builtin_hypotl(__x, __y); } 
# 1440
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1442
hypot(_Tp __x, _Up __y) 
# 1443
{ 
# 1444
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1445
return hypot((__type)__x, (__type)__y); 
# 1446
} 
# 1450
constexpr int ilogb(float __x) 
# 1451
{ return __builtin_ilogbf(__x); } 
# 1454
constexpr int ilogb(long double __x) 
# 1455
{ return __builtin_ilogbl(__x); } 
# 1458
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1462
ilogb(_Tp __x) 
# 1463
{ return __builtin_ilogb(__x); } 
# 1467
constexpr float lgamma(float __x) 
# 1468
{ return __builtin_lgammaf(__x); } 
# 1471
constexpr long double lgamma(long double __x) 
# 1472
{ return __builtin_lgammal(__x); } 
# 1475
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1478
lgamma(_Tp __x) 
# 1479
{ return __builtin_lgamma(__x); } 
# 1483
constexpr long long llrint(float __x) 
# 1484
{ return __builtin_llrintf(__x); } 
# 1487
constexpr long long llrint(long double __x) 
# 1488
{ return __builtin_llrintl(__x); } 
# 1491
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1494
llrint(_Tp __x) 
# 1495
{ return __builtin_llrint(__x); } 
# 1499
constexpr long long llround(float __x) 
# 1500
{ return __builtin_llroundf(__x); } 
# 1503
constexpr long long llround(long double __x) 
# 1504
{ return __builtin_llroundl(__x); } 
# 1507
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1510
llround(_Tp __x) 
# 1511
{ return __builtin_llround(__x); } 
# 1515
constexpr float log1p(float __x) 
# 1516
{ return __builtin_log1pf(__x); } 
# 1519
constexpr long double log1p(long double __x) 
# 1520
{ return __builtin_log1pl(__x); } 
# 1523
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1526
log1p(_Tp __x) 
# 1527
{ return __builtin_log1p(__x); } 
# 1532
constexpr float log2(float __x) 
# 1533
{ return __builtin_log2f(__x); } 
# 1536
constexpr long double log2(long double __x) 
# 1537
{ return __builtin_log2l(__x); } 
# 1540
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1543
log2(_Tp __x) 
# 1544
{ return __builtin_log2(__x); } 
# 1548
constexpr float logb(float __x) 
# 1549
{ return __builtin_logbf(__x); } 
# 1552
constexpr long double logb(long double __x) 
# 1553
{ return __builtin_logbl(__x); } 
# 1556
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1559
logb(_Tp __x) 
# 1560
{ return __builtin_logb(__x); } 
# 1564
constexpr long lrint(float __x) 
# 1565
{ return __builtin_lrintf(__x); } 
# 1568
constexpr long lrint(long double __x) 
# 1569
{ return __builtin_lrintl(__x); } 
# 1572
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1575
lrint(_Tp __x) 
# 1576
{ return __builtin_lrint(__x); } 
# 1580
constexpr long lround(float __x) 
# 1581
{ return __builtin_lroundf(__x); } 
# 1584
constexpr long lround(long double __x) 
# 1585
{ return __builtin_lroundl(__x); } 
# 1588
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1591
lround(_Tp __x) 
# 1592
{ return __builtin_lround(__x); } 
# 1596
constexpr float nearbyint(float __x) 
# 1597
{ return __builtin_nearbyintf(__x); } 
# 1600
constexpr long double nearbyint(long double __x) 
# 1601
{ return __builtin_nearbyintl(__x); } 
# 1604
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1607
nearbyint(_Tp __x) 
# 1608
{ return __builtin_nearbyint(__x); } 
# 1612
constexpr float nextafter(float __x, float __y) 
# 1613
{ return __builtin_nextafterf(__x, __y); } 
# 1616
constexpr long double nextafter(long double __x, long double __y) 
# 1617
{ return __builtin_nextafterl(__x, __y); } 
# 1620
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1622
nextafter(_Tp __x, _Up __y) 
# 1623
{ 
# 1624
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1625
return nextafter((__type)__x, (__type)__y); 
# 1626
} 
# 1630
constexpr float nexttoward(float __x, long double __y) 
# 1631
{ return __builtin_nexttowardf(__x, __y); } 
# 1634
constexpr long double nexttoward(long double __x, long double __y) 
# 1635
{ return __builtin_nexttowardl(__x, __y); } 
# 1638
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1641
nexttoward(_Tp __x, long double __y) 
# 1642
{ return __builtin_nexttoward(__x, __y); } 
# 1646
constexpr float remainder(float __x, float __y) 
# 1647
{ return __builtin_remainderf(__x, __y); } 
# 1650
constexpr long double remainder(long double __x, long double __y) 
# 1651
{ return __builtin_remainderl(__x, __y); } 
# 1654
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1656
remainder(_Tp __x, _Up __y) 
# 1657
{ 
# 1658
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1659
return remainder((__type)__x, (__type)__y); 
# 1660
} 
# 1664
inline float remquo(float __x, float __y, int *__pquo) 
# 1665
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1668
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1669
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1672
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1674
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1675
{ 
# 1676
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1677
return remquo((__type)__x, (__type)__y, __pquo); 
# 1678
} 
# 1682
constexpr float rint(float __x) 
# 1683
{ return __builtin_rintf(__x); } 
# 1686
constexpr long double rint(long double __x) 
# 1687
{ return __builtin_rintl(__x); } 
# 1690
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1693
rint(_Tp __x) 
# 1694
{ return __builtin_rint(__x); } 
# 1698
constexpr float round(float __x) 
# 1699
{ return __builtin_roundf(__x); } 
# 1702
constexpr long double round(long double __x) 
# 1703
{ return __builtin_roundl(__x); } 
# 1706
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1709
round(_Tp __x) 
# 1710
{ return __builtin_round(__x); } 
# 1714
constexpr float scalbln(float __x, long __ex) 
# 1715
{ return __builtin_scalblnf(__x, __ex); } 
# 1718
constexpr long double scalbln(long double __x, long __ex) 
# 1719
{ return __builtin_scalblnl(__x, __ex); } 
# 1722
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1725
scalbln(_Tp __x, long __ex) 
# 1726
{ return __builtin_scalbln(__x, __ex); } 
# 1730
constexpr float scalbn(float __x, int __ex) 
# 1731
{ return __builtin_scalbnf(__x, __ex); } 
# 1734
constexpr long double scalbn(long double __x, int __ex) 
# 1735
{ return __builtin_scalbnl(__x, __ex); } 
# 1738
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1741
scalbn(_Tp __x, int __ex) 
# 1742
{ return __builtin_scalbn(__x, __ex); } 
# 1746
constexpr float tgamma(float __x) 
# 1747
{ return __builtin_tgammaf(__x); } 
# 1750
constexpr long double tgamma(long double __x) 
# 1751
{ return __builtin_tgammal(__x); } 
# 1754
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1757
tgamma(_Tp __x) 
# 1758
{ return __builtin_tgamma(__x); } 
# 1762
constexpr float trunc(float __x) 
# 1763
{ return __builtin_truncf(__x); } 
# 1766
constexpr long double trunc(long double __x) 
# 1767
{ return __builtin_truncl(__x); } 
# 1770
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1773
trunc(_Tp __x) 
# 1774
{ return __builtin_trunc(__x); } 
# 1777
}
# 114 "/usr/include/c++/5/cstdlib" 3
namespace std __attribute((__visibility__("default"))) { 
# 118
using ::div_t;
# 119
using ::ldiv_t;
# 121
using ::abort;
# 122
using ::abs;
# 123
using ::atexit;
# 126
using ::at_quick_exit;
# 129
using ::atof;
# 130
using ::atoi;
# 131
using ::atol;
# 132
using ::bsearch;
# 133
using ::calloc;
# 134
using ::div;
# 135
using ::exit;
# 136
using ::free;
# 137
using ::getenv;
# 138
using ::labs;
# 139
using ::ldiv;
# 140
using ::malloc;
# 142
using ::mblen;
# 143
using ::mbstowcs;
# 144
using ::mbtowc;
# 146
using ::qsort;
# 149
using ::quick_exit;
# 152
using ::rand;
# 153
using ::realloc;
# 154
using ::srand;
# 155
using ::strtod;
# 156
using ::strtol;
# 157
using ::strtoul;
# 158
using ::system;
# 160
using ::wcstombs;
# 161
using ::wctomb;
# 166
inline long abs(long __i) { return __builtin_labs(__i); } 
# 169
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 174
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 196
}
# 209
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 214
using ::lldiv_t;
# 220
using ::_Exit;
# 224
using ::llabs;
# 227
inline lldiv_t div(long long __n, long long __d) 
# 228
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 230
using ::lldiv;
# 241
using ::atoll;
# 242
using ::strtoll;
# 243
using ::strtoull;
# 245
using ::strtof;
# 246
using ::strtold;
# 249
}
# 251
namespace std { 
# 254
using __gnu_cxx::lldiv_t;
# 256
using __gnu_cxx::_Exit;
# 258
using __gnu_cxx::llabs;
# 259
using __gnu_cxx::div;
# 260
using __gnu_cxx::lldiv;
# 262
using __gnu_cxx::atoll;
# 263
using __gnu_cxx::strtof;
# 264
using __gnu_cxx::strtoll;
# 265
using __gnu_cxx::strtoull;
# 266
using __gnu_cxx::strtold;
# 267
}
# 8925 "/usr/local/cuda-8.0/include/math_functions.h"
__attribute((always_inline)) inline int signbit(float x); 
# 8929
__attribute((always_inline)) inline int signbit(double x); 
# 8931
__attribute((always_inline)) inline int signbit(long double x); 
# 8933
__attribute((always_inline)) inline int isfinite(float x); 
# 8937
__attribute((always_inline)) inline int isfinite(double x); 
# 8939
__attribute((always_inline)) inline int isfinite(long double x); 
# 8941
__attribute((always_inline)) inline int isnan(float x); 
# 8945
__attribute((always_inline)) inline int isnan(double x) throw(); 
# 8947
__attribute((always_inline)) inline int isnan(long double x); 
# 8949
__attribute((always_inline)) inline int isinf(float x); 
# 8953
__attribute((always_inline)) inline int isinf(double x) throw(); 
# 8955
__attribute((always_inline)) inline int isinf(long double x); 
# 9002
namespace std { 
# 9004
template< class T> extern T __pow_helper(T, int); 
# 9005
template< class T> extern T __cmath_power(T, unsigned); 
# 9006
}
# 9008
using std::abs;
# 9009
using std::fabs;
# 9010
using std::ceil;
# 9011
using std::floor;
# 9012
using std::sqrt;
# 9013
using std::pow;
# 9014
using std::log;
# 9015
using std::log10;
# 9016
using std::fmod;
# 9017
using std::modf;
# 9018
using std::exp;
# 9019
using std::frexp;
# 9020
using std::ldexp;
# 9021
using std::asin;
# 9022
using std::sin;
# 9023
using std::sinh;
# 9024
using std::acos;
# 9025
using std::cos;
# 9026
using std::cosh;
# 9027
using std::atan;
# 9028
using std::atan2;
# 9029
using std::tan;
# 9030
using std::tanh;
# 9393
namespace std { 
# 9406
extern inline long long abs(long long); 
# 9412
extern inline long abs(long); 
# 9413
extern constexpr float abs(float); 
# 9414
extern constexpr double abs(double); 
# 9415
extern constexpr float fabs(float); 
# 9416
extern constexpr float ceil(float); 
# 9417
extern constexpr float floor(float); 
# 9418
extern constexpr float sqrt(float); 
# 9419
extern constexpr float pow(float, float); 
# 9424
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 9434
extern constexpr float log(float); 
# 9435
extern constexpr float log10(float); 
# 9436
extern constexpr float fmod(float, float); 
# 9437
extern inline float modf(float, float *); 
# 9438
extern constexpr float exp(float); 
# 9439
extern inline float frexp(float, int *); 
# 9440
extern constexpr float ldexp(float, int); 
# 9441
extern constexpr float asin(float); 
# 9442
extern constexpr float sin(float); 
# 9443
extern constexpr float sinh(float); 
# 9444
extern constexpr float acos(float); 
# 9445
extern constexpr float cos(float); 
# 9446
extern constexpr float cosh(float); 
# 9447
extern constexpr float atan(float); 
# 9448
extern constexpr float atan2(float, float); 
# 9449
extern constexpr float tan(float); 
# 9450
extern constexpr float tanh(float); 
# 9518
}
# 9609
static inline float logb(float a); 
# 9611
static inline int ilogb(float a); 
# 9613
static inline float scalbn(float a, int b); 
# 9615
static inline float scalbln(float a, long b); 
# 9617
static inline float exp2(float a); 
# 9619
static inline float expm1(float a); 
# 9621
static inline float log2(float a); 
# 9623
static inline float log1p(float a); 
# 9625
static inline float acosh(float a); 
# 9627
static inline float asinh(float a); 
# 9629
static inline float atanh(float a); 
# 9631
static inline float hypot(float a, float b); 
# 9633
static inline float norm3d(float a, float b, float c); 
# 9635
static inline float norm4d(float a, float b, float c, float d); 
# 9637
static inline float cbrt(float a); 
# 9639
static inline float erf(float a); 
# 9641
static inline float erfc(float a); 
# 9643
static inline float lgamma(float a); 
# 9645
static inline float tgamma(float a); 
# 9647
static inline float copysign(float a, float b); 
# 9649
static inline float nextafter(float a, float b); 
# 9651
static inline float remainder(float a, float b); 
# 9653
static inline float remquo(float a, float b, int * quo); 
# 9655
static inline float round(float a); 
# 9657
static inline long lround(float a); 
# 9659
static inline long long llround(float a); 
# 9661
static inline float trunc(float a); 
# 9663
static inline float rint(float a); 
# 9665
static inline long lrint(float a); 
# 9667
static inline long long llrint(float a); 
# 9669
static inline float nearbyint(float a); 
# 9671
static inline float fdim(float a, float b); 
# 9673
static inline float fma(float a, float b, float c); 
# 9675
static inline float fmax(float a, float b); 
# 9677
static inline float fmin(float a, float b); 
# 9718
static inline float exp10(float a); 
# 9720
static inline float rsqrt(float a); 
# 9722
static inline float rcbrt(float a); 
# 9724
static inline float sinpi(float a); 
# 9726
static inline float cospi(float a); 
# 9728
static inline void sincospi(float a, float * sptr, float * cptr); 
# 9730
static inline void sincos(float a, float * sptr, float * cptr); 
# 9732
static inline float j0(float a); 
# 9734
static inline float j1(float a); 
# 9736
static inline float jn(int n, float a); 
# 9738
static inline float y0(float a); 
# 9740
static inline float y1(float a); 
# 9742
static inline float yn(int n, float a); 
# 9744
static inline float cyl_bessel_i0(float a); 
# 9746
static inline float cyl_bessel_i1(float a); 
# 9748
static inline float erfinv(float a); 
# 9750
static inline float erfcinv(float a); 
# 9752
static inline float normcdfinv(float a); 
# 9754
static inline float normcdf(float a); 
# 9756
static inline float erfcx(float a); 
# 9758
static inline double copysign(double a, float b); 
# 9760
static inline float copysign(float a, double b); 
# 9762
static inline unsigned min(unsigned a, unsigned b); 
# 9764
static inline unsigned min(int a, unsigned b); 
# 9766
static inline unsigned min(unsigned a, int b); 
# 9768
static inline long min(long a, long b); 
# 9770
static inline unsigned long min(unsigned long a, unsigned long b); 
# 9772
static inline unsigned long min(long a, unsigned long b); 
# 9774
static inline unsigned long min(unsigned long a, long b); 
# 9776
static inline long long min(long long a, long long b); 
# 9778
static inline unsigned long long min(unsigned long long a, unsigned long long b); 
# 9780
static inline unsigned long long min(long long a, unsigned long long b); 
# 9782
static inline unsigned long long min(unsigned long long a, long long b); 
# 9784
static inline float min(float a, float b); 
# 9786
static inline double min(double a, double b); 
# 9788
static inline double min(float a, double b); 
# 9790
static inline double min(double a, float b); 
# 9792
static inline unsigned max(unsigned a, unsigned b); 
# 9794
static inline unsigned max(int a, unsigned b); 
# 9796
static inline unsigned max(unsigned a, int b); 
# 9798
static inline long max(long a, long b); 
# 9800
static inline unsigned long max(unsigned long a, unsigned long b); 
# 9802
static inline unsigned long max(long a, unsigned long b); 
# 9804
static inline unsigned long max(unsigned long a, long b); 
# 9806
static inline long long max(long long a, long long b); 
# 9808
static inline unsigned long long max(unsigned long long a, unsigned long long b); 
# 9810
static inline unsigned long long max(long long a, unsigned long long b); 
# 9812
static inline unsigned long long max(unsigned long long a, long long b); 
# 9814
static inline float max(float a, float b); 
# 9816
static inline double max(double a, double b); 
# 9818
static inline double max(float a, double b); 
# 9820
static inline double max(double a, float b); 
# 248 "/usr/local/cuda-8.0/include/math_functions.hpp"
__attribute((always_inline)) inline int signbit(float x) { return __signbitf(x); } 
# 252
__attribute((always_inline)) inline int signbit(double x) { return __signbit(x); } 
# 254
__attribute((always_inline)) inline int signbit(long double x) { return __signbitl(x); } 
# 265
__attribute((always_inline)) inline int isfinite(float x) { return __finitef(x); } 
# 280
__attribute((always_inline)) inline int isfinite(double x) { return __finite(x); } 
# 293
__attribute((always_inline)) inline int isfinite(long double x) { return __finitel(x); } 
# 296
__attribute((always_inline)) inline int isnan(float x) { return __isnanf(x); } 
# 300
__attribute((always_inline)) inline int isnan(double x) throw() { return __isnan(x); } 
# 302
__attribute((always_inline)) inline int isnan(long double x) { return __isnanl(x); } 
# 304
__attribute((always_inline)) inline int isinf(float x) { return __isinff(x); } 
# 308
__attribute((always_inline)) inline int isinf(double x) throw() { return __isinf(x); } 
# 310
__attribute((always_inline)) inline int isinf(long double x) { return __isinfl(x); } 
# 503
static inline float logb(float a) 
# 504
{ 
# 505
return logbf(a); 
# 506
} 
# 508
static inline int ilogb(float a) 
# 509
{ 
# 510
return ilogbf(a); 
# 511
} 
# 513
static inline float scalbn(float a, int b) 
# 514
{ 
# 515
return scalbnf(a, b); 
# 516
} 
# 518
static inline float scalbln(float a, long b) 
# 519
{ 
# 520
return scalblnf(a, b); 
# 521
} 
# 523
static inline float exp2(float a) 
# 524
{ 
# 525
return exp2f(a); 
# 526
} 
# 528
static inline float expm1(float a) 
# 529
{ 
# 530
return expm1f(a); 
# 531
} 
# 533
static inline float log2(float a) 
# 534
{ 
# 535
return log2f(a); 
# 536
} 
# 538
static inline float log1p(float a) 
# 539
{ 
# 540
return log1pf(a); 
# 541
} 
# 543
static inline float acosh(float a) 
# 544
{ 
# 545
return acoshf(a); 
# 546
} 
# 548
static inline float asinh(float a) 
# 549
{ 
# 550
return asinhf(a); 
# 551
} 
# 553
static inline float atanh(float a) 
# 554
{ 
# 555
return atanhf(a); 
# 556
} 
# 558
static inline float hypot(float a, float b) 
# 559
{ 
# 560
return hypotf(a, b); 
# 561
} 
# 563
static inline float norm3d(float a, float b, float c) 
# 564
{ 
# 565
return norm3df(a, b, c); 
# 566
} 
# 568
static inline float norm4d(float a, float b, float c, float d) 
# 569
{ 
# 570
return norm4df(a, b, c, d); 
# 571
} 
# 573
static inline float cbrt(float a) 
# 574
{ 
# 575
return cbrtf(a); 
# 576
} 
# 578
static inline float erf(float a) 
# 579
{ 
# 580
return erff(a); 
# 581
} 
# 583
static inline float erfc(float a) 
# 584
{ 
# 585
return erfcf(a); 
# 586
} 
# 588
static inline float lgamma(float a) 
# 589
{ 
# 590
return lgammaf(a); 
# 591
} 
# 593
static inline float tgamma(float a) 
# 594
{ 
# 595
return tgammaf(a); 
# 596
} 
# 598
static inline float copysign(float a, float b) 
# 599
{ 
# 600
return copysignf(a, b); 
# 601
} 
# 603
static inline float nextafter(float a, float b) 
# 604
{ 
# 605
return nextafterf(a, b); 
# 606
} 
# 608
static inline float remainder(float a, float b) 
# 609
{ 
# 610
return remainderf(a, b); 
# 611
} 
# 613
static inline float remquo(float a, float b, int *quo) 
# 614
{ 
# 615
return remquof(a, b, quo); 
# 616
} 
# 618
static inline float round(float a) 
# 619
{ 
# 620
return roundf(a); 
# 621
} 
# 623
static inline long lround(float a) 
# 624
{ 
# 625
return lroundf(a); 
# 626
} 
# 628
static inline long long llround(float a) 
# 629
{ 
# 630
return llroundf(a); 
# 631
} 
# 633
static inline float trunc(float a) 
# 634
{ 
# 635
return truncf(a); 
# 636
} 
# 638
static inline float rint(float a) 
# 639
{ 
# 640
return rintf(a); 
# 641
} 
# 643
static inline long lrint(float a) 
# 644
{ 
# 645
return lrintf(a); 
# 646
} 
# 648
static inline long long llrint(float a) 
# 649
{ 
# 650
return llrintf(a); 
# 651
} 
# 653
static inline float nearbyint(float a) 
# 654
{ 
# 655
return nearbyintf(a); 
# 656
} 
# 658
static inline float fdim(float a, float b) 
# 659
{ 
# 660
return fdimf(a, b); 
# 661
} 
# 663
static inline float fma(float a, float b, float c) 
# 664
{ 
# 665
return fmaf(a, b, c); 
# 666
} 
# 668
static inline float fmax(float a, float b) 
# 669
{ 
# 670
return fmaxf(a, b); 
# 671
} 
# 673
static inline float fmin(float a, float b) 
# 674
{ 
# 675
return fminf(a, b); 
# 676
} 
# 681
static inline float exp10(float a) 
# 682
{ 
# 683
return exp10f(a); 
# 684
} 
# 686
static inline float rsqrt(float a) 
# 687
{ 
# 688
return rsqrtf(a); 
# 689
} 
# 691
static inline float rcbrt(float a) 
# 692
{ 
# 693
return rcbrtf(a); 
# 694
} 
# 696
static inline float sinpi(float a) 
# 697
{ 
# 698
return sinpif(a); 
# 699
} 
# 701
static inline float cospi(float a) 
# 702
{ 
# 703
return cospif(a); 
# 704
} 
# 706
static inline void sincospi(float a, float *sptr, float *cptr) 
# 707
{ 
# 708
sincospif(a, sptr, cptr); 
# 709
} 
# 711
static inline void sincos(float a, float *sptr, float *cptr) 
# 712
{ 
# 713
sincosf(a, sptr, cptr); 
# 714
} 
# 716
static inline float j0(float a) 
# 717
{ 
# 718
return j0f(a); 
# 719
} 
# 721
static inline float j1(float a) 
# 722
{ 
# 723
return j1f(a); 
# 724
} 
# 726
static inline float jn(int n, float a) 
# 727
{ 
# 728
return jnf(n, a); 
# 729
} 
# 731
static inline float y0(float a) 
# 732
{ 
# 733
return y0f(a); 
# 734
} 
# 736
static inline float y1(float a) 
# 737
{ 
# 738
return y1f(a); 
# 739
} 
# 741
static inline float yn(int n, float a) 
# 742
{ 
# 743
return ynf(n, a); 
# 744
} 
# 746
static inline float cyl_bessel_i0(float a) 
# 747
{ 
# 748
return cyl_bessel_i0f(a); 
# 749
} 
# 751
static inline float cyl_bessel_i1(float a) 
# 752
{ 
# 753
return cyl_bessel_i1f(a); 
# 754
} 
# 756
static inline float erfinv(float a) 
# 757
{ 
# 758
return erfinvf(a); 
# 759
} 
# 761
static inline float erfcinv(float a) 
# 762
{ 
# 763
return erfcinvf(a); 
# 764
} 
# 766
static inline float normcdfinv(float a) 
# 767
{ 
# 768
return normcdfinvf(a); 
# 769
} 
# 771
static inline float normcdf(float a) 
# 772
{ 
# 773
return normcdff(a); 
# 774
} 
# 776
static inline float erfcx(float a) 
# 777
{ 
# 778
return erfcxf(a); 
# 779
} 
# 781
static inline double copysign(double a, float b) 
# 782
{ 
# 783
return copysign(a, (double)b); 
# 784
} 
# 786
static inline float copysign(float a, double b) 
# 787
{ 
# 788
return copysignf(a, (float)b); 
# 789
} 
# 791
static inline unsigned min(unsigned a, unsigned b) 
# 792
{ 
# 793
return umin(a, b); 
# 794
} 
# 796
static inline unsigned min(int a, unsigned b) 
# 797
{ 
# 798
return umin((unsigned)a, b); 
# 799
} 
# 801
static inline unsigned min(unsigned a, int b) 
# 802
{ 
# 803
return umin(a, (unsigned)b); 
# 804
} 
# 806
static inline long min(long a, long b) 
# 807
{ 
# 813
if (sizeof(long) == sizeof(int)) { 
# 817
return (long)min((int)a, (int)b); 
# 818
} else { 
# 819
return (long)llmin((long long)a, (long long)b); 
# 820
}  
# 821
} 
# 823
static inline unsigned long min(unsigned long a, unsigned long b) 
# 824
{ 
# 828
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 832
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 833
} else { 
# 834
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 835
}  
# 836
} 
# 838
static inline unsigned long min(long a, unsigned long b) 
# 839
{ 
# 843
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 847
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 848
} else { 
# 849
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 850
}  
# 851
} 
# 853
static inline unsigned long min(unsigned long a, long b) 
# 854
{ 
# 858
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 862
return (unsigned long)umin((unsigned)a, (unsigned)b); 
# 863
} else { 
# 864
return (unsigned long)ullmin((unsigned long long)a, (unsigned long long)b); 
# 865
}  
# 866
} 
# 868
static inline long long min(long long a, long long b) 
# 869
{ 
# 870
return llmin(a, b); 
# 871
} 
# 873
static inline unsigned long long min(unsigned long long a, unsigned long long b) 
# 874
{ 
# 875
return ullmin(a, b); 
# 876
} 
# 878
static inline unsigned long long min(long long a, unsigned long long b) 
# 879
{ 
# 880
return ullmin((unsigned long long)a, b); 
# 881
} 
# 883
static inline unsigned long long min(unsigned long long a, long long b) 
# 884
{ 
# 885
return ullmin(a, (unsigned long long)b); 
# 886
} 
# 888
static inline float min(float a, float b) 
# 889
{ 
# 890
return fminf(a, b); 
# 891
} 
# 893
static inline double min(double a, double b) 
# 894
{ 
# 895
return fmin(a, b); 
# 896
} 
# 898
static inline double min(float a, double b) 
# 899
{ 
# 900
return fmin((double)a, b); 
# 901
} 
# 903
static inline double min(double a, float b) 
# 904
{ 
# 905
return fmin(a, (double)b); 
# 906
} 
# 908
static inline unsigned max(unsigned a, unsigned b) 
# 909
{ 
# 910
return umax(a, b); 
# 911
} 
# 913
static inline unsigned max(int a, unsigned b) 
# 914
{ 
# 915
return umax((unsigned)a, b); 
# 916
} 
# 918
static inline unsigned max(unsigned a, int b) 
# 919
{ 
# 920
return umax(a, (unsigned)b); 
# 921
} 
# 923
static inline long max(long a, long b) 
# 924
{ 
# 929
if (sizeof(long) == sizeof(int)) { 
# 933
return (long)max((int)a, (int)b); 
# 934
} else { 
# 935
return (long)llmax((long long)a, (long long)b); 
# 936
}  
# 937
} 
# 939
static inline unsigned long max(unsigned long a, unsigned long b) 
# 940
{ 
# 944
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 948
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 949
} else { 
# 950
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 951
}  
# 952
} 
# 954
static inline unsigned long max(long a, unsigned long b) 
# 955
{ 
# 959
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 963
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 964
} else { 
# 965
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 966
}  
# 967
} 
# 969
static inline unsigned long max(unsigned long a, long b) 
# 970
{ 
# 974
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 978
return (unsigned long)umax((unsigned)a, (unsigned)b); 
# 979
} else { 
# 980
return (unsigned long)ullmax((unsigned long long)a, (unsigned long long)b); 
# 981
}  
# 982
} 
# 984
static inline long long max(long long a, long long b) 
# 985
{ 
# 986
return llmax(a, b); 
# 987
} 
# 989
static inline unsigned long long max(unsigned long long a, unsigned long long b) 
# 990
{ 
# 991
return ullmax(a, b); 
# 992
} 
# 994
static inline unsigned long long max(long long a, unsigned long long b) 
# 995
{ 
# 996
return ullmax((unsigned long long)a, b); 
# 997
} 
# 999
static inline unsigned long long max(unsigned long long a, long long b) 
# 1000
{ 
# 1001
return ullmax(a, (unsigned long long)b); 
# 1002
} 
# 1004
static inline float max(float a, float b) 
# 1005
{ 
# 1006
return fmaxf(a, b); 
# 1007
} 
# 1009
static inline double max(double a, double b) 
# 1010
{ 
# 1011
return fmax(a, b); 
# 1012
} 
# 1014
static inline double max(float a, double b) 
# 1015
{ 
# 1016
return fmax((double)a, b); 
# 1017
} 
# 1019
static inline double max(double a, float b) 
# 1020
{ 
# 1021
return fmax(a, (double)b); 
# 1022
} 
# 1033
extern "C" inline int min(int a, int b) 
# 1034
{ 
# 1035
return (a < b) ? a : b; 
# 1036
} 
# 1038
extern "C" inline unsigned umin(unsigned a, unsigned b) 
# 1039
{ 
# 1040
return (a < b) ? a : b; 
# 1041
} 
# 1043
extern "C" inline long long llmin(long long a, long long b) 
# 1044
{ 
# 1045
return (a < b) ? a : b; 
# 1046
} 
# 1048
extern "C" inline unsigned long long ullmin(unsigned long long a, unsigned long long 
# 1049
b) 
# 1050
{ 
# 1051
return (a < b) ? a : b; 
# 1052
} 
# 1054
extern "C" inline int max(int a, int b) 
# 1055
{ 
# 1056
return (a > b) ? a : b; 
# 1057
} 
# 1059
extern "C" inline unsigned umax(unsigned a, unsigned b) 
# 1060
{ 
# 1061
return (a > b) ? a : b; 
# 1062
} 
# 1064
extern "C" inline long long llmax(long long a, long long b) 
# 1065
{ 
# 1066
return (a > b) ? a : b; 
# 1067
} 
# 1069
extern "C" inline unsigned long long ullmax(unsigned long long a, unsigned long long 
# 1070
b) 
# 1071
{ 
# 1072
return (a > b) ? a : b; 
# 1073
} 
# 77 "/usr/local/cuda-8.0/include/cuda_surface_types.h"
template< class T, int dim = 1> 
# 78
struct surface : public surfaceReference { 
# 81
surface() 
# 82
{ 
# 83
(surfaceReference::channelDesc) = cudaCreateChannelDesc< T> (); 
# 84
} 
# 86
surface(cudaChannelFormatDesc desc) 
# 87
{ 
# 88
(surfaceReference::channelDesc) = desc; 
# 89
} 
# 91
}; 
# 93
template< int dim> 
# 94
struct surface< void, dim>  : public surfaceReference { 
# 97
surface() 
# 98
{ 
# 99
(surfaceReference::channelDesc) = cudaCreateChannelDesc< void> (); 
# 100
} 
# 102
}; 
# 77 "/usr/local/cuda-8.0/include/cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
# 78
struct texture : public textureReference { 
# 81
texture(int norm = 0, cudaTextureFilterMode 
# 82
fMode = cudaFilterModePoint, cudaTextureAddressMode 
# 83
aMode = cudaAddressModeClamp) 
# 84
{ 
# 85
(textureReference::normalized) = norm; 
# 86
(textureReference::filterMode) = fMode; 
# 87
((textureReference::addressMode)[0]) = aMode; 
# 88
((textureReference::addressMode)[1]) = aMode; 
# 89
((textureReference::addressMode)[2]) = aMode; 
# 90
(textureReference::channelDesc) = cudaCreateChannelDesc< T> (); 
# 91
(textureReference::sRGB) = 0; 
# 92
} 
# 94
texture(int norm, cudaTextureFilterMode 
# 95
fMode, cudaTextureAddressMode 
# 96
aMode, cudaChannelFormatDesc 
# 97
desc) 
# 98
{ 
# 99
(textureReference::normalized) = norm; 
# 100
(textureReference::filterMode) = fMode; 
# 101
((textureReference::addressMode)[0]) = aMode; 
# 102
((textureReference::addressMode)[1]) = aMode; 
# 103
((textureReference::addressMode)[2]) = aMode; 
# 104
(textureReference::channelDesc) = desc; 
# 105
(textureReference::sRGB) = 0; 
# 106
} 
# 108
}; 
# 90 "/usr/local/cuda-8.0/include/device_functions.h"
extern "C" {
# 3230
}
# 3238
__attribute__((unused)) static inline int mulhi(int a, int b); 
# 3240
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b); 
# 3242
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b); 
# 3244
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b); 
# 3246
__attribute__((unused)) static inline long long mul64hi(long long a, long long b); 
# 3248
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b); 
# 3250
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b); 
# 3252
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b); 
# 3254
__attribute__((unused)) static inline int float_as_int(float a); 
# 3256
__attribute__((unused)) static inline float int_as_float(int a); 
# 3258
__attribute__((unused)) static inline unsigned float_as_uint(float a); 
# 3260
__attribute__((unused)) static inline float uint_as_float(unsigned a); 
# 3262
__attribute__((unused)) static inline float saturate(float a); 
# 3264
__attribute__((unused)) static inline int mul24(int a, int b); 
# 3266
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b); 
# 3268
__attribute((deprecated("Please use __trap() instead."))) __attribute__((unused)) static inline void trap(); 
# 3271
__attribute((deprecated("Please use __brkpt() instead."))) __attribute__((unused)) static inline void brkpt(int c = 0); 
# 3273
__attribute((deprecated("Please use __syncthreads() instead."))) __attribute__((unused)) static inline void syncthreads(); 
# 3275
__attribute((deprecated("Please use __prof_trigger() instead."))) __attribute__((unused)) static inline void prof_trigger(int e); 
# 3277
__attribute((deprecated("Please use __threadfence() instead."))) __attribute__((unused)) static inline void threadfence(bool global = true); 
# 3279
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
# 3281
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
# 3283
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
# 3285
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 83 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline int mulhi(int a, int b) 
# 84
{int volatile ___ = 1;(void)a;(void)b;
# 86
::exit(___);}
#if 0
# 84
{ 
# 85
return __mulhi(a, b); 
# 86
} 
#endif
# 88 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, unsigned b) 
# 89
{int volatile ___ = 1;(void)a;(void)b;
# 91
::exit(___);}
#if 0
# 89
{ 
# 90
return __umulhi(a, b); 
# 91
} 
#endif
# 93 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(int a, unsigned b) 
# 94
{int volatile ___ = 1;(void)a;(void)b;
# 96
::exit(___);}
#if 0
# 94
{ 
# 95
return __umulhi((unsigned)a, b); 
# 96
} 
#endif
# 98 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned mulhi(unsigned a, int b) 
# 99
{int volatile ___ = 1;(void)a;(void)b;
# 101
::exit(___);}
#if 0
# 99
{ 
# 100
return __umulhi(a, (unsigned)b); 
# 101
} 
#endif
# 103 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline long long mul64hi(long long a, long long b) 
# 104
{int volatile ___ = 1;(void)a;(void)b;
# 106
::exit(___);}
#if 0
# 104
{ 
# 105
return __mul64hi(a, b); 
# 106
} 
#endif
# 108 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, unsigned long long b) 
# 109
{int volatile ___ = 1;(void)a;(void)b;
# 111
::exit(___);}
#if 0
# 109
{ 
# 110
return __umul64hi(a, b); 
# 111
} 
#endif
# 113 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(long long a, unsigned long long b) 
# 114
{int volatile ___ = 1;(void)a;(void)b;
# 116
::exit(___);}
#if 0
# 114
{ 
# 115
return __umul64hi((unsigned long long)a, b); 
# 116
} 
#endif
# 118 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned long long mul64hi(unsigned long long a, long long b) 
# 119
{int volatile ___ = 1;(void)a;(void)b;
# 121
::exit(___);}
#if 0
# 119
{ 
# 120
return __umul64hi(a, (unsigned long long)b); 
# 121
} 
#endif
# 123 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline int float_as_int(float a) 
# 124
{int volatile ___ = 1;(void)a;
# 126
::exit(___);}
#if 0
# 124
{ 
# 125
return __float_as_int(a); 
# 126
} 
#endif
# 128 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline float int_as_float(int a) 
# 129
{int volatile ___ = 1;(void)a;
# 131
::exit(___);}
#if 0
# 129
{ 
# 130
return __int_as_float(a); 
# 131
} 
#endif
# 133 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned float_as_uint(float a) 
# 134
{int volatile ___ = 1;(void)a;
# 136
::exit(___);}
#if 0
# 134
{ 
# 135
return __float_as_uint(a); 
# 136
} 
#endif
# 138 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline float uint_as_float(unsigned a) 
# 139
{int volatile ___ = 1;(void)a;
# 141
::exit(___);}
#if 0
# 139
{ 
# 140
return __uint_as_float(a); 
# 141
} 
#endif
# 142 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline float saturate(float a) 
# 143
{int volatile ___ = 1;(void)a;
# 145
::exit(___);}
#if 0
# 143
{ 
# 144
return __saturatef(a); 
# 145
} 
#endif
# 147 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline int mul24(int a, int b) 
# 148
{int volatile ___ = 1;(void)a;(void)b;
# 150
::exit(___);}
#if 0
# 148
{ 
# 149
return __mul24(a, b); 
# 150
} 
#endif
# 152 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned umul24(unsigned a, unsigned b) 
# 153
{int volatile ___ = 1;(void)a;(void)b;
# 155
::exit(___);}
#if 0
# 153
{ 
# 154
return __umul24(a, b); 
# 155
} 
#endif
# 157 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline void trap() 
# 158
{int volatile ___ = 1;
# 160
::exit(___);}
#if 0
# 158
{ 
# 159
__trap(); 
# 160
} 
#endif
# 163 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline void brkpt(int c) 
# 164
{int volatile ___ = 1;(void)c;
# 166
::exit(___);}
#if 0
# 164
{ 
# 165
__brkpt(c); 
# 166
} 
#endif
# 168 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline void syncthreads() 
# 169
{int volatile ___ = 1;
# 171
::exit(___);}
#if 0
# 169
{ 
# 170
__syncthreads(); 
# 171
} 
#endif
# 173 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline void prof_trigger(int e) 
# 174
{int volatile ___ = 1;(void)e;
# 191
::exit(___);}
#if 0
# 174
{ 
# 175
if (e == 0) { __prof_trigger(0); } else { 
# 176
if (e == 1) { __prof_trigger(1); } else { 
# 177
if (e == 2) { __prof_trigger(2); } else { 
# 178
if (e == 3) { __prof_trigger(3); } else { 
# 179
if (e == 4) { __prof_trigger(4); } else { 
# 180
if (e == 5) { __prof_trigger(5); } else { 
# 181
if (e == 6) { __prof_trigger(6); } else { 
# 182
if (e == 7) { __prof_trigger(7); } else { 
# 183
if (e == 8) { __prof_trigger(8); } else { 
# 184
if (e == 9) { __prof_trigger(9); } else { 
# 185
if (e == 10) { __prof_trigger(10); } else { 
# 186
if (e == 11) { __prof_trigger(11); } else { 
# 187
if (e == 12) { __prof_trigger(12); } else { 
# 188
if (e == 13) { __prof_trigger(13); } else { 
# 189
if (e == 14) { __prof_trigger(14); } else { 
# 190
if (e == 15) { __prof_trigger(15); }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  
# 191
} 
#endif
# 193 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline void threadfence(bool global) 
# 194
{int volatile ___ = 1;(void)global;
# 196
::exit(___);}
#if 0
# 194
{ 
# 195
global ? __threadfence() : __threadfence_block(); 
# 196
} 
#endif
# 198 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline int float2int(float a, cudaRoundMode mode) 
# 199
{int volatile ___ = 1;(void)a;(void)mode;
# 204
::exit(___);}
#if 0
# 199
{ 
# 200
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
# 204
} 
#endif
# 206 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline unsigned float2uint(float a, cudaRoundMode mode) 
# 207
{int volatile ___ = 1;(void)a;(void)mode;
# 212
::exit(___);}
#if 0
# 207
{ 
# 208
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
# 212
} 
#endif
# 214 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline float int2float(int a, cudaRoundMode mode) 
# 215
{int volatile ___ = 1;(void)a;(void)mode;
# 220
::exit(___);}
#if 0
# 215
{ 
# 216
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
# 220
} 
#endif
# 222 "/usr/local/cuda-8.0/include/device_functions.hpp"
__attribute__((unused)) static inline float uint2float(unsigned a, cudaRoundMode mode) 
# 223
{int volatile ___ = 1;(void)a;(void)mode;
# 228
::exit(___);}
#if 0
# 223
{ 
# 224
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
# 228
} 
#endif
# 111 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 115
{ } 
#endif
# 117 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 117
{ } 
#endif
# 119 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 119
{ } 
#endif
# 121 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 121
{ } 
#endif
# 123 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 123
{ } 
#endif
# 125 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 125
{ } 
#endif
# 127 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 127
{ } 
#endif
# 129 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 129
{ } 
#endif
# 131 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 131
{ } 
#endif
# 133 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 133
{ } 
#endif
# 135 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 135
{ } 
#endif
# 137 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 139
{ } 
#endif
# 141 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 141
{ } 
#endif
# 143 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 143
{ } 
#endif
# 145 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 145
{ } 
#endif
# 147 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 147
{ } 
#endif
# 149 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 151
{ } 
#endif
# 164 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
extern "C" {
# 175
}
# 185
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 187
{ } 
#endif
# 189 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 189
{ } 
#endif
# 191 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 191
{ } 
#endif
# 193 "/usr/local/cuda-8.0/include/device_atomic_functions.h"
__attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 193
{ } 
#endif
# 80 "/usr/local/cuda-8.0/include/device_double_functions.h"
extern "C" {
# 1134
}
# 1143
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1145
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1147
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1149
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1153
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1155
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1161
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1163
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 85 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 86
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 91
::exit(___);}
#if 0
# 86
{ 
# 87
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 91
} 
#endif
# 93 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 99
} 
#endif
# 101 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 107
} 
#endif
# 109 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 115
} 
#endif
# 117 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 123
} 
#endif
# 125 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 131
} 
#endif
# 133 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 139
} 
#endif
# 141 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 147
} 
#endif
# 149 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 155
} 
#endif
# 157 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 163
} 
#endif
# 165 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 168
::exit(___);}
#if 0
# 166
{ 
# 167
return (double)a; 
# 168
} 
#endif
# 170 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 171
{int volatile ___ = 1;(void)a;(void)mode;
# 173
::exit(___);}
#if 0
# 171
{ 
# 172
return (double)a; 
# 173
} 
#endif
# 175 "/usr/local/cuda-8.0/include/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 176
{int volatile ___ = 1;(void)a;(void)mode;
# 178
::exit(___);}
#if 0
# 176
{ 
# 177
return (double)a; 
# 178
} 
#endif
# 94 "/usr/local/cuda-8.0/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 94
{ } 
#endif
# 102 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 102
{ } 
#endif
# 104 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 108 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 110 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda-8.0/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 308 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 308
{ } 
#endif
# 311 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 311
{ } 
#endif
# 314 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 314
{ } 
#endif
# 317 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 317
{ } 
#endif
# 320 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 320
{ } 
#endif
# 323 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 323
{ } 
#endif
# 326 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 326
{ } 
#endif
# 329 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 329
{ } 
#endif
# 332 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 332
{ } 
#endif
# 335 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 335
{ } 
#endif
# 338 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 338
{ } 
#endif
# 341 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 341
{ } 
#endif
# 344 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 344
{ } 
#endif
# 347 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 347
{ } 
#endif
# 350 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 350
{ } 
#endif
# 353 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 353
{ } 
#endif
# 356 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 356
{ } 
#endif
# 359 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 359
{ } 
#endif
# 362 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 362
{ } 
#endif
# 365 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 365
{ } 
#endif
# 368 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 368
{ } 
#endif
# 371 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 371
{ } 
#endif
# 374 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 374
{ } 
#endif
# 377 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 377
{ } 
#endif
# 380 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 380
{ } 
#endif
# 383 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 383
{ } 
#endif
# 386 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 386
{ } 
#endif
# 389 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 389
{ } 
#endif
# 392 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 392
{ } 
#endif
# 395 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 395
{ } 
#endif
# 398 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 398
{ } 
#endif
# 401 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 401
{ } 
#endif
# 404 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 404
{ } 
#endif
# 407 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 407
{ } 
#endif
# 410 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 410
{ } 
#endif
# 413 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 413
{ } 
#endif
# 416 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 416
{ } 
#endif
# 419 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 419
{ } 
#endif
# 422 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 422
{ } 
#endif
# 425 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 425
{ } 
#endif
# 428 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 428
{ } 
#endif
# 431 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 432
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 432
{ } 
#endif
# 435 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 436
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 436
{ } 
#endif
# 439 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 440
compare, unsigned long long 
# 441
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 441
{ } 
#endif
# 444 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 445
compare, unsigned long long 
# 446
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 446
{ } 
#endif
# 449 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 449
{ } 
#endif
# 452 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 452
{ } 
#endif
# 455 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 455
{ } 
#endif
# 458 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 458
{ } 
#endif
# 461 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 461
{ } 
#endif
# 464 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 464
{ } 
#endif
# 467 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 467
{ } 
#endif
# 470 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 470
{ } 
#endif
# 473 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 473
{ } 
#endif
# 476 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 476
{ } 
#endif
# 479 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 479
{ } 
#endif
# 482 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 482
{ } 
#endif
# 485 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 485
{ } 
#endif
# 488 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 488
{ } 
#endif
# 491 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 491
{ } 
#endif
# 494 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 494
{ } 
#endif
# 497 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 497
{ } 
#endif
# 500 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 500
{ } 
#endif
# 503 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 503
{ } 
#endif
# 506 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 506
{ } 
#endif
# 509 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 509
{ } 
#endif
# 512 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 512
{ } 
#endif
# 515 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 515
{ } 
#endif
# 518 "/usr/local/cuda-8.0/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 518
{ } 
#endif
# 79 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
extern "C" {
# 1466
}
# 1475
__attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1475
{ } 
#endif
# 1477 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1477
{ } 
#endif
# 1479 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1479
{ } 
#endif
# 1481 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1481
{ } 
#endif
# 1486 "/usr/local/cuda-8.0/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1486
{ } 
#endif
# 98 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 98
{ } 
#endif
# 100 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 103
{ } 
#endif
# 105 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 105
{ } 
#endif
# 107 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 115
{ } 
#endif
# 117 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 117
{ } 
#endif
# 119 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 119
{ } 
#endif
# 122 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 148 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 150 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 152 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 152
{ } 
#endif
# 154 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 156 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 158 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 160 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/usr/local/cuda-8.0/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 89 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 105 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 114
{ } 
#endif
# 115 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 117 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 120 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 120
{ } 
#endif
# 121 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 121
{ } 
#endif
# 125 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 138 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 138
{ } 
#endif
# 139 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 141 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 150
{ } 
#endif
# 151 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 153 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 157
{ } 
#endif
# 161 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 161
{ } 
#endif
# 162 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 164 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 174 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 174
{ } 
#endif
# 175 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 177 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 186 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 186
{ } 
#endif
# 187 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 189 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 192 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 192
{ } 
#endif
# 193 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 193
{ } 
#endif
# 197 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 197
{ } 
#endif
# 198 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 200 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 210 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 210
{ } 
#endif
# 211 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 213 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 222 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 222
{ } 
#endif
# 223 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 225 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 228 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 228
{ } 
#endif
# 229 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 229
{ } 
#endif
# 236 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 236
{ } 
#endif
# 237 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 237
{ } 
#endif
# 240 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 240
{ } 
#endif
# 241 "/usr/local/cuda-8.0/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 241
{ } 
#endif
# 91 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 94 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 100 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 101
{ } 
#endif
# 108 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/local/cuda-8.0/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 112
{ } 
#endif
# 100 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 101
__attribute((always_inline)) __attribute__((unused)) inline void surf1Dread(T *res, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 102
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
# 111
::exit(___);}
#if 0
# 102
{ 
# 111
} 
#endif
# 113 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 114
__attribute((always_inline)) __attribute__((unused)) inline T surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 115
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
# 123
::exit(___);}
#if 0
# 115
{ 
# 123
} 
#endif
# 125 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 126
__attribute((always_inline)) __attribute__((unused)) inline void surf1Dread(T *res, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 127
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
# 131
::exit(___);}
#if 0
# 127
{ 
# 131
} 
#endif
# 260 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 261
__attribute((always_inline)) __attribute__((unused)) inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 262
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 271
::exit(___);}
#if 0
# 262
{ 
# 271
} 
#endif
# 273 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 274
__attribute((always_inline)) __attribute__((unused)) inline T surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 275
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
# 283
::exit(___);}
#if 0
# 275
{ 
# 283
} 
#endif
# 285 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 286
__attribute((always_inline)) __attribute__((unused)) inline void surf2Dread(T *res, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 287
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
# 291
::exit(___);}
#if 0
# 287
{ 
# 291
} 
#endif
# 422 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 423
__attribute((always_inline)) __attribute__((unused)) inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 424
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 433
::exit(___);}
#if 0
# 424
{ 
# 433
} 
#endif
# 435 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 436
__attribute((always_inline)) __attribute__((unused)) inline T surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 437
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 445
::exit(___);}
#if 0
# 437
{ 
# 445
} 
#endif
# 447 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 448
__attribute((always_inline)) __attribute__((unused)) inline void surf3Dread(T *res, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 449
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 453
::exit(___);}
#if 0
# 449
{ 
# 453
} 
#endif
# 582 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 583
__attribute((always_inline)) __attribute__((unused)) inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 584
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 593
::exit(___);}
#if 0
# 584
{ 
# 593
} 
#endif
# 595 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 596
__attribute((always_inline)) __attribute__((unused)) inline T surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 597
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
# 605
::exit(___);}
#if 0
# 597
{ 
# 605
} 
#endif
# 607 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 608
__attribute((always_inline)) __attribute__((unused)) inline void surf1DLayeredread(T *res, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 609
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
# 613
::exit(___);}
#if 0
# 609
{ 
# 613
} 
#endif
# 768 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 769
__attribute((always_inline)) __attribute__((unused)) inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 770
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 779
::exit(___);}
#if 0
# 770
{ 
# 779
} 
#endif
# 781 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 782
__attribute((always_inline)) __attribute__((unused)) inline T surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 783
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 791
::exit(___);}
#if 0
# 783
{ 
# 791
} 
#endif
# 793 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 794
__attribute((always_inline)) __attribute__((unused)) inline void surf2DLayeredread(T *res, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 795
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 799
::exit(___);}
#if 0
# 795
{ 
# 799
} 
#endif
# 919 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 920
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 921
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 930
::exit(___);}
#if 0
# 921
{ 
# 930
} 
#endif
# 932 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 933
__attribute((always_inline)) __attribute__((unused)) inline T surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 934
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 942
::exit(___);}
#if 0
# 934
{ 
# 942
} 
#endif
# 944 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 945
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapread(T *res, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 946
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 950
::exit(___);}
#if 0
# 946
{ 
# 950
} 
#endif
# 1070 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1071
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1072
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 1081
::exit(___);}
#if 0
# 1072
{ 
# 1081
} 
#endif
# 1083 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1084
__attribute((always_inline)) __attribute__((unused)) inline T surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1085
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1093
::exit(___);}
#if 0
# 1085
{ 
# 1093
} 
#endif
# 1095 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1096
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapLayeredread(T *res, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1097
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 1101
::exit(___);}
#if 0
# 1097
{ 
# 1101
} 
#endif
# 1232 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1233
__attribute((always_inline)) __attribute__((unused)) inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1234
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
# 1254
::exit(___);}
#if 0
# 1234
{ 
# 1254
} 
#endif
# 1256 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1257
__attribute((always_inline)) __attribute__((unused)) inline void surf1Dwrite(T val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1258
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
# 1262
::exit(___);}
#if 0
# 1258
{ 
# 1262
} 
#endif
# 1377 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1378
__attribute((always_inline)) __attribute__((unused)) inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1379
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
# 1399
::exit(___);}
#if 0
# 1379
{ 
# 1399
} 
#endif
# 1401 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1402
__attribute((always_inline)) __attribute__((unused)) inline void surf2Dwrite(T val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1403
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
# 1407
::exit(___);}
#if 0
# 1403
{ 
# 1407
} 
#endif
# 1520 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1521
__attribute((always_inline)) __attribute__((unused)) inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1522
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
# 1542
::exit(___);}
#if 0
# 1522
{ 
# 1542
} 
#endif
# 1544 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1545
__attribute((always_inline)) __attribute__((unused)) inline void surf3Dwrite(T val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1546
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
# 1550
::exit(___);}
#if 0
# 1546
{ 
# 1550
} 
#endif
# 1666 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1667
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1668
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
# 1688
::exit(___);}
#if 0
# 1668
{ 
# 1688
} 
#endif
# 1690 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1691
__attribute((always_inline)) __attribute__((unused)) static inline void surf1DLayeredwrite(T val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1692
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
# 1696
::exit(___);}
#if 0
# 1692
{ 
# 1696
} 
#endif
# 1822 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1823
__attribute((always_inline)) __attribute__((unused)) inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1824
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
# 1844
::exit(___);}
#if 0
# 1824
{ 
# 1844
} 
#endif
# 1846 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1847
__attribute((always_inline)) __attribute__((unused)) inline void surf2DLayeredwrite(T val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1848
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
# 1852
::exit(___);}
#if 0
# 1848
{ 
# 1852
} 
#endif
# 1958 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1959
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1960
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
# 1980
::exit(___);}
#if 0
# 1960
{ 
# 1980
} 
#endif
# 1982 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 1983
__attribute((always_inline)) __attribute__((unused)) inline void surfCubemapwrite(T val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 1984
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
# 1988
::exit(___);}
#if 0
# 1984
{ 
# 1988
} 
#endif
# 2093 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 2094
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, int s, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2095
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
# 2115
::exit(___);}
#if 0
# 2095
{ 
# 2115
} 
#endif
# 2117 "/usr/local/cuda-8.0/include/surface_functions.h"
template< class T> 
# 2118
__attribute((always_inline)) __attribute__((unused)) static inline void surfCubemapLayeredwrite(T val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 2119
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
# 2123
::exit(___);}
#if 0
# 2119
{ 
# 2123
} 
#endif
# 70 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 71
tex1Dfetch(texture< T, 1, cudaReadModeElementType> , int) {int volatile ___ = 1;::exit(___);}
#if 0
# 71
{ } 
#endif
# 73 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> 
# 74
struct __nv_tex_rmnf_ret { }; 
# 76
template<> struct __nv_tex_rmnf_ret< char>  { typedef float type; }; 
# 77
template<> struct __nv_tex_rmnf_ret< signed char>  { typedef float type; }; 
# 78
template<> struct __nv_tex_rmnf_ret< unsigned char>  { typedef float type; }; 
# 79
template<> struct __nv_tex_rmnf_ret< short>  { typedef float type; }; 
# 80
template<> struct __nv_tex_rmnf_ret< unsigned short>  { typedef float type; }; 
# 81
template<> struct __nv_tex_rmnf_ret< char1>  { typedef float1 type; }; 
# 82
template<> struct __nv_tex_rmnf_ret< uchar1>  { typedef float1 type; }; 
# 83
template<> struct __nv_tex_rmnf_ret< short1>  { typedef float1 type; }; 
# 84
template<> struct __nv_tex_rmnf_ret< ushort1>  { typedef float1 type; }; 
# 85
template<> struct __nv_tex_rmnf_ret< char2>  { typedef float2 type; }; 
# 86
template<> struct __nv_tex_rmnf_ret< uchar2>  { typedef float2 type; }; 
# 87
template<> struct __nv_tex_rmnf_ret< short2>  { typedef float2 type; }; 
# 88
template<> struct __nv_tex_rmnf_ret< ushort2>  { typedef float2 type; }; 
# 89
template<> struct __nv_tex_rmnf_ret< char4>  { typedef float4 type; }; 
# 90
template<> struct __nv_tex_rmnf_ret< uchar4>  { typedef float4 type; }; 
# 91
template<> struct __nv_tex_rmnf_ret< short4>  { typedef float4 type; }; 
# 92
template<> struct __nv_tex_rmnf_ret< ushort4>  { typedef float4 type; }; 
# 94
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 95
tex1Dfetch(texture< T, 1, cudaReadModeNormalizedFloat> , int) {int volatile ___ = 1;::exit(___);}
#if 0
# 95
{ } 
#endif
# 215 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 216
tex1D(texture< T, 1, cudaReadModeElementType> , float) {int volatile ___ = 1;::exit(___);}
#if 0
# 216
{ } 
#endif
# 218 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 219
tex1D(texture< T, 1, cudaReadModeNormalizedFloat> , float) {int volatile ___ = 1;::exit(___);}
#if 0
# 219
{ } 
#endif
# 345 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 346
tex2D(texture< T, 2, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 346
{ } 
#endif
# 348 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 349
tex2D(texture< T, 2, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 349
{ } 
#endif
# 475 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 476
tex1DLayered(texture< T, 241, cudaReadModeElementType> , float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 476
{ } 
#endif
# 478 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 479
tex1DLayered(texture< T, 241, cudaReadModeNormalizedFloat> , float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 479
{ } 
#endif
# 603 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 604
tex2DLayered(texture< T, 242, cudaReadModeElementType> , float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 604
{ } 
#endif
# 606 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 607
tex2DLayered(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 607
{ } 
#endif
# 735 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 736
tex3D(texture< T, 3, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 736
{ } 
#endif
# 738 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 739
tex3D(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 739
{ } 
#endif
# 864 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 865
texCubemap(texture< T, 12, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 865
{ } 
#endif
# 867 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 868
texCubemap(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 868
{ } 
#endif
# 992 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 993
texCubemapLayered(texture< T, 252, cudaReadModeElementType> , float, float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 993
{ } 
#endif
# 995 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 996
texCubemapLayered(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 996
{ } 
#endif
# 1121 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> 
# 1122
struct __nv_tex2dgather_ret { }; 
# 1123
template<> struct __nv_tex2dgather_ret< char>  { typedef char4 type; }; 
# 1124
template<> struct __nv_tex2dgather_ret< signed char>  { typedef char4 type; }; 
# 1125
template<> struct __nv_tex2dgather_ret< char1>  { typedef char4 type; }; 
# 1126
template<> struct __nv_tex2dgather_ret< char2>  { typedef char4 type; }; 
# 1127
template<> struct __nv_tex2dgather_ret< char3>  { typedef char4 type; }; 
# 1128
template<> struct __nv_tex2dgather_ret< char4>  { typedef char4 type; }; 
# 1129
template<> struct __nv_tex2dgather_ret< unsigned char>  { typedef uchar4 type; }; 
# 1130
template<> struct __nv_tex2dgather_ret< uchar1>  { typedef uchar4 type; }; 
# 1131
template<> struct __nv_tex2dgather_ret< uchar2>  { typedef uchar4 type; }; 
# 1132
template<> struct __nv_tex2dgather_ret< uchar3>  { typedef uchar4 type; }; 
# 1133
template<> struct __nv_tex2dgather_ret< uchar4>  { typedef uchar4 type; }; 
# 1135
template<> struct __nv_tex2dgather_ret< short>  { typedef short4 type; }; 
# 1136
template<> struct __nv_tex2dgather_ret< short1>  { typedef short4 type; }; 
# 1137
template<> struct __nv_tex2dgather_ret< short2>  { typedef short4 type; }; 
# 1138
template<> struct __nv_tex2dgather_ret< short3>  { typedef short4 type; }; 
# 1139
template<> struct __nv_tex2dgather_ret< short4>  { typedef short4 type; }; 
# 1140
template<> struct __nv_tex2dgather_ret< unsigned short>  { typedef ushort4 type; }; 
# 1141
template<> struct __nv_tex2dgather_ret< ushort1>  { typedef ushort4 type; }; 
# 1142
template<> struct __nv_tex2dgather_ret< ushort2>  { typedef ushort4 type; }; 
# 1143
template<> struct __nv_tex2dgather_ret< ushort3>  { typedef ushort4 type; }; 
# 1144
template<> struct __nv_tex2dgather_ret< ushort4>  { typedef ushort4 type; }; 
# 1146
template<> struct __nv_tex2dgather_ret< int>  { typedef int4 type; }; 
# 1147
template<> struct __nv_tex2dgather_ret< int1>  { typedef int4 type; }; 
# 1148
template<> struct __nv_tex2dgather_ret< int2>  { typedef int4 type; }; 
# 1149
template<> struct __nv_tex2dgather_ret< int3>  { typedef int4 type; }; 
# 1150
template<> struct __nv_tex2dgather_ret< int4>  { typedef int4 type; }; 
# 1151
template<> struct __nv_tex2dgather_ret< unsigned>  { typedef uint4 type; }; 
# 1152
template<> struct __nv_tex2dgather_ret< uint1>  { typedef uint4 type; }; 
# 1153
template<> struct __nv_tex2dgather_ret< uint2>  { typedef uint4 type; }; 
# 1154
template<> struct __nv_tex2dgather_ret< uint3>  { typedef uint4 type; }; 
# 1155
template<> struct __nv_tex2dgather_ret< uint4>  { typedef uint4 type; }; 
# 1157
template<> struct __nv_tex2dgather_ret< float>  { typedef float4 type; }; 
# 1158
template<> struct __nv_tex2dgather_ret< float1>  { typedef float4 type; }; 
# 1159
template<> struct __nv_tex2dgather_ret< float2>  { typedef float4 type; }; 
# 1160
template<> struct __nv_tex2dgather_ret< float3>  { typedef float4 type; }; 
# 1161
template<> struct __nv_tex2dgather_ret< float4>  { typedef float4 type; }; 
# 1163
template< class T> __attribute__((unused)) static typename __nv_tex2dgather_ret< T> ::type 
# 1164
tex2Dgather(texture< T, 2, cudaReadModeElementType> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}
#if 0
# 1164
{ } 
#endif
# 1166 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static float4 
# 1167
tex2Dgather(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, int = 0) {int volatile ___ = 1;::exit(___);}
#if 0
# 1167
{ } 
#endif
# 1232 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 1233
tex1DLod(texture< T, 1, cudaReadModeElementType> , float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1233
{ } 
#endif
# 1235 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 1236
tex1DLod(texture< T, 1, cudaReadModeNormalizedFloat> , float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1236
{ } 
#endif
# 1360 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 1361
tex2DLod(texture< T, 2, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1361
{ } 
#endif
# 1363 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 1364
tex2DLod(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1364
{ } 
#endif
# 1484 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 1485
tex1DLayeredLod(texture< T, 241, cudaReadModeElementType> , float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1485
{ } 
#endif
# 1487 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 1488
tex1DLayeredLod(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1488
{ } 
#endif
# 1612 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 1613
tex2DLayeredLod(texture< T, 242, cudaReadModeElementType> , float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1613
{ } 
#endif
# 1615 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 1616
tex2DLayeredLod(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1616
{ } 
#endif
# 1740 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 1741
tex3DLod(texture< T, 3, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1741
{ } 
#endif
# 1743 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 1744
tex3DLod(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1744
{ } 
#endif
# 1868 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 1869
texCubemapLod(texture< T, 12, cudaReadModeElementType> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1869
{ } 
#endif
# 1871 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 1872
texCubemapLod(texture< T, 12, cudaReadModeNormalizedFloat> , float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1872
{ } 
#endif
# 1996 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 1997
texCubemapLayeredLod(texture< T, 252, cudaReadModeElementType> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1997
{ } 
#endif
# 1999 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 2000
texCubemapLayeredLod(texture< T, 252, cudaReadModeNormalizedFloat> , float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 2000
{ } 
#endif
# 2124 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 2125
tex1DGrad(texture< T, 1, cudaReadModeElementType> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 2125
{ } 
#endif
# 2127 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 2128
tex1DGrad(texture< T, 1, cudaReadModeNormalizedFloat> , float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 2128
{ } 
#endif
# 2252 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 2253
tex2DGrad(texture< T, 2, cudaReadModeElementType> , float, float, float2, float2) {int volatile ___ = 1;::exit(___);}
#if 0
# 2253
{ } 
#endif
# 2255 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 2256
tex2DGrad(texture< T, 2, cudaReadModeNormalizedFloat> , float, float, float2, float2) {int volatile ___ = 1;::exit(___);}
#if 0
# 2256
{ } 
#endif
# 2380 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 2381
tex1DLayeredGrad(texture< T, 241, cudaReadModeElementType> , float, int, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 2381
{ } 
#endif
# 2383 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 2384
tex1DLayeredGrad(texture< T, 241, cudaReadModeNormalizedFloat> , float, int, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 2384
{ } 
#endif
# 2509 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 2510
tex2DLayeredGrad(texture< T, 242, cudaReadModeElementType> , float, float, int, float2, float2) {int volatile ___ = 1;::exit(___);}
#if 0
# 2510
{ } 
#endif
# 2512 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 2513
tex2DLayeredGrad(texture< T, 242, cudaReadModeNormalizedFloat> , float, float, int, float2, float2) {int volatile ___ = 1;::exit(___);}
#if 0
# 2513
{ } 
#endif
# 2637 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static T 
# 2638
tex3DGrad(texture< T, 3, cudaReadModeElementType> , float, float, float, float4, float4) {int volatile ___ = 1;::exit(___);}
#if 0
# 2638
{ } 
#endif
# 2640 "/usr/local/cuda-8.0/include/texture_fetch_functions.h"
template< class T> __attribute__((unused)) static typename __nv_tex_rmnf_ret< T> ::type 
# 2641
tex3DGrad(texture< T, 3, cudaReadModeNormalizedFloat> , float, float, float, float4, float4) {int volatile ___ = 1;::exit(___);}
#if 0
# 2641
{ } 
#endif
# 67 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 68
tex1Dfetch(T *, cudaTextureObject_t, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 68
{ } 
#endif
# 121 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 122
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 123
{int volatile ___ = 1;(void)texObject;(void)x;
# 127
::exit(___);}
#if 0
# 123
{ 
# 124
T ret; 
# 125
tex1Dfetch(&ret, texObject, x); 
# 126
return ret; 
# 127
} 
#endif
# 135 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 136
tex1D(T *, cudaTextureObject_t, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 136
{ } 
#endif
# 190 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 191
tex1D(cudaTextureObject_t texObject, float x) 
# 192
{int volatile ___ = 1;(void)texObject;(void)x;
# 196
::exit(___);}
#if 0
# 192
{ 
# 193
T ret; 
# 194
tex1D(&ret, texObject, x); 
# 195
return ret; 
# 196
} 
#endif
# 205 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 206
tex2D(T *, cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 206
{ } 
#endif
# 258 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 259
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 260
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 264
::exit(___);}
#if 0
# 260
{ 
# 261
T ret; 
# 262
tex2D(&ret, texObject, x, y); 
# 263
return ret; 
# 264
} 
#endif
# 272 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 273
tex3D(T *, cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 273
{ } 
#endif
# 325 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 326
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 327
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 331
::exit(___);}
#if 0
# 327
{ 
# 328
T ret; 
# 329
tex3D(&ret, texObject, x, y, z); 
# 330
return ret; 
# 331
} 
#endif
# 340 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 341
tex1DLayered(T *, cudaTextureObject_t, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 341
{ } 
#endif
# 393 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 394
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 395
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 399
::exit(___);}
#if 0
# 395
{ 
# 396
T ret; 
# 397
tex1DLayered(&ret, texObject, x, layer); 
# 398
return ret; 
# 399
} 
#endif
# 408 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 409
tex2DLayered(T *, cudaTextureObject_t, float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 409
{ } 
#endif
# 461 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 462
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 463
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 467
::exit(___);}
#if 0
# 463
{ 
# 464
T ret; 
# 465
tex2DLayered(&ret, texObject, x, y, layer); 
# 466
return ret; 
# 467
} 
#endif
# 476 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 477
texCubemap(T *, cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 477
{ } 
#endif
# 529 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 530
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 531
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 535
::exit(___);}
#if 0
# 531
{ 
# 532
T ret; 
# 533
texCubemap(&ret, texObject, x, y, z); 
# 534
return ret; 
# 535
} 
#endif
# 544 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 545
texCubemapLayered(T *, cudaTextureObject_t, float, float, float, int) {int volatile ___ = 1;::exit(___);}
#if 0
# 545
{ } 
#endif
# 598 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 599
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 600
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 604
::exit(___);}
#if 0
# 600
{ 
# 601
T ret; 
# 602
texCubemapLayered(&ret, texObject, x, y, z, layer); 
# 603
return ret; 
# 604
} 
#endif
# 613 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 614
tex2Dgather(T *, cudaTextureObject_t, float, float, int = 0) {int volatile ___ = 1;::exit(___);}
#if 0
# 614
{ } 
#endif
# 660 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 661
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 662
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 666
::exit(___);}
#if 0
# 662
{ 
# 663
T ret; 
# 664
tex2Dgather(&ret, to, x, y, comp); 
# 665
return ret; 
# 666
} 
#endif
# 675 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 676
tex1DLod(T *, cudaTextureObject_t, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 676
{ } 
#endif
# 728 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 729
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 730
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 734
::exit(___);}
#if 0
# 730
{ 
# 731
T ret; 
# 732
tex1DLod(&ret, texObject, x, level); 
# 733
return ret; 
# 734
} 
#endif
# 743 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 744
tex2DLod(T *, cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 744
{ } 
#endif
# 797 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 798
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 799
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 803
::exit(___);}
#if 0
# 799
{ 
# 800
T ret; 
# 801
tex2DLod(&ret, texObject, x, y, level); 
# 802
return ret; 
# 803
} 
#endif
# 812 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 813
tex3DLod(T *, cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 813
{ } 
#endif
# 865 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 866
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 867
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 871
::exit(___);}
#if 0
# 867
{ 
# 868
T ret; 
# 869
tex3DLod(&ret, texObject, x, y, z, level); 
# 870
return ret; 
# 871
} 
#endif
# 879 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 880
tex1DLayeredLod(T *, cudaTextureObject_t, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 880
{ } 
#endif
# 932 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 933
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 934
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 938
::exit(___);}
#if 0
# 934
{ 
# 935
T ret; 
# 936
tex1DLayeredLod(&ret, texObject, x, layer, level); 
# 937
return ret; 
# 938
} 
#endif
# 947 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 948
tex2DLayeredLod(T *, cudaTextureObject_t, float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 948
{ } 
#endif
# 1000 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 1001
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 1002
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 1006
::exit(___);}
#if 0
# 1002
{ 
# 1003
T ret; 
# 1004
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
# 1005
return ret; 
# 1006
} 
#endif
# 1014 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 1015
texCubemapLod(T *, cudaTextureObject_t, float, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1015
{ } 
#endif
# 1067 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 1068
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 1069
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 1073
::exit(___);}
#if 0
# 1069
{ 
# 1070
T ret; 
# 1071
texCubemapLod(&ret, texObject, x, y, z, level); 
# 1072
return ret; 
# 1073
} 
#endif
# 1081 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 1082
texCubemapLayeredLod(T *, cudaTextureObject_t, float, float, float, int, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1082
{ } 
#endif
# 1134 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 1135
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 1136
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 1140
::exit(___);}
#if 0
# 1136
{ 
# 1137
T ret; 
# 1138
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
# 1139
return ret; 
# 1140
} 
#endif
# 1148 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 1149
tex1DGrad(T *, cudaTextureObject_t, float, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1149
{ } 
#endif
# 1202 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 1203
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 1204
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 1208
::exit(___);}
#if 0
# 1204
{ 
# 1205
T ret; 
# 1206
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
# 1207
return ret; 
# 1208
} 
#endif
# 1216 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 1217
tex2DGrad(T *, cudaTextureObject_t, float, float, float2, float2) {int volatile ___ = 1;::exit(___);}
#if 0
# 1217
{ } 
#endif
# 1269 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 1270
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 1271
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 1275
::exit(___);}
#if 0
# 1271
{ 
# 1272
T ret; 
# 1273
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
# 1274
return ret; 
# 1275
} 
#endif
# 1283 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 1284
tex3DGrad(T *, cudaTextureObject_t, float, float, float, float4, float4) {int volatile ___ = 1;::exit(___);}
#if 0
# 1284
{ } 
#endif
# 1336 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 1337
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 1338
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 1342
::exit(___);}
#if 0
# 1338
{ 
# 1339
T ret; 
# 1340
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 1341
return ret; 
# 1342
} 
#endif
# 1350 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 1351
tex1DLayeredGrad(T *, cudaTextureObject_t, float, int, float, float) {int volatile ___ = 1;::exit(___);}
#if 0
# 1351
{ } 
#endif
# 1404 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 1405
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 1406
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 1410
::exit(___);}
#if 0
# 1406
{ 
# 1407
T ret; 
# 1408
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
# 1409
return ret; 
# 1410
} 
#endif
# 1418 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 1419
tex2DLayeredGrad(T *, cudaTextureObject_t, float, float, int, float2, float2) {int volatile ___ = 1;::exit(___);}
#if 0
# 1419
{ } 
#endif
# 1471 "/usr/local/cuda-8.0/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 1472
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 1473
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 1477
::exit(___);}
#if 0
# 1473
{ 
# 1474
T ret; 
# 1475
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
# 1476
return ret; 
# 1477
} 
#endif
# 68 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 69
surf1Dread(T *, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 69
{ } 
#endif
# 111 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 112
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 113
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 119
::exit(___);}
#if 0
# 113
{ 
# 119
} 
#endif
# 128 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 129
surf2Dread(T *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 129
{ } 
#endif
# 172 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 173
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 174
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 180
::exit(___);}
#if 0
# 174
{ 
# 180
} 
#endif
# 189 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 190
surf3Dread(T *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 190
{ } 
#endif
# 231 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 232
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 233
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 239
::exit(___);}
#if 0
# 233
{ 
# 239
} 
#endif
# 247 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 248
surf1DLayeredread(T *, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 248
{ } 
#endif
# 290 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 291
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 292
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 298
::exit(___);}
#if 0
# 292
{ 
# 298
} 
#endif
# 306 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 307
surf2DLayeredread(T *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 307
{ } 
#endif
# 348 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 349
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 350
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 356
::exit(___);}
#if 0
# 350
{ 
# 356
} 
#endif
# 364 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 365
surfCubemapread(T *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 365
{ } 
#endif
# 406 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 407
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 408
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 414
::exit(___);}
#if 0
# 408
{ 
# 414
} 
#endif
# 422 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 423
surfCubemapLayeredread(T *, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 423
{ } 
#endif
# 464 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 465
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 466
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 472
::exit(___);}
#if 0
# 466
{ 
# 472
} 
#endif
# 480 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 481
surf1Dwrite(T, cudaSurfaceObject_t, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 481
{ } 
#endif
# 528 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 529
surf2Dwrite(T, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 529
{ } 
#endif
# 576 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 577
surf3Dwrite(T, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 577
{ } 
#endif
# 626 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 627
surf1DLayeredwrite(T, cudaSurfaceObject_t, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 627
{ } 
#endif
# 675 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 676
surf2DLayeredwrite(T, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 676
{ } 
#endif
# 723 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 724
surfCubemapwrite(T, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 724
{ } 
#endif
# 771 "/usr/local/cuda-8.0/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static void 
# 772
surfCubemapLayeredwrite(T, cudaSurfaceObject_t, int, int, int, cudaSurfaceBoundaryMode = cudaBoundaryModeTrap) {int volatile ___ = 1;::exit(___);}
#if 0
# 772
{ } 
#endif
# 68 "/usr/local/cuda-8.0/include/device_launch_parameters.h"
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 183 "/usr/local/cuda-8.0/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 184
cudaLaunchKernel(const T *
# 185
func, dim3 
# 186
gridDim, dim3 
# 187
blockDim, void **
# 188
args, ::size_t 
# 189
sharedMem = 0, cudaStream_t 
# 190
stream = 0) 
# 192
{ 
# 193
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 194
} 
# 221
template< class T> static inline cudaError_t 
# 222
cudaSetupArgument(T 
# 223
arg, ::size_t 
# 224
offset) 
# 226
{ 
# 227
return ::cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
# 228
} 
# 260
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 261
event, unsigned 
# 262
flags) 
# 264
{ 
# 265
return ::cudaEventCreateWithFlags(event, flags); 
# 266
} 
# 323
static inline cudaError_t cudaMallocHost(void **
# 324
ptr, ::size_t 
# 325
size, unsigned 
# 326
flags) 
# 328
{ 
# 329
return ::cudaHostAlloc(ptr, size, flags); 
# 330
} 
# 332
template< class T> static inline cudaError_t 
# 333
cudaHostAlloc(T **
# 334
ptr, ::size_t 
# 335
size, unsigned 
# 336
flags) 
# 338
{ 
# 339
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 340
} 
# 342
template< class T> static inline cudaError_t 
# 343
cudaHostGetDevicePointer(T **
# 344
pDevice, void *
# 345
pHost, unsigned 
# 346
flags) 
# 348
{ 
# 349
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 350
} 
# 449
template< class T> static inline cudaError_t 
# 450
cudaMallocManaged(T **
# 451
devPtr, ::size_t 
# 452
size, unsigned 
# 453
flags = 1) 
# 455
{ 
# 456
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 457
} 
# 528
template< class T> static inline cudaError_t 
# 529
cudaStreamAttachMemAsync(cudaStream_t 
# 530
stream, T *
# 531
devPtr, ::size_t 
# 532
length = 0, unsigned 
# 533
flags = 4) 
# 535
{ 
# 536
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 537
} 
# 539
template< class T> inline cudaError_t 
# 540
cudaMalloc(T **
# 541
devPtr, ::size_t 
# 542
size) 
# 544
{ 
# 545
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 546
} 
# 548
template< class T> static inline cudaError_t 
# 549
cudaMallocHost(T **
# 550
ptr, ::size_t 
# 551
size, unsigned 
# 552
flags = 0) 
# 554
{ 
# 555
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 556
} 
# 558
template< class T> static inline cudaError_t 
# 559
cudaMallocPitch(T **
# 560
devPtr, ::size_t *
# 561
pitch, ::size_t 
# 562
width, ::size_t 
# 563
height) 
# 565
{ 
# 566
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 567
} 
# 604
template< class T> static inline cudaError_t 
# 605
cudaMemcpyToSymbol(const T &
# 606
symbol, const void *
# 607
src, ::size_t 
# 608
count, ::size_t 
# 609
offset = 0, cudaMemcpyKind 
# 610
kind = cudaMemcpyHostToDevice) 
# 612
{ 
# 613
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 614
} 
# 656
template< class T> static inline cudaError_t 
# 657
cudaMemcpyToSymbolAsync(const T &
# 658
symbol, const void *
# 659
src, ::size_t 
# 660
count, ::size_t 
# 661
offset = 0, cudaMemcpyKind 
# 662
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 663
stream = 0) 
# 665
{ 
# 666
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 667
} 
# 702
template< class T> static inline cudaError_t 
# 703
cudaMemcpyFromSymbol(void *
# 704
dst, const T &
# 705
symbol, ::size_t 
# 706
count, ::size_t 
# 707
offset = 0, cudaMemcpyKind 
# 708
kind = cudaMemcpyDeviceToHost) 
# 710
{ 
# 711
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 712
} 
# 754
template< class T> static inline cudaError_t 
# 755
cudaMemcpyFromSymbolAsync(void *
# 756
dst, const T &
# 757
symbol, ::size_t 
# 758
count, ::size_t 
# 759
offset = 0, cudaMemcpyKind 
# 760
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 761
stream = 0) 
# 763
{ 
# 764
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 765
} 
# 787
template< class T> static inline cudaError_t 
# 788
cudaGetSymbolAddress(void **
# 789
devPtr, const T &
# 790
symbol) 
# 792
{ 
# 793
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 794
} 
# 816
template< class T> static inline cudaError_t 
# 817
cudaGetSymbolSize(::size_t *
# 818
size, const T &
# 819
symbol) 
# 821
{ 
# 822
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 823
} 
# 859
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 860
cudaBindTexture(::size_t *
# 861
offset, const texture< T, dim, readMode>  &
# 862
tex, const void *
# 863
devPtr, const cudaChannelFormatDesc &
# 864
desc, ::size_t 
# 865
size = ((2147483647) * 2U) + 1U) 
# 867
{ 
# 868
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
# 869
} 
# 904
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 905
cudaBindTexture(::size_t *
# 906
offset, const texture< T, dim, readMode>  &
# 907
tex, const void *
# 908
devPtr, ::size_t 
# 909
size = ((2147483647) * 2U) + 1U) 
# 911
{ 
# 912
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
# 913
} 
# 960
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 961
cudaBindTexture2D(::size_t *
# 962
offset, const texture< T, dim, readMode>  &
# 963
tex, const void *
# 964
devPtr, const cudaChannelFormatDesc &
# 965
desc, ::size_t 
# 966
width, ::size_t 
# 967
height, ::size_t 
# 968
pitch) 
# 970
{ 
# 971
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
# 972
} 
# 1018
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1019
cudaBindTexture2D(::size_t *
# 1020
offset, const texture< T, dim, readMode>  &
# 1021
tex, const void *
# 1022
devPtr, ::size_t 
# 1023
width, ::size_t 
# 1024
height, ::size_t 
# 1025
pitch) 
# 1027
{ 
# 1028
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
# 1029
} 
# 1060
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1061
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1062
tex, cudaArray_const_t 
# 1063
array, const cudaChannelFormatDesc &
# 1064
desc) 
# 1066
{ 
# 1067
return ::cudaBindTextureToArray(&tex, array, &desc); 
# 1068
} 
# 1098
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1099
cudaBindTextureToArray(const texture< T, dim, readMode>  &
# 1100
tex, cudaArray_const_t 
# 1101
array) 
# 1103
{ 
# 1104
cudaChannelFormatDesc desc; 
# 1105
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1107
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
# 1108
} 
# 1139
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1140
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1141
tex, cudaMipmappedArray_const_t 
# 1142
mipmappedArray, const cudaChannelFormatDesc &
# 1143
desc) 
# 1145
{ 
# 1146
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
# 1147
} 
# 1177
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1178
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
# 1179
tex, cudaMipmappedArray_const_t 
# 1180
mipmappedArray) 
# 1182
{ 
# 1183
cudaChannelFormatDesc desc; 
# 1184
cudaArray_t levelArray; 
# 1185
cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
# 1187
if (err != (cudaSuccess)) { 
# 1188
return err; 
# 1189
}  
# 1190
err = ::cudaGetChannelDesc(&desc, levelArray); 
# 1192
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
# 1193
} 
# 1216
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1217
cudaUnbindTexture(const texture< T, dim, readMode>  &
# 1218
tex) 
# 1220
{ 
# 1221
return ::cudaUnbindTexture(&tex); 
# 1222
} 
# 1250
template< class T, int dim, cudaTextureReadMode readMode> static inline cudaError_t 
# 1251
cudaGetTextureAlignmentOffset(::size_t *
# 1252
offset, const texture< T, dim, readMode>  &
# 1253
tex) 
# 1255
{ 
# 1256
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
# 1257
} 
# 1302
template< class T> static inline cudaError_t 
# 1303
cudaFuncSetCacheConfig(T *
# 1304
func, cudaFuncCache 
# 1305
cacheConfig) 
# 1307
{ 
# 1308
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1309
} 
# 1311
template< class T> static inline cudaError_t 
# 1312
cudaFuncSetSharedMemConfig(T *
# 1313
func, cudaSharedMemConfig 
# 1314
config) 
# 1316
{ 
# 1317
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1318
} 
# 1347
template< class T> inline cudaError_t 
# 1348
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1349
numBlocks, T 
# 1350
func, int 
# 1351
blockSize, ::size_t 
# 1352
dynamicSMemSize) 
# 1353
{ 
# 1354
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1355
} 
# 1398
template< class T> inline cudaError_t 
# 1399
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1400
numBlocks, T 
# 1401
func, int 
# 1402
blockSize, ::size_t 
# 1403
dynamicSMemSize, unsigned 
# 1404
flags) 
# 1405
{ 
# 1406
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1407
} 
# 1412
class __cudaOccupancyB2DHelper { 
# 1413
::size_t n; 
# 1415
public: __cudaOccupancyB2DHelper(::size_t n_) : n(n_) { } 
# 1416
::size_t operator()(int) 
# 1417
{ 
# 1418
return n; 
# 1419
} 
# 1420
}; 
# 1467
template< class UnaryFunction, class T> static inline cudaError_t 
# 1468
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1469
minGridSize, int *
# 1470
blockSize, T 
# 1471
func, UnaryFunction 
# 1472
blockSizeToDynamicSMemSize, int 
# 1473
blockSizeLimit = 0, unsigned 
# 1474
flags = 0) 
# 1475
{ 
# 1476
cudaError_t status; 
# 1479
int device; 
# 1480
cudaFuncAttributes attr; 
# 1483
int maxThreadsPerMultiProcessor; 
# 1484
int warpSize; 
# 1485
int devMaxThreadsPerBlock; 
# 1486
int multiProcessorCount; 
# 1487
int funcMaxThreadsPerBlock; 
# 1488
int occupancyLimit; 
# 1489
int granularity; 
# 1492
int maxBlockSize = 0; 
# 1493
int numBlocks = 0; 
# 1494
int maxOccupancy = 0; 
# 1497
int blockSizeToTryAligned; 
# 1498
int blockSizeToTry; 
# 1499
int blockSizeLimitAligned; 
# 1500
int occupancyInBlocks; 
# 1501
int occupancyInThreads; 
# 1502
::size_t dynamicSMemSize; 
# 1508
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 1509
return cudaErrorInvalidValue; 
# 1510
}  
# 1516
status = ::cudaGetDevice(&device); 
# 1517
if (status != (cudaSuccess)) { 
# 1518
return status; 
# 1519
}  
# 1521
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 1525
if (status != (cudaSuccess)) { 
# 1526
return status; 
# 1527
}  
# 1529
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 1533
if (status != (cudaSuccess)) { 
# 1534
return status; 
# 1535
}  
# 1537
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 1541
if (status != (cudaSuccess)) { 
# 1542
return status; 
# 1543
}  
# 1545
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 1549
if (status != (cudaSuccess)) { 
# 1550
return status; 
# 1551
}  
# 1553
status = cudaFuncGetAttributes(&attr, func); 
# 1554
if (status != (cudaSuccess)) { 
# 1555
return status; 
# 1556
}  
# 1558
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 1564
occupancyLimit = maxThreadsPerMultiProcessor; 
# 1565
granularity = warpSize; 
# 1567
if (blockSizeLimit == 0) { 
# 1568
blockSizeLimit = devMaxThreadsPerBlock; 
# 1569
}  
# 1571
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 1572
blockSizeLimit = devMaxThreadsPerBlock; 
# 1573
}  
# 1575
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 1576
blockSizeLimit = funcMaxThreadsPerBlock; 
# 1577
}  
# 1579
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 1581
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 1585
if (blockSizeLimit < blockSizeToTryAligned) { 
# 1586
blockSizeToTry = blockSizeLimit; 
# 1587
} else { 
# 1588
blockSizeToTry = blockSizeToTryAligned; 
# 1589
}  
# 1591
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 1593
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 1600
if (status != (cudaSuccess)) { 
# 1601
return status; 
# 1602
}  
# 1604
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 1606
if (occupancyInThreads > maxOccupancy) { 
# 1607
maxBlockSize = blockSizeToTry; 
# 1608
numBlocks = occupancyInBlocks; 
# 1609
maxOccupancy = occupancyInThreads; 
# 1610
}  
# 1614
if (occupancyLimit == maxOccupancy) { 
# 1615
break; 
# 1616
}  
# 1617
}  
# 1625
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 1626
(*blockSize) = maxBlockSize; 
# 1628
return status; 
# 1629
} 
# 1662
template< class UnaryFunction, class T> static inline cudaError_t 
# 1663
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1664
minGridSize, int *
# 1665
blockSize, T 
# 1666
func, UnaryFunction 
# 1667
blockSizeToDynamicSMemSize, int 
# 1668
blockSizeLimit = 0) 
# 1669
{ 
# 1670
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 1671
} 
# 1707
template< class T> static inline cudaError_t 
# 1708
cudaOccupancyMaxPotentialBlockSize(int *
# 1709
minGridSize, int *
# 1710
blockSize, T 
# 1711
func, ::size_t 
# 1712
dynamicSMemSize = 0, int 
# 1713
blockSizeLimit = 0) 
# 1714
{ 
# 1715
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 1716
} 
# 1766
template< class T> static inline cudaError_t 
# 1767
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 1768
minGridSize, int *
# 1769
blockSize, T 
# 1770
func, ::size_t 
# 1771
dynamicSMemSize = 0, int 
# 1772
blockSizeLimit = 0, unsigned 
# 1773
flags = 0) 
# 1774
{ 
# 1775
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 1776
} 
# 1814
template< class T> static inline cudaError_t 
# 1815
cudaLaunch(T *
# 1816
func) 
# 1818
{ 
# 1819
return ::cudaLaunch((const void *)func); 
# 1820
} 
# 1851
template< class T> inline cudaError_t 
# 1852
cudaFuncGetAttributes(cudaFuncAttributes *
# 1853
attr, T *
# 1854
entry) 
# 1856
{ 
# 1857
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 1858
} 
# 1880
template< class T, int dim> static inline cudaError_t 
# 1881
cudaBindSurfaceToArray(const surface< T, dim>  &
# 1882
surf, cudaArray_const_t 
# 1883
array, const cudaChannelFormatDesc &
# 1884
desc) 
# 1886
{ 
# 1887
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
# 1888
} 
# 1909
template< class T, int dim> static inline cudaError_t 
# 1910
cudaBindSurfaceToArray(const surface< T, dim>  &
# 1911
surf, cudaArray_const_t 
# 1912
array) 
# 1914
{ 
# 1915
cudaChannelFormatDesc desc; 
# 1916
cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
# 1918
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
# 1919
} 
# 1930
#pragma GCC diagnostic pop
# 50 "/usr/include/c++/5/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 70
template< class , class > struct uses_allocator; 
# 76
}
# 42 "/usr/include/c++/5/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT> struct char_traits; 
# 55
template<> struct char_traits< char> ; 
# 58
template<> struct char_traits< wchar_t> ; 
# 63
template<> struct char_traits< char16_t> ; 
# 64
template<> struct char_traits< char32_t> ; 
# 67
inline namespace __cxx11 { 
# 69
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 70
_Alloc = allocator< _CharT> > class basic_string; 
# 74
typedef basic_string< char>  string; 
# 78
typedef basic_string< wchar_t>  wstring; 
# 84
typedef basic_string< char16_t>  u16string; 
# 87
typedef basic_string< char32_t>  u32string; 
# 90
}
# 95
}
# 44 "/usr/include/stdio.h" 3
struct _IO_FILE; 
# 48
typedef _IO_FILE FILE; 
# 64
typedef _IO_FILE __FILE; 
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 357 "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h" 3
typedef unsigned wint_t; 
# 94 "/usr/include/wchar.h" 3
typedef 
# 83
struct { 
# 84
int __count; 
# 86
union { 
# 88
unsigned __wch; 
# 92
char __wchb[4]; 
# 93
} __value; 
# 94
} __mbstate_t; 
# 106
typedef __mbstate_t mbstate_t; 
# 132
extern "C" {
# 137
struct tm; 
# 147
extern __attribute((gnu_inline)) inline wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 149
 __attribute((__nonnull__(1, 2))); 
# 152
extern __attribute((gnu_inline)) inline wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw()
# 154
 __attribute((__nonnull__(1, 2))); 
# 157
extern __attribute((gnu_inline)) inline wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw()
# 159
 __attribute((__nonnull__(1, 2))); 
# 161
extern __attribute((gnu_inline)) inline wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw()
# 163
 __attribute((__nonnull__(1, 2))); 
# 166
extern int wcscmp(const wchar_t * __s1, const wchar_t * __s2) throw()
# 167
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 169
extern int wcsncmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw()
# 170
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 175
extern int wcscasecmp(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 178
extern int wcsncasecmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw(); 
# 185
extern int wcscasecmp_l(const wchar_t * __s1, const wchar_t * __s2, __locale_t __loc) throw(); 
# 188
extern int wcsncasecmp_l(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n, __locale_t __loc) throw(); 
# 195
extern int wcscoll(const wchar_t * __s1, const wchar_t * __s2) throw(); 
# 199
extern ::size_t wcsxfrm(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw(); 
# 209
extern int wcscoll_l(const wchar_t * __s1, const wchar_t * __s2, __locale_t __loc) throw(); 
# 215
extern ::size_t wcsxfrm_l(wchar_t * __s1, const wchar_t * __s2, ::size_t __n, __locale_t __loc) throw(); 
# 219
extern wchar_t *wcsdup(const wchar_t * __s) throw() __attribute((__malloc__)); 
# 225
extern "C++" wchar_t *wcschr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 226
 __attribute((__pure__)); 
# 227
extern "C++" const wchar_t *wcschr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcschr")
# 228
 __attribute((__pure__)); 
# 235
extern "C++" wchar_t *wcsrchr(wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 236
 __attribute((__pure__)); 
# 237
extern "C++" const wchar_t *wcsrchr(const wchar_t * __wcs, wchar_t __wc) throw() __asm__("wcsrchr")
# 238
 __attribute((__pure__)); 
# 248
extern wchar_t *wcschrnul(const wchar_t * __s, wchar_t __wc) throw()
# 249
 __attribute((__pure__)); 
# 255
extern ::size_t wcscspn(const wchar_t * __wcs, const wchar_t * __reject) throw()
# 256
 __attribute((__pure__)); 
# 259
extern ::size_t wcsspn(const wchar_t * __wcs, const wchar_t * __accept) throw()
# 260
 __attribute((__pure__)); 
# 263
extern "C++" wchar_t *wcspbrk(wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 264
 __attribute((__pure__)); 
# 265
extern "C++" const wchar_t *wcspbrk(const wchar_t * __wcs, const wchar_t * __accept) throw() __asm__("wcspbrk")
# 267
 __attribute((__pure__)); 
# 274
extern "C++" wchar_t *wcsstr(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 275
 __attribute((__pure__)); 
# 276
extern "C++" const wchar_t *wcsstr(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcsstr")
# 278
 __attribute((__pure__)); 
# 285
extern wchar_t *wcstok(wchar_t *__restrict__ __s, const wchar_t *__restrict__ __delim, wchar_t **__restrict__ __ptr) throw(); 
# 290
extern ::size_t wcslen(const wchar_t * __s) throw() __attribute((__pure__)); 
# 296
extern "C++" wchar_t *wcswcs(wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 297
 __attribute((__pure__)); 
# 298
extern "C++" const wchar_t *wcswcs(const wchar_t * __haystack, const wchar_t * __needle) throw() __asm__("wcswcs")
# 300
 __attribute((__pure__)); 
# 309
extern ::size_t wcsnlen(const wchar_t * __s, ::size_t __maxlen) throw()
# 310
 __attribute((__pure__)); 
# 317
extern "C++" wchar_t *wmemchr(wchar_t * __s, wchar_t __c, ::size_t __n) throw() __asm__("wmemchr")
# 318
 __attribute((__pure__)); 
# 319
extern "C++" const wchar_t *wmemchr(const wchar_t * __s, wchar_t __c, ::size_t __n) throw() __asm__("wmemchr")
# 321
 __attribute((__pure__)); 
# 328
extern int wmemcmp(const wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw()
# 329
 __attribute((__pure__)); 
# 332
extern __attribute((gnu_inline)) inline wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw(); 
# 337
extern __attribute((gnu_inline)) inline wchar_t *wmemmove(wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw(); 
# 341
extern __attribute((gnu_inline)) inline wchar_t *wmemset(wchar_t * __s, wchar_t __c, ::size_t __n) throw(); 
# 347
extern __attribute((gnu_inline)) inline wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw(); 
# 356
extern __attribute((gnu_inline)) inline wint_t btowc(int __c) throw(); 
# 360
extern __attribute((gnu_inline)) inline int wctob(wint_t __c) throw(); 
# 364
extern int mbsinit(const mbstate_t * __ps) throw() __attribute((__pure__)); 
# 368
extern ::size_t mbrtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __p) throw(); 
# 373
extern __attribute((gnu_inline)) inline ::size_t wcrtomb(char *__restrict__ __s, wchar_t __wc, mbstate_t *__restrict__ __ps) throw(); 
# 377
extern ::size_t __mbrlen(const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 379
extern __attribute((gnu_inline)) inline ::size_t mbrlen(const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __ps) throw(); 
# 389
extern wint_t __btowc_alias(int __c) __asm__("btowc"); 
# 390
__attribute((__gnu_inline__)) extern inline wint_t
# 391
 __attribute((__leaf__)) btowc(int __c) throw() 
# 392
{ return ((0) && (__c >= ('\000')) && (__c <= ('\177'))) ? (wint_t)__c : __btowc_alias(__c); 
# 393
} 
# 395
extern int __wctob_alias(wint_t __c) __asm__("wctob"); 
# 396
__attribute((__gnu_inline__)) extern inline int
# 397
 __attribute((__leaf__)) wctob(wint_t __wc) throw() 
# 398
{ return ((0) && (__wc >= (L'\x0')) && (__wc <= (L'\x7f'))) ? (int)__wc : __wctob_alias(__wc); 
# 399
} 
# 401
__attribute((__gnu_inline__)) extern inline ::size_t
# 402
 __attribute((__leaf__)) mbrlen(const char *__restrict__ __s, ::size_t __n, mbstate_t *__restrict__ __ps) throw() 
# 404
{ return (__ps != (__null)) ? mbrtowc(__null, __s, __n, __ps) : __mbrlen(__s, __n, __null); 
# 405
} 
# 411
extern __attribute((gnu_inline)) inline ::size_t mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 417
extern __attribute((gnu_inline)) inline ::size_t wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 426
extern __attribute((gnu_inline)) inline ::size_t mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __nmc, ::size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 432
extern __attribute((gnu_inline)) inline ::size_t wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __nwc, ::size_t __len, mbstate_t *__restrict__ __ps) throw(); 
# 442
extern int wcwidth(wchar_t __c) throw(); 
# 446
extern int wcswidth(const wchar_t * __s, ::size_t __n) throw(); 
# 453
extern double wcstod(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 460
extern float wcstof(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 462
extern long double wcstold(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) throw(); 
# 471
extern long wcstol(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 476
extern unsigned long wcstoul(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 486
__extension__ extern long long wcstoll(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 493
__extension__ extern unsigned long long wcstoull(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 503
__extension__ extern long long wcstoq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 510
__extension__ extern unsigned long long wcstouq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) throw(); 
# 533
extern long wcstol_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, __locale_t __loc) throw(); 
# 537
extern unsigned long wcstoul_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, __locale_t __loc) throw(); 
# 542
__extension__ extern long long wcstoll_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, __locale_t __loc) throw(); 
# 547
__extension__ extern unsigned long long wcstoull_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, __locale_t __loc) throw(); 
# 552
extern double wcstod_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, __locale_t __loc) throw(); 
# 556
extern float wcstof_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, __locale_t __loc) throw(); 
# 560
extern long double wcstold_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, __locale_t __loc) throw(); 
# 569
extern __attribute((gnu_inline)) inline wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw(); 
# 574
extern __attribute((gnu_inline)) inline wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw(); 
# 583
extern __FILE *open_wmemstream(wchar_t ** __bufloc, ::size_t * __sizeloc) throw(); 
# 590
extern int fwide(__FILE * __fp, int __mode) throw(); 
# 597
extern __attribute((gnu_inline)) inline int fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 604
extern __attribute((gnu_inline)) inline int wprintf(const wchar_t *__restrict__ __format, ...); 
# 607
extern __attribute((gnu_inline)) inline int swprintf(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __format, ...) throw(); 
# 615
extern __attribute((gnu_inline)) inline int vfwprintf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 623
extern __attribute((gnu_inline)) inline int vwprintf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 628
extern __attribute((gnu_inline)) inline int vswprintf(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 638
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 645
extern int wscanf(const wchar_t *__restrict__ __format, ...); 
# 648
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) throw(); 
# 692
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 700
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 704
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 748
extern wint_t fgetwc(__FILE * __stream); 
# 749
extern wint_t getwc(__FILE * __stream); 
# 755
extern wint_t getwchar(); 
# 762
extern wint_t fputwc(wchar_t __wc, __FILE * __stream); 
# 763
extern wint_t putwc(wchar_t __wc, __FILE * __stream); 
# 769
extern wint_t putwchar(wchar_t __wc); 
# 777
extern __attribute((gnu_inline)) inline wchar_t *fgetws(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 784
extern int fputws(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 792
extern wint_t ungetwc(wint_t __wc, __FILE * __stream); 
# 804
extern wint_t getwc_unlocked(__FILE * __stream); 
# 805
extern wint_t getwchar_unlocked(); 
# 813
extern wint_t fgetwc_unlocked(__FILE * __stream); 
# 821
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 830
extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 831
extern wint_t putwchar_unlocked(wchar_t __wc); 
# 840
extern __attribute((gnu_inline)) inline wchar_t *fgetws_unlocked(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 849
extern int fputws_unlocked(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 858
extern ::size_t wcsftime(wchar_t *__restrict__ __s, ::size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp) throw(); 
# 868
extern ::size_t wcsftime_l(wchar_t *__restrict__ __s, ::size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp, __locale_t __loc) throw(); 
# 24 "/usr/include/x86_64-linux-gnu/bits/wchar2.h" 3
extern wchar_t *__wmemcpy_chk(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n, ::size_t __ns1) throw(); 
# 27
extern wchar_t *__wmemcpy_alias(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw() __asm__("wmemcpy"); 
# 31
extern wchar_t *__wmemcpy_chk_warn(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n, ::size_t __ns1) throw() __asm__("__wmemcpy_chk")
# 35
 __attribute((__warning__("wmemcpy called with length bigger than size of destination buffer"))); 
# 38
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 39
__attribute((__leaf__)) extern inline wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw() 
# 41
{ 
# 42
if (__builtin_object_size(__s1, 0) != ((::size_t)(-1))) 
# 43
{ 
# 44
if (!(0)) { 
# 45
return __wmemcpy_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 48
if (__n > (__builtin_object_size(__s1, 0) / sizeof(wchar_t))) { 
# 49
return __wmemcpy_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 51
}  
# 52
return __wmemcpy_alias(__s1, __s2, __n); 
# 53
} 
# 56
extern wchar_t *__wmemmove_chk(wchar_t * __s1, const wchar_t * __s2, ::size_t __n, ::size_t __ns1) throw(); 
# 58
extern wchar_t *__wmemmove_alias(wchar_t * __s1, const wchar_t * __s2, ::size_t __n) throw() __asm__("wmemmove"); 
# 61
extern wchar_t *__wmemmove_chk_warn(wchar_t * __s1, const wchar_t * __s2, ::size_t __n, ::size_t __ns1) throw() __asm__("__wmemmove_chk")
# 64
 __attribute((__warning__("wmemmove called with length bigger than size of destination buffer"))); 
# 67
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 68
__attribute((__leaf__)) extern inline wchar_t *wmemmove(wchar_t *__s1, const wchar_t *__s2, ::size_t __n) throw() 
# 69
{ 
# 70
if (__builtin_object_size(__s1, 0) != ((::size_t)(-1))) 
# 71
{ 
# 72
if (!(0)) { 
# 73
return __wmemmove_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 76
if (__n > (__builtin_object_size(__s1, 0) / sizeof(wchar_t))) { 
# 77
return __wmemmove_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 79
}  
# 80
return __wmemmove_alias(__s1, __s2, __n); 
# 81
} 
# 85
extern wchar_t *__wmempcpy_chk(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n, ::size_t __ns1) throw(); 
# 88
extern wchar_t *__wmempcpy_alias(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw() __asm__("wmempcpy"); 
# 92
extern wchar_t *__wmempcpy_chk_warn(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n, ::size_t __ns1) throw() __asm__("__wmempcpy_chk")
# 96
 __attribute((__warning__("wmempcpy called with length bigger than size of destination buffer"))); 
# 99
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 100
__attribute((__leaf__)) extern inline wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, ::size_t __n) throw() 
# 102
{ 
# 103
if (__builtin_object_size(__s1, 0) != ((::size_t)(-1))) 
# 104
{ 
# 105
if (!(0)) { 
# 106
return __wmempcpy_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 109
if (__n > (__builtin_object_size(__s1, 0) / sizeof(wchar_t))) { 
# 110
return __wmempcpy_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t)); }  
# 112
}  
# 113
return __wmempcpy_alias(__s1, __s2, __n); 
# 114
} 
# 118
extern wchar_t *__wmemset_chk(wchar_t * __s, wchar_t __c, ::size_t __n, ::size_t __ns) throw(); 
# 120
extern wchar_t *__wmemset_alias(wchar_t * __s, wchar_t __c, ::size_t __n) throw() __asm__("wmemset"); 
# 122
extern wchar_t *__wmemset_chk_warn(wchar_t * __s, wchar_t __c, ::size_t __n, ::size_t __ns) throw() __asm__("__wmemset_chk")
# 125
 __attribute((__warning__("wmemset called with length bigger than size of destination buffer"))); 
# 128
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 129
__attribute((__leaf__)) extern inline wchar_t *wmemset(wchar_t *__s, wchar_t __c, ::size_t __n) throw() 
# 130
{ 
# 131
if (__builtin_object_size(__s, 0) != ((::size_t)(-1))) 
# 132
{ 
# 133
if (!(0)) { 
# 134
return __wmemset_chk(__s, __c, __n, __builtin_object_size(__s, 0) / sizeof(wchar_t)); }  
# 136
if (__n > (__builtin_object_size(__s, 0) / sizeof(wchar_t))) { 
# 137
return __wmemset_chk_warn(__s, __c, __n, __builtin_object_size(__s, 0) / sizeof(wchar_t)); }  
# 139
}  
# 140
return __wmemset_alias(__s, __c, __n); 
# 141
} 
# 144
extern wchar_t *__wcscpy_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw(); 
# 147
extern wchar_t *__wcscpy_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() __asm__("wcscpy"); 
# 151
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 152
__attribute((__leaf__)) extern inline wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() 
# 153
{ 
# 154
if (__builtin_object_size(__dest, 2 > 1) != ((::size_t)(-1))) { 
# 155
return __wcscpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 156
return __wcscpy_alias(__dest, __src); 
# 157
} 
# 160
extern wchar_t *__wcpcpy_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __destlen) throw(); 
# 163
extern wchar_t *__wcpcpy_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() __asm__("wcpcpy"); 
# 167
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 168
__attribute((__leaf__)) extern inline wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() 
# 169
{ 
# 170
if (__builtin_object_size(__dest, 2 > 1) != ((::size_t)(-1))) { 
# 171
return __wcpcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 172
return __wcpcpy_alias(__dest, __src); 
# 173
} 
# 176
extern wchar_t *__wcsncpy_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n, ::size_t __destlen) throw(); 
# 179
extern wchar_t *__wcsncpy_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw() __asm__("wcsncpy"); 
# 183
extern wchar_t *__wcsncpy_chk_warn(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n, ::size_t __destlen) throw() __asm__("__wcsncpy_chk")
# 187
 __attribute((__warning__("wcsncpy called with length bigger than size of destination buffer"))); 
# 190
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 191
__attribute((__leaf__)) extern inline wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw() 
# 193
{ 
# 194
if (__builtin_object_size(__dest, 2 > 1) != ((::size_t)(-1))) 
# 195
{ 
# 196
if (!(0)) { 
# 197
return __wcsncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 199
if (__n > (__builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t))) { 
# 200
return __wcsncpy_chk_warn(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 202
}  
# 203
return __wcsncpy_alias(__dest, __src, __n); 
# 204
} 
# 207
extern wchar_t *__wcpncpy_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n, ::size_t __destlen) throw(); 
# 210
extern wchar_t *__wcpncpy_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw() __asm__("wcpncpy"); 
# 214
extern wchar_t *__wcpncpy_chk_warn(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n, ::size_t __destlen) throw() __asm__("__wcpncpy_chk")
# 218
 __attribute((__warning__("wcpncpy called with length bigger than size of destination buffer"))); 
# 221
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 222
__attribute((__leaf__)) extern inline wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw() 
# 224
{ 
# 225
if (__builtin_object_size(__dest, 2 > 1) != ((::size_t)(-1))) 
# 226
{ 
# 227
if (!(0)) { 
# 228
return __wcpncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 230
if (__n > (__builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t))) { 
# 231
return __wcpncpy_chk_warn(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 233
}  
# 234
return __wcpncpy_alias(__dest, __src, __n); 
# 235
} 
# 238
extern wchar_t *__wcscat_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __destlen) throw(); 
# 241
extern wchar_t *__wcscat_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() __asm__("wcscat"); 
# 245
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 246
__attribute((__leaf__)) extern inline wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) throw() 
# 247
{ 
# 248
if (__builtin_object_size(__dest, 2 > 1) != ((::size_t)(-1))) { 
# 249
return __wcscat_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 250
return __wcscat_alias(__dest, __src); 
# 251
} 
# 254
extern wchar_t *__wcsncat_chk(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n, ::size_t __destlen) throw(); 
# 257
extern wchar_t *__wcsncat_alias(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw() __asm__("wcsncat"); 
# 262
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) 
# 263
__attribute((__leaf__)) extern inline wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, ::size_t __n) throw() 
# 265
{ 
# 266
if (__builtin_object_size(__dest, 2 > 1) != ((::size_t)(-1))) { 
# 267
return __wcsncat_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t)); }  
# 269
return __wcsncat_alias(__dest, __src, __n); 
# 270
} 
# 273
extern int __swprintf_chk(wchar_t *__restrict__ __s, ::size_t __n, int __flag, ::size_t __s_len, const wchar_t *__restrict__ __format, ...) throw(); 
# 278
extern int __swprintf_alias(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __fmt, ...) throw() __asm__("swprintf"); 
# 284
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 285
 __attribute((__leaf__)) swprintf(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __fmt, ...) throw() 
# 287
{ 
# 288
if ((__builtin_object_size(__s, 2 > 1) != ((::size_t)(-1))) || (2 > 1)) { 
# 289
return __swprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __fmt, __builtin_va_arg_pack()); }  
# 292
return __swprintf_alias(__s, __n, __fmt, __builtin_va_arg_pack()); 
# 293
} 
# 303
extern int __vswprintf_chk(wchar_t *__restrict__ __s, ::size_t __n, int __flag, ::size_t __s_len, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 309
extern int __vswprintf_alias(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __fmt, __gnuc_va_list __ap) throw() __asm__("vswprintf"); 
# 314
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 315
 __attribute((__leaf__)) vswprintf(wchar_t *__restrict__ __s, ::size_t __n, const wchar_t *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 317
{ 
# 318
if ((__builtin_object_size(__s, 2 > 1) != ((::size_t)(-1))) || (2 > 1)) { 
# 319
return __vswprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __fmt, __ap); }  
# 321
return __vswprintf_alias(__s, __n, __fmt, __ap); 
# 322
} 
# 327
extern int __fwprintf_chk(__FILE *__restrict__ __stream, int __flag, const wchar_t *__restrict__ __format, ...); 
# 329
extern int __wprintf_chk(int __flag, const wchar_t *__restrict__ __format, ...); 
# 331
extern int __vfwprintf_chk(__FILE *__restrict__ __stream, int __flag, const wchar_t *__restrict__ __format, __gnuc_va_list __ap); 
# 334
extern int __vwprintf_chk(int __flag, const wchar_t *__restrict__ __format, __gnuc_va_list __ap); 
# 338
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 339
wprintf(const wchar_t *__restrict__ __fmt, ...) 
# 340
{ 
# 341
return __wprintf_chk(2 - 1, __fmt, __builtin_va_arg_pack()); 
# 342
} 
# 344
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 345
fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __fmt, ...) 
# 346
{ 
# 347
return __fwprintf_chk(__stream, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 349
} 
# 357
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 358
vwprintf(const wchar_t *__restrict__ __fmt, __gnuc_va_list __ap) 
# 359
{ 
# 360
return __vwprintf_chk(2 - 1, __fmt, __ap); 
# 361
} 
# 363
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 364
vfwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ 
# 365
__fmt, __gnuc_va_list __ap) 
# 366
{ 
# 367
return __vfwprintf_chk(__stream, 2 - 1, __fmt, __ap); 
# 368
} 
# 372
extern wchar_t *__fgetws_chk(wchar_t *__restrict__ __s, ::size_t __size, int __n, __FILE *__restrict__ __stream)
# 373
 __attribute((__warn_unused_result__)); 
# 374
extern wchar_t *__fgetws_alias(wchar_t *__restrict__ __s, int __n, __FILE *__restrict__ __stream) __asm__("fgetws")
# 376
 __attribute((__warn_unused_result__)); 
# 377
extern wchar_t *__fgetws_chk_warn(wchar_t *__restrict__ __s, ::size_t __size, int __n, __FILE *__restrict__ __stream) __asm__("__fgetws_chk")
# 380
 __attribute((__warn_unused_result__)) __attribute((__warning__("fgetws called with bigger size than length of destination buffer"))); 
# 383
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline wchar_t *
# 384
fgetws(wchar_t *__restrict__ __s, int __n, __FILE *__restrict__ __stream) 
# 385
{ 
# 386
if (__builtin_object_size(__s, 2 > 1) != ((::size_t)(-1))) 
# 387
{ 
# 388
if ((!(0)) || (__n <= 0)) { 
# 389
return __fgetws_chk(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream); }  
# 392
if (((::size_t)__n) > (__builtin_object_size(__s, 2 > 1) / sizeof(wchar_t))) { 
# 393
return __fgetws_chk_warn(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream); }  
# 395
}  
# 396
return __fgetws_alias(__s, __n, __stream); 
# 397
} 
# 400
extern wchar_t *__fgetws_unlocked_chk(wchar_t *__restrict__ __s, ::size_t __size, int __n, __FILE *__restrict__ __stream)
# 402
 __attribute((__warn_unused_result__)); 
# 403
extern wchar_t *__fgetws_unlocked_alias(wchar_t *__restrict__ __s, int __n, __FILE *__restrict__ __stream) __asm__("fgetws_unlocked")
# 406
 __attribute((__warn_unused_result__)); 
# 407
extern wchar_t *__fgetws_unlocked_chk_warn(wchar_t *__restrict__ __s, ::size_t __size, int __n, __FILE *__restrict__ __stream) __asm__("__fgetws_unlocked_chk")
# 411
 __attribute((__warn_unused_result__)) __attribute((__warning__("fgetws_unlocked called with bigger size than length of destination buffer"))); 
# 414
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline wchar_t *
# 415
fgetws_unlocked(wchar_t *__restrict__ __s, int __n, __FILE *__restrict__ __stream) 
# 416
{ 
# 417
if (__builtin_object_size(__s, 2 > 1) != ((::size_t)(-1))) 
# 418
{ 
# 419
if ((!(0)) || (__n <= 0)) { 
# 420
return __fgetws_unlocked_chk(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream); }  
# 423
if (((::size_t)__n) > (__builtin_object_size(__s, 2 > 1) / sizeof(wchar_t))) { 
# 424
return __fgetws_unlocked_chk_warn(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream); }  
# 426
}  
# 427
return __fgetws_unlocked_alias(__s, __n, __stream); 
# 428
} 
# 432
extern ::size_t __wcrtomb_chk(char *__restrict__ __s, wchar_t __wchar, mbstate_t *__restrict__ __p, ::size_t __buflen) throw()
# 434
 __attribute((__warn_unused_result__)); 
# 435
extern ::size_t __wcrtomb_alias(char *__restrict__ __s, wchar_t __wchar, mbstate_t *__restrict__ __ps) throw() __asm__("wcrtomb")
# 437
 __attribute((__warn_unused_result__)); 
# 439
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline ::size_t
# 440
 __attribute((__leaf__)) wcrtomb(char *__restrict__ __s, wchar_t __wchar, mbstate_t *__restrict__ __ps) throw() 
# 442
{ 
# 450
if ((__builtin_object_size(__s, 2 > 1) != ((::size_t)(-1))) && ((16) > __builtin_object_size(__s, 2 > 1))) { 
# 451
return __wcrtomb_chk(__s, __wchar, __ps, __builtin_object_size(__s, 2 > 1)); }  
# 452
return __wcrtomb_alias(__s, __wchar, __ps); 
# 453
} 
# 456
extern ::size_t __mbsrtowcs_chk(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps, ::size_t __dstlen) throw(); 
# 460
extern ::size_t __mbsrtowcs_alias(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) throw() __asm__("mbsrtowcs"); 
# 465
extern ::size_t __mbsrtowcs_chk_warn(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps, ::size_t __dstlen) throw() __asm__("__mbsrtowcs_chk")
# 470
 __attribute((__warning__("mbsrtowcs called with dst buffer smaller than len * sizeof (wchar_t)"))); 
# 473
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline ::size_t
# 474
 __attribute((__leaf__)) mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) throw() 
# 476
{ 
# 477
if (__builtin_object_size(__dst, 2 > 1) != ((::size_t)(-1))) 
# 478
{ 
# 479
if (!(0)) { 
# 480
return __mbsrtowcs_chk(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 483
if (__len > (__builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))) { 
# 484
return __mbsrtowcs_chk_warn(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 486
}  
# 487
return __mbsrtowcs_alias(__dst, __src, __len, __ps); 
# 488
} 
# 491
extern ::size_t __wcsrtombs_chk(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps, ::size_t __dstlen) throw(); 
# 495
extern ::size_t __wcsrtombs_alias(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) throw() __asm__("wcsrtombs"); 
# 500
extern ::size_t __wcsrtombs_chk_warn(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps, ::size_t __dstlen) throw() __asm__("__wcsrtombs_chk")
# 505
 __attribute((__warning__("wcsrtombs called with dst buffer smaller than len"))); 
# 507
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline ::size_t
# 508
 __attribute((__leaf__)) wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __len, mbstate_t *__restrict__ __ps) throw() 
# 510
{ 
# 511
if (__builtin_object_size(__dst, 2 > 1) != ((::size_t)(-1))) 
# 512
{ 
# 513
if (!(0)) { 
# 514
return __wcsrtombs_chk(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1)); }  
# 516
if (__len > __builtin_object_size(__dst, 2 > 1)) { 
# 517
return __wcsrtombs_chk_warn(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1)); }  
# 518
}  
# 519
return __wcsrtombs_alias(__dst, __src, __len, __ps); 
# 520
} 
# 524
extern ::size_t __mbsnrtowcs_chk(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __nmc, ::size_t __len, mbstate_t *__restrict__ __ps, ::size_t __dstlen) throw(); 
# 528
extern ::size_t __mbsnrtowcs_alias(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __nmc, ::size_t __len, mbstate_t *__restrict__ __ps) throw() __asm__("mbsnrtowcs"); 
# 533
extern ::size_t __mbsnrtowcs_chk_warn(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __nmc, ::size_t __len, mbstate_t *__restrict__ __ps, ::size_t __dstlen) throw() __asm__("__mbsnrtowcs_chk")
# 538
 __attribute((__warning__("mbsnrtowcs called with dst buffer smaller than len * sizeof (wchar_t)"))); 
# 541
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline ::size_t
# 542
 __attribute((__leaf__)) mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, ::size_t __nmc, ::size_t __len, mbstate_t *__restrict__ __ps) throw() 
# 544
{ 
# 545
if (__builtin_object_size(__dst, 2 > 1) != ((::size_t)(-1))) 
# 546
{ 
# 547
if (!(0)) { 
# 548
return __mbsnrtowcs_chk(__dst, __src, __nmc, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 551
if (__len > (__builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))) { 
# 552
return __mbsnrtowcs_chk_warn(__dst, __src, __nmc, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t)); }  
# 554
}  
# 555
return __mbsnrtowcs_alias(__dst, __src, __nmc, __len, __ps); 
# 556
} 
# 559
extern ::size_t __wcsnrtombs_chk(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __nwc, ::size_t __len, mbstate_t *__restrict__ __ps, ::size_t __dstlen) throw(); 
# 564
extern ::size_t __wcsnrtombs_alias(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __nwc, ::size_t __len, mbstate_t *__restrict__ __ps) throw() __asm__("wcsnrtombs"); 
# 569
extern ::size_t __wcsnrtombs_chk_warn(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __nwc, ::size_t __len, mbstate_t *__restrict__ __ps, ::size_t __dstlen) throw() __asm__("__wcsnrtombs_chk")
# 575
 __attribute((__warning__("wcsnrtombs called with dst buffer smaller than len"))); 
# 577
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline ::size_t
# 578
 __attribute((__leaf__)) wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, ::size_t __nwc, ::size_t __len, mbstate_t *__restrict__ __ps) throw() 
# 580
{ 
# 581
if (__builtin_object_size(__dst, 2 > 1) != ((::size_t)(-1))) 
# 582
{ 
# 583
if (!(0)) { 
# 584
return __wcsnrtombs_chk(__dst, __src, __nwc, __len, __ps, __builtin_object_size(__dst, 2 > 1)); }  
# 587
if (__len > __builtin_object_size(__dst, 2 > 1)) { 
# 588
return __wcsnrtombs_chk_warn(__dst, __src, __nwc, __len, __ps, __builtin_object_size(__dst, 2 > 1)); }  
# 590
}  
# 591
return __wcsnrtombs_alias(__dst, __src, __nwc, __len, __ps); 
# 592
} 
# 894 "/usr/include/wchar.h" 3
}
# 62 "/usr/include/c++/5/cwchar" 3
namespace std { 
# 64
using ::mbstate_t;
# 65
}
# 135
namespace std __attribute((__visibility__("default"))) { 
# 139
using ::wint_t;
# 141
using ::btowc;
# 142
using ::fgetwc;
# 143
using ::fgetws;
# 144
using ::fputwc;
# 145
using ::fputws;
# 146
using ::fwide;
# 147
using ::fwprintf;
# 148
using ::fwscanf;
# 149
using ::getwc;
# 150
using ::getwchar;
# 151
using ::mbrlen;
# 152
using ::mbrtowc;
# 153
using ::mbsinit;
# 154
using ::mbsrtowcs;
# 155
using ::putwc;
# 156
using ::putwchar;
# 158
using ::swprintf;
# 160
using ::swscanf;
# 161
using ::ungetwc;
# 162
using ::vfwprintf;
# 164
using ::vfwscanf;
# 167
using ::vswprintf;
# 170
using ::vswscanf;
# 172
using ::vwprintf;
# 174
using ::vwscanf;
# 176
using ::wcrtomb;
# 177
using ::wcscat;
# 178
using ::wcscmp;
# 179
using ::wcscoll;
# 180
using ::wcscpy;
# 181
using ::wcscspn;
# 182
using ::wcsftime;
# 183
using ::wcslen;
# 184
using ::wcsncat;
# 185
using ::wcsncmp;
# 186
using ::wcsncpy;
# 187
using ::wcsrtombs;
# 188
using ::wcsspn;
# 189
using ::wcstod;
# 191
using ::wcstof;
# 193
using ::wcstok;
# 194
using ::wcstol;
# 195
using ::wcstoul;
# 196
using ::wcsxfrm;
# 197
using ::wctob;
# 198
using ::wmemcmp;
# 199
using ::wmemcpy;
# 200
using ::wmemmove;
# 201
using ::wmemset;
# 202
using ::wprintf;
# 203
using ::wscanf;
# 204
using ::wcschr;
# 205
using ::wcspbrk;
# 206
using ::wcsrchr;
# 207
using ::wcsstr;
# 208
using ::wmemchr;
# 233
}
# 241
namespace __gnu_cxx { 
# 248
using ::wcstold;
# 257
using ::wcstoll;
# 258
using ::wcstoull;
# 260
}
# 262
namespace std { 
# 264
using __gnu_cxx::wcstold;
# 265
using __gnu_cxx::wcstoll;
# 266
using __gnu_cxx::wcstoull;
# 267
}
# 277
namespace std { 
# 297
}
# 68 "/usr/include/c++/5/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88
typedef long streamoff; 
# 98
typedef ptrdiff_t streamsize; 
# 111
template< class _StateT> 
# 112
class fpos { 
# 115
streamoff _M_off; 
# 116
_StateT _M_state; 
# 123
public: fpos() : _M_off((0)), _M_state() 
# 124
{ } 
# 133
fpos(streamoff __off) : _M_off(__off), _M_state() 
# 134
{ } 
# 137
operator streamoff() const { return _M_off; } 
# 141
void state(_StateT __st) 
# 142
{ (_M_state) = __st; } 
# 146
_StateT state() const 
# 147
{ return _M_state; } 
# 154
fpos &operator+=(streamoff __off) 
# 155
{ 
# 156
(_M_off) += __off; 
# 157
return *this; 
# 158
} 
# 165
fpos &operator-=(streamoff __off) 
# 166
{ 
# 167
(_M_off) -= __off; 
# 168
return *this; 
# 169
} 
# 178
fpos operator+(streamoff __off) const 
# 179
{ 
# 180
fpos __pos(*this); 
# 181
__pos += __off; 
# 182
return __pos; 
# 183
} 
# 192
fpos operator-(streamoff __off) const 
# 193
{ 
# 194
fpos __pos(*this); 
# 195
__pos -= __off; 
# 196
return __pos; 
# 197
} 
# 205
streamoff operator-(const fpos &__other) const 
# 206
{ return (_M_off) - (__other._M_off); } 
# 207
}; 
# 214
template< class _StateT> inline bool 
# 216
operator==(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 217
{ return ((streamoff)__lhs) == ((streamoff)__rhs); } 
# 219
template< class _StateT> inline bool 
# 221
operator!=(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 222
{ return ((streamoff)__lhs) != ((streamoff)__rhs); } 
# 228
typedef fpos< __mbstate_t>  streampos; 
# 230
typedef fpos< __mbstate_t>  wstreampos; 
# 234
typedef fpos< __mbstate_t>  u16streampos; 
# 236
typedef fpos< __mbstate_t>  u32streampos; 
# 240
}
# 42 "/usr/include/c++/5/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 74
class ios_base; 
# 76
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ios; 
# 79
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf; 
# 82
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_istream; 
# 85
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream; 
# 88
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream; 
# 92
inline namespace __cxx11 { 
# 94
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 95
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 98
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 99
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 102
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 103
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 106
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 107
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 110
}
# 112
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 115
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 118
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 121
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 124
template< class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator; 
# 127
template< class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator; 
# 132
typedef basic_ios< char>  ios; 
# 135
typedef basic_streambuf< char>  streambuf; 
# 138
typedef basic_istream< char>  istream; 
# 141
typedef basic_ostream< char>  ostream; 
# 144
typedef basic_iostream< char>  iostream; 
# 147
typedef __cxx11::basic_stringbuf< char>  stringbuf; 
# 150
typedef __cxx11::basic_istringstream< char>  istringstream; 
# 153
typedef __cxx11::basic_ostringstream< char>  ostringstream; 
# 156
typedef __cxx11::basic_stringstream< char>  stringstream; 
# 159
typedef basic_filebuf< char>  filebuf; 
# 162
typedef basic_ifstream< char>  ifstream; 
# 165
typedef basic_ofstream< char>  ofstream; 
# 168
typedef basic_fstream< char>  fstream; 
# 172
typedef basic_ios< wchar_t>  wios; 
# 175
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 178
typedef basic_istream< wchar_t>  wistream; 
# 181
typedef basic_ostream< wchar_t>  wostream; 
# 184
typedef basic_iostream< wchar_t>  wiostream; 
# 187
typedef __cxx11::basic_stringbuf< wchar_t>  wstringbuf; 
# 190
typedef __cxx11::basic_istringstream< wchar_t>  wistringstream; 
# 193
typedef __cxx11::basic_ostringstream< wchar_t>  wostringstream; 
# 196
typedef __cxx11::basic_stringstream< wchar_t>  wstringstream; 
# 199
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 202
typedef basic_ifstream< wchar_t>  wifstream; 
# 205
typedef basic_ofstream< wchar_t>  wofstream; 
# 208
typedef basic_fstream< wchar_t>  wfstream; 
# 213
}
# 35 "/usr/include/c++/5/exception" 3
#pragma GCC visibility push ( default )
# 40
extern "C++" {
# 42
namespace std { 
# 60
class exception { 
# 63
public: exception() noexcept { } 
# 64
virtual ~exception() noexcept; 
# 68
virtual const char *what() const noexcept; 
# 69
}; 
# 73
class bad_exception : public exception { 
# 76
public: bad_exception() noexcept { } 
# 80
virtual ~bad_exception() noexcept; 
# 83
virtual const char *what() const noexcept; 
# 84
}; 
# 87
typedef void (*terminate_handler)(void); 
# 90
typedef void (*unexpected_handler)(void); 
# 93
terminate_handler set_terminate(terminate_handler) noexcept; 
# 97
terminate_handler get_terminate() noexcept; 
# 102
void terminate() noexcept __attribute((__noreturn__)); 
# 105
unexpected_handler set_unexpected(unexpected_handler) noexcept; 
# 109
unexpected_handler get_unexpected() noexcept; 
# 114
void unexpected() __attribute((__noreturn__)); 
# 127
bool uncaught_exception() noexcept __attribute((__pure__)); 
# 130
}
# 132
namespace __gnu_cxx { 
# 152
void __verbose_terminate_handler(); 
# 155
}
# 157
}
# 159
#pragma GCC visibility pop
# 34 "/usr/include/c++/5/bits/exception_ptr.h" 3
#pragma GCC visibility push ( default )
# 43
extern "C++" {
# 45
namespace std { 
# 47
class type_info; 
# 53
namespace __exception_ptr { 
# 55
class exception_ptr; 
# 56
}
# 58
using __exception_ptr::exception_ptr;
# 64
__exception_ptr::exception_ptr current_exception() noexcept; 
# 67
void rethrow_exception(__exception_ptr::exception_ptr) __attribute((__noreturn__)); 
# 69
namespace __exception_ptr { 
# 75
class exception_ptr { 
# 77
void *_M_exception_object; 
# 79
explicit exception_ptr(void * __e) noexcept; 
# 81
void _M_addref() noexcept; 
# 82
void _M_release() noexcept; 
# 84
void *_M_get() const noexcept __attribute((__pure__)); 
# 86
friend exception_ptr std::current_exception() noexcept; 
# 87
friend void std::rethrow_exception(exception_ptr); 
# 90
public: exception_ptr() noexcept; 
# 92
exception_ptr(const exception_ptr &) noexcept; 
# 95
exception_ptr(nullptr_t) noexcept : _M_exception_object((0)) 
# 97
{ } 
# 99
exception_ptr(exception_ptr &&__o) noexcept : _M_exception_object(__o._M_exception_object) 
# 101
{ (__o._M_exception_object) = (0); } 
# 112
exception_ptr &operator=(const exception_ptr &) noexcept; 
# 116
exception_ptr &operator=(exception_ptr &&__o) noexcept 
# 117
{ 
# 118
((exception_ptr)(static_cast< exception_ptr &&>(__o))).swap(*this); 
# 119
return *this; 
# 120
} 
# 123
~exception_ptr() noexcept; 
# 126
void swap(exception_ptr &) noexcept; 
# 138
explicit operator bool() const 
# 139
{ return _M_exception_object; } 
# 143
friend bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 144
 __attribute((__pure__)); 
# 147
const type_info *__cxa_exception_type() const noexcept
# 148
 __attribute((__pure__)); 
# 149
}; 
# 152
bool operator==(const exception_ptr &, const exception_ptr &) noexcept
# 153
 __attribute((__pure__)); 
# 156
bool operator!=(const exception_ptr &, const exception_ptr &) noexcept
# 157
 __attribute((__pure__)); 
# 160
inline void swap(exception_ptr &__lhs, exception_ptr &__rhs) 
# 161
{ __lhs.swap(__rhs); } 
# 163
}
# 167
template< class _Ex> __exception_ptr::exception_ptr 
# 169
make_exception_ptr(_Ex __ex) noexcept 
# 170
{ 
# 172
try 
# 173
{ 
# 174
throw __ex; 
# 175
} 
# 176
catch (...) 
# 177
{ 
# 178
return current_exception(); 
# 179
}  
# 183
} 
# 189
template< class _Ex> __exception_ptr::exception_ptr copy_exception(_Ex __ex) noexcept
# 191
 __attribute((__deprecated__)); 
# 193
template< class _Ex> __exception_ptr::exception_ptr 
# 195
copy_exception(_Ex __ex) noexcept 
# 196
{ return std::make_exception_ptr< _Ex> (__ex); } 
# 199
}
# 201
}
# 203
#pragma GCC visibility pop
# 33 "/usr/include/c++/5/bits/nested_exception.h" 3
#pragma GCC visibility push ( default )
# 45
extern "C++" {
# 47
namespace std { 
# 55
class nested_exception { 
# 57
__exception_ptr::exception_ptr _M_ptr; 
# 60
public: nested_exception() noexcept : _M_ptr(current_exception()) { } 
# 62
nested_exception(const nested_exception &) noexcept = default;
# 64
nested_exception &operator=(const nested_exception &) noexcept = default;
# 66
virtual ~nested_exception() noexcept; 
# 68
[[noreturn]] void 
# 70
rethrow_nested() const 
# 71
{ 
# 72
if ((_M_ptr)) { 
# 73
rethrow_exception(_M_ptr); }  
# 74
std::terminate(); 
# 75
} 
# 78
__exception_ptr::exception_ptr nested_ptr() const noexcept 
# 79
{ return _M_ptr; } 
# 80
}; 
# 82
template< class _Except> 
# 83
struct _Nested_exception : public _Except, public nested_exception { 
# 85
explicit _Nested_exception(const _Except &__ex) : _Except(__ex) 
# 87
{ } 
# 89
explicit _Nested_exception(_Except &&__ex) : _Except(static_cast< _Except &&>(__ex)) 
# 91
{ } 
# 92
}; 
# 94
template< class _Tp, bool 
# 95
__with_nested = !__is_base_of(nested_exception, _Tp)> 
# 96
struct _Throw_with_nested_impl { 
# 98
template< class _Up> static void 
# 99
_S_throw(_Up &&__t) 
# 100
{ throw _Nested_exception< _Tp> {static_cast< _Up &&>(__t)}; } 
# 101
}; 
# 103
template< class _Tp> 
# 104
struct _Throw_with_nested_impl< _Tp, false>  { 
# 106
template< class _Up> static void 
# 107
_S_throw(_Up &&__t) 
# 108
{ throw static_cast< _Up &&>(__t); } 
# 109
}; 
# 111
template< class _Tp, bool  = __is_class(_Tp) && (!__is_final(_Tp))> 
# 112
struct _Throw_with_nested_helper : public _Throw_with_nested_impl< _Tp>  { 
# 113
}; 
# 115
template< class _Tp> 
# 116
struct _Throw_with_nested_helper< _Tp, false>  : public _Throw_with_nested_impl< _Tp, false>  { 
# 118
}; 
# 120
template< class _Tp> 
# 121
struct _Throw_with_nested_helper< _Tp &, false>  : public _Throw_with_nested_helper< _Tp>  { 
# 123
}; 
# 125
template< class _Tp> 
# 126
struct _Throw_with_nested_helper< _Tp &&, false>  : public _Throw_with_nested_helper< _Tp>  { 
# 128
}; 
# 132
template< class _Tp> 
# 133
[[noreturn]] inline void 
# 135
throw_with_nested(_Tp &&__t) 
# 136
{ 
# 137
_Throw_with_nested_helper< _Tp> ::_S_throw(static_cast< _Tp &&>(__t)); 
# 138
} 
# 140
template< class _Tp, bool  = __is_polymorphic(_Tp)> 
# 141
struct _Rethrow_if_nested_impl { 
# 143
static void _S_rethrow(const _Tp &__t) 
# 144
{ 
# 145
if (auto __tp = (dynamic_cast< const nested_exception *>(&__t))) { 
# 146
__tp->rethrow_nested(); }  
# 147
} 
# 148
}; 
# 150
template< class _Tp> 
# 151
struct _Rethrow_if_nested_impl< _Tp, false>  { 
# 153
static void _S_rethrow(const _Tp &) { } 
# 154
}; 
# 157
template< class _Ex> inline void 
# 159
rethrow_if_nested(const _Ex &__ex) 
# 160
{ 
# 161
_Rethrow_if_nested_impl< _Ex> ::_S_rethrow(__ex); 
# 162
} 
# 165
}
# 167
}
# 171
#pragma GCC visibility pop
# 42 "/usr/include/c++/5/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 56
void __throw_bad_cast() __attribute((__noreturn__)); 
# 59
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 63
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 66
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 72
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 75
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 79
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 82
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 85
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 95
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 98
void __throw_system_error(int) __attribute((__noreturn__)); 
# 101
void __throw_future_error(int) __attribute((__noreturn__)); 
# 105
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 108
}
# 37 "/usr/include/c++/5/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 54
template< class _Value> 
# 55
struct __numeric_traits_integer { 
# 58
static const _Value __min = ((((_Value)(-1)) < 0) ? ((_Value)1) << ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) : ((_Value)0)); 
# 59
static const _Value __max = ((((_Value)(-1)) < 0) ? (((((_Value)1) << (((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((_Value)0))); 
# 63
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 64
static const int __digits = ((sizeof(_Value) * (8)) - (((_Value)(-1)) < 0)); 
# 65
}; 
# 67
template< class _Value> const _Value 
# 68
__numeric_traits_integer< _Value> ::__min; 
# 70
template< class _Value> const _Value 
# 71
__numeric_traits_integer< _Value> ::__max; 
# 73
template< class _Value> const bool 
# 74
__numeric_traits_integer< _Value> ::__is_signed; 
# 76
template< class _Value> const int 
# 77
__numeric_traits_integer< _Value> ::__digits; 
# 99
template< class _Value> 
# 100
struct __numeric_traits_floating { 
# 103
static const int __max_digits10 = ((2) + ((((std::__are_same< _Value, float> ::__value) ? 24 : ((std::__are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136))); 
# 106
static const bool __is_signed = true; 
# 107
static const int __digits10 = ((std::__are_same< _Value, float> ::__value) ? 6 : ((std::__are_same< _Value, double> ::__value) ? 15 : 18)); 
# 108
static const int __max_exponent10 = ((std::__are_same< _Value, float> ::__value) ? 38 : ((std::__are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 109
}; 
# 111
template< class _Value> const int 
# 112
__numeric_traits_floating< _Value> ::__max_digits10; 
# 114
template< class _Value> const bool 
# 115
__numeric_traits_floating< _Value> ::__is_signed; 
# 117
template< class _Value> const int 
# 118
__numeric_traits_floating< _Value> ::__digits10; 
# 120
template< class _Value> const int 
# 121
__numeric_traits_floating< _Value> ::__max_exponent10; 
# 123
template< class _Value> 
# 124
struct __numeric_traits : public __conditional_type< std::__is_integer< _Value> ::__value, __numeric_traits_integer< _Value> , __numeric_traits_floating< _Value> > ::__type { 
# 128
}; 
# 131
}
# 36 "/usr/include/c++/5/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Tp> inline _Tp *
# 47
__addressof(_Tp &__r) noexcept 
# 48
{ 
# 49
return reinterpret_cast< _Tp *>(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__r)))); 
# 51
} 
# 54
}
# 42 "/usr/include/c++/5/type_traits" 3
namespace std { 
# 44
typedef unsigned short uint_least16_t; 
# 45
typedef unsigned uint_least32_t; 
# 46
}
# 52
namespace std __attribute((__visibility__("default"))) { 
# 68
template< class _Tp, _Tp __v> 
# 69
struct integral_constant { 
# 71
static constexpr _Tp value = (__v); 
# 72
typedef _Tp value_type; 
# 73
typedef integral_constant type; 
# 74
constexpr operator value_type() const { return value; } 
# 81
}; 
# 83
template< class _Tp, _Tp __v> constexpr _Tp 
# 84
integral_constant< _Tp, __v> ::value; 
# 87
typedef integral_constant< bool, true>  true_type; 
# 90
typedef integral_constant< bool, false>  false_type; 
# 92
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 97
template< bool , class , class > struct conditional; 
# 100
template< class ...> struct __or_; 
# 104
template<> struct __or_< >  : public false_type { 
# 106
}; 
# 108
template< class _B1> 
# 109
struct __or_< _B1>  : public _B1 { 
# 111
}; 
# 113
template< class _B1, class _B2> 
# 114
struct __or_< _B1, _B2>  : public conditional< _B1::value, _B1, _B2> ::type { 
# 116
}; 
# 118
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 119
struct __or_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, _B1, __or_< _B2, _B3, _Bn...> > ::type { 
# 121
}; 
# 123
template< class ...> struct __and_; 
# 127
template<> struct __and_< >  : public true_type { 
# 129
}; 
# 131
template< class _B1> 
# 132
struct __and_< _B1>  : public _B1 { 
# 134
}; 
# 136
template< class _B1, class _B2> 
# 137
struct __and_< _B1, _B2>  : public conditional< _B1::value, _B2, _B1> ::type { 
# 139
}; 
# 141
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 142
struct __and_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, __and_< _B2, _B3, _Bn...> , _B1> ::type { 
# 144
}; 
# 146
template< class _Pp> 
# 147
struct __not_ : public integral_constant< bool, !_Pp::value>  { 
# 149
}; 
# 156
template< class _Tp> 
# 157
struct __success_type { 
# 158
typedef _Tp type; }; 
# 160
struct __failure_type { 
# 161
}; 
# 165
template< class > struct remove_cv; 
# 168
template< class > 
# 169
struct __is_void_helper : public false_type { 
# 170
}; 
# 173
template<> struct __is_void_helper< void>  : public true_type { 
# 174
}; 
# 177
template< class _Tp> 
# 178
struct is_void : public __is_void_helper< typename remove_cv< _Tp> ::type> ::type { 
# 180
}; 
# 182
template< class > 
# 183
struct __is_integral_helper : public false_type { 
# 184
}; 
# 187
template<> struct __is_integral_helper< bool>  : public true_type { 
# 188
}; 
# 191
template<> struct __is_integral_helper< char>  : public true_type { 
# 192
}; 
# 195
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 196
}; 
# 199
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 200
}; 
# 204
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 205
}; 
# 209
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 210
}; 
# 213
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 214
}; 
# 217
template<> struct __is_integral_helper< short>  : public true_type { 
# 218
}; 
# 221
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 222
}; 
# 225
template<> struct __is_integral_helper< int>  : public true_type { 
# 226
}; 
# 229
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 230
}; 
# 233
template<> struct __is_integral_helper< long>  : public true_type { 
# 234
}; 
# 237
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 238
}; 
# 241
template<> struct __is_integral_helper< long long>  : public true_type { 
# 242
}; 
# 245
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 246
}; 
# 288
template< class _Tp> 
# 289
struct is_integral : public __is_integral_helper< typename remove_cv< _Tp> ::type> ::type { 
# 291
}; 
# 293
template< class > 
# 294
struct __is_floating_point_helper : public false_type { 
# 295
}; 
# 298
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 299
}; 
# 302
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 303
}; 
# 306
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 307
}; 
# 316
template< class _Tp> 
# 317
struct is_floating_point : public __is_floating_point_helper< typename remove_cv< _Tp> ::type> ::type { 
# 319
}; 
# 322
template< class > 
# 323
struct is_array : public false_type { 
# 324
}; 
# 326
template< class _Tp, size_t _Size> 
# 327
struct is_array< _Tp [_Size]>  : public true_type { 
# 328
}; 
# 330
template< class _Tp> 
# 331
struct is_array< _Tp []>  : public true_type { 
# 332
}; 
# 334
template< class > 
# 335
struct __is_pointer_helper : public false_type { 
# 336
}; 
# 338
template< class _Tp> 
# 339
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 340
}; 
# 343
template< class _Tp> 
# 344
struct is_pointer : public __is_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 346
}; 
# 349
template< class > 
# 350
struct is_lvalue_reference : public false_type { 
# 351
}; 
# 353
template< class _Tp> 
# 354
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 355
}; 
# 358
template< class > 
# 359
struct is_rvalue_reference : public false_type { 
# 360
}; 
# 362
template< class _Tp> 
# 363
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 364
}; 
# 366
template< class > struct is_function; 
# 369
template< class > 
# 370
struct __is_member_object_pointer_helper : public false_type { 
# 371
}; 
# 373
template< class _Tp, class _Cp> 
# 374
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public integral_constant< bool, !is_function< _Tp> ::value>  { 
# 375
}; 
# 378
template< class _Tp> 
# 379
struct is_member_object_pointer : public __is_member_object_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 382
}; 
# 384
template< class > 
# 385
struct __is_member_function_pointer_helper : public false_type { 
# 386
}; 
# 388
template< class _Tp, class _Cp> 
# 389
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public integral_constant< bool, is_function< _Tp> ::value>  { 
# 390
}; 
# 393
template< class _Tp> 
# 394
struct is_member_function_pointer : public __is_member_function_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 397
}; 
# 400
template< class _Tp> 
# 401
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 403
}; 
# 406
template< class _Tp> 
# 407
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 409
}; 
# 412
template< class _Tp> 
# 413
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 415
}; 
# 418
template< class > 
# 419
struct is_function : public false_type { 
# 420
}; 
# 422
template< class _Res, class ..._ArgTypes> 
# 423
struct is_function< _Res (_ArgTypes ...)>  : public true_type { 
# 424
}; 
# 426
template< class _Res, class ..._ArgTypes> 
# 427
struct is_function< _Res (_ArgTypes ...) &>  : public true_type { 
# 428
}; 
# 430
template< class _Res, class ..._ArgTypes> 
# 431
struct is_function< _Res (_ArgTypes ...) &&>  : public true_type { 
# 432
}; 
# 434
template< class _Res, class ..._ArgTypes> 
# 435
struct is_function< _Res (_ArgTypes ..., ...)>  : public true_type { 
# 436
}; 
# 438
template< class _Res, class ..._ArgTypes> 
# 439
struct is_function< _Res (_ArgTypes ..., ...) &>  : public true_type { 
# 440
}; 
# 442
template< class _Res, class ..._ArgTypes> 
# 443
struct is_function< _Res (_ArgTypes ..., ...) &&>  : public true_type { 
# 444
}; 
# 446
template< class _Res, class ..._ArgTypes> 
# 447
struct is_function< _Res (_ArgTypes ...) const>  : public true_type { 
# 448
}; 
# 450
template< class _Res, class ..._ArgTypes> 
# 451
struct is_function< _Res (_ArgTypes ...) const &>  : public true_type { 
# 452
}; 
# 454
template< class _Res, class ..._ArgTypes> 
# 455
struct is_function< _Res (_ArgTypes ...) const &&>  : public true_type { 
# 456
}; 
# 458
template< class _Res, class ..._ArgTypes> 
# 459
struct is_function< _Res (_ArgTypes ..., ...) const>  : public true_type { 
# 460
}; 
# 462
template< class _Res, class ..._ArgTypes> 
# 463
struct is_function< _Res (_ArgTypes ..., ...) const &>  : public true_type { 
# 464
}; 
# 466
template< class _Res, class ..._ArgTypes> 
# 467
struct is_function< _Res (_ArgTypes ..., ...) const &&>  : public true_type { 
# 468
}; 
# 470
template< class _Res, class ..._ArgTypes> 
# 471
struct is_function< _Res (_ArgTypes ...) volatile>  : public true_type { 
# 472
}; 
# 474
template< class _Res, class ..._ArgTypes> 
# 475
struct is_function< _Res (_ArgTypes ...) volatile &>  : public true_type { 
# 476
}; 
# 478
template< class _Res, class ..._ArgTypes> 
# 479
struct is_function< _Res (_ArgTypes ...) volatile &&>  : public true_type { 
# 480
}; 
# 482
template< class _Res, class ..._ArgTypes> 
# 483
struct is_function< _Res (_ArgTypes ..., ...) volatile>  : public true_type { 
# 484
}; 
# 486
template< class _Res, class ..._ArgTypes> 
# 487
struct is_function< _Res (_ArgTypes ..., ...) volatile &>  : public true_type { 
# 488
}; 
# 490
template< class _Res, class ..._ArgTypes> 
# 491
struct is_function< _Res (_ArgTypes ..., ...) volatile &&>  : public true_type { 
# 492
}; 
# 494
template< class _Res, class ..._ArgTypes> 
# 495
struct is_function< _Res (_ArgTypes ...) const volatile>  : public true_type { 
# 496
}; 
# 498
template< class _Res, class ..._ArgTypes> 
# 499
struct is_function< _Res (_ArgTypes ...) const volatile &>  : public true_type { 
# 500
}; 
# 502
template< class _Res, class ..._ArgTypes> 
# 503
struct is_function< _Res (_ArgTypes ...) const volatile &&>  : public true_type { 
# 504
}; 
# 506
template< class _Res, class ..._ArgTypes> 
# 507
struct is_function< _Res (_ArgTypes ..., ...) const volatile>  : public true_type { 
# 508
}; 
# 510
template< class _Res, class ..._ArgTypes> 
# 511
struct is_function< _Res (_ArgTypes ..., ...) const volatile &>  : public true_type { 
# 512
}; 
# 514
template< class _Res, class ..._ArgTypes> 
# 515
struct is_function< _Res (_ArgTypes ..., ...) const volatile &&>  : public true_type { 
# 516
}; 
# 520
template< class > 
# 521
struct __is_null_pointer_helper : public false_type { 
# 522
}; 
# 525
template<> struct __is_null_pointer_helper< nullptr_t>  : public true_type { 
# 526
}; 
# 529
template< class _Tp> 
# 530
struct is_null_pointer : public __is_null_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 532
}; 
# 535
template< class _Tp> 
# 536
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 538
}; 
# 543
template< class _Tp> 
# 544
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 547
}; 
# 550
template< class _Tp> 
# 551
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 553
}; 
# 556
template< class _Tp> 
# 557
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 560
}; 
# 563
template< class _Tp> 
# 564
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 567
}; 
# 569
template< class > struct is_member_pointer; 
# 573
template< class _Tp> 
# 574
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 577
}; 
# 580
template< class _Tp> 
# 581
struct is_compound : public integral_constant< bool, !is_fundamental< _Tp> ::value>  { 
# 582
}; 
# 584
template< class _Tp> 
# 585
struct __is_member_pointer_helper : public false_type { 
# 586
}; 
# 588
template< class _Tp, class _Cp> 
# 589
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 590
}; 
# 593
template< class _Tp> 
# 594
struct is_member_pointer : public __is_member_pointer_helper< typename remove_cv< _Tp> ::type> ::type { 
# 596
}; 
# 600
template< class _Tp> 
# 601
struct __is_referenceable : public __or_< is_object< _Tp> , is_reference< _Tp> > ::type { 
# 603
}; 
# 605
template< class _Res, class ..._Args> 
# 606
struct __is_referenceable< _Res (_Args ...)>  : public true_type { 
# 608
}; 
# 610
template< class _Res, class ..._Args> 
# 611
struct __is_referenceable< _Res (_Args ..., ...)>  : public true_type { 
# 613
}; 
# 618
template< class > 
# 619
struct is_const : public false_type { 
# 620
}; 
# 622
template< class _Tp> 
# 623
struct is_const< const _Tp>  : public true_type { 
# 624
}; 
# 627
template< class > 
# 628
struct is_volatile : public false_type { 
# 629
}; 
# 631
template< class _Tp> 
# 632
struct is_volatile< volatile _Tp>  : public true_type { 
# 633
}; 
# 636
template< class _Tp> 
# 637
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 639
}; 
# 642
template< class _Tp> 
# 643
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 645
}; 
# 648
template< class _Tp> 
# 649
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 651
}; 
# 655
template< class _Tp> 
# 656
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 658
}; 
# 661
template< class _Tp> 
# 662
struct is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 664
}; 
# 667
template< class _Tp> 
# 668
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 670
}; 
# 673
template< class _Tp> 
# 674
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 676
}; 
# 688
template< class _Tp> 
# 689
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 691
}; 
# 693
template< class _Tp, bool 
# 694
 = is_arithmetic< _Tp> ::value> 
# 695
struct __is_signed_helper : public false_type { 
# 696
}; 
# 698
template< class _Tp> 
# 699
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 701
}; 
# 704
template< class _Tp> 
# 705
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 707
}; 
# 710
template< class _Tp> 
# 711
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > > ::type { 
# 713
}; 
# 718
template< class > struct add_rvalue_reference; 
# 725
template< class _Tp> inline typename add_rvalue_reference< _Tp> ::type declval() noexcept; 
# 728
template< class , unsigned  = 0U> struct extent; 
# 731
template< class > struct remove_all_extents; 
# 734
template< class _Tp> 
# 735
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 737
}; 
# 739
template< class _Tp> 
# 740
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > > ::type { 
# 742
}; 
# 749
struct __do_is_destructible_impl { 
# 751
template< class _Tp, class  = __decltype(((declval< _Tp &> ().~_Tp())))> static true_type __test(int); 
# 754
template< class > static false_type __test(...); 
# 756
}; 
# 758
template< class _Tp> 
# 759
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 762
typedef __decltype((__test< _Tp> (0))) type; 
# 763
}; 
# 765
template< class _Tp, bool 
# 766
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 769
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 772
template< class _Tp> 
# 773
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 776
}; 
# 778
template< class _Tp> 
# 779
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 780
}; 
# 782
template< class _Tp> 
# 783
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 784
}; 
# 787
template< class _Tp> 
# 788
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 790
}; 
# 796
struct __do_is_nt_destructible_impl { 
# 798
template< class _Tp> static integral_constant< bool, noexcept((declval< _Tp &> ().~_Tp()))>  __test(int); 
# 802
template< class > static false_type __test(...); 
# 804
}; 
# 806
template< class _Tp> 
# 807
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 810
typedef __decltype((__test< _Tp> (0))) type; 
# 811
}; 
# 813
template< class _Tp, bool 
# 814
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 817
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 820
template< class _Tp> 
# 821
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 824
}; 
# 826
template< class _Tp> 
# 827
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 828
}; 
# 830
template< class _Tp> 
# 831
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 832
}; 
# 835
template< class _Tp> 
# 836
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 838
}; 
# 840
struct __do_is_default_constructible_impl { 
# 842
template< class _Tp, class  = __decltype((_Tp()))> static true_type __test(int); 
# 845
template< class > static false_type __test(...); 
# 847
}; 
# 849
template< class _Tp> 
# 850
struct __is_default_constructible_impl : public __do_is_default_constructible_impl { 
# 853
typedef __decltype((__test< _Tp> (0))) type; 
# 854
}; 
# 856
template< class _Tp> 
# 857
struct __is_default_constructible_atom : public __and_< __not_< is_void< _Tp> > , __is_default_constructible_impl< _Tp> > ::type { 
# 860
}; 
# 862
template< class _Tp, bool  = is_array< _Tp> ::value> struct __is_default_constructible_safe; 
# 870
template< class _Tp> 
# 871
struct __is_default_constructible_safe< _Tp, true>  : public __and_< __is_array_known_bounds< _Tp> , __is_default_constructible_atom< typename remove_all_extents< _Tp> ::type> > ::type { 
# 875
}; 
# 877
template< class _Tp> 
# 878
struct __is_default_constructible_safe< _Tp, false>  : public __is_default_constructible_atom< _Tp> ::type { 
# 880
}; 
# 883
template< class _Tp> 
# 884
struct is_default_constructible : public __is_default_constructible_safe< _Tp> ::type { 
# 886
}; 
# 900
struct __do_is_static_castable_impl { 
# 902
template< class _From, class _To, class 
# 903
 = __decltype((static_cast< _To>(declval< _From> ())))> static true_type 
# 902
__test(int); 
# 906
template< class , class > static false_type __test(...); 
# 908
}; 
# 910
template< class _From, class _To> 
# 911
struct __is_static_castable_impl : public __do_is_static_castable_impl { 
# 914
typedef __decltype((__test< _From, _To> (0))) type; 
# 915
}; 
# 917
template< class _From, class _To> 
# 918
struct __is_static_castable_safe : public __is_static_castable_impl< _From, _To> ::type { 
# 920
}; 
# 923
template< class _From, class _To> 
# 924
struct __is_static_castable : public integral_constant< bool, __is_static_castable_safe< _From, _To> ::value>  { 
# 927
}; 
# 934
struct __do_is_direct_constructible_impl { 
# 936
template< class _Tp, class _Arg, class 
# 937
 = __decltype((::new (_Tp)(declval< _Arg> ())))> static true_type 
# 936
__test(int); 
# 940
template< class , class > static false_type __test(...); 
# 942
}; 
# 944
template< class _Tp, class _Arg> 
# 945
struct __is_direct_constructible_impl : public __do_is_direct_constructible_impl { 
# 948
typedef __decltype((__test< _Tp, _Arg> (0))) type; 
# 949
}; 
# 951
template< class _Tp, class _Arg> 
# 952
struct __is_direct_constructible_new_safe : public __and_< is_destructible< _Tp> , __is_direct_constructible_impl< _Tp, _Arg> > ::type { 
# 955
}; 
# 957
template< class , class > struct is_same; 
# 960
template< class , class > struct is_base_of; 
# 963
template< class > struct remove_reference; 
# 966
template< class _From, class _To, bool 
# 967
 = __not_< __or_< is_void< _From> , is_function< _From> > > ::value> struct __is_base_to_derived_ref; 
# 973
template< class _From, class _To> 
# 974
struct __is_base_to_derived_ref< _From, _To, true>  { 
# 977
typedef typename remove_cv< typename remove_reference< _From> ::type> ::type __src_t; 
# 979
typedef typename remove_cv< typename remove_reference< _To> ::type> ::type __dst_t; 
# 981
typedef __and_< __not_< is_same< typename remove_cv< typename remove_reference< _From> ::type> ::type, typename remove_cv< typename remove_reference< _To> ::type> ::type> > , is_base_of< typename remove_cv< typename remove_reference< _From> ::type> ::type, typename remove_cv< typename remove_reference< _To> ::type> ::type> >  type; 
# 982
static constexpr bool value = (type::value); 
# 983
}; 
# 985
template< class _From, class _To> 
# 986
struct __is_base_to_derived_ref< _From, _To, false>  : public false_type { 
# 988
}; 
# 990
template< class _From, class _To, bool 
# 991
 = __and_< is_lvalue_reference< _From> , is_rvalue_reference< _To> > ::value> struct __is_lvalue_to_rvalue_ref; 
# 997
template< class _From, class _To> 
# 998
struct __is_lvalue_to_rvalue_ref< _From, _To, true>  { 
# 1001
typedef typename remove_cv< typename remove_reference< _From> ::type> ::type __src_t; 
# 1003
typedef typename remove_cv< typename remove_reference< _To> ::type> ::type __dst_t; 
# 1006
typedef __and_< __not_< is_function< typename remove_cv< typename remove_reference< _From> ::type> ::type> > , __or_< is_same< typename remove_cv< typename remove_reference< _From> ::type> ::type, typename remove_cv< typename remove_reference< _To> ::type> ::type> , is_base_of< typename remove_cv< typename remove_reference< _To> ::type> ::type, typename remove_cv< typename remove_reference< _From> ::type> ::type> > >  type; 
# 1007
static constexpr bool value = (type::value); 
# 1008
}; 
# 1010
template< class _From, class _To> 
# 1011
struct __is_lvalue_to_rvalue_ref< _From, _To, false>  : public false_type { 
# 1013
}; 
# 1021
template< class _Tp, class _Arg> 
# 1022
struct __is_direct_constructible_ref_cast : public __and_< __is_static_castable< _Arg, _Tp> , __not_< __or_< __is_base_to_derived_ref< _Arg, _Tp> , __is_lvalue_to_rvalue_ref< _Arg, _Tp> > > > ::type { 
# 1027
}; 
# 1029
template< class _Tp, class _Arg> 
# 1030
struct __is_direct_constructible_new : public conditional< is_reference< _Tp> ::value, __is_direct_constructible_ref_cast< _Tp, _Arg> , __is_direct_constructible_new_safe< _Tp, _Arg> > ::type { 
# 1035
}; 
# 1037
template< class _Tp, class _Arg> 
# 1038
struct __is_direct_constructible : public __is_direct_constructible_new< _Tp, _Arg> ::type { 
# 1040
}; 
# 1047
struct __do_is_nary_constructible_impl { 
# 1049
template< class _Tp, class ..._Args, class 
# 1050
 = __decltype((_Tp(declval< _Args> ()...)))> static true_type 
# 1049
__test(int); 
# 1053
template< class , class ...> static false_type __test(...); 
# 1055
}; 
# 1057
template< class _Tp, class ..._Args> 
# 1058
struct __is_nary_constructible_impl : public __do_is_nary_constructible_impl { 
# 1061
typedef __decltype((__test< _Tp, _Args...> (0))) type; 
# 1062
}; 
# 1064
template< class _Tp, class ..._Args> 
# 1065
struct __is_nary_constructible : public __is_nary_constructible_impl< _Tp, _Args...> ::type { 
# 1068
static_assert((sizeof...(_Args) > (1)), "Only useful for > 1 arguments");
# 1070
}; 
# 1072
template< class _Tp, class ..._Args> 
# 1073
struct __is_constructible_impl : public __is_nary_constructible< _Tp, _Args...>  { 
# 1075
}; 
# 1077
template< class _Tp, class _Arg> 
# 1078
struct __is_constructible_impl< _Tp, _Arg>  : public __is_direct_constructible< _Tp, _Arg>  { 
# 1080
}; 
# 1082
template< class _Tp> 
# 1083
struct __is_constructible_impl< _Tp>  : public is_default_constructible< _Tp>  { 
# 1085
}; 
# 1088
template< class _Tp, class ..._Args> 
# 1089
struct is_constructible : public __is_constructible_impl< _Tp, _Args...> ::type { 
# 1091
}; 
# 1093
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 1096
template< class _Tp> 
# 1097
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1098
}; 
# 1100
template< class _Tp> 
# 1101
struct __is_copy_constructible_impl< _Tp, true>  : public is_constructible< _Tp, const _Tp &>  { 
# 1103
}; 
# 1106
template< class _Tp> 
# 1107
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 1109
}; 
# 1111
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 1114
template< class _Tp> 
# 1115
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 1116
}; 
# 1118
template< class _Tp> 
# 1119
struct __is_move_constructible_impl< _Tp, true>  : public is_constructible< _Tp, _Tp &&>  { 
# 1121
}; 
# 1124
template< class _Tp> 
# 1125
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 1127
}; 
# 1129
template< class _Tp> 
# 1130
struct __is_nt_default_constructible_atom : public integral_constant< bool, noexcept((_Tp()))>  { 
# 1132
}; 
# 1134
template< class _Tp, bool  = is_array< _Tp> ::value> struct __is_nt_default_constructible_impl; 
# 1137
template< class _Tp> 
# 1138
struct __is_nt_default_constructible_impl< _Tp, true>  : public __and_< __is_array_known_bounds< _Tp> , __is_nt_default_constructible_atom< typename remove_all_extents< _Tp> ::type> > ::type { 
# 1142
}; 
# 1144
template< class _Tp> 
# 1145
struct __is_nt_default_constructible_impl< _Tp, false>  : public __is_nt_default_constructible_atom< _Tp>  { 
# 1147
}; 
# 1150
template< class _Tp> 
# 1151
struct is_nothrow_default_constructible : public __and_< is_default_constructible< _Tp> , __is_nt_default_constructible_impl< _Tp> > ::type { 
# 1154
}; 
# 1156
template< class _Tp, class ..._Args> 
# 1157
struct __is_nt_constructible_impl : public integral_constant< bool, noexcept((_Tp(declval< _Args> ()...)))>  { 
# 1159
}; 
# 1161
template< class _Tp, class _Arg> 
# 1162
struct __is_nt_constructible_impl< _Tp, _Arg>  : public integral_constant< bool, noexcept((static_cast< _Tp>(declval< _Arg> ())))>  { 
# 1165
}; 
# 1167
template< class _Tp> 
# 1168
struct __is_nt_constructible_impl< _Tp>  : public is_nothrow_default_constructible< _Tp>  { 
# 1170
}; 
# 1173
template< class _Tp, class ..._Args> 
# 1174
struct is_nothrow_constructible : public __and_< is_constructible< _Tp, _Args...> , __is_nt_constructible_impl< _Tp, _Args...> > ::type { 
# 1177
}; 
# 1179
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 1182
template< class _Tp> 
# 1183
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1184
}; 
# 1186
template< class _Tp> 
# 1187
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, const _Tp &>  { 
# 1189
}; 
# 1192
template< class _Tp> 
# 1193
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp>  { 
# 1195
}; 
# 1197
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 1200
template< class _Tp> 
# 1201
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 1202
}; 
# 1204
template< class _Tp> 
# 1205
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public is_nothrow_constructible< _Tp, _Tp &&>  { 
# 1207
}; 
# 1210
template< class _Tp> 
# 1211
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp>  { 
# 1213
}; 
# 1215
template< class _Tp, class _Up> 
# 1216
class __is_assignable_helper { 
# 1218
template< class _Tp1, class _Up1, class 
# 1219
 = __decltype((declval< _Tp1> () = declval< _Up1> ()))> static true_type 
# 1218
__test(int); 
# 1223
template< class , class > static false_type __test(...); 
# 1228
public: typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 1229
}; 
# 1232
template< class _Tp, class _Up> 
# 1233
struct is_assignable : public __is_assignable_helper< _Tp, _Up> ::type { 
# 1235
}; 
# 1237
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1240
template< class _Tp> 
# 1241
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1242
}; 
# 1244
template< class _Tp> 
# 1245
struct __is_copy_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, const _Tp &>  { 
# 1247
}; 
# 1250
template< class _Tp> 
# 1251
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp>  { 
# 1253
}; 
# 1255
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1258
template< class _Tp> 
# 1259
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1260
}; 
# 1262
template< class _Tp> 
# 1263
struct __is_move_assignable_impl< _Tp, true>  : public is_assignable< _Tp &, _Tp &&>  { 
# 1265
}; 
# 1268
template< class _Tp> 
# 1269
struct is_move_assignable : public __is_move_assignable_impl< _Tp>  { 
# 1271
}; 
# 1273
template< class _Tp, class _Up> 
# 1274
struct __is_nt_assignable_impl : public integral_constant< bool, noexcept((declval< _Tp> () = declval< _Up> ()))>  { 
# 1276
}; 
# 1279
template< class _Tp, class _Up> 
# 1280
struct is_nothrow_assignable : public __and_< is_assignable< _Tp, _Up> , __is_nt_assignable_impl< _Tp, _Up> > ::type { 
# 1283
}; 
# 1285
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1288
template< class _Tp> 
# 1289
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1290
}; 
# 1292
template< class _Tp> 
# 1293
struct __is_nt_copy_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, const _Tp &>  { 
# 1295
}; 
# 1298
template< class _Tp> 
# 1299
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1301
}; 
# 1303
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1306
template< class _Tp> 
# 1307
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1308
}; 
# 1310
template< class _Tp> 
# 1311
struct __is_nt_move_assignable_impl< _Tp, true>  : public is_nothrow_assignable< _Tp &, _Tp &&>  { 
# 1313
}; 
# 1316
template< class _Tp> 
# 1317
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1319
}; 
# 1322
template< class _Tp, class ..._Args> 
# 1323
struct is_trivially_constructible : public __and_< is_constructible< _Tp, _Args...> , integral_constant< bool, __is_trivially_constructible(_Tp, _Args...)> > ::type { 
# 1326
}; 
# 1329
template< class _Tp> 
# 1330
struct is_trivially_default_constructible : public is_trivially_constructible< _Tp> ::type { 
# 1332
}; 
# 1335
template< class _Tp> 
# 1336
struct is_trivially_copy_constructible : public __and_< is_copy_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> > ::type { 
# 1340
}; 
# 1343
template< class _Tp> 
# 1344
struct is_trivially_move_constructible : public __and_< is_move_constructible< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> > ::type { 
# 1348
}; 
# 1351
template< class _Tp, class _Up> 
# 1352
struct is_trivially_assignable : public __and_< is_assignable< _Tp, _Up> , integral_constant< bool, __is_trivially_assignable(_Tp, _Up)> > ::type { 
# 1356
}; 
# 1359
template< class _Tp> 
# 1360
struct is_trivially_copy_assignable : public __and_< is_copy_assignable< _Tp> , integral_constant< bool, __is_trivially_assignable(_Tp &, const _Tp &)> > ::type { 
# 1364
}; 
# 1367
template< class _Tp> 
# 1368
struct is_trivially_move_assignable : public __and_< is_move_assignable< _Tp> , integral_constant< bool, __is_trivially_assignable(_Tp &, _Tp &&)> > ::type { 
# 1372
}; 
# 1375
template< class _Tp> 
# 1376
struct is_trivially_destructible : public __and_< is_destructible< _Tp> , integral_constant< bool, __has_trivial_destructor(_Tp)> > ::type { 
# 1379
}; 
# 1382
template< class _Tp> 
# 1383
struct has_trivial_default_constructor : public integral_constant< bool, __has_trivial_constructor(_Tp)>  { 
# 1385
} __attribute((__deprecated__)); 
# 1388
template< class _Tp> 
# 1389
struct has_trivial_copy_constructor : public integral_constant< bool, __has_trivial_copy(_Tp)>  { 
# 1391
} __attribute((__deprecated__)); 
# 1394
template< class _Tp> 
# 1395
struct has_trivial_copy_assign : public integral_constant< bool, __has_trivial_assign(_Tp)>  { 
# 1397
} __attribute((__deprecated__)); 
# 1400
template< class _Tp> 
# 1401
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1403
}; 
# 1409
template< class _Tp> 
# 1410
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1411
}; 
# 1414
template< class > 
# 1415
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1416
}; 
# 1418
template< class _Tp, size_t _Size> 
# 1419
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + rank< _Tp> ::value>  { 
# 1420
}; 
# 1422
template< class _Tp> 
# 1423
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + rank< _Tp> ::value>  { 
# 1424
}; 
# 1427
template< class , unsigned _Uint> 
# 1428
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1429
}; 
# 1431
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1432
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : extent< _Tp, _Uint - (1)> ::value>  { 
# 1436
}; 
# 1438
template< class _Tp, unsigned _Uint> 
# 1439
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : extent< _Tp, _Uint - (1)> ::value>  { 
# 1443
}; 
# 1449
template< class , class > 
# 1450
struct is_same : public false_type { 
# 1451
}; 
# 1453
template< class _Tp> 
# 1454
struct is_same< _Tp, _Tp>  : public true_type { 
# 1455
}; 
# 1458
template< class _Base, class _Derived> 
# 1459
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1461
}; 
# 1463
template< class _From, class _To, bool 
# 1464
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1466
struct __is_convertible_helper { 
# 1467
typedef typename is_void< _To> ::type type; }; 
# 1469
template< class _From, class _To> 
# 1470
class __is_convertible_helper< _From, _To, false>  { 
# 1472
template< class _To1> static void __test_aux(_To1); 
# 1475
template< class _From1, class _To1, class 
# 1476
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1475
__test(int); 
# 1480
template< class , class > static false_type __test(...); 
# 1485
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1486
}; 
# 1490
template< class _From, class _To> 
# 1491
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1493
}; 
# 1499
template< class _Tp> 
# 1500
struct remove_const { 
# 1501
typedef _Tp type; }; 
# 1503
template< class _Tp> 
# 1504
struct remove_const< const _Tp>  { 
# 1505
typedef _Tp type; }; 
# 1508
template< class _Tp> 
# 1509
struct remove_volatile { 
# 1510
typedef _Tp type; }; 
# 1512
template< class _Tp> 
# 1513
struct remove_volatile< volatile _Tp>  { 
# 1514
typedef _Tp type; }; 
# 1517
template< class _Tp> 
# 1518
struct remove_cv { 
# 1521
typedef typename remove_const< typename remove_volatile< _Tp> ::type> ::type type; 
# 1522
}; 
# 1525
template< class _Tp> 
# 1526
struct add_const { 
# 1527
typedef const _Tp type; }; 
# 1530
template< class _Tp> 
# 1531
struct add_volatile { 
# 1532
typedef volatile _Tp type; }; 
# 1535
template< class _Tp> 
# 1536
struct add_cv { 
# 1539
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1540
}; 
# 1574
template< class _Tp> 
# 1575
struct remove_reference { 
# 1576
typedef _Tp type; }; 
# 1578
template< class _Tp> 
# 1579
struct remove_reference< _Tp &>  { 
# 1580
typedef _Tp type; }; 
# 1582
template< class _Tp> 
# 1583
struct remove_reference< _Tp &&>  { 
# 1584
typedef _Tp type; }; 
# 1586
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1587
struct __add_lvalue_reference_helper { 
# 1588
typedef _Tp type; }; 
# 1590
template< class _Tp> 
# 1591
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1592
typedef _Tp &type; }; 
# 1595
template< class _Tp> 
# 1596
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1598
}; 
# 1600
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1601
struct __add_rvalue_reference_helper { 
# 1602
typedef _Tp type; }; 
# 1604
template< class _Tp> 
# 1605
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1606
typedef _Tp &&type; }; 
# 1609
template< class _Tp> 
# 1610
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1612
}; 
# 1631
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1634
template< class _Unqualified> 
# 1635
struct __cv_selector< _Unqualified, false, false>  { 
# 1636
typedef _Unqualified __type; }; 
# 1638
template< class _Unqualified> 
# 1639
struct __cv_selector< _Unqualified, false, true>  { 
# 1640
typedef volatile _Unqualified __type; }; 
# 1642
template< class _Unqualified> 
# 1643
struct __cv_selector< _Unqualified, true, false>  { 
# 1644
typedef const _Unqualified __type; }; 
# 1646
template< class _Unqualified> 
# 1647
struct __cv_selector< _Unqualified, true, true>  { 
# 1648
typedef const volatile _Unqualified __type; }; 
# 1650
template< class _Qualified, class _Unqualified, bool 
# 1651
_IsConst = is_const< _Qualified> ::value, bool 
# 1652
_IsVol = is_volatile< _Qualified> ::value> 
# 1653
class __match_cv_qualifiers { 
# 1655
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1658
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1659
}; 
# 1662
template< class _Tp> 
# 1663
struct __make_unsigned { 
# 1664
typedef _Tp __type; }; 
# 1667
template<> struct __make_unsigned< char>  { 
# 1668
typedef unsigned char __type; }; 
# 1671
template<> struct __make_unsigned< signed char>  { 
# 1672
typedef unsigned char __type; }; 
# 1675
template<> struct __make_unsigned< short>  { 
# 1676
typedef unsigned short __type; }; 
# 1679
template<> struct __make_unsigned< int>  { 
# 1680
typedef unsigned __type; }; 
# 1683
template<> struct __make_unsigned< long>  { 
# 1684
typedef unsigned long __type; }; 
# 1687
template<> struct __make_unsigned< long long>  { 
# 1688
typedef unsigned long long __type; }; 
# 1692
template<> struct __make_unsigned< wchar_t>  : public __make_unsigned< int>  { 
# 1693
}; 
# 1718
template< class _Tp, bool 
# 1719
_IsInt = is_integral< _Tp> ::value, bool 
# 1720
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1723
template< class _Tp> 
# 1724
class __make_unsigned_selector< _Tp, true, false>  { 
# 1726
typedef __make_unsigned< typename remove_cv< _Tp> ::type>  __unsignedt; 
# 1727
typedef typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type __unsigned_type; 
# 1728
typedef __match_cv_qualifiers< _Tp, typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type>  __cv_unsigned; 
# 1731
public: typedef typename __match_cv_qualifiers< _Tp, typename __make_unsigned< typename remove_cv< _Tp> ::type> ::__type> ::__type __type; 
# 1732
}; 
# 1734
template< class _Tp> 
# 1735
class __make_unsigned_selector< _Tp, false, true>  { 
# 1738
typedef unsigned char __smallest; 
# 1739
static const bool __b0 = (sizeof(_Tp) <= sizeof(__smallest)); 
# 1740
static const bool __b1 = (sizeof(_Tp) <= sizeof(unsigned short)); 
# 1741
static const bool __b2 = (sizeof(_Tp) <= sizeof(unsigned)); 
# 1742
typedef conditional< __b2, unsigned, unsigned long>  __cond2; 
# 1743
typedef typename conditional< __b2, unsigned, unsigned long> ::type __cond2_type; 
# 1744
typedef conditional< __b1, unsigned short, typename conditional< __b2, unsigned, unsigned long> ::type>  __cond1; 
# 1745
typedef typename conditional< __b1, unsigned short, typename conditional< __b2, unsigned, unsigned long> ::type> ::type __cond1_type; 
# 1748
public: typedef typename conditional< __b0, unsigned char, typename conditional< __b1, unsigned short, typename conditional< __b2, unsigned, unsigned long> ::type> ::type> ::type __type; 
# 1749
}; 
# 1755
template< class _Tp> 
# 1756
struct make_unsigned { 
# 1757
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1761
template<> struct make_unsigned< bool> ; 
# 1765
template< class _Tp> 
# 1766
struct __make_signed { 
# 1767
typedef _Tp __type; }; 
# 1770
template<> struct __make_signed< char>  { 
# 1771
typedef signed char __type; }; 
# 1774
template<> struct __make_signed< unsigned char>  { 
# 1775
typedef signed char __type; }; 
# 1778
template<> struct __make_signed< unsigned short>  { 
# 1779
typedef signed short __type; }; 
# 1782
template<> struct __make_signed< unsigned>  { 
# 1783
typedef signed int __type; }; 
# 1786
template<> struct __make_signed< unsigned long>  { 
# 1787
typedef signed long __type; }; 
# 1790
template<> struct __make_signed< unsigned long long>  { 
# 1791
typedef signed long long __type; }; 
# 1801
template<> struct __make_signed< char16_t>  : public __make_signed< unsigned short>  { 
# 1802
}; 
# 1804
template<> struct __make_signed< char32_t>  : public __make_signed< unsigned>  { 
# 1805
}; 
# 1830
template< class _Tp, bool 
# 1831
_IsInt = is_integral< _Tp> ::value, bool 
# 1832
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1835
template< class _Tp> 
# 1836
class __make_signed_selector< _Tp, true, false>  { 
# 1838
typedef __make_signed< typename remove_cv< _Tp> ::type>  __signedt; 
# 1839
typedef typename __make_signed< typename remove_cv< _Tp> ::type> ::__type __signed_type; 
# 1840
typedef __match_cv_qualifiers< _Tp, typename __make_signed< typename remove_cv< _Tp> ::type> ::__type>  __cv_signed; 
# 1843
public: typedef typename __match_cv_qualifiers< _Tp, typename __make_signed< typename remove_cv< _Tp> ::type> ::__type> ::__type __type; 
# 1844
}; 
# 1846
template< class _Tp> 
# 1847
class __make_signed_selector< _Tp, false, true>  { 
# 1850
typedef signed char __smallest; 
# 1851
static const bool __b0 = (sizeof(_Tp) <= sizeof(__smallest)); 
# 1852
static const bool __b1 = (sizeof(_Tp) <= sizeof(signed short)); 
# 1853
static const bool __b2 = (sizeof(_Tp) <= sizeof(signed int)); 
# 1854
typedef conditional< __b2, signed int, signed long>  __cond2; 
# 1855
typedef typename conditional< __b2, signed int, signed long> ::type __cond2_type; 
# 1856
typedef conditional< __b1, signed short, typename conditional< __b2, signed int, signed long> ::type>  __cond1; 
# 1857
typedef typename conditional< __b1, signed short, typename conditional< __b2, signed int, signed long> ::type> ::type __cond1_type; 
# 1860
public: typedef typename conditional< __b0, signed char, typename conditional< __b1, signed short, typename conditional< __b2, signed int, signed long> ::type> ::type> ::type __type; 
# 1861
}; 
# 1867
template< class _Tp> 
# 1868
struct make_signed { 
# 1869
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1873
template<> struct make_signed< bool> ; 
# 1888
template< class _Tp> 
# 1889
struct remove_extent { 
# 1890
typedef _Tp type; }; 
# 1892
template< class _Tp, size_t _Size> 
# 1893
struct remove_extent< _Tp [_Size]>  { 
# 1894
typedef _Tp type; }; 
# 1896
template< class _Tp> 
# 1897
struct remove_extent< _Tp []>  { 
# 1898
typedef _Tp type; }; 
# 1901
template< class _Tp> 
# 1902
struct remove_all_extents { 
# 1903
typedef _Tp type; }; 
# 1905
template< class _Tp, size_t _Size> 
# 1906
struct remove_all_extents< _Tp [_Size]>  { 
# 1907
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1909
template< class _Tp> 
# 1910
struct remove_all_extents< _Tp []>  { 
# 1911
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 1925
template< class _Tp, class > 
# 1926
struct __remove_pointer_helper { 
# 1927
typedef _Tp type; }; 
# 1929
template< class _Tp, class _Up> 
# 1930
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 1931
typedef _Up type; }; 
# 1934
template< class _Tp> 
# 1935
struct remove_pointer : public __remove_pointer_helper< _Tp, typename remove_cv< _Tp> ::type>  { 
# 1937
}; 
# 1940
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 1942
struct __add_pointer_helper { 
# 1943
typedef _Tp type; }; 
# 1945
template< class _Tp> 
# 1946
struct __add_pointer_helper< _Tp, true>  { 
# 1947
typedef typename remove_reference< _Tp> ::type *type; }; 
# 1949
template< class _Tp> 
# 1950
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 1952
}; 
# 1964
template< size_t _Len> 
# 1965
struct __aligned_storage_msa { 
# 1967
union __type { 
# 1969
unsigned char __data[_Len]; 
# 1970
struct __attribute((__aligned__)) { } __align; 
# 1971
}; 
# 1972
}; 
# 1984
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 1986
struct aligned_storage { 
# 1988
union type { 
# 1990
unsigned char __data[_Len]; 
# 1991
struct __attribute((__aligned__(_Align))) { } __align; 
# 1992
}; 
# 1993
}; 
# 1995
template< class ..._Types> 
# 1996
struct __strictest_alignment { 
# 1998
static const size_t _S_alignment = (0); 
# 1999
static const size_t _S_size = (0); 
# 2000
}; 
# 2002
template< class _Tp, class ..._Types> 
# 2003
struct __strictest_alignment< _Tp, _Types...>  { 
# 2005
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 2008
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 2011
}; 
# 2023
template< size_t _Len, class ..._Types> 
# 2024
struct aligned_union { 
# 2027
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 2029
private: using __strictest = __strictest_alignment< _Types...> ; 
# 2030
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 2034
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 2036
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 2037
}; 
# 2039
template< size_t _Len, class ..._Types> const size_t 
# 2040
aligned_union< _Len, _Types...> ::alignment_value; 
# 2044
template< class _Up, bool 
# 2045
_IsArray = is_array< _Up> ::value, bool 
# 2046
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 2050
template< class _Up> 
# 2051
struct __decay_selector< _Up, false, false>  { 
# 2052
typedef typename remove_cv< _Up> ::type __type; }; 
# 2054
template< class _Up> 
# 2055
struct __decay_selector< _Up, true, false>  { 
# 2056
typedef typename remove_extent< _Up> ::type *__type; }; 
# 2058
template< class _Up> 
# 2059
struct __decay_selector< _Up, false, true>  { 
# 2060
typedef typename add_pointer< _Up> ::type __type; }; 
# 2063
template< class _Tp> 
# 2064
class decay { 
# 2066
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 2069
public: typedef typename __decay_selector< typename remove_reference< _Tp> ::type> ::__type type; 
# 2070
}; 
# 2072
template< class _Tp> class reference_wrapper; 
# 2076
template< class _Tp> 
# 2077
struct __strip_reference_wrapper { 
# 2079
typedef _Tp __type; 
# 2080
}; 
# 2082
template< class _Tp> 
# 2083
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 2085
typedef _Tp &__type; 
# 2086
}; 
# 2088
template< class _Tp> 
# 2089
struct __decay_and_strip { 
# 2092
typedef typename __strip_reference_wrapper< typename decay< _Tp> ::type> ::__type __type; 
# 2093
}; 
# 2098
template< bool , class _Tp = void> 
# 2099
struct enable_if { 
# 2100
}; 
# 2103
template< class _Tp> 
# 2104
struct enable_if< true, _Tp>  { 
# 2105
typedef _Tp type; }; 
# 2107
template< class ..._Cond> using _Require = typename enable_if< __and_< _Cond...> ::value> ::type; 
# 2112
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 2113
struct conditional { 
# 2114
typedef _Iftrue type; }; 
# 2117
template< class _Iftrue, class _Iffalse> 
# 2118
struct conditional< false, _Iftrue, _Iffalse>  { 
# 2119
typedef _Iffalse type; }; 
# 2122
template< class ..._Tp> struct common_type; 
# 2127
struct __do_common_type_impl { 
# 2129
template< class _Tp, class _Up> static __success_type< typename decay< __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ()))> ::type>  _S_test(int); 
# 2134
template< class , class > static __failure_type _S_test(...); 
# 2136
}; 
# 2138
template< class _Tp, class _Up> 
# 2139
struct __common_type_impl : private __do_common_type_impl { 
# 2142
typedef __decltype((_S_test< _Tp, _Up> (0))) type; 
# 2143
}; 
# 2145
struct __do_member_type_wrapper { 
# 2147
template< class _Tp> static __success_type< typename _Tp::type>  _S_test(int); 
# 2150
template< class > static __failure_type _S_test(...); 
# 2152
}; 
# 2154
template< class _Tp> 
# 2155
struct __member_type_wrapper : private __do_member_type_wrapper { 
# 2158
typedef __decltype((_S_test< _Tp> (0))) type; 
# 2159
}; 
# 2161
template< class _CTp, class ..._Args> 
# 2162
struct __expanded_common_type_wrapper { 
# 2164
typedef common_type< typename _CTp::type, _Args...>  type; 
# 2165
}; 
# 2167
template< class ..._Args> 
# 2168
struct __expanded_common_type_wrapper< __failure_type, _Args...>  { 
# 2169
typedef __failure_type type; }; 
# 2171
template< class _Tp> 
# 2172
struct common_type< _Tp>  { 
# 2173
typedef typename decay< _Tp> ::type type; }; 
# 2175
template< class _Tp, class _Up> 
# 2176
struct common_type< _Tp, _Up>  : public __common_type_impl< _Tp, _Up> ::type { 
# 2178
}; 
# 2180
template< class _Tp, class _Up, class ..._Vp> 
# 2181
struct common_type< _Tp, _Up, _Vp...>  : public __expanded_common_type_wrapper< typename __member_type_wrapper< common_type< _Tp, _Up> > ::type, _Vp...> ::type { 
# 2184
}; 
# 2187
template< class _Tp> 
# 2188
struct underlying_type { 
# 2190
typedef __underlying_type(_Tp) type; 
# 2191
}; 
# 2193
template< class _Tp> 
# 2194
struct __declval_protector { 
# 2196
static const bool __stop = false; 
# 2197
static typename add_rvalue_reference< _Tp> ::type __delegate(); 
# 2198
}; 
# 2200
template< class _Tp> inline typename add_rvalue_reference< _Tp> ::type 
# 2202
declval() noexcept 
# 2203
{ 
# 2204
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2206
return __declval_protector< _Tp> ::__delegate(); 
# 2207
} 
# 2210
template< class _Signature> class result_of; 
# 2218
struct __result_of_memfun_ref_impl { 
# 2220
template< class _Fp, class _Tp1, class ..._Args> static __success_type< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...)))>  _S_test(int); 
# 2225
template< class ...> static __failure_type _S_test(...); 
# 2227
}; 
# 2229
template< class _MemPtr, class _Arg, class ..._Args> 
# 2230
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2233
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2234
}; 
# 2237
struct __result_of_memfun_deref_impl { 
# 2239
template< class _Fp, class _Tp1, class ..._Args> static __success_type< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...)))>  _S_test(int); 
# 2244
template< class ...> static __failure_type _S_test(...); 
# 2246
}; 
# 2248
template< class _MemPtr, class _Arg, class ..._Args> 
# 2249
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2252
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2253
}; 
# 2256
struct __result_of_memobj_ref_impl { 
# 2258
template< class _Fp, class _Tp1> static __success_type< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ()))>  _S_test(int); 
# 2263
template< class , class > static __failure_type _S_test(...); 
# 2265
}; 
# 2267
template< class _MemPtr, class _Arg> 
# 2268
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2271
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2272
}; 
# 2275
struct __result_of_memobj_deref_impl { 
# 2277
template< class _Fp, class _Tp1> static __success_type< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ()))>  _S_test(int); 
# 2282
template< class , class > static __failure_type _S_test(...); 
# 2284
}; 
# 2286
template< class _MemPtr, class _Arg> 
# 2287
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2290
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2291
}; 
# 2293
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2296
template< class _Res, class _Class, class _Arg> 
# 2297
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2300
typedef typename remove_cv< typename remove_reference< _Arg> ::type> ::type _Argval; 
# 2301
typedef _Res (_Class::*_MemPtr); 
# 2306
typedef typename conditional< __or_< is_same< typename remove_cv< typename remove_reference< _Arg> ::type> ::type, _Class> , is_base_of< _Class, typename remove_cv< typename remove_reference< _Arg> ::type> ::type> > ::value, __result_of_memobj_ref< _Res (_Class::*), _Arg> , __result_of_memobj_deref< _Res (_Class::*), _Arg> > ::type::type type; 
# 2307
}; 
# 2309
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2312
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2313
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2316
typedef typename remove_cv< typename remove_reference< _Arg> ::type> ::type _Argval; 
# 2317
typedef _Res (_Class::*_MemPtr); 
# 2322
typedef typename conditional< __or_< is_same< typename remove_cv< typename remove_reference< _Arg> ::type> ::type, _Class> , is_base_of< _Class, typename remove_cv< typename remove_reference< _Arg> ::type> ::type> > ::value, __result_of_memfun_ref< _Res (_Class::*), _Arg, _Args...> , __result_of_memfun_deref< _Res (_Class::*), _Arg, _Args...> > ::type::type type; 
# 2323
}; 
# 2325
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2326
struct __result_of_impl { 
# 2328
typedef __failure_type type; 
# 2329
}; 
# 2331
template< class _MemPtr, class _Arg> 
# 2332
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< typename decay< _MemPtr> ::type, _Arg>  { 
# 2334
}; 
# 2336
template< class _MemPtr, class _Arg, class ..._Args> 
# 2337
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< typename decay< _MemPtr> ::type, _Arg, _Args...>  { 
# 2339
}; 
# 2342
struct __result_of_other_impl { 
# 2344
template< class _Fn, class ..._Args> static __success_type< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...)))>  _S_test(int); 
# 2349
template< class ...> static __failure_type _S_test(...); 
# 2351
}; 
# 2353
template< class _Functor, class ..._ArgTypes> 
# 2354
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2357
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2358
}; 
# 2360
template< class _Functor, class ..._ArgTypes> 
# 2361
struct result_of< _Functor (_ArgTypes ...)>  : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2371
}; 
# 2407
template< class ...> using __void_t = void; 
# 2426
}
# 59 "/usr/include/c++/5/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 74
template< class _Tp> constexpr _Tp &&
# 76
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 77
{ return static_cast< _Tp &&>(__t); } 
# 85
template< class _Tp> constexpr _Tp &&
# 87
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 88
{ 
# 89
static_assert((!std::is_lvalue_reference< _Tp> ::value), "template argument substituting _Tp is an lvalue reference type");
# 91
return static_cast< _Tp &&>(__t); 
# 92
} 
# 99
template< class _Tp> constexpr typename remove_reference< _Tp> ::type &&
# 101
move(_Tp &&__t) noexcept 
# 102
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 105
template< class _Tp> 
# 106
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 108
}; 
# 118
template< class _Tp> constexpr typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&> ::type 
# 121
move_if_noexcept(_Tp &__x) noexcept 
# 122
{ return std::move(__x); } 
# 133
template< class _Tp> inline _Tp *
# 135
addressof(_Tp &__r) noexcept 
# 136
{ return std::__addressof(__r); } 
# 139
template< class _Tp, class _Up = _Tp> inline _Tp 
# 141
__exchange(_Tp &__obj, _Up &&__new_val) 
# 142
{ 
# 143
_Tp __old_val = std::move(__obj); 
# 144
__obj = std::forward< _Up> (__new_val); 
# 145
return __old_val; 
# 146
} 
# 150
}
# 159
namespace std __attribute((__visibility__("default"))) { 
# 174
template< class _Tp> inline void 
# 176
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 181
{ 
# 185
_Tp __tmp = std::move(__a); 
# 186
__a = std::move(__b); 
# 187
__b = std::move(__tmp); 
# 188
} 
# 193
template< class _Tp, size_t _Nm> inline void 
# 195
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(noexcept(swap(*(__a), *(__b)))) 
# 199
{ 
# 200
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 201
swap((__a)[__n], (__b)[__n]); }  
# 202
} 
# 206
}
# 65 "/usr/include/c++/5/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76
struct piecewise_construct_t { }; 
# 79
constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t(); 
# 82
template< class ...> class tuple; 
# 85
template< size_t ...> struct _Index_tuple; 
# 95
template< class _T1, class _T2> 
# 96
struct pair { 
# 98
typedef _T1 first_type; 
# 99
typedef _T2 second_type; 
# 101
_T1 first; 
# 102
_T2 second; 
# 108
constexpr pair() : first(), second() 
# 109
{ } 
# 112
constexpr pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 113
{ } 
# 121
template< class _U1, class _U2, class  = typename enable_if< __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value> ::type> constexpr 
# 124
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 125
{ } 
# 127
constexpr pair(const pair &) = default;
# 128
constexpr pair(pair &&) = default;
# 131
template< class _U1, class  = typename enable_if< is_convertible< _U1, _T1> ::value> ::type> constexpr 
# 133
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 134
{ } 
# 136
template< class _U2, class  = typename enable_if< is_convertible< _U2, _T2> ::value> ::type> constexpr 
# 138
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 139
{ } 
# 141
template< class _U1, class _U2, class  = typename enable_if< __and_< is_convertible< _U1, _T1> , is_convertible< _U2, _T2> > ::value> ::type> constexpr 
# 144
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 145
{ } 
# 147
template< class _U1, class _U2, class  = typename enable_if< __and_< is_convertible< _U1, _T1> , is_convertible< _U2, _T2> > ::value> ::type> constexpr 
# 150
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 152
{ } 
# 154
template< class ..._Args1, class ..._Args2> inline pair(piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 158
pair &operator=(const pair &__p) 
# 159
{ 
# 160
(first) = (__p.first); 
# 161
(second) = (__p.second); 
# 162
return *this; 
# 163
} 
# 166
pair &operator=(pair &&__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 169
{ 
# 170
(first) = std::forward< first_type> (__p.first); 
# 171
(second) = std::forward< second_type> (__p.second); 
# 172
return *this; 
# 173
} 
# 175
template< class _U1, class _U2> pair &
# 177
operator=(const std::pair< _U1, _U2>  &__p) 
# 178
{ 
# 179
(first) = (__p.first); 
# 180
(second) = (__p.second); 
# 181
return *this; 
# 182
} 
# 184
template< class _U1, class _U2> pair &
# 186
operator=(std::pair< _U1, _U2>  &&__p) 
# 187
{ 
# 188
(first) = std::forward< _U1> ((__p.first)); 
# 189
(second) = std::forward< _U2> ((__p.second)); 
# 190
return *this; 
# 191
} 
# 194
void swap(pair &__p) noexcept(noexcept(swap(first, __p.first)) && noexcept(swap(second, __p.second))) 
# 197
{ 
# 198
using std::swap;
# 199
swap(first, __p.first); 
# 200
swap(second, __p.second); 
# 201
} 
# 204
private: template< class ..._Args1, size_t ..._Indexes1, class ...
# 205
_Args2, size_t ..._Indexes2> inline 
# 204
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 209
}; 
# 212
template< class _T1, class _T2> constexpr bool 
# 214
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 215
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 218
template< class _T1, class _T2> constexpr bool 
# 220
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 221
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 222
} 
# 225
template< class _T1, class _T2> constexpr bool 
# 227
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 228
{ return !(__x == __y); } 
# 231
template< class _T1, class _T2> constexpr bool 
# 233
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 234
{ return __y < __x; } 
# 237
template< class _T1, class _T2> constexpr bool 
# 239
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 240
{ return !(__y < __x); } 
# 243
template< class _T1, class _T2> constexpr bool 
# 245
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 246
{ return !(__x < __y); } 
# 252
template< class _T1, class _T2> inline void 
# 254
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept((__x.swap(__y)))) 
# 256
{ (__x.swap(__y)); } 
# 273
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 276
make_pair(_T1 &&__x, _T2 &&__y) 
# 277
{ 
# 278
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 279
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 280
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 281
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 282
} 
# 293
}
# 70 "/usr/include/c++/5/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 89
struct input_iterator_tag { }; 
# 92
struct output_iterator_tag { }; 
# 95
struct forward_iterator_tag : public input_iterator_tag { }; 
# 99
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 103
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 116
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 117
_Pointer = _Tp *, class _Reference = _Tp &> 
# 118
struct iterator { 
# 121
typedef _Category iterator_category; 
# 123
typedef _Tp value_type; 
# 125
typedef _Distance difference_type; 
# 127
typedef _Pointer pointer; 
# 129
typedef _Reference reference; 
# 130
}; 
# 143
template< class _Iterator, class  = __void_t< > > 
# 144
struct __iterator_traits { }; 
# 146
template< class _Iterator> 
# 147
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 154
typedef typename _Iterator::iterator_category iterator_category; 
# 155
typedef typename _Iterator::value_type value_type; 
# 156
typedef typename _Iterator::difference_type difference_type; 
# 157
typedef typename _Iterator::pointer pointer; 
# 158
typedef typename _Iterator::reference reference; 
# 159
}; 
# 161
template< class _Iterator> 
# 162
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 163
}; 
# 177
template< class _Tp> 
# 178
struct iterator_traits< _Tp *>  { 
# 180
typedef random_access_iterator_tag iterator_category; 
# 181
typedef _Tp value_type; 
# 182
typedef ptrdiff_t difference_type; 
# 183
typedef _Tp *pointer; 
# 184
typedef _Tp &reference; 
# 185
}; 
# 188
template< class _Tp> 
# 189
struct iterator_traits< const _Tp *>  { 
# 191
typedef random_access_iterator_tag iterator_category; 
# 192
typedef _Tp value_type; 
# 193
typedef ptrdiff_t difference_type; 
# 194
typedef const _Tp *pointer; 
# 195
typedef const _Tp &reference; 
# 196
}; 
# 202
template< class _Iter> inline typename iterator_traits< _Iter> ::iterator_category 
# 204
__iterator_category(const _Iter &) 
# 205
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 211
template< class _Iterator, bool _HasBase> 
# 212
struct _Iter_base { 
# 214
typedef _Iterator iterator_type; 
# 215
static iterator_type _S_base(_Iterator __it) 
# 216
{ return __it; } 
# 217
}; 
# 219
template< class _Iterator> 
# 220
struct _Iter_base< _Iterator, true>  { 
# 222
typedef typename _Iterator::iterator_type iterator_type; 
# 223
static iterator_type _S_base(_Iterator __it) 
# 224
{ return (__it.base()); } 
# 225
}; 
# 228
template< class _InIter> using _RequireInputIter = typename enable_if< is_convertible< typename iterator_traits< _InIter> ::iterator_category, input_iterator_tag> ::value> ::type; 
# 236
}
# 46 "/usr/include/c++/5/debug/debug.h" 3
namespace std { 
# 48
namespace __debug { }
# 49
}
# 54
namespace __gnu_debug { 
# 56
using namespace std::__debug;
# 57
}
# 67 "/usr/include/c++/5/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type 
# 73
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 75
{ 
# 79
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 80
while (__first != __last) 
# 81
{ 
# 82
++__first; 
# 83
++__n; 
# 84
}  
# 85
return __n; 
# 86
} 
# 88
template< class _RandomAccessIterator> inline typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 90
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 92
{ 
# 96
return __last - __first; 
# 97
} 
# 112
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::difference_type 
# 114
distance(_InputIterator __first, _InputIterator __last) 
# 115
{ 
# 117
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 119
} 
# 121
template< class _InputIterator, class _Distance> inline void 
# 123
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 124
{ 
# 127
; 
# 128
while (__n--) { 
# 129
++__i; }  
# 130
} 
# 132
template< class _BidirectionalIterator, class _Distance> inline void 
# 134
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 136
{ 
# 140
if (__n > 0) { 
# 141
while (__n--) { 
# 142
++__i; }  } else { 
# 144
while (__n++) { 
# 145
--__i; }  }  
# 146
} 
# 148
template< class _RandomAccessIterator, class _Distance> inline void 
# 150
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 152
{ 
# 156
__i += __n; 
# 157
} 
# 171
template< class _InputIterator, class _Distance> inline void 
# 173
advance(_InputIterator &__i, _Distance __n) 
# 174
{ 
# 176
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 177
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 178
} 
# 182
template< class _ForwardIterator> inline _ForwardIterator 
# 184
next(_ForwardIterator __x, typename iterator_traits< _ForwardIterator> ::difference_type 
# 185
__n = 1) 
# 186
{ 
# 187
std::advance(__x, __n); 
# 188
return __x; 
# 189
} 
# 191
template< class _BidirectionalIterator> inline _BidirectionalIterator 
# 193
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 194
__n = 1) 
# 195
{ 
# 196
std::advance(__x, -__n); 
# 197
return __x; 
# 198
} 
# 203
}
# 37 "/usr/include/c++/5/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Tp, class  = __void_t< > > struct __has_element_type : public false_type { }; template< class _Tp> struct __has_element_type< _Tp, __void_t< typename _Tp::element_type> >  : public true_type { }; 
# 42
template< class _Tp, class  = __void_t< > > struct __has_difference_type : public false_type { }; template< class _Tp> struct __has_difference_type< _Tp, __void_t< typename _Tp::difference_type> >  : public true_type { }; 
# 44
template< class _Tp, bool  = __has_element_type< _Tp> ::value> struct __ptrtr_elt_type; 
# 47
template< class _Tp> 
# 48
struct __ptrtr_elt_type< _Tp, true>  { 
# 50
typedef typename _Tp::element_type __type; 
# 51
}; 
# 53
template< template< class , class ...>  class _SomePtr, class _Tp, class ...
# 54
_Args> 
# 55
struct __ptrtr_elt_type< _SomePtr< _Tp, _Args...> , false>  { 
# 57
typedef _Tp __type; 
# 58
}; 
# 60
template< class _Tp, bool  = __has_difference_type< _Tp> ::value> 
# 61
struct __ptrtr_diff_type { 
# 63
typedef typename _Tp::difference_type __type; 
# 64
}; 
# 66
template< class _Tp> 
# 67
struct __ptrtr_diff_type< _Tp, false>  { 
# 69
typedef ptrdiff_t __type; 
# 70
}; 
# 72
template< class _Ptr, class _Up> 
# 73
class __ptrtr_rebind_helper { 
# 75
template< class _Ptr2, class _Up2> static constexpr true_type _S_chk(typename _Ptr2::template rebind< _Up2>  *); 
# 79
template< class , class > static constexpr false_type _S_chk(...); 
# 84
public: using __type = __decltype((_S_chk< _Ptr, _Up> (nullptr))); 
# 85
}; 
# 87
template< class _Tp, class _Up, bool 
# 88
 = __ptrtr_rebind_helper< _Tp, _Up> ::__type::value> struct __ptrtr_rebind; 
# 91
template< class _Tp, class _Up> 
# 92
struct __ptrtr_rebind< _Tp, _Up, true>  { 
# 94
typedef typename _Tp::template rebind< _Up>  __type; 
# 95
}; 
# 97
template< template< class , class ...>  class _SomePtr, class _Up, class 
# 98
_Tp, class ..._Args> 
# 99
struct __ptrtr_rebind< _SomePtr< _Tp, _Args...> , _Up, false>  { 
# 101
typedef _SomePtr< _Up, _Args...>  __type; 
# 102
}; 
# 104
template< class _Tp, class  = typename remove_cv< _Tp> ::type> 
# 105
struct __ptrtr_not_void { 
# 107
typedef _Tp __type; 
# 108
}; 
# 110
template< class _Tp> 
# 111
struct __ptrtr_not_void< _Tp, void>  { 
# 113
struct __type { }; 
# 114
}; 
# 116
template< class _Ptr> 
# 117
class __ptrtr_pointer_to { 
# 119
typedef typename __ptrtr_elt_type< _Ptr> ::__type __orig_type; 
# 120
typedef typename __ptrtr_not_void< typename __ptrtr_elt_type< _Ptr> ::__type> ::__type __element_type; 
# 123
public: static _Ptr pointer_to(__element_type &__e) 
# 124
{ return _Ptr::pointer_to(__e); } 
# 125
}; 
# 131
template< class _Ptr> 
# 132
struct pointer_traits : public __ptrtr_pointer_to< _Ptr>  { 
# 135
typedef _Ptr pointer; 
# 137
typedef typename __ptrtr_elt_type< _Ptr> ::__type element_type; 
# 139
typedef typename __ptrtr_diff_type< _Ptr> ::__type difference_type; 
# 141
template< class _Up> using rebind = typename __ptrtr_rebind< _Ptr, _Up> ::__type; 
# 143
}; 
# 149
template< class _Tp> 
# 150
struct pointer_traits< _Tp *>  { 
# 153
typedef _Tp *pointer; 
# 155
typedef _Tp element_type; 
# 157
typedef ptrdiff_t difference_type; 
# 159
template< class _Up> using rebind = _Up *; 
# 168
static pointer pointer_to(typename __ptrtr_not_void< _Tp> ::__type &__r) noexcept 
# 169
{ return std::addressof(__r); } 
# 170
}; 
# 173
}
# 68 "/usr/include/c++/5/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 96
template< class _Iterator> 
# 97
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 105
protected: _Iterator current; 
# 107
typedef iterator_traits< _Iterator>  __traits_type; 
# 110
public: typedef _Iterator iterator_type; 
# 111
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 112
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 113
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 121
reverse_iterator() : current() { } 
# 127
explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 132
reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 133
{ } 
# 139
template< class _Iter> 
# 140
reverse_iterator(const ::std::reverse_iterator< _Iter>  &__x) : current((__x.base())) 
# 141
{ } 
# 147
iterator_type base() const 
# 148
{ return current; } 
# 161
reference operator*() const 
# 162
{ 
# 163
_Iterator __tmp = current; 
# 164
return *(--__tmp); 
# 165
} 
# 173
pointer operator->() const 
# 174
{ return &operator*(); } 
# 182
reverse_iterator &operator++() 
# 183
{ 
# 184
--(current); 
# 185
return *this; 
# 186
} 
# 194
reverse_iterator operator++(int) 
# 195
{ 
# 196
reverse_iterator __tmp = *this; 
# 197
--(current); 
# 198
return __tmp; 
# 199
} 
# 207
reverse_iterator &operator--() 
# 208
{ 
# 209
++(current); 
# 210
return *this; 
# 211
} 
# 219
reverse_iterator operator--(int) 
# 220
{ 
# 221
reverse_iterator __tmp = *this; 
# 222
++(current); 
# 223
return __tmp; 
# 224
} 
# 232
reverse_iterator operator+(difference_type __n) const 
# 233
{ return ((reverse_iterator)((current) - __n)); } 
# 242
reverse_iterator &operator+=(difference_type __n) 
# 243
{ 
# 244
(current) -= __n; 
# 245
return *this; 
# 246
} 
# 254
reverse_iterator operator-(difference_type __n) const 
# 255
{ return ((reverse_iterator)((current) + __n)); } 
# 264
reverse_iterator &operator-=(difference_type __n) 
# 265
{ 
# 266
(current) += __n; 
# 267
return *this; 
# 268
} 
# 276
reference operator[](difference_type __n) const 
# 277
{ return *((*this) + __n); } 
# 278
}; 
# 290
template< class _Iterator> inline bool 
# 292
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 293
__y) 
# 294
{ return (__x.base()) == (__y.base()); } 
# 296
template< class _Iterator> inline bool 
# 298
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 299
__y) 
# 300
{ return (__y.base()) < (__x.base()); } 
# 302
template< class _Iterator> inline bool 
# 304
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 305
__y) 
# 306
{ return !(__x == __y); } 
# 308
template< class _Iterator> inline bool 
# 310
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 311
__y) 
# 312
{ return __y < __x; } 
# 314
template< class _Iterator> inline bool 
# 316
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 317
__y) 
# 318
{ return !(__y < __x); } 
# 320
template< class _Iterator> inline bool 
# 322
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 323
__y) 
# 324
{ return !(__x < __y); } 
# 326
template< class _Iterator> inline typename reverse_iterator< _Iterator> ::difference_type 
# 328
operator-(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 329
__y) 
# 330
{ return (__y.base()) - (__x.base()); } 
# 332
template< class _Iterator> inline reverse_iterator< _Iterator>  
# 334
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 335
__x) 
# 336
{ return ((reverse_iterator< _Iterator> )((__x.base()) - __n)); } 
# 340
template< class _IteratorL, class _IteratorR> inline bool 
# 342
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 343
__y) 
# 344
{ return (__x.base()) == (__y.base()); } 
# 346
template< class _IteratorL, class _IteratorR> inline bool 
# 348
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 349
__y) 
# 350
{ return (__y.base()) < (__x.base()); } 
# 352
template< class _IteratorL, class _IteratorR> inline bool 
# 354
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 355
__y) 
# 356
{ return !(__x == __y); } 
# 358
template< class _IteratorL, class _IteratorR> inline bool 
# 360
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 361
__y) 
# 362
{ return __y < __x; } 
# 364
template< class _IteratorL, class _IteratorR> inline bool 
# 366
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 367
__y) 
# 368
{ return !(__y < __x); } 
# 370
template< class _IteratorL, class _IteratorR> inline bool 
# 372
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 373
__y) 
# 374
{ return !(__x < __y); } 
# 376
template< class _IteratorL, class _IteratorR> inline auto 
# 380
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 381
__y)->__decltype(((__y.base()) - (__x.base()))) 
# 388
{ return (__y.base()) - (__x.base()); } 
# 414
template< class _Container> 
# 415
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 419
protected: _Container *container; 
# 423
public: typedef _Container container_type; 
# 427
explicit back_insert_iterator(_Container &__x) : container((&__x)) { } 
# 449
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 450
{ 
# 451
((container)->push_back(__value)); 
# 452
return *this; 
# 453
} 
# 456
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 457
{ 
# 458
((container)->push_back(std::move(__value))); 
# 459
return *this; 
# 460
} 
# 465
back_insert_iterator &operator*() 
# 466
{ return *this; } 
# 470
back_insert_iterator &operator++() 
# 471
{ return *this; } 
# 475
back_insert_iterator operator++(int) 
# 476
{ return *this; } 
# 477
}; 
# 490
template< class _Container> inline back_insert_iterator< _Container>  
# 492
back_inserter(_Container &__x) 
# 493
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 505
template< class _Container> 
# 506
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 510
protected: _Container *container; 
# 514
public: typedef _Container container_type; 
# 517
explicit front_insert_iterator(_Container &__x) : container((&__x)) { } 
# 539
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 540
{ 
# 541
((container)->push_front(__value)); 
# 542
return *this; 
# 543
} 
# 546
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 547
{ 
# 548
((container)->push_front(std::move(__value))); 
# 549
return *this; 
# 550
} 
# 555
front_insert_iterator &operator*() 
# 556
{ return *this; } 
# 560
front_insert_iterator &operator++() 
# 561
{ return *this; } 
# 565
front_insert_iterator operator++(int) 
# 566
{ return *this; } 
# 567
}; 
# 580
template< class _Container> inline front_insert_iterator< _Container>  
# 582
front_inserter(_Container &__x) 
# 583
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 599
template< class _Container> 
# 600
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 604
protected: _Container *container; 
# 605
typename _Container::iterator iter; 
# 609
public: typedef _Container container_type; 
# 615
insert_iterator(_Container &__x, typename _Container::iterator __i) : container((&__x)), iter(__i) 
# 616
{ } 
# 651
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 652
{ 
# 653
(iter) = ((container)->insert(iter, __value)); 
# 654
++(iter); 
# 655
return *this; 
# 656
} 
# 659
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 660
{ 
# 661
(iter) = ((container)->insert(iter, std::move(__value))); 
# 662
++(iter); 
# 663
return *this; 
# 664
} 
# 669
insert_iterator &operator*() 
# 670
{ return *this; } 
# 674
insert_iterator &operator++() 
# 675
{ return *this; } 
# 679
insert_iterator &operator++(int) 
# 680
{ return *this; } 
# 681
}; 
# 694
template< class _Container, class _Iterator> inline insert_iterator< _Container>  
# 696
inserter(_Container &__x, _Iterator __i) 
# 697
{ 
# 698
return insert_iterator< _Container> (__x, (typename _Container::iterator)__i); 
# 700
} 
# 705
}
# 707
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 718
using std::iterator_traits;
# 719
using std::iterator;
# 720
template< class _Iterator, class _Container> 
# 721
class __normal_iterator { 
# 724
protected: _Iterator _M_current; 
# 726
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 729
public: typedef _Iterator iterator_type; 
# 730
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 731
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 732
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 733
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 734
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 736
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 737
{ } 
# 740
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 741
{ } 
# 744
template< class _Iter> 
# 745
__normal_iterator(const __gnu_cxx::__normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 748
__i) noexcept : _M_current((__i.base())) 
# 749
{ } 
# 753
reference operator*() const noexcept 
# 754
{ return *(_M_current); } 
# 757
pointer operator->() const noexcept 
# 758
{ return _M_current; } 
# 761
__normal_iterator &operator++() noexcept 
# 762
{ 
# 763
++(_M_current); 
# 764
return *this; 
# 765
} 
# 768
__normal_iterator operator++(int) noexcept 
# 769
{ return ((__normal_iterator)((_M_current)++)); } 
# 773
__normal_iterator &operator--() noexcept 
# 774
{ 
# 775
--(_M_current); 
# 776
return *this; 
# 777
} 
# 780
__normal_iterator operator--(int) noexcept 
# 781
{ return ((__normal_iterator)((_M_current)--)); } 
# 785
reference operator[](difference_type __n) const noexcept 
# 786
{ return (_M_current)[__n]; } 
# 789
__normal_iterator &operator+=(difference_type __n) noexcept 
# 790
{ (_M_current) += __n; return *this; } 
# 793
__normal_iterator operator+(difference_type __n) const noexcept 
# 794
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 797
__normal_iterator &operator-=(difference_type __n) noexcept 
# 798
{ (_M_current) -= __n; return *this; } 
# 801
__normal_iterator operator-(difference_type __n) const noexcept 
# 802
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 805
const _Iterator &base() const noexcept 
# 806
{ return _M_current; } 
# 807
}; 
# 818
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 820
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 821
__rhs) noexcept 
# 823
{ return (__lhs.base()) == (__rhs.base()); } 
# 825
template< class _Iterator, class _Container> inline bool 
# 827
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 828
__rhs) noexcept 
# 830
{ return (__lhs.base()) == (__rhs.base()); } 
# 832
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 834
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 835
__rhs) noexcept 
# 837
{ return (__lhs.base()) != (__rhs.base()); } 
# 839
template< class _Iterator, class _Container> inline bool 
# 841
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 842
__rhs) noexcept 
# 844
{ return (__lhs.base()) != (__rhs.base()); } 
# 847
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 849
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 850
__rhs) noexcept 
# 852
{ return (__lhs.base()) < (__rhs.base()); } 
# 854
template< class _Iterator, class _Container> inline bool 
# 856
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 857
__rhs) noexcept 
# 859
{ return (__lhs.base()) < (__rhs.base()); } 
# 861
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 863
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 864
__rhs) noexcept 
# 866
{ return (__lhs.base()) > (__rhs.base()); } 
# 868
template< class _Iterator, class _Container> inline bool 
# 870
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 871
__rhs) noexcept 
# 873
{ return (__lhs.base()) > (__rhs.base()); } 
# 875
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 877
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 878
__rhs) noexcept 
# 880
{ return (__lhs.base()) <= (__rhs.base()); } 
# 882
template< class _Iterator, class _Container> inline bool 
# 884
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 885
__rhs) noexcept 
# 887
{ return (__lhs.base()) <= (__rhs.base()); } 
# 889
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 891
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 892
__rhs) noexcept 
# 894
{ return (__lhs.base()) >= (__rhs.base()); } 
# 896
template< class _Iterator, class _Container> inline bool 
# 898
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 899
__rhs) noexcept 
# 901
{ return (__lhs.base()) >= (__rhs.base()); } 
# 907
template< class _IteratorL, class _IteratorR, class _Container> inline auto 
# 911
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 912
__rhs) noexcept->__decltype(((__lhs.base()) - (__rhs.base()))) 
# 919
{ return (__lhs.base()) - (__rhs.base()); } 
# 921
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 923
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 924
__rhs) noexcept 
# 926
{ return (__lhs.base()) - (__rhs.base()); } 
# 928
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 930
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 931
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 933
{ return ((__normal_iterator< _Iterator, _Container> )((__i.base()) + __n)); } 
# 936
}
# 940
namespace std __attribute((__visibility__("default"))) { 
# 958
template< class _Iterator> 
# 959
class move_iterator { 
# 962
protected: _Iterator _M_current; 
# 964
typedef iterator_traits< _Iterator>  __traits_type; 
# 965
typedef typename iterator_traits< _Iterator> ::reference __base_ref; 
# 968
public: typedef _Iterator iterator_type; 
# 969
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 970
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 971
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 973
typedef _Iterator pointer; 
# 978
typedef typename conditional< is_reference< typename iterator_traits< _Iterator> ::reference> ::value, typename remove_reference< typename iterator_traits< _Iterator> ::reference> ::type &&, typename iterator_traits< _Iterator> ::reference> ::type reference; 
# 980
move_iterator() : _M_current() 
# 981
{ } 
# 984
explicit move_iterator(iterator_type __i) : _M_current(__i) 
# 985
{ } 
# 987
template< class _Iter> 
# 988
move_iterator(const std::move_iterator< _Iter>  &__i) : _M_current((__i.base())) 
# 989
{ } 
# 992
iterator_type base() const 
# 993
{ return _M_current; } 
# 996
reference operator*() const 
# 997
{ return static_cast< reference>(*(_M_current)); } 
# 1000
pointer operator->() const 
# 1001
{ return _M_current; } 
# 1004
move_iterator &operator++() 
# 1005
{ 
# 1006
++(_M_current); 
# 1007
return *this; 
# 1008
} 
# 1011
move_iterator operator++(int) 
# 1012
{ 
# 1013
move_iterator __tmp = *this; 
# 1014
++(_M_current); 
# 1015
return __tmp; 
# 1016
} 
# 1019
move_iterator &operator--() 
# 1020
{ 
# 1021
--(_M_current); 
# 1022
return *this; 
# 1023
} 
# 1026
move_iterator operator--(int) 
# 1027
{ 
# 1028
move_iterator __tmp = *this; 
# 1029
--(_M_current); 
# 1030
return __tmp; 
# 1031
} 
# 1034
move_iterator operator+(difference_type __n) const 
# 1035
{ return ((move_iterator)((_M_current) + __n)); } 
# 1038
move_iterator &operator+=(difference_type __n) 
# 1039
{ 
# 1040
(_M_current) += __n; 
# 1041
return *this; 
# 1042
} 
# 1045
move_iterator operator-(difference_type __n) const 
# 1046
{ return ((move_iterator)((_M_current) - __n)); } 
# 1049
move_iterator &operator-=(difference_type __n) 
# 1050
{ 
# 1051
(_M_current) -= __n; 
# 1052
return *this; 
# 1053
} 
# 1056
reference operator[](difference_type __n) const 
# 1057
{ return std::move((_M_current)[__n]); } 
# 1058
}; 
# 1063
template< class _IteratorL, class _IteratorR> inline bool 
# 1065
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1066
__y) 
# 1067
{ return (__x.base()) == (__y.base()); } 
# 1069
template< class _Iterator> inline bool 
# 1071
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1072
__y) 
# 1073
{ return (__x.base()) == (__y.base()); } 
# 1075
template< class _IteratorL, class _IteratorR> inline bool 
# 1077
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1078
__y) 
# 1079
{ return !(__x == __y); } 
# 1081
template< class _Iterator> inline bool 
# 1083
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1084
__y) 
# 1085
{ return !(__x == __y); } 
# 1087
template< class _IteratorL, class _IteratorR> inline bool 
# 1089
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1090
__y) 
# 1091
{ return (__x.base()) < (__y.base()); } 
# 1093
template< class _Iterator> inline bool 
# 1095
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1096
__y) 
# 1097
{ return (__x.base()) < (__y.base()); } 
# 1099
template< class _IteratorL, class _IteratorR> inline bool 
# 1101
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1102
__y) 
# 1103
{ return !(__y < __x); } 
# 1105
template< class _Iterator> inline bool 
# 1107
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1108
__y) 
# 1109
{ return !(__y < __x); } 
# 1111
template< class _IteratorL, class _IteratorR> inline bool 
# 1113
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1114
__y) 
# 1115
{ return __y < __x; } 
# 1117
template< class _Iterator> inline bool 
# 1119
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1120
__y) 
# 1121
{ return __y < __x; } 
# 1123
template< class _IteratorL, class _IteratorR> inline bool 
# 1125
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1126
__y) 
# 1127
{ return !(__x < __y); } 
# 1129
template< class _Iterator> inline bool 
# 1131
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1132
__y) 
# 1133
{ return !(__x < __y); } 
# 1136
template< class _IteratorL, class _IteratorR> inline auto 
# 1138
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1139
__y)->__decltype(((__x.base()) - (__y.base()))) 
# 1141
{ return (__x.base()) - (__y.base()); } 
# 1143
template< class _Iterator> inline auto 
# 1145
operator-(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1146
__y)->__decltype(((__x.base()) - (__y.base()))) 
# 1148
{ return (__x.base()) - (__y.base()); } 
# 1150
template< class _Iterator> inline move_iterator< _Iterator>  
# 1152
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1153
__x) 
# 1154
{ return __x + __n; } 
# 1156
template< class _Iterator> inline move_iterator< _Iterator>  
# 1158
make_move_iterator(_Iterator __i) 
# 1159
{ return ((move_iterator< _Iterator> )(__i)); } 
# 1161
template< class _Iterator, class _ReturnType = typename conditional< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > ::type> inline _ReturnType 
# 1166
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1167
{ return (_ReturnType)__i; } 
# 1172
}
# 33 "/usr/include/c++/5/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 35
namespace __ops { 
# 37
struct _Iter_less_iter { 
# 39
template< class _Iterator1, class _Iterator2> bool 
# 42
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 43
{ return (*__it1) < (*__it2); } 
# 44
}; 
# 47
inline _Iter_less_iter __iter_less_iter() 
# 48
{ return _Iter_less_iter(); } 
# 50
struct _Iter_less_val { 
# 52
template< class _Iterator, class _Value> bool 
# 54
operator()(_Iterator __it, _Value &__val) const 
# 55
{ return (*__it) < __val; } 
# 56
}; 
# 59
inline _Iter_less_val __iter_less_val() 
# 60
{ return _Iter_less_val(); } 
# 63
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 64
{ return _Iter_less_val(); } 
# 66
struct _Val_less_iter { 
# 68
template< class _Value, class _Iterator> bool 
# 70
operator()(_Value &__val, _Iterator __it) const 
# 71
{ return __val < (*__it); } 
# 72
}; 
# 75
inline _Val_less_iter __val_less_iter() 
# 76
{ return _Val_less_iter(); } 
# 79
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 80
{ return _Val_less_iter(); } 
# 82
struct _Iter_equal_to_iter { 
# 84
template< class _Iterator1, class _Iterator2> bool 
# 86
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 87
{ return (*__it1) == (*__it2); } 
# 88
}; 
# 91
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 92
{ return _Iter_equal_to_iter(); } 
# 94
struct _Iter_equal_to_val { 
# 96
template< class _Iterator, class _Value> bool 
# 98
operator()(_Iterator __it, _Value &__val) const 
# 99
{ return (*__it) == __val; } 
# 100
}; 
# 103
inline _Iter_equal_to_val __iter_equal_to_val() 
# 104
{ return _Iter_equal_to_val(); } 
# 107
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 108
{ return _Iter_equal_to_val(); } 
# 110
template< class _Compare> 
# 111
struct _Iter_comp_iter { 
# 113
_Compare _M_comp; 
# 115
_Iter_comp_iter(_Compare __comp) : _M_comp(__comp) 
# 117
{ } 
# 119
template< class _Iterator1, class _Iterator2> bool 
# 122
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 123
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 124
}; 
# 126
template< class _Compare> inline _Iter_comp_iter< _Compare>  
# 129
__iter_comp_iter(_Compare __comp) 
# 130
{ return ((_Iter_comp_iter< _Compare> )(__comp)); } 
# 132
template< class _Compare> 
# 133
struct _Iter_comp_val { 
# 135
_Compare _M_comp; 
# 137
_Iter_comp_val(_Compare __comp) : _M_comp(__comp) 
# 139
{ } 
# 141
template< class _Iterator, class _Value> bool 
# 143
operator()(_Iterator __it, _Value &__val) 
# 144
{ return (bool)(_M_comp)(*__it, __val); } 
# 145
}; 
# 147
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 149
__iter_comp_val(_Compare __comp) 
# 150
{ return ((_Iter_comp_val< _Compare> )(__comp)); } 
# 152
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 154
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 155
{ return ((_Iter_comp_val< _Compare> )((__comp._M_comp))); } 
# 157
template< class _Compare> 
# 158
struct _Val_comp_iter { 
# 160
_Compare _M_comp; 
# 162
_Val_comp_iter(_Compare __comp) : _M_comp(__comp) 
# 164
{ } 
# 166
template< class _Value, class _Iterator> bool 
# 168
operator()(_Value &__val, _Iterator __it) 
# 169
{ return (bool)(_M_comp)(__val, *__it); } 
# 170
}; 
# 172
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 174
__val_comp_iter(_Compare __comp) 
# 175
{ return ((_Val_comp_iter< _Compare> )(__comp)); } 
# 177
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 179
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 180
{ return ((_Val_comp_iter< _Compare> )((__comp._M_comp))); } 
# 182
template< class _Value> 
# 183
struct _Iter_equals_val { 
# 185
_Value &_M_value; 
# 187
_Iter_equals_val(_Value &__value) : _M_value(__value) 
# 189
{ } 
# 191
template< class _Iterator> bool 
# 193
operator()(_Iterator __it) 
# 194
{ return (*__it) == (_M_value); } 
# 195
}; 
# 197
template< class _Value> inline _Iter_equals_val< _Value>  
# 199
__iter_equals_val(_Value &__val) 
# 200
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 202
template< class _Iterator1> 
# 203
struct _Iter_equals_iter { 
# 205
typename std::iterator_traits< _Iterator1> ::reference _M_ref; 
# 207
_Iter_equals_iter(_Iterator1 __it1) : _M_ref(*__it1) 
# 209
{ } 
# 211
template< class _Iterator2> bool 
# 213
operator()(_Iterator2 __it2) 
# 214
{ return (*__it2) == (_M_ref); } 
# 215
}; 
# 217
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 219
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 220
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 222
template< class _Predicate> 
# 223
struct _Iter_pred { 
# 225
_Predicate _M_pred; 
# 227
_Iter_pred(_Predicate __pred) : _M_pred(__pred) 
# 229
{ } 
# 231
template< class _Iterator> bool 
# 233
operator()(_Iterator __it) 
# 234
{ return (bool)(_M_pred)(*__it); } 
# 235
}; 
# 237
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 239
__pred_iter(_Predicate __pred) 
# 240
{ return ((_Iter_pred< _Predicate> )(__pred)); } 
# 242
template< class _Compare, class _Value> 
# 243
struct _Iter_comp_to_val { 
# 245
_Compare _M_comp; 
# 246
_Value &_M_value; 
# 248
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(__comp), _M_value(__value) 
# 250
{ } 
# 252
template< class _Iterator> bool 
# 254
operator()(_Iterator __it) 
# 255
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 256
}; 
# 258
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 260
__iter_comp_val(_Compare __comp, _Value &__val) 
# 261
{ return _Iter_comp_to_val< _Compare, _Value> (__comp, __val); } 
# 263
template< class _Compare, class _Iterator1> 
# 264
struct _Iter_comp_to_iter { 
# 266
_Compare _M_comp; 
# 267
typename std::iterator_traits< _Iterator1> ::reference _M_ref; 
# 269
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(__comp), _M_ref(*__it1) 
# 271
{ } 
# 273
template< class _Iterator2> bool 
# 275
operator()(_Iterator2 __it2) 
# 276
{ return (bool)(_M_comp)(*__it2, _M_ref); } 
# 277
}; 
# 279
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 281
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 282
{ return _Iter_comp_to_iter< _Compare, _Iterator> ((__comp._M_comp), __it); } 
# 284
template< class _Predicate> 
# 285
struct _Iter_negate { 
# 287
_Predicate _M_pred; 
# 289
_Iter_negate(_Predicate __pred) : _M_pred(__pred) 
# 291
{ } 
# 293
template< class _Iterator> bool 
# 295
operator()(_Iterator __it) 
# 296
{ return !((bool)(_M_pred)(*__it)); } 
# 297
}; 
# 299
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 301
__negate(_Iter_pred< _Predicate>  __pred) 
# 302
{ return ((_Iter_negate< _Predicate> )((__pred._M_pred))); } 
# 304
}
# 305
}
# 73 "/usr/include/c++/5/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 118
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 120
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 121
{ 
# 148
swap(*__a, *__b); 
# 150
} 
# 164
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 166
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 167
__first2) 
# 168
{ 
# 174
; 
# 176
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 177
std::iter_swap(__first1, __first2); }  
# 178
return __first2; 
# 179
} 
# 192
template< class _Tp> inline const _Tp &
# 195
min(const _Tp &__a, const _Tp &__b) 
# 196
{ 
# 200
if (__b < __a) { 
# 201
return __b; }  
# 202
return __a; 
# 203
} 
# 216
template< class _Tp> inline const _Tp &
# 219
max(const _Tp &__a, const _Tp &__b) 
# 220
{ 
# 224
if (__a < __b) { 
# 225
return __b; }  
# 226
return __a; 
# 227
} 
# 240
template< class _Tp, class _Compare> inline const _Tp &
# 243
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 244
{ 
# 246
if (__comp(__b, __a)) { 
# 247
return __b; }  
# 248
return __a; 
# 249
} 
# 262
template< class _Tp, class _Compare> inline const _Tp &
# 265
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 266
{ 
# 268
if (__comp(__a, __b)) { 
# 269
return __b; }  
# 270
return __a; 
# 271
} 
# 275
template< class _Iterator> 
# 276
struct _Niter_base : public _Iter_base< _Iterator, __is_normal_iterator< _Iterator> ::__value>  { 
# 278
}; 
# 280
template< class _Iterator> inline typename _Niter_base< _Iterator> ::iterator_type 
# 282
__niter_base(_Iterator __it) 
# 283
{ return std::_Niter_base< _Iterator> ::_S_base(__it); } 
# 286
template< class _Iterator> 
# 287
struct _Miter_base : public _Iter_base< _Iterator, __is_move_iterator< _Iterator> ::__value>  { 
# 289
}; 
# 291
template< class _Iterator> inline typename _Miter_base< _Iterator> ::iterator_type 
# 293
__miter_base(_Iterator __it) 
# 294
{ return std::_Miter_base< _Iterator> ::_S_base(__it); } 
# 302
template< bool , bool , class > 
# 303
struct __copy_move { 
# 305
template< class _II, class _OI> static _OI 
# 307
__copy_m(_II __first, _II __last, _OI __result) 
# 308
{ 
# 309
for (; __first != __last; (++__result), (++__first)) { 
# 310
(*__result) = (*__first); }  
# 311
return __result; 
# 312
} 
# 313
}; 
# 316
template< class _Category> 
# 317
struct __copy_move< true, false, _Category>  { 
# 319
template< class _II, class _OI> static _OI 
# 321
__copy_m(_II __first, _II __last, _OI __result) 
# 322
{ 
# 323
for (; __first != __last; (++__result), (++__first)) { 
# 324
(*__result) = std::move(*__first); }  
# 325
return __result; 
# 326
} 
# 327
}; 
# 331
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 333
template< class _II, class _OI> static _OI 
# 335
__copy_m(_II __first, _II __last, _OI __result) 
# 336
{ 
# 337
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 338
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 339
{ 
# 340
(*__result) = (*__first); 
# 341
++__first; 
# 342
++__result; 
# 343
}  
# 344
return __result; 
# 345
} 
# 346
}; 
# 350
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 352
template< class _II, class _OI> static _OI 
# 354
__copy_m(_II __first, _II __last, _OI __result) 
# 355
{ 
# 356
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 357
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 358
{ 
# 359
(*__result) = std::move(*__first); 
# 360
++__first; 
# 361
++__result; 
# 362
}  
# 363
return __result; 
# 364
} 
# 365
}; 
# 368
template< bool _IsMove> 
# 369
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 371
template< class _Tp> static _Tp *
# 373
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 374
{ 
# 376
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 380
static_assert((__assignable::type::value), "type is not assignable");
# 382
const ptrdiff_t _Num = __last - __first; 
# 383
if (_Num) { 
# 384
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 385
return __result + _Num; 
# 386
} 
# 387
}; 
# 389
template< bool _IsMove, class _II, class _OI> inline _OI 
# 391
__copy_move_a(_II __first, _II __last, _OI __result) 
# 392
{ 
# 393
typedef typename iterator_traits< _II> ::value_type _ValueTypeI; 
# 394
typedef typename iterator_traits< _OI> ::value_type _ValueTypeO; 
# 395
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 396
const bool __simple = (__is_trivial(_ValueTypeI) && __is_pointer< _II> ::__value && __is_pointer< _OI> ::__value && __are_same< typename iterator_traits< _II> ::value_type, typename iterator_traits< _OI> ::value_type> ::__value); 
# 401
return std::__copy_move< _IsMove, __simple, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 403
} 
# 407
template< class _CharT> struct char_traits; 
# 410
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 413
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 416
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 422
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 428
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 434
template< bool _IsMove, class _II, class _OI> inline _OI 
# 436
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 437
{ 
# 438
return (_OI)std::__copy_move_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 441
} 
# 460
template< class _II, class _OI> inline _OI 
# 462
copy(_II __first, _II __last, _OI __result) 
# 463
{ 
# 468
; 
# 470
return std::__copy_move_a2< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 473
} 
# 493
template< class _II, class _OI> inline _OI 
# 495
move(_II __first, _II __last, _OI __result) 
# 496
{ 
# 501
; 
# 503
return std::__copy_move_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 505
} 
# 512
template< bool , bool , class > 
# 513
struct __copy_move_backward { 
# 515
template< class _BI1, class _BI2> static _BI2 
# 517
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 518
{ 
# 519
while (__first != __last) { 
# 520
(*(--__result)) = (*(--__last)); }  
# 521
return __result; 
# 522
} 
# 523
}; 
# 526
template< class _Category> 
# 527
struct __copy_move_backward< true, false, _Category>  { 
# 529
template< class _BI1, class _BI2> static _BI2 
# 531
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 532
{ 
# 533
while (__first != __last) { 
# 534
(*(--__result)) = std::move(*(--__last)); }  
# 535
return __result; 
# 536
} 
# 537
}; 
# 541
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 543
template< class _BI1, class _BI2> static _BI2 
# 545
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 546
{ 
# 547
typename iterator_traits< _BI1> ::difference_type __n; 
# 548
for (__n = (__last - __first); __n > 0; --__n) { 
# 549
(*(--__result)) = (*(--__last)); }  
# 550
return __result; 
# 551
} 
# 552
}; 
# 556
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 558
template< class _BI1, class _BI2> static _BI2 
# 560
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 561
{ 
# 562
typename iterator_traits< _BI1> ::difference_type __n; 
# 563
for (__n = (__last - __first); __n > 0; --__n) { 
# 564
(*(--__result)) = std::move(*(--__last)); }  
# 565
return __result; 
# 566
} 
# 567
}; 
# 570
template< bool _IsMove> 
# 571
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 573
template< class _Tp> static _Tp *
# 575
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 576
{ 
# 578
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 582
static_assert((__assignable::type::value), "type is not assignable");
# 584
const ptrdiff_t _Num = __last - __first; 
# 585
if (_Num) { 
# 586
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 587
return __result - _Num; 
# 588
} 
# 589
}; 
# 591
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 593
__copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result) 
# 594
{ 
# 595
typedef typename iterator_traits< _BI1> ::value_type _ValueType1; 
# 596
typedef typename iterator_traits< _BI2> ::value_type _ValueType2; 
# 597
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 598
const bool __simple = (__is_trivial(_ValueType1) && __is_pointer< _BI1> ::__value && __is_pointer< _BI2> ::__value && __are_same< typename iterator_traits< _BI1> ::value_type, typename iterator_traits< _BI2> ::value_type> ::__value); 
# 603
return std::__copy_move_backward< _IsMove, __simple, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 607
} 
# 609
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 611
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 612
{ 
# 613
return (_BI2)std::__copy_move_backward_a< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)); 
# 616
} 
# 636
template< class _BI1, class _BI2> inline _BI2 
# 638
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 639
{ 
# 646
; 
# 648
return std::__copy_move_backward_a2< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 651
} 
# 672
template< class _BI1, class _BI2> inline _BI2 
# 674
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 675
{ 
# 682
; 
# 684
return std::__copy_move_backward_a2< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 687
} 
# 694
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 697
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 698
__value) 
# 699
{ 
# 700
for (; __first != __last; ++__first) { 
# 701
(*__first) = __value; }  
# 702
} 
# 704
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 707
__fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 708
__value) 
# 709
{ 
# 710
const _Tp __tmp = __value; 
# 711
for (; __first != __last; ++__first) { 
# 712
(*__first) = __tmp; }  
# 713
} 
# 716
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 719
__fill_a(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 720
{ 
# 721
const _Tp __tmp = __c; 
# 722
if (const size_t __len = __last - __first) { 
# 723
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 724
} 
# 738
template< class _ForwardIterator, class _Tp> inline void 
# 740
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 741
{ 
# 745
; 
# 747
std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value); 
# 749
} 
# 751
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 754
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 755
{ 
# 756
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 758
(*__first) = __value; }  
# 759
return __first; 
# 760
} 
# 762
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 765
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 766
{ 
# 767
const _Tp __tmp = __value; 
# 768
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 770
(*__first) = __tmp; }  
# 771
return __first; 
# 772
} 
# 774
template< class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, _Tp *> ::__type 
# 777
__fill_n_a(_Tp *__first, _Size __n, const _Tp &__c) 
# 778
{ 
# 779
std::__fill_a(__first, __first + __n, __c); 
# 780
return __first + __n; 
# 781
} 
# 798
template< class _OI, class _Size, class _Tp> inline _OI 
# 800
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 801
{ 
# 805
return (_OI)std::__fill_n_a(std::__niter_base(__first), __n, __value); 
# 806
} 
# 808
template< bool _BoolType> 
# 809
struct __equal { 
# 811
template< class _II1, class _II2> static bool 
# 813
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 814
{ 
# 815
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 816
if (!((*__first1) == (*__first2))) { 
# 817
return false; }  }  
# 818
return true; 
# 819
} 
# 820
}; 
# 823
template<> struct __equal< true>  { 
# 825
template< class _Tp> static bool 
# 827
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 828
{ 
# 829
if (const size_t __len = __last1 - __first1) { 
# 830
return !(__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len)); }  
# 831
return true; 
# 832
} 
# 833
}; 
# 835
template< class _II1, class _II2> inline bool 
# 837
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 838
{ 
# 839
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 840
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 841
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value && __are_same< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value); 
# 847
return std::__equal< __simple> ::equal(__first1, __last1, __first2); 
# 848
} 
# 850
template< class , class > 
# 851
struct __lc_rai { 
# 853
template< class _II1, class _II2> static _II1 
# 855
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 856
{ return __last1; } 
# 858
template< class _II> static bool 
# 860
__cnd2(_II __first, _II __last) 
# 861
{ return __first != __last; } 
# 862
}; 
# 865
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 867
template< class _RAI1, class _RAI2> static _RAI1 
# 869
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 870
__first2, _RAI2 __last2) 
# 871
{ 
# 873
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 875
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 876
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 877
} 
# 879
template< class _RAI> static bool 
# 881
__cnd2(_RAI, _RAI) 
# 882
{ return true; } 
# 883
}; 
# 885
template< class _II1, class _II2, class _Compare> bool 
# 887
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 888
__first2, _II2 __last2, _Compare 
# 889
__comp) 
# 890
{ 
# 891
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 892
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 893
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 895
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 896
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), (++__first2)) 
# 898
{ 
# 899
if (__comp(__first1, __first2)) { 
# 900
return true; }  
# 901
if (__comp(__first2, __first1)) { 
# 902
return false; }  
# 903
}  
# 904
return (__first1 == __last1) && (__first2 != __last2); 
# 905
} 
# 907
template< bool _BoolType> 
# 908
struct __lexicographical_compare { 
# 910
template< class _II1, class _II2> static bool __lc(_II1, _II1, _II2, _II2); 
# 912
}; 
# 914
template< bool _BoolType> 
# 915
template< class _II1, class _II2> bool 
# 918
__lexicographical_compare< _BoolType> ::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 919
{ 
# 920
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 923
} 
# 926
template<> struct __lexicographical_compare< true>  { 
# 928
template< class _Tp, class _Up> static bool 
# 930
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 931
__first2, const _Up *__last2) 
# 932
{ 
# 933
const size_t __len1 = __last1 - __first1; 
# 934
const size_t __len2 = __last2 - __first2; 
# 935
if (const size_t __len = std::min(__len1, __len2)) { 
# 936
if (int __result = __builtin_memcmp(__first1, __first2, __len)) { 
# 937
return __result < 0; }  }  
# 938
return __len1 < __len2; 
# 939
} 
# 940
}; 
# 942
template< class _II1, class _II2> inline bool 
# 944
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 945
__first2, _II2 __last2) 
# 946
{ 
# 947
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 948
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 949
const bool __simple = (__is_byte< typename iterator_traits< _II1> ::value_type> ::__value && __is_byte< typename iterator_traits< _II2> ::value_type> ::__value && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II1> ::value_type> ::__is_signed) && (!__gnu_cxx::__numeric_traits< typename iterator_traits< _II2> ::value_type> ::__is_signed) && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 956
return std::__lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 958
} 
# 960
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 962
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 963
__val, _Compare __comp) 
# 964
{ 
# 966
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 968
_DistanceType __len = std::distance(__first, __last); 
# 970
while (__len > 0) 
# 971
{ 
# 972
_DistanceType __half = __len >> 1; 
# 973
_ForwardIterator __middle = __first; 
# 974
std::advance(__middle, __half); 
# 975
if (__comp(__middle, __val)) 
# 976
{ 
# 977
__first = __middle; 
# 978
++__first; 
# 979
__len = ((__len - __half) - 1); 
# 980
} else { 
# 982
__len = __half; }  
# 983
}  
# 984
return __first; 
# 985
} 
# 998
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 1000
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1001
__val) 
# 1002
{ 
# 1007
; 
# 1009
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 1011
} 
# 1016
constexpr int __lg(int __n) 
# 1017
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); } 
# 1020
constexpr unsigned __lg(unsigned __n) 
# 1021
{ return ((sizeof(int) * (8)) - (1)) - (__builtin_clz(__n)); } 
# 1024
constexpr long __lg(long __n) 
# 1025
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); } 
# 1028
constexpr unsigned long __lg(unsigned long __n) 
# 1029
{ return ((sizeof(long) * (8)) - (1)) - (__builtin_clzl(__n)); } 
# 1032
constexpr long long __lg(long long __n) 
# 1033
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); } 
# 1036
constexpr unsigned long long __lg(unsigned long long __n) 
# 1037
{ return ((sizeof(long long) * (8)) - (1)) - (__builtin_clzll(__n)); } 
# 1055
template< class _II1, class _II2> inline bool 
# 1057
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1058
{ 
# 1065
; 
# 1067
return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1070
} 
# 1087
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1089
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1090
__first2, _BinaryPredicate __binary_pred) 
# 1091
{ 
# 1095
; 
# 1097
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 1098
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1099
return false; }  }  
# 1100
return true; 
# 1101
} 
# 1215
template< class _II1, class _II2> inline bool 
# 1217
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1218
__first2, _II2 __last2) 
# 1219
{ 
# 1229
; 
# 1230
; 
# 1232
return std::__lexicographical_compare_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1236
} 
# 1251
template< class _II1, class _II2, class _Compare> inline bool 
# 1253
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1254
__first2, _II2 __last2, _Compare __comp) 
# 1255
{ 
# 1259
; 
# 1260
; 
# 1262
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1265
} 
# 1267
template< class _InputIterator1, class _InputIterator2, class 
# 1268
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1270
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1271
__first2, _BinaryPredicate __binary_pred) 
# 1272
{ 
# 1273
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1274
{ 
# 1275
++__first1; 
# 1276
++__first2; 
# 1277
}  
# 1278
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1279
} 
# 1294
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1296
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1297
__first2) 
# 1298
{ 
# 1305
; 
# 1307
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1309
} 
# 1327
template< class _InputIterator1, class _InputIterator2, class 
# 1328
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1330
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1331
__first2, _BinaryPredicate __binary_pred) 
# 1332
{ 
# 1336
; 
# 1338
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1340
} 
# 1428
}
# 43 "/usr/include/c++/5/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 57
template< class _CharT> 
# 58
struct _Char_types { 
# 60
typedef unsigned long int_type; 
# 61
typedef std::streampos pos_type; 
# 62
typedef std::streamoff off_type; 
# 63
typedef mbstate_t state_type; 
# 64
}; 
# 82
template< class _CharT> 
# 83
struct char_traits { 
# 85
typedef _CharT char_type; 
# 86
typedef typename _Char_types< _CharT> ::int_type int_type; 
# 87
typedef typename _Char_types< _CharT> ::pos_type pos_type; 
# 88
typedef typename _Char_types< _CharT> ::off_type off_type; 
# 89
typedef typename _Char_types< _CharT> ::state_type state_type; 
# 92
static void assign(char_type &__c1, const char_type &__c2) 
# 93
{ __c1 = __c2; } 
# 96
static constexpr bool eq(const char_type &__c1, const char_type &__c2) 
# 97
{ return __c1 == __c2; } 
# 100
static constexpr bool lt(const char_type &__c1, const char_type &__c2) 
# 101
{ return __c1 < __c2; } 
# 104
static int compare(const char_type * __s1, const char_type * __s2, std::size_t __n); 
# 107
static std::size_t length(const char_type * __s); 
# 110
static const char_type *find(const char_type * __s, std::size_t __n, const char_type & __a); 
# 113
static char_type *move(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 116
static char_type *copy(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 119
static char_type *assign(char_type * __s, std::size_t __n, char_type __a); 
# 122
static constexpr char_type to_char_type(const int_type &__c) 
# 123
{ return static_cast< char_type>(__c); } 
# 126
static constexpr int_type to_int_type(const char_type &__c) 
# 127
{ return static_cast< int_type>(__c); } 
# 130
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 131
{ return __c1 == __c2; } 
# 134
static constexpr int_type eof() 
# 135
{ return static_cast< int_type>(-1); } 
# 138
static constexpr int_type not_eof(const int_type &__c) 
# 139
{ return (!(eq_int_type)(__c, (eof)())) ? __c : (to_int_type)(char_type()); } 
# 140
}; 
# 142
template< class _CharT> int 
# 145
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, std::size_t __n) 
# 146
{ 
# 147
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 148
if ((lt)(__s1[__i], __s2[__i])) { 
# 149
return -1; } else { 
# 150
if ((lt)(__s2[__i], __s1[__i])) { 
# 151
return 1; }  }  }  
# 152
return 0; 
# 153
} 
# 155
template< class _CharT> std::size_t 
# 158
char_traits< _CharT> ::length(const char_type *__p) 
# 159
{ 
# 160
std::size_t __i = (0); 
# 161
while (!(eq)(__p[__i], char_type())) { 
# 162
++__i; }  
# 163
return __i; 
# 164
} 
# 166
template< class _CharT> const typename char_traits< _CharT> ::char_type *
# 169
char_traits< _CharT> ::find(const char_type *__s, std::size_t __n, const char_type &__a) 
# 170
{ 
# 171
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 172
if ((eq)(__s[__i], __a)) { 
# 173
return __s + __i; }  }  
# 174
return 0; 
# 175
} 
# 177
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 180
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 181
{ 
# 182
return static_cast< _CharT *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 184
} 
# 186
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 189
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 190
{ 
# 192
std::copy(__s2, __s2 + __n, __s1); 
# 193
return __s1; 
# 194
} 
# 196
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 199
char_traits< _CharT> ::assign(char_type *__s, std::size_t __n, char_type __a) 
# 200
{ 
# 202
std::fill_n(__s, __n, __a); 
# 203
return __s; 
# 204
} 
# 207
}
# 209
namespace std __attribute((__visibility__("default"))) { 
# 226
template< class _CharT> 
# 227
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 228
}; 
# 233
template<> struct char_traits< char>  { 
# 235
typedef char char_type; 
# 236
typedef int int_type; 
# 237
typedef streampos pos_type; 
# 238
typedef streamoff off_type; 
# 239
typedef mbstate_t state_type; 
# 242
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 243
{ __c1 = __c2; } 
# 246
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 247
{ return __c1 == __c2; } 
# 250
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 251
{ 
# 253
return (static_cast< unsigned char>(__c1)) < (static_cast< unsigned char>(__c2)); 
# 255
} 
# 258
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 259
{ 
# 260
if (__n == (0)) { 
# 261
return 0; }  
# 262
return __builtin_memcmp(__s1, __s2, __n); 
# 263
} 
# 266
static size_t length(const char_type *__s) 
# 267
{ return __builtin_strlen(__s); } 
# 270
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 271
{ 
# 272
if (__n == (0)) { 
# 273
return 0; }  
# 274
return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); 
# 275
} 
# 278
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 279
{ 
# 280
if (__n == (0)) { 
# 281
return __s1; }  
# 282
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); 
# 283
} 
# 286
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 287
{ 
# 288
if (__n == (0)) { 
# 289
return __s1; }  
# 290
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); 
# 291
} 
# 294
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 295
{ 
# 296
if (__n == (0)) { 
# 297
return __s; }  
# 298
return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); 
# 299
} 
# 302
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 303
{ return static_cast< char_type>(__c); } 
# 308
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 309
{ return static_cast< int_type>(static_cast< unsigned char>(__c)); } 
# 312
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 313
{ return __c1 == __c2; } 
# 316
static constexpr int_type eof() noexcept 
# 317
{ return static_cast< int_type>(-1); } 
# 320
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 321
{ return (__c == eof()) ? 0 : __c; } 
# 322
}; 
# 328
template<> struct char_traits< wchar_t>  { 
# 330
typedef wchar_t char_type; 
# 331
typedef wint_t int_type; 
# 332
typedef streamoff off_type; 
# 333
typedef wstreampos pos_type; 
# 334
typedef mbstate_t state_type; 
# 337
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 338
{ __c1 = __c2; } 
# 341
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 342
{ return __c1 == __c2; } 
# 345
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 346
{ return __c1 < __c2; } 
# 349
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 350
{ 
# 351
if (__n == (0)) { 
# 352
return 0; }  
# 353
return wmemcmp(__s1, __s2, __n); 
# 354
} 
# 357
static size_t length(const char_type *__s) 
# 358
{ return wcslen(__s); } 
# 361
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 362
{ 
# 363
if (__n == (0)) { 
# 364
return 0; }  
# 365
return wmemchr(__s, __a, __n); 
# 366
} 
# 369
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 370
{ 
# 371
if (__n == (0)) { 
# 372
return __s1; }  
# 373
return wmemmove(__s1, __s2, __n); 
# 374
} 
# 377
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 378
{ 
# 379
if (__n == (0)) { 
# 380
return __s1; }  
# 381
return wmemcpy(__s1, __s2, __n); 
# 382
} 
# 385
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 386
{ 
# 387
if (__n == (0)) { 
# 388
return __s; }  
# 389
return wmemset(__s, __a, __n); 
# 390
} 
# 393
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 394
{ return (char_type)__c; } 
# 397
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 398
{ return (int_type)__c; } 
# 401
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 402
{ return __c1 == __c2; } 
# 405
static constexpr int_type eof() noexcept 
# 406
{ return static_cast< int_type>(4294967295U); } 
# 409
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 410
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 411
}; 
# 415
}
# 48 "/usr/include/stdint.h" 3
typedef unsigned char uint8_t; 
# 49
typedef unsigned short uint16_t; 
# 51
typedef unsigned uint32_t; 
# 55
typedef unsigned long uint64_t; 
# 65
typedef signed char int_least8_t; 
# 66
typedef short int_least16_t; 
# 67
typedef int int_least32_t; 
# 69
typedef long int_least64_t; 
# 76
typedef unsigned char uint_least8_t; 
# 77
typedef unsigned short uint_least16_t; 
# 78
typedef unsigned uint_least32_t; 
# 80
typedef unsigned long uint_least64_t; 
# 90
typedef signed char int_fast8_t; 
# 92
typedef long int_fast16_t; 
# 93
typedef long int_fast32_t; 
# 94
typedef long int_fast64_t; 
# 103
typedef unsigned char uint_fast8_t; 
# 105
typedef unsigned long uint_fast16_t; 
# 106
typedef unsigned long uint_fast32_t; 
# 107
typedef unsigned long uint_fast64_t; 
# 119
typedef long intptr_t; 
# 122
typedef unsigned long uintptr_t; 
# 134
typedef long intmax_t; 
# 135
typedef unsigned long uintmax_t; 
# 46 "/usr/include/c++/5/cstdint" 3
namespace std { 
# 48
using ::int8_t;
# 49
using ::int16_t;
# 50
using ::int32_t;
# 51
using ::int64_t;
# 53
using ::int_fast8_t;
# 54
using ::int_fast16_t;
# 55
using ::int_fast32_t;
# 56
using ::int_fast64_t;
# 58
using ::int_least8_t;
# 59
using ::int_least16_t;
# 60
using ::int_least32_t;
# 61
using ::int_least64_t;
# 63
using ::intmax_t;
# 64
using ::intptr_t;
# 66
using ::uint8_t;
# 67
using ::uint16_t;
# 68
using ::uint32_t;
# 69
using ::uint64_t;
# 71
using ::uint_fast8_t;
# 72
using ::uint_fast16_t;
# 73
using ::uint_fast32_t;
# 74
using ::uint_fast64_t;
# 76
using ::uint_least8_t;
# 79
using ::uint_least64_t;
# 81
using ::uintmax_t;
# 82
using ::uintptr_t;
# 83
}
# 422 "/usr/include/c++/5/bits/char_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 427
template<> struct char_traits< char16_t>  { 
# 429
typedef char16_t char_type; 
# 430
typedef uint_least16_t int_type; 
# 431
typedef streamoff off_type; 
# 432
typedef u16streampos pos_type; 
# 433
typedef mbstate_t state_type; 
# 436
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 437
{ __c1 = __c2; } 
# 440
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 441
{ return __c1 == __c2; } 
# 444
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 445
{ return __c1 < __c2; } 
# 448
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 449
{ 
# 450
for (size_t __i = (0); __i < __n; ++__i) { 
# 451
if (lt(__s1[__i], __s2[__i])) { 
# 452
return -1; } else { 
# 453
if (lt(__s2[__i], __s1[__i])) { 
# 454
return 1; }  }  }  
# 455
return 0; 
# 456
} 
# 459
static size_t length(const char_type *__s) 
# 460
{ 
# 461
size_t __i = (0); 
# 462
while (!eq(__s[__i], char_type())) { 
# 463
++__i; }  
# 464
return __i; 
# 465
} 
# 468
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 469
{ 
# 470
for (size_t __i = (0); __i < __n; ++__i) { 
# 471
if (eq(__s[__i], __a)) { 
# 472
return __s + __i; }  }  
# 473
return 0; 
# 474
} 
# 477
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 478
{ 
# 479
if (__n == (0)) { 
# 480
return __s1; }  
# 481
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 483
} 
# 486
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 487
{ 
# 488
if (__n == (0)) { 
# 489
return __s1; }  
# 490
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))); 
# 492
} 
# 495
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 496
{ 
# 497
for (size_t __i = (0); __i < __n; ++__i) { 
# 498
assign(__s[__i], __a); }  
# 499
return __s; 
# 500
} 
# 503
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 504
{ return (char_type)__c; } 
# 507
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 508
{ return (int_type)__c; } 
# 511
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 512
{ return __c1 == __c2; } 
# 515
static constexpr int_type eof() noexcept 
# 516
{ return static_cast< int_type>(-1); } 
# 519
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 520
{ return eq_int_type(__c, eof()) ? 0 : (__c); } 
# 521
}; 
# 524
template<> struct char_traits< char32_t>  { 
# 526
typedef char32_t char_type; 
# 527
typedef uint_least32_t int_type; 
# 528
typedef streamoff off_type; 
# 529
typedef u32streampos pos_type; 
# 530
typedef mbstate_t state_type; 
# 533
static void assign(char_type &__c1, const char_type &__c2) noexcept 
# 534
{ __c1 = __c2; } 
# 537
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 538
{ return __c1 == __c2; } 
# 541
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 542
{ return __c1 < __c2; } 
# 545
static int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 546
{ 
# 547
for (size_t __i = (0); __i < __n; ++__i) { 
# 548
if (lt(__s1[__i], __s2[__i])) { 
# 549
return -1; } else { 
# 550
if (lt(__s2[__i], __s1[__i])) { 
# 551
return 1; }  }  }  
# 552
return 0; 
# 553
} 
# 556
static size_t length(const char_type *__s) 
# 557
{ 
# 558
size_t __i = (0); 
# 559
while (!eq(__s[__i], char_type())) { 
# 560
++__i; }  
# 561
return __i; 
# 562
} 
# 565
static const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 566
{ 
# 567
for (size_t __i = (0); __i < __n; ++__i) { 
# 568
if (eq(__s[__i], __a)) { 
# 569
return __s + __i; }  }  
# 570
return 0; 
# 571
} 
# 574
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 575
{ 
# 576
if (__n == (0)) { 
# 577
return __s1; }  
# 578
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))); 
# 580
} 
# 583
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 584
{ 
# 585
if (__n == (0)) { 
# 586
return __s1; }  
# 587
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))); 
# 589
} 
# 592
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 593
{ 
# 594
for (size_t __i = (0); __i < __n; ++__i) { 
# 595
assign(__s[__i], __a); }  
# 596
return __s; 
# 597
} 
# 600
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 601
{ return (char_type)__c; } 
# 604
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 605
{ return (int_type)__c; } 
# 608
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 609
{ return __c1 == __c2; } 
# 612
static constexpr int_type eof() noexcept 
# 613
{ return static_cast< int_type>(-1); } 
# 616
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 617
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 618
}; 
# 621
}
# 31 "/usr/include/locale.h" 3
extern "C" {
# 53
struct lconv { 
# 57
char *decimal_point; 
# 58
char *thousands_sep; 
# 64
char *grouping; 
# 70
char *int_curr_symbol; 
# 71
char *currency_symbol; 
# 72
char *mon_decimal_point; 
# 73
char *mon_thousands_sep; 
# 74
char *mon_grouping; 
# 75
char *positive_sign; 
# 76
char *negative_sign; 
# 77
char int_frac_digits; 
# 78
char frac_digits; 
# 80
char p_cs_precedes; 
# 82
char p_sep_by_space; 
# 84
char n_cs_precedes; 
# 86
char n_sep_by_space; 
# 93
char p_sign_posn; 
# 94
char n_sign_posn; 
# 97
char int_p_cs_precedes; 
# 99
char int_p_sep_by_space; 
# 101
char int_n_cs_precedes; 
# 103
char int_n_sep_by_space; 
# 110
char int_p_sign_posn; 
# 111
char int_n_sign_posn; 
# 120
}; 
# 124
extern char *setlocale(int __category, const char * __locale) throw(); 
# 127
extern lconv *localeconv() throw(); 
# 151
extern __locale_t newlocale(int __category_mask, const char * __locale, __locale_t __base) throw(); 
# 186
extern __locale_t duplocale(__locale_t __dataset) throw(); 
# 190
extern void freelocale(__locale_t __dataset) throw(); 
# 197
extern __locale_t uselocale(__locale_t __dataset) throw(); 
# 205
}
# 51 "/usr/include/c++/5/clocale" 3
namespace std { 
# 53
using ::lconv;
# 54
using ::setlocale;
# 55
using ::localeconv;
# 56
}
# 48 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 55
}
# 58
namespace std __attribute((__visibility__("default"))) { 
# 62
typedef __locale_t __c_locale; 
# 69
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 70
__out, const int 
# 71
__size __attribute((__unused__)), const char *
# 72
__fmt, ...) 
# 73
{ 
# 75
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 88
__builtin_va_list __args; 
# 89
__builtin_va_start((__args),__fmt); 
# 92
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 97
__builtin_va_end(__args); 
# 100
__gnu_cxx::__uselocale(__old); 
# 108
return __ret; 
# 109
} 
# 112
}
# 28 "/usr/include/ctype.h" 3
extern "C" {
# 47
enum { 
# 48
_ISupper = 256, 
# 49
_ISlower = 512, 
# 50
_ISalpha = 1024, 
# 51
_ISdigit = 2048, 
# 52
_ISxdigit = 4096, 
# 53
_ISspace = 8192, 
# 54
_ISprint = 16384, 
# 55
_ISgraph = 32768, 
# 56
_ISblank = 1, 
# 57
_IScntrl, 
# 58
_ISpunct = 4, 
# 59
_ISalnum = 8
# 60
}; 
# 79
extern const unsigned short **__ctype_b_loc() throw()
# 80
 __attribute((const)); 
# 81
extern const __int32_t **__ctype_tolower_loc() throw()
# 82
 __attribute((const)); 
# 83
extern const __int32_t **__ctype_toupper_loc() throw()
# 84
 __attribute((const)); 
# 110
extern int isalnum(int) throw(); 
# 111
extern int isalpha(int) throw(); 
# 112
extern int iscntrl(int) throw(); 
# 113
extern int isdigit(int) throw(); 
# 114
extern int islower(int) throw(); 
# 115
extern int isgraph(int) throw(); 
# 116
extern int isprint(int) throw(); 
# 117
extern int ispunct(int) throw(); 
# 118
extern int isspace(int) throw(); 
# 119
extern int isupper(int) throw(); 
# 120
extern int isxdigit(int) throw(); 
# 124
extern int tolower(int __c) throw(); 
# 127
extern int toupper(int __c) throw(); 
# 136
extern int isblank(int) throw(); 
# 143
extern int isctype(int __c, int __mask) throw(); 
# 150
extern int isascii(int __c) throw(); 
# 154
extern int toascii(int __c) throw(); 
# 158
extern int _toupper(int) throw(); 
# 159
extern int _tolower(int) throw(); 
# 271
extern int isalnum_l(int, __locale_t) throw(); 
# 272
extern int isalpha_l(int, __locale_t) throw(); 
# 273
extern int iscntrl_l(int, __locale_t) throw(); 
# 274
extern int isdigit_l(int, __locale_t) throw(); 
# 275
extern int islower_l(int, __locale_t) throw(); 
# 276
extern int isgraph_l(int, __locale_t) throw(); 
# 277
extern int isprint_l(int, __locale_t) throw(); 
# 278
extern int ispunct_l(int, __locale_t) throw(); 
# 279
extern int isspace_l(int, __locale_t) throw(); 
# 280
extern int isupper_l(int, __locale_t) throw(); 
# 281
extern int isxdigit_l(int, __locale_t) throw(); 
# 283
extern int isblank_l(int, __locale_t) throw(); 
# 287
extern int __tolower_l(int __c, __locale_t __l) throw(); 
# 288
extern int tolower_l(int __c, __locale_t __l) throw(); 
# 291
extern int __toupper_l(int __c, __locale_t __l) throw(); 
# 292
extern int toupper_l(int __c, __locale_t __l) throw(); 
# 347
}
# 62 "/usr/include/c++/5/cctype" 3
namespace std { 
# 64
using ::isalnum;
# 65
using ::isalpha;
# 66
using ::iscntrl;
# 67
using ::isdigit;
# 68
using ::isgraph;
# 69
using ::islower;
# 70
using ::isprint;
# 71
using ::ispunct;
# 72
using ::isspace;
# 73
using ::isupper;
# 74
using ::isxdigit;
# 75
using ::tolower;
# 76
using ::toupper;
# 77
}
# 85
namespace std { 
# 87
using ::isblank;
# 88
}
# 44 "/usr/include/c++/5/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55
class locale; 
# 57
template< class _Facet> bool has_facet(const locale &) throw(); 
# 61
template< class _Facet> const _Facet &use_facet(const locale &); 
# 66
template< class _CharT> inline bool isspace(_CharT, const locale &); 
# 70
template< class _CharT> inline bool isprint(_CharT, const locale &); 
# 74
template< class _CharT> inline bool iscntrl(_CharT, const locale &); 
# 78
template< class _CharT> inline bool isupper(_CharT, const locale &); 
# 82
template< class _CharT> inline bool islower(_CharT, const locale &); 
# 86
template< class _CharT> inline bool isalpha(_CharT, const locale &); 
# 90
template< class _CharT> inline bool isdigit(_CharT, const locale &); 
# 94
template< class _CharT> inline bool ispunct(_CharT, const locale &); 
# 98
template< class _CharT> inline bool isxdigit(_CharT, const locale &); 
# 102
template< class _CharT> inline bool isalnum(_CharT, const locale &); 
# 106
template< class _CharT> inline bool isgraph(_CharT, const locale &); 
# 111
template< class _CharT> inline bool isblank(_CharT, const locale &); 
# 116
template< class _CharT> inline _CharT toupper(_CharT, const locale &); 
# 120
template< class _CharT> inline _CharT tolower(_CharT, const locale &); 
# 125
struct ctype_base; 
# 126
template< class _CharT> class ctype; 
# 128
template<> class ctype< char> ; 
# 130
template<> class ctype< wchar_t> ; 
# 132
template< class _CharT> class ctype_byname; 
# 136
class codecvt_base; 
# 137
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 139
template<> class codecvt< char, char, __mbstate_t> ; 
# 141
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 143
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 148
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class num_get; 
# 150
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class num_put; 
# 153
inline namespace __cxx11 { 
# 154
template< class _CharT> class numpunct; 
# 155
template< class _CharT> class numpunct_byname; 
# 156
}
# 158
inline namespace __cxx11 { 
# 160
template< class _CharT> class collate; 
# 162
template< class _CharT> class collate_byname; 
# 164
}
# 167
class time_base; 
# 168
inline namespace __cxx11 { 
# 169
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get; 
# 171
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class time_get_byname; 
# 173
}
# 174
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put; 
# 176
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class time_put_byname; 
# 180
class money_base; 
# 181
inline namespace __cxx11 { 
# 182
template< class _CharT, class _InIter = istreambuf_iterator< _CharT, char_traits< _CharT> > > class money_get; 
# 184
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT, char_traits< _CharT> > > class money_put; 
# 186
}
# 187
inline namespace __cxx11 { 
# 188
template< class _CharT, bool _Intl = false> class moneypunct; 
# 190
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 192
}
# 195
class messages_base; 
# 196
inline namespace __cxx11 { 
# 197
template< class _CharT> class messages; 
# 199
template< class _CharT> class messages_byname; 
# 201
}
# 204
}
# 30 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr.h" 3
#pragma GCC visibility push ( default )
# 72 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3
struct sched_param { 
# 74
int __sched_priority; 
# 75
}; 
# 77
extern "C" {
# 81
extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) throw(); 
# 85
extern int unshare(int __flags) throw(); 
# 88
extern int sched_getcpu() throw(); 
# 91
extern int setns(int __fd, int __nstype) throw(); 
# 95
}
# 103
struct __sched_param { 
# 105
int __sched_priority; 
# 106
}; 
# 118
typedef unsigned long __cpu_mask; 
# 128
typedef 
# 126
struct { 
# 127
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 128
} cpu_set_t; 
# 201
extern "C" {
# 203
extern int __sched_cpucount(::size_t __setsize, const cpu_set_t * __setp) throw(); 
# 205
extern cpu_set_t *__sched_cpualloc(::size_t __count) throw() __attribute((__warn_unused_result__)); 
# 206
extern void __sched_cpufree(cpu_set_t * __set) throw(); 
# 208
}
# 48 "/usr/include/sched.h" 3
extern "C" {
# 51
extern int sched_setparam(__pid_t __pid, const sched_param * __param) throw(); 
# 55
extern int sched_getparam(__pid_t __pid, sched_param * __param) throw(); 
# 58
extern int sched_setscheduler(__pid_t __pid, int __policy, const sched_param * __param) throw(); 
# 62
extern int sched_getscheduler(__pid_t __pid) throw(); 
# 65
extern int sched_yield() throw(); 
# 68
extern int sched_get_priority_max(int __algorithm) throw(); 
# 71
extern int sched_get_priority_min(int __algorithm) throw(); 
# 74
extern int sched_rr_get_interval(__pid_t __pid, timespec * __t) throw(); 
# 118
extern int sched_setaffinity(__pid_t __pid, ::size_t __cpusetsize, const cpu_set_t * __cpuset) throw(); 
# 122
extern int sched_getaffinity(__pid_t __pid, ::size_t __cpusetsize, cpu_set_t * __cpuset) throw(); 
# 126
}
# 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3
typedef long __jmp_buf[8]; 
# 33 "/usr/include/pthread.h" 3
enum { 
# 34
PTHREAD_CREATE_JOINABLE, 
# 36
PTHREAD_CREATE_DETACHED
# 38
}; 
# 43
enum { 
# 44
PTHREAD_MUTEX_TIMED_NP, 
# 45
PTHREAD_MUTEX_RECURSIVE_NP, 
# 46
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 47
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 50
PTHREAD_MUTEX_NORMAL = 0, 
# 51
PTHREAD_MUTEX_RECURSIVE, 
# 52
PTHREAD_MUTEX_ERRORCHECK, 
# 53
PTHREAD_MUTEX_DEFAULT = 0, 
# 57
PTHREAD_MUTEX_FAST_NP = 0
# 59
}; 
# 65
enum { 
# 66
PTHREAD_MUTEX_STALLED, 
# 67
PTHREAD_MUTEX_STALLED_NP = 0, 
# 68
PTHREAD_MUTEX_ROBUST, 
# 69
PTHREAD_MUTEX_ROBUST_NP = 1
# 70
}; 
# 77
enum { 
# 78
PTHREAD_PRIO_NONE, 
# 79
PTHREAD_PRIO_INHERIT, 
# 80
PTHREAD_PRIO_PROTECT
# 81
}; 
# 115
enum { 
# 116
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 117
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 118
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 119
PTHREAD_RWLOCK_DEFAULT_NP = 0
# 120
}; 
# 156
enum { 
# 157
PTHREAD_INHERIT_SCHED, 
# 159
PTHREAD_EXPLICIT_SCHED
# 161
}; 
# 166
enum { 
# 167
PTHREAD_SCOPE_SYSTEM, 
# 169
PTHREAD_SCOPE_PROCESS
# 171
}; 
# 176
enum { 
# 177
PTHREAD_PROCESS_PRIVATE, 
# 179
PTHREAD_PROCESS_SHARED
# 181
}; 
# 190
struct _pthread_cleanup_buffer { 
# 192
void (*__routine)(void *); 
# 193
void *__arg; 
# 194
int __canceltype; 
# 195
_pthread_cleanup_buffer *__prev; 
# 196
}; 
# 200
enum { 
# 201
PTHREAD_CANCEL_ENABLE, 
# 203
PTHREAD_CANCEL_DISABLE
# 205
}; 
# 207
enum { 
# 208
PTHREAD_CANCEL_DEFERRED, 
# 210
PTHREAD_CANCEL_ASYNCHRONOUS
# 212
}; 
# 228
extern "C" {
# 233
extern int pthread_create(pthread_t *__restrict__ __newthread, const pthread_attr_t *__restrict__ __attr, void *(* __start_routine)(void *), void *__restrict__ __arg) throw()
# 236
 __attribute((__nonnull__(1, 3))); 
# 242
extern void pthread_exit(void * __retval) __attribute((__noreturn__)); 
# 250
extern int pthread_join(pthread_t __th, void ** __thread_return); 
# 255
extern int pthread_tryjoin_np(pthread_t __th, void ** __thread_return) throw(); 
# 263
extern int pthread_timedjoin_np(pthread_t __th, void ** __thread_return, const timespec * __abstime); 
# 271
extern int pthread_detach(pthread_t __th) throw(); 
# 275
extern pthread_t pthread_self() throw() __attribute((const)); 
# 278
extern __attribute((gnu_inline)) inline int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw()
# 279
 __attribute((const)); 
# 287
extern int pthread_attr_init(pthread_attr_t * __attr) throw() __attribute((__nonnull__(1))); 
# 290
extern int pthread_attr_destroy(pthread_attr_t * __attr) throw()
# 291
 __attribute((__nonnull__(1))); 
# 294
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr, int * __detachstate) throw()
# 296
 __attribute((__nonnull__(1, 2))); 
# 299
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) throw()
# 301
 __attribute((__nonnull__(1))); 
# 305
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr, ::size_t * __guardsize) throw()
# 307
 __attribute((__nonnull__(1, 2))); 
# 310
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, ::size_t __guardsize) throw()
# 312
 __attribute((__nonnull__(1))); 
# 316
extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ __attr, sched_param *__restrict__ __param) throw()
# 318
 __attribute((__nonnull__(1, 2))); 
# 321
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict__ __attr, const sched_param *__restrict__ __param) throw()
# 323
 __attribute((__nonnull__(1, 2))); 
# 326
extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __policy) throw()
# 328
 __attribute((__nonnull__(1, 2))); 
# 331
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) throw()
# 332
 __attribute((__nonnull__(1))); 
# 335
extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __inherit) throw()
# 337
 __attribute((__nonnull__(1, 2))); 
# 340
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) throw()
# 342
 __attribute((__nonnull__(1))); 
# 346
extern int pthread_attr_getscope(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __scope) throw()
# 348
 __attribute((__nonnull__(1, 2))); 
# 351
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) throw()
# 352
 __attribute((__nonnull__(1))); 
# 355
extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr) throw()
# 357
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 363
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) throw()
# 365
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 368
extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ __attr, ::size_t *__restrict__ __stacksize) throw()
# 370
 __attribute((__nonnull__(1, 2))); 
# 375
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, ::size_t __stacksize) throw()
# 377
 __attribute((__nonnull__(1))); 
# 381
extern int pthread_attr_getstack(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr, ::size_t *__restrict__ __stacksize) throw()
# 384
 __attribute((__nonnull__(1, 2, 3))); 
# 389
extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, ::size_t __stacksize) throw()
# 390
 __attribute((__nonnull__(1))); 
# 396
extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, ::size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 399
 __attribute((__nonnull__(1, 3))); 
# 403
extern int pthread_attr_getaffinity_np(const pthread_attr_t * __attr, ::size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 406
 __attribute((__nonnull__(1, 3))); 
# 409
extern int pthread_getattr_default_np(pthread_attr_t * __attr) throw()
# 410
 __attribute((__nonnull__(1))); 
# 414
extern int pthread_setattr_default_np(const pthread_attr_t * __attr) throw()
# 415
 __attribute((__nonnull__(1))); 
# 420
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) throw()
# 421
 __attribute((__nonnull__(2))); 
# 429
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const sched_param * __param) throw()
# 431
 __attribute((__nonnull__(3))); 
# 434
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict__ __policy, sched_param *__restrict__ __param) throw()
# 437
 __attribute((__nonnull__(2, 3))); 
# 440
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw(); 
# 446
extern int pthread_getname_np(pthread_t __target_thread, char * __buf, ::size_t __buflen) throw()
# 448
 __attribute((__nonnull__(2))); 
# 451
extern int pthread_setname_np(pthread_t __target_thread, const char * __name) throw()
# 452
 __attribute((__nonnull__(2))); 
# 458
extern int pthread_getconcurrency() throw(); 
# 461
extern int pthread_setconcurrency(int __level) throw(); 
# 469
extern int pthread_yield() throw(); 
# 474
extern int pthread_setaffinity_np(pthread_t __th, ::size_t __cpusetsize, const cpu_set_t * __cpuset) throw()
# 476
 __attribute((__nonnull__(3))); 
# 479
extern int pthread_getaffinity_np(pthread_t __th, ::size_t __cpusetsize, cpu_set_t * __cpuset) throw()
# 481
 __attribute((__nonnull__(3))); 
# 494
extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void))
# 495
 __attribute((__nonnull__(1, 2))); 
# 506
extern int pthread_setcancelstate(int __state, int * __oldstate); 
# 510
extern int pthread_setcanceltype(int __type, int * __oldtype); 
# 513
extern int pthread_cancel(pthread_t __th); 
# 518
extern void pthread_testcancel(); 
# 531
typedef 
# 524
struct { 
# 526
struct { 
# 527
__jmp_buf __cancel_jmp_buf; 
# 528
int __mask_was_saved; 
# 529
} __cancel_jmp_buf[1]; 
# 530
void *__pad[4]; 
# 531
} __pthread_unwind_buf_t __attribute((__aligned__)); 
# 540
struct __pthread_cleanup_frame { 
# 542
void (*__cancel_routine)(void *); 
# 543
void *__cancel_arg; 
# 544
int __do_it; 
# 545
int __cancel_type; 
# 546
}; 
# 551
class __pthread_cleanup_class { 
# 553
void (*__cancel_routine)(void *); 
# 554
void *__cancel_arg; 
# 555
int __do_it; 
# 556
int __cancel_type; 
# 559
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 560
{ } 
# 561
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 562
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 563
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 564
} 
# 565
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 566
}; 
# 742
struct __jmp_buf_tag; 
# 743
extern int __sigsetjmp(__jmp_buf_tag * __env, int __savemask) throw(); 
# 749
extern int pthread_mutex_init(pthread_mutex_t * __mutex, const pthread_mutexattr_t * __mutexattr) throw()
# 751
 __attribute((__nonnull__(1))); 
# 754
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) throw()
# 755
 __attribute((__nonnull__(1))); 
# 758
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) throw()
# 759
 __attribute((__nonnull__(1))); 
# 762
extern int pthread_mutex_lock(pthread_mutex_t * __mutex) throw()
# 763
 __attribute((__nonnull__(1))); 
# 767
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime) throw()
# 769
 __attribute((__nonnull__(1, 2))); 
# 773
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) throw()
# 774
 __attribute((__nonnull__(1))); 
# 778
extern int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ __mutex, int *__restrict__ __prioceiling) throw()
# 781
 __attribute((__nonnull__(1, 2))); 
# 785
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ __mutex, int __prioceiling, int *__restrict__ __old_ceiling) throw()
# 788
 __attribute((__nonnull__(1, 3))); 
# 793
extern int pthread_mutex_consistent(pthread_mutex_t * __mutex) throw()
# 794
 __attribute((__nonnull__(1))); 
# 796
extern int pthread_mutex_consistent_np(pthread_mutex_t * __mutex) throw()
# 797
 __attribute((__nonnull__(1))); 
# 806
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) throw()
# 807
 __attribute((__nonnull__(1))); 
# 810
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) throw()
# 811
 __attribute((__nonnull__(1))); 
# 814
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 817
 __attribute((__nonnull__(1, 2))); 
# 820
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) throw()
# 822
 __attribute((__nonnull__(1))); 
# 826
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __kind) throw()
# 828
 __attribute((__nonnull__(1, 2))); 
# 833
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) throw()
# 834
 __attribute((__nonnull__(1))); 
# 838
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __protocol) throw()
# 841
 __attribute((__nonnull__(1, 2))); 
# 845
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) throw()
# 847
 __attribute((__nonnull__(1))); 
# 850
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __prioceiling) throw()
# 853
 __attribute((__nonnull__(1, 2))); 
# 856
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) throw()
# 858
 __attribute((__nonnull__(1))); 
# 862
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 864
 __attribute((__nonnull__(1, 2))); 
# 866
extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t * __attr, int * __robustness) throw()
# 868
 __attribute((__nonnull__(1, 2))); 
# 872
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * __attr, int __robustness) throw()
# 874
 __attribute((__nonnull__(1))); 
# 876
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t * __attr, int __robustness) throw()
# 878
 __attribute((__nonnull__(1))); 
# 888
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict__ __rwlock, const pthread_rwlockattr_t *__restrict__ __attr) throw()
# 890
 __attribute((__nonnull__(1))); 
# 893
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) throw()
# 894
 __attribute((__nonnull__(1))); 
# 897
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) throw()
# 898
 __attribute((__nonnull__(1))); 
# 901
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) throw()
# 902
 __attribute((__nonnull__(1))); 
# 906
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 908
 __attribute((__nonnull__(1, 2))); 
# 912
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) throw()
# 913
 __attribute((__nonnull__(1))); 
# 916
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) throw()
# 917
 __attribute((__nonnull__(1))); 
# 921
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) throw()
# 923
 __attribute((__nonnull__(1, 2))); 
# 927
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) throw()
# 928
 __attribute((__nonnull__(1))); 
# 934
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) throw()
# 935
 __attribute((__nonnull__(1))); 
# 938
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) throw()
# 939
 __attribute((__nonnull__(1))); 
# 942
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 945
 __attribute((__nonnull__(1, 2))); 
# 948
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) throw()
# 950
 __attribute((__nonnull__(1))); 
# 953
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pref) throw()
# 956
 __attribute((__nonnull__(1, 2))); 
# 959
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) throw()
# 960
 __attribute((__nonnull__(1))); 
# 968
extern int pthread_cond_init(pthread_cond_t *__restrict__ __cond, const pthread_condattr_t *__restrict__ __cond_attr) throw()
# 970
 __attribute((__nonnull__(1))); 
# 973
extern int pthread_cond_destroy(pthread_cond_t * __cond) throw()
# 974
 __attribute((__nonnull__(1))); 
# 977
extern int pthread_cond_signal(pthread_cond_t * __cond) throw()
# 978
 __attribute((__nonnull__(1))); 
# 981
extern int pthread_cond_broadcast(pthread_cond_t * __cond) throw()
# 982
 __attribute((__nonnull__(1))); 
# 989
extern int pthread_cond_wait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex)
# 991
 __attribute((__nonnull__(1, 2))); 
# 1000
extern int pthread_cond_timedwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime)
# 1003
 __attribute((__nonnull__(1, 2, 3))); 
# 1008
extern int pthread_condattr_init(pthread_condattr_t * __attr) throw()
# 1009
 __attribute((__nonnull__(1))); 
# 1012
extern int pthread_condattr_destroy(pthread_condattr_t * __attr) throw()
# 1013
 __attribute((__nonnull__(1))); 
# 1016
extern int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1019
 __attribute((__nonnull__(1, 2))); 
# 1022
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) throw()
# 1023
 __attribute((__nonnull__(1))); 
# 1027
extern int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ __attr, __clockid_t *__restrict__ __clock_id) throw()
# 1030
 __attribute((__nonnull__(1, 2))); 
# 1033
extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) throw()
# 1035
 __attribute((__nonnull__(1))); 
# 1044
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) throw()
# 1045
 __attribute((__nonnull__(1))); 
# 1048
extern int pthread_spin_destroy(pthread_spinlock_t * __lock) throw()
# 1049
 __attribute((__nonnull__(1))); 
# 1052
extern int pthread_spin_lock(pthread_spinlock_t * __lock) throw()
# 1053
 __attribute((__nonnull__(1))); 
# 1056
extern int pthread_spin_trylock(pthread_spinlock_t * __lock) throw()
# 1057
 __attribute((__nonnull__(1))); 
# 1060
extern int pthread_spin_unlock(pthread_spinlock_t * __lock) throw()
# 1061
 __attribute((__nonnull__(1))); 
# 1068
extern int pthread_barrier_init(pthread_barrier_t *__restrict__ __barrier, const pthread_barrierattr_t *__restrict__ __attr, unsigned __count) throw()
# 1071
 __attribute((__nonnull__(1))); 
# 1074
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) throw()
# 1075
 __attribute((__nonnull__(1))); 
# 1078
extern int pthread_barrier_wait(pthread_barrier_t * __barrier) throw()
# 1079
 __attribute((__nonnull__(1))); 
# 1083
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) throw()
# 1084
 __attribute((__nonnull__(1))); 
# 1087
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) throw()
# 1088
 __attribute((__nonnull__(1))); 
# 1091
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ __attr, int *__restrict__ __pshared) throw()
# 1094
 __attribute((__nonnull__(1, 2))); 
# 1097
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) throw()
# 1099
 __attribute((__nonnull__(1))); 
# 1111
extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) throw()
# 1113
 __attribute((__nonnull__(1))); 
# 1116
extern int pthread_key_delete(pthread_key_t __key) throw(); 
# 1119
extern void *pthread_getspecific(pthread_key_t __key) throw(); 
# 1122
extern int pthread_setspecific(pthread_key_t __key, const void * __pointer) throw(); 
# 1128
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) throw()
# 1130
 __attribute((__nonnull__(2))); 
# 1145
extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) throw(); 
# 1152
__attribute((__gnu_inline__)) extern inline int
# 1153
 __attribute((__leaf__)) pthread_equal(pthread_t __thread1, pthread_t __thread2) throw() 
# 1154
{ 
# 1155
return __thread1 == __thread2; 
# 1156
} 
# 1159
}
# 47 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 48
typedef pthread_key_t __gthread_key_t; 
# 49
typedef pthread_once_t __gthread_once_t; 
# 50
typedef pthread_mutex_t __gthread_mutex_t; 
# 51
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 52
typedef pthread_cond_t __gthread_cond_t; 
# 53
typedef timespec __gthread_time_t; 
# 101
static __typeof__(pthread_once) __gthrw_pthread_once __attribute((__weakref__("pthread_once"))); 
# 102
static __typeof__(pthread_getspecific) __gthrw_pthread_getspecific __attribute((__weakref__("pthread_getspecific"))); 
# 103
static __typeof__(pthread_setspecific) __gthrw_pthread_setspecific __attribute((__weakref__("pthread_setspecific"))); 
# 105
static __typeof__(pthread_create) __gthrw_pthread_create __attribute((__weakref__("pthread_create"))); 
# 106
static __typeof__(pthread_join) __gthrw_pthread_join __attribute((__weakref__("pthread_join"))); 
# 107
static __typeof__(pthread_equal) __gthrw_pthread_equal __attribute((__weakref__("pthread_equal"))); 
# 108
static __typeof__(pthread_self) __gthrw_pthread_self __attribute((__weakref__("pthread_self"))); 
# 109
static __typeof__(pthread_detach) __gthrw_pthread_detach __attribute((__weakref__("pthread_detach"))); 
# 111
static __typeof__(pthread_cancel) __gthrw_pthread_cancel __attribute((__weakref__("pthread_cancel"))); 
# 113
static __typeof__(sched_yield) __gthrw_sched_yield __attribute((__weakref__("sched_yield"))); 
# 115
static __typeof__(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute((__weakref__("pthread_mutex_lock"))); 
# 116
static __typeof__(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute((__weakref__("pthread_mutex_trylock"))); 
# 118
static __typeof__(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute((__weakref__("pthread_mutex_timedlock"))); 
# 120
static __typeof__(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute((__weakref__("pthread_mutex_unlock"))); 
# 121
static __typeof__(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute((__weakref__("pthread_mutex_init"))); 
# 122
static __typeof__(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute((__weakref__("pthread_mutex_destroy"))); 
# 124
static __typeof__(pthread_cond_init) __gthrw_pthread_cond_init __attribute((__weakref__("pthread_cond_init"))); 
# 125
static __typeof__(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute((__weakref__("pthread_cond_broadcast"))); 
# 126
static __typeof__(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute((__weakref__("pthread_cond_signal"))); 
# 127
static __typeof__(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute((__weakref__("pthread_cond_wait"))); 
# 128
static __typeof__(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute((__weakref__("pthread_cond_timedwait"))); 
# 129
static __typeof__(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute((__weakref__("pthread_cond_destroy"))); 
# 131
static __typeof__(pthread_key_create) __gthrw_pthread_key_create __attribute((__weakref__("pthread_key_create"))); 
# 132
static __typeof__(pthread_key_delete) __gthrw_pthread_key_delete __attribute((__weakref__("pthread_key_delete"))); 
# 133
static __typeof__(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute((__weakref__("pthread_mutexattr_init"))); 
# 134
static __typeof__(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute((__weakref__("pthread_mutexattr_settype"))); 
# 135
static __typeof__(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute((__weakref__("pthread_mutexattr_destroy"))); 
# 236
static __typeof__(pthread_key_create) __gthrw___pthread_key_create __attribute((__weakref__("__pthread_key_create"))); 
# 247
static inline int __gthread_active_p() 
# 248
{ 
# 249
static void *const __gthread_active_ptr = __extension__ ((void *)(&__gthrw___pthread_key_create)); 
# 251
return __gthread_active_ptr != (0); 
# 252
} 
# 659
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 660
__args) 
# 661
{ 
# 662
return __gthrw_pthread_create(__threadid, __null, __func, __args); 
# 663
} 
# 666
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 667
{ 
# 668
return __gthrw_pthread_join(__threadid, __value_ptr); 
# 669
} 
# 672
static inline int __gthread_detach(__gthread_t __threadid) 
# 673
{ 
# 674
return __gthrw_pthread_detach(__threadid); 
# 675
} 
# 678
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 679
{ 
# 680
return __gthrw_pthread_equal(__t1, __t2); 
# 681
} 
# 684
static inline __gthread_t __gthread_self() 
# 685
{ 
# 686
return __gthrw_pthread_self(); 
# 687
} 
# 690
static inline int __gthread_yield() 
# 691
{ 
# 692
return __gthrw_sched_yield(); 
# 693
} 
# 696
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 697
{ 
# 698
if (__gthread_active_p()) { 
# 699
return __gthrw_pthread_once(__once, __func); } else { 
# 701
return -1; }  
# 702
} 
# 705
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 706
{ 
# 707
return __gthrw_pthread_key_create(__key, __dtor); 
# 708
} 
# 711
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 712
{ 
# 713
return __gthrw_pthread_key_delete(__key); 
# 714
} 
# 717
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 718
{ 
# 719
return __gthrw_pthread_getspecific(__key); 
# 720
} 
# 723
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 724
{ 
# 725
return __gthrw_pthread_setspecific(__key, __ptr); 
# 726
} 
# 729
static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex) 
# 730
{ 
# 731
if (__gthread_active_p()) { 
# 732
__gthrw_pthread_mutex_init(__mutex, __null); }  
# 733
} 
# 736
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 737
{ 
# 738
if (__gthread_active_p()) { 
# 739
return __gthrw_pthread_mutex_destroy(__mutex); } else { 
# 741
return 0; }  
# 742
} 
# 745
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 746
{ 
# 747
if (__gthread_active_p()) { 
# 748
return __gthrw_pthread_mutex_lock(__mutex); } else { 
# 750
return 0; }  
# 751
} 
# 754
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 755
{ 
# 756
if (__gthread_active_p()) { 
# 757
return __gthrw_pthread_mutex_trylock(__mutex); } else { 
# 759
return 0; }  
# 760
} 
# 764
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 765
__abs_timeout) 
# 766
{ 
# 767
if (__gthread_active_p()) { 
# 768
return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 770
return 0; }  
# 771
} 
# 775
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 776
{ 
# 777
if (__gthread_active_p()) { 
# 778
return __gthrw_pthread_mutex_unlock(__mutex); } else { 
# 780
return 0; }  
# 781
} 
# 808
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 809
{ 
# 810
return __gthread_mutex_lock(__mutex); 
# 811
} 
# 814
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 815
{ 
# 816
return __gthread_mutex_trylock(__mutex); 
# 817
} 
# 821
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 822
__abs_timeout) 
# 823
{ 
# 824
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 825
} 
# 829
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 830
{ 
# 831
return __gthread_mutex_unlock(__mutex); 
# 832
} 
# 835
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex) 
# 836
{ 
# 837
return __gthread_mutex_destroy(__mutex); 
# 838
} 
# 850
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 851
{ 
# 852
return __gthrw_pthread_cond_broadcast(__cond); 
# 853
} 
# 856
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 857
{ 
# 858
return __gthrw_pthread_cond_signal(__cond); 
# 859
} 
# 862
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 863
{ 
# 864
return __gthrw_pthread_cond_wait(__cond, __mutex); 
# 865
} 
# 868
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 869
__abs_timeout) 
# 870
{ 
# 871
return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 872
} 
# 875
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 876
__mutex) 
# 877
{ 
# 878
return __gthread_cond_wait(__cond, __mutex); 
# 879
} 
# 882
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 883
{ 
# 884
return __gthrw_pthread_cond_destroy(__cond); 
# 885
} 
# 151 "/usr/include/x86_64-linux-gnu/c++/5/bits/gthr.h" 3
#pragma GCC visibility pop
# 32 "/usr/include/x86_64-linux-gnu/c++/5/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 38 "/usr/include/c++/5/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 48
static inline _Atomic_word __exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 49
{ return __atomic_fetch_add(__mem, __val, 4); } 
# 52
static inline void __atomic_add(volatile _Atomic_word *__mem, int __val) 
# 53
{ __atomic_fetch_add(__mem, __val, 4); } 
# 65
static inline _Atomic_word __exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 66
{ 
# 67
_Atomic_word __result = *__mem; 
# 68
(*__mem) += __val; 
# 69
return __result; 
# 70
} 
# 73
static inline void __atomic_add_single(_Atomic_word *__mem, int __val) 
# 74
{ (*__mem) += __val; } 
# 77
__attribute((__unused__)) static inline _Atomic_word 
# 78
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 79
{ 
# 81
if (__gthread_active_p()) { 
# 82
return __exchange_and_add(__mem, __val); } else { 
# 84
return __exchange_and_add_single(__mem, __val); }  
# 88
} 
# 91
__attribute((__unused__)) static inline void 
# 92
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 93
{ 
# 95
if (__gthread_active_p()) { 
# 96
__atomic_add(__mem, __val); } else { 
# 98
__atomic_add_single(__mem, __val); }  
# 102
} 
# 105
}
# 42 "/usr/include/c++/5/new" 3
#pragma GCC visibility push ( default )
# 44
extern "C++" {
# 46
namespace std { 
# 54
class bad_alloc : public exception { 
# 57
public: bad_alloc() throw() { } 
# 61
virtual ~bad_alloc() throw(); 
# 64
virtual const char *what() const throw(); 
# 65
}; 
# 68
class bad_array_new_length : public bad_alloc { 
# 71
public: bad_array_new_length() throw() { } 
# 75
virtual ~bad_array_new_length() throw(); 
# 78
virtual const char *what() const throw(); 
# 79
}; 
# 82
struct nothrow_t { }; 
# 84
extern const nothrow_t nothrow; 
# 88
typedef void (*new_handler)(void); 
# 92
new_handler set_new_handler(new_handler) throw(); 
# 96
new_handler get_new_handler() noexcept; 
# 98
}
# 111
void *operator new(std::size_t)
# 112
 __attribute((__externally_visible__)); 
# 113
void *operator new[](std::size_t)
# 114
 __attribute((__externally_visible__)); 
# 115
void operator delete(void *) noexcept
# 116
 __attribute((__externally_visible__)); 
# 117
void operator delete[](void *) noexcept
# 118
 __attribute((__externally_visible__)); 
# 119
void *operator new(std::size_t, const std::nothrow_t &) noexcept
# 120
 __attribute((__externally_visible__)); 
# 121
void *operator new[](std::size_t, const std::nothrow_t &) noexcept
# 122
 __attribute((__externally_visible__)); 
# 123
void operator delete(void *, const std::nothrow_t &) noexcept
# 124
 __attribute((__externally_visible__)); 
# 125
void operator delete[](void *, const std::nothrow_t &) noexcept
# 126
 __attribute((__externally_visible__)); 
# 129
inline void *operator new(std::size_t, void *__p) noexcept 
# 130
{ return __p; } 
# 131
inline void *operator new[](std::size_t, void *__p) noexcept 
# 132
{ return __p; } 
# 135
inline void operator delete(void *, void *) noexcept { } 
# 136
inline void operator delete[](void *, void *) noexcept { } 
# 138
}
# 140
#pragma GCC visibility pop
# 40 "/usr/include/c++/5/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
using std::size_t;
# 45
using std::ptrdiff_t;
# 57
template< class _Tp> 
# 58
class new_allocator { 
# 61
public: typedef std::size_t size_type; 
# 62
typedef std::ptrdiff_t difference_type; 
# 63
typedef _Tp *pointer; 
# 64
typedef const _Tp *const_pointer; 
# 65
typedef _Tp &reference; 
# 66
typedef const _Tp &const_reference; 
# 67
typedef _Tp value_type; 
# 69
template< class _Tp1> 
# 70
struct rebind { 
# 71
typedef __gnu_cxx::new_allocator< _Tp1>  other; }; 
# 76
typedef std::true_type propagate_on_container_move_assignment; 
# 79
new_allocator() noexcept { } 
# 81
new_allocator(const new_allocator &) noexcept { } 
# 83
template< class _Tp1> 
# 84
new_allocator(const __gnu_cxx::new_allocator< _Tp1>  &) noexcept { } 
# 86
~new_allocator() noexcept { } 
# 89
pointer address(reference __x) const noexcept 
# 90
{ return std::__addressof(__x); } 
# 93
const_pointer address(const_reference __x) const noexcept 
# 94
{ return std::__addressof(__x); } 
# 99
pointer allocate(size_type __n, const void * = 0) 
# 100
{ 
# 101
if (__n > this->max_size()) { 
# 102
std::__throw_bad_alloc(); }  
# 104
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 105
} 
# 109
void deallocate(pointer __p, size_type) 
# 110
{ ::operator delete(__p); } 
# 113
size_type max_size() const noexcept 
# 114
{ return ((std::size_t)(-1)) / sizeof(_Tp); } 
# 117
template< class _Up, class ..._Args> void 
# 119
construct(_Up *__p, _Args &&...__args) 
# 120
{ ::new ((void *)__p) (_Up)(std::forward< _Args> (__args)...); } 
# 122
template< class _Up> void 
# 124
destroy(_Up *__p) { (__p->~_Up()); } 
# 135
}; 
# 137
template< class _Tp> inline bool 
# 139
operator==(const new_allocator< _Tp>  &, const new_allocator< _Tp>  &) 
# 140
{ return true; } 
# 142
template< class _Tp> inline bool 
# 144
operator!=(const new_allocator< _Tp>  &, const new_allocator< _Tp>  &) 
# 145
{ return false; } 
# 148
}
# 36 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++allocator.h" 3
namespace std { 
# 47
template< class _Tp> using __allocator_base = __gnu_cxx::new_allocator< _Tp> ; 
# 49
}
# 52 "/usr/include/c++/5/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63
template<> class allocator< void>  { 
# 66
public: typedef size_t size_type; 
# 67
typedef ptrdiff_t difference_type; 
# 68
typedef void *pointer; 
# 69
typedef const void *const_pointer; 
# 70
typedef void value_type; 
# 72
template< class _Tp1> 
# 73
struct rebind { 
# 74
typedef std::allocator< _Tp1>  other; }; 
# 79
typedef true_type propagate_on_container_move_assignment; 
# 81
}; 
# 91
template< class _Tp> 
# 92
class allocator : public __allocator_base< _Tp>  { 
# 95
public: typedef ::std::size_t size_type; 
# 96
typedef ::std::ptrdiff_t difference_type; 
# 97
typedef _Tp *pointer; 
# 98
typedef const _Tp *const_pointer; 
# 99
typedef _Tp &reference; 
# 100
typedef const _Tp &const_reference; 
# 101
typedef _Tp value_type; 
# 103
template< class _Tp1> 
# 104
struct rebind { 
# 105
typedef ::std::allocator< _Tp1>  other; }; 
# 110
typedef ::std::true_type propagate_on_container_move_assignment; 
# 113
allocator() throw() { } 
# 115
allocator(const allocator &__a) throw() : ::std::__allocator_base< _Tp> (__a) 
# 116
{ } 
# 118
template< class _Tp1> 
# 119
allocator(const ::std::allocator< _Tp1>  &) throw() { } 
# 121
~allocator() throw() { } 
# 124
}; 
# 126
template< class _T1, class _T2> inline bool 
# 128
operator==(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 130
{ return true; } 
# 132
template< class _Tp> inline bool 
# 134
operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 136
{ return true; } 
# 138
template< class _T1, class _T2> inline bool 
# 140
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 142
{ return false; } 
# 144
template< class _Tp> inline bool 
# 146
operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 148
{ return false; } 
# 155
extern template class allocator< char> ;
# 156
extern template class allocator< wchar_t> ;
# 163
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 164
struct __alloc_swap { 
# 165
static void _S_do_it(_Alloc &, _Alloc &) noexcept { } }; 
# 167
template< class _Alloc> 
# 168
struct __alloc_swap< _Alloc, false>  { 
# 171
static void _S_do_it(_Alloc &__one, _Alloc &__two) noexcept 
# 172
{ 
# 174
if (__one != __two) { 
# 175
swap(__one, __two); }  
# 176
} 
# 177
}; 
# 180
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 181
struct __alloc_neq { 
# 184
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 185
{ return false; } 
# 186
}; 
# 188
template< class _Alloc> 
# 189
struct __alloc_neq< _Alloc, false>  { 
# 192
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 193
{ return __one != __two; } 
# 194
}; 
# 197
template< class _Tp, bool 
# 198
 = __or_< is_copy_constructible< typename _Tp::value_type> , is_nothrow_move_constructible< typename _Tp::value_type> > ::value> 
# 200
struct __shrink_to_fit_aux { 
# 201
static bool _S_do_it(_Tp &) noexcept { return false; } }; 
# 203
template< class _Tp> 
# 204
struct __shrink_to_fit_aux< _Tp, true>  { 
# 207
static bool _S_do_it(_Tp &__c) noexcept 
# 208
{ 
# 210
try 
# 211
{ 
# 212
(_Tp(__make_move_if_noexcept_iterator((__c.begin())), __make_move_if_noexcept_iterator((__c.end())), (__c.get_allocator())).swap(__c)); 
# 215
return true; 
# 216
} 
# 217
catch (...) 
# 218
{ return false; }  
# 222
} 
# 223
}; 
# 227
}
# 36 "/usr/include/c++/5/bits/cxxabi_forced.h" 3
#pragma GCC visibility push ( default )
# 39
namespace __cxxabiv1 { 
# 48
class __forced_unwind { 
# 50
virtual ~__forced_unwind() throw(); 
# 53
virtual void __pure_dummy() = 0; 
# 54
}; 
# 55
}
# 58
#pragma GCC visibility pop
# 38 "/usr/include/c++/5/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
template< class _CharT, class _Traits> inline void 
# 44
__ostream_write(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 45
__s, streamsize __n) 
# 46
{ 
# 47
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 48
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 50
const streamsize __put = ((__out.rdbuf())->sputn(__s, __n)); 
# 51
if (__put != __n) { 
# 52
(__out.setstate(__ios_base::badbit)); }  
# 53
} 
# 55
template< class _CharT, class _Traits> inline void 
# 57
__ostream_fill(basic_ostream< _CharT, _Traits>  &__out, streamsize __n) 
# 58
{ 
# 59
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 60
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 62
const _CharT __c = (__out.fill()); 
# 63
for (; __n > (0); --__n) 
# 64
{ 
# 65
const typename _Traits::int_type __put = ((__out.rdbuf())->sputc(__c)); 
# 66
if (_Traits::eq_int_type(__put, _Traits::eof())) 
# 67
{ 
# 68
(__out.setstate(__ios_base::badbit)); 
# 69
break; 
# 70
}  
# 71
}  
# 72
} 
# 74
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 76
__ostream_insert(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 77
__s, streamsize __n) 
# 78
{ 
# 79
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 80
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 82
typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out); 
# 83
if (__cerb) 
# 84
{ 
# 85
try 
# 86
{ 
# 87
const streamsize __w = (__out.width()); 
# 88
if (__w > __n) 
# 89
{ 
# 90
const bool __left = ((__out.flags()) & __ios_base::adjustfield) == __ios_base::left; 
# 93
if (!__left) { 
# 94
__ostream_fill(__out, __w - __n); }  
# 95
if ((__out.good())) { 
# 96
__ostream_write(__out, __s, __n); }  
# 97
if (__left && (__out.good())) { 
# 98
__ostream_fill(__out, __w - __n); }  
# 99
} else { 
# 101
__ostream_write(__out, __s, __n); }  
# 102
(__out.width(0)); 
# 103
} 
# 104
catch (__cxxabiv1::__forced_unwind &) 
# 105
{ 
# 106
(__out._M_setstate(__ios_base::badbit)); 
# 107
throw; 
# 108
} 
# 109
catch (...) 
# 110
{ (__out._M_setstate(__ios_base::badbit)); }  
# 111
}  
# 112
return __out; 
# 113
} 
# 118
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & __out, const char * __s, streamsize __n);
# 121
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & __out, const wchar_t * __s, streamsize __n);
# 127
}
# 63 "/usr/include/c++/5/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 104
template< class _Arg, class _Result> 
# 105
struct unary_function { 
# 108
typedef _Arg argument_type; 
# 111
typedef _Result result_type; 
# 112
}; 
# 117
template< class _Arg1, class _Arg2, class _Result> 
# 118
struct binary_function { 
# 121
typedef _Arg1 first_argument_type; 
# 124
typedef _Arg2 second_argument_type; 
# 127
typedef _Result result_type; 
# 128
}; 
# 166
template< class _Tp> 
# 167
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 171
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 172
{ return __x + __y; } 
# 173
}; 
# 176
template< class _Tp> 
# 177
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 181
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 182
{ return __x - __y; } 
# 183
}; 
# 186
template< class _Tp> 
# 187
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 191
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 192
{ return __x * __y; } 
# 193
}; 
# 196
template< class _Tp> 
# 197
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 201
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 202
{ return __x / __y; } 
# 203
}; 
# 206
template< class _Tp> 
# 207
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 211
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 212
{ return __x % __y; } 
# 213
}; 
# 216
template< class _Tp> 
# 217
struct negate : public unary_function< _Tp, _Tp>  { 
# 221
_Tp operator()(const _Tp &__x) const 
# 222
{ return -__x; } 
# 223
}; 
# 351
template< class _Tp> 
# 352
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 356
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 357
{ return __x == __y; } 
# 358
}; 
# 361
template< class _Tp> 
# 362
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 366
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 367
{ return __x != __y; } 
# 368
}; 
# 371
template< class _Tp> 
# 372
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 376
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 377
{ return __x > __y; } 
# 378
}; 
# 381
template< class _Tp> 
# 382
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 386
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 387
{ return __x < __y; } 
# 388
}; 
# 391
template< class _Tp> 
# 392
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 396
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 397
{ return __x >= __y; } 
# 398
}; 
# 401
template< class _Tp> 
# 402
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 406
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 407
{ return __x <= __y; } 
# 408
}; 
# 524
template< class _Tp> 
# 525
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 529
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 530
{ return __x && __y; } 
# 531
}; 
# 534
template< class _Tp> 
# 535
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 539
bool operator()(const _Tp &__x, const _Tp &__y) const 
# 540
{ return __x || __y; } 
# 541
}; 
# 544
template< class _Tp> 
# 545
struct logical_not : public unary_function< _Tp, bool>  { 
# 549
bool operator()(const _Tp &__x) const 
# 550
{ return !__x; } 
# 551
}; 
# 617
template< class _Tp> 
# 618
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 622
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 623
{ return __x & __y; } 
# 624
}; 
# 626
template< class _Tp> 
# 627
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 631
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 632
{ return __x | __y; } 
# 633
}; 
# 635
template< class _Tp> 
# 636
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 640
_Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 641
{ return __x ^ __y; } 
# 642
}; 
# 644
template< class _Tp> 
# 645
struct bit_not : public unary_function< _Tp, _Tp>  { 
# 649
_Tp operator()(const _Tp &__x) const 
# 650
{ return ~__x; } 
# 651
}; 
# 741
template< class _Predicate> 
# 742
class unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 746
protected: _Predicate _M_pred; 
# 751
public: explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 755
bool operator()(const typename _Predicate::argument_type &__x) const 
# 756
{ return !(_M_pred)(__x); } 
# 757
}; 
# 760
template< class _Predicate> inline unary_negate< _Predicate>  
# 763
not1(const _Predicate &__pred) 
# 764
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 767
template< class _Predicate> 
# 768
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 773
protected: _Predicate _M_pred; 
# 778
public: explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 782
bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 783
__y) const 
# 784
{ return !(_M_pred)(__x, __y); } 
# 785
}; 
# 788
template< class _Predicate> inline binary_negate< _Predicate>  
# 791
not2(const _Predicate &__pred) 
# 792
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 818
template< class _Arg, class _Result> 
# 819
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 822
protected: _Result (*_M_ptr)(_Arg); 
# 825
public: pointer_to_unary_function() { } 
# 828
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 829
{ } 
# 832
_Result operator()(_Arg __x) const 
# 833
{ return (_M_ptr)(__x); } 
# 834
}; 
# 837
template< class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>  
# 839
ptr_fun(_Result (*__x)(_Arg)) 
# 840
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 843
template< class _Arg1, class _Arg2, class _Result> 
# 844
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 848
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 851
public: pointer_to_binary_function() { } 
# 854
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 855
{ } 
# 858
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 859
{ return (_M_ptr)(__x, __y); } 
# 860
}; 
# 863
template< class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 865
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 866
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 869
template< class _Tp> 
# 870
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 874
_Tp &operator()(_Tp &__x) const 
# 875
{ return __x; } 
# 878
const _Tp &operator()(const _Tp &__x) const 
# 879
{ return __x; } 
# 880
}; 
# 882
template< class _Pair> 
# 883
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 887
typename _Pair::first_type &operator()(_Pair &__x) const 
# 888
{ return __x.first; } 
# 891
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 892
{ return __x.first; } 
# 895
template< class _Pair2> typename _Pair2::first_type &
# 897
operator()(_Pair2 &__x) const 
# 898
{ return __x.first; } 
# 900
template< class _Pair2> const typename _Pair2::first_type &
# 902
operator()(const _Pair2 &__x) const 
# 903
{ return __x.first; } 
# 905
}; 
# 907
template< class _Pair> 
# 908
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 912
typename _Pair::second_type &operator()(_Pair &__x) const 
# 913
{ return __x.second; } 
# 916
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 917
{ return __x.second; } 
# 918
}; 
# 938
template< class _Ret, class _Tp> 
# 939
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 943
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 944
{ } 
# 947
_Ret operator()(_Tp *__p) const 
# 948
{ return (__p->*(_M_f))(); } 
# 951
private: _Ret (_Tp::*_M_f)(void); 
# 952
}; 
# 956
template< class _Ret, class _Tp> 
# 957
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 961
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 962
{ } 
# 965
_Ret operator()(const _Tp *__p) const 
# 966
{ return (__p->*(_M_f))(); } 
# 969
private: _Ret (_Tp::*_M_f)(void) const; 
# 970
}; 
# 974
template< class _Ret, class _Tp> 
# 975
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 979
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 980
{ } 
# 983
_Ret operator()(_Tp &__r) const 
# 984
{ return (__r.*(_M_f))(); } 
# 987
private: _Ret (_Tp::*_M_f)(void); 
# 988
}; 
# 992
template< class _Ret, class _Tp> 
# 993
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 997
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 998
{ } 
# 1001
_Ret operator()(const _Tp &__r) const 
# 1002
{ return (__r.*(_M_f))(); } 
# 1005
private: _Ret (_Tp::*_M_f)(void) const; 
# 1006
}; 
# 1010
template< class _Ret, class _Tp, class _Arg> 
# 1011
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 1015
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1016
{ } 
# 1019
_Ret operator()(_Tp *__p, _Arg __x) const 
# 1020
{ return (__p->*(_M_f))(__x); } 
# 1023
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1024
}; 
# 1028
template< class _Ret, class _Tp, class _Arg> 
# 1029
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 1033
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1034
{ } 
# 1037
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 1038
{ return (__p->*(_M_f))(__x); } 
# 1041
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1042
}; 
# 1046
template< class _Ret, class _Tp, class _Arg> 
# 1047
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1051
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1052
{ } 
# 1055
_Ret operator()(_Tp &__r, _Arg __x) const 
# 1056
{ return (__r.*(_M_f))(__x); } 
# 1059
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1060
}; 
# 1064
template< class _Ret, class _Tp, class _Arg> 
# 1065
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1069
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1070
{ } 
# 1073
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 1074
{ return (__r.*(_M_f))(__x); } 
# 1077
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1078
}; 
# 1082
template< class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>  
# 1084
mem_fun(_Ret (_Tp::*__f)(void)) 
# 1085
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1087
template< class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>  
# 1089
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 1090
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1092
template< class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>  
# 1094
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 1095
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1097
template< class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>  
# 1099
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 1100
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1102
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 1104
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 1105
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1107
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 1109
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 1110
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1112
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1114
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 1115
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1117
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1119
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 1120
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1125
}
# 60 "/usr/include/c++/5/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63
namespace std __attribute((__visibility__("default"))) { 
# 107
template< class _Operation> 
# 108
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 113
protected: _Operation op; 
# 114
typename _Operation::first_argument_type value; 
# 117
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 118
__y) : op(__x), value(__y) 
# 119
{ } 
# 122
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 123
{ return (op)(value, __x); } 
# 128
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 129
{ return (op)(value, __x); } 
# 130
} __attribute((__deprecated__)); 
# 133
template< class _Operation, class _Tp> inline binder1st< _Operation>  
# 135
bind1st(const _Operation &__fn, const _Tp &__x) 
# 136
{ 
# 137
typedef typename _Operation::first_argument_type _Arg1_type; 
# 138
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 139
} 
# 142
template< class _Operation> 
# 143
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 148
protected: _Operation op; 
# 149
typename _Operation::second_argument_type value; 
# 152
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 153
__y) : op(__x), value(__y) 
# 154
{ } 
# 157
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 158
{ return (op)(__x, value); } 
# 163
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 164
{ return (op)(__x, value); } 
# 165
} __attribute((__deprecated__)); 
# 168
template< class _Operation, class _Tp> inline binder2nd< _Operation>  
# 170
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 171
{ 
# 172
typedef typename _Operation::second_argument_type _Arg2_type; 
# 173
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 174
} 
# 178
}
# 180
#pragma GCC diagnostic pop
# 39 "/usr/include/c++/5/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 87
template< class _Tp> constexpr const _Tp *
# 89
begin(initializer_list< _Tp>  __ils) noexcept 
# 90
{ return (__ils.begin()); } 
# 97
template< class _Tp> constexpr const _Tp *
# 99
end(initializer_list< _Tp>  __ils) noexcept 
# 100
{ return (__ils.end()); } 
# 101
}
# 103
#pragma GCC visibility pop
# 37 "/usr/include/c++/5/bits/range_access.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _Container> inline auto 
# 48
begin(_Container &__cont)->__decltype(((__cont.begin()))) 
# 49
{ return (__cont.begin()); } 
# 56
template< class _Container> inline auto 
# 58
begin(const _Container &__cont)->__decltype(((__cont.begin()))) 
# 59
{ return (__cont.begin()); } 
# 66
template< class _Container> inline auto 
# 68
end(_Container &__cont)->__decltype(((__cont.end()))) 
# 69
{ return (__cont.end()); } 
# 76
template< class _Container> inline auto 
# 78
end(const _Container &__cont)->__decltype(((__cont.end()))) 
# 79
{ return (__cont.end()); } 
# 85
template< class _Tp, size_t _Nm> inline _Tp *
# 87
begin(_Tp (&__arr)[_Nm]) 
# 88
{ return __arr; } 
# 95
template< class _Tp, size_t _Nm> inline _Tp *
# 97
end(_Tp (&__arr)[_Nm]) 
# 98
{ return (__arr) + _Nm; } 
# 234
}
# 39 "/usr/include/c++/5/bits/alloc_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Alloc, class _Tp> 
# 44
class __alloctr_rebind_helper { 
# 46
template< class _Alloc2, class _Tp2> static constexpr true_type _S_chk(typename _Alloc2::template rebind< _Tp2> ::other *); 
# 50
template< class , class > static constexpr false_type _S_chk(...); 
# 55
public: using __type = __decltype((_S_chk< _Alloc, _Tp> (nullptr))); 
# 56
}; 
# 58
template< class _Alloc, class _Tp, bool 
# 59
 = __alloctr_rebind_helper< _Alloc, _Tp> ::__type::value> struct __alloctr_rebind; 
# 62
template< class _Alloc, class _Tp> 
# 63
struct __alloctr_rebind< _Alloc, _Tp, true>  { 
# 65
typedef typename _Alloc::template rebind< _Tp> ::other __type; 
# 66
}; 
# 68
template< template< class , class ...>  class _Alloc, class _Tp, class 
# 69
_Up, class ..._Args> 
# 70
struct __alloctr_rebind< _Alloc< _Up, _Args...> , _Tp, false>  { 
# 72
typedef _Alloc< _Tp, _Args...>  __type; 
# 73
}; 
# 75
template< class _Alloc, class _Tp> using __alloc_rebind = typename __alloctr_rebind< _Alloc, _Tp> ::__type; 
# 82
template< class _Alloc> 
# 83
struct allocator_traits { 
# 86
typedef _Alloc allocator_type; 
# 88
typedef typename _Alloc::value_type value_type; 
# 98
private: template< class _Tp> static typename _Tp::pointer _S_pointer_helper(_Tp *); static value_type *_S_pointer_helper(...); typedef __decltype((_S_pointer_helper((_Alloc *)0))) __pointer; 
# 105
public: typedef __pointer pointer; 
# 107
private: template< class _Tp> static typename _Tp::const_pointer _S_const_pointer_helper(_Tp *); static typename pointer_traits< __pointer> ::template rebind< const typename _Alloc::value_type>  _S_const_pointer_helper(...); typedef __decltype((_S_const_pointer_helper((_Alloc *)0))) __const_pointer; 
# 116
public: typedef __const_pointer const_pointer; 
# 118
private: template< class _Tp> static typename _Tp::void_pointer _S_void_pointer_helper(_Tp *); static typename pointer_traits< __pointer> ::template rebind< void>  _S_void_pointer_helper(...); typedef __decltype((_S_void_pointer_helper((_Alloc *)0))) __void_pointer; 
# 127
public: typedef __void_pointer void_pointer; 
# 129
private: template< class _Tp> static typename _Tp::const_void_pointer _S_const_void_pointer_helper(_Tp *); static typename pointer_traits< __pointer> ::template rebind< const void>  _S_const_void_pointer_helper(...); typedef __decltype((_S_const_void_pointer_helper((_Alloc *)0))) __const_void_pointer; 
# 138
public: typedef __const_void_pointer const_void_pointer; 
# 140
private: template< class _Tp> static typename _Tp::difference_type _S_difference_type_helper(_Tp *); static typename pointer_traits< __pointer> ::difference_type _S_difference_type_helper(...); typedef __decltype((_S_difference_type_helper((_Alloc *)0))) __difference_type; 
# 149
public: typedef __difference_type difference_type; 
# 151
private: template< class _Tp> static typename _Tp::size_type _S_size_type_helper(_Tp *); static typename make_unsigned< __difference_type> ::type _S_size_type_helper(...); typedef __decltype((_S_size_type_helper((_Alloc *)0))) __size_type; 
# 160
public: typedef __size_type size_type; 
# 162
private: template< class _Tp> static typename _Tp::propagate_on_container_copy_assignment _S_propagate_on_container_copy_assignment_helper(_Tp *); static false_type _S_propagate_on_container_copy_assignment_helper(...); typedef __decltype((_S_propagate_on_container_copy_assignment_helper((_Alloc *)0))) __propagate_on_container_copy_assignment; 
# 172
public: typedef __propagate_on_container_copy_assignment propagate_on_container_copy_assignment; 
# 174
private: template< class _Tp> static typename _Tp::propagate_on_container_move_assignment _S_propagate_on_container_move_assignment_helper(_Tp *); static false_type _S_propagate_on_container_move_assignment_helper(...); typedef __decltype((_S_propagate_on_container_move_assignment_helper((_Alloc *)0))) __propagate_on_container_move_assignment; 
# 184
public: typedef __propagate_on_container_move_assignment propagate_on_container_move_assignment; 
# 186
private: template< class _Tp> static typename _Tp::propagate_on_container_swap _S_propagate_on_container_swap_helper(_Tp *); static false_type _S_propagate_on_container_swap_helper(...); typedef __decltype((_S_propagate_on_container_swap_helper((_Alloc *)0))) __propagate_on_container_swap; 
# 195
public: typedef __propagate_on_container_swap propagate_on_container_swap; 
# 199
template< class _Tp> using rebind_alloc = typename __alloctr_rebind< _Alloc, _Tp> ::__type; 
# 201
template< class _Tp> using rebind_traits = std::allocator_traits< rebind_alloc< _Tp> > ; 
# 206
private: 
# 205
template< class _Alloc2> 
# 206
struct __allocate_helper { 
# 208
template< class _Alloc3, class 
# 209
 = __decltype(((std::declval< _Alloc3 *> ()->allocate(std::declval< size_type> (), std::declval< const_void_pointer> ()))))> static true_type 
# 208
__test(int); 
# 214
template< class > static false_type __test(...); 
# 217
using type = __decltype((__test< _Alloc> (0))); 
# 218
}; 
# 220
template< class _Alloc2> using __has_allocate = typename __allocate_helper< _Alloc2> ::type; 
# 223
template< class _Alloc2, class 
# 224
 = _Require< __has_allocate< _Alloc2> > > static pointer 
# 226
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer __hint) 
# 227
{ return (__a.allocate(__n, __hint)); } 
# 229
template< class _Alloc2, class _UnusedHint, class 
# 230
 = _Require< __not_< __has_allocate< _Alloc2> > > > static pointer 
# 232
_S_allocate(_Alloc2 &__a, size_type __n, _UnusedHint) 
# 233
{ return (__a.allocate(__n)); } 
# 235
template< class _Tp, class ..._Args> 
# 236
struct __construct_helper { 
# 238
template< class _Alloc2, class 
# 239
 = __decltype(((std::declval< _Alloc2 *> ()->construct(std::declval< _Tp *> (), std::declval< _Args> ()...))))> static true_type 
# 238
__test(int); 
# 243
template< class > static false_type __test(...); 
# 246
using type = __decltype((__test< _Alloc> (0))); 
# 247
}; 
# 249
template< class _Tp, class ..._Args> using __has_construct = typename __construct_helper< _Tp, _Args...> ::type; 
# 253
template< class _Tp, class ..._Args> static _Require< __has_construct< _Tp, _Args...> >  
# 255
_S_construct(_Alloc &__a, _Tp *__p, _Args &&...__args) 
# 256
{ (__a.construct(__p, std::forward< _Args> (__args)...)); } 
# 258
template< class _Tp, class ..._Args> static _Require< __and_< __not_< __has_construct< _Tp, _Args...> > , is_constructible< _Tp, _Args...> > >  
# 262
_S_construct(_Alloc &, _Tp *__p, _Args &&...__args) 
# 263
{ ::new ((void *)__p) (_Tp)(std::forward< _Args> (__args)...); } 
# 265
template< class _Tp> 
# 266
struct __destroy_helper { 
# 268
template< class _Alloc2, class 
# 269
 = __decltype(((std::declval< _Alloc2 *> ()->destroy(std::declval< _Tp *> ()))))> static true_type 
# 268
__test(int); 
# 273
template< class > static false_type __test(...); 
# 276
using type = __decltype((__test< _Alloc> (0))); 
# 277
}; 
# 279
template< class _Tp> using __has_destroy = typename __destroy_helper< _Tp> ::type; 
# 282
template< class _Tp> static _Require< __has_destroy< _Tp> >  
# 284
_S_destroy(_Alloc &__a, _Tp *__p) 
# 285
{ (__a.destroy(__p)); } 
# 287
template< class _Tp> static _Require< __not_< __has_destroy< _Tp> > >  
# 289
_S_destroy(_Alloc &, _Tp *__p) 
# 290
{ (__p->~_Tp()); } 
# 292
template< class _Alloc2> 
# 293
struct __maxsize_helper { 
# 295
template< class _Alloc3, class 
# 296
 = __decltype(((std::declval< _Alloc3 *> ()->max_size())))> static true_type 
# 295
__test(int); 
# 299
template< class > static false_type __test(...); 
# 302
using type = __decltype((__test< _Alloc2> (0))); 
# 303
}; 
# 305
template< class _Alloc2> using __has_max_size = typename __maxsize_helper< _Alloc2> ::type; 
# 308
template< class _Alloc2, class 
# 309
 = _Require< __has_max_size< _Alloc2> > > static size_type 
# 311
_S_max_size(_Alloc2 &__a, int) 
# 312
{ return (__a.max_size()); } 
# 314
template< class _Alloc2, class 
# 315
 = _Require< __not_< __has_max_size< _Alloc2> > > > static size_type 
# 317
_S_max_size(_Alloc2 &, ...) 
# 318
{ return __gnu_cxx::__numeric_traits< __size_type> ::__max; } 
# 320
template< class _Alloc2> 
# 321
struct __select_helper { 
# 323
template< class _Alloc3, class 
# 324
 = __decltype(((std::declval< _Alloc3 *> ()->select_on_container_copy_construction())))> static true_type 
# 323
__test(int); 
# 328
template< class > static false_type __test(...); 
# 331
using type = __decltype((__test< _Alloc2> (0))); 
# 332
}; 
# 334
template< class _Alloc2> using __has_soccc = typename __select_helper< _Alloc2> ::type; 
# 337
template< class _Alloc2, class 
# 338
 = _Require< __has_soccc< _Alloc2> > > static _Alloc2 
# 340
_S_select(_Alloc2 &__a, int) 
# 341
{ return (__a.select_on_container_copy_construction()); } 
# 343
template< class _Alloc2, class 
# 344
 = _Require< __not_< __has_soccc< _Alloc2> > > > static _Alloc2 
# 346
_S_select(_Alloc2 &__a, ...) 
# 347
{ return __a; } 
# 359
public: static pointer allocate(_Alloc &__a, size_type __n) 
# 360
{ return (__a.allocate(__n)); } 
# 374
static pointer allocate(_Alloc &__a, size_type __n, const_void_pointer __hint) 
# 375
{ return _S_allocate(__a, __n, __hint); } 
# 385
static void deallocate(_Alloc &__a, pointer __p, size_type __n) 
# 386
{ (__a.deallocate(__p, __n)); } 
# 399
template< class _Tp, class ..._Args> static auto 
# 400
construct(_Alloc &__a, _Tp *__p, _Args &&...__args)->__decltype((_S_construct(__a, __p, std::forward< _Args> (__args)...))) 
# 402
{ _S_construct(__a, __p, std::forward< _Args> (__args)...); } 
# 412
template< class _Tp> static void 
# 413
destroy(_Alloc &__a, _Tp *__p) 
# 414
{ _S_destroy(__a, __p); } 
# 424
static size_type max_size(const _Alloc &__a) noexcept 
# 425
{ return _S_max_size(__a, 0); } 
# 436
static _Alloc select_on_container_copy_construction(const _Alloc &__rhs) 
# 437
{ return _S_select(__rhs, 0); } 
# 438
}; 
# 441
template< class _Tp> 
# 442
struct allocator_traits< allocator< _Tp> >  { 
# 445
using allocator_type = allocator< _Tp> ; 
# 447
using value_type = _Tp; 
# 450
using pointer = _Tp *; 
# 453
using const_pointer = const _Tp *; 
# 456
using void_pointer = void *; 
# 459
using const_void_pointer = const void *; 
# 462
using difference_type = ptrdiff_t; 
# 465
using size_type = size_t; 
# 468
using propagate_on_container_copy_assignment = false_type; 
# 471
using propagate_on_container_move_assignment = true_type; 
# 474
using propagate_on_container_swap = false_type; 
# 476
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 479
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 490
static pointer allocate(allocator_type &__a, size_type __n) 
# 491
{ return (__a.allocate(__n)); } 
# 504
static pointer allocate(allocator_type &__a, size_type __n, const_void_pointer __hint) 
# 505
{ return (__a.allocate(__n, __hint)); } 
# 516
static void deallocate(allocator_type &__a, pointer __p, size_type __n) 
# 517
{ (__a.deallocate(__p, __n)); } 
# 527
template< class _Up, class ..._Args> static void 
# 529
construct(allocator_type &__a, _Up *__p, _Args &&...__args) 
# 530
{ (__a.construct(__p, std::forward< _Args> (__args)...)); } 
# 539
template< class _Up> static void 
# 541
destroy(allocator_type &__a, _Up *__p) 
# 542
{ (__a.destroy(__p)); } 
# 550
static size_type max_size(const allocator_type &__a) noexcept 
# 551
{ return (__a.max_size()); } 
# 559
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 560
{ return __rhs; } 
# 561
}; 
# 564
template< class _Alloc> inline void 
# 566
__do_alloc_on_copy(_Alloc &__one, const _Alloc &__two, true_type) 
# 567
{ __one = __two; } 
# 569
template< class _Alloc> inline void 
# 571
__do_alloc_on_copy(_Alloc &, const _Alloc &, false_type) 
# 572
{ } 
# 574
template< class _Alloc> inline void 
# 575
__alloc_on_copy(_Alloc &__one, const _Alloc &__two) 
# 576
{ 
# 577
typedef allocator_traits< _Alloc>  __traits; 
# 578
typedef typename allocator_traits< _Alloc> ::propagate_on_container_copy_assignment __pocca; 
# 579
__do_alloc_on_copy(__one, __two, __pocca()); 
# 580
} 
# 582
template< class _Alloc> inline _Alloc 
# 583
__alloc_on_copy(const _Alloc &__a) 
# 584
{ 
# 585
typedef allocator_traits< _Alloc>  __traits; 
# 586
return __traits::select_on_container_copy_construction(__a); 
# 587
} 
# 589
template< class _Alloc> inline void 
# 590
__do_alloc_on_move(_Alloc &__one, _Alloc &__two, true_type) 
# 591
{ __one = std::move(__two); } 
# 593
template< class _Alloc> inline void 
# 594
__do_alloc_on_move(_Alloc &, _Alloc &, false_type) 
# 595
{ } 
# 597
template< class _Alloc> inline void 
# 598
__alloc_on_move(_Alloc &__one, _Alloc &__two) 
# 599
{ 
# 600
typedef allocator_traits< _Alloc>  __traits; 
# 601
typedef typename allocator_traits< _Alloc> ::propagate_on_container_move_assignment __pocma; 
# 602
__do_alloc_on_move(__one, __two, __pocma()); 
# 603
} 
# 605
template< class _Alloc> inline void 
# 606
__do_alloc_on_swap(_Alloc &__one, _Alloc &__two, true_type) 
# 607
{ 
# 608
using std::swap;
# 609
swap(__one, __two); 
# 610
} 
# 612
template< class _Alloc> inline void 
# 613
__do_alloc_on_swap(_Alloc &, _Alloc &, false_type) 
# 614
{ } 
# 616
template< class _Alloc> inline void 
# 617
__alloc_on_swap(_Alloc &__one, _Alloc &__two) 
# 618
{ 
# 619
typedef allocator_traits< _Alloc>  __traits; 
# 620
typedef typename allocator_traits< _Alloc> ::propagate_on_container_swap __pocs; 
# 621
__do_alloc_on_swap(__one, __two, __pocs()); 
# 622
} 
# 624
template< class _Alloc> 
# 625
class __is_copy_insertable_impl { 
# 627
typedef allocator_traits< _Alloc>  _Traits; 
# 629
template< class _Up, class 
# 630
 = __decltype((_Traits::construct(std::declval< _Alloc &> (), std::declval< _Up *> (), std::declval< const _Up &> ())))> static true_type 
# 629
_M_select(int); 
# 636
template< class _Up> static false_type _M_select(...); 
# 641
public: typedef __decltype((_M_select< typename _Alloc::value_type> (0))) type; 
# 642
}; 
# 645
template< class _Alloc> 
# 646
struct __is_copy_insertable : public __is_copy_insertable_impl< _Alloc> ::type { 
# 648
}; 
# 651
template< class _Tp> 
# 652
struct __is_copy_insertable< allocator< _Tp> >  : public is_copy_constructible< _Tp>  { 
# 654
}; 
# 657
}
# 41 "/usr/include/c++/5/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 46
template< class _Alloc> 
# 47
struct __allocator_always_compares_equal : public std::false_type { }; 
# 49
template< class _Tp> 
# 50
struct __allocator_always_compares_equal< std::allocator< _Tp> >  : public std::true_type { 
# 51
}; 
# 53
template< class , class > struct array_allocator; 
# 55
template< class _Tp, class _Array> 
# 56
struct __allocator_always_compares_equal< array_allocator< _Tp, _Array> >  : public std::true_type { 
# 57
}; 
# 59
template< class > struct bitmap_allocator; 
# 61
template< class _Tp> 
# 62
struct __allocator_always_compares_equal< bitmap_allocator< _Tp> >  : public std::true_type { 
# 63
}; 
# 65
template< class > struct malloc_allocator; 
# 67
template< class _Tp> 
# 68
struct __allocator_always_compares_equal< malloc_allocator< _Tp> >  : public std::true_type { 
# 69
}; 
# 71
template< class > struct mt_allocator; 
# 73
template< class _Tp> 
# 74
struct __allocator_always_compares_equal< mt_allocator< _Tp> >  : public std::true_type { 
# 75
}; 
# 77
template< class > class new_allocator; 
# 79
template< class _Tp> 
# 80
struct __allocator_always_compares_equal< new_allocator< _Tp> >  : public std::true_type { 
# 81
}; 
# 83
template< class > struct pool_allocator; 
# 85
template< class _Tp> 
# 86
struct __allocator_always_compares_equal< pool_allocator< _Tp> >  : public std::true_type { 
# 87
}; 
# 94
template< class _Alloc> 
# 95
struct __alloc_traits : public std::allocator_traits< _Alloc>  { 
# 100
typedef _Alloc allocator_type; 
# 102
typedef ::std::allocator_traits< _Alloc>  _Base_type; 
# 103
typedef typename ::std::allocator_traits< _Alloc> ::value_type value_type; 
# 104
typedef typename ::std::allocator_traits< _Alloc> ::pointer pointer; 
# 105
typedef typename ::std::allocator_traits< _Alloc> ::const_pointer const_pointer; 
# 106
typedef typename ::std::allocator_traits< _Alloc> ::size_type size_type; 
# 107
typedef typename ::std::allocator_traits< _Alloc> ::difference_type difference_type; 
# 109
typedef value_type &reference; 
# 110
typedef const value_type &const_reference; 
# 111
using ::std::allocator_traits< _Alloc> ::allocate;
# 112
using ::std::allocator_traits< _Alloc> ::deallocate;
# 113
using ::std::allocator_traits< _Alloc> ::construct;
# 114
using ::std::allocator_traits< _Alloc> ::destroy;
# 115
using ::std::allocator_traits< _Alloc> ::max_size;
# 119
private: 
# 118
template< class _Ptr> using __is_custom_pointer = ::std::__and_< ::std::is_same< typename ::std::allocator_traits< _Alloc> ::pointer, _Ptr> , ::std::__not_< ::std::is_pointer< _Ptr> > > ; 
# 127
public: 
# 125
template< class _Ptr, class ..._Args> static typename ::std::enable_if< ::std::__and_< ::std::is_same< typename ::std::allocator_traits< _Alloc> ::pointer, _Ptr> , ::std::__not_< ::std::is_pointer< _Ptr> > > ::value> ::type 
# 127
construct(_Alloc &__a, _Ptr __p, _Args &&...__args) 
# 128
{ 
# 129
_Base_type::construct(__a, ::std::addressof(*__p), ::std::forward< _Args> (__args)...); 
# 131
} 
# 134
template< class _Ptr> static typename ::std::enable_if< ::std::__and_< ::std::is_same< typename ::std::allocator_traits< _Alloc> ::pointer, _Ptr> , ::std::__not_< ::std::is_pointer< _Ptr> > > ::value> ::type 
# 136
destroy(_Alloc &__a, _Ptr __p) 
# 137
{ _Base_type::destroy(__a, ::std::addressof(*__p)); } 
# 139
static _Alloc _S_select_on_copy(const _Alloc &__a) 
# 140
{ return _Base_type::select_on_container_copy_construction(__a); } 
# 142
static void _S_on_swap(_Alloc &__a, _Alloc &__b) 
# 143
{ ::std::__alloc_on_swap(__a, __b); } 
# 145
static constexpr bool _S_propagate_on_copy_assign() 
# 146
{ return _Base_type::propagate_on_container_copy_assignment::value; } 
# 148
static constexpr bool _S_propagate_on_move_assign() 
# 149
{ return _Base_type::propagate_on_container_move_assignment::value; } 
# 151
static constexpr bool _S_propagate_on_swap() 
# 152
{ return _Base_type::propagate_on_container_swap::value; } 
# 154
static constexpr bool _S_always_equal() 
# 155
{ return __allocator_always_compares_equal< _Alloc> ::value; } 
# 157
static constexpr bool _S_nothrow_move() 
# 158
{ return (_S_propagate_on_move_assign)() || (_S_always_equal)(); } 
# 160
static constexpr bool _S_nothrow_swap() 
# 161
{ 
# 162
using ::std::swap;
# 163
return (!(_S_propagate_on_swap)()) || noexcept(swap(::std::declval< _Alloc &> (), ::std::declval< _Alloc &> ())); 
# 165
} 
# 167
template< class _Tp> 
# 168
struct rebind { 
# 169
typedef typename ::std::allocator_traits< _Alloc> ::template rebind_alloc< _Tp>  other; }; 
# 210
}; 
# 213
}
# 46 "/usr/include/c++/5/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
inline namespace __cxx11 { 
# 70
template< class _CharT, class _Traits, class _Alloc> 
# 71
class basic_string { 
# 74
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 75
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other>  _Alloc_traits; 
# 79
public: typedef _Traits traits_type; 
# 80
typedef typename _Traits::char_type value_type; 
# 81
typedef _Char_alloc_type allocator_type; 
# 82
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::size_type size_type; 
# 83
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::difference_type difference_type; 
# 84
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::reference reference; 
# 85
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_reference const_reference; 
# 86
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer pointer; 
# 87
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer const_pointer; 
# 88
typedef __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string>  iterator; 
# 90
typedef __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string>  const_iterator; 
# 91
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer, basic_string> >  const_reverse_iterator; 
# 92
typedef std::reverse_iterator< __gnu_cxx::__normal_iterator< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer, basic_string> >  reverse_iterator; 
# 95
static const size_type npos = (static_cast< size_type>(-1)); 
# 102
private: typedef const_iterator __const_iterator; 
# 106
struct _Alloc_hider : public allocator_type { 
# 108
_Alloc_hider(typename ::std::__cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, const _Alloc &__a = _Alloc()) : ::std::__cxx11::basic_string< _CharT, _Traits, _Alloc> ::allocator_type(__a), _M_p(__dat) 
# 109
{ } 
# 111
typename ::std::__cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer _M_p; 
# 112
}; 
# 114
_Alloc_hider _M_dataplus; 
# 115
size_type _M_string_length; 
# 117
enum { _S_local_capacity = (15) / sizeof(_CharT)}; 
# 120
union { 
# 121
_CharT _M_local_buf[(_S_local_capacity) + 1]; 
# 122
size_type _M_allocated_capacity; 
# 123
}; 
# 126
void _M_data(pointer __p) 
# 127
{ ((_M_dataplus)._M_p) = __p; } 
# 130
void _M_length(size_type __length) 
# 131
{ (_M_string_length) = __length; } 
# 134
pointer _M_data() const 
# 135
{ return (_M_dataplus)._M_p; } 
# 138
pointer _M_local_data() 
# 139
{ 
# 141
return std::pointer_traits< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::pointer> ::pointer_to(*(__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf)); 
# 145
} 
# 148
const_pointer _M_local_data() const 
# 149
{ 
# 151
return std::pointer_traits< typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::const_pointer> ::pointer_to(*(__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf)); 
# 155
} 
# 158
void _M_capacity(size_type __capacity) 
# 159
{ (__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_allocated_capacity) = __capacity; } 
# 162
void _M_set_length(size_type __n) 
# 163
{ 
# 164
_M_length(__n); 
# 165
traits_type::assign(_M_data()[__n], _CharT()); 
# 166
} 
# 169
bool _M_is_local() const 
# 170
{ return _M_data() == this->_M_local_data(); } 
# 174
pointer _M_create(size_type &, size_type); 
# 177
void _M_dispose() 
# 178
{ 
# 179
if (!_M_is_local()) { 
# 180
_M_destroy(__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_allocated_capacity); }  
# 181
} 
# 184
void _M_destroy(size_type __size) throw() 
# 185
{ _Alloc_traits::deallocate(this->_M_get_allocator(), _M_data(), __size + 1); } 
# 189
template< class _InIterator> void 
# 191
_M_construct_aux(_InIterator __beg, _InIterator __end, __false_type) 
# 193
{ 
# 194
typedef typename iterator_traits< _InIterator> ::iterator_category _Tag; 
# 195
_M_construct(__beg, __end, _Tag()); 
# 196
} 
# 200
template< class _Integer> void 
# 202
_M_construct_aux(_Integer __beg, _Integer __end, __true_type) 
# 203
{ _M_construct_aux_2(static_cast< size_type>(__beg), __end); } 
# 206
void _M_construct_aux_2(size_type __req, _CharT __c) 
# 207
{ _M_construct(__req, __c); } 
# 209
template< class _InIterator> void 
# 211
_M_construct(_InIterator __beg, _InIterator __end) 
# 212
{ 
# 213
typedef typename __is_integer< _InIterator> ::__type _Integral; 
# 214
_M_construct_aux(__beg, __end, _Integral()); 
# 215
} 
# 218
template< class _InIterator> void _M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag); 
# 225
template< class _FwdIterator> void _M_construct(_FwdIterator __beg, _FwdIterator __end, forward_iterator_tag); 
# 231
void _M_construct(size_type __req, _CharT __c); 
# 234
allocator_type &_M_get_allocator() 
# 235
{ return _M_dataplus; } 
# 238
const allocator_type &_M_get_allocator() const 
# 239
{ return _M_dataplus; } 
# 258
size_type _M_check(size_type __pos, const char *__s) const 
# 259
{ 
# 260
if (__pos > this->size()) { 
# 261
__throw_out_of_range_fmt("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, this->size()); }  
# 264
return __pos; 
# 265
} 
# 268
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const 
# 269
{ 
# 270
if ((this->max_size() - (this->size() - __n1)) < __n2) { 
# 271
__throw_length_error(__s); }  
# 272
} 
# 277
size_type _M_limit(size_type __pos, size_type __off) const noexcept 
# 278
{ 
# 279
const bool __testoff = __off < (this->size() - __pos); 
# 280
return __testoff ? __off : (this->size() - __pos); 
# 281
} 
# 285
bool _M_disjunct(const _CharT *__s) const noexcept 
# 286
{ 
# 287
return less< const _CharT *> ()(__s, _M_data()) || less< const _CharT *> ()(_M_data() + this->size(), __s); 
# 289
} 
# 294
static void _S_copy(_CharT *__d, const _CharT *__s, size_type __n) 
# 295
{ 
# 296
if (__n == 1) { 
# 297
traits_type::assign(*__d, *__s); } else { 
# 299
traits_type::copy(__d, __s, __n); }  
# 300
} 
# 303
static void _S_move(_CharT *__d, const _CharT *__s, size_type __n) 
# 304
{ 
# 305
if (__n == 1) { 
# 306
traits_type::assign(*__d, *__s); } else { 
# 308
traits_type::move(__d, __s, __n); }  
# 309
} 
# 312
static void _S_assign(_CharT *__d, size_type __n, _CharT __c) 
# 313
{ 
# 314
if (__n == 1) { 
# 315
traits_type::assign(*__d, __c); } else { 
# 317
traits_type::assign(__d, __n, __c); }  
# 318
} 
# 322
template< class _Iterator> static void 
# 324
_S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) 
# 325
{ 
# 326
for (; __k1 != __k2; (++__k1), (++__p)) { 
# 327
traits_type::assign(*__p, *__k1); }  
# 328
} 
# 331
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) noexcept 
# 332
{ _S_copy_chars(__p, (__k1.base()), (__k2.base())); } 
# 335
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) noexcept 
# 337
{ _S_copy_chars(__p, (__k1.base()), (__k2.base())); } 
# 340
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) noexcept 
# 341
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 344
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) noexcept 
# 346
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 349
static int _S_compare(size_type __n1, size_type __n2) noexcept 
# 350
{ 
# 351
const difference_type __d = (difference_type)(__n1 - __n2); 
# 353
if (__d > __gnu_cxx::__numeric_traits< int> ::__max) { 
# 354
return __gnu_cxx::__numeric_traits_integer< int> ::__max; } else { 
# 355
if (__d < __gnu_cxx::__numeric_traits< int> ::__min) { 
# 356
return __gnu_cxx::__numeric_traits_integer< int> ::__min; } else { 
# 358
return (int)__d; }  }  
# 359
} 
# 362
void _M_assign(const basic_string & __rcs); 
# 365
void _M_mutate(size_type __pos, size_type __len1, const _CharT * __s, size_type __len2); 
# 369
void _M_erase(size_type __pos, size_type __n); 
# 379
public: basic_string() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_dataplus(this->_M_local_data()) 
# 384
{ _M_set_length(0); } 
# 390
explicit basic_string(const _Alloc &__a) : _M_dataplus(this->_M_local_data(), __a) 
# 392
{ _M_set_length(0); } 
# 398
basic_string(const basic_string &__str) : _M_dataplus(this->_M_local_data(), __str._M_get_allocator()) 
# 400
{ _M_construct((__str._M_data()), (__str._M_data()) + __str.length()); } 
# 410
basic_string(const basic_string &__str, size_type __pos, size_type 
# 411
__n = npos) : _M_dataplus(this->_M_local_data()) 
# 413
{ 
# 414
const _CharT *__start = (__str._M_data()) + __str._M_check(__pos, "basic_string::basic_string"); 
# 416
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 417
} 
# 426
basic_string(const basic_string &__str, size_type __pos, size_type 
# 427
__n, const _Alloc &__a) : _M_dataplus(this->_M_local_data(), __a) 
# 429
{ 
# 430
const _CharT *__start = (__str._M_data()) + __str._M_check(__pos, "string::string"); 
# 432
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 433
} 
# 444
basic_string(const _CharT *__s, size_type __n, const _Alloc &
# 445
__a = _Alloc()) : _M_dataplus(this->_M_local_data(), __a) 
# 447
{ _M_construct(__s, __s + __n); } 
# 454
basic_string(const _CharT *__s, const _Alloc &__a = _Alloc()) : _M_dataplus(this->_M_local_data(), __a) 
# 456
{ _M_construct(__s, (__s) ? __s + traits_type::length(__s) : (__s + npos)); } 
# 464
basic_string(size_type __n, _CharT __c, const _Alloc &__a = _Alloc()) : _M_dataplus(this->_M_local_data(), __a) 
# 466
{ _M_construct(__n, __c); } 
# 476
basic_string(basic_string &&__str) noexcept : _M_dataplus(this->_M_local_data(), std::move(__str._M_get_allocator())) 
# 478
{ 
# 479
if (__str._M_is_local()) 
# 480
{ 
# 481
traits_type::copy(__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, __str.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, (_S_local_capacity) + 1); 
# 483
} else 
# 485
{ 
# 486
_M_data((__str._M_data())); 
# 487
_M_capacity(__str.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_allocated_capacity); 
# 488
}  
# 493
_M_length(__str.length()); 
# 494
(__str._M_data(__str._M_local_data())); 
# 495
__str._M_set_length(0); 
# 496
} 
# 503
basic_string(initializer_list< _CharT>  __l, const _Alloc &__a = _Alloc()) : _M_dataplus(this->_M_local_data(), __a) 
# 505
{ _M_construct((__l.begin()), (__l.end())); } 
# 507
basic_string(const basic_string &__str, const _Alloc &__a) : _M_dataplus(this->_M_local_data(), __a) 
# 509
{ _M_construct(__str.begin(), __str.end()); } 
# 511
basic_string(basic_string &&__str, const _Alloc &__a) : _M_dataplus(this->_M_local_data(), __a) 
# 513
{ 
# 514
if (__str.get_allocator() == __a) { 
# 515
(*this) = std::move(__str); } else { 
# 517
_M_construct(__str.begin(), __str.end()); }  
# 518
} 
# 529
template< class _InputIterator, class 
# 530
 = _RequireInputIter< _InputIterator> > 
# 534
basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &
# 535
__a = _Alloc()) : _M_dataplus(this->_M_local_data(), __a) 
# 537
{ _M_construct(__beg, __end); } 
# 542
~basic_string() 
# 543
{ _M_dispose(); } 
# 550
basic_string &operator=(const basic_string &__str) 
# 551
{ return (this->assign(__str)); } 
# 558
basic_string &operator=(const _CharT *__s) 
# 559
{ return (this->assign(__s)); } 
# 569
basic_string &operator=(_CharT __c) 
# 570
{ 
# 571
(this->assign(1, __c)); 
# 572
return *this; 
# 573
} 
# 587
basic_string &operator=(basic_string &&__str) 
# 588
{ 
# 589
this->swap(__str); 
# 590
return *this; 
# 591
} 
# 598
basic_string &operator=(initializer_list< _CharT>  __l) 
# 599
{ 
# 600
(this->assign((__l.begin()), (__l.size()))); 
# 601
return *this; 
# 602
} 
# 611
iterator begin() noexcept 
# 612
{ return ((iterator)(_M_data())); } 
# 619
const_iterator begin() const noexcept 
# 620
{ return ((const_iterator)(_M_data())); } 
# 627
iterator end() noexcept 
# 628
{ return ((iterator)(_M_data() + this->size())); } 
# 635
const_iterator end() const noexcept 
# 636
{ return ((const_iterator)(_M_data() + this->size())); } 
# 644
reverse_iterator rbegin() noexcept 
# 645
{ return ((reverse_iterator)(this->end())); } 
# 653
const_reverse_iterator rbegin() const noexcept 
# 654
{ return ((const_reverse_iterator)(this->end())); } 
# 662
reverse_iterator rend() noexcept 
# 663
{ return ((reverse_iterator)(this->begin())); } 
# 671
const_reverse_iterator rend() const noexcept 
# 672
{ return ((const_reverse_iterator)(this->begin())); } 
# 680
const_iterator cbegin() const noexcept 
# 681
{ return ((const_iterator)((this->_M_data()))); } 
# 688
const_iterator cend() const noexcept 
# 689
{ return ((const_iterator)((this->_M_data()) + this->size())); } 
# 697
const_reverse_iterator crbegin() const noexcept 
# 698
{ return ((const_reverse_iterator)(this->end())); } 
# 706
const_reverse_iterator crend() const noexcept 
# 707
{ return ((const_reverse_iterator)(this->begin())); } 
# 715
size_type size() const noexcept 
# 716
{ return _M_string_length; } 
# 721
size_type length() const noexcept 
# 722
{ return _M_string_length; } 
# 726
size_type max_size() const noexcept 
# 727
{ return (_Alloc_traits::max_size(this->_M_get_allocator()) - 1) / 2; } 
# 740
void resize(size_type __n, _CharT __c); 
# 753
void resize(size_type __n) 
# 754
{ (this->resize(__n, _CharT())); } 
# 759
void shrink_to_fit() noexcept 
# 760
{ 
# 762
if (capacity() > size()) 
# 763
{ 
# 764
try 
# 765
{ reserve(0); } 
# 766
catch (...) 
# 767
{ }  
# 768
}  
# 770
} 
# 778
size_type capacity() const noexcept 
# 779
{ 
# 780
return (_M_is_local()) ? (size_type)(_S_local_capacity) : (__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_allocated_capacity); 
# 782
} 
# 802
void reserve(size_type __res_arg = 0); 
# 808
void clear() noexcept 
# 809
{ _M_set_length(0); } 
# 816
bool empty() const noexcept 
# 817
{ return this->size() == 0; } 
# 831
const_reference operator[](size_type __pos) const noexcept 
# 832
{ 
# 833
; 
# 834
return _M_data()[__pos]; 
# 835
} 
# 848
reference operator[](size_type __pos) 
# 849
{ 
# 852
; 
# 854
; 
# 855
return _M_data()[__pos]; 
# 856
} 
# 869
const_reference at(size_type __n) const 
# 870
{ 
# 871
if (__n >= this->size()) { 
# 872
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, this->size()); }  
# 876
return _M_data()[__n]; 
# 877
} 
# 890
reference at(size_type __n) 
# 891
{ 
# 892
if (__n >= size()) { 
# 893
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, this->size()); }  
# 897
return _M_data()[__n]; 
# 898
} 
# 906
reference front() noexcept 
# 907
{ return operator[](0); } 
# 914
const_reference front() const noexcept 
# 915
{ return operator[](0); } 
# 922
reference back() noexcept 
# 923
{ return operator[](this->size() - 1); } 
# 930
const_reference back() const noexcept 
# 931
{ return operator[](this->size() - 1); } 
# 941
basic_string &operator+=(const basic_string &__str) 
# 942
{ return (this->append(__str)); } 
# 950
basic_string &operator+=(const _CharT *__s) 
# 951
{ return (this->append(__s)); } 
# 959
basic_string &operator+=(_CharT __c) 
# 960
{ 
# 961
this->push_back(__c); 
# 962
return *this; 
# 963
} 
# 972
basic_string &operator+=(initializer_list< _CharT>  __l) 
# 973
{ return (this->append((__l.begin()), (__l.size()))); } 
# 982
basic_string &append(const basic_string &__str) 
# 983
{ return _M_append((__str._M_data()), __str.size()); } 
# 999
basic_string &append(const basic_string &__str, size_type __pos, size_type __n) 
# 1000
{ return _M_append((__str._M_data()) + __str._M_check(__pos, "basic_string::append"), __str._M_limit(__pos, __n)); 
# 1002
} 
# 1011
basic_string &append(const _CharT *__s, size_type __n) 
# 1012
{ 
# 1013
; 
# 1014
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1015
return _M_append(__s, __n); 
# 1016
} 
# 1024
basic_string &append(const _CharT *__s) 
# 1025
{ 
# 1026
; 
# 1027
const size_type __n = traits_type::length(__s); 
# 1028
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1029
return _M_append(__s, __n); 
# 1030
} 
# 1041
basic_string &append(size_type __n, _CharT __c) 
# 1042
{ return _M_replace_aux(this->size(), (size_type)0, __n, __c); } 
# 1051
basic_string &append(initializer_list< _CharT>  __l) 
# 1052
{ return (this->append((__l.begin()), (__l.size()))); } 
# 1064
template< class _InputIterator, class 
# 1065
 = _RequireInputIter< _InputIterator> > basic_string &
# 1070
append(_InputIterator __first, _InputIterator __last) 
# 1071
{ return (this->replace(this->end(), this->end(), __first, __last)); } 
# 1078
void push_back(_CharT __c) 
# 1079
{ 
# 1080
const size_type __size = this->size(); 
# 1081
if ((__size + 1) > this->capacity()) { 
# 1082
this->_M_mutate(__size, (size_type)0, 0, (size_type)1); }  
# 1083
traits_type::assign((this->_M_data())[__size], __c); 
# 1084
this->_M_set_length(__size + 1); 
# 1085
} 
# 1093
basic_string &assign(const basic_string &__str) 
# 1094
{ 
# 1095
this->_M_assign(__str); 
# 1096
return *this; 
# 1097
} 
# 1109
basic_string &assign(basic_string &&__str) 
# 1110
{ 
# 1113
return (*this) = std::move(__str); 
# 1114
} 
# 1131
basic_string &assign(const basic_string &__str, size_type __pos, size_type __n) 
# 1132
{ return _M_replace((size_type)0, this->size(), (__str._M_data()) + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n)); 
# 1134
} 
# 1147
basic_string &assign(const _CharT *__s, size_type __n) 
# 1148
{ 
# 1149
; 
# 1150
return _M_replace((size_type)0, this->size(), __s, __n); 
# 1151
} 
# 1163
basic_string &assign(const _CharT *__s) 
# 1164
{ 
# 1165
; 
# 1166
return _M_replace((size_type)0, this->size(), __s, traits_type::length(__s)); 
# 1168
} 
# 1180
basic_string &assign(size_type __n, _CharT __c) 
# 1181
{ return _M_replace_aux((size_type)0, this->size(), __n, __c); } 
# 1192
template< class _InputIterator, class 
# 1193
 = _RequireInputIter< _InputIterator> > basic_string &
# 1198
assign(_InputIterator __first, _InputIterator __last) 
# 1199
{ return (this->replace(this->begin(), this->end(), __first, __last)); } 
# 1208
basic_string &assign(initializer_list< _CharT>  __l) 
# 1209
{ return (this->assign((__l.begin()), (__l.size()))); } 
# 1229
iterator insert(const_iterator __p, size_type __n, _CharT __c) 
# 1230
{ 
# 1231
; 
# 1232
const size_type __pos = __p - this->begin(); 
# 1233
(this->replace(__p, __p, __n, __c)); 
# 1234
return ((iterator)((this->_M_data()) + __pos)); 
# 1235
} 
# 1270
template< class _InputIterator, class 
# 1271
 = _RequireInputIter< _InputIterator> > iterator 
# 1273
insert(const_iterator __p, _InputIterator __beg, _InputIterator __end) 
# 1274
{ 
# 1275
; 
# 1276
const size_type __pos = __p - this->begin(); 
# 1277
(this->replace(__p, __p, __beg, __end)); 
# 1278
return ((iterator)((this->_M_data()) + __pos)); 
# 1279
} 
# 1307
void insert(iterator __p, initializer_list< _CharT>  __l) 
# 1308
{ 
# 1309
; 
# 1310
(this->insert(__p - this->begin(), (__l.begin()), (__l.size()))); 
# 1311
} 
# 1327
basic_string &insert(size_type __pos1, const basic_string &__str) 
# 1328
{ return (this->replace(__pos1, (size_type)0, (__str._M_data()), __str.size())); 
# 1329
} 
# 1350
basic_string &insert(size_type __pos1, const basic_string &__str, size_type 
# 1351
__pos2, size_type __n) 
# 1352
{ return (this->replace(__pos1, (size_type)0, (__str._M_data()) + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n))); 
# 1354
} 
# 1373
basic_string &insert(size_type __pos, const _CharT *__s, size_type __n) 
# 1374
{ return (this->replace(__pos, (size_type)0, __s, __n)); } 
# 1392
basic_string &insert(size_type __pos, const _CharT *__s) 
# 1393
{ 
# 1394
; 
# 1395
return (this->replace(__pos, (size_type)0, __s, traits_type::length(__s))); 
# 1397
} 
# 1416
basic_string &insert(size_type __pos, size_type __n, _CharT __c) 
# 1417
{ return _M_replace_aux(_M_check(__pos, "basic_string::insert"), (size_type)0, __n, __c); 
# 1418
} 
# 1434
iterator insert(__const_iterator __p, _CharT __c) 
# 1435
{ 
# 1436
; 
# 1437
const size_type __pos = __p - this->begin(); 
# 1438
_M_replace_aux(__pos, (size_type)0, (size_type)1, __c); 
# 1439
return ((iterator)(_M_data() + __pos)); 
# 1440
} 
# 1458
basic_string &erase(size_type __pos = 0, size_type __n = npos) 
# 1459
{ 
# 1460
this->_M_erase(_M_check(__pos, "basic_string::erase"), _M_limit(__pos, __n)); 
# 1462
return *this; 
# 1463
} 
# 1474
iterator erase(__const_iterator __position) 
# 1475
{ 
# 1477
; 
# 1478
const size_type __pos = __position - this->begin(); 
# 1479
this->_M_erase(__pos, (size_type)1); 
# 1480
return ((iterator)(_M_data() + __pos)); 
# 1481
} 
# 1493
iterator erase(__const_iterator __first, __const_iterator __last) 
# 1494
{ 
# 1496
; 
# 1497
const size_type __pos = __first - this->begin(); 
# 1498
this->_M_erase(__pos, __last - __first); 
# 1499
return ((iterator)((this->_M_data()) + __pos)); 
# 1500
} 
# 1509
void pop_back() noexcept 
# 1510
{ _M_erase(size() - 1, 1); } 
# 1531
basic_string &replace(size_type __pos, size_type __n, const basic_string &__str) 
# 1532
{ return (this->replace(__pos, __n, (__str._M_data()), __str.size())); } 
# 1553
basic_string &replace(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1554
__pos2, size_type __n2) 
# 1555
{ return (this->replace(__pos1, __n1, (__str._M_data()) + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2))); 
# 1557
} 
# 1578
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1579
__n2) 
# 1580
{ 
# 1581
; 
# 1582
return _M_replace(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __s, __n2); 
# 1584
} 
# 1603
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s) 
# 1604
{ 
# 1605
; 
# 1606
return (this->replace(__pos, __n1, __s, traits_type::length(__s))); 
# 1607
} 
# 1627
basic_string &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) 
# 1628
{ return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c); 
# 1629
} 
# 1645
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const basic_string &
# 1646
__str) 
# 1647
{ return (this->replace(__i1, __i2, (__str._M_data()), __str.size())); } 
# 1665
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 1666
__s, size_type __n) 
# 1667
{ 
# 1669
; 
# 1670
return (this->replace(__i1 - this->begin(), __i2 - __i1, __s, __n)); 
# 1671
} 
# 1687
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *__s) 
# 1688
{ 
# 1689
; 
# 1690
return (this->replace(__i1, __i2, __s, traits_type::length(__s))); 
# 1691
} 
# 1708
basic_string &replace(__const_iterator __i1, __const_iterator __i2, size_type __n, _CharT 
# 1709
__c) 
# 1710
{ 
# 1712
; 
# 1713
return _M_replace_aux(__i1 - this->begin(), __i2 - __i1, __n, __c); 
# 1714
} 
# 1732
template< class _InputIterator, class 
# 1733
 = _RequireInputIter< _InputIterator> > basic_string &
# 1735
replace(const_iterator __i1, const_iterator __i2, _InputIterator 
# 1736
__k1, _InputIterator __k2) 
# 1737
{ 
# 1739
; 
# 1740
; 
# 1741
return (this->_M_replace_dispatch(__i1, __i2, __k1, __k2, __false_type())); 
# 1743
} 
# 1765
basic_string &replace(__const_iterator __i1, __const_iterator __i2, _CharT *
# 1766
__k1, _CharT *__k2) 
# 1767
{ 
# 1769
; 
# 1770
; 
# 1771
return (this->replace(__i1 - this->begin(), __i2 - __i1, __k1, __k2 - __k1)); 
# 1773
} 
# 1776
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 1777
__k1, const _CharT *__k2) 
# 1778
{ 
# 1780
; 
# 1781
; 
# 1782
return (this->replace(__i1 - this->begin(), __i2 - __i1, __k1, __k2 - __k1)); 
# 1784
} 
# 1787
basic_string &replace(__const_iterator __i1, __const_iterator __i2, iterator 
# 1788
__k1, iterator __k2) 
# 1789
{ 
# 1791
; 
# 1792
; 
# 1793
return (this->replace(__i1 - this->begin(), __i2 - __i1, (__k1.base()), __k2 - __k1)); 
# 1795
} 
# 1798
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const_iterator 
# 1799
__k1, const_iterator __k2) 
# 1800
{ 
# 1802
; 
# 1803
; 
# 1804
return (this->replace(__i1 - this->begin(), __i2 - __i1, (__k1.base()), __k2 - __k1)); 
# 1806
} 
# 1823
basic_string &replace(const_iterator __i1, const_iterator __i2, initializer_list< _CharT>  
# 1824
__l) 
# 1825
{ return (this->replace(__i1, __i2, (__l.begin()), (__l.end()))); } 
# 1831
private: 
# 1829
template< class _Integer> basic_string &
# 1831
_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _Integer 
# 1832
__n, _Integer __val, __true_type) 
# 1833
{ return _M_replace_aux(__i1 - this->begin(), __i2 - __i1, __n, __val); } 
# 1835
template< class _InputIterator> basic_string &_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type); 
# 1842
basic_string &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c); 
# 1846
basic_string &_M_replace(size_type __pos, size_type __len1, const _CharT * __s, const size_type __len2); 
# 1850
basic_string &_M_append(const _CharT * __s, size_type __n); 
# 1867
public: size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const; 
# 1877
void swap(basic_string & __s) noexcept; 
# 1887
const _CharT *c_str() const noexcept 
# 1888
{ return _M_data(); } 
# 1897
const _CharT *data() const noexcept 
# 1898
{ return _M_data(); } 
# 1904
allocator_type get_allocator() const noexcept 
# 1905
{ return this->_M_get_allocator(); } 
# 1920
size_type find(const _CharT * __s, size_type __pos, size_type __n) const; 
# 1933
size_type find(const basic_string &__str, size_type __pos = 0) const noexcept 
# 1935
{ return (this->find(__str.data(), __pos, __str.size())); } 
# 1948
size_type find(const _CharT *__s, size_type __pos = 0) const 
# 1949
{ 
# 1950
; 
# 1951
return (this->find(__s, __pos, traits_type::length(__s))); 
# 1952
} 
# 1965
size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 1978
size_type rfind(const basic_string &__str, size_type __pos = npos) const noexcept 
# 1980
{ return (this->rfind(__str.data(), __pos, __str.size())); } 
# 1995
size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const; 
# 2008
size_type rfind(const _CharT *__s, size_type __pos = npos) const 
# 2009
{ 
# 2010
; 
# 2011
return (this->rfind(__s, __pos, traits_type::length(__s))); 
# 2012
} 
# 2025
size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 2039
size_type find_first_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2041
{ return (this->find_first_of(__str.data(), __pos, __str.size())); } 
# 2056
size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const; 
# 2069
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const 
# 2070
{ 
# 2071
; 
# 2072
return (this->find_first_of(__s, __pos, traits_type::length(__s))); 
# 2073
} 
# 2088
size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 2089
{ return (this->find(__c, __pos)); } 
# 2103
size_type find_last_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2105
{ return (this->find_last_of(__str.data(), __pos, __str.size())); } 
# 2120
size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const; 
# 2133
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const 
# 2134
{ 
# 2135
; 
# 2136
return (this->find_last_of(__s, __pos, traits_type::length(__s))); 
# 2137
} 
# 2152
size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 2153
{ return (this->rfind(__c, __pos)); } 
# 2166
size_type find_first_not_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2168
{ return (this->find_first_not_of(__str.data(), __pos, __str.size())); } 
# 2183
size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const; 
# 2197
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const 
# 2198
{ 
# 2199
; 
# 2200
return (this->find_first_not_of(__s, __pos, traits_type::length(__s))); 
# 2201
} 
# 2214
size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 2229
size_type find_last_not_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2231
{ return (this->find_last_not_of(__str.data(), __pos, __str.size())); } 
# 2246
size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const; 
# 2260
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const 
# 2261
{ 
# 2262
; 
# 2263
return (this->find_last_not_of(__s, __pos, traits_type::length(__s))); 
# 2264
} 
# 2277
size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 2293
basic_string substr(size_type __pos = 0, size_type __n = npos) const 
# 2294
{ return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n); 
# 2295
} 
# 2312
int compare(const basic_string &__str) const 
# 2313
{ 
# 2314
const size_type __size = this->size(); 
# 2315
const size_type __osize = __str.size(); 
# 2316
const size_type __len = std::min(__size, __osize); 
# 2318
int __r = traits_type::compare(_M_data(), __str.data(), __len); 
# 2319
if (!__r) { 
# 2320
__r = (_S_compare)(__size, __osize); }  
# 2321
return __r; 
# 2322
} 
# 2344
int compare(size_type __pos, size_type __n, const basic_string & __str) const; 
# 2370
int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2) const; 
# 2388
int compare(const _CharT * __s) const; 
# 2412
int compare(size_type __pos, size_type __n1, const _CharT * __s) const; 
# 2439
int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const; 
# 2441
}; 
# 2442
}
# 4781
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4783
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 4784
__rhs) 
# 4785
{ 
# 4786
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 4787
(__str.append(__rhs)); 
# 4788
return __str; 
# 4789
} 
# 4797
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(const _CharT * __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 4808
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 4818
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4820
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 4821
__rhs) 
# 4822
{ 
# 4823
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 4824
(__str.append(__rhs)); 
# 4825
return __str; 
# 4826
} 
# 4834
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4836
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, _CharT __rhs) 
# 4837
{ 
# 4838
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 4839
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 4840
__string_type __str(__lhs); 
# 4841
(__str.append((__size_type)1, __rhs)); 
# 4842
return __str; 
# 4843
} 
# 4846
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4848
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 4849
__rhs) 
# 4850
{ return std::move((__lhs.append(__rhs))); } 
# 4852
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4854
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 4855
__rhs) 
# 4856
{ return std::move((__rhs.insert(0, __lhs))); } 
# 4858
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4860
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 4861
__rhs) 
# 4862
{ 
# 4863
const auto __size = (__lhs.size()) + (__rhs.size()); 
# 4864
const bool __cond = (__size > (__lhs.capacity())) && (__size <= (__rhs.capacity())); 
# 4866
return __cond ? std::move((__rhs.insert(0, __lhs))) : std::move((__lhs.append(__rhs))); 
# 4868
} 
# 4870
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4872
operator+(const _CharT *__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 4873
__rhs) 
# 4874
{ return std::move((__rhs.insert(0, __lhs))); } 
# 4876
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4878
operator+(_CharT __lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 4879
__rhs) 
# 4880
{ return std::move((__rhs.insert(0, 1, __lhs))); } 
# 4882
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4884
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const _CharT *
# 4885
__rhs) 
# 4886
{ return std::move((__lhs.append(__rhs))); } 
# 4888
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 4890
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, _CharT 
# 4891
__rhs) 
# 4892
{ return std::move((__lhs.append(1, __rhs))); } 
# 4902
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 4904
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 4905
__rhs) 
# 4906
{ return (__lhs.compare(__rhs)) == 0; } 
# 4908
template< class _CharT> inline typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, bool> ::__type 
# 4911
operator==(const __cxx11::basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &__lhs, const __cxx11::basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &
# 4912
__rhs) 
# 4913
{ return ((__lhs.size()) == (__rhs.size())) && (!std::char_traits< _CharT> ::compare((__lhs.data()), (__rhs.data()), (__lhs.size()))); 
# 4915
} 
# 4923
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 4925
operator==(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 4926
__rhs) 
# 4927
{ return (__rhs.compare(__lhs)) == 0; } 
# 4935
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 4937
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 4938
__rhs) 
# 4939
{ return (__lhs.compare(__rhs)) == 0; } 
# 4948
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 4950
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 4951
__rhs) 
# 4952
{ return !(__lhs == __rhs); } 
# 4960
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 4962
operator!=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 4963
__rhs) 
# 4964
{ return !(__lhs == __rhs); } 
# 4972
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 4974
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 4975
__rhs) 
# 4976
{ return !(__lhs == __rhs); } 
# 4985
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 4987
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 4988
__rhs) 
# 4989
{ return (__lhs.compare(__rhs)) < 0; } 
# 4997
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 4999
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 5000
__rhs) 
# 5001
{ return (__lhs.compare(__rhs)) < 0; } 
# 5009
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5011
operator<(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5012
__rhs) 
# 5013
{ return (__rhs.compare(__lhs)) > 0; } 
# 5022
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5024
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5025
__rhs) 
# 5026
{ return (__lhs.compare(__rhs)) > 0; } 
# 5034
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5036
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 5037
__rhs) 
# 5038
{ return (__lhs.compare(__rhs)) > 0; } 
# 5046
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5048
operator>(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5049
__rhs) 
# 5050
{ return (__rhs.compare(__lhs)) < 0; } 
# 5059
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5061
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5062
__rhs) 
# 5063
{ return (__lhs.compare(__rhs)) <= 0; } 
# 5071
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5073
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 5074
__rhs) 
# 5075
{ return (__lhs.compare(__rhs)) <= 0; } 
# 5083
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5085
operator<=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5086
__rhs) 
# 5087
{ return (__rhs.compare(__lhs)) >= 0; } 
# 5096
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5098
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5099
__rhs) 
# 5100
{ return (__lhs.compare(__rhs)) >= 0; } 
# 5108
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5110
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 5111
__rhs) 
# 5112
{ return (__lhs.compare(__rhs)) >= 0; } 
# 5120
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 5122
operator>=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5123
__rhs) 
# 5124
{ return (__rhs.compare(__lhs)) <= 0; } 
# 5133
template< class _CharT, class _Traits, class _Alloc> inline void 
# 5135
swap(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5136
__rhs) 
# 5137
{ (__lhs.swap(__rhs)); } 
# 5152
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str); 
# 5159
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str); 
# 5170
template< class _CharT, class _Traits, class _Alloc> inline basic_ostream< _CharT, _Traits>  &
# 5172
operator<<(basic_ostream< _CharT, _Traits>  &__os, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5173
__str) 
# 5174
{ 
# 5177
return __ostream_insert(__os, (__str.data()), (__str.size())); 
# 5178
} 
# 5193
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &getline(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str, _CharT __delim); 
# 5210
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 5212
getline(basic_istream< _CharT, _Traits>  &__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5213
__str) 
# 5214
{ return std::getline(__is, __str, (__is.widen('\n'))); } 
# 5218
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 5220
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5221
__str, _CharT __delim) 
# 5222
{ return std::getline(__is, __str, __delim); } 
# 5225
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 5227
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 5228
__str) 
# 5229
{ return std::getline(__is, __str); } 
# 5234
template<> basic_istream< char>  &getline(basic_istream< char>  & __in, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str, char __delim); 
# 5240
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __in, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str, wchar_t __delim); 
# 5245
}
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 25 "/usr/include/_G_config.h" 3
typedef 
# 22
struct { 
# 23
__off_t __pos; 
# 24
__mbstate_t __state; 
# 25
} _G_fpos_t; 
# 30
typedef 
# 27
struct { 
# 28
__off64_t __pos; 
# 29
__mbstate_t __state; 
# 30
} _G_fpos64_t; 
# 144 "/usr/include/libio.h" 3
struct _IO_jump_t; struct _IO_FILE; 
# 150
typedef void _IO_lock_t; 
# 156
struct _IO_marker { 
# 157
_IO_marker *_next; 
# 158
_IO_FILE *_sbuf; 
# 162
int _pos; 
# 173
}; 
# 176
enum __codecvt_result { 
# 178
__codecvt_ok, 
# 179
__codecvt_partial, 
# 180
__codecvt_error, 
# 181
__codecvt_noconv
# 182
}; 
# 241
struct _IO_FILE { 
# 242
int _flags; 
# 247
char *_IO_read_ptr; 
# 248
char *_IO_read_end; 
# 249
char *_IO_read_base; 
# 250
char *_IO_write_base; 
# 251
char *_IO_write_ptr; 
# 252
char *_IO_write_end; 
# 253
char *_IO_buf_base; 
# 254
char *_IO_buf_end; 
# 256
char *_IO_save_base; 
# 257
char *_IO_backup_base; 
# 258
char *_IO_save_end; 
# 260
_IO_marker *_markers; 
# 262
_IO_FILE *_chain; 
# 264
int _fileno; 
# 268
int _flags2; 
# 270
__off_t _old_offset; 
# 274
unsigned short _cur_column; 
# 275
signed char _vtable_offset; 
# 276
char _shortbuf[1]; 
# 280
_IO_lock_t *_lock; 
# 289
__off64_t _offset; 
# 297
void *__pad1; 
# 298
void *__pad2; 
# 299
void *__pad3; 
# 300
void *__pad4; 
# 302
::size_t __pad5; 
# 303
int _mode; 
# 305
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(::size_t)]; 
# 307
}; 
# 313
struct _IO_FILE_plus; 
# 315
extern _IO_FILE_plus _IO_2_1_stdin_; 
# 316
extern _IO_FILE_plus _IO_2_1_stdout_; 
# 317
extern _IO_FILE_plus _IO_2_1_stderr_; 
# 333
typedef __ssize_t __io_read_fn(void * __cookie, char * __buf, ::size_t __nbytes); 
# 341
typedef __ssize_t __io_write_fn(void * __cookie, const char * __buf, ::size_t __n); 
# 350
typedef int __io_seek_fn(void * __cookie, __off64_t * __pos, int __w); 
# 353
typedef int __io_close_fn(void * __cookie); 
# 358
typedef __io_read_fn cookie_read_function_t; 
# 359
typedef __io_write_fn cookie_write_function_t; 
# 360
typedef __io_seek_fn cookie_seek_function_t; 
# 361
typedef __io_close_fn cookie_close_function_t; 
# 370
typedef 
# 365
struct { 
# 366
__io_read_fn *read; 
# 367
__io_write_fn *write; 
# 368
__io_seek_fn *seek; 
# 369
__io_close_fn *close; 
# 370
} _IO_cookie_io_functions_t; 
# 371
typedef _IO_cookie_io_functions_t cookie_io_functions_t; 
# 373
struct _IO_cookie_file; 
# 376
extern void _IO_cookie_init(_IO_cookie_file * __cfile, int __read_write, void * __cookie, _IO_cookie_io_functions_t __fns); 
# 382
extern "C" {
# 385
extern int __underflow(_IO_FILE *); 
# 386
extern int __uflow(_IO_FILE *); 
# 387
extern int __overflow(_IO_FILE *, int); 
# 429
extern int _IO_getc(_IO_FILE * __fp); 
# 430
extern int _IO_putc(int __c, _IO_FILE * __fp); 
# 431
extern int _IO_feof(_IO_FILE * __fp) throw(); 
# 432
extern int _IO_ferror(_IO_FILE * __fp) throw(); 
# 434
extern int _IO_peekc_locked(_IO_FILE * __fp); 
# 440
extern void _IO_flockfile(_IO_FILE *) throw(); 
# 441
extern void _IO_funlockfile(_IO_FILE *) throw(); 
# 442
extern int _IO_ftrylockfile(_IO_FILE *) throw(); 
# 459
extern int _IO_vfscanf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list, int *__restrict__); 
# 461
extern int _IO_vfprintf(_IO_FILE *__restrict__, const char *__restrict__, __gnuc_va_list); 
# 463
extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t); 
# 464
extern ::size_t _IO_sgetn(_IO_FILE *, void *, ::size_t); 
# 466
extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int); 
# 467
extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int); 
# 469
extern void _IO_free_backup_area(_IO_FILE *) throw(); 
# 521
}
# 79 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 110
typedef _G_fpos_t fpos_t; 
# 116
typedef _G_fpos64_t fpos64_t; 
# 168
extern _IO_FILE *stdin; 
# 169
extern _IO_FILE *stdout; 
# 170
extern _IO_FILE *stderr; 
# 178
extern int remove(const char * __filename) throw(); 
# 180
extern int rename(const char * __old, const char * __new) throw(); 
# 185
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) throw(); 
# 195
extern FILE *tmpfile() __attribute((__warn_unused_result__)); 
# 205
extern FILE *tmpfile64() __attribute((__warn_unused_result__)); 
# 209
extern char *tmpnam(char * __s) throw() __attribute((__warn_unused_result__)); 
# 215
extern char *tmpnam_r(char * __s) throw() __attribute((__warn_unused_result__)); 
# 227
extern char *tempnam(const char * __dir, const char * __pfx) throw()
# 228
 __attribute((__malloc__)) __attribute((__warn_unused_result__)); 
# 237
extern int fclose(FILE * __stream); 
# 242
extern int fflush(FILE * __stream); 
# 252
extern int fflush_unlocked(FILE * __stream); 
# 262
extern int fcloseall(); 
# 272
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 273
 __attribute((__warn_unused_result__)); 
# 278
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream)
# 280
 __attribute((__warn_unused_result__)); 
# 297
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 298
 __attribute((__warn_unused_result__)); 
# 299
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream)
# 301
 __attribute((__warn_unused_result__)); 
# 306
extern FILE *fdopen(int __fd, const char * __modes) throw() __attribute((__warn_unused_result__)); 
# 312
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, _IO_cookie_io_functions_t __io_funcs) throw()
# 314
 __attribute((__warn_unused_result__)); 
# 319
extern FILE *fmemopen(void * __s, ::size_t __len, const char * __modes) throw()
# 320
 __attribute((__warn_unused_result__)); 
# 325
extern FILE *open_memstream(char ** __bufloc, ::size_t * __sizeloc) throw() __attribute((__warn_unused_result__)); 
# 332
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) throw(); 
# 336
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, ::size_t __n) throw(); 
# 343
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, ::size_t __size) throw(); 
# 347
extern void setlinebuf(FILE * __stream) throw(); 
# 356
extern __attribute((gnu_inline)) inline int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 362
extern __attribute((gnu_inline)) inline int printf(const char *__restrict__ __format, ...); 
# 364
extern __attribute((gnu_inline)) inline int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 371
extern __attribute((gnu_inline)) inline int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 377
extern __attribute((gnu_inline)) inline int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 379
extern __attribute((gnu_inline)) inline int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw(); 
# 386
extern __attribute((gnu_inline)) inline int snprintf(char *__restrict__ __s, ::size_t __maxlen, const char *__restrict__ __format, ...) throw()
# 388
 __attribute((__format__(__printf__, 3, 4))); 
# 390
extern __attribute((gnu_inline)) inline int vsnprintf(char *__restrict__ __s, ::size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 392
 __attribute((__format__(__printf__, 3, 0))); 
# 399
extern __attribute((gnu_inline)) inline int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) throw()
# 401
 __attribute((__format__(__printf__, 2, 0))) __attribute((__warn_unused_result__)); 
# 402
extern __attribute((gnu_inline)) inline int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 404
 __attribute((__format__(__printf__, 2, 3))) __attribute((__warn_unused_result__)); 
# 405
extern __attribute((gnu_inline)) inline int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw()
# 407
 __attribute((__format__(__printf__, 2, 3))) __attribute((__warn_unused_result__)); 
# 412
extern __attribute((gnu_inline)) inline int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 414
 __attribute((__format__(__printf__, 2, 0))); 
# 415
extern __attribute((gnu_inline)) inline int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 416
 __attribute((__format__(__printf__, 2, 3))); 
# 425
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...)
# 426
 __attribute((__warn_unused_result__)); 
# 431
extern int scanf(const char *__restrict__ __format, ...) __attribute((__warn_unused_result__)); 
# 433
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) throw(); 
# 471
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg)
# 473
 __attribute((__format__(__scanf__, 2, 0))) __attribute((__warn_unused_result__)); 
# 479
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg)
# 480
 __attribute((__format__(__scanf__, 1, 0))) __attribute((__warn_unused_result__)); 
# 483
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) throw()
# 485
 __attribute((__format__(__scanf__, 2, 0))); 
# 531
extern int fgetc(FILE * __stream); 
# 532
extern int getc(FILE * __stream); 
# 538
extern __attribute((gnu_inline)) inline int getchar(); 
# 550
extern __attribute((gnu_inline)) inline int getc_unlocked(FILE * __stream); 
# 551
extern __attribute((gnu_inline)) inline int getchar_unlocked(); 
# 561
extern __attribute((gnu_inline)) inline int fgetc_unlocked(FILE * __stream); 
# 573
extern int fputc(int __c, FILE * __stream); 
# 574
extern int putc(int __c, FILE * __stream); 
# 580
extern __attribute((gnu_inline)) inline int putchar(int __c); 
# 594
extern __attribute((gnu_inline)) inline int fputc_unlocked(int __c, FILE * __stream); 
# 602
extern __attribute((gnu_inline)) inline int putc_unlocked(int __c, FILE * __stream); 
# 603
extern __attribute((gnu_inline)) inline int putchar_unlocked(int __c); 
# 610
extern int getw(FILE * __stream); 
# 613
extern int putw(int __w, FILE * __stream); 
# 622
extern __attribute((gnu_inline)) inline char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream)
# 623
 __attribute((__warn_unused_result__)); 
# 638
extern char *gets(char * __s) __attribute((__warn_unused_result__)) __attribute((__deprecated__)); 
# 649
extern __attribute((gnu_inline)) inline char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream)
# 650
 __attribute((__warn_unused_result__)); 
# 665
extern __ssize_t __getdelim(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream)
# 667
 __attribute((__warn_unused_result__)); 
# 668
extern __ssize_t getdelim(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream)
# 670
 __attribute((__warn_unused_result__)); 
# 678
extern __attribute((gnu_inline)) inline __ssize_t getline(char **__restrict__ __lineptr, ::size_t *__restrict__ __n, FILE *__restrict__ __stream)
# 680
 __attribute((__warn_unused_result__)); 
# 689
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 695
extern int puts(const char * __s); 
# 702
extern int ungetc(int __c, FILE * __stream); 
# 709
extern __attribute((gnu_inline)) inline ::size_t fread(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream)
# 710
 __attribute((__warn_unused_result__)); 
# 715
extern ::size_t fwrite(const void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __s); 
# 726
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 737
extern __attribute((gnu_inline)) inline ::size_t fread_unlocked(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream)
# 738
 __attribute((__warn_unused_result__)); 
# 739
extern ::size_t fwrite_unlocked(const void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream); 
# 749
extern int fseek(FILE * __stream, long __off, int __whence); 
# 754
extern long ftell(FILE * __stream) __attribute((__warn_unused_result__)); 
# 759
extern void rewind(FILE * __stream); 
# 773
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 778
extern __off_t ftello(FILE * __stream) __attribute((__warn_unused_result__)); 
# 798
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 803
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 818
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 819
extern __off64_t ftello64(FILE * __stream) __attribute((__warn_unused_result__)); 
# 820
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 821
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 826
extern void clearerr(FILE * __stream) throw(); 
# 828
extern int feof(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 830
extern int ferror(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 835
extern void clearerr_unlocked(FILE * __stream) throw(); 
# 836
extern __attribute((gnu_inline)) inline int feof_unlocked(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 837
extern __attribute((gnu_inline)) inline int ferror_unlocked(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 846
extern void perror(const char * __s); 
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3
extern int sys_nerr; 
# 27
extern const char *const sys_errlist[]; 
# 30
extern int _sys_nerr; 
# 31
extern const char *const _sys_errlist[]; 
# 858 "/usr/include/stdio.h" 3
extern int fileno(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 863
extern int fileno_unlocked(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 872
extern FILE *popen(const char * __command, const char * __modes) __attribute((__warn_unused_result__)); 
# 878
extern int pclose(FILE * __stream); 
# 884
extern char *ctermid(char * __s) throw(); 
# 890
extern char *cuserid(char * __s); 
# 895
struct obstack; 
# 898
extern __attribute((gnu_inline)) inline int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) throw()
# 900
 __attribute((__format__(__printf__, 2, 3))); 
# 901
extern __attribute((gnu_inline)) inline int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 904
 __attribute((__format__(__printf__, 2, 0))); 
# 912
extern void flockfile(FILE * __stream) throw(); 
# 916
extern int ftrylockfile(FILE * __stream) throw() __attribute((__warn_unused_result__)); 
# 919
extern void funlockfile(FILE * __stream) throw(); 
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3
__attribute((__gnu_inline__)) extern inline int 
# 44
getchar() 
# 45
{ 
# 46
return _IO_getc(stdin); 
# 47
} 
# 52
__attribute((__gnu_inline__)) extern inline int 
# 53
fgetc_unlocked(FILE *__fp) 
# 54
{ 
# 55
return (__builtin_expect((__fp->_IO_read_ptr) >= (__fp->_IO_read_end), 0)) ? __uflow(__fp) : (*((unsigned char *)((__fp->_IO_read_ptr)++))); 
# 56
} 
# 62
__attribute((__gnu_inline__)) extern inline int 
# 63
getc_unlocked(FILE *__fp) 
# 64
{ 
# 65
return (__builtin_expect((__fp->_IO_read_ptr) >= (__fp->_IO_read_end), 0)) ? __uflow(__fp) : (*((unsigned char *)((__fp->_IO_read_ptr)++))); 
# 66
} 
# 69
__attribute((__gnu_inline__)) extern inline int 
# 70
getchar_unlocked() 
# 71
{ 
# 72
return (__builtin_expect((stdin->_IO_read_ptr) >= (stdin->_IO_read_end), 0)) ? __uflow(stdin) : (*((unsigned char *)((stdin->_IO_read_ptr)++))); 
# 73
} 
# 78
__attribute((__gnu_inline__)) extern inline int 
# 79
putchar(int __c) 
# 80
{ 
# 81
return _IO_putc(__c, stdout); 
# 82
} 
# 87
__attribute((__gnu_inline__)) extern inline int 
# 88
fputc_unlocked(int __c, FILE *__stream) 
# 89
{ 
# 90
return (__builtin_expect((__stream->_IO_write_ptr) >= (__stream->_IO_write_end), 0)) ? __overflow(__stream, (unsigned char)__c) : ((unsigned char)((*((__stream->_IO_write_ptr)++)) = __c)); 
# 91
} 
# 97
__attribute((__gnu_inline__)) extern inline int 
# 98
putc_unlocked(int __c, FILE *__stream) 
# 99
{ 
# 100
return (__builtin_expect((__stream->_IO_write_ptr) >= (__stream->_IO_write_end), 0)) ? __overflow(__stream, (unsigned char)__c) : ((unsigned char)((*((__stream->_IO_write_ptr)++)) = __c)); 
# 101
} 
# 104
__attribute((__gnu_inline__)) extern inline int 
# 105
putchar_unlocked(int __c) 
# 106
{ 
# 107
return (__builtin_expect((stdout->_IO_write_ptr) >= (stdout->_IO_write_end), 0)) ? __overflow(stdout, (unsigned char)__c) : ((unsigned char)((*((stdout->_IO_write_ptr)++)) = __c)); 
# 108
} 
# 114
__attribute((__gnu_inline__)) extern inline __ssize_t 
# 115
getline(char **__lineptr, ::size_t *__n, FILE *__stream) 
# 116
{ 
# 117
return __getdelim(__lineptr, __n, '\n', __stream); 
# 118
} 
# 124
__attribute((__gnu_inline__)) extern inline int
# 125
 __attribute((__leaf__)) feof_unlocked(FILE *__stream) throw() 
# 126
{ 
# 127
return ((__stream->_flags) & 16) != 0; 
# 128
} 
# 131
__attribute((__gnu_inline__)) extern inline int
# 132
 __attribute((__leaf__)) ferror_unlocked(FILE *__stream) throw() 
# 133
{ 
# 134
return ((__stream->_flags) & 32) != 0; 
# 135
} 
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3
extern int __sprintf_chk(char *__restrict__ __s, int __flag, ::size_t __slen, const char *__restrict__ __format, ...) throw(); 
# 25
extern int __vsprintf_chk(char *__restrict__ __s, int __flag, ::size_t __slen, const char *__restrict__ __format, __gnuc_va_list __ap) throw(); 
# 30
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 31
 __attribute((__leaf__)) sprintf(char *__restrict__ __s, const char *__restrict__ __fmt, ...) throw() 
# 32
{ 
# 33
return __builtin___sprintf_chk(__s, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __builtin_va_arg_pack()); 
# 35
} 
# 42
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 43
 __attribute((__leaf__)) vsprintf(char *__restrict__ __s, const char *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 45
{ 
# 46
return __builtin___vsprintf_chk(__s, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __ap); 
# 48
} 
# 52
extern int __snprintf_chk(char *__restrict__ __s, ::size_t __n, int __flag, ::size_t __slen, const char *__restrict__ __format, ...) throw(); 
# 55
extern int __vsnprintf_chk(char *__restrict__ __s, ::size_t __n, int __flag, ::size_t __slen, const char *__restrict__ __format, __gnuc_va_list __ap) throw(); 
# 60
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 61
 __attribute((__leaf__)) snprintf(char *__restrict__ __s, ::size_t __n, const char *__restrict__ __fmt, ...) throw() 
# 63
{ 
# 64
return __builtin___snprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __builtin_va_arg_pack()); 
# 66
} 
# 73
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 74
 __attribute((__leaf__)) vsnprintf(char *__restrict__ __s, ::size_t __n, const char *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 76
{ 
# 77
return __builtin___vsnprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __ap); 
# 79
} 
# 85
extern int __fprintf_chk(FILE *__restrict__ __stream, int __flag, const char *__restrict__ __format, ...); 
# 87
extern int __printf_chk(int __flag, const char *__restrict__ __format, ...); 
# 88
extern int __vfprintf_chk(FILE *__restrict__ __stream, int __flag, const char *__restrict__ __format, __gnuc_va_list __ap); 
# 90
extern int __vprintf_chk(int __flag, const char *__restrict__ __format, __gnuc_va_list __ap); 
# 94
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 95
fprintf(FILE *__restrict__ __stream, const char *__restrict__ __fmt, ...) 
# 96
{ 
# 97
return __fprintf_chk(__stream, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 99
} 
# 101
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 102
printf(const char *__restrict__ __fmt, ...) 
# 103
{ 
# 104
return __printf_chk(2 - 1, __fmt, __builtin_va_arg_pack()); 
# 105
} 
# 113
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 114
vprintf(const char *__restrict__ __fmt, __gnuc_va_list __ap) 
# 115
{ 
# 117
return __vfprintf_chk(stdout, 2 - 1, __fmt, __ap); 
# 121
} 
# 123
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 124
vfprintf(FILE *__restrict__ __stream, const char *__restrict__ 
# 125
__fmt, __gnuc_va_list __ap) 
# 126
{ 
# 127
return __vfprintf_chk(__stream, 2 - 1, __fmt, __ap); 
# 128
} 
# 131
extern int __dprintf_chk(int __fd, int __flag, const char *__restrict__ __fmt, ...)
# 132
 __attribute((__format__(__printf__, 3, 4))); 
# 133
extern int __vdprintf_chk(int __fd, int __flag, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 135
 __attribute((__format__(__printf__, 3, 0))); 
# 138
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 139
dprintf(int __fd, const char *__restrict__ __fmt, ...) 
# 140
{ 
# 141
return __dprintf_chk(__fd, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 143
} 
# 149
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 150
vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __ap) 
# 151
{ 
# 152
return __vdprintf_chk(__fd, 2 - 1, __fmt, __ap); 
# 153
} 
# 158
extern int __asprintf_chk(char **__restrict__ __ptr, int __flag, const char *__restrict__ __fmt, ...) throw()
# 160
 __attribute((__format__(__printf__, 3, 4))) __attribute((__warn_unused_result__)); 
# 161
extern int __vasprintf_chk(char **__restrict__ __ptr, int __flag, const char *__restrict__ __fmt, __gnuc_va_list __arg) throw()
# 163
 __attribute((__format__(__printf__, 3, 0))) __attribute((__warn_unused_result__)); 
# 164
extern int __obstack_printf_chk(obstack *__restrict__ __obstack, int __flag, const char *__restrict__ __format, ...) throw()
# 167
 __attribute((__format__(__printf__, 3, 4))); 
# 168
extern int __obstack_vprintf_chk(obstack *__restrict__ __obstack, int __flag, const char *__restrict__ __format, __gnuc_va_list __args) throw()
# 172
 __attribute((__format__(__printf__, 3, 0))); 
# 175
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 176
 __attribute((__leaf__)) asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw() 
# 177
{ 
# 178
return __asprintf_chk(__ptr, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 180
} 
# 182
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 183
 __attribute((__leaf__)) __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) throw() 
# 185
{ 
# 186
return __asprintf_chk(__ptr, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 188
} 
# 190
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 191
 __attribute((__leaf__)) obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __fmt, ...) throw() 
# 193
{ 
# 194
return __obstack_printf_chk(__obstack, 2 - 1, __fmt, __builtin_va_arg_pack()); 
# 196
} 
# 206
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 207
 __attribute((__leaf__)) vasprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 209
{ 
# 210
return __vasprintf_chk(__ptr, 2 - 1, __fmt, __ap); 
# 211
} 
# 213
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 214
 __attribute((__leaf__)) obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __fmt, __gnuc_va_list __ap) throw() 
# 216
{ 
# 217
return __obstack_vprintf_chk(__obstack, 2 - 1, __fmt, __ap); 
# 219
} 
# 241
extern char *__fgets_chk(char *__restrict__ __s, ::size_t __size, int __n, FILE *__restrict__ __stream)
# 242
 __attribute((__warn_unused_result__)); 
# 243
extern char *__fgets_alias(char *__restrict__ __s, int __n, FILE *__restrict__ __stream) __asm__("fgets")
# 245
 __attribute((__warn_unused_result__)); 
# 246
extern char *__fgets_chk_warn(char *__restrict__ __s, ::size_t __size, int __n, FILE *__restrict__ __stream) __asm__("__fgets_chk")
# 249
 __attribute((__warn_unused_result__)) __attribute((__warning__("fgets called with bigger size than length of destination buffer"))); 
# 252
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline char *
# 253
fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream) 
# 254
{ 
# 255
if (__builtin_object_size(__s, 2 > 1) != ((::size_t)(-1))) 
# 256
{ 
# 257
if ((!(0)) || (__n <= 0)) { 
# 258
return __fgets_chk(__s, __builtin_object_size(__s, 2 > 1), __n, __stream); }  
# 260
if (((::size_t)__n) > __builtin_object_size(__s, 2 > 1)) { 
# 261
return __fgets_chk_warn(__s, __builtin_object_size(__s, 2 > 1), __n, __stream); }  
# 262
}  
# 263
return __fgets_alias(__s, __n, __stream); 
# 264
} 
# 266
extern ::size_t __fread_chk(void *__restrict__ __ptr, ::size_t __ptrlen, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream)
# 268
 __attribute((__warn_unused_result__)); 
# 269
extern ::size_t __fread_alias(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream) __asm__("fread")
# 272
 __attribute((__warn_unused_result__)); 
# 273
extern ::size_t __fread_chk_warn(void *__restrict__ __ptr, ::size_t __ptrlen, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream) __asm__("__fread_chk")
# 278
 __attribute((__warn_unused_result__)) __attribute((__warning__("fread called with bigger size * nmemb than length of destination buffer"))); 
# 281
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline ::size_t 
# 282
fread(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ 
# 283
__stream) 
# 284
{ 
# 285
if (__builtin_object_size(__ptr, 0) != ((::size_t)(-1))) 
# 286
{ 
# 287
if (((!(0)) || (!(0))) || ((__size | __n) >= (((::size_t)1) << (((8) * sizeof(::size_t)) / (2))))) { 
# 290
return __fread_chk(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream); }  
# 292
if ((__size * __n) > __builtin_object_size(__ptr, 0)) { 
# 293
return __fread_chk_warn(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream); }  
# 294
}  
# 295
return __fread_alias(__ptr, __size, __n, __stream); 
# 296
} 
# 299
extern char *__fgets_unlocked_chk(char *__restrict__ __s, ::size_t __size, int __n, FILE *__restrict__ __stream)
# 300
 __attribute((__warn_unused_result__)); 
# 301
extern char *__fgets_unlocked_alias(char *__restrict__ __s, int __n, FILE *__restrict__ __stream) __asm__("fgets_unlocked")
# 303
 __attribute((__warn_unused_result__)); 
# 304
extern char *__fgets_unlocked_chk_warn(char *__restrict__ __s, ::size_t __size, int __n, FILE *__restrict__ __stream) __asm__("__fgets_unlocked_chk")
# 307
 __attribute((__warn_unused_result__)) __attribute((__warning__("fgets_unlocked called with bigger size than length of destination buffer"))); 
# 310
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline char *
# 311
fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream) 
# 312
{ 
# 313
if (__builtin_object_size(__s, 2 > 1) != ((::size_t)(-1))) 
# 314
{ 
# 315
if ((!(0)) || (__n <= 0)) { 
# 316
return __fgets_unlocked_chk(__s, __builtin_object_size(__s, 2 > 1), __n, __stream); }  
# 318
if (((::size_t)__n) > __builtin_object_size(__s, 2 > 1)) { 
# 319
return __fgets_unlocked_chk_warn(__s, __builtin_object_size(__s, 2 > 1), __n, __stream); }  
# 320
}  
# 321
return __fgets_unlocked_alias(__s, __n, __stream); 
# 322
} 
# 327
extern ::size_t __fread_unlocked_chk(void *__restrict__ __ptr, ::size_t __ptrlen, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream)
# 329
 __attribute((__warn_unused_result__)); 
# 330
extern ::size_t __fread_unlocked_alias(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream) __asm__("fread_unlocked")
# 333
 __attribute((__warn_unused_result__)); 
# 334
extern ::size_t __fread_unlocked_chk_warn(void *__restrict__ __ptr, ::size_t __ptrlen, ::size_t __size, ::size_t __n, FILE *__restrict__ __stream) __asm__("__fread_unlocked_chk")
# 339
 __attribute((__warn_unused_result__)) __attribute((__warning__("fread_unlocked called with bigger size * nmemb than length of destination buffer"))); 
# 342
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline ::size_t 
# 343
fread_unlocked(void *__restrict__ __ptr, ::size_t __size, ::size_t __n, FILE *__restrict__ 
# 344
__stream) 
# 345
{ 
# 346
if (__builtin_object_size(__ptr, 0) != ((::size_t)(-1))) 
# 347
{ 
# 348
if (((!(0)) || (!(0))) || ((__size | __n) >= (((::size_t)1) << (((8) * sizeof(::size_t)) / (2))))) { 
# 351
return __fread_unlocked_chk(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream); }  
# 354
if ((__size * __n) > __builtin_object_size(__ptr, 0)) { 
# 355
return __fread_unlocked_chk_warn(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream); }  
# 357
}  
# 360
if ((0) && (0) && ((__size | __n) < (((::size_t)1) << (((8) * sizeof(::size_t)) / (2)))) && ((__size * __n) <= (8))) 
# 364
{ 
# 365
::size_t __cnt = __size * __n; 
# 366
char *__cptr = (char *)__ptr; 
# 367
if (__cnt == (0)) { 
# 368
return 0; }  
# 370
for (; __cnt > (0); --__cnt) 
# 371
{ 
# 372
int __c = (__builtin_expect((__stream->_IO_read_ptr) >= (__stream->_IO_read_end), 0)) ? __uflow(__stream) : (*((unsigned char *)((__stream->_IO_read_ptr)++))); 
# 373
if (__c == (-1)) { 
# 374
break; }  
# 375
(*(__cptr++)) = __c; 
# 376
}  
# 377
return (__cptr - ((char *)__ptr)) / __size; 
# 378
}  
# 380
return __fread_unlocked_alias(__ptr, __size, __n, __stream); 
# 381
} 
# 942 "/usr/include/stdio.h" 3
}
# 96 "/usr/include/c++/5/cstdio" 3
namespace std { 
# 98
using ::FILE;
# 99
using ::fpos_t;
# 101
using ::clearerr;
# 102
using ::fclose;
# 103
using ::feof;
# 104
using ::ferror;
# 105
using ::fflush;
# 106
using ::fgetc;
# 107
using ::fgetpos;
# 108
using ::fgets;
# 109
using ::fopen;
# 110
using ::fprintf;
# 111
using ::fputc;
# 112
using ::fputs;
# 113
using ::fread;
# 114
using ::freopen;
# 115
using ::fscanf;
# 116
using ::fseek;
# 117
using ::fsetpos;
# 118
using ::ftell;
# 119
using ::fwrite;
# 120
using ::getc;
# 121
using ::getchar;
# 124
using ::gets;
# 126
using ::perror;
# 127
using ::printf;
# 128
using ::putc;
# 129
using ::putchar;
# 130
using ::puts;
# 131
using ::remove;
# 132
using ::rename;
# 133
using ::rewind;
# 134
using ::scanf;
# 135
using ::setbuf;
# 136
using ::setvbuf;
# 137
using ::sprintf;
# 138
using ::sscanf;
# 139
using ::tmpfile;
# 141
using ::tmpnam;
# 143
using ::ungetc;
# 144
using ::vfprintf;
# 145
using ::vprintf;
# 146
using ::vsprintf;
# 147
}
# 157
namespace __gnu_cxx { 
# 175
using ::snprintf;
# 176
using ::vfscanf;
# 177
using ::vscanf;
# 178
using ::vsnprintf;
# 179
using ::vsscanf;
# 181
}
# 183
namespace std { 
# 185
using __gnu_cxx::snprintf;
# 186
using __gnu_cxx::vfscanf;
# 187
using __gnu_cxx::vscanf;
# 188
using __gnu_cxx::vsnprintf;
# 189
using __gnu_cxx::vsscanf;
# 190
}
# 31 "/usr/include/errno.h" 3
extern "C" {
# 50 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3
extern int *__errno_location() throw() __attribute((const)); 
# 54 "/usr/include/errno.h" 3
extern char *program_invocation_name, *program_invocation_short_name; 
# 58
}
# 68
typedef int error_t; 
# 46 "/usr/include/c++/5/ext/string_conversions.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 51
template< class _TRet, class _Ret = _TRet, class _CharT, class ...
# 52
_Base> _Ret 
# 54
__stoa(_TRet (*__convf)(const _CharT *, _CharT **, _Base ...), const char *
# 55
__name, const _CharT *__str, std::size_t *__idx, _Base ...
# 56
__base) 
# 57
{ 
# 58
_Ret __ret; 
# 60
_CharT *__endptr; 
# 61
(*__errno_location()) = 0; 
# 62
const _TRet __tmp = __convf(__str, &__endptr, __base...); 
# 64
if (__endptr == __str) { 
# 65
std::__throw_invalid_argument(__name); } else { 
# 66
if (((*__errno_location()) == 34) || (std::__are_same< _Ret, int> ::__value && ((__tmp < __numeric_traits< int> ::__min) || (__tmp > __numeric_traits< int> ::__max)))) { 
# 70
std::__throw_out_of_range(__name); } else { 
# 72
__ret = __tmp; }  }  
# 74
if (__idx) { 
# 75
(*__idx) = (__endptr - __str); }  
# 77
return __ret; 
# 78
} 
# 81
template< class _String, class _CharT = typename _String::value_type> _String 
# 83
__to_xstring(int (*__convf)(_CharT *, std::size_t, const _CharT *, __builtin_va_list), std::size_t 
# 84
__n, const _CharT *
# 85
__fmt, ...) 
# 86
{ 
# 89
_CharT *__s = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __n)); 
# 92
__builtin_va_list __args; 
# 93
__builtin_va_start((__args),__fmt); 
# 95
const int __len = __convf(__s, __n, __fmt, __args); 
# 97
__builtin_va_end(__args); 
# 99
return _String(__s, __s + __len); 
# 100
} 
# 103
}
# 5251 "/usr/include/c++/5/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 5254
inline namespace __cxx11 { 
# 5258
inline int stoi(const string &__str, size_t *__idx = 0, int __base = 10) 
# 5259
{ return __gnu_cxx::__stoa< long, int> (&std::strtol, "stoi", __str.c_str(), __idx, __base); 
# 5260
} 
# 5263
inline long stol(const string &__str, size_t *__idx = 0, int __base = 10) 
# 5264
{ return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(), __idx, __base); 
# 5265
} 
# 5268
inline unsigned long stoul(const string &__str, size_t *__idx = 0, int __base = 10) 
# 5269
{ return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(), __idx, __base); 
# 5270
} 
# 5273
inline long long stoll(const string &__str, size_t *__idx = 0, int __base = 10) 
# 5274
{ return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(), __idx, __base); 
# 5275
} 
# 5278
inline unsigned long long stoull(const string &__str, size_t *__idx = 0, int __base = 10) 
# 5279
{ return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(), __idx, __base); 
# 5280
} 
# 5284
inline float stof(const string &__str, size_t *__idx = 0) 
# 5285
{ return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); } 
# 5288
inline double stod(const string &__str, size_t *__idx = 0) 
# 5289
{ return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); } 
# 5292
inline long double stold(const string &__str, size_t *__idx = 0) 
# 5293
{ return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); } 
# 5299
inline string to_string(int __val) 
# 5300
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(int), "%d", __val); 
# 5301
} 
# 5304
inline string to_string(unsigned __val) 
# 5305
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(unsigned), "%u", __val); 
# 5307
} 
# 5310
inline string to_string(long __val) 
# 5311
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(long), "%ld", __val); 
# 5312
} 
# 5315
inline string to_string(unsigned long __val) 
# 5316
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(unsigned long), "%lu", __val); 
# 5318
} 
# 5321
inline string to_string(long long __val) 
# 5322
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(long long), "%lld", __val); 
# 5324
} 
# 5327
inline string to_string(unsigned long long __val) 
# 5328
{ return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, (4) * sizeof(unsigned long long), "%llu", __val); 
# 5330
} 
# 5333
inline string to_string(float __val) 
# 5334
{ 
# 5335
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 5337
return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, __n, "%f", __val); 
# 5339
} 
# 5342
inline string to_string(double __val) 
# 5343
{ 
# 5344
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 5346
return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, __n, "%f", __val); 
# 5348
} 
# 5351
inline string to_string(long double __val) 
# 5352
{ 
# 5353
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 5355
return __gnu_cxx::__to_xstring< basic_string< char, char_traits< char> , allocator< char> > > (&std::vsnprintf, __n, "%Lf", __val); 
# 5357
} 
# 5361
inline int stoi(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 5362
{ return __gnu_cxx::__stoa< long, int> (&std::wcstol, "stoi", __str.c_str(), __idx, __base); 
# 5363
} 
# 5366
inline long stol(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 5367
{ return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(), __idx, __base); 
# 5368
} 
# 5371
inline unsigned long stoul(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 5372
{ return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(), __idx, __base); 
# 5373
} 
# 5376
inline long long stoll(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 5377
{ return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(), __idx, __base); 
# 5378
} 
# 5381
inline unsigned long long stoull(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 5382
{ return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(), __idx, __base); 
# 5383
} 
# 5387
inline float stof(const wstring &__str, size_t *__idx = 0) 
# 5388
{ return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); } 
# 5391
inline double stod(const wstring &__str, size_t *__idx = 0) 
# 5392
{ return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); } 
# 5395
inline long double stold(const wstring &__str, size_t *__idx = 0) 
# 5396
{ return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); } 
# 5401
inline wstring to_wstring(int __val) 
# 5402
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(int), L"\x25\x64", __val); 
# 5403
} 
# 5406
inline wstring to_wstring(unsigned __val) 
# 5407
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(unsigned), L"\x25\x75", __val); 
# 5409
} 
# 5412
inline wstring to_wstring(long __val) 
# 5413
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(long), L"\x25\x6c\x64", __val); 
# 5414
} 
# 5417
inline wstring to_wstring(unsigned long __val) 
# 5418
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(unsigned long), L"\x25\x6c\x75", __val); 
# 5420
} 
# 5423
inline wstring to_wstring(long long __val) 
# 5424
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(long long), L"\x25\x6c\x6c\x64", __val); 
# 5426
} 
# 5429
inline wstring to_wstring(unsigned long long __val) 
# 5430
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, (4) * sizeof(unsigned long long), L"\x25\x6c\x6c\x75", __val); 
# 5432
} 
# 5435
inline wstring to_wstring(float __val) 
# 5436
{ 
# 5437
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 5439
return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 5441
} 
# 5444
inline wstring to_wstring(double __val) 
# 5445
{ 
# 5446
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 5448
return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 5450
} 
# 5453
inline wstring to_wstring(long double __val) 
# 5454
{ 
# 5455
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 5457
return __gnu_cxx::__to_xstring< basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > (&std::vswprintf, __n, L"\x25\x4c\x66", __val); 
# 5459
} 
# 5463
}
# 5465
}
# 37 "/usr/include/c++/5/bits/hash_bytes.h" 3
namespace std { 
# 47
size_t _Hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 54
size_t _Fnv_hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 57
}
# 37 "/usr/include/c++/5/bits/functional_hash.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _Result, class _Arg> 
# 50
struct __hash_base { 
# 52
typedef _Result result_type; 
# 53
typedef _Arg argument_type; 
# 54
}; 
# 57
template< class _Tp> struct hash; 
# 61
template< class _Tp> 
# 62
struct hash< _Tp *>  : public __hash_base< unsigned long, _Tp *>  { 
# 65
::std::size_t operator()(_Tp *__p) const noexcept 
# 66
{ return reinterpret_cast< ::std::size_t>(__p); } 
# 67
}; 
# 80
template<> struct hash< bool>  : public __hash_base< unsigned long, bool>  { size_t operator()(bool __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 83
template<> struct hash< char>  : public __hash_base< unsigned long, char>  { size_t operator()(char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 86
template<> struct hash< signed char>  : public __hash_base< unsigned long, signed char>  { size_t operator()(signed char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 89
template<> struct hash< unsigned char>  : public __hash_base< unsigned long, unsigned char>  { size_t operator()(unsigned char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 92
template<> struct hash< wchar_t>  : public __hash_base< unsigned long, wchar_t>  { size_t operator()(wchar_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 95
template<> struct hash< char16_t>  : public __hash_base< unsigned long, char16_t>  { size_t operator()(char16_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 98
template<> struct hash< char32_t>  : public __hash_base< unsigned long, char32_t>  { size_t operator()(char32_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 101
template<> struct hash< short>  : public __hash_base< unsigned long, short>  { size_t operator()(short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 104
template<> struct hash< int>  : public __hash_base< unsigned long, int>  { size_t operator()(int __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 107
template<> struct hash< long>  : public __hash_base< unsigned long, long>  { size_t operator()(long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 110
template<> struct hash< long long>  : public __hash_base< unsigned long, long long>  { size_t operator()(long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 113
template<> struct hash< unsigned short>  : public __hash_base< unsigned long, unsigned short>  { size_t operator()(unsigned short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 116
template<> struct hash< unsigned>  : public __hash_base< unsigned long, unsigned>  { size_t operator()(unsigned __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 119
template<> struct hash< unsigned long>  : public __hash_base< unsigned long, unsigned long>  { size_t operator()(unsigned long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 122
template<> struct hash< unsigned long long>  : public __hash_base< unsigned long, unsigned long long>  { size_t operator()(unsigned long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 126
struct _Hash_impl { 
# 129
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 130
__seed = static_cast< size_t>(3339675911UL)) 
# 131
{ return _Hash_bytes(__ptr, __clength, __seed); } 
# 133
template< class _Tp> static size_t 
# 135
hash(const _Tp &__val) 
# 136
{ return hash(&__val, sizeof(__val)); } 
# 138
template< class _Tp> static size_t 
# 140
__hash_combine(const _Tp &__val, size_t __hash) 
# 141
{ return hash(&__val, sizeof(__val), __hash); } 
# 142
}; 
# 144
struct _Fnv_hash_impl { 
# 147
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 148
__seed = static_cast< size_t>(2166136261UL)) 
# 149
{ return _Fnv_hash_bytes(__ptr, __clength, __seed); } 
# 151
template< class _Tp> static size_t 
# 153
hash(const _Tp &__val) 
# 154
{ return hash(&__val, sizeof(__val)); } 
# 156
template< class _Tp> static size_t 
# 158
__hash_combine(const _Tp &__val, size_t __hash) 
# 159
{ return hash(&__val, sizeof(__val), __hash); } 
# 160
}; 
# 164
template<> struct hash< float>  : public __hash_base< unsigned long, float>  { 
# 167
size_t operator()(float __val) const noexcept 
# 168
{ 
# 170
return (__val != (0.0F)) ? std::_Hash_impl::hash(__val) : (0); 
# 171
} 
# 172
}; 
# 176
template<> struct hash< double>  : public __hash_base< unsigned long, double>  { 
# 179
size_t operator()(double __val) const noexcept 
# 180
{ 
# 182
return (__val != (0.0)) ? std::_Hash_impl::hash(__val) : (0); 
# 183
} 
# 184
}; 
# 188
template<> struct hash< long double>  : public __hash_base< unsigned long, long double>  { 
# 191
__attribute((__pure__)) size_t 
# 192
operator()(long double __val) const noexcept; 
# 193
}; 
# 201
template< class _Hash> 
# 202
struct __is_fast_hash : public true_type { 
# 203
}; 
# 206
template<> struct __is_fast_hash< hash< long double> >  : public false_type { 
# 207
}; 
# 210
}
# 5473 "/usr/include/c++/5/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 5482
template<> struct hash< __cxx11::basic_string< char, char_traits< char> , allocator< char> > >  : public __hash_base< unsigned long, __cxx11::basic_string< char, char_traits< char> , allocator< char> > >  { 
# 5486
size_t operator()(const __cxx11::string &__s) const noexcept 
# 5487
{ return std::_Hash_impl::hash(__s.data(), __s.length()); } 
# 5488
}; 
# 5491
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char, char_traits< char> , allocator< char> > > >  : public false_type { 
# 5492
}; 
# 5497
template<> struct hash< __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > >  : public __hash_base< unsigned long, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > >  { 
# 5501
size_t operator()(const __cxx11::wstring &__s) const noexcept 
# 5502
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 5503
} 
# 5504
}; 
# 5507
template<> struct __is_fast_hash< hash< __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > > >  : public false_type { 
# 5508
}; 
# 5515
template<> struct hash< __cxx11::basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > >  : public __hash_base< unsigned long, __cxx11::basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > >  { 
# 5519
size_t operator()(const __cxx11::u16string &__s) const noexcept 
# 5520
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 5521
} 
# 5522
}; 
# 5525
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > > >  : public false_type { 
# 5526
}; 
# 5530
template<> struct hash< __cxx11::basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > >  : public __hash_base< unsigned long, __cxx11::basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > >  { 
# 5534
size_t operator()(const __cxx11::u32string &__s) const noexcept 
# 5535
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 5536
} 
# 5537
}; 
# 5540
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > > >  : public false_type { 
# 5541
}; 
# 5583
}
# 46 "/usr/include/c++/5/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT, class _Traits, class _Alloc> const typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 54
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 56
template< class _CharT, class _Traits, class _Alloc> void 
# 59
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::swap(basic_string &__s) noexcept 
# 60
{ 
# 61
if (this == (&__s)) { 
# 62
return; }  
# 67
std::__alloc_swap< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::_S_do_it(this->_M_get_allocator(), __s._M_get_allocator()); 
# 70
if (_M_is_local()) { 
# 71
if (__s._M_is_local()) 
# 72
{ 
# 73
if (length() && __s.length()) 
# 74
{ 
# 75
_CharT __tmp_data[(_S_local_capacity) + 1]; 
# 76
traits_type::copy(__tmp_data, __s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, (_S_local_capacity) + 1); 
# 78
traits_type::copy(__s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, __cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, (_S_local_capacity) + 1); 
# 80
traits_type::copy(__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, __tmp_data, (_S_local_capacity) + 1); 
# 82
} else { 
# 83
if (__s.length()) 
# 84
{ 
# 85
traits_type::copy(__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, __s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, (_S_local_capacity) + 1); 
# 87
_M_length(__s.length()); 
# 88
__s._M_set_length(0); 
# 89
return; 
# 90
} else { 
# 91
if (length()) 
# 92
{ 
# 93
traits_type::copy(__s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, __cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, (_S_local_capacity) + 1); 
# 95
__s._M_length(length()); 
# 96
_M_set_length(0); 
# 97
return; 
# 98
}  }  }  
# 99
} else 
# 101
{ 
# 102
const size_type __tmp_capacity = __s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_allocated_capacity; 
# 103
traits_type::copy(__s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, __cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, (_S_local_capacity) + 1); 
# 105
_M_data((__s._M_data())); 
# 106
(__s._M_data(__s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf)); 
# 107
_M_capacity(__tmp_capacity); 
# 108
}  } else 
# 110
{ 
# 111
const size_type __tmp_capacity = __cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_allocated_capacity; 
# 112
if (__s._M_is_local()) 
# 113
{ 
# 114
traits_type::copy(__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, __s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf, (_S_local_capacity) + 1); 
# 116
(__s._M_data(_M_data())); 
# 117
_M_data(__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_local_buf); 
# 118
} else 
# 120
{ 
# 121
pointer __tmp_ptr = _M_data(); 
# 122
_M_data((__s._M_data())); 
# 123
(__s._M_data(__tmp_ptr)); 
# 124
_M_capacity(__s.__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_allocated_capacity); 
# 125
}  
# 126
__s._M_capacity(__tmp_capacity); 
# 127
}  
# 129
const size_type __tmp_length = length(); 
# 130
_M_length(__s.length()); 
# 131
__s._M_length(__tmp_length); 
# 132
} 
# 134
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer 
# 137
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_create(size_type &__capacity, size_type __old_capacity) 
# 138
{ 
# 141
if (__capacity > max_size()) { 
# 142
std::__throw_length_error("basic_string::_M_create"); }  
# 147
if ((__capacity > __old_capacity) && (__capacity < (2 * __old_capacity))) 
# 148
{ 
# 149
__capacity = (2 * __old_capacity); 
# 151
if (__capacity > max_size()) { 
# 152
__capacity = max_size(); }  
# 153
}  
# 157
return _Alloc_traits::allocate(this->_M_get_allocator(), __capacity + 1); 
# 158
} 
# 164
template< class _CharT, class _Traits, class _Alloc> 
# 165
template< class _InIterator> void 
# 168
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag) 
# 170
{ 
# 171
size_type __len = (0); 
# 172
size_type __capacity = ((size_type)(_S_local_capacity)); 
# 174
while ((__beg != __end) && (__len < __capacity)) 
# 175
{ 
# 176
(_M_data()[__len++]) = (*__beg); 
# 177
++__beg; 
# 178
}  
# 180
try 
# 181
{ 
# 182
while (__beg != __end) 
# 183
{ 
# 184
if (__len == __capacity) 
# 185
{ 
# 187
__capacity = (__len + 1); 
# 188
pointer __another = _M_create(__capacity, __len); 
# 189
(this->_S_copy(__another, _M_data(), __len)); 
# 190
_M_dispose(); 
# 191
_M_data(__another); 
# 192
_M_capacity(__capacity); 
# 193
}  
# 194
(_M_data()[__len++]) = (*__beg); 
# 195
++__beg; 
# 196
}  
# 197
} 
# 198
catch (...) 
# 199
{ 
# 200
_M_dispose(); 
# 201
throw; 
# 202
}  
# 204
_M_set_length(__len); 
# 205
} 
# 207
template< class _CharT, class _Traits, class _Alloc> 
# 208
template< class _InIterator> void 
# 211
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, forward_iterator_tag) 
# 213
{ 
# 215
if (__gnu_cxx::__is_null_pointer(__beg) && (__beg != __end)) { 
# 216
std::__throw_logic_error("basic_string::_M_construct null not valid"); }  
# 219
size_type __dnew = static_cast< size_type>(std::distance(__beg, __end)); 
# 221
if (__dnew > ((size_type)(_S_local_capacity))) 
# 222
{ 
# 223
_M_data(_M_create(__dnew, (size_type)0)); 
# 224
_M_capacity(__dnew); 
# 225
}  
# 228
try 
# 229
{ (this->_S_copy_chars(_M_data(), __beg, __end)); } 
# 230
catch (...) 
# 231
{ 
# 232
_M_dispose(); 
# 233
throw; 
# 234
}  
# 236
_M_set_length(__dnew); 
# 237
} 
# 239
template< class _CharT, class _Traits, class _Alloc> void 
# 242
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(size_type __n, _CharT __c) 
# 243
{ 
# 244
if (__n > ((size_type)(_S_local_capacity))) 
# 245
{ 
# 246
_M_data(_M_create(__n, (size_type)0)); 
# 247
_M_capacity(__n); 
# 248
}  
# 250
if (__n) { 
# 251
(this->_S_assign(_M_data(), __n, __c)); }  
# 253
_M_set_length(__n); 
# 254
} 
# 256
template< class _CharT, class _Traits, class _Alloc> void 
# 259
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_assign(const basic_string &__str) 
# 260
{ 
# 261
if (this != (&__str)) 
# 262
{ 
# 263
const size_type __rsize = __str.length(); 
# 264
const size_type __capacity = capacity(); 
# 266
if (__rsize > __capacity) 
# 267
{ 
# 268
size_type __new_capacity = __rsize; 
# 269
pointer __tmp = _M_create(__new_capacity, __capacity); 
# 270
_M_dispose(); 
# 271
_M_data(__tmp); 
# 272
_M_capacity(__new_capacity); 
# 273
}  
# 275
if (__rsize) { 
# 276
(this->_S_copy(_M_data(), (__str._M_data()), __rsize)); }  
# 278
_M_set_length(__rsize); 
# 279
}  
# 280
} 
# 282
template< class _CharT, class _Traits, class _Alloc> void 
# 285
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res) 
# 286
{ 
# 288
if (__res < length()) { 
# 289
__res = length(); }  
# 291
const size_type __capacity = capacity(); 
# 292
if (__res != __capacity) 
# 293
{ 
# 294
if ((__res > __capacity) || (__res > ((size_type)(_S_local_capacity)))) 
# 296
{ 
# 297
pointer __tmp = _M_create(__res, __capacity); 
# 298
(this->_S_copy(__tmp, _M_data(), length() + 1)); 
# 299
_M_dispose(); 
# 300
_M_data(__tmp); 
# 301
_M_capacity(__res); 
# 302
} else { 
# 303
if (!_M_is_local()) 
# 304
{ 
# 305
(this->_S_copy(this->_M_local_data(), _M_data(), length() + 1)); 
# 306
_M_destroy(__capacity); 
# 307
_M_data(this->_M_local_data()); 
# 308
}  }  
# 309
}  
# 310
} 
# 312
template< class _CharT, class _Traits, class _Alloc> void 
# 315
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, const _CharT *__s, size_type 
# 316
__len2) 
# 317
{ 
# 318
const size_type __how_much = (length() - __pos) - __len1; 
# 320
size_type __new_capacity = (length() + __len2) - __len1; 
# 321
pointer __r = _M_create(__new_capacity, capacity()); 
# 323
if (__pos) { 
# 324
(this->_S_copy(__r, _M_data(), __pos)); }  
# 325
if (__s && __len2) { 
# 326
(this->_S_copy(__r + __pos, __s, __len2)); }  
# 327
if (__how_much) { 
# 328
(this->_S_copy((__r + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much)); }  
# 331
_M_dispose(); 
# 332
_M_data(__r); 
# 333
_M_capacity(__new_capacity); 
# 334
} 
# 336
template< class _CharT, class _Traits, class _Alloc> void 
# 339
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_erase(size_type __pos, size_type __n) 
# 340
{ 
# 341
const size_type __how_much = (length() - __pos) - __n; 
# 343
if (__how_much && __n) { 
# 344
(this->_S_move(_M_data() + __pos, (_M_data() + __pos) + __n, __how_much)); }  
# 346
_M_set_length(length() - __n); 
# 347
} 
# 349
template< class _CharT, class _Traits, class _Alloc> void 
# 352
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c) 
# 353
{ 
# 354
const size_type __size = this->size(); 
# 355
if (__size < __n) { 
# 356
(this->append(__n - __size, __c)); } else { 
# 357
if (__n < __size) { 
# 358
this->_M_erase(__n, __size - __n); }  }  
# 359
} 
# 361
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 364
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_append(const _CharT *__s, size_type __n) 
# 365
{ 
# 366
const size_type __len = __n + this->size(); 
# 368
if (__len <= this->capacity()) 
# 369
{ 
# 370
if (__n) { 
# 371
(this->_S_copy((this->_M_data()) + this->size(), __s, __n)); }  
# 372
} else { 
# 374
this->_M_mutate(this->size(), (size_type)0, __s, __n); }  
# 376
this->_M_set_length(__len); 
# 377
return *this; 
# 378
} 
# 380
template< class _CharT, class _Traits, class _Alloc> 
# 381
template< class _InputIterator> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 384
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator 
# 385
__k1, _InputIterator __k2, __false_type) 
# 387
{ 
# 388
const basic_string __s(__k1, __k2); 
# 389
const size_type __n1 = __i2 - __i1; 
# 390
return _M_replace(__i1 - this->begin(), __n1, (__s._M_data()), __s.size()); 
# 392
} 
# 394
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 397
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT 
# 398
__c) 
# 399
{ 
# 400
_M_check_length(__n1, __n2, "basic_string::_M_replace_aux"); 
# 402
const size_type __old_size = this->size(); 
# 403
const size_type __new_size = (__old_size + __n2) - __n1; 
# 405
if (__new_size <= this->capacity()) 
# 406
{ 
# 407
_CharT *__p = (this->_M_data()) + __pos1; 
# 409
const size_type __how_much = (__old_size - __pos1) - __n1; 
# 410
if (__how_much && (__n1 != __n2)) { 
# 411
(this->_S_move(__p + __n2, __p + __n1, __how_much)); }  
# 412
} else { 
# 414
this->_M_mutate(__pos1, __n1, 0, __n2); }  
# 416
if (__n2) { 
# 417
(this->_S_assign((this->_M_data()) + __pos1, __n2, __c)); }  
# 419
this->_M_set_length(__new_size); 
# 420
return *this; 
# 421
} 
# 423
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 426
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace(size_type __pos, size_type __len1, const _CharT *__s, const typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other> ::size_type 
# 427
__len2) 
# 428
{ 
# 429
_M_check_length(__len1, __len2, "basic_string::_M_replace"); 
# 431
const size_type __old_size = this->size(); 
# 432
const size_type __new_size = (__old_size + __len2) - __len1; 
# 434
if (__new_size <= this->capacity()) 
# 435
{ 
# 436
_CharT *__p = (this->_M_data()) + __pos; 
# 438
const size_type __how_much = (__old_size - __pos) - __len1; 
# 439
if (_M_disjunct(__s)) 
# 440
{ 
# 441
if (__how_much && (__len1 != __len2)) { 
# 442
(this->_S_move(__p + __len2, __p + __len1, __how_much)); }  
# 443
if (__len2) { 
# 444
(this->_S_copy(__p, __s, __len2)); }  
# 445
} else 
# 447
{ 
# 449
if (__len2 && (__len2 <= __len1)) { 
# 450
(this->_S_move(__p, __s, __len2)); }  
# 451
if (__how_much && (__len1 != __len2)) { 
# 452
(this->_S_move(__p + __len2, __p + __len1, __how_much)); }  
# 453
if (__len2 > __len1) 
# 454
{ 
# 455
if ((__s + __len2) <= (__p + __len1)) { 
# 456
(this->_S_move(__p, __s, __len2)); } else { 
# 457
if (__s >= (__p + __len1)) { 
# 458
(this->_S_copy(__p, (__s + __len2) - __len1, __len2)); } else 
# 460
{ 
# 461
const size_type __nleft = (__p + __len1) - __s; 
# 462
(this->_S_move(__p, __s, __nleft)); 
# 463
(this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft)); 
# 465
}  }  
# 466
}  
# 467
}  
# 468
} else { 
# 470
this->_M_mutate(__pos, __len1, __s, __len2); }  
# 472
this->_M_set_length(__new_size); 
# 473
return *this; 
# 474
} 
# 476
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 479
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const 
# 480
{ 
# 481
_M_check(__pos, "basic_string::copy"); 
# 482
__n = _M_limit(__pos, __n); 
# 483
; 
# 484
if (__n) { 
# 485
(_S_copy)(__s, _M_data() + __pos, __n); }  
# 487
return __n; 
# 488
} 
# 1149
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1151
operator+(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1152
__rhs) 
# 1153
{ 
# 1154
; 
# 1155
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1156
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1157
const __size_type __len = _Traits::length(__lhs); 
# 1158
__string_type __str; 
# 1159
(__str.reserve(__len + (__rhs.size()))); 
# 1160
(__str.append(__lhs, __len)); 
# 1161
(__str.append(__rhs)); 
# 1162
return __str; 
# 1163
} 
# 1165
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1167
operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__rhs) 
# 1168
{ 
# 1169
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1170
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1171
__string_type __str; 
# 1172
const __size_type __len = (__rhs.size()); 
# 1173
(__str.reserve(__len + 1)); 
# 1174
(__str.append((__size_type)1, __lhs)); 
# 1175
(__str.append(__rhs)); 
# 1176
return __str; 
# 1177
} 
# 1179
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1182
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const 
# 1183
{ 
# 1184
; 
# 1185
const size_type __size = this->size(); 
# 1186
const _CharT *__data = _M_data(); 
# 1188
if (__n == 0) { 
# 1189
return (__pos <= __size) ? __pos : npos; }  
# 1191
if (__n <= __size) 
# 1192
{ 
# 1193
for (; __pos <= (__size - __n); ++__pos) { 
# 1194
if (traits_type::eq(__data[__pos], __s[0]) && (traits_type::compare((__data + __pos) + 1, __s + 1, __n - 1) == 0)) { 
# 1197
return __pos; }  }  
# 1198
}  
# 1199
return npos; 
# 1200
} 
# 1202
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1205
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const noexcept 
# 1206
{ 
# 1207
size_type __ret = npos; 
# 1208
const size_type __size = this->size(); 
# 1209
if (__pos < __size) 
# 1210
{ 
# 1211
const _CharT *__data = _M_data(); 
# 1212
const size_type __n = __size - __pos; 
# 1213
const _CharT *__p = traits_type::find(__data + __pos, __n, __c); 
# 1214
if (__p) { 
# 1215
__ret = (__p - __data); }  
# 1216
}  
# 1217
return __ret; 
# 1218
} 
# 1220
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1223
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const 
# 1224
{ 
# 1225
; 
# 1226
const size_type __size = this->size(); 
# 1227
if (__n <= __size) 
# 1228
{ 
# 1229
__pos = std::min((size_type)(__size - __n), __pos); 
# 1230
const _CharT *__data = _M_data(); 
# 1231
do 
# 1232
{ 
# 1233
if (traits_type::compare(__data + __pos, __s, __n) == 0) { 
# 1234
return __pos; }  
# 1235
} 
# 1236
while ((__pos--) > 0); 
# 1237
}  
# 1238
return npos; 
# 1239
} 
# 1241
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1244
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 1245
{ 
# 1246
size_type __size = this->size(); 
# 1247
if (__size) 
# 1248
{ 
# 1249
if ((--__size) > __pos) { 
# 1250
__size = __pos; }  
# 1251
for (++__size; (__size--) > 0;) { 
# 1252
if (traits_type::eq(_M_data()[__size], __c)) { 
# 1253
return __size; }  }  
# 1254
}  
# 1255
return npos; 
# 1256
} 
# 1258
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1261
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const 
# 1262
{ 
# 1263
; 
# 1264
for (; __n && (__pos < this->size()); ++__pos) 
# 1265
{ 
# 1266
const _CharT *__p = traits_type::find(__s, __n, _M_data()[__pos]); 
# 1267
if (__p) { 
# 1268
return __pos; }  
# 1269
}  
# 1270
return npos; 
# 1271
} 
# 1273
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1276
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const 
# 1277
{ 
# 1278
; 
# 1279
size_type __size = this->size(); 
# 1280
if (__size && __n) 
# 1281
{ 
# 1282
if ((--__size) > __pos) { 
# 1283
__size = __pos; }  
# 1284
do 
# 1285
{ 
# 1286
if (traits_type::find(__s, __n, _M_data()[__size])) { 
# 1287
return __size; }  
# 1288
} 
# 1289
while ((__size--) != 0); 
# 1290
}  
# 1291
return npos; 
# 1292
} 
# 1294
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1297
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const 
# 1298
{ 
# 1299
; 
# 1300
for (; __pos < this->size(); ++__pos) { 
# 1301
if (!traits_type::find(__s, __n, _M_data()[__pos])) { 
# 1302
return __pos; }  }  
# 1303
return npos; 
# 1304
} 
# 1306
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1309
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 1310
{ 
# 1311
for (; __pos < this->size(); ++__pos) { 
# 1312
if (!traits_type::eq(_M_data()[__pos], __c)) { 
# 1313
return __pos; }  }  
# 1314
return npos; 
# 1315
} 
# 1317
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1320
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const 
# 1321
{ 
# 1322
; 
# 1323
size_type __size = this->size(); 
# 1324
if (__size) 
# 1325
{ 
# 1326
if ((--__size) > __pos) { 
# 1327
__size = __pos; }  
# 1328
do 
# 1329
{ 
# 1330
if (!traits_type::find(__s, __n, _M_data()[__size])) { 
# 1331
return __size; }  
# 1332
} 
# 1333
while (__size--); 
# 1334
}  
# 1335
return npos; 
# 1336
} 
# 1338
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1341
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 1342
{ 
# 1343
size_type __size = this->size(); 
# 1344
if (__size) 
# 1345
{ 
# 1346
if ((--__size) > __pos) { 
# 1347
__size = __pos; }  
# 1348
do 
# 1349
{ 
# 1350
if (!traits_type::eq(_M_data()[__size], __c)) { 
# 1351
return __size; }  
# 1352
} 
# 1353
while (__size--); 
# 1354
}  
# 1355
return npos; 
# 1356
} 
# 1358
template< class _CharT, class _Traits, class _Alloc> int 
# 1361
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const basic_string &__str) const 
# 1362
{ 
# 1363
_M_check(__pos, "basic_string::compare"); 
# 1364
__n = _M_limit(__pos, __n); 
# 1365
const size_type __osize = __str.size(); 
# 1366
const size_type __len = std::min(__n, __osize); 
# 1367
int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len); 
# 1368
if (!__r) { 
# 1369
__r = (_S_compare)(__n, __osize); }  
# 1370
return __r; 
# 1371
} 
# 1373
template< class _CharT, class _Traits, class _Alloc> int 
# 1376
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1377
__pos2, size_type __n2) const 
# 1378
{ 
# 1379
_M_check(__pos1, "basic_string::compare"); 
# 1380
__str._M_check(__pos2, "basic_string::compare"); 
# 1381
__n1 = _M_limit(__pos1, __n1); 
# 1382
__n2 = __str._M_limit(__pos2, __n2); 
# 1383
const size_type __len = std::min(__n1, __n2); 
# 1384
int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len); 
# 1386
if (!__r) { 
# 1387
__r = (_S_compare)(__n1, __n2); }  
# 1388
return __r; 
# 1389
} 
# 1391
template< class _CharT, class _Traits, class _Alloc> int 
# 1394
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const 
# 1395
{ 
# 1396
; 
# 1397
const size_type __size = this->size(); 
# 1398
const size_type __osize = traits_type::length(__s); 
# 1399
const size_type __len = std::min(__size, __osize); 
# 1400
int __r = traits_type::compare(_M_data(), __s, __len); 
# 1401
if (!__r) { 
# 1402
__r = (_S_compare)(__size, __osize); }  
# 1403
return __r; 
# 1404
} 
# 1406
template< class _CharT, class _Traits, class _Alloc> int 
# 1409
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const 
# 1410
{ 
# 1411
; 
# 1412
_M_check(__pos, "basic_string::compare"); 
# 1413
__n1 = _M_limit(__pos, __n1); 
# 1414
const size_type __osize = traits_type::length(__s); 
# 1415
const size_type __len = std::min(__n1, __osize); 
# 1416
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1417
if (!__r) { 
# 1418
__r = (_S_compare)(__n1, __osize); }  
# 1419
return __r; 
# 1420
} 
# 1422
template< class _CharT, class _Traits, class _Alloc> int 
# 1425
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1426
__n2) const 
# 1427
{ 
# 1428
; 
# 1429
_M_check(__pos, "basic_string::compare"); 
# 1430
__n1 = _M_limit(__pos, __n1); 
# 1431
const size_type __len = std::min(__n1, __n2); 
# 1432
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1433
if (!__r) { 
# 1434
__r = (_S_compare)(__n1, __n2); }  
# 1435
return __r; 
# 1436
} 
# 1439
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1441
operator>>(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1442
__str) 
# 1443
{ 
# 1444
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1445
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1446
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1447
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1448
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1449
typedef ctype< _CharT>  __ctype_type; 
# 1450
typedef typename ctype< _CharT> ::ctype_base __ctype_base; 
# 1452
__size_type __extracted = (0); 
# 1453
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1454
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1455
if (__cerb) 
# 1456
{ 
# 1457
try 
# 1458
{ 
# 1460
(__str.erase()); 
# 1461
_CharT __buf[128]; 
# 1462
__size_type __len = (0); 
# 1463
const streamsize __w = (__in.width()); 
# 1464
const __size_type __n = (__w > (0)) ? static_cast< __size_type>(__w) : (__str.max_size()); 
# 1466
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 1467
const __int_type __eof = _Traits::eof(); 
# 1468
__int_type __c = ((__in.rdbuf())->sgetc()); 
# 1470
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!(__ct.is(__ctype_base::space, _Traits::to_char_type(__c))))) 
# 1474
{ 
# 1475
if (__len == (sizeof(__buf) / sizeof(_CharT))) 
# 1476
{ 
# 1477
(__str.append(__buf, sizeof(__buf) / sizeof(_CharT))); 
# 1478
__len = 0; 
# 1479
}  
# 1480
(__buf[__len++]) = _Traits::to_char_type(__c); 
# 1481
++__extracted; 
# 1482
__c = ((__in.rdbuf())->snextc()); 
# 1483
}  
# 1484
(__str.append(__buf, __len)); 
# 1486
if (_Traits::eq_int_type(__c, __eof)) { 
# 1487
__err |= __ios_base::eofbit; }  
# 1488
(__in.width(0)); 
# 1489
} 
# 1490
catch (__cxxabiv1::__forced_unwind &) 
# 1491
{ 
# 1492
(__in._M_setstate(__ios_base::badbit)); 
# 1493
throw; 
# 1494
} 
# 1495
catch (...) 
# 1496
{ 
# 1500
(__in._M_setstate(__ios_base::badbit)); 
# 1501
}  
# 1502
}  
# 1504
if (!__extracted) { 
# 1505
__err |= __ios_base::failbit; }  
# 1506
if (__err) { 
# 1507
(__in.setstate(__err)); }  
# 1508
return __in; 
# 1509
} 
# 1511
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1513
getline(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1514
__str, _CharT __delim) 
# 1515
{ 
# 1516
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1517
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1518
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1519
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1520
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1522
__size_type __extracted = (0); 
# 1523
const __size_type __n = (__str.max_size()); 
# 1524
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1525
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1526
if (__cerb) 
# 1527
{ 
# 1528
try 
# 1529
{ 
# 1530
(__str.erase()); 
# 1531
const __int_type __idelim = _Traits::to_int_type(__delim); 
# 1532
const __int_type __eof = _Traits::eof(); 
# 1533
__int_type __c = ((__in.rdbuf())->sgetc()); 
# 1535
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!_Traits::eq_int_type(__c, __idelim))) 
# 1538
{ 
# 1539
__str += _Traits::to_char_type(__c); 
# 1540
++__extracted; 
# 1541
__c = ((__in.rdbuf())->snextc()); 
# 1542
}  
# 1544
if (_Traits::eq_int_type(__c, __eof)) { 
# 1545
__err |= __ios_base::eofbit; } else { 
# 1546
if (_Traits::eq_int_type(__c, __idelim)) 
# 1547
{ 
# 1548
++__extracted; 
# 1549
((__in.rdbuf())->sbumpc()); 
# 1550
} else { 
# 1552
__err |= __ios_base::failbit; }  }  
# 1553
} 
# 1554
catch (__cxxabiv1::__forced_unwind &) 
# 1555
{ 
# 1556
(__in._M_setstate(__ios_base::badbit)); 
# 1557
throw; 
# 1558
} 
# 1559
catch (...) 
# 1560
{ 
# 1564
(__in._M_setstate(__ios_base::badbit)); 
# 1565
}  
# 1566
}  
# 1567
if (!__extracted) { 
# 1568
__err |= __ios_base::failbit; }  
# 1569
if (__err) { 
# 1570
(__in.setstate(__err)); }  
# 1571
return __in; 
# 1572
} 
# 1577
extern template class __cxx11::basic_string< char, char_traits< char> , allocator< char> > ;
# 1578
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1581
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __os, const __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1584
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str, char __delim);
# 1587
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char, char_traits< char> , allocator< char> >  & __str);
# 1592
extern template class __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 1593
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1596
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __os, const __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1599
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str, wchar_t __delim);
# 1602
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t, char_traits< wchar_t> , allocator< wchar_t> >  & __str);
# 1609
}
# 43 "/usr/include/c++/5/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62
class locale { 
# 67
public: typedef int category; 
# 70
class facet; 
# 71
class id; 
# 72
class _Impl; 
# 74
friend class facet; 
# 75
friend class _Impl; 
# 77
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 81
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 85
template< class _Cache> friend struct __use_cache; 
# 98
static const category none = 0; 
# 99
static const category ctype = (1L << 0); 
# 100
static const category numeric = (1L << 1); 
# 101
static const category collate = (1L << 2); 
# 102
static const category time = (1L << 3); 
# 103
static const category monetary = (1L << 4); 
# 104
static const category messages = (1L << 5); 
# 105
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 117
locale() throw(); 
# 126
locale(const locale & __other) throw(); 
# 137
explicit locale(const char * __s); 
# 151
locale(const locale & __base, const char * __s, category __cat); 
# 163
explicit locale(const __cxx11::string &__s) : locale(__s.c_str()) { } 
# 177
locale(const locale &__base, const __cxx11::string &__s, category __cat) : locale(__base, __s.c_str(), __cat) 
# 178
{ } 
# 192
locale(const locale & __base, const locale & __add, category __cat); 
# 205
template< class _Facet> locale(const locale & __other, _Facet * __f); 
# 209
~locale() throw(); 
# 220
const locale &operator=(const locale & __other) throw(); 
# 234
template< class _Facet> locale combine(const locale & __other) const; 
# 243
__attribute((__abi_tag__("cxx11" ))) __cxx11::string 
# 245
name() const; 
# 255
bool operator==(const locale & __other) const throw(); 
# 264
bool operator!=(const locale &__other) const throw() 
# 265
{ return !this->operator==(__other); } 
# 282
template< class _Char, class _Traits, class _Alloc> bool operator()(const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s1, const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s2) const; 
# 299
static locale global(const locale & __loc); 
# 305
static const locale &classic(); 
# 309
private: _Impl *_M_impl; 
# 312
static _Impl *_S_classic; 
# 315
static _Impl *_S_global; 
# 321
static const char *const *const _S_categories; 
# 333
enum { _S_categories_size = 12}; 
# 336
static __gthread_once_t _S_once; 
# 340
explicit locale(_Impl *) throw(); 
# 343
static void _S_initialize(); 
# 346
static void _S_initialize_once() throw(); 
# 349
static category _S_normalize_category(category); 
# 352
void _M_coalesce(const locale & __base, const locale & __add, category __cat); 
# 355
static const id *const _S_twinned_facets[]; 
# 357
}; 
# 371
class locale::facet { 
# 374
friend class locale; 
# 375
friend class _Impl; 
# 377
mutable _Atomic_word _M_refcount; 
# 380
static __c_locale _S_c_locale; 
# 383
static const char _S_c_name[2]; 
# 386
static __gthread_once_t _S_once; 
# 390
static void _S_initialize_once(); 
# 403
protected: explicit facet(size_t __refs = 0) throw() : _M_refcount((__refs) ? 1 : 0) 
# 404
{ } 
# 408
virtual ~facet(); 
# 411
static void _S_create_c_locale(__c_locale & __cloc, const char * __s, __c_locale __old = 0); 
# 415
static __c_locale _S_clone_c_locale(__c_locale & __cloc) throw(); 
# 418
static void _S_destroy_c_locale(__c_locale & __cloc); 
# 421
static __c_locale _S_lc_ctype_c_locale(__c_locale __cloc, const char * __s); 
# 426
static __c_locale _S_get_c_locale(); 
# 428
__attribute((const)) static const char *
# 429
_S_get_c_name() throw(); 
# 433
private: void _M_add_reference() const throw() 
# 434
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 437
void _M_remove_reference() const throw() 
# 438
{ 
# 440
; 
# 441
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 442
{ 
# 443
; 
# 444
try 
# 445
{ delete this; } 
# 446
catch (...) 
# 447
{ }  
# 448
}  
# 449
} 
# 451
facet(const facet &); 
# 454
facet &operator=(const facet &); 
# 456
class __shim; 
# 458
const facet *_M_sso_shim(const id *) const; 
# 459
const facet *_M_cow_shim(const id *) const; 
# 460
}; 
# 474
class locale::id { 
# 477
friend class locale; 
# 478
friend class _Impl; 
# 480
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 484
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 491
mutable size_t _M_index; 
# 494
static _Atomic_word _S_refcount; 
# 497
void operator=(const id &); 
# 499
id(const id &); 
# 505
public: id() { } 
# 508
size_t _M_id() const throw(); 
# 509
}; 
# 513
class locale::_Impl { 
# 517
friend class locale; 
# 518
friend class facet; 
# 520
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 524
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 528
template< class _Cache> friend struct __use_cache; 
# 533
_Atomic_word _M_refcount; 
# 534
const facet **_M_facets; 
# 535
size_t _M_facets_size; 
# 536
const facet **_M_caches; 
# 537
char **_M_names; 
# 538
static const id *const _S_id_ctype[]; 
# 539
static const id *const _S_id_numeric[]; 
# 540
static const id *const _S_id_collate[]; 
# 541
static const id *const _S_id_time[]; 
# 542
static const id *const _S_id_monetary[]; 
# 543
static const id *const _S_id_messages[]; 
# 544
static const id *const *const _S_facet_categories[]; 
# 547
void _M_add_reference() throw() 
# 548
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 551
void _M_remove_reference() throw() 
# 552
{ 
# 554
; 
# 555
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 556
{ 
# 557
; 
# 558
try 
# 559
{ delete this; } 
# 560
catch (...) 
# 561
{ }  
# 562
}  
# 563
} 
# 565
_Impl(const _Impl &, size_t); 
# 566
_Impl(const char *, size_t); 
# 567
_Impl(size_t) throw(); 
# 569
~_Impl() throw(); 
# 571
_Impl(const _Impl &); 
# 574
void operator=(const _Impl &); 
# 577
bool _M_check_same_name() 
# 578
{ 
# 579
bool __ret = true; 
# 580
if ((_M_names)[1]) { 
# 582
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 583
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 584
return __ret; 
# 585
} 
# 588
void _M_replace_categories(const _Impl *, category); 
# 591
void _M_replace_category(const _Impl *, const id *const *); 
# 594
void _M_replace_facet(const _Impl *, const id *); 
# 597
void _M_install_facet(const id *, const facet *); 
# 599
template< class _Facet> void 
# 601
_M_init_facet(_Facet *__facet) 
# 602
{ this->_M_install_facet(&_Facet::id, __facet); } 
# 604
template< class _Facet> void 
# 606
_M_init_facet_unchecked(_Facet *__facet) 
# 607
{ 
# 608
(__facet->_M_add_reference()); 
# 609
((_M_facets)[(_Facet::id._M_id)()]) = __facet; 
# 610
} 
# 613
void _M_install_cache(const facet *, size_t); 
# 615
void _M_init_extra(facet **); 
# 616
void _M_init_extra(void *, void *, const char *, const char *); 
# 617
}; 
# 632
template< class _CharT> 
# 633
class __cxx11::collate : public locale::facet { 
# 639
public: typedef _CharT char_type; 
# 640
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 646
protected: __c_locale _M_c_locale_collate; 
# 650
public: static locale::id id; 
# 660
explicit collate(size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_get_c_locale()) 
# 662
{ } 
# 674
explicit collate(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc)) 
# 676
{ } 
# 691
int compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 692
__lo2, const _CharT *__hi2) const 
# 693
{ return this->do_compare(__lo1, __hi1, __lo2, __hi2); } 
# 710
string_type transform(const _CharT *__lo, const _CharT *__hi) const 
# 711
{ return this->do_transform(__lo, __hi); } 
# 724
long hash(const _CharT *__lo, const _CharT *__hi) const 
# 725
{ return this->do_hash(__lo, __hi); } 
# 729
int _M_compare(const _CharT *, const _CharT *) const throw(); 
# 732
size_t _M_transform(_CharT *, const _CharT *, size_t) const throw(); 
# 737
protected: virtual ~collate() 
# 738
{ _S_destroy_c_locale(_M_c_locale_collate); } 
# 753
virtual int do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const; 
# 767
virtual string_type do_transform(const _CharT * __lo, const _CharT * __hi) const; 
# 780
virtual long do_hash(const _CharT * __lo, const _CharT * __hi) const; 
# 781
}; 
# 783
template< class _CharT> locale::id 
# 784
__cxx11::collate< _CharT> ::id; 
# 789
template<> int collate< char> ::_M_compare(const char *, const char *) const throw(); 
# 793
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const throw(); 
# 798
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const throw(); 
# 802
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const throw(); 
# 806
template< class _CharT> 
# 807
class __cxx11::collate_byname : public collate< _CharT>  { 
# 812
public: typedef _CharT char_type; 
# 813
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 817
explicit collate_byname(const char *__s, ::std::size_t __refs = 0) : ::std::__cxx11::collate< _CharT> (__refs) 
# 819
{ 
# 820
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 822
{ 
# 823
(this->_S_destroy_c_locale((this->_M_c_locale_collate))); 
# 824
(this->_S_create_c_locale((this->_M_c_locale_collate), __s)); 
# 825
}  
# 826
} 
# 830
explicit collate_byname(const ::std::__cxx11::string &__s, ::std::size_t __refs = 0) : collate_byname(__s.c_str(), __refs) 
# 831
{ } 
# 836
protected: virtual ~collate_byname() { } 
# 837
}; 
# 840
}
# 39 "/usr/include/c++/5/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Facet> 
# 45
locale::locale(const locale &__other, _Facet *__f) 
# 46
{ 
# 47
(_M_impl) = (new _Impl(*(__other._M_impl), 1)); 
# 49
try 
# 50
{ (_M_impl)->_M_install_facet(&_Facet::id, __f); } 
# 51
catch (...) 
# 52
{ 
# 53
(_M_impl)->_M_remove_reference(); 
# 54
throw; 
# 55
}  
# 56
delete [] (((_M_impl)->_M_names)[0]); 
# 57
(((_M_impl)->_M_names)[0]) = (0); 
# 58
} 
# 60
template< class _Facet> locale 
# 63
locale::combine(const locale &__other) const 
# 64
{ 
# 65
_Impl *__tmp = new _Impl(*(_M_impl), 1); 
# 66
try 
# 67
{ 
# 68
__tmp->_M_replace_facet(__other._M_impl, &_Facet::id); 
# 69
} 
# 70
catch (...) 
# 71
{ 
# 72
__tmp->_M_remove_reference(); 
# 73
throw; 
# 74
}  
# 75
return ((locale)(__tmp)); 
# 76
} 
# 78
template< class _CharT, class _Traits, class _Alloc> bool 
# 81
locale::operator()(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__s1, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 82
__s2) const 
# 83
{ 
# 84
typedef __cxx11::collate< _CharT>  __collate_type; 
# 85
const __collate_type &__collate = use_facet< __cxx11::collate< _CharT> > (*this); 
# 86
return (__collate.compare((__s1.data()), (__s1.data()) + (__s1.length()), (__s2.data()), (__s2.data()) + (__s2.length()))) < 0; 
# 88
} 
# 102
template< class _Facet> bool 
# 104
has_facet(const locale &__loc) throw() 
# 105
{ 
# 106
const size_t __i = (_Facet::id._M_id)(); 
# 107
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 108
return (__i < ((__loc._M_impl)->_M_facets_size)) && (dynamic_cast< const _Facet *>(__facets[__i])); 
# 114
} 
# 130
template< class _Facet> const _Facet &
# 132
use_facet(const locale &__loc) 
# 133
{ 
# 134
const size_t __i = (_Facet::id._M_id)(); 
# 135
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 136
if ((__i >= ((__loc._M_impl)->_M_facets_size)) || (!(__facets[__i]))) { 
# 137
__throw_bad_cast(); }  
# 139
return dynamic_cast< const _Facet &>(*(__facets[__i])); 
# 143
} 
# 147
template< class _CharT> int 
# 149
__cxx11::collate< _CharT> ::_M_compare(const _CharT *, const _CharT *) const throw() 
# 150
{ return 0; } 
# 153
template< class _CharT> size_t 
# 155
__cxx11::collate< _CharT> ::_M_transform(_CharT *, const _CharT *, size_t) const throw() 
# 156
{ return 0; } 
# 158
template< class _CharT> int 
# 161
__cxx11::collate< _CharT> ::do_compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 162
__lo2, const _CharT *__hi2) const 
# 163
{ 
# 166
const string_type __one(__lo1, __hi1); 
# 167
const string_type __two(__lo2, __hi2); 
# 169
const _CharT *__p = (__one.c_str()); 
# 170
const _CharT *__pend = (__one.data()) + (__one.length()); 
# 171
const _CharT *__q = (__two.c_str()); 
# 172
const _CharT *__qend = (__two.data()) + (__two.length()); 
# 177
for (; ;) 
# 178
{ 
# 179
const int __res = _M_compare(__p, __q); 
# 180
if (__res) { 
# 181
return __res; }  
# 183
__p += char_traits< _CharT> ::length(__p); 
# 184
__q += char_traits< _CharT> ::length(__q); 
# 185
if ((__p == __pend) && (__q == __qend)) { 
# 186
return 0; } else { 
# 187
if (__p == __pend) { 
# 188
return -1; } else { 
# 189
if (__q == __qend) { 
# 190
return 1; }  }  }  
# 192
__p++; 
# 193
__q++; 
# 194
}  
# 195
} 
# 197
template< class _CharT> typename __cxx11::collate< _CharT> ::string_type 
# 200
__cxx11::collate< _CharT> ::do_transform(const _CharT *__lo, const _CharT *__hi) const 
# 201
{ 
# 202
string_type __ret; 
# 205
const string_type __str(__lo, __hi); 
# 207
const _CharT *__p = (__str.c_str()); 
# 208
const _CharT *__pend = (__str.data()) + (__str.length()); 
# 210
size_t __len = (__hi - __lo) * 2; 
# 212
_CharT *__c = new _CharT [__len]; 
# 214
try 
# 215
{ 
# 219
for (; ;) 
# 220
{ 
# 222
size_t __res = _M_transform(__c, __p, __len); 
# 225
if (__res >= __len) 
# 226
{ 
# 227
__len = (__res + (1)); 
# 228
(delete [] __c), (__c = 0); 
# 229
__c = (new _CharT [__len]); 
# 230
__res = _M_transform(__c, __p, __len); 
# 231
}  
# 233
(__ret.append(__c, __res)); 
# 234
__p += char_traits< _CharT> ::length(__p); 
# 235
if (__p == __pend) { 
# 236
break; }  
# 238
__p++; 
# 239
(__ret.push_back(_CharT())); 
# 240
}  
# 241
} 
# 242
catch (...) 
# 243
{ 
# 244
delete [] __c; 
# 245
throw; 
# 246
}  
# 248
delete [] __c; 
# 250
return __ret; 
# 251
} 
# 253
template< class _CharT> long 
# 256
__cxx11::collate< _CharT> ::do_hash(const _CharT *__lo, const _CharT *__hi) const 
# 257
{ 
# 258
unsigned long __val = (0); 
# 259
for (; __lo < __hi; ++__lo) { 
# 260
__val = ((*__lo) + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits - 7)))); }  
# 264
return static_cast< long>(__val); 
# 265
} 
# 270
extern template class __cxx11::collate< char> ;
# 271
extern template class __cxx11::collate_byname< char> ;
# 273
extern template const __cxx11::collate< char>  &use_facet< __cxx11::collate< char> > (const locale &);
# 277
extern template bool has_facet< __cxx11::collate< char> > (const locale &) throw();
# 282
extern template class __cxx11::collate< wchar_t> ;
# 283
extern template class __cxx11::collate_byname< wchar_t> ;
# 285
extern template const __cxx11::collate< wchar_t>  &use_facet< __cxx11::collate< wchar_t> > (const locale &);
# 289
extern template bool has_facet< __cxx11::collate< wchar_t> > (const locale &) throw();
# 296
}
# 36 "/usr/include/x86_64-linux-gnu/c++/5/bits/error_constants.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
enum class errc { 
# 42
address_family_not_supported = 97, 
# 43
address_in_use, 
# 44
address_not_available, 
# 45
already_connected = 106, 
# 46
argument_list_too_long = 7, 
# 47
argument_out_of_domain = 33, 
# 48
bad_address = 14, 
# 49
bad_file_descriptor = 9, 
# 52
bad_message = 74, 
# 55
broken_pipe = 32, 
# 56
connection_aborted = 103, 
# 57
connection_already_in_progress = 114, 
# 58
connection_refused = 111, 
# 59
connection_reset = 104, 
# 60
cross_device_link = 18, 
# 61
destination_address_required = 89, 
# 62
device_or_resource_busy = 16, 
# 63
directory_not_empty = 39, 
# 64
executable_format_error = 8, 
# 65
file_exists = 17, 
# 66
file_too_large = 27, 
# 67
filename_too_long = 36, 
# 68
function_not_supported = 38, 
# 69
host_unreachable = 113, 
# 72
identifier_removed = 43, 
# 75
illegal_byte_sequence = 84, 
# 76
inappropriate_io_control_operation = 25, 
# 77
interrupted = 4, 
# 78
invalid_argument = 22, 
# 79
invalid_seek = 29, 
# 80
io_error = 5, 
# 81
is_a_directory = 21, 
# 82
message_size = 90, 
# 83
network_down = 100, 
# 84
network_reset = 102, 
# 85
network_unreachable = 101, 
# 86
no_buffer_space = 105, 
# 87
no_child_process = 10, 
# 90
no_link = 67, 
# 93
no_lock_available = 37, 
# 96
no_message_available = 61, 
# 99
no_message = 42, 
# 100
no_protocol_option = 92, 
# 101
no_space_on_device = 28, 
# 104
no_stream_resources = 63, 
# 107
no_such_device_or_address = 6, 
# 108
no_such_device = 19, 
# 109
no_such_file_or_directory = 2, 
# 110
no_such_process, 
# 111
not_a_directory = 20, 
# 112
not_a_socket = 88, 
# 115
not_a_stream = 60, 
# 118
not_connected = 107, 
# 119
not_enough_memory = 12, 
# 122
not_supported = 95, 
# 126
operation_canceled = 125, 
# 129
operation_in_progress = 115, 
# 130
operation_not_permitted = 1, 
# 131
operation_not_supported = 95, 
# 132
operation_would_block = 11, 
# 135
owner_dead = 130, 
# 138
permission_denied = 13, 
# 141
protocol_error = 71, 
# 144
protocol_not_supported = 93, 
# 145
read_only_file_system = 30, 
# 146
resource_deadlock_would_occur = 35, 
# 147
resource_unavailable_try_again = 11, 
# 148
result_out_of_range = 34, 
# 151
state_not_recoverable = 131, 
# 155
stream_timeout = 62, 
# 159
text_file_busy = 26, 
# 162
timed_out = 110, 
# 163
too_many_files_open_in_system = 23, 
# 164
too_many_files_open, 
# 165
too_many_links = 31, 
# 166
too_many_symbolic_link_levels = 40, 
# 169
value_too_large = 75, 
# 172
wrong_protocol_type = 91
# 173
}; 
# 176
}
# 41 "/usr/include/c++/5/stdexcept" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
struct __cow_string { 
# 50
union { 
# 51
const char *_M_p; 
# 52
char _M_bytes[sizeof(const char *)]; 
# 53
}; 
# 55
__cow_string(); 
# 56
__cow_string(const __cxx11::string &); 
# 57
__cow_string(const char *, size_t); 
# 58
__cow_string(const __cow_string &) noexcept; 
# 59
__cow_string &operator=(const __cow_string &) noexcept; 
# 60
~__cow_string(); 
# 62
__cow_string(__cow_string &&) noexcept; 
# 63
__cow_string &operator=(__cow_string &&) noexcept; 
# 65
}; 
# 67
typedef __cxx11::basic_string< char, char_traits< char> , allocator< char> >  __sso_string; 
# 113
class logic_error : public exception { 
# 115
__cow_string _M_msg; 
# 120
public: explicit logic_error(const __cxx11::string & __arg); 
# 124
explicit logic_error(const char *); 
# 128
logic_error(const logic_error &) noexcept; 
# 129
logic_error &operator=(const logic_error &) noexcept; 
# 132
virtual ~logic_error() noexcept; 
# 137
virtual const char *what() const noexcept; 
# 138
}; 
# 142
class domain_error : public logic_error { 
# 145
public: explicit domain_error(const __cxx11::string & __arg); 
# 147
explicit domain_error(const char *); 
# 149
virtual ~domain_error() noexcept; 
# 150
}; 
# 153
class invalid_argument : public logic_error { 
# 156
public: explicit invalid_argument(const __cxx11::string & __arg); 
# 158
explicit invalid_argument(const char *); 
# 160
virtual ~invalid_argument() noexcept; 
# 161
}; 
# 165
class length_error : public logic_error { 
# 168
public: explicit length_error(const __cxx11::string & __arg); 
# 170
explicit length_error(const char *); 
# 172
virtual ~length_error() noexcept; 
# 173
}; 
# 177
class out_of_range : public logic_error { 
# 180
public: explicit out_of_range(const __cxx11::string & __arg); 
# 182
explicit out_of_range(const char *); 
# 184
virtual ~out_of_range() noexcept; 
# 185
}; 
# 192
class runtime_error : public exception { 
# 194
__cow_string _M_msg; 
# 199
public: explicit runtime_error(const __cxx11::string & __arg); 
# 203
explicit runtime_error(const char *); 
# 207
runtime_error(const runtime_error &) noexcept; 
# 208
runtime_error &operator=(const runtime_error &) noexcept; 
# 211
virtual ~runtime_error() noexcept; 
# 216
virtual const char *what() const noexcept; 
# 217
}; 
# 220
class range_error : public runtime_error { 
# 223
public: explicit range_error(const __cxx11::string & __arg); 
# 225
explicit range_error(const char *); 
# 227
virtual ~range_error() noexcept; 
# 228
}; 
# 231
class overflow_error : public runtime_error { 
# 234
public: explicit overflow_error(const __cxx11::string & __arg); 
# 236
explicit overflow_error(const char *); 
# 238
virtual ~overflow_error() noexcept; 
# 239
}; 
# 242
class underflow_error : public runtime_error { 
# 245
public: explicit underflow_error(const __cxx11::string & __arg); 
# 247
explicit underflow_error(const char *); 
# 249
virtual ~underflow_error() noexcept; 
# 250
}; 
# 255
}
# 43 "/usr/include/c++/5/system_error" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
struct error_code; 
# 48
struct error_condition; 
# 49
class system_error; 
# 52
template< class _Tp> 
# 53
struct is_error_code_enum : public false_type { }; 
# 56
template< class _Tp> 
# 57
struct is_error_condition_enum : public false_type { }; 
# 60
template<> struct is_error_condition_enum< errc>  : public true_type { 
# 61
}; 
# 63
inline namespace _V2 { 
# 66
class error_category { 
# 69
public: constexpr error_category() noexcept = default;
# 71
virtual ~error_category(); 
# 73
error_category(const error_category &) = delete;
# 74
error_category &operator=(const error_category &) = delete;
# 77
virtual const char *name() const noexcept = 0; 
# 87
private: 
# 85
__attribute((__abi_tag__("cxx11" ))) virtual __cow_string 
# 87
_M_message(int) const; 
# 92
public: 
# 90
__attribute((__abi_tag__("cxx11" ))) virtual __cxx11::string 
# 92
message(int) const = 0; 
# 104
virtual error_condition default_error_condition(int __i) const noexcept; 
# 107
virtual bool equivalent(int __i, const error_condition & __cond) const noexcept; 
# 110
virtual bool equivalent(const error_code & __code, int __i) const noexcept; 
# 113
bool operator<(const error_category &__other) const noexcept 
# 114
{ return less< const error_category *> ()(this, &__other); } 
# 117
bool operator==(const error_category &__other) const noexcept 
# 118
{ return this == (&__other); } 
# 121
bool operator!=(const error_category &__other) const noexcept 
# 122
{ return this != (&__other); } 
# 123
}; 
# 126
__attribute((const)) const error_category &system_category() noexcept; 
# 127
__attribute((const)) const error_category &generic_category() noexcept; 
# 129
}
# 131
inline error_code make_error_code(errc) noexcept; 
# 133
template< class _Tp> struct hash; 
# 138
struct error_code { 
# 140
error_code() noexcept : _M_value(0), _M_cat(&system_category()) 
# 141
{ } 
# 143
error_code(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 144
{ } 
# 146
template< class _ErrorCodeEnum, class  = typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value> ::type> 
# 148
error_code(_ErrorCodeEnum __e) noexcept 
# 149
{ (*this) = make_error_code(__e); } 
# 152
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 153
{ 
# 154
(_M_value) = __v; 
# 155
(_M_cat) = (&__cat); 
# 156
} 
# 159
void clear() noexcept 
# 160
{ this->assign(0, system_category()); } 
# 163
template< class _ErrorCodeEnum> typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value, error_code &> ::type 
# 166
operator=(_ErrorCodeEnum __e) noexcept 
# 167
{ return (*this) = make_error_code(__e); } 
# 170
int value() const noexcept { return _M_value; } 
# 173
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 176
error_condition default_error_condition() const noexcept; 
# 178
__attribute((__abi_tag__("cxx11" ))) __cxx11::string 
# 180
message() const 
# 181
{ return this->category().message(this->value()); } 
# 183
explicit operator bool() const noexcept 
# 184
{ return ((_M_value) != 0) ? true : false; } 
# 188
friend struct hash< error_code> ; 
# 190
private: int _M_value; 
# 191
const _V2::error_category *_M_cat; 
# 192
}; 
# 196
inline error_code make_error_code(errc __e) noexcept 
# 197
{ return error_code(static_cast< int>(__e), generic_category()); } 
# 200
inline bool operator<(const error_code &__lhs, const error_code &__rhs) noexcept 
# 201
{ 
# 202
return ((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value())); 
# 205
} 
# 207
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 209
operator<<(basic_ostream< _CharT, _Traits>  &__os, const error_code &__e) 
# 210
{ return ((__os << __e.category().name()) << ':') << __e.value(); } 
# 212
inline error_condition make_error_condition(errc) noexcept; 
# 216
struct error_condition { 
# 218
error_condition() noexcept : _M_value(0), _M_cat(&generic_category()) 
# 219
{ } 
# 221
error_condition(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 222
{ } 
# 224
template< class _ErrorConditionEnum, class  = typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value> ::type> 
# 226
error_condition(_ErrorConditionEnum __e) noexcept 
# 227
{ (*this) = make_error_condition(__e); } 
# 230
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 231
{ 
# 232
(_M_value) = __v; 
# 233
(_M_cat) = (&__cat); 
# 234
} 
# 237
template< class _ErrorConditionEnum> typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value, error_condition &> ::type 
# 240
operator=(_ErrorConditionEnum __e) noexcept 
# 241
{ return (*this) = make_error_condition(__e); } 
# 244
void clear() noexcept 
# 245
{ this->assign(0, generic_category()); } 
# 249
int value() const noexcept { return _M_value; } 
# 252
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 254
__attribute((__abi_tag__("cxx11" ))) __cxx11::string 
# 256
message() const 
# 257
{ return this->category().message(this->value()); } 
# 259
explicit operator bool() const noexcept 
# 260
{ return ((_M_value) != 0) ? true : false; } 
# 264
private: int _M_value; 
# 265
const _V2::error_category *_M_cat; 
# 266
}; 
# 270
inline error_condition make_error_condition(errc __e) noexcept 
# 271
{ return error_condition(static_cast< int>(__e), generic_category()); } 
# 274
inline bool operator<(const error_condition &__lhs, const error_condition &
# 275
__rhs) noexcept 
# 276
{ 
# 277
return ((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value())); 
# 280
} 
# 284
inline bool operator==(const error_code &__lhs, const error_code &__rhs) noexcept 
# 285
{ return ((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value()); 
# 286
} 
# 289
inline bool operator==(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 290
{ 
# 291
return __lhs.category().equivalent(__lhs.value(), __rhs) || __rhs.category().equivalent(__lhs, __rhs.value()); 
# 293
} 
# 296
inline bool operator==(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 297
{ 
# 298
return __rhs.category().equivalent(__rhs.value(), __lhs) || __lhs.category().equivalent(__rhs, __lhs.value()); 
# 300
} 
# 303
inline bool operator==(const error_condition &__lhs, const error_condition &
# 304
__rhs) noexcept 
# 305
{ 
# 306
return ((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value()); 
# 308
} 
# 311
inline bool operator!=(const error_code &__lhs, const error_code &__rhs) noexcept 
# 312
{ return !((__lhs == __rhs)); } 
# 315
inline bool operator!=(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 316
{ return !((__lhs == __rhs)); } 
# 319
inline bool operator!=(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 320
{ return !((__lhs == __rhs)); } 
# 323
inline bool operator!=(const error_condition &__lhs, const error_condition &
# 324
__rhs) noexcept 
# 325
{ return !((__lhs == __rhs)); } 
# 333
class system_error : public runtime_error { 
# 336
error_code _M_code; 
# 339
public: system_error(error_code __ec = error_code()) : runtime_error(__ec.message()), _M_code(__ec) 
# 340
{ } 
# 342
system_error(error_code __ec, const __cxx11::string &__what) : runtime_error((((__what + (": "))) + (__ec.message()))), _M_code(__ec) 
# 343
{ } 
# 345
system_error(error_code __ec, const char *__what) : runtime_error((__what + (((": ") + (__ec.message()))))), _M_code(__ec) 
# 346
{ } 
# 348
system_error(int __v, const _V2::error_category &__ecat, const char *__what) : system_error(error_code(__v, __ecat), __what) 
# 349
{ } 
# 351
system_error(int __v, const _V2::error_category &__ecat) : runtime_error(error_code(__v, __ecat).message()), _M_code(__v, __ecat) 
# 353
{ } 
# 355
system_error(int __v, const _V2::error_category &__ecat, const __cxx11::string &__what) : runtime_error((((__what + (": "))) + (error_code(__v, __ecat).message()))), _M_code(__v, __ecat) 
# 357
{ } 
# 359
virtual ~system_error() noexcept; 
# 362
const error_code &code() const noexcept { return _M_code; } 
# 363
}; 
# 366
}
# 372
namespace std __attribute((__visibility__("default"))) { 
# 379
template<> struct hash< error_code>  : public __hash_base< unsigned long, error_code>  { 
# 383
size_t operator()(const error_code &__e) const noexcept 
# 384
{ 
# 385
const size_t __tmp = std::_Hash_impl::hash(__e._M_value); 
# 386
return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp); 
# 387
} 
# 388
}; 
# 391
}
# 49 "/usr/include/c++/5/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
enum _Ios_Fmtflags { 
# 59
_S_boolalpha = 1, 
# 60
_S_dec, 
# 61
_S_fixed = 4, 
# 62
_S_hex = 8, 
# 63
_S_internal = 16, 
# 64
_S_left = 32, 
# 65
_S_oct = 64, 
# 66
_S_right = 128, 
# 67
_S_scientific = 256, 
# 68
_S_showbase = 512, 
# 69
_S_showpoint = 1024, 
# 70
_S_showpos = 2048, 
# 71
_S_skipws = 4096, 
# 72
_S_unitbuf = 8192, 
# 73
_S_uppercase = 16384, 
# 74
_S_adjustfield = 176, 
# 75
_S_basefield = 74, 
# 76
_S_floatfield = 260, 
# 77
_S_ios_fmtflags_end = 65536, 
# 78
_S_ios_fmtflags_max = 2147483647, 
# 79
_S_ios_fmtflags_min = (-2147483647-1)
# 80
}; 
# 83
constexpr _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 84
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 87
constexpr _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 88
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 91
constexpr _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 92
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 95
constexpr _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 96
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 99
inline const _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 100
{ return __a = ((__a | __b)); } 
# 103
inline const _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 104
{ return __a = ((__a & __b)); } 
# 107
inline const _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 108
{ return __a = ((__a ^ __b)); } 
# 111
enum _Ios_Openmode { 
# 113
_S_app = 1, 
# 114
_S_ate, 
# 115
_S_bin = 4, 
# 116
_S_in = 8, 
# 117
_S_out = 16, 
# 118
_S_trunc = 32, 
# 119
_S_ios_openmode_end = 65536, 
# 120
_S_ios_openmode_max = 2147483647, 
# 121
_S_ios_openmode_min = (-2147483647-1)
# 122
}; 
# 125
constexpr _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 126
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 129
constexpr _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 130
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 133
constexpr _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 134
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 137
constexpr _Ios_Openmode operator~(_Ios_Openmode __a) 
# 138
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 141
inline const _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 142
{ return __a = ((__a | __b)); } 
# 145
inline const _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 146
{ return __a = ((__a & __b)); } 
# 149
inline const _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 150
{ return __a = ((__a ^ __b)); } 
# 153
enum _Ios_Iostate { 
# 155
_S_goodbit, 
# 156
_S_badbit, 
# 157
_S_eofbit, 
# 158
_S_failbit = 4, 
# 159
_S_ios_iostate_end = 65536, 
# 160
_S_ios_iostate_max = 2147483647, 
# 161
_S_ios_iostate_min = (-2147483647-1)
# 162
}; 
# 165
constexpr _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 166
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 169
constexpr _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 170
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 173
constexpr _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 174
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 177
constexpr _Ios_Iostate operator~(_Ios_Iostate __a) 
# 178
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 181
inline const _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 182
{ return __a = ((__a | __b)); } 
# 185
inline const _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 186
{ return __a = ((__a & __b)); } 
# 189
inline const _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 190
{ return __a = ((__a ^ __b)); } 
# 193
enum _Ios_Seekdir { 
# 195
_S_beg, 
# 196
_S_cur, 
# 197
_S_end, 
# 198
_S_ios_seekdir_end = 65536
# 199
}; 
# 203
enum class io_errc { stream = 1}; 
# 205
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
# 207
const _V2::error_category &iostream_category() noexcept; 
# 210
inline error_code make_error_code(io_errc e) noexcept 
# 211
{ return error_code(static_cast< int>(e), iostream_category()); } 
# 214
inline error_condition make_error_condition(io_errc e) noexcept 
# 215
{ return error_condition(static_cast< int>(e), iostream_category()); } 
# 228
class ios_base { 
# 255
public: class __attribute((__abi_tag__("cxx11" ))) failure : public system_error { 
# 259
public: explicit failure(const __cxx11::string & __str); 
# 263
explicit failure(const __cxx11::string &, const error_code &); 
# 266
explicit failure(const char *, const error_code & = io_errc::stream); 
# 270
virtual ~failure() throw(); 
# 273
virtual const char *what() const throw(); 
# 274
}; 
# 323
typedef _Ios_Fmtflags fmtflags; 
# 326
static const fmtflags boolalpha = _S_boolalpha; 
# 329
static const fmtflags dec = _S_dec; 
# 332
static const fmtflags fixed = _S_fixed; 
# 335
static const fmtflags hex = _S_hex; 
# 340
static const fmtflags internal = _S_internal; 
# 344
static const fmtflags left = _S_left; 
# 347
static const fmtflags oct = _S_oct; 
# 351
static const fmtflags right = _S_right; 
# 354
static const fmtflags scientific = _S_scientific; 
# 358
static const fmtflags showbase = _S_showbase; 
# 362
static const fmtflags showpoint = _S_showpoint; 
# 365
static const fmtflags showpos = _S_showpos; 
# 368
static const fmtflags skipws = _S_skipws; 
# 371
static const fmtflags unitbuf = _S_unitbuf; 
# 375
static const fmtflags uppercase = _S_uppercase; 
# 378
static const fmtflags adjustfield = _S_adjustfield; 
# 381
static const fmtflags basefield = _S_basefield; 
# 384
static const fmtflags floatfield = _S_floatfield; 
# 398
typedef _Ios_Iostate iostate; 
# 402
static const iostate badbit = _S_badbit; 
# 405
static const iostate eofbit = _S_eofbit; 
# 410
static const iostate failbit = _S_failbit; 
# 413
static const iostate goodbit = _S_goodbit; 
# 429
typedef _Ios_Openmode openmode; 
# 432
static const openmode app = _S_app; 
# 435
static const openmode ate = _S_ate; 
# 440
static const openmode binary = _S_bin; 
# 443
static const openmode in = _S_in; 
# 446
static const openmode out = _S_out; 
# 449
static const openmode trunc = _S_trunc; 
# 461
typedef _Ios_Seekdir seekdir; 
# 464
static const seekdir beg = _S_beg; 
# 467
static const seekdir cur = _S_cur; 
# 470
static const seekdir end = _S_end; 
# 473
typedef int io_state; 
# 474
typedef int open_mode; 
# 475
typedef int seek_dir; 
# 477
typedef std::streampos streampos; 
# 478
typedef std::streamoff streamoff; 
# 487
enum event { 
# 489
erase_event, 
# 490
imbue_event, 
# 491
copyfmt_event
# 492
}; 
# 504
typedef void (*event_callback)(event __e, ios_base & __b, int __i); 
# 517
void register_callback(event_callback __fn, int __index); 
# 520
protected: streamsize _M_precision; 
# 521
streamsize _M_width; 
# 522
fmtflags _M_flags; 
# 523
iostate _M_exception; 
# 524
iostate _M_streambuf_state; 
# 528
struct _Callback_list { 
# 531
_Callback_list *_M_next; 
# 532
event_callback _M_fn; 
# 533
int _M_index; 
# 534
_Atomic_word _M_refcount; 
# 536
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 537
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 538
{ } 
# 541
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 545
int _M_remove_reference() 
# 546
{ 
# 548
; 
# 549
int __res = __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); 
# 550
if (__res == 0) 
# 551
{ 
# 552
; 
# 553
}  
# 554
return __res; 
# 555
} 
# 556
}; 
# 558
_Callback_list *_M_callbacks; 
# 561
void _M_call_callbacks(event __ev) throw(); 
# 564
void _M_dispose_callbacks() throw(); 
# 567
struct _Words { 
# 569
void *_M_pword; 
# 570
long _M_iword; 
# 571
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 572
}; 
# 575
_Words _M_word_zero; 
# 579
enum { _S_local_word_size = 8}; 
# 580
_Words _M_local_word[_S_local_word_size]; 
# 583
int _M_word_size; 
# 584
_Words *_M_word; 
# 587
_Words &_M_grow_words(int __index, bool __iword); 
# 590
locale _M_ios_locale; 
# 593
void _M_init() throw(); 
# 601
public: class Init { 
# 603
friend class ios_base; 
# 605
public: Init(); 
# 606
~Init(); 
# 609
private: static _Atomic_word _S_refcount; 
# 610
static bool _S_synced_with_stdio; 
# 611
}; 
# 619
fmtflags flags() const 
# 620
{ return _M_flags; } 
# 630
fmtflags flags(fmtflags __fmtfl) 
# 631
{ 
# 632
fmtflags __old = _M_flags; 
# 633
(_M_flags) = __fmtfl; 
# 634
return __old; 
# 635
} 
# 646
fmtflags setf(fmtflags __fmtfl) 
# 647
{ 
# 648
fmtflags __old = _M_flags; 
# 649
((_M_flags) |= __fmtfl); 
# 650
return __old; 
# 651
} 
# 663
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 664
{ 
# 665
fmtflags __old = _M_flags; 
# 666
((_M_flags) &= ((~__mask))); 
# 667
((_M_flags) |= ((__fmtfl & __mask))); 
# 668
return __old; 
# 669
} 
# 678
void unsetf(fmtflags __mask) 
# 679
{ ((_M_flags) &= ((~__mask))); } 
# 689
streamsize precision() const 
# 690
{ return _M_precision; } 
# 698
streamsize precision(streamsize __prec) 
# 699
{ 
# 700
streamsize __old = _M_precision; 
# 701
(_M_precision) = __prec; 
# 702
return __old; 
# 703
} 
# 712
streamsize width() const 
# 713
{ return _M_width; } 
# 721
streamsize width(streamsize __wide) 
# 722
{ 
# 723
streamsize __old = _M_width; 
# 724
(_M_width) = __wide; 
# 725
return __old; 
# 726
} 
# 740
static bool sync_with_stdio(bool __sync = true); 
# 752
locale imbue(const locale & __loc) throw(); 
# 763
locale getloc() const 
# 764
{ return _M_ios_locale; } 
# 774
const locale &_M_getloc() const 
# 775
{ return _M_ios_locale; } 
# 793
static int xalloc() throw(); 
# 809
long &iword(int __ix) 
# 810
{ 
# 811
_Words &__word = (__ix < (_M_word_size)) ? (_M_word)[__ix] : this->_M_grow_words(__ix, true); 
# 813
return __word._M_iword; 
# 814
} 
# 830
void *&pword(int __ix) 
# 831
{ 
# 832
_Words &__word = (__ix < (_M_word_size)) ? (_M_word)[__ix] : this->_M_grow_words(__ix, false); 
# 834
return __word._M_pword; 
# 835
} 
# 846
virtual ~ios_base(); 
# 849
protected: ios_base() throw(); 
# 861
public: ios_base(const ios_base &) = delete;
# 864
ios_base &operator=(const ios_base &) = delete;
# 868
protected: void _M_move(ios_base &) noexcept; 
# 871
void _M_swap(ios_base & __rhs) noexcept; 
# 873
}; 
# 878
inline ios_base &boolalpha(ios_base &__base) 
# 879
{ 
# 880
__base.setf(ios_base::boolalpha); 
# 881
return __base; 
# 882
} 
# 886
inline ios_base &noboolalpha(ios_base &__base) 
# 887
{ 
# 888
__base.unsetf(ios_base::boolalpha); 
# 889
return __base; 
# 890
} 
# 894
inline ios_base &showbase(ios_base &__base) 
# 895
{ 
# 896
__base.setf(ios_base::showbase); 
# 897
return __base; 
# 898
} 
# 902
inline ios_base &noshowbase(ios_base &__base) 
# 903
{ 
# 904
__base.unsetf(ios_base::showbase); 
# 905
return __base; 
# 906
} 
# 910
inline ios_base &showpoint(ios_base &__base) 
# 911
{ 
# 912
__base.setf(ios_base::showpoint); 
# 913
return __base; 
# 914
} 
# 918
inline ios_base &noshowpoint(ios_base &__base) 
# 919
{ 
# 920
__base.unsetf(ios_base::showpoint); 
# 921
return __base; 
# 922
} 
# 926
inline ios_base &showpos(ios_base &__base) 
# 927
{ 
# 928
__base.setf(ios_base::showpos); 
# 929
return __base; 
# 930
} 
# 934
inline ios_base &noshowpos(ios_base &__base) 
# 935
{ 
# 936
__base.unsetf(ios_base::showpos); 
# 937
return __base; 
# 938
} 
# 942
inline ios_base &skipws(ios_base &__base) 
# 943
{ 
# 944
__base.setf(ios_base::skipws); 
# 945
return __base; 
# 946
} 
# 950
inline ios_base &noskipws(ios_base &__base) 
# 951
{ 
# 952
__base.unsetf(ios_base::skipws); 
# 953
return __base; 
# 954
} 
# 958
inline ios_base &uppercase(ios_base &__base) 
# 959
{ 
# 960
__base.setf(ios_base::uppercase); 
# 961
return __base; 
# 962
} 
# 966
inline ios_base &nouppercase(ios_base &__base) 
# 967
{ 
# 968
__base.unsetf(ios_base::uppercase); 
# 969
return __base; 
# 970
} 
# 974
inline ios_base &unitbuf(ios_base &__base) 
# 975
{ 
# 976
__base.setf(ios_base::unitbuf); 
# 977
return __base; 
# 978
} 
# 982
inline ios_base &nounitbuf(ios_base &__base) 
# 983
{ 
# 984
__base.unsetf(ios_base::unitbuf); 
# 985
return __base; 
# 986
} 
# 991
inline ios_base &internal(ios_base &__base) 
# 992
{ 
# 993
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 994
return __base; 
# 995
} 
# 999
inline ios_base &left(ios_base &__base) 
# 1000
{ 
# 1001
__base.setf(ios_base::left, ios_base::adjustfield); 
# 1002
return __base; 
# 1003
} 
# 1007
inline ios_base &right(ios_base &__base) 
# 1008
{ 
# 1009
__base.setf(ios_base::right, ios_base::adjustfield); 
# 1010
return __base; 
# 1011
} 
# 1016
inline ios_base &dec(ios_base &__base) 
# 1017
{ 
# 1018
__base.setf(ios_base::dec, ios_base::basefield); 
# 1019
return __base; 
# 1020
} 
# 1024
inline ios_base &hex(ios_base &__base) 
# 1025
{ 
# 1026
__base.setf(ios_base::hex, ios_base::basefield); 
# 1027
return __base; 
# 1028
} 
# 1032
inline ios_base &oct(ios_base &__base) 
# 1033
{ 
# 1034
__base.setf(ios_base::oct, ios_base::basefield); 
# 1035
return __base; 
# 1036
} 
# 1041
inline ios_base &fixed(ios_base &__base) 
# 1042
{ 
# 1043
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 1044
return __base; 
# 1045
} 
# 1049
inline ios_base &scientific(ios_base &__base) 
# 1050
{ 
# 1051
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 1052
return __base; 
# 1053
} 
# 1061
inline ios_base &hexfloat(ios_base &__base) 
# 1062
{ 
# 1063
__base.setf((ios_base::fixed | ios_base::scientific), ios_base::floatfield); 
# 1064
return __base; 
# 1065
} 
# 1069
inline ios_base &defaultfloat(ios_base &__base) 
# 1070
{ 
# 1071
__base.unsetf(ios_base::floatfield); 
# 1072
return __base; 
# 1073
} 
# 1077
}
# 45 "/usr/include/c++/5/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _CharT, class _Traits> streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 119
template< class _CharT, class _Traits> 
# 120
class basic_streambuf { 
# 129
public: typedef _CharT char_type; 
# 130
typedef _Traits traits_type; 
# 131
typedef typename _Traits::int_type int_type; 
# 132
typedef typename _Traits::pos_type pos_type; 
# 133
typedef typename _Traits::off_type off_type; 
# 138
typedef basic_streambuf __streambuf_type; 
# 141
friend class basic_ios< _CharT, _Traits> ; 
# 142
friend class basic_istream< _CharT, _Traits> ; 
# 143
friend class basic_ostream< _CharT, _Traits> ; 
# 144
friend class istreambuf_iterator< _CharT, _Traits> ; 
# 145
friend class ostreambuf_iterator< _CharT, _Traits> ; 
# 148
friend streamsize __copy_streambufs_eof<> (basic_streambuf *, basic_streambuf *, bool &); 
# 150
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , _CharT2 *); 
# 156
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type find(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , const _CharT2 &); 
# 162
template< class _CharT2, class _Traits2> friend basic_istream< _CharT2, _Traits2>  &operator>>(basic_istream< _CharT2, _Traits2>  &, _CharT2 *); 
# 166
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &operator>>(basic_istream< _CharT2, _Traits2>  &, __cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &); 
# 171
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &getline(basic_istream< _CharT2, _Traits2>  &, __cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &, _CharT2); 
# 184
protected: char_type *_M_in_beg; 
# 185
char_type *_M_in_cur; 
# 186
char_type *_M_in_end; 
# 187
char_type *_M_out_beg; 
# 188
char_type *_M_out_cur; 
# 189
char_type *_M_out_end; 
# 192
locale _M_buf_locale; 
# 197
public: virtual ~basic_streambuf() 
# 198
{ } 
# 209
locale pubimbue(const locale &__loc) 
# 210
{ 
# 211
locale __tmp(this->getloc()); 
# 212
this->imbue(__loc); 
# 213
((_M_buf_locale) = __loc); 
# 214
return __tmp; 
# 215
} 
# 226
locale getloc() const 
# 227
{ return _M_buf_locale; } 
# 239
basic_streambuf *pubsetbuf(char_type *__s, streamsize __n) 
# 240
{ return this->setbuf(__s, __n); } 
# 251
pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode 
# 252
__mode = (ios_base::in | ios_base::out)) 
# 253
{ return this->seekoff(__off, __way, __mode); } 
# 263
pos_type pubseekpos(pos_type __sp, ios_base::openmode 
# 264
__mode = (ios_base::in | ios_base::out)) 
# 265
{ return this->seekpos(__sp, __mode); } 
# 271
int pubsync() { return this->sync(); } 
# 284
streamsize in_avail() 
# 285
{ 
# 286
const streamsize __ret = this->egptr() - this->gptr(); 
# 287
return (__ret) ? __ret : this->showmanyc(); 
# 288
} 
# 298
int_type snextc() 
# 299
{ 
# 300
int_type __ret = traits_type::eof(); 
# 301
if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(), __ret), true)) { 
# 303
__ret = this->sgetc(); }  
# 304
return __ret; 
# 305
} 
# 316
int_type sbumpc() 
# 317
{ 
# 318
int_type __ret; 
# 319
if (__builtin_expect(this->gptr() < this->egptr(), true)) 
# 320
{ 
# 321
__ret = traits_type::to_int_type(*this->gptr()); 
# 322
this->gbump(1); 
# 323
} else { 
# 325
__ret = this->uflow(); }  
# 326
return __ret; 
# 327
} 
# 338
int_type sgetc() 
# 339
{ 
# 340
int_type __ret; 
# 341
if (__builtin_expect(this->gptr() < this->egptr(), true)) { 
# 342
__ret = traits_type::to_int_type(*this->gptr()); } else { 
# 344
__ret = this->underflow(); }  
# 345
return __ret; 
# 346
} 
# 357
streamsize sgetn(char_type *__s, streamsize __n) 
# 358
{ return this->xsgetn(__s, __n); } 
# 372
int_type sputbackc(char_type __c) 
# 373
{ 
# 374
int_type __ret; 
# 375
const bool __testpos = this->eback() < this->gptr(); 
# 376
if (__builtin_expect((!__testpos) || (!traits_type::eq(__c, this->gptr()[-1])), false)) { 
# 378
__ret = this->pbackfail(traits_type::to_int_type(__c)); } else 
# 380
{ 
# 381
this->gbump(-1); 
# 382
__ret = traits_type::to_int_type(*this->gptr()); 
# 383
}  
# 384
return __ret; 
# 385
} 
# 397
int_type sungetc() 
# 398
{ 
# 399
int_type __ret; 
# 400
if (__builtin_expect(this->eback() < this->gptr(), true)) 
# 401
{ 
# 402
this->gbump(-1); 
# 403
__ret = traits_type::to_int_type(*this->gptr()); 
# 404
} else { 
# 406
__ret = this->pbackfail(); }  
# 407
return __ret; 
# 408
} 
# 424
int_type sputc(char_type __c) 
# 425
{ 
# 426
int_type __ret; 
# 427
if (__builtin_expect(this->pptr() < this->epptr(), true)) 
# 428
{ 
# 429
(*this->pptr()) = __c; 
# 430
this->pbump(1); 
# 431
__ret = traits_type::to_int_type(__c); 
# 432
} else { 
# 434
__ret = this->overflow(traits_type::to_int_type(__c)); }  
# 435
return __ret; 
# 436
} 
# 450
streamsize sputn(const char_type *__s, streamsize __n) 
# 451
{ return this->xsputn(__s, __n); } 
# 463
protected: basic_streambuf() : _M_in_beg((0)), _M_in_cur((0)), _M_in_end((0)), _M_out_beg((0)), _M_out_cur((0)), _M_out_end((0)), _M_buf_locale(locale()) 
# 467
{ } 
# 482
char_type *eback() const { return _M_in_beg; } 
# 485
char_type *gptr() const { return _M_in_cur; } 
# 488
char_type *egptr() const { return _M_in_end; } 
# 498
void gbump(int __n) { (_M_in_cur) += __n; } 
# 509
void setg(char_type *__gbeg, char_type *__gnext, char_type *__gend) 
# 510
{ 
# 511
(_M_in_beg) = __gbeg; 
# 512
(_M_in_cur) = __gnext; 
# 513
(_M_in_end) = __gend; 
# 514
} 
# 529
char_type *pbase() const { return _M_out_beg; } 
# 532
char_type *pptr() const { return _M_out_cur; } 
# 535
char_type *epptr() const { return _M_out_end; } 
# 545
void pbump(int __n) { (_M_out_cur) += __n; } 
# 555
void setp(char_type *__pbeg, char_type *__pend) 
# 556
{ 
# 557
(_M_out_beg) = ((_M_out_cur) = __pbeg); 
# 558
(_M_out_end) = __pend; 
# 559
} 
# 576
virtual void imbue(const locale &__loc) 
# 577
{ } 
# 591
virtual basic_streambuf *setbuf(char_type *, streamsize) 
# 592
{ return this; } 
# 602
virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 604
{ return (pos_type)((off_type)(-1)); } 
# 614
virtual pos_type seekpos(pos_type, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 616
{ return (pos_type)((off_type)(-1)); } 
# 627
virtual int sync() { return 0; } 
# 649
virtual streamsize showmanyc() { return 0; } 
# 665
virtual streamsize xsgetn(char_type * __s, streamsize __n); 
# 687
virtual int_type underflow() 
# 688
{ return traits_type::eof(); } 
# 700
virtual int_type uflow() 
# 701
{ 
# 702
int_type __ret = traits_type::eof(); 
# 703
const bool __testeof = traits_type::eq_int_type(this->underflow(), __ret); 
# 705
if (!__testeof) 
# 706
{ 
# 707
__ret = traits_type::to_int_type(*this->gptr()); 
# 708
this->gbump(1); 
# 709
}  
# 710
return __ret; 
# 711
} 
# 724
virtual int_type pbackfail(int_type __c = traits_type::eof()) 
# 725
{ return traits_type::eof(); } 
# 742
virtual streamsize xsputn(const char_type * __s, streamsize __n); 
# 768
virtual int_type overflow(int_type __c = traits_type::eof()) 
# 769
{ return traits_type::eof(); } 
# 783
public: void stossc() 
# 784
{ 
# 785
if (this->gptr() < this->egptr()) { 
# 786
this->gbump(1); } else { 
# 788
this->uflow(); }  
# 789
} 
# 794
void __safe_gbump(streamsize __n) { (_M_in_cur) += __n; } 
# 797
void __safe_pbump(streamsize __n) { (_M_out_cur) += __n; } 
# 804
protected: basic_streambuf(const basic_streambuf &); 
# 807
basic_streambuf &operator=(const basic_streambuf &); 
# 811
void swap(basic_streambuf &__sb) 
# 812
{ 
# 813
std::swap(_M_in_beg, __sb._M_in_beg); 
# 814
std::swap(_M_in_cur, __sb._M_in_cur); 
# 815
std::swap(_M_in_end, __sb._M_in_end); 
# 816
std::swap(_M_out_beg, __sb._M_out_beg); 
# 817
std::swap(_M_out_cur, __sb._M_out_cur); 
# 818
std::swap(_M_out_end, __sb._M_out_end); 
# 819
std::swap(_M_buf_locale, __sb._M_buf_locale); 
# 820
} 
# 822
}; 
# 825
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > ::
    basic_streambuf ( const basic_streambuf & ) = default;
# 829
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > &
    std :: basic_streambuf < _CharT, _Traits > ::
    operator = ( const basic_streambuf & ) = default;
# 838
template<> streamsize __copy_streambufs_eof(basic_streambuf< char, char_traits< char> >  * __sbin, basic_streambuf< char, char_traits< char> >  * __sbout, bool & __ineof); 
# 843
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbin, basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbout, bool & __ineof); 
# 848
}
# 39 "/usr/include/c++/5/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> streamsize 
# 46
basic_streambuf< _CharT, _Traits> ::xsgetn(char_type *__s, streamsize __n) 
# 47
{ 
# 48
streamsize __ret = (0); 
# 49
while (__ret < __n) 
# 50
{ 
# 51
const streamsize __buf_len = this->egptr() - this->gptr(); 
# 52
if (__buf_len) 
# 53
{ 
# 54
const streamsize __remaining = __n - __ret; 
# 55
const streamsize __len = std::min(__buf_len, __remaining); 
# 56
traits_type::copy(__s, this->gptr(), __len); 
# 57
__ret += __len; 
# 58
__s += __len; 
# 59
this->__safe_gbump(__len); 
# 60
}  
# 62
if (__ret < __n) 
# 63
{ 
# 64
const int_type __c = this->uflow(); 
# 65
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 66
{ 
# 67
traits_type::assign(*(__s++), traits_type::to_char_type(__c)); 
# 68
++__ret; 
# 69
} else { 
# 71
break; }  
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits> streamsize 
# 80
basic_streambuf< _CharT, _Traits> ::xsputn(const char_type *__s, streamsize __n) 
# 81
{ 
# 82
streamsize __ret = (0); 
# 83
while (__ret < __n) 
# 84
{ 
# 85
const streamsize __buf_len = this->epptr() - this->pptr(); 
# 86
if (__buf_len) 
# 87
{ 
# 88
const streamsize __remaining = __n - __ret; 
# 89
const streamsize __len = std::min(__buf_len, __remaining); 
# 90
traits_type::copy(this->pptr(), __s, __len); 
# 91
__ret += __len; 
# 92
__s += __len; 
# 93
this->__safe_pbump(__len); 
# 94
}  
# 96
if (__ret < __n) 
# 97
{ 
# 98
int_type __c = this->overflow(traits_type::to_int_type(*__s)); 
# 99
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 100
{ 
# 101
++__ret; 
# 102
++__s; 
# 103
} else { 
# 105
break; }  
# 106
}  
# 107
}  
# 108
return __ret; 
# 109
} 
# 114
template< class _CharT, class _Traits> streamsize 
# 116
__copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 117
__sbout, bool &
# 118
__ineof) 
# 119
{ 
# 120
streamsize __ret = (0); 
# 121
__ineof = true; 
# 122
typename _Traits::int_type __c = (__sbin->sgetc()); 
# 123
while (!_Traits::eq_int_type(__c, _Traits::eof())) 
# 124
{ 
# 125
__c = (__sbout->sputc(_Traits::to_char_type(__c))); 
# 126
if (_Traits::eq_int_type(__c, _Traits::eof())) 
# 127
{ 
# 128
__ineof = false; 
# 129
break; 
# 130
}  
# 131
++__ret; 
# 132
__c = (__sbin->snextc()); 
# 133
}  
# 134
return __ret; 
# 135
} 
# 137
template< class _CharT, class _Traits> inline streamsize 
# 139
__copy_streambufs(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 140
__sbout) 
# 141
{ 
# 142
bool __ineof; 
# 143
return __copy_streambufs_eof(__sbin, __sbout, __ineof); 
# 144
} 
# 149
extern template class basic_streambuf< char, char_traits< char> > ;
# 150
extern template streamsize __copy_streambufs(basic_streambuf< char, char_traits< char> >  * __sbin, basic_streambuf< char, char_traits< char> >  * __sbout);
# 154
extern template streamsize __copy_streambufs_eof< char, char_traits< char> > (basic_streambuf< char, char_traits< char> >  *, basic_streambuf< char, char_traits< char> >  *, bool &);
# 160
extern template class basic_streambuf< wchar_t, char_traits< wchar_t> > ;
# 161
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbin, basic_streambuf< wchar_t, char_traits< wchar_t> >  * __sbout);
# 165
extern template streamsize __copy_streambufs_eof< wchar_t, char_traits< wchar_t> > (basic_streambuf< wchar_t, char_traits< wchar_t> >  *, basic_streambuf< wchar_t, char_traits< wchar_t> >  *, bool &);
# 173
}
# 52 "/usr/include/wctype.h" 3
typedef unsigned long wctype_t; 
# 72
enum { 
# 73
__ISwupper, 
# 74
__ISwlower, 
# 75
__ISwalpha, 
# 76
__ISwdigit, 
# 77
__ISwxdigit, 
# 78
__ISwspace, 
# 79
__ISwprint, 
# 80
__ISwgraph, 
# 81
__ISwblank, 
# 82
__ISwcntrl, 
# 83
__ISwpunct, 
# 84
__ISwalnum, 
# 86
_ISwupper = 16777216, 
# 87
_ISwlower = 33554432, 
# 88
_ISwalpha = 67108864, 
# 89
_ISwdigit = 134217728, 
# 90
_ISwxdigit = 268435456, 
# 91
_ISwspace = 536870912, 
# 92
_ISwprint = 1073741824, 
# 93
_ISwgraph = (-2147483647-1), 
# 94
_ISwblank = 65536, 
# 95
_ISwcntrl = 131072, 
# 96
_ISwpunct = 262144, 
# 97
_ISwalnum = 524288
# 98
}; 
# 102
extern "C" {
# 111
extern int iswalnum(wint_t __wc) throw(); 
# 117
extern int iswalpha(wint_t __wc) throw(); 
# 120
extern int iswcntrl(wint_t __wc) throw(); 
# 124
extern int iswdigit(wint_t __wc) throw(); 
# 128
extern int iswgraph(wint_t __wc) throw(); 
# 133
extern int iswlower(wint_t __wc) throw(); 
# 136
extern int iswprint(wint_t __wc) throw(); 
# 141
extern int iswpunct(wint_t __wc) throw(); 
# 146
extern int iswspace(wint_t __wc) throw(); 
# 151
extern int iswupper(wint_t __wc) throw(); 
# 156
extern int iswxdigit(wint_t __wc) throw(); 
# 162
extern int iswblank(wint_t __wc) throw(); 
# 171
extern wctype_t wctype(const char * __property) throw(); 
# 175
extern int iswctype(wint_t __wc, wctype_t __desc) throw(); 
# 186
typedef const __int32_t *wctrans_t; 
# 194
extern wint_t towlower(wint_t __wc) throw(); 
# 197
extern wint_t towupper(wint_t __wc) throw(); 
# 200
}
# 213
extern "C" {
# 218
extern wctrans_t wctrans(const char * __property) throw(); 
# 221
extern wint_t towctrans(wint_t __wc, wctrans_t __desc) throw(); 
# 230
extern int iswalnum_l(wint_t __wc, __locale_t __locale) throw(); 
# 236
extern int iswalpha_l(wint_t __wc, __locale_t __locale) throw(); 
# 239
extern int iswcntrl_l(wint_t __wc, __locale_t __locale) throw(); 
# 243
extern int iswdigit_l(wint_t __wc, __locale_t __locale) throw(); 
# 247
extern int iswgraph_l(wint_t __wc, __locale_t __locale) throw(); 
# 252
extern int iswlower_l(wint_t __wc, __locale_t __locale) throw(); 
# 255
extern int iswprint_l(wint_t __wc, __locale_t __locale) throw(); 
# 260
extern int iswpunct_l(wint_t __wc, __locale_t __locale) throw(); 
# 265
extern int iswspace_l(wint_t __wc, __locale_t __locale) throw(); 
# 270
extern int iswupper_l(wint_t __wc, __locale_t __locale) throw(); 
# 275
extern int iswxdigit_l(wint_t __wc, __locale_t __locale) throw(); 
# 280
extern int iswblank_l(wint_t __wc, __locale_t __locale) throw(); 
# 284
extern wctype_t wctype_l(const char * __property, __locale_t __locale) throw(); 
# 289
extern int iswctype_l(wint_t __wc, wctype_t __desc, __locale_t __locale) throw(); 
# 298
extern wint_t towlower_l(wint_t __wc, __locale_t __locale) throw(); 
# 301
extern wint_t towupper_l(wint_t __wc, __locale_t __locale) throw(); 
# 305
extern wctrans_t wctrans_l(const char * __property, __locale_t __locale) throw(); 
# 309
extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, __locale_t __locale) throw(); 
# 314
}
# 80 "/usr/include/c++/5/cwctype" 3
namespace std { 
# 82
using ::wctrans_t;
# 83
using ::wctype_t;
# 86
using ::iswalnum;
# 87
using ::iswalpha;
# 89
using ::iswblank;
# 91
using ::iswcntrl;
# 92
using ::iswctype;
# 93
using ::iswdigit;
# 94
using ::iswgraph;
# 95
using ::iswlower;
# 96
using ::iswprint;
# 97
using ::iswpunct;
# 98
using ::iswspace;
# 99
using ::iswupper;
# 100
using ::iswxdigit;
# 101
using ::towctrans;
# 102
using ::towlower;
# 103
using ::towupper;
# 104
using ::wctrans;
# 105
using ::wctype;
# 106
}
# 36 "/usr/include/x86_64-linux-gnu/c++/5/bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
struct ctype_base { 
# 44
typedef const int *__to_type; 
# 48
typedef unsigned short mask; 
# 49
static const mask upper = (_ISupper); 
# 50
static const mask lower = (_ISlower); 
# 51
static const mask alpha = (_ISalpha); 
# 52
static const mask digit = (_ISdigit); 
# 53
static const mask xdigit = (_ISxdigit); 
# 54
static const mask space = (_ISspace); 
# 55
static const mask print = (_ISprint); 
# 56
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 57
static const mask cntrl = (_IScntrl); 
# 58
static const mask punct = (_ISpunct); 
# 59
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 61
static const mask blank = (_ISblank); 
# 63
}; 
# 66
}
# 38 "/usr/include/c++/5/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _CharT, class _Traits> 
# 50
class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT>  { 
# 64
public: typedef _CharT char_type; 
# 65
typedef _Traits traits_type; 
# 66
typedef typename _Traits::int_type int_type; 
# 67
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 68
typedef basic_istream< _CharT, _Traits>  istream_type; 
# 71
template< class _CharT2> friend typename ::__gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type copy(::std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , ::std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , ostreambuf_iterator< _CharT2, char_traits< _CharT2> > ); 
# 77
template< bool _IsMove, class _CharT2> friend typename ::__gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(::std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , ::std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , _CharT2 *); 
# 83
template< class _CharT2> friend typename ::__gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ::std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type find(::std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , ::std::istreambuf_iterator< _CharT2, char_traits< _CharT2> > , const _CharT2 &); 
# 97
private: mutable streambuf_type *_M_sbuf; 
# 98
mutable int_type _M_c; 
# 102
public: constexpr istreambuf_iterator() noexcept : _M_sbuf((0)), _M_c(traits_type::eof()) 
# 103
{ } 
# 106
istreambuf_iterator(const istreambuf_iterator &) noexcept = default;
# 108
~istreambuf_iterator() = default;
# 112
istreambuf_iterator(istream_type &__s) noexcept : _M_sbuf((__s.rdbuf())), _M_c(traits_type::eof()) 
# 113
{ } 
# 116
istreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_c(traits_type::eof()) 
# 117
{ } 
# 123
char_type operator*() const 
# 124
{ 
# 132
return traits_type::to_char_type(_M_get()); 
# 133
} 
# 137
istreambuf_iterator &operator++() 
# 138
{ 
# 141
; 
# 142
if (_M_sbuf) 
# 143
{ 
# 144
((_M_sbuf)->sbumpc()); 
# 145
(_M_c) = traits_type::eof(); 
# 146
}  
# 147
return *this; 
# 148
} 
# 152
istreambuf_iterator operator++(int) 
# 153
{ 
# 156
; 
# 158
istreambuf_iterator __old = *this; 
# 159
if (_M_sbuf) 
# 160
{ 
# 161
(__old._M_c) = ((_M_sbuf)->sbumpc()); 
# 162
(_M_c) = traits_type::eof(); 
# 163
}  
# 164
return __old; 
# 165
} 
# 172
bool equal(const istreambuf_iterator &__b) const 
# 173
{ return _M_at_eof() == __b._M_at_eof(); } 
# 177
private: int_type _M_get() const 
# 178
{ 
# 179
const int_type __eof = traits_type::eof(); 
# 180
int_type __ret = __eof; 
# 181
if (_M_sbuf) 
# 182
{ 
# 183
if (!traits_type::eq_int_type(_M_c, __eof)) { 
# 184
__ret = (_M_c); } else { 
# 185
if (!traits_type::eq_int_type(__ret = ((_M_sbuf)->sgetc()), __eof)) { 
# 187
(_M_c) = __ret; } else { 
# 189
(_M_sbuf) = 0; }  }  
# 190
}  
# 191
return __ret; 
# 192
} 
# 195
bool _M_at_eof() const 
# 196
{ 
# 197
const int_type __eof = traits_type::eof(); 
# 198
return traits_type::eq_int_type(_M_get(), __eof); 
# 199
} 
# 200
}; 
# 202
template< class _CharT, class _Traits> inline bool 
# 204
operator==(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 205
__b) 
# 206
{ return (__a.equal(__b)); } 
# 208
template< class _CharT, class _Traits> inline bool 
# 210
operator!=(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 211
__b) 
# 212
{ return !(__a.equal(__b)); } 
# 215
template< class _CharT, class _Traits> 
# 216
class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 223
public: typedef _CharT char_type; 
# 224
typedef _Traits traits_type; 
# 225
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 226
typedef basic_ostream< _CharT, _Traits>  ostream_type; 
# 229
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, std::ostreambuf_iterator< _CharT2, char_traits< _CharT2> > > ::__type copy(istreambuf_iterator< _CharT2, char_traits< _CharT2> > , istreambuf_iterator< _CharT2, char_traits< _CharT2> > , std::ostreambuf_iterator< _CharT2, char_traits< _CharT2> > ); 
# 236
private: streambuf_type *_M_sbuf; 
# 237
bool _M_failed; 
# 241
public: ostreambuf_iterator(ostream_type &__s) noexcept : _M_sbuf((__s.rdbuf())), _M_failed(!(_M_sbuf)) 
# 242
{ } 
# 245
ostreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_failed(!(_M_sbuf)) 
# 246
{ } 
# 250
ostreambuf_iterator &operator=(_CharT __c) 
# 251
{ 
# 252
if ((!(_M_failed)) && _Traits::eq_int_type(((_M_sbuf)->sputc(__c)), _Traits::eof())) { 
# 254
(_M_failed) = true; }  
# 255
return *this; 
# 256
} 
# 260
ostreambuf_iterator &operator*() 
# 261
{ return *this; } 
# 265
ostreambuf_iterator &operator++(int) 
# 266
{ return *this; } 
# 270
ostreambuf_iterator &operator++() 
# 271
{ return *this; } 
# 275
bool failed() const noexcept 
# 276
{ return _M_failed; } 
# 279
ostreambuf_iterator &_M_put(const _CharT *__ws, streamsize __len) 
# 280
{ 
# 281
if ((__builtin_expect(!(_M_failed), true)) && (__builtin_expect(((this->_M_sbuf)->sputn(__ws, __len)) != __len, false))) { 
# 284
(_M_failed) = true; }  
# 285
return *this; 
# 286
} 
# 287
}; 
# 290
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 293
copy(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 294
__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 295
__result) 
# 296
{ 
# 297
if ((__first._M_sbuf) && (!(__last._M_sbuf)) && (!(__result._M_failed))) 
# 298
{ 
# 299
bool __ineof; 
# 300
__copy_streambufs_eof((__first._M_sbuf), (__result._M_sbuf), __ineof); 
# 301
if (!__ineof) { 
# 302
(__result._M_failed) = true; }  
# 303
}  
# 304
return __result; 
# 305
} 
# 307
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 310
__copy_move_a2(_CharT *__first, _CharT *__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 311
__result) 
# 312
{ 
# 313
const streamsize __num = __last - __first; 
# 314
if (__num > (0)) { 
# 315
(__result._M_put(__first, __num)); }  
# 316
return __result; 
# 317
} 
# 319
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 322
__copy_move_a2(const _CharT *__first, const _CharT *__last, ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 323
__result) 
# 324
{ 
# 325
const streamsize __num = __last - __first; 
# 326
if (__num > (0)) { 
# 327
(__result._M_put(__first, __num)); }  
# 328
return __result; 
# 329
} 
# 331
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 334
__copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 335
__last, _CharT *__result) 
# 336
{ 
# 337
typedef istreambuf_iterator< _CharT, char_traits< _CharT> >  __is_iterator_type; 
# 338
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type traits_type; 
# 339
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::streambuf_type streambuf_type; 
# 340
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type::int_type int_type; 
# 342
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 343
{ 
# 344
streambuf_type *__sb = ((__first._M_sbuf)); 
# 345
int_type __c = (__sb->sgetc()); 
# 346
while (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 347
{ 
# 348
const streamsize __n = (__sb->egptr()) - (__sb->gptr()); 
# 349
if (__n > (1)) 
# 350
{ 
# 351
traits_type::copy(__result, (__sb->gptr()), __n); 
# 352
(__sb->__safe_gbump(__n)); 
# 353
__result += __n; 
# 354
__c = (__sb->underflow()); 
# 355
} else 
# 357
{ 
# 358
(*(__result++)) = traits_type::to_char_type(__c); 
# 359
__c = (__sb->snextc()); 
# 360
}  
# 361
}  
# 362
}  
# 363
return __result; 
# 364
} 
# 366
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, istreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type 
# 369
find(istreambuf_iterator< _CharT, char_traits< _CharT> >  __first, istreambuf_iterator< _CharT, char_traits< _CharT> >  
# 370
__last, const _CharT &__val) 
# 371
{ 
# 372
typedef istreambuf_iterator< _CharT, char_traits< _CharT> >  __is_iterator_type; 
# 373
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type traits_type; 
# 374
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::streambuf_type streambuf_type; 
# 375
typedef typename istreambuf_iterator< _CharT, char_traits< _CharT> > ::traits_type::int_type int_type; 
# 377
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 378
{ 
# 379
const int_type __ival = traits_type::to_int_type(__val); 
# 380
streambuf_type *__sb = ((__first._M_sbuf)); 
# 381
int_type __c = (__sb->sgetc()); 
# 382
while ((!traits_type::eq_int_type(__c, traits_type::eof())) && (!traits_type::eq_int_type(__c, __ival))) 
# 384
{ 
# 385
streamsize __n = (__sb->egptr()) - (__sb->gptr()); 
# 386
if (__n > (1)) 
# 387
{ 
# 388
const _CharT *__p = traits_type::find((__sb->gptr()), __n, __val); 
# 390
if (__p) { 
# 391
__n = (__p - (__sb->gptr())); }  
# 392
(__sb->__safe_gbump(__n)); 
# 393
__c = (__sb->sgetc()); 
# 394
} else { 
# 396
__c = (__sb->snextc()); }  
# 397
}  
# 399
if (!traits_type::eq_int_type(__c, traits_type::eof())) { 
# 400
(__first._M_c) = __c; } else { 
# 402
(__first._M_sbuf) = 0; }  
# 403
}  
# 404
return __first; 
# 405
} 
# 410
}
# 50 "/usr/include/c++/5/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _Tp> void __convert_to_v(const char *, _Tp &, ios_base::iostate &, const __c_locale &) throw(); 
# 79
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &) throw(); 
# 84
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &) throw(); 
# 89
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &) throw(); 
# 94
template< class _CharT, class _Traits> 
# 95
struct __pad { 
# 98
static void _S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, streamsize __newlen, streamsize __oldlen); 
# 100
}; 
# 107
template< class _CharT> _CharT *__add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last); 
# 116
template< class _CharT> inline ostreambuf_iterator< _CharT, char_traits< _CharT> >  
# 119
__write(ostreambuf_iterator< _CharT, char_traits< _CharT> >  __s, const _CharT *__ws, int __len) 
# 120
{ 
# 121
(__s._M_put(__ws, __len)); 
# 122
return __s; 
# 123
} 
# 126
template< class _CharT, class _OutIter> inline _OutIter 
# 129
__write(_OutIter __s, const _CharT *__ws, int __len) 
# 130
{ 
# 131
for (int __j = 0; __j < __len; (__j++), (++__s)) { 
# 132
(*__s) = (__ws[__j]); }  
# 133
return __s; 
# 134
} 
# 149
template< class _CharT> 
# 150
class __ctype_abstract_base : public locale::facet, public ctype_base { 
# 155
public: typedef _CharT char_type; 
# 169
bool is(mask __m, char_type __c) const 
# 170
{ return (this->do_is(__m, __c)); } 
# 186
const char_type *is(const char_type *__lo, const char_type *__hi, mask *__vec) const 
# 187
{ return (this->do_is(__lo, __hi, __vec)); } 
# 202
const char_type *scan_is(mask __m, const char_type *__lo, const char_type *__hi) const 
# 203
{ return this->do_scan_is(__m, __lo, __hi); } 
# 218
const char_type *scan_not(mask __m, const char_type *__lo, const char_type *__hi) const 
# 219
{ return this->do_scan_not(__m, __lo, __hi); } 
# 232
char_type toupper(char_type __c) const 
# 233
{ return (this->do_toupper(__c)); } 
# 247
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 248
{ return (this->do_toupper(__lo, __hi)); } 
# 261
char_type tolower(char_type __c) const 
# 262
{ return (this->do_tolower(__c)); } 
# 276
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 277
{ return (this->do_tolower(__lo, __hi)); } 
# 293
char_type widen(char __c) const 
# 294
{ return (this->do_widen(__c)); } 
# 312
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 313
{ return (this->do_widen(__lo, __hi, __to)); } 
# 331
char narrow(char_type __c, char __dfault) const 
# 332
{ return (this->do_narrow(__c, __dfault)); } 
# 353
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 354
__dfault, char *__to) const 
# 355
{ return (this->do_narrow(__lo, __hi, __dfault, __to)); } 
# 359
protected: explicit __ctype_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 362
virtual ~__ctype_abstract_base() { } 
# 378
virtual bool do_is(mask __m, char_type __c) const = 0; 
# 397
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const = 0; 
# 416
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 435
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 453
virtual char_type do_toupper(char_type __c) const = 0; 
# 470
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const = 0; 
# 486
virtual char_type do_tolower(char_type __c) const = 0; 
# 503
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const = 0; 
# 522
virtual char_type do_widen(char __c) const = 0; 
# 543
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const = 0; 
# 564
virtual char do_narrow(char_type __c, char __dfault) const = 0; 
# 589
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const = 0; 
# 591
}; 
# 611
template< class _CharT> 
# 612
class ctype : public __ctype_abstract_base< _CharT>  { 
# 616
public: typedef _CharT char_type; 
# 617
typedef typename ::std::__ctype_abstract_base< _CharT> ::mask mask; 
# 620
static ::std::locale::id id; 
# 623
explicit ctype(::std::size_t __refs = 0) : ::std::__ctype_abstract_base< _CharT> (__refs) { } 
# 627
protected: virtual ~ctype(); 
# 630
virtual bool do_is(mask __m, char_type __c) const; 
# 633
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 636
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 639
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 643
virtual char_type do_toupper(char_type __c) const; 
# 646
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 649
virtual char_type do_tolower(char_type __c) const; 
# 652
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 655
virtual char_type do_widen(char __c) const; 
# 658
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __dest) const; 
# 661
virtual char do_narrow(char_type, char __dfault) const; 
# 664
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 666
}; 
# 668
template< class _CharT> locale::id 
# 669
ctype< _CharT> ::id; 
# 681
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 686
public: typedef char char_type; 
# 690
protected: __c_locale _M_c_locale_ctype; 
# 691
bool _M_del; 
# 692
__to_type _M_toupper; 
# 693
__to_type _M_tolower; 
# 694
const mask *_M_table; 
# 695
mutable char _M_widen_ok; 
# 696
mutable char _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 697
mutable char _M_narrow[1 + (static_cast< unsigned char>(-1))]; 
# 698
mutable char _M_narrow_ok; 
# 703
public: static locale::id id; 
# 705
static const size_t table_size = (1 + (static_cast< unsigned char>(-1))); 
# 718
explicit ctype(const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 731
explicit ctype(__c_locale __cloc, const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 744
inline bool is(mask __m, char __c) const; 
# 759
inline const char *is(const char * __lo, const char * __hi, mask * __vec) const; 
# 773
inline const char *scan_is(mask __m, const char * __lo, const char * __hi) const; 
# 787
inline const char *scan_not(mask __m, const char * __lo, const char * __hi) const; 
# 802
char_type toupper(char_type __c) const 
# 803
{ return this->do_toupper(__c); } 
# 819
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 820
{ return this->do_toupper(__lo, __hi); } 
# 835
char_type tolower(char_type __c) const 
# 836
{ return this->do_tolower(__c); } 
# 852
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 853
{ return this->do_tolower(__lo, __hi); } 
# 872
char_type widen(char __c) const 
# 873
{ 
# 874
if (_M_widen_ok) { 
# 875
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 876
this->_M_widen_init(); 
# 877
return this->do_widen(__c); 
# 878
} 
# 899
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 900
{ 
# 901
if ((_M_widen_ok) == 1) 
# 902
{ 
# 903
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 904
return __hi; 
# 905
}  
# 906
if (!(_M_widen_ok)) { 
# 907
this->_M_widen_init(); }  
# 908
return this->do_widen(__lo, __hi, __to); 
# 909
} 
# 930
char narrow(char_type __c, char __dfault) const 
# 931
{ 
# 932
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 933
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 934
const char __t = this->do_narrow(__c, __dfault); 
# 935
if (__t != __dfault) { 
# 936
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 937
return __t; 
# 938
} 
# 963
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 964
__dfault, char *__to) const 
# 965
{ 
# 966
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 967
{ 
# 968
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 969
return __hi; 
# 970
}  
# 971
if (!(_M_narrow_ok)) { 
# 972
this->_M_narrow_init(); }  
# 973
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 974
} 
# 981
const mask *table() const throw() 
# 982
{ return _M_table; } 
# 986
static const mask *classic_table() throw(); 
# 996
protected: virtual ~ctype(); 
# 1012
virtual char_type do_toupper(char_type __c) const; 
# 1029
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1045
virtual char_type do_tolower(char_type __c) const; 
# 1062
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1082
virtual char_type do_widen(char __c) const 
# 1083
{ return __c; } 
# 1105
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__to) const 
# 1106
{ 
# 1107
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 1108
return __hi; 
# 1109
} 
# 1131
virtual char do_narrow(char_type __c, char __dfault) const 
# 1132
{ return __c; } 
# 1157
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char 
# 1158
__dfault, char *__to) const 
# 1159
{ 
# 1160
__builtin_memcpy(__to, __lo, __hi - __lo); 
# 1161
return __hi; 
# 1162
} 
# 1165
private: void _M_narrow_init() const; 
# 1166
void _M_widen_init() const; 
# 1167
}; 
# 1182
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1187
public: typedef wchar_t char_type; 
# 1188
typedef wctype_t __wmask_type; 
# 1191
protected: __c_locale _M_c_locale_ctype; 
# 1194
bool _M_narrow_ok; 
# 1195
char _M_narrow[128]; 
# 1196
wint_t _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 1199
mask _M_bit[16]; 
# 1200
__wmask_type _M_wmask[16]; 
# 1205
public: static locale::id id; 
# 1215
explicit ctype(size_t __refs = 0); 
# 1226
explicit ctype(__c_locale __cloc, size_t __refs = 0); 
# 1230
protected: __wmask_type _M_convert_to_wmask(const mask __m) const throw(); 
# 1234
virtual ~ctype(); 
# 1250
virtual bool do_is(mask __m, char_type __c) const; 
# 1269
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 1287
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1305
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1322
virtual char_type do_toupper(char_type __c) const; 
# 1339
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1355
virtual char_type do_tolower(char_type __c) const; 
# 1372
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1392
virtual char_type do_widen(char __c) const; 
# 1414
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const; 
# 1437
virtual char do_narrow(char_type __c, char __dfault) const; 
# 1463
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 1468
void _M_initialize_ctype() throw(); 
# 1469
}; 
# 1473
template< class _CharT> 
# 1474
class ctype_byname : public ctype< _CharT>  { 
# 1477
public: typedef typename ::std::ctype< _CharT> ::mask mask; 
# 1480
explicit ctype_byname(const char * __s, ::std::size_t __refs = 0); 
# 1484
explicit ctype_byname(const ::std::__cxx11::string &__s, ::std::size_t __refs = 0) : ctype_byname(__s.c_str(), __refs) 
# 1485
{ } 
# 1490
protected: virtual ~ctype_byname() { } 
# 1491
}; 
# 1495
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1499
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1503
explicit ctype_byname(const __cxx11::string & __s, size_t __refs = 0); 
# 1508
protected: virtual ~ctype_byname(); 
# 1509
}; 
# 1513
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1517
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1521
explicit ctype_byname(const __cxx11::string & __s, size_t __refs = 0); 
# 1526
protected: virtual ~ctype_byname(); 
# 1527
}; 
# 1531
}
# 37 "/usr/include/x86_64-linux-gnu/c++/5/bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
inline bool ctype< char> ::is(mask __m, char __c) const 
# 44
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 48
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 49
{ 
# 50
while (__low < __high) { 
# 51
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>(*(__low++))]); }  
# 52
return __high; 
# 53
} 
# 57
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 58
{ 
# 59
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>(*__low)]) & __m))) { 
# 61
++__low; }  
# 62
return __low; 
# 63
} 
# 67
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 68
{ 
# 69
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>(*__low)]) & __m) != 0)) { 
# 71
++__low; }  
# 72
return __low; 
# 73
} 
# 76
}
# 1536 "/usr/include/c++/5/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1541
class __num_base { 
# 1547
public: enum { 
# 1548
_S_ominus, 
# 1549
_S_oplus, 
# 1550
_S_ox, 
# 1551
_S_oX, 
# 1552
_S_odigits, 
# 1553
_S_odigits_end = 20, 
# 1554
_S_oudigits = 20, 
# 1555
_S_oudigits_end = 36, 
# 1556
_S_oe = 18, 
# 1557
_S_oE = 34, 
# 1558
_S_oend = 36
# 1559
}; 
# 1566
static const char *_S_atoms_out; 
# 1570
static const char *_S_atoms_in; 
# 1573
enum { 
# 1574
_S_iminus, 
# 1575
_S_iplus, 
# 1576
_S_ix, 
# 1577
_S_iX, 
# 1578
_S_izero, 
# 1579
_S_ie = 18, 
# 1580
_S_iE = 24, 
# 1581
_S_iend = 26
# 1582
}; 
# 1587
static void _S_format_float(const ios_base & __io, char * __fptr, char __mod) throw(); 
# 1588
}; 
# 1590
template< class _CharT> 
# 1591
struct __numpunct_cache : public locale::facet { 
# 1593
const char *_M_grouping; 
# 1594
size_t _M_grouping_size; 
# 1595
bool _M_use_grouping; 
# 1596
const _CharT *_M_truename; 
# 1597
size_t _M_truename_size; 
# 1598
const _CharT *_M_falsename; 
# 1599
size_t _M_falsename_size; 
# 1600
_CharT _M_decimal_point; 
# 1601
_CharT _M_thousands_sep; 
# 1607
_CharT _M_atoms_out[__num_base::_S_oend]; 
# 1613
_CharT _M_atoms_in[__num_base::_S_iend]; 
# 1615
bool _M_allocated; 
# 1617
__numpunct_cache(size_t __refs = 0) : locale::facet(__refs), _M_grouping((0)), _M_grouping_size((0)), _M_use_grouping(false), _M_truename((0)), _M_truename_size((0)), _M_falsename((0)), _M_falsename_size((0)), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false) 
# 1623
{ } 
# 1625
virtual ~__numpunct_cache(); 
# 1628
void _M_cache(const locale & __loc); 
# 1632
private: __numpunct_cache &operator=(const __numpunct_cache &); 
# 1635
explicit __numpunct_cache(const __numpunct_cache &); 
# 1636
}; 
# 1638
template< class _CharT> 
# 1639
__numpunct_cache< _CharT> ::~__numpunct_cache() 
# 1640
{ 
# 1641
if (_M_allocated) 
# 1642
{ 
# 1643
delete [] (_M_grouping); 
# 1644
delete [] (_M_truename); 
# 1645
delete [] (_M_falsename); 
# 1646
}  
# 1647
} 
# 1649
inline namespace __cxx11 { 
# 1665
template< class _CharT> 
# 1666
class numpunct : public locale::facet { 
# 1672
public: typedef _CharT char_type; 
# 1673
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 1675
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1678
protected: __cache_type *_M_data; 
# 1682
public: static locale::id id; 
# 1690
explicit numpunct(size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1692
{ _M_initialize_numpunct(); } 
# 1704
explicit numpunct(__cache_type *__cache, size_t __refs = 0) : locale::facet(__refs), _M_data(__cache) 
# 1706
{ _M_initialize_numpunct(); } 
# 1718
explicit numpunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1720
{ _M_initialize_numpunct(__cloc); } 
# 1732
char_type decimal_point() const 
# 1733
{ return this->do_decimal_point(); } 
# 1745
char_type thousands_sep() const 
# 1746
{ return this->do_thousands_sep(); } 
# 1776
string grouping() const 
# 1777
{ return this->do_grouping(); } 
# 1789
string_type truename() const 
# 1790
{ return this->do_truename(); } 
# 1802
string_type falsename() const 
# 1803
{ return this->do_falsename(); } 
# 1808
protected: virtual ~numpunct(); 
# 1819
virtual char_type do_decimal_point() const 
# 1820
{ return (_M_data)->_M_decimal_point; } 
# 1831
virtual char_type do_thousands_sep() const 
# 1832
{ return (_M_data)->_M_thousands_sep; } 
# 1844
virtual string do_grouping() const 
# 1845
{ return ((_M_data)->_M_grouping); } 
# 1857
virtual string_type do_truename() const 
# 1858
{ return ((_M_data)->_M_truename); } 
# 1870
virtual string_type do_falsename() const 
# 1871
{ return ((_M_data)->_M_falsename); } 
# 1875
void _M_initialize_numpunct(__c_locale __cloc = 0); 
# 1876
}; 
# 1878
template< class _CharT> locale::id 
# 1879
numpunct< _CharT> ::id; 
# 1882
template<> numpunct< char> ::~numpunct(); 
# 1886
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1890
template<> numpunct< wchar_t> ::~numpunct(); 
# 1894
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1898
template< class _CharT> 
# 1899
class numpunct_byname : public numpunct< _CharT>  { 
# 1902
public: typedef _CharT char_type; 
# 1903
typedef basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  string_type; 
# 1906
explicit numpunct_byname(const char *__s, ::std::size_t __refs = 0) : ::std::__cxx11::numpunct< _CharT> (__refs) 
# 1908
{ 
# 1909
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 1911
{ 
# 1912
::std::__c_locale __tmp; 
# 1913
(this->_S_create_c_locale(__tmp, __s)); 
# 1914
(this->_M_initialize_numpunct(__tmp)); 
# 1915
(this->_S_destroy_c_locale(__tmp)); 
# 1916
}  
# 1917
} 
# 1921
explicit numpunct_byname(const ::std::__cxx11::string &__s, ::std::size_t __refs = 0) : numpunct_byname(__s.c_str(), __refs) 
# 1922
{ } 
# 1927
protected: virtual ~numpunct_byname() { } 
# 1928
}; 
# 1930
}
# 1947
template< class _CharT, class _InIter> 
# 1948
class num_get : public locale::facet { 
# 1954
public: typedef _CharT char_type; 
# 1955
typedef _InIter iter_type; 
# 1959
static locale::id id; 
# 1969
explicit num_get(size_t __refs = 0) : locale::facet(__refs) { } 
# 1995
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 1996
__err, bool &__v) const 
# 1997
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2032
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2033
__err, long &__v) const 
# 2034
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2037
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2038
__err, unsigned short &__v) const 
# 2039
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2042
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2043
__err, unsigned &__v) const 
# 2044
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2047
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2048
__err, unsigned long &__v) const 
# 2049
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2053
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2054
__err, long long &__v) const 
# 2055
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2058
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2059
__err, unsigned long long &__v) const 
# 2060
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2092
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2093
__err, float &__v) const 
# 2094
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2097
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2098
__err, double &__v) const 
# 2099
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2102
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2103
__err, long double &__v) const 
# 2104
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2135
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2136
__err, void *&__v) const 
# 2137
{ return (this->do_get(__in, __end, __io, __err, __v)); } 
# 2141
protected: virtual ~num_get() { } 
# 2143
__attribute((__abi_tag__("cxx11" ))) iter_type 
# 2145
_M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, __cxx11::string &) const; 
# 2148
template< class _ValueT> 
# 2149
__attribute((__abi_tag__("cxx11" ))) iter_type 
# 2148
_M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT &) const; 
# 2154
template< class _CharT2> typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, int> ::__type 
# 2156
_M_find(const _CharT2 *, size_t __len, _CharT2 __c) const 
# 2157
{ 
# 2158
int __ret = (-1); 
# 2159
if (__len <= (10)) 
# 2160
{ 
# 2161
if ((__c >= ((_CharT2)'0')) && (__c < ((_CharT2)(((_CharT2)'0') + __len)))) { 
# 2162
__ret = (__c - ((_CharT2)'0')); }  
# 2163
} else 
# 2165
{ 
# 2166
if ((__c >= ((_CharT2)'0')) && (__c <= ((_CharT2)'9'))) { 
# 2167
__ret = (__c - ((_CharT2)'0')); } else { 
# 2168
if ((__c >= ((_CharT2)'a')) && (__c <= ((_CharT2)'f'))) { 
# 2169
__ret = (10 + (__c - ((_CharT2)'a'))); } else { 
# 2170
if ((__c >= ((_CharT2)'A')) && (__c <= ((_CharT2)'F'))) { 
# 2171
__ret = (10 + (__c - ((_CharT2)'A'))); }  }  }  
# 2172
}  
# 2173
return __ret; 
# 2174
} 
# 2176
template< class _CharT2> typename __gnu_cxx::__enable_if< !__is_char< _CharT2> ::__value, int> ::__type 
# 2179
_M_find(const _CharT2 *__zero, size_t __len, _CharT2 __c) const 
# 2180
{ 
# 2181
int __ret = (-1); 
# 2182
const char_type *__q = char_traits< _CharT2> ::find(__zero, __len, __c); 
# 2183
if (__q) 
# 2184
{ 
# 2185
__ret = (__q - __zero); 
# 2186
if (__ret > 15) { 
# 2187
__ret -= 6; }  
# 2188
}  
# 2189
return __ret; 
# 2190
} 
# 2208
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const; 
# 2211
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2212
__err, long &__v) const 
# 2213
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2216
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2217
__err, unsigned short &__v) const 
# 2218
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2221
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2222
__err, unsigned &__v) const 
# 2223
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2226
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2227
__err, unsigned long &__v) const 
# 2228
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2232
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2233
__err, long long &__v) const 
# 2234
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2237
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2238
__err, unsigned long long &__v) const 
# 2239
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2243
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, float &) const; 
# 2246
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const; 
# 2256
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long double &) const; 
# 2261
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, void *&) const; 
# 2270
}; 
# 2272
template< class _CharT, class _InIter> locale::id 
# 2273
num_get< _CharT, _InIter> ::id; 
# 2288
template< class _CharT, class _OutIter> 
# 2289
class num_put : public locale::facet { 
# 2295
public: typedef _CharT char_type; 
# 2296
typedef _OutIter iter_type; 
# 2300
static locale::id id; 
# 2310
explicit num_put(size_t __refs = 0) : locale::facet(__refs) { } 
# 2328
iter_type put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 2329
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2370
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2371
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2374
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2375
__v) const 
# 2376
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2380
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long long __v) const 
# 2381
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2384
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2385
__v) const 
# 2386
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2433
iter_type put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 2434
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2437
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 2438
__v) const 
# 2439
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2458
iter_type put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 2459
__v) const 
# 2460
{ return (this->do_put(__s, __io, __fill, __v)); } 
# 2463
protected: template< class _ValueT> iter_type _M_insert_float(iter_type, ios_base & __io, char_type __fill, char __mod, _ValueT __v) const; 
# 2469
void _M_group_float(const char * __grouping, size_t __grouping_size, char_type __sep, const char_type * __p, char_type * __new, char_type * __cs, int & __len) const; 
# 2473
template< class _ValueT> iter_type _M_insert_int(iter_type, ios_base & __io, char_type __fill, _ValueT __v) const; 
# 2479
void _M_group_int(const char * __grouping, size_t __grouping_size, char_type __sep, ios_base & __io, char_type * __new, char_type * __cs, int & __len) const; 
# 2484
void _M_pad(char_type __fill, streamsize __w, ios_base & __io, char_type * __new, const char_type * __cs, int & __len) const; 
# 2489
virtual ~num_put() { } 
# 2506
virtual iter_type do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const; 
# 2509
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2510
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2513
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2514
__v) const 
# 2515
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2519
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long long 
# 2520
__v) const 
# 2521
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2524
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2525
__v) const 
# 2526
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2530
virtual iter_type do_put(iter_type, ios_base &, char_type, double) const; 
# 2538
virtual iter_type do_put(iter_type, ios_base &, char_type, long double) const; 
# 2542
virtual iter_type do_put(iter_type, ios_base &, char_type, const void *) const; 
# 2550
}; 
# 2552
template< class _CharT, class _OutIter> locale::id 
# 2553
num_put< _CharT, _OutIter> ::id; 
# 2563
template< class _CharT> inline bool 
# 2565
isspace(_CharT __c, const locale &__loc) 
# 2566
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::space, __c)); } 
# 2569
template< class _CharT> inline bool 
# 2571
isprint(_CharT __c, const locale &__loc) 
# 2572
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::print, __c)); } 
# 2575
template< class _CharT> inline bool 
# 2577
iscntrl(_CharT __c, const locale &__loc) 
# 2578
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::cntrl, __c)); } 
# 2581
template< class _CharT> inline bool 
# 2583
isupper(_CharT __c, const locale &__loc) 
# 2584
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::upper, __c)); } 
# 2587
template< class _CharT> inline bool 
# 2589
islower(_CharT __c, const locale &__loc) 
# 2590
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::lower, __c)); } 
# 2593
template< class _CharT> inline bool 
# 2595
isalpha(_CharT __c, const locale &__loc) 
# 2596
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::alpha, __c)); } 
# 2599
template< class _CharT> inline bool 
# 2601
isdigit(_CharT __c, const locale &__loc) 
# 2602
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::digit, __c)); } 
# 2605
template< class _CharT> inline bool 
# 2607
ispunct(_CharT __c, const locale &__loc) 
# 2608
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::punct, __c)); } 
# 2611
template< class _CharT> inline bool 
# 2613
isxdigit(_CharT __c, const locale &__loc) 
# 2614
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::xdigit, __c)); } 
# 2617
template< class _CharT> inline bool 
# 2619
isalnum(_CharT __c, const locale &__loc) 
# 2620
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::alnum, __c)); } 
# 2623
template< class _CharT> inline bool 
# 2625
isgraph(_CharT __c, const locale &__loc) 
# 2626
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::graph, __c)); } 
# 2630
template< class _CharT> inline bool 
# 2632
isblank(_CharT __c, const locale &__loc) 
# 2633
{ return (use_facet< ctype< _CharT> > (__loc).is(ctype_base::blank, __c)); } 
# 2637
template< class _CharT> inline _CharT 
# 2639
toupper(_CharT __c, const locale &__loc) 
# 2640
{ return (use_facet< ctype< _CharT> > (__loc).toupper(__c)); } 
# 2643
template< class _CharT> inline _CharT 
# 2645
tolower(_CharT __c, const locale &__loc) 
# 2646
{ return (use_facet< ctype< _CharT> > (__loc).tolower(__c)); } 
# 2649
}
# 35 "/usr/include/c++/5/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & __loc) const; 
# 46
}; 
# 49
template< class _CharT> 
# 50
struct __use_cache< __numpunct_cache< _CharT> >  { 
# 53
const __numpunct_cache< _CharT>  *operator()(const locale &__loc) const 
# 54
{ 
# 55
const size_t __i = (numpunct< _CharT> ::id._M_id)(); 
# 56
const locale::facet **__caches = (__loc._M_impl)->_M_caches; 
# 57
if (!(__caches[__i])) 
# 58
{ 
# 59
__numpunct_cache< _CharT>  *__tmp = (0); 
# 60
try 
# 61
{ 
# 62
__tmp = (new __numpunct_cache< _CharT> ); 
# 63
(__tmp->_M_cache(__loc)); 
# 64
} 
# 65
catch (...) 
# 66
{ 
# 67
delete __tmp; 
# 68
throw; 
# 69
}  
# 70
(__loc._M_impl)->_M_install_cache(__tmp, __i); 
# 71
}  
# 72
return static_cast< const __numpunct_cache< _CharT>  *>(__caches[__i]); 
# 73
} 
# 74
}; 
# 76
template< class _CharT> void 
# 78
__numpunct_cache< _CharT> ::_M_cache(const locale &__loc) 
# 79
{ 
# 80
const __cxx11::numpunct< _CharT>  &__np = use_facet< __cxx11::numpunct< _CharT> > (__loc); 
# 82
char *__grouping = (0); 
# 83
_CharT *__truename = (0); 
# 84
_CharT *__falsename = (0); 
# 85
try 
# 86
{ 
# 87
const __cxx11::string &__g = (__np.grouping()); 
# 88
(_M_grouping_size) = __g.size(); 
# 89
__grouping = (new char [_M_grouping_size]); 
# 90
__g.copy(__grouping, _M_grouping_size); 
# 91
(_M_use_grouping) = ((_M_grouping_size) && ((static_cast< signed char>(__grouping[0])) > 0) && ((__grouping[0]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)); 
# 96
const __cxx11::basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &__tn = (__np.truename()); 
# 97
(_M_truename_size) = (__tn.size()); 
# 98
__truename = (new _CharT [_M_truename_size]); 
# 99
(__tn.copy(__truename, _M_truename_size)); 
# 101
const __cxx11::basic_string< _CharT, char_traits< _CharT> , allocator< _CharT> >  &__fn = (__np.falsename()); 
# 102
(_M_falsename_size) = (__fn.size()); 
# 103
__falsename = (new _CharT [_M_falsename_size]); 
# 104
(__fn.copy(__falsename, _M_falsename_size)); 
# 106
(_M_decimal_point) = (__np.decimal_point()); 
# 107
(_M_thousands_sep) = (__np.thousands_sep()); 
# 109
const ctype< _CharT>  &__ct = use_facet< ctype< _CharT> > (__loc); 
# 110
(__ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out)); 
# 113
(__ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in)); 
# 117
(_M_grouping) = __grouping; 
# 118
(_M_truename) = __truename; 
# 119
(_M_falsename) = __falsename; 
# 120
(_M_allocated) = true; 
# 121
} 
# 122
catch (...) 
# 123
{ 
# 124
delete [] __grouping; 
# 125
delete [] __truename; 
# 126
delete [] __falsename; 
# 127
throw; 
# 128
}  
# 129
} 
# 139
__attribute((__pure__)) bool 
# 140
__verify_grouping(const char * __grouping, size_t __grouping_size, const __cxx11::string & __grouping_tmp) throw(); 
# 145
template< class _CharT, class _InIter> 
# 146
__attribute((__abi_tag__("cxx11" ))) _InIter 
# 149
num_get< _CharT, _InIter> ::_M_extract_float(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 150
__err, __cxx11::string &__xtrc) const 
# 151
{ 
# 152
typedef char_traits< _CharT>  __traits_type; 
# 153
typedef __numpunct_cache< _CharT>  __cache_type; 
# 154
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 155
const locale &__loc = __io._M_getloc(); 
# 156
const __cache_type *__lc = __uc(__loc); 
# 157
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 158
char_type __c = (char_type()); 
# 161
bool __testeof = __beg == __end; 
# 164
if (!__testeof) 
# 165
{ 
# 166
__c = (*__beg); 
# 167
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 168
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 171
{ 
# 172
(__xtrc += (__plus ? '+' : '-')); 
# 173
if ((++__beg) != __end) { 
# 174
__c = (*__beg); } else { 
# 176
__testeof = true; }  
# 177
}  
# 178
}  
# 181
bool __found_mantissa = false; 
# 182
int __sep_pos = 0; 
# 183
while (!__testeof) 
# 184
{ 
# 185
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 187
break; } else { 
# 188
if (__c == (__lit[__num_base::_S_izero])) 
# 189
{ 
# 190
if (!__found_mantissa) 
# 191
{ 
# 192
(__xtrc += ('0')); 
# 193
__found_mantissa = true; 
# 194
}  
# 195
++__sep_pos; 
# 197
if ((++__beg) != __end) { 
# 198
__c = (*__beg); } else { 
# 200
__testeof = true; }  
# 201
} else { 
# 203
break; }  }  
# 204
}  
# 207
bool __found_dec = false; 
# 208
bool __found_sci = false; 
# 209
__cxx11::string __found_grouping; 
# 210
if (__lc->_M_use_grouping) { 
# 211
__found_grouping.reserve(32); }  
# 212
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 214
if (!(__lc->_M_allocated)) { 
# 216
while (!__testeof) { 
# 217
{ 
# 218
const int __digit = _M_find(__lit_zero, 10, __c); 
# 219
if (__digit != (-1)) 
# 220
{ 
# 221
(__xtrc += (('0') + __digit)); 
# 222
__found_mantissa = true; 
# 223
} else { 
# 224
if ((__c == (__lc->_M_decimal_point)) && (!__found_dec) && (!__found_sci)) 
# 226
{ 
# 227
(__xtrc += ('.')); 
# 228
__found_dec = true; 
# 229
} else { 
# 230
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 233
{ 
# 235
(__xtrc += ('e')); 
# 236
__found_sci = true; 
# 239
if ((++__beg) != __end) 
# 240
{ 
# 241
__c = (*__beg); 
# 242
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 243
if (__plus || (__c == (__lit[__num_base::_S_iminus]))) { 
# 244
(__xtrc += (__plus ? '+' : '-')); } else { 
# 246
continue; }  
# 247
} else 
# 249
{ 
# 250
__testeof = true; 
# 251
break; 
# 252
}  
# 253
} else { 
# 255
break; }  }  }  
# 257
if ((++__beg) != __end) { 
# 258
__c = (*__beg); } else { 
# 260
__testeof = true; }  
# 261
} }  } else { 
# 263
while (!__testeof) { 
# 264
{ 
# 267
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 268
{ 
# 269
if ((!__found_dec) && (!__found_sci)) 
# 270
{ 
# 273
if (__sep_pos) 
# 274
{ 
# 275
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 276
__sep_pos = 0; 
# 277
} else 
# 279
{ 
# 282
__xtrc.clear(); 
# 283
break; 
# 284
}  
# 285
} else { 
# 287
break; }  
# 288
} else { 
# 289
if (__c == (__lc->_M_decimal_point)) 
# 290
{ 
# 291
if ((!__found_dec) && (!__found_sci)) 
# 292
{ 
# 296
if (__found_grouping.size()) { 
# 297
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 298
(__xtrc += ('.')); 
# 299
__found_dec = true; 
# 300
} else { 
# 302
break; }  
# 303
} else 
# 305
{ 
# 306
const char_type *__q = __traits_type::find(__lit_zero, 10, __c); 
# 308
if (__q) 
# 309
{ 
# 310
__xtrc += ('0' + (__q - __lit_zero)); 
# 311
__found_mantissa = true; 
# 312
++__sep_pos; 
# 313
} else { 
# 314
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 317
{ 
# 319
if ((__found_grouping.size()) && (!__found_dec)) { 
# 320
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 321
(__xtrc += ('e')); 
# 322
__found_sci = true; 
# 325
if ((++__beg) != __end) 
# 326
{ 
# 327
__c = (*__beg); 
# 328
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 329
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) { 
# 333
(__xtrc += (__plus ? '+' : '-')); } else { 
# 335
continue; }  
# 336
} else 
# 338
{ 
# 339
__testeof = true; 
# 340
break; 
# 341
}  
# 342
} else { 
# 344
break; }  }  
# 345
}  }  
# 347
if ((++__beg) != __end) { 
# 348
__c = (*__beg); } else { 
# 350
__testeof = true; }  
# 351
} }  }  
# 355
if (__found_grouping.size()) 
# 356
{ 
# 358
if ((!__found_dec) && (!__found_sci)) { 
# 359
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 361
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 364
__err = ios_base::failbit; }  
# 365
}  
# 367
return __beg; 
# 368
} 
# 370
template< class _CharT, class _InIter> 
# 371
template< class _ValueT> 
# 372
__attribute((__abi_tag__("cxx11" ))) _InIter 
# 375
num_get< _CharT, _InIter> ::_M_extract_int(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 376
__err, _ValueT &__v) const 
# 377
{ 
# 378
typedef char_traits< _CharT>  __traits_type; 
# 379
using __gnu_cxx::__add_unsigned;
# 380
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 381
typedef __numpunct_cache< _CharT>  __cache_type; 
# 382
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 383
const locale &__loc = __io._M_getloc(); 
# 384
const __cache_type *__lc = __uc(__loc); 
# 385
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 386
char_type __c = (char_type()); 
# 389
const ios_base::fmtflags __basefield = ((__io.flags()) & ios_base::basefield); 
# 391
const bool __oct = __basefield == ios_base::oct; 
# 392
int __base = __oct ? 8 : ((__basefield == ios_base::hex) ? 16 : 10); 
# 395
bool __testeof = __beg == __end; 
# 398
bool __negative = false; 
# 399
if (!__testeof) 
# 400
{ 
# 401
__c = (*__beg); 
# 402
__negative = (__c == (__lit[__num_base::_S_iminus])); 
# 403
if ((__negative || (__c == (__lit[__num_base::_S_iplus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 406
{ 
# 407
if ((++__beg) != __end) { 
# 408
__c = (*__beg); } else { 
# 410
__testeof = true; }  
# 411
}  
# 412
}  
# 416
bool __found_zero = false; 
# 417
int __sep_pos = 0; 
# 418
while (!__testeof) 
# 419
{ 
# 420
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 422
break; } else { 
# 423
if ((__c == (__lit[__num_base::_S_izero])) && ((!__found_zero) || (__base == 10))) 
# 425
{ 
# 426
__found_zero = true; 
# 427
++__sep_pos; 
# 428
if (__basefield == 0) { 
# 429
__base = 8; }  
# 430
if (__base == 8) { 
# 431
__sep_pos = 0; }  
# 432
} else { 
# 433
if (__found_zero && ((__c == (__lit[__num_base::_S_ix])) || (__c == (__lit[__num_base::_S_iX])))) 
# 436
{ 
# 437
if (__basefield == 0) { 
# 438
__base = 16; }  
# 439
if (__base == 16) 
# 440
{ 
# 441
__found_zero = false; 
# 442
__sep_pos = 0; 
# 443
} else { 
# 445
break; }  
# 446
} else { 
# 448
break; }  }  }  
# 450
if ((++__beg) != __end) 
# 451
{ 
# 452
__c = (*__beg); 
# 453
if (!__found_zero) { 
# 454
break; }  
# 455
} else { 
# 457
__testeof = true; }  
# 458
}  
# 462
const size_t __len = (__base == 16) ? (__num_base::_S_iend) - (__num_base::_S_izero) : __base; 
# 466
__cxx11::string __found_grouping; 
# 467
if (__lc->_M_use_grouping) { 
# 468
__found_grouping.reserve(32); }  
# 469
bool __testfail = false; 
# 470
bool __testoverflow = false; 
# 471
const __unsigned_type __max = (__negative && __gnu_cxx::__numeric_traits< _ValueT> ::__is_signed) ? -__gnu_cxx::__numeric_traits< _ValueT> ::__min : __gnu_cxx::__numeric_traits< _ValueT> ::__max; 
# 475
const __unsigned_type __smax = __max / __base; 
# 476
__unsigned_type __result = (0); 
# 477
int __digit = 0; 
# 478
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 480
if (!(__lc->_M_allocated)) { 
# 482
while (!__testeof) 
# 483
{ 
# 484
__digit = _M_find(__lit_zero, __len, __c); 
# 485
if (__digit == (-1)) { 
# 486
break; }  
# 488
if (__result > __smax) { 
# 489
__testoverflow = true; } else 
# 491
{ 
# 492
__result *= __base; 
# 493
__testoverflow |= (__result > (__max - __digit)); 
# 494
__result += __digit; 
# 495
++__sep_pos; 
# 496
}  
# 498
if ((++__beg) != __end) { 
# 499
__c = (*__beg); } else { 
# 501
__testeof = true; }  
# 502
}  } else { 
# 504
while (!__testeof) 
# 505
{ 
# 508
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 509
{ 
# 512
if (__sep_pos) 
# 513
{ 
# 514
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 515
__sep_pos = 0; 
# 516
} else 
# 518
{ 
# 519
__testfail = true; 
# 520
break; 
# 521
}  
# 522
} else { 
# 523
if (__c == (__lc->_M_decimal_point)) { 
# 524
break; } else 
# 526
{ 
# 527
const char_type *__q = __traits_type::find(__lit_zero, __len, __c); 
# 529
if (!__q) { 
# 530
break; }  
# 532
__digit = (__q - __lit_zero); 
# 533
if (__digit > 15) { 
# 534
__digit -= 6; }  
# 535
if (__result > __smax) { 
# 536
__testoverflow = true; } else 
# 538
{ 
# 539
__result *= __base; 
# 540
__testoverflow |= (__result > (__max - __digit)); 
# 541
__result += __digit; 
# 542
++__sep_pos; 
# 543
}  
# 544
}  }  
# 546
if ((++__beg) != __end) { 
# 547
__c = (*__beg); } else { 
# 549
__testeof = true; }  
# 550
}  }  
# 554
if (__found_grouping.size()) 
# 555
{ 
# 557
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 559
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 562
__err = ios_base::failbit; }  
# 563
}  
# 567
if (((!__sep_pos) && (!__found_zero) && (!(__found_grouping.size()))) || __testfail) 
# 569
{ 
# 570
__v = 0; 
# 571
__err = ios_base::failbit; 
# 572
} else { 
# 573
if (__testoverflow) 
# 574
{ 
# 575
if (__negative && __gnu_cxx::__numeric_traits< _ValueT> ::__is_signed) { 
# 577
__v = __gnu_cxx::__numeric_traits< _ValueT> ::__min; } else { 
# 579
__v = __gnu_cxx::__numeric_traits< _ValueT> ::__max; }  
# 580
__err = ios_base::failbit; 
# 581
} else { 
# 583
__v = (__negative ? -__result : __result); }  }  
# 585
if (__testeof) { 
# 586
(__err |= ios_base::eofbit); }  
# 587
return __beg; 
# 588
} 
# 592
template< class _CharT, class _InIter> _InIter 
# 595
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 596
__err, bool &__v) const 
# 597
{ 
# 598
if (!(((__io.flags()) & ios_base::boolalpha))) 
# 599
{ 
# 603
long __l = (-1); 
# 604
__beg = _M_extract_int(__beg, __end, __io, __err, __l); 
# 605
if ((__l == (0)) || (__l == (1))) { 
# 606
__v = ((bool)__l); } else 
# 608
{ 
# 611
__v = true; 
# 612
__err = ios_base::failbit; 
# 613
if (__beg == __end) { 
# 614
(__err |= ios_base::eofbit); }  
# 615
}  
# 616
} else 
# 618
{ 
# 620
typedef __numpunct_cache< _CharT>  __cache_type; 
# 621
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 622
const locale &__loc = __io._M_getloc(); 
# 623
const __cache_type *__lc = __uc(__loc); 
# 625
bool __testf = true; 
# 626
bool __testt = true; 
# 627
bool __donef = (__lc->_M_falsename_size) == 0; 
# 628
bool __donet = (__lc->_M_truename_size) == 0; 
# 629
bool __testeof = false; 
# 630
size_t __n = (0); 
# 631
while ((!__donef) || (!__donet)) 
# 632
{ 
# 633
if (__beg == __end) 
# 634
{ 
# 635
__testeof = true; 
# 636
break; 
# 637
}  
# 639
const char_type __c = *__beg; 
# 641
if (!__donef) { 
# 642
__testf = (__c == ((__lc->_M_falsename)[__n])); }  
# 644
if ((!__testf) && __donet) { 
# 645
break; }  
# 647
if (!__donet) { 
# 648
__testt = (__c == ((__lc->_M_truename)[__n])); }  
# 650
if ((!__testt) && __donef) { 
# 651
break; }  
# 653
if ((!__testt) && (!__testf)) { 
# 654
break; }  
# 656
++__n; 
# 657
++__beg; 
# 659
__donef = ((!__testf) || (__n >= (__lc->_M_falsename_size))); 
# 660
__donet = ((!__testt) || (__n >= (__lc->_M_truename_size))); 
# 661
}  
# 662
if (__testf && (__n == (__lc->_M_falsename_size)) && __n) 
# 663
{ 
# 664
__v = false; 
# 665
if (__testt && (__n == (__lc->_M_truename_size))) { 
# 666
__err = ios_base::failbit; } else { 
# 668
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); }  
# 669
} else { 
# 670
if (__testt && (__n == (__lc->_M_truename_size)) && __n) 
# 671
{ 
# 672
__v = true; 
# 673
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); 
# 674
} else 
# 676
{ 
# 679
__v = false; 
# 680
__err = ios_base::failbit; 
# 681
if (__testeof) { 
# 682
(__err |= ios_base::eofbit); }  
# 683
}  }  
# 684
}  
# 685
return __beg; 
# 686
} 
# 688
template< class _CharT, class _InIter> _InIter 
# 691
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 692
__err, float &__v) const 
# 693
{ 
# 694
__cxx11::string __xtrc; 
# 695
__xtrc.reserve(32); 
# 696
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 697
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 698
if (__beg == __end) { 
# 699
(__err |= ios_base::eofbit); }  
# 700
return __beg; 
# 701
} 
# 703
template< class _CharT, class _InIter> _InIter 
# 706
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 707
__err, double &__v) const 
# 708
{ 
# 709
__cxx11::string __xtrc; 
# 710
__xtrc.reserve(32); 
# 711
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 712
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 713
if (__beg == __end) { 
# 714
(__err |= ios_base::eofbit); }  
# 715
return __beg; 
# 716
} 
# 735
template< class _CharT, class _InIter> _InIter 
# 738
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 739
__err, long double &__v) const 
# 740
{ 
# 741
__cxx11::string __xtrc; 
# 742
__xtrc.reserve(32); 
# 743
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 744
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 745
if (__beg == __end) { 
# 746
(__err |= ios_base::eofbit); }  
# 747
return __beg; 
# 748
} 
# 750
template< class _CharT, class _InIter> _InIter 
# 753
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 754
__err, void *&__v) const 
# 755
{ 
# 757
typedef ios_base::fmtflags fmtflags; 
# 758
const fmtflags __fmt = __io.flags(); 
# 759
__io.flags((((__fmt & ((~ios_base::basefield)))) | ios_base::hex)); 
# 763
typedef __gnu_cxx::__conditional_type< true, unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 765
_UIntPtrType __ul; 
# 766
__beg = _M_extract_int(__beg, __end, __io, __err, __ul); 
# 769
__io.flags(__fmt); 
# 771
__v = (reinterpret_cast< void *>(__ul)); 
# 772
return __beg; 
# 773
} 
# 777
template< class _CharT, class _OutIter> void 
# 780
num_put< _CharT, _OutIter> ::_M_pad(_CharT __fill, streamsize __w, ios_base &__io, _CharT *
# 781
__new, const _CharT *__cs, int &__len) const 
# 782
{ 
# 785
__pad< _CharT, char_traits< _CharT> > ::_S_pad(__io, __fill, __new, __cs, __w, __len); 
# 787
__len = (static_cast< int>(__w)); 
# 788
} 
# 792
template< class _CharT, class _ValueT> int 
# 794
__int_to_char(_CharT *__bufend, _ValueT __v, const _CharT *__lit, ios_base::fmtflags 
# 795
__flags, bool __dec) 
# 796
{ 
# 797
_CharT *__buf = __bufend; 
# 798
if (__builtin_expect(__dec, true)) 
# 799
{ 
# 801
do 
# 802
{ 
# 803
(*(--__buf)) = (__lit[(__v % 10) + __num_base::_S_odigits]); 
# 804
__v /= 10; 
# 805
} 
# 806
while (__v != 0); 
# 807
} else { 
# 808
if (((__flags & ios_base::basefield)) == ios_base::oct) 
# 809
{ 
# 811
do 
# 812
{ 
# 813
(*(--__buf)) = (__lit[(__v & 7) + __num_base::_S_odigits]); 
# 814
__v >>= 3; 
# 815
} 
# 816
while (__v != 0); 
# 817
} else 
# 819
{ 
# 821
const bool __uppercase = (__flags & ios_base::uppercase); 
# 822
const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits; 
# 824
do 
# 825
{ 
# 826
(*(--__buf)) = (__lit[(__v & 15) + __case_offset]); 
# 827
__v >>= 4; 
# 828
} 
# 829
while (__v != 0); 
# 830
}  }  
# 831
return __bufend - __buf; 
# 832
} 
# 836
template< class _CharT, class _OutIter> void 
# 839
num_put< _CharT, _OutIter> ::_M_group_int(const char *__grouping, size_t __grouping_size, _CharT __sep, ios_base &, _CharT *
# 840
__new, _CharT *__cs, int &__len) const 
# 841
{ 
# 842
_CharT *__p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len); 
# 844
__len = (__p - __new); 
# 845
} 
# 847
template< class _CharT, class _OutIter> 
# 848
template< class _ValueT> _OutIter 
# 851
num_put< _CharT, _OutIter> ::_M_insert_int(_OutIter __s, ios_base &__io, _CharT __fill, _ValueT 
# 852
__v) const 
# 853
{ 
# 854
using __gnu_cxx::__add_unsigned;
# 855
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 856
typedef __numpunct_cache< _CharT>  __cache_type; 
# 857
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 858
const locale &__loc = __io._M_getloc(); 
# 859
const __cache_type *__lc = __uc(__loc); 
# 860
const _CharT *__lit = ((__lc->_M_atoms_out)); 
# 861
const ios_base::fmtflags __flags = __io.flags(); 
# 864
const int __ilen = ((5) * sizeof(_ValueT)); 
# 865
_CharT *__cs = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __ilen)); 
# 870
const ios_base::fmtflags __basefield = (__flags & ios_base::basefield); 
# 871
const bool __dec = (__basefield != ios_base::oct) && (__basefield != ios_base::hex); 
# 873
const __unsigned_type __u = ((__v > 0) || (!__dec)) ? (__unsigned_type)__v : (-((__unsigned_type)__v)); 
# 876
int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec); 
# 877
__cs += (__ilen - __len); 
# 880
if (__lc->_M_use_grouping) 
# 881
{ 
# 884
_CharT *__cs2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * (__len + 1)) * (2))); 
# 887
_M_group_int((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __io, __cs2 + 2, __cs, __len); 
# 889
__cs = (__cs2 + 2); 
# 890
}  
# 893
if (__builtin_expect(__dec, true)) 
# 894
{ 
# 896
if (__v >= 0) 
# 897
{ 
# 898
if (((bool)((__flags & ios_base::showpos))) && __gnu_cxx::__numeric_traits< _ValueT> ::__is_signed) { 
# 900
((*(--__cs)) = (__lit[__num_base::_S_oplus])), (++__len); }  
# 901
} else { 
# 903
((*(--__cs)) = (__lit[__num_base::_S_ominus])), (++__len); }  
# 904
} else { 
# 905
if (((bool)((__flags & ios_base::showbase))) && __v) 
# 906
{ 
# 907
if (__basefield == ios_base::oct) { 
# 908
((*(--__cs)) = (__lit[__num_base::_S_odigits])), (++__len); } else 
# 910
{ 
# 912
const bool __uppercase = (__flags & ios_base::uppercase); 
# 913
(*(--__cs)) = (__lit[(__num_base::_S_ox) + __uppercase]); 
# 915
(*(--__cs)) = (__lit[__num_base::_S_odigits]); 
# 916
__len += 2; 
# 917
}  
# 918
}  }  
# 921
const streamsize __w = __io.width(); 
# 922
if (__w > (static_cast< streamsize>(__len))) 
# 923
{ 
# 924
_CharT *__cs3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 926
_M_pad(__fill, __w, __io, __cs3, __cs, __len); 
# 927
__cs = __cs3; 
# 928
}  
# 929
__io.width(0); 
# 933
return std::__write(__s, __cs, __len); 
# 934
} 
# 936
template< class _CharT, class _OutIter> void 
# 939
num_put< _CharT, _OutIter> ::_M_group_float(const char *__grouping, size_t __grouping_size, _CharT 
# 940
__sep, const _CharT *__p, _CharT *__new, _CharT *
# 941
__cs, int &__len) const 
# 942
{ 
# 946
const int __declen = (__p) ? __p - __cs : __len; 
# 947
_CharT *__p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen); 
# 952
int __newlen = __p2 - __new; 
# 953
if (__p) 
# 954
{ 
# 955
char_traits< _CharT> ::copy(__p2, __p, __len - __declen); 
# 956
__newlen += (__len - __declen); 
# 957
}  
# 958
__len = __newlen; 
# 959
} 
# 971
template< class _CharT, class _OutIter> 
# 972
template< class _ValueT> _OutIter 
# 975
num_put< _CharT, _OutIter> ::_M_insert_float(_OutIter __s, ios_base &__io, _CharT __fill, char __mod, _ValueT 
# 976
__v) const 
# 977
{ 
# 978
typedef __numpunct_cache< _CharT>  __cache_type; 
# 979
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 980
const locale &__loc = __io._M_getloc(); 
# 981
const __cache_type *__lc = __uc(__loc); 
# 984
const streamsize __prec = (__io.precision() < (0)) ? 6 : __io.precision(); 
# 986
const int __max_digits = (__gnu_cxx::__numeric_traits< _ValueT> ::__digits10); 
# 990
int __len; 
# 992
char __fbuf[16]; 
# 993
__num_base::_S_format_float(__io, __fbuf, __mod); 
# 997
const bool __use_prec = (((__io.flags()) & ios_base::floatfield)) != ios_base::floatfield; 
# 1002
int __cs_size = (__max_digits * 3); 
# 1003
char *__cs = static_cast< char *>(__builtin_alloca(__cs_size)); 
# 1004
if (__use_prec) { 
# 1005
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1008
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1012
if (__len >= __cs_size) 
# 1013
{ 
# 1014
__cs_size = (__len + 1); 
# 1015
__cs = (static_cast< char *>(__builtin_alloca(__cs_size))); 
# 1016
if (__use_prec) { 
# 1017
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1020
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1022
}  
# 1044
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1046
_CharT *__ws = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)); 
# 1048
(__ctype.widen(__cs, __cs + __len, __ws)); 
# 1051
_CharT *__wp = (0); 
# 1052
const char *__p = char_traits< char> ::find(__cs, __len, '.'); 
# 1053
if (__p) 
# 1054
{ 
# 1055
__wp = (__ws + (__p - __cs)); 
# 1056
(*__wp) = (__lc->_M_decimal_point); 
# 1057
}  
# 1062
if ((__lc->_M_use_grouping) && ((__wp || (__len < 3)) || (((__cs[1]) <= ('9')) && ((__cs[2]) <= ('9')) && ((__cs[1]) >= ('0')) && ((__cs[2]) >= ('0'))))) 
# 1065
{ 
# 1068
_CharT *__ws2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))); 
# 1071
streamsize __off = (0); 
# 1072
if (((__cs[0]) == ('-')) || ((__cs[0]) == ('+'))) 
# 1073
{ 
# 1074
__off = (1); 
# 1075
(__ws2[0]) = (__ws[0]); 
# 1076
__len -= 1; 
# 1077
}  
# 1079
_M_group_float((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __wp, __ws2 + __off, __ws + __off, __len); 
# 1082
__len += __off; 
# 1084
__ws = __ws2; 
# 1085
}  
# 1088
const streamsize __w = __io.width(); 
# 1089
if (__w > (static_cast< streamsize>(__len))) 
# 1090
{ 
# 1091
_CharT *__ws3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 1093
_M_pad(__fill, __w, __io, __ws3, __ws, __len); 
# 1094
__ws = __ws3; 
# 1095
}  
# 1096
__io.width(0); 
# 1100
return std::__write(__s, __ws, __len); 
# 1101
} 
# 1103
template< class _CharT, class _OutIter> _OutIter 
# 1106
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 1107
{ 
# 1108
const ios_base::fmtflags __flags = __io.flags(); 
# 1109
if (((__flags & ios_base::boolalpha)) == 0) 
# 1110
{ 
# 1111
const long __l = __v; 
# 1112
__s = _M_insert_int(__s, __io, __fill, __l); 
# 1113
} else 
# 1115
{ 
# 1116
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1117
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 1118
const locale &__loc = __io._M_getloc(); 
# 1119
const __cache_type *__lc = __uc(__loc); 
# 1121
const _CharT *__name = __v ? __lc->_M_truename : (__lc->_M_falsename); 
# 1123
int __len = __v ? __lc->_M_truename_size : (__lc->_M_falsename_size); 
# 1126
const streamsize __w = __io.width(); 
# 1127
if (__w > (static_cast< streamsize>(__len))) 
# 1128
{ 
# 1129
const streamsize __plen = __w - __len; 
# 1130
_CharT *__ps = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __plen)); 
# 1134
char_traits< _CharT> ::assign(__ps, __plen, __fill); 
# 1135
__io.width(0); 
# 1137
if (((__flags & ios_base::adjustfield)) == ios_base::left) 
# 1138
{ 
# 1139
__s = std::__write(__s, __name, __len); 
# 1140
__s = std::__write(__s, __ps, __plen); 
# 1141
} else 
# 1143
{ 
# 1144
__s = std::__write(__s, __ps, __plen); 
# 1145
__s = std::__write(__s, __name, __len); 
# 1146
}  
# 1147
return __s; 
# 1148
}  
# 1149
__io.width(0); 
# 1150
__s = std::__write(__s, __name, __len); 
# 1151
}  
# 1152
return __s; 
# 1153
} 
# 1155
template< class _CharT, class _OutIter> _OutIter 
# 1158
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 1159
{ return _M_insert_float(__s, __io, __fill, ((char)0), __v); } 
# 1169
template< class _CharT, class _OutIter> _OutIter 
# 1172
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 1173
__v) const 
# 1174
{ return _M_insert_float(__s, __io, __fill, 'L', __v); } 
# 1176
template< class _CharT, class _OutIter> _OutIter 
# 1179
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 1180
__v) const 
# 1181
{ 
# 1182
const ios_base::fmtflags __flags = __io.flags(); 
# 1183
const ios_base::fmtflags __fmt = (~((ios_base::basefield | ios_base::uppercase))); 
# 1185
__io.flags((((__flags & __fmt)) | ((ios_base::hex | ios_base::showbase)))); 
# 1189
typedef __gnu_cxx::__conditional_type< true, unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 1191
__s = _M_insert_int(__s, __io, __fill, reinterpret_cast< _UIntPtrType>(__v)); 
# 1193
__io.flags(__flags); 
# 1194
return __s; 
# 1195
} 
# 1206
template< class _CharT, class _Traits> void 
# 1208
__pad< _CharT, _Traits> ::_S_pad(ios_base &__io, _CharT __fill, _CharT *
# 1209
__news, const _CharT *__olds, streamsize 
# 1210
__newlen, streamsize __oldlen) 
# 1211
{ 
# 1212
const size_t __plen = static_cast< size_t>(__newlen - __oldlen); 
# 1213
const ios_base::fmtflags __adjust = ((__io.flags()) & ios_base::adjustfield); 
# 1216
if (__adjust == ios_base::left) 
# 1217
{ 
# 1218
_Traits::copy(__news, __olds, __oldlen); 
# 1219
_Traits::assign(__news + __oldlen, __plen, __fill); 
# 1220
return; 
# 1221
}  
# 1223
size_t __mod = (0); 
# 1224
if (__adjust == ios_base::internal) 
# 1225
{ 
# 1229
const locale &__loc = __io._M_getloc(); 
# 1230
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1232
if (((__ctype.widen('-')) == (__olds[0])) || ((__ctype.widen('+')) == (__olds[0]))) 
# 1234
{ 
# 1235
(__news[0]) = (__olds[0]); 
# 1236
__mod = (1); 
# 1237
++__news; 
# 1238
} else { 
# 1239
if (((__ctype.widen('0')) == (__olds[0])) && (__oldlen > (1)) && (((__ctype.widen('x')) == (__olds[1])) || ((__ctype.widen('X')) == (__olds[1])))) 
# 1243
{ 
# 1244
(__news[0]) = (__olds[0]); 
# 1245
(__news[1]) = (__olds[1]); 
# 1246
__mod = (2); 
# 1247
__news += 2; 
# 1248
}  }  
# 1250
}  
# 1251
_Traits::assign(__news, __plen, __fill); 
# 1252
_Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod); 
# 1253
} 
# 1255
template< class _CharT> _CharT *
# 1257
__add_grouping(_CharT *__s, _CharT __sep, const char *
# 1258
__gbeg, size_t __gsize, const _CharT *
# 1259
__first, const _CharT *__last) 
# 1260
{ 
# 1261
size_t __idx = (0); 
# 1262
size_t __ctr = (0); 
# 1264
while (((__last - __first) > (__gbeg[__idx])) && ((static_cast< signed char>(__gbeg[__idx])) > 0) && ((__gbeg[__idx]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)) 
# 1267
{ 
# 1268
__last -= (__gbeg[__idx]); 
# 1269
(__idx < (__gsize - (1))) ? ++__idx : (++__ctr); 
# 1270
}  
# 1272
while (__first != __last) { 
# 1273
(*(__s++)) = (*(__first++)); }  
# 1275
while (__ctr--) 
# 1276
{ 
# 1277
(*(__s++)) = __sep; 
# 1278
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1279
(*(__s++)) = (*(__first++)); }  
# 1280
}  
# 1282
while (__idx--) 
# 1283
{ 
# 1284
(*(__s++)) = __sep; 
# 1285
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1286
(*(__s++)) = (*(__first++)); }  
# 1287
}  
# 1289
return __s; 
# 1290
} 
# 1295
extern template class __cxx11::numpunct< char> ;
# 1296
extern template class __cxx11::numpunct_byname< char> ;
# 1297
extern template class num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
# 1298
extern template class num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
# 1301
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1305
extern template const __cxx11::numpunct< char>  &use_facet< __cxx11::numpunct< char> > (const locale &);
# 1309
extern template const num_put< char, ostreambuf_iterator< char, char_traits< char> > >  &use_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1313
extern template const num_get< char, istreambuf_iterator< char, char_traits< char> > >  &use_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &);
# 1317
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1321
extern template bool has_facet< __cxx11::numpunct< char> > (const locale &) throw();
# 1325
extern template bool has_facet< num_put< char, ostreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1329
extern template bool has_facet< num_get< char, istreambuf_iterator< char, char_traits< char> > > > (const locale &) throw();
# 1334
extern template class __cxx11::numpunct< wchar_t> ;
# 1335
extern template class __cxx11::numpunct_byname< wchar_t> ;
# 1336
extern template class num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1337
extern template class num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > ;
# 1340
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1344
extern template const __cxx11::numpunct< wchar_t>  &use_facet< __cxx11::numpunct< wchar_t> > (const locale &);
# 1348
extern template const num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1352
extern template const num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > >  &use_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &);
# 1356
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1360
extern template bool has_facet< __cxx11::numpunct< wchar_t> > (const locale &) throw();
# 1364
extern template bool has_facet< num_put< wchar_t, ostreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1368
extern template bool has_facet< num_get< wchar_t, istreambuf_iterator< wchar_t, char_traits< wchar_t> > > > (const locale &) throw();
# 1375
}
# 41 "/usr/include/c++/5/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Facet> inline const _Facet &
# 47
__check_facet(const _Facet *__f) 
# 48
{ 
# 49
if (!__f) { 
# 50
__throw_bad_cast(); }  
# 51
return *__f; 
# 52
} 
# 66
template< class _CharT, class _Traits> 
# 67
class basic_ios : public ios_base { 
# 76
public: typedef _CharT char_type; 
# 77
typedef typename _Traits::int_type int_type; 
# 78
typedef typename _Traits::pos_type pos_type; 
# 79
typedef typename _Traits::off_type off_type; 
# 80
typedef _Traits traits_type; 
# 87
typedef ctype< _CharT>  __ctype_type; 
# 89
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 91
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 96
protected: basic_ostream< _CharT, _Traits>  *_M_tie; 
# 97
mutable char_type _M_fill; 
# 98
mutable bool _M_fill_init; 
# 99
basic_streambuf< _CharT, _Traits>  *_M_streambuf; 
# 102
const __ctype_type *_M_ctype; 
# 104
const __num_put_type *_M_num_put; 
# 106
const __num_get_type *_M_num_get; 
# 117
public: explicit operator bool() const 
# 118
{ return !this->fail(); } 
# 125
bool operator!() const 
# 126
{ return this->fail(); } 
# 137
iostate rdstate() const 
# 138
{ return ios_base::_M_streambuf_state; } 
# 148
void clear(iostate __state = goodbit); 
# 157
void setstate(iostate __state) 
# 158
{ this->clear(((this->rdstate()) | __state)); } 
# 164
void _M_setstate(iostate __state) 
# 165
{ 
# 168
((ios_base::_M_streambuf_state) |= __state); 
# 169
if (((this->exceptions()) & __state)) { 
# 170
throw; }  
# 171
} 
# 180
bool good() const 
# 181
{ return (this->rdstate()) == 0; } 
# 190
bool eof() const 
# 191
{ return (((this->rdstate()) & eofbit)) != 0; } 
# 201
bool fail() const 
# 202
{ return (((this->rdstate()) & ((badbit | failbit)))) != 0; } 
# 211
bool bad() const 
# 212
{ return (((this->rdstate()) & badbit)) != 0; } 
# 222
iostate exceptions() const 
# 223
{ return ios_base::_M_exception; } 
# 257
void exceptions(iostate __except) 
# 258
{ 
# 259
(ios_base::_M_exception) = __except; 
# 260
this->clear(ios_base::_M_streambuf_state); 
# 261
} 
# 270
explicit basic_ios(basic_streambuf< _CharT, _Traits>  *__sb) : ios_base(), _M_tie((0)), _M_fill(), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 273
{ this->init(__sb); } 
# 282
virtual ~basic_ios() { } 
# 295
basic_ostream< _CharT, _Traits>  *tie() const 
# 296
{ return _M_tie; } 
# 307
basic_ostream< _CharT, _Traits>  *tie(basic_ostream< _CharT, _Traits>  *__tiestr) 
# 308
{ 
# 309
basic_ostream< _CharT, _Traits>  *__old = _M_tie; 
# 310
(_M_tie) = __tiestr; 
# 311
return __old; 
# 312
} 
# 321
basic_streambuf< _CharT, _Traits>  *rdbuf() const 
# 322
{ return _M_streambuf; } 
# 347
basic_streambuf< _CharT, _Traits>  *rdbuf(basic_streambuf< _CharT, _Traits>  * __sb); 
# 361
basic_ios &copyfmt(const basic_ios & __rhs); 
# 370
char_type fill() const 
# 371
{ 
# 372
if (!(_M_fill_init)) 
# 373
{ 
# 374
(_M_fill) = this->widen(' '); 
# 375
(_M_fill_init) = true; 
# 376
}  
# 377
return _M_fill; 
# 378
} 
# 390
char_type fill(char_type __ch) 
# 391
{ 
# 392
char_type __old = (this->fill()); 
# 393
(_M_fill) = __ch; 
# 394
return __old; 
# 395
} 
# 410
locale imbue(const locale & __loc); 
# 430
char narrow(char_type __c, char __dfault) const 
# 431
{ return (__check_facet(_M_ctype).narrow(__c, __dfault)); } 
# 449
char_type widen(char __c) const 
# 450
{ return (__check_facet(_M_ctype).widen(__c)); } 
# 460
protected: basic_ios() : ios_base(), _M_tie((0)), _M_fill(char_type()), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 463
{ } 
# 472
void init(basic_streambuf< _CharT, _Traits>  * __sb); 
# 475
basic_ios(const basic_ios &) = delete;
# 476
basic_ios &operator=(const basic_ios &) = delete;
# 479
void move(basic_ios &__rhs) 
# 480
{ 
# 481
this->ios_base::_M_move(__rhs); 
# 482
_M_cache_locale(ios_base::_M_ios_locale); 
# 483
(this->tie((__rhs.tie(nullptr)))); 
# 484
(_M_fill) = (__rhs._M_fill); 
# 485
(_M_fill_init) = (__rhs._M_fill_init); 
# 486
(_M_streambuf) = nullptr; 
# 487
} 
# 490
void move(basic_ios &&__rhs) 
# 491
{ (this->move(__rhs)); } 
# 494
void swap(basic_ios &__rhs) noexcept 
# 495
{ 
# 496
this->ios_base::_M_swap(__rhs); 
# 497
_M_cache_locale(ios_base::_M_ios_locale); 
# 498
__rhs._M_cache_locale(__rhs.ios_base::_M_ios_locale); 
# 499
std::swap(_M_tie, __rhs._M_tie); 
# 500
std::swap(_M_fill, __rhs._M_fill); 
# 501
std::swap(_M_fill_init, __rhs._M_fill_init); 
# 502
} 
# 505
void set_rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 506
{ (_M_streambuf) = __sb; } 
# 510
void _M_cache_locale(const locale & __loc); 
# 511
}; 
# 514
}
# 35 "/usr/include/c++/5/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
template< class _CharT, class _Traits> void 
# 41
basic_ios< _CharT, _Traits> ::clear(iostate __state) 
# 42
{ 
# 43
if ((this->rdbuf())) { 
# 44
(ios_base::_M_streambuf_state) = __state; } else { 
# 46
(ios_base::_M_streambuf_state) = ((__state | badbit)); }  
# 47
if (((this->exceptions()) & (this->rdstate()))) { 
# 48
__throw_ios_failure("basic_ios::clear"); }  
# 49
} 
# 51
template< class _CharT, class _Traits> basic_streambuf< _CharT, _Traits>  *
# 53
basic_ios< _CharT, _Traits> ::rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 54
{ 
# 55
basic_streambuf< _CharT, _Traits>  *__old = _M_streambuf; 
# 56
(_M_streambuf) = __sb; 
# 57
this->clear(); 
# 58
return __old; 
# 59
} 
# 61
template< class _CharT, class _Traits> basic_ios< _CharT, _Traits>  &
# 63
basic_ios< _CharT, _Traits> ::copyfmt(const basic_ios &__rhs) 
# 64
{ 
# 67
if (this != (&__rhs)) 
# 68
{ 
# 73
_Words *__words = ((__rhs.ios_base::_M_word_size) <= (_S_local_word_size)) ? ios_base::_M_local_word : (new _Words [__rhs.ios_base::_M_word_size]); 
# 77
_Callback_list *__cb = __rhs.ios_base::_M_callbacks; 
# 78
if (__cb) { 
# 79
__cb->_M_add_reference(); }  
# 80
this->ios_base::_M_call_callbacks(erase_event); 
# 81
if ((ios_base::_M_word) != (ios_base::_M_local_word)) 
# 82
{ 
# 83
delete [] (ios_base::_M_word); 
# 84
(ios_base::_M_word) = (0); 
# 85
}  
# 86
this->ios_base::_M_dispose_callbacks(); 
# 89
(ios_base::_M_callbacks) = __cb; 
# 90
for (int __i = 0; __i < (__rhs.ios_base::_M_word_size); ++__i) { 
# 91
(__words[__i]) = ((__rhs.ios_base::_M_word)[__i]); }  
# 92
(ios_base::_M_word) = __words; 
# 93
(ios_base::_M_word_size) = (__rhs.ios_base::_M_word_size); 
# 95
this->flags(__rhs.flags()); 
# 96
this->width(__rhs.width()); 
# 97
this->precision(__rhs.precision()); 
# 98
(this->tie((__rhs.tie()))); 
# 99
(this->fill((__rhs.fill()))); 
# 100
((ios_base::_M_ios_locale) = (__rhs.getloc())); 
# 101
_M_cache_locale(ios_base::_M_ios_locale); 
# 103
this->ios_base::_M_call_callbacks(copyfmt_event); 
# 106
this->exceptions(__rhs.exceptions()); 
# 107
}  
# 108
return *this; 
# 109
} 
# 112
template< class _CharT, class _Traits> locale 
# 114
basic_ios< _CharT, _Traits> ::imbue(const locale &__loc) 
# 115
{ 
# 116
locale __old(this->getloc()); 
# 117
this->ios_base::imbue(__loc); 
# 118
_M_cache_locale(__loc); 
# 119
if ((this->rdbuf()) != 0) { 
# 120
((this->rdbuf())->pubimbue(__loc)); }  
# 121
return __old; 
# 122
} 
# 124
template< class _CharT, class _Traits> void 
# 126
basic_ios< _CharT, _Traits> ::init(basic_streambuf< _CharT, _Traits>  *__sb) 
# 127
{ 
# 129
this->ios_base::_M_init(); 
# 132
_M_cache_locale(ios_base::_M_ios_locale); 
# 146
(_M_fill) = _CharT(); 
# 147
(_M_fill_init) = false; 
# 149
(_M_tie) = 0; 
# 150
(ios_base::_M_exception) = goodbit; 
# 151
(_M_streambuf) = __sb; 
# 152
(ios_base::_M_streambuf_state) = ((__sb) ? goodbit : badbit); 
# 153
} 
# 155
template< class _CharT, class _Traits> void 
# 157
basic_ios< _CharT, _Traits> ::_M_cache_locale(const locale &__loc) 
# 158
{ 
# 159
if (__builtin_expect(has_facet< __ctype_type> (__loc), true)) { 
# 160
(_M_ctype) = (&use_facet< __ctype_type> (__loc)); } else { 
# 162
(_M_ctype) = 0; }  
# 164
if (__builtin_expect(has_facet< __num_put_type> (__loc), true)) { 
# 165
(_M_num_put) = (&use_facet< __num_put_type> (__loc)); } else { 
# 167
(_M_num_put) = 0; }  
# 169
if (__builtin_expect(has_facet< __num_get_type> (__loc), true)) { 
# 170
(_M_num_get) = (&use_facet< __num_get_type> (__loc)); } else { 
# 172
(_M_num_get) = 0; }  
# 173
} 
# 178
extern template class basic_ios< char, char_traits< char> > ;
# 181
extern template class basic_ios< wchar_t, char_traits< wchar_t> > ;
# 186
}
# 41 "/usr/include/c++/5/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
template< class _CharT, class _Traits> 
# 58
class basic_ostream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef ::std::basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_ostream __ostream_type; 
# 73
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 84
explicit basic_ostream(__streambuf_type *__sb) 
# 85
{ (this->init(__sb)); } 
# 93
virtual ~basic_ostream() { } 
# 96
class sentry; 
# 97
friend class sentry; 
# 108
__ostream_type &operator<<(__ostream_type &(*__pf)(__ostream_type &)) 
# 109
{ 
# 113
return __pf(*this); 
# 114
} 
# 117
__ostream_type &operator<<(__ios_type &(*__pf)(__ios_type &)) 
# 118
{ 
# 122
__pf(*this); 
# 123
return *this; 
# 124
} 
# 127
__ostream_type &operator<<(::std::ios_base &(*__pf)(::std::ios_base &)) 
# 128
{ 
# 132
__pf(*this); 
# 133
return *this; 
# 134
} 
# 166
__ostream_type &operator<<(long __n) 
# 167
{ return _M_insert(__n); } 
# 170
__ostream_type &operator<<(unsigned long __n) 
# 171
{ return _M_insert(__n); } 
# 174
__ostream_type &operator<<(bool __n) 
# 175
{ return _M_insert(__n); } 
# 178
__ostream_type &operator<<(short __n); 
# 181
__ostream_type &operator<<(unsigned short __n) 
# 182
{ 
# 185
return _M_insert(static_cast< unsigned long>(__n)); 
# 186
} 
# 189
__ostream_type &operator<<(int __n); 
# 192
__ostream_type &operator<<(unsigned __n) 
# 193
{ 
# 196
return _M_insert(static_cast< unsigned long>(__n)); 
# 197
} 
# 201
__ostream_type &operator<<(long long __n) 
# 202
{ return _M_insert(__n); } 
# 205
__ostream_type &operator<<(unsigned long long __n) 
# 206
{ return _M_insert(__n); } 
# 220
__ostream_type &operator<<(double __f) 
# 221
{ return _M_insert(__f); } 
# 224
__ostream_type &operator<<(float __f) 
# 225
{ 
# 228
return _M_insert(static_cast< double>(__f)); 
# 229
} 
# 232
__ostream_type &operator<<(long double __f) 
# 233
{ return _M_insert(__f); } 
# 245
__ostream_type &operator<<(const void *__p) 
# 246
{ return _M_insert(__p); } 
# 270
__ostream_type &operator<<(__streambuf_type * __sb); 
# 303
__ostream_type &put(char_type __c); 
# 311
void _M_write(const char_type *__s, ::std::streamsize __n) 
# 312
{ 
# 313
const ::std::streamsize __put = ((this->rdbuf())->sputn(__s, __n)); 
# 314
if (__put != __n) { 
# 315
(this->setstate(ios_base::badbit)); }  
# 316
} 
# 335
__ostream_type &write(const char_type * __s, ::std::streamsize __n); 
# 348
__ostream_type &flush(); 
# 358
pos_type tellp(); 
# 369
__ostream_type &seekp(pos_type); 
# 381
__ostream_type &seekp(off_type, ::std::ios_base::seekdir); 
# 384
protected: basic_ostream() 
# 385
{ (this->init(0)); } 
# 389
basic_ostream(basic_iostream< _CharT, _Traits>  &) { } 
# 391
basic_ostream(const basic_ostream &) = delete;
# 393
basic_ostream(basic_ostream &&__rhs) : __ios_type() 
# 395
{ __ios_type::move(__rhs); } 
# 399
basic_ostream &operator=(const basic_ostream &) = delete;
# 402
basic_ostream &operator=(basic_ostream &&__rhs) 
# 403
{ 
# 404
swap(__rhs); 
# 405
return *this; 
# 406
} 
# 409
void swap(basic_ostream &__rhs) 
# 410
{ __ios_type::swap(__rhs); } 
# 413
template< class _ValueT> __ostream_type &_M_insert(_ValueT __v); 
# 416
}; 
# 425
template< class _CharT, class _Traits> 
# 426
class basic_ostream< _CharT, _Traits> ::sentry { 
# 429
bool _M_ok; 
# 430
basic_ostream &_M_os; 
# 445
public: explicit sentry(basic_ostream & __os); 
# 454
~sentry() 
# 455
{ 
# 457
if (((bool)(((_M_os).flags()) & ios_base::unitbuf)) && (!uncaught_exception())) 
# 458
{ 
# 460
if (((_M_os).rdbuf()) && ((((_M_os).rdbuf())->pubsync()) == (-1))) { 
# 461
((_M_os).setstate(ios_base::badbit)); }  
# 462
}  
# 463
} 
# 475
explicit operator bool() const 
# 476
{ return _M_ok; } 
# 477
}; 
# 495
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 497
operator<<(basic_ostream< _CharT, _Traits>  &__out, _CharT __c) 
# 498
{ return __ostream_insert(__out, &__c, 1); } 
# 500
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 502
operator<<(basic_ostream< _CharT, _Traits>  &__out, char __c) 
# 503
{ return __out << (__out.widen(__c)); } 
# 506
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 508
operator<<(basic_ostream< char, _Traits>  &__out, char __c) 
# 509
{ return __ostream_insert(__out, &__c, 1); } 
# 512
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 514
operator<<(basic_ostream< char, _Traits>  &__out, signed char __c) 
# 515
{ return __out << (static_cast< char>(__c)); } 
# 517
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 519
operator<<(basic_ostream< char, _Traits>  &__out, unsigned char __c) 
# 520
{ return __out << (static_cast< char>(__c)); } 
# 537
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 539
operator<<(basic_ostream< _CharT, _Traits>  &__out, const _CharT *__s) 
# 540
{ 
# 541
if (!__s) { 
# 542
(__out.setstate(ios_base::badbit)); } else { 
# 544
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 546
return __out; 
# 547
} 
# 549
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __out, const char * __s); 
# 554
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 556
operator<<(basic_ostream< char, _Traits>  &__out, const char *__s) 
# 557
{ 
# 558
if (!__s) { 
# 559
(__out.setstate(ios_base::badbit)); } else { 
# 561
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 563
return __out; 
# 564
} 
# 567
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 569
operator<<(basic_ostream< char, _Traits>  &__out, const signed char *__s) 
# 570
{ return __out << (reinterpret_cast< const char *>(__s)); } 
# 572
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 574
operator<<(basic_ostream< char, _Traits>  &__out, const unsigned char *__s) 
# 575
{ return __out << (reinterpret_cast< const char *>(__s)); } 
# 588
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 590
endl(basic_ostream< _CharT, _Traits>  &__os) 
# 591
{ return flush((__os.put((__os.widen('\n'))))); } 
# 600
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 602
ends(basic_ostream< _CharT, _Traits>  &__os) 
# 603
{ return (__os.put(_CharT())); } 
# 610
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 612
flush(basic_ostream< _CharT, _Traits>  &__os) 
# 613
{ return (__os.flush()); } 
# 626
template< class _CharT, class _Traits, class _Tp> inline basic_ostream< _CharT, _Traits>  &
# 628
operator<<(basic_ostream< _CharT, _Traits>  &&__os, const _Tp &__x) 
# 629
{ 
# 630
__os << __x; 
# 631
return __os; 
# 632
} 
# 636
}
# 41 "/usr/include/c++/5/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_ostream< _CharT, _Traits> ::sentry::sentry(basic_ostream &__os) : _M_ok(false), _M_os(__os) 
# 49
{ 
# 51
if ((__os.tie()) && (__os.good())) { 
# 52
((__os.tie())->flush()); }  
# 54
if ((__os.good())) { 
# 55
(_M_ok) = true; } else { 
# 57
(__os.setstate(ios_base::failbit)); }  
# 58
} 
# 60
template< class _CharT, class _Traits> 
# 61
template< class _ValueT> basic_ostream< _CharT, _Traits>  &
# 64
basic_ostream< _CharT, _Traits> ::_M_insert(_ValueT __v) 
# 65
{ 
# 66
sentry __cerb(*this); 
# 67
if (__cerb) 
# 68
{ 
# 69
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 70
try 
# 71
{ 
# 72
const __num_put_type &__np = __check_facet((this->_M_num_put)); 
# 73
if (((__np.put(*this, *this, (this->fill()), __v)).failed())) { 
# 74
(__err |= ::std::ios_base::badbit); }  
# 75
} 
# 76
catch (::__cxxabiv1::__forced_unwind &) 
# 77
{ 
# 78
(this->_M_setstate(ios_base::badbit)); 
# 79
throw; 
# 80
} 
# 81
catch (...) 
# 82
{ (this->_M_setstate(ios_base::badbit)); }  
# 83
if (__err) { 
# 84
(this->setstate(__err)); }  
# 85
}  
# 86
return *this; 
# 87
} 
# 89
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 92
basic_ostream< _CharT, _Traits> ::operator<<(short __n) 
# 93
{ 
# 96
const ::std::ios_base::fmtflags __fmt = (this->flags()) & ios_base::basefield; 
# 97
if ((__fmt == ::std::ios_base::oct) || (__fmt == ::std::ios_base::hex)) { 
# 98
return _M_insert(static_cast< long>(static_cast< unsigned short>(__n))); } else { 
# 100
return _M_insert(static_cast< long>(__n)); }  
# 101
} 
# 103
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 106
basic_ostream< _CharT, _Traits> ::operator<<(int __n) 
# 107
{ 
# 110
const ::std::ios_base::fmtflags __fmt = (this->flags()) & ios_base::basefield; 
# 111
if ((__fmt == ::std::ios_base::oct) || (__fmt == ::std::ios_base::hex)) { 
# 112
return _M_insert(static_cast< long>(static_cast< unsigned>(__n))); } else { 
# 114
return _M_insert(static_cast< long>(__n)); }  
# 115
} 
# 117
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 120
basic_ostream< _CharT, _Traits> ::operator<<(__streambuf_type *__sbin) 
# 121
{ 
# 122
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 123
sentry __cerb(*this); 
# 124
if (__cerb && __sbin) 
# 125
{ 
# 126
try 
# 127
{ 
# 128
if (!__copy_streambufs(__sbin, (this->rdbuf()))) { 
# 129
(__err |= ::std::ios_base::failbit); }  
# 130
} 
# 131
catch (::__cxxabiv1::__forced_unwind &) 
# 132
{ 
# 133
(this->_M_setstate(ios_base::badbit)); 
# 134
throw; 
# 135
} 
# 136
catch (...) 
# 137
{ (this->_M_setstate(ios_base::failbit)); }  
# 138
} else { 
# 139
if (!__sbin) { 
# 140
(__err |= ::std::ios_base::badbit); }  }  
# 141
if (__err) { 
# 142
(this->setstate(__err)); }  
# 143
return *this; 
# 144
} 
# 146
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 149
basic_ostream< _CharT, _Traits> ::put(char_type __c) 
# 150
{ 
# 157
sentry __cerb(*this); 
# 158
if (__cerb) 
# 159
{ 
# 160
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 161
try 
# 162
{ 
# 163
const int_type __put = ((this->rdbuf())->sputc(__c)); 
# 164
if (traits_type::eq_int_type(__put, traits_type::eof())) { 
# 165
(__err |= ::std::ios_base::badbit); }  
# 166
} 
# 167
catch (::__cxxabiv1::__forced_unwind &) 
# 168
{ 
# 169
(this->_M_setstate(ios_base::badbit)); 
# 170
throw; 
# 171
} 
# 172
catch (...) 
# 173
{ (this->_M_setstate(ios_base::badbit)); }  
# 174
if (__err) { 
# 175
(this->setstate(__err)); }  
# 176
}  
# 177
return *this; 
# 178
} 
# 180
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 183
basic_ostream< _CharT, _Traits> ::write(const _CharT *__s, ::std::streamsize __n) 
# 184
{ 
# 192
sentry __cerb(*this); 
# 193
if (__cerb) 
# 194
{ 
# 195
try 
# 196
{ _M_write(__s, __n); } 
# 197
catch (::__cxxabiv1::__forced_unwind &) 
# 198
{ 
# 199
(this->_M_setstate(ios_base::badbit)); 
# 200
throw; 
# 201
} 
# 202
catch (...) 
# 203
{ (this->_M_setstate(ios_base::badbit)); }  
# 204
}  
# 205
return *this; 
# 206
} 
# 208
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 211
basic_ostream< _CharT, _Traits> ::flush() 
# 212
{ 
# 216
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 217
try 
# 218
{ 
# 219
if ((this->rdbuf()) && (((this->rdbuf())->pubsync()) == (-1))) { 
# 220
(__err |= ::std::ios_base::badbit); }  
# 221
} 
# 222
catch (::__cxxabiv1::__forced_unwind &) 
# 223
{ 
# 224
(this->_M_setstate(ios_base::badbit)); 
# 225
throw; 
# 226
} 
# 227
catch (...) 
# 228
{ (this->_M_setstate(ios_base::badbit)); }  
# 229
if (__err) { 
# 230
(this->setstate(__err)); }  
# 231
return *this; 
# 232
} 
# 234
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::pos_type 
# 237
basic_ostream< _CharT, _Traits> ::tellp() 
# 238
{ 
# 239
pos_type __ret = ((pos_type)(-1)); 
# 240
try 
# 241
{ 
# 242
if (!(this->fail())) { 
# 243
__ret = ((this->rdbuf())->pubseekoff(0, ios_base::cur, ios_base::out)); }  
# 244
} 
# 245
catch (::__cxxabiv1::__forced_unwind &) 
# 246
{ 
# 247
(this->_M_setstate(ios_base::badbit)); 
# 248
throw; 
# 249
} 
# 250
catch (...) 
# 251
{ (this->_M_setstate(ios_base::badbit)); }  
# 252
return __ret; 
# 253
} 
# 255
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 258
basic_ostream< _CharT, _Traits> ::seekp(pos_type __pos) 
# 259
{ 
# 260
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 261
try 
# 262
{ 
# 263
if (!(this->fail())) 
# 264
{ 
# 267
const pos_type __p = ((this->rdbuf())->pubseekpos(__pos, ios_base::out)); 
# 271
if (__p == ((pos_type)((off_type)(-1)))) { 
# 272
(__err |= ::std::ios_base::failbit); }  
# 273
}  
# 274
} 
# 275
catch (::__cxxabiv1::__forced_unwind &) 
# 276
{ 
# 277
(this->_M_setstate(ios_base::badbit)); 
# 278
throw; 
# 279
} 
# 280
catch (...) 
# 281
{ (this->_M_setstate(ios_base::badbit)); }  
# 282
if (__err) { 
# 283
(this->setstate(__err)); }  
# 284
return *this; 
# 285
} 
# 287
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 290
basic_ostream< _CharT, _Traits> ::seekp(off_type __off, ::std::ios_base::seekdir __dir) 
# 291
{ 
# 292
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 293
try 
# 294
{ 
# 295
if (!(this->fail())) 
# 296
{ 
# 299
const pos_type __p = ((this->rdbuf())->pubseekoff(__off, __dir, ios_base::out)); 
# 303
if (__p == ((pos_type)((off_type)(-1)))) { 
# 304
(__err |= ::std::ios_base::failbit); }  
# 305
}  
# 306
} 
# 307
catch (::__cxxabiv1::__forced_unwind &) 
# 308
{ 
# 309
(this->_M_setstate(ios_base::badbit)); 
# 310
throw; 
# 311
} 
# 312
catch (...) 
# 313
{ (this->_M_setstate(ios_base::badbit)); }  
# 314
if (__err) { 
# 315
(this->setstate(__err)); }  
# 316
return *this; 
# 317
} 
# 319
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 321
operator<<(basic_ostream< _CharT, _Traits>  &__out, const char *__s) 
# 322
{ 
# 323
if (!__s) { 
# 324
(__out.setstate(ios_base::badbit)); } else 
# 326
{ 
# 329
const size_t __clen = char_traits< char> ::length(__s); 
# 330
try 
# 331
{ 
# 332
struct __ptr_guard { 
# 334
_CharT *__p; 
# 335
__ptr_guard(_CharT *__ip) : __p(__ip) { } 
# 336
~__ptr_guard() { delete [] (__p); } 
# 337
_CharT *__get() { return __p; } 
# 338
} __pg(new _CharT [__clen]); 
# 340
_CharT *__ws = __pg.__get(); 
# 341
for (size_t __i = (0); __i < __clen; ++__i) { 
# 342
(__ws[__i]) = (__out.widen(__s[__i])); }  
# 343
__ostream_insert(__out, __ws, __clen); 
# 344
} 
# 345
catch (__cxxabiv1::__forced_unwind &) 
# 346
{ 
# 347
(__out._M_setstate(ios_base::badbit)); 
# 348
throw; 
# 349
} 
# 350
catch (...) 
# 351
{ (__out._M_setstate(ios_base::badbit)); }  
# 352
}  
# 353
return __out; 
# 354
} 
# 359
extern template class basic_ostream< char, char_traits< char> > ;
# 360
extern template basic_ostream< char, char_traits< char> >  &endl(basic_ostream< char, char_traits< char> >  & __os);
# 361
extern template basic_ostream< char, char_traits< char> >  &ends(basic_ostream< char, char_traits< char> >  & __os);
# 362
extern template basic_ostream< char, char_traits< char> >  &flush(basic_ostream< char, char_traits< char> >  & __os);
# 363
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, char __c);
# 364
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, unsigned char __c);
# 365
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, signed char __c);
# 366
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const char * __s);
# 367
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const unsigned char * __s);
# 368
extern template basic_ostream< char, char_traits< char> >  &operator<<(basic_ostream< char, char_traits< char> >  & __out, const signed char * __s);
# 370
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long __v);
# 371
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long __v);
# 372
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(bool __v);
# 374
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long long __v);
# 375
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(unsigned long long __v);
# 377
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(double __v);
# 378
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(long double __v);
# 379
extern template basic_ostream< char, char_traits< char> > ::__ostream_type &basic_ostream< char, char_traits< char> > ::_M_insert(const void * __v);
# 382
extern template class basic_ostream< wchar_t, char_traits< wchar_t> > ;
# 383
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &endl(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 384
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &ends(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 385
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &flush(basic_ostream< wchar_t, char_traits< wchar_t> >  & __os);
# 386
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, wchar_t __c);
# 387
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, char __c);
# 388
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, const wchar_t * __s);
# 389
extern template basic_ostream< wchar_t, char_traits< wchar_t> >  &operator<<(basic_ostream< wchar_t, char_traits< wchar_t> >  & __out, const char * __s);
# 391
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long __v);
# 392
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long __v);
# 393
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(bool __v);
# 395
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long long __v);
# 396
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(unsigned long long __v);
# 398
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(double __v);
# 399
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(long double __v);
# 400
extern template basic_ostream< wchar_t, char_traits< wchar_t> > ::__ostream_type &basic_ostream< wchar_t, char_traits< wchar_t> > ::_M_insert(const void * __v);
# 405
}
# 41 "/usr/include/c++/5/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
template< class _CharT, class _Traits> 
# 58
class basic_istream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef ::std::basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_istream __istream_type; 
# 73
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 82
protected: ::std::streamsize _M_gcount; 
# 93
public: explicit basic_istream(__streambuf_type *__sb) : _M_gcount(((::std::streamsize)0)) 
# 95
{ (this->init(__sb)); } 
# 103
virtual ~basic_istream() 
# 104
{ (_M_gcount) = ((::std::streamsize)0); } 
# 107
class sentry; 
# 108
friend class sentry; 
# 120
__istream_type &operator>>(__istream_type &(*__pf)(__istream_type &)) 
# 121
{ return __pf(*this); } 
# 124
__istream_type &operator>>(__ios_type &(*__pf)(__ios_type &)) 
# 125
{ 
# 126
__pf(*this); 
# 127
return *this; 
# 128
} 
# 131
__istream_type &operator>>(::std::ios_base &(*__pf)(::std::ios_base &)) 
# 132
{ 
# 133
__pf(*this); 
# 134
return *this; 
# 135
} 
# 168
__istream_type &operator>>(bool &__n) 
# 169
{ return _M_extract(__n); } 
# 172
__istream_type &operator>>(short & __n); 
# 175
__istream_type &operator>>(unsigned short &__n) 
# 176
{ return _M_extract(__n); } 
# 179
__istream_type &operator>>(int & __n); 
# 182
__istream_type &operator>>(unsigned &__n) 
# 183
{ return _M_extract(__n); } 
# 186
__istream_type &operator>>(long &__n) 
# 187
{ return _M_extract(__n); } 
# 190
__istream_type &operator>>(unsigned long &__n) 
# 191
{ return _M_extract(__n); } 
# 195
__istream_type &operator>>(long long &__n) 
# 196
{ return _M_extract(__n); } 
# 199
__istream_type &operator>>(unsigned long long &__n) 
# 200
{ return _M_extract(__n); } 
# 214
__istream_type &operator>>(float &__f) 
# 215
{ return _M_extract(__f); } 
# 218
__istream_type &operator>>(double &__f) 
# 219
{ return _M_extract(__f); } 
# 222
__istream_type &operator>>(long double &__f) 
# 223
{ return _M_extract(__f); } 
# 235
__istream_type &operator>>(void *&__p) 
# 236
{ return _M_extract(__p); } 
# 259
__istream_type &operator>>(__streambuf_type * __sb); 
# 269
::std::streamsize gcount() const 
# 270
{ return _M_gcount; } 
# 302
int_type get(); 
# 316
__istream_type &get(char_type & __c); 
# 343
__istream_type &get(char_type * __s, ::std::streamsize __n, char_type __delim); 
# 354
__istream_type &get(char_type *__s, ::std::streamsize __n) 
# 355
{ return (this->get(__s, __n, (this->widen('\n')))); } 
# 377
__istream_type &get(__streambuf_type & __sb, char_type __delim); 
# 387
__istream_type &get(__streambuf_type &__sb) 
# 388
{ return (this->get(__sb, (this->widen('\n')))); } 
# 416
__istream_type &getline(char_type * __s, ::std::streamsize __n, char_type __delim); 
# 427
__istream_type &getline(char_type *__s, ::std::streamsize __n) 
# 428
{ return (this->getline(__s, __n, (this->widen('\n')))); } 
# 451
__istream_type &ignore(::std::streamsize __n, int_type __delim); 
# 454
__istream_type &ignore(::std::streamsize __n); 
# 457
__istream_type &ignore(); 
# 468
int_type peek(); 
# 486
__istream_type &read(char_type * __s, ::std::streamsize __n); 
# 505
::std::streamsize readsome(char_type * __s, ::std::streamsize __n); 
# 522
__istream_type &putback(char_type __c); 
# 538
__istream_type &unget(); 
# 556
int sync(); 
# 571
pos_type tellg(); 
# 586
__istream_type &seekg(pos_type); 
# 602
__istream_type &seekg(off_type, ::std::ios_base::seekdir); 
# 606
protected: basic_istream() : _M_gcount(((::std::streamsize)0)) 
# 608
{ (this->init(0)); } 
# 611
basic_istream(const basic_istream &) = delete;
# 613
basic_istream(basic_istream &&__rhs) : __ios_type(), _M_gcount(__rhs._M_gcount) 
# 615
{ 
# 616
__ios_type::move(__rhs); 
# 617
(__rhs._M_gcount) = (0); 
# 618
} 
# 622
basic_istream &operator=(const basic_istream &) = delete;
# 625
basic_istream &operator=(basic_istream &&__rhs) 
# 626
{ 
# 627
swap(__rhs); 
# 628
return *this; 
# 629
} 
# 632
void swap(basic_istream &__rhs) 
# 633
{ 
# 634
__ios_type::swap(__rhs); 
# 635
std::swap(_M_gcount, __rhs._M_gcount); 
# 636
} 
# 639
template< class _ValueT> __istream_type &_M_extract(_ValueT & __v); 
# 642
}; 
# 648
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 653
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize __n); 
# 658
template<> basic_istream< char, char_traits< char> >  &basic_istream< char, char_traits< char> > ::ignore(streamsize __n, int_type __delim); 
# 664
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 669
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize __n); 
# 674
template<> basic_istream< wchar_t, char_traits< wchar_t> >  &basic_istream< wchar_t, char_traits< wchar_t> > ::ignore(streamsize __n, int_type __delim); 
# 685
template< class _CharT, class _Traits> 
# 686
class basic_istream< _CharT, _Traits> ::sentry { 
# 689
bool _M_ok; 
# 693
public: typedef _Traits traits_type; 
# 694
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 695
typedef basic_istream __istream_type; 
# 696
typedef typename ::std::basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type; 
# 697
typedef typename _Traits::int_type __int_type; 
# 722
explicit sentry(basic_istream & __is, bool __noskipws = false); 
# 734
explicit operator bool() const 
# 735
{ return _M_ok; } 
# 736
}; 
# 750
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT & __c); 
# 754
template< class _Traits> inline basic_istream< char, _Traits>  &
# 756
operator>>(basic_istream< char, _Traits>  &__in, unsigned char &__c) 
# 757
{ return __in >> (reinterpret_cast< char &>(__c)); } 
# 759
template< class _Traits> inline basic_istream< char, _Traits>  &
# 761
operator>>(basic_istream< char, _Traits>  &__in, signed char &__c) 
# 762
{ return __in >> (reinterpret_cast< char &>(__c)); } 
# 792
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT * __s); 
# 799
template<> basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, char * __s); 
# 801
template< class _Traits> inline basic_istream< char, _Traits>  &
# 803
operator>>(basic_istream< char, _Traits>  &__in, unsigned char *__s) 
# 804
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 806
template< class _Traits> inline basic_istream< char, _Traits>  &
# 808
operator>>(basic_istream< char, _Traits>  &__in, signed char *__s) 
# 809
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 823
template< class _CharT, class _Traits> 
# 824
class basic_iostream : public basic_istream< _CharT, _Traits> , public basic_ostream< _CharT, _Traits>  { 
# 832
public: typedef _CharT char_type; 
# 833
typedef typename _Traits::int_type int_type; 
# 834
typedef typename _Traits::pos_type pos_type; 
# 835
typedef typename _Traits::off_type off_type; 
# 836
typedef _Traits traits_type; 
# 839
typedef ::std::basic_istream< _CharT, _Traits>  __istream_type; 
# 840
typedef ::std::basic_ostream< _CharT, _Traits>  __ostream_type; 
# 849
explicit basic_iostream(basic_streambuf< _CharT, _Traits>  *__sb) : __istream_type(__sb), __ostream_type(__sb) 
# 850
{ } 
# 856
virtual ~basic_iostream() { } 
# 859
protected: basic_iostream() : __istream_type(), __ostream_type() 
# 860
{ } 
# 863
basic_iostream(const basic_iostream &) = delete;
# 865
basic_iostream(basic_iostream &&__rhs) : __istream_type(::std::move(__rhs)), __ostream_type(*this) 
# 867
{ } 
# 871
basic_iostream &operator=(const basic_iostream &) = delete;
# 874
basic_iostream &operator=(basic_iostream &&__rhs) 
# 875
{ 
# 876
swap(__rhs); 
# 877
return *this; 
# 878
} 
# 881
void swap(basic_iostream &__rhs) 
# 882
{ __istream_type::swap(__rhs); } 
# 884
}; 
# 906
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &ws(basic_istream< _CharT, _Traits>  & __is); 
# 922
template< class _CharT, class _Traits, class _Tp> inline basic_istream< _CharT, _Traits>  &
# 924
operator>>(basic_istream< _CharT, _Traits>  &&__is, _Tp &__x) 
# 925
{ 
# 926
__is >> __x; 
# 927
return __is; 
# 928
} 
# 932
}
# 41 "/usr/include/c++/5/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_istream< _CharT, _Traits> ::sentry::sentry(basic_istream &__in, bool __noskip) : _M_ok(false) 
# 48
{ 
# 49
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 50
if ((__in.good())) 
# 51
{ 
# 52
if ((__in.tie())) { 
# 53
((__in.tie())->flush()); }  
# 54
if ((!__noskip) && ((bool)((__in.flags()) & ios_base::skipws))) 
# 55
{ 
# 56
const __int_type __eof = traits_type::eof(); 
# 57
__streambuf_type *__sb = (__in.rdbuf()); 
# 58
__int_type __c = (__sb->sgetc()); 
# 60
const __ctype_type &__ct = __check_facet((__in._M_ctype)); 
# 61
while ((!traits_type::eq_int_type(__c, __eof)) && (__ct.is(ctype_base::space, traits_type::to_char_type(__c)))) { 
# 64
__c = (__sb->snextc()); }  
# 69
if (traits_type::eq_int_type(__c, __eof)) { 
# 70
(__err |= ::std::ios_base::eofbit); }  
# 71
}  
# 72
}  
# 74
if ((__in.good()) && (__err == ::std::ios_base::goodbit)) { 
# 75
(_M_ok) = true; } else 
# 77
{ 
# 78
(__err |= ::std::ios_base::failbit); 
# 79
(__in.setstate(__err)); 
# 80
}  
# 81
} 
# 83
template< class _CharT, class _Traits> 
# 84
template< class _ValueT> basic_istream< _CharT, _Traits>  &
# 87
basic_istream< _CharT, _Traits> ::_M_extract(_ValueT &__v) 
# 88
{ 
# 89
sentry __cerb(*this, false); 
# 90
if (__cerb) 
# 91
{ 
# 92
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 93
try 
# 94
{ 
# 95
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 96
(__ng.get(*this, 0, *this, __err, __v)); 
# 97
} 
# 98
catch (::__cxxabiv1::__forced_unwind &) 
# 99
{ 
# 100
(this->_M_setstate(ios_base::badbit)); 
# 101
throw; 
# 102
} 
# 103
catch (...) 
# 104
{ (this->_M_setstate(ios_base::badbit)); }  
# 105
if (__err) { 
# 106
(this->setstate(__err)); }  
# 107
}  
# 108
return *this; 
# 109
} 
# 111
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 114
basic_istream< _CharT, _Traits> ::operator>>(short &__n) 
# 115
{ 
# 118
sentry __cerb(*this, false); 
# 119
if (__cerb) 
# 120
{ 
# 121
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 122
try 
# 123
{ 
# 124
long __l; 
# 125
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 126
(__ng.get(*this, 0, *this, __err, __l)); 
# 130
if (__l < ::__gnu_cxx::__numeric_traits_integer< short> ::__min) 
# 131
{ 
# 132
(__err |= ::std::ios_base::failbit); 
# 133
__n = ::__gnu_cxx::__numeric_traits_integer< short> ::__min; 
# 134
} else { 
# 135
if (__l > ::__gnu_cxx::__numeric_traits_integer< short> ::__max) 
# 136
{ 
# 137
(__err |= ::std::ios_base::failbit); 
# 138
__n = ::__gnu_cxx::__numeric_traits_integer< short> ::__max; 
# 139
} else { 
# 141
__n = ((short)__l); }  }  
# 142
} 
# 143
catch (::__cxxabiv1::__forced_unwind &) 
# 144
{ 
# 145
(this->_M_setstate(ios_base::badbit)); 
# 146
throw; 
# 147
} 
# 148
catch (...) 
# 149
{ (this->_M_setstate(ios_base::badbit)); }  
# 150
if (__err) { 
# 151
(this->setstate(__err)); }  
# 152
}  
# 153
return *this; 
# 154
} 
# 156
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 159
basic_istream< _CharT, _Traits> ::operator>>(int &__n) 
# 160
{ 
# 163
sentry __cerb(*this, false); 
# 164
if (__cerb) 
# 165
{ 
# 166
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 167
try 
# 168
{ 
# 169
long __l; 
# 170
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 171
(__ng.get(*this, 0, *this, __err, __l)); 
# 175
if (__l < ::__gnu_cxx::__numeric_traits_integer< int> ::__min) 
# 176
{ 
# 177
(__err |= ::std::ios_base::failbit); 
# 178
__n = ::__gnu_cxx::__numeric_traits_integer< int> ::__min; 
# 179
} else { 
# 180
if (__l > ::__gnu_cxx::__numeric_traits_integer< int> ::__max) 
# 181
{ 
# 182
(__err |= ::std::ios_base::failbit); 
# 183
__n = ::__gnu_cxx::__numeric_traits_integer< int> ::__max; 
# 184
} else { 
# 186
__n = ((int)__l); }  }  
# 187
} 
# 188
catch (::__cxxabiv1::__forced_unwind &) 
# 189
{ 
# 190
(this->_M_setstate(ios_base::badbit)); 
# 191
throw; 
# 192
} 
# 193
catch (...) 
# 194
{ (this->_M_setstate(ios_base::badbit)); }  
# 195
if (__err) { 
# 196
(this->setstate(__err)); }  
# 197
}  
# 198
return *this; 
# 199
} 
# 201
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 204
basic_istream< _CharT, _Traits> ::operator>>(__streambuf_type *__sbout) 
# 205
{ 
# 206
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 207
sentry __cerb(*this, false); 
# 208
if (__cerb && __sbout) 
# 209
{ 
# 210
try 
# 211
{ 
# 212
bool __ineof; 
# 213
if (!__copy_streambufs_eof((this->rdbuf()), __sbout, __ineof)) { 
# 214
(__err |= ::std::ios_base::failbit); }  
# 215
if (__ineof) { 
# 216
(__err |= ::std::ios_base::eofbit); }  
# 217
} 
# 218
catch (::__cxxabiv1::__forced_unwind &) 
# 219
{ 
# 220
(this->_M_setstate(ios_base::failbit)); 
# 221
throw; 
# 222
} 
# 223
catch (...) 
# 224
{ (this->_M_setstate(ios_base::failbit)); }  
# 225
} else { 
# 226
if (!__sbout) { 
# 227
(__err |= ::std::ios_base::failbit); }  }  
# 228
if (__err) { 
# 229
(this->setstate(__err)); }  
# 230
return *this; 
# 231
} 
# 233
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 236
basic_istream< _CharT, _Traits> ::get() 
# 237
{ 
# 238
const int_type __eof = traits_type::eof(); 
# 239
int_type __c = __eof; 
# 240
(_M_gcount) = (0); 
# 241
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 242
sentry __cerb(*this, true); 
# 243
if (__cerb) 
# 244
{ 
# 245
try 
# 246
{ 
# 247
__c = ((this->rdbuf())->sbumpc()); 
# 249
if (!traits_type::eq_int_type(__c, __eof)) { 
# 250
(_M_gcount) = (1); } else { 
# 252
(__err |= ::std::ios_base::eofbit); }  
# 253
} 
# 254
catch (::__cxxabiv1::__forced_unwind &) 
# 255
{ 
# 256
(this->_M_setstate(ios_base::badbit)); 
# 257
throw; 
# 258
} 
# 259
catch (...) 
# 260
{ (this->_M_setstate(ios_base::badbit)); }  
# 261
}  
# 262
if (!(_M_gcount)) { 
# 263
(__err |= ::std::ios_base::failbit); }  
# 264
if (__err) { 
# 265
(this->setstate(__err)); }  
# 266
return __c; 
# 267
} 
# 269
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 272
basic_istream< _CharT, _Traits> ::get(char_type &__c) 
# 273
{ 
# 274
(_M_gcount) = (0); 
# 275
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 276
sentry __cerb(*this, true); 
# 277
if (__cerb) 
# 278
{ 
# 279
try 
# 280
{ 
# 281
const int_type __cb = ((this->rdbuf())->sbumpc()); 
# 283
if (!traits_type::eq_int_type(__cb, traits_type::eof())) 
# 284
{ 
# 285
(_M_gcount) = (1); 
# 286
__c = traits_type::to_char_type(__cb); 
# 287
} else { 
# 289
(__err |= ::std::ios_base::eofbit); }  
# 290
} 
# 291
catch (::__cxxabiv1::__forced_unwind &) 
# 292
{ 
# 293
(this->_M_setstate(ios_base::badbit)); 
# 294
throw; 
# 295
} 
# 296
catch (...) 
# 297
{ (this->_M_setstate(ios_base::badbit)); }  
# 298
}  
# 299
if (!(_M_gcount)) { 
# 300
(__err |= ::std::ios_base::failbit); }  
# 301
if (__err) { 
# 302
(this->setstate(__err)); }  
# 303
return *this; 
# 304
} 
# 306
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 309
basic_istream< _CharT, _Traits> ::get(char_type *__s, ::std::streamsize __n, char_type __delim) 
# 310
{ 
# 311
(_M_gcount) = (0); 
# 312
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 313
sentry __cerb(*this, true); 
# 314
if (__cerb) 
# 315
{ 
# 316
try 
# 317
{ 
# 318
const int_type __idelim = traits_type::to_int_type(__delim); 
# 319
const int_type __eof = traits_type::eof(); 
# 320
__streambuf_type *__sb = (this->rdbuf()); 
# 321
int_type __c = (__sb->sgetc()); 
# 323
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 326
{ 
# 327
(*(__s++)) = traits_type::to_char_type(__c); 
# 328
++(_M_gcount); 
# 329
__c = (__sb->snextc()); 
# 330
}  
# 331
if (traits_type::eq_int_type(__c, __eof)) { 
# 332
(__err |= ::std::ios_base::eofbit); }  
# 333
} 
# 334
catch (::__cxxabiv1::__forced_unwind &) 
# 335
{ 
# 336
(this->_M_setstate(ios_base::badbit)); 
# 337
throw; 
# 338
} 
# 339
catch (...) 
# 340
{ (this->_M_setstate(ios_base::badbit)); }  
# 341
}  
# 344
if (__n > (0)) { 
# 345
(*__s) = char_type(); }  
# 346
if (!(_M_gcount)) { 
# 347
(__err |= ::std::ios_base::failbit); }  
# 348
if (__err) { 
# 349
(this->setstate(__err)); }  
# 350
return *this; 
# 351
} 
# 353
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 356
basic_istream< _CharT, _Traits> ::get(__streambuf_type &__sb, char_type __delim) 
# 357
{ 
# 358
(_M_gcount) = (0); 
# 359
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 360
sentry __cerb(*this, true); 
# 361
if (__cerb) 
# 362
{ 
# 363
try 
# 364
{ 
# 365
const int_type __idelim = traits_type::to_int_type(__delim); 
# 366
const int_type __eof = traits_type::eof(); 
# 367
__streambuf_type *__this_sb = (this->rdbuf()); 
# 368
int_type __c = (__this_sb->sgetc()); 
# 369
char_type __c2 = traits_type::to_char_type(__c); 
# 371
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim)) && (!traits_type::eq_int_type((__sb.sputc(__c2)), __eof))) 
# 374
{ 
# 375
++(_M_gcount); 
# 376
__c = (__this_sb->snextc()); 
# 377
__c2 = traits_type::to_char_type(__c); 
# 378
}  
# 379
if (traits_type::eq_int_type(__c, __eof)) { 
# 380
(__err |= ::std::ios_base::eofbit); }  
# 381
} 
# 382
catch (::__cxxabiv1::__forced_unwind &) 
# 383
{ 
# 384
(this->_M_setstate(ios_base::badbit)); 
# 385
throw; 
# 386
} 
# 387
catch (...) 
# 388
{ (this->_M_setstate(ios_base::badbit)); }  
# 389
}  
# 390
if (!(_M_gcount)) { 
# 391
(__err |= ::std::ios_base::failbit); }  
# 392
if (__err) { 
# 393
(this->setstate(__err)); }  
# 394
return *this; 
# 395
} 
# 397
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 400
basic_istream< _CharT, _Traits> ::getline(char_type *__s, ::std::streamsize __n, char_type __delim) 
# 401
{ 
# 402
(_M_gcount) = (0); 
# 403
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 404
sentry __cerb(*this, true); 
# 405
if (__cerb) 
# 406
{ 
# 407
try 
# 408
{ 
# 409
const int_type __idelim = traits_type::to_int_type(__delim); 
# 410
const int_type __eof = traits_type::eof(); 
# 411
__streambuf_type *__sb = (this->rdbuf()); 
# 412
int_type __c = (__sb->sgetc()); 
# 414
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 417
{ 
# 418
(*(__s++)) = traits_type::to_char_type(__c); 
# 419
__c = (__sb->snextc()); 
# 420
++(_M_gcount); 
# 421
}  
# 422
if (traits_type::eq_int_type(__c, __eof)) { 
# 423
(__err |= ::std::ios_base::eofbit); } else 
# 425
{ 
# 426
if (traits_type::eq_int_type(__c, __idelim)) 
# 427
{ 
# 428
(__sb->sbumpc()); 
# 429
++(_M_gcount); 
# 430
} else { 
# 432
(__err |= ::std::ios_base::failbit); }  
# 433
}  
# 434
} 
# 435
catch (::__cxxabiv1::__forced_unwind &) 
# 436
{ 
# 437
(this->_M_setstate(ios_base::badbit)); 
# 438
throw; 
# 439
} 
# 440
catch (...) 
# 441
{ (this->_M_setstate(ios_base::badbit)); }  
# 442
}  
# 445
if (__n > (0)) { 
# 446
(*__s) = char_type(); }  
# 447
if (!(_M_gcount)) { 
# 448
(__err |= ::std::ios_base::failbit); }  
# 449
if (__err) { 
# 450
(this->setstate(__err)); }  
# 451
return *this; 
# 452
} 
# 457
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 460
basic_istream< _CharT, _Traits> ::ignore() 
# 461
{ 
# 462
(_M_gcount) = (0); 
# 463
sentry __cerb(*this, true); 
# 464
if (__cerb) 
# 465
{ 
# 466
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 467
try 
# 468
{ 
# 469
const int_type __eof = traits_type::eof(); 
# 470
__streambuf_type *__sb = (this->rdbuf()); 
# 472
if (traits_type::eq_int_type((__sb->sbumpc()), __eof)) { 
# 473
(__err |= ::std::ios_base::eofbit); } else { 
# 475
(_M_gcount) = (1); }  
# 476
} 
# 477
catch (::__cxxabiv1::__forced_unwind &) 
# 478
{ 
# 479
(this->_M_setstate(ios_base::badbit)); 
# 480
throw; 
# 481
} 
# 482
catch (...) 
# 483
{ (this->_M_setstate(ios_base::badbit)); }  
# 484
if (__err) { 
# 485
(this->setstate(__err)); }  
# 486
}  
# 487
return *this; 
# 488
} 
# 490
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 493
basic_istream< _CharT, _Traits> ::ignore(::std::streamsize __n) 
# 494
{ 
# 495
(_M_gcount) = (0); 
# 496
sentry __cerb(*this, true); 
# 497
if (__cerb && (__n > (0))) 
# 498
{ 
# 499
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 500
try 
# 501
{ 
# 502
const int_type __eof = traits_type::eof(); 
# 503
__streambuf_type *__sb = (this->rdbuf()); 
# 504
int_type __c = (__sb->sgetc()); 
# 513
bool __large_ignore = false; 
# 514
while (true) 
# 515
{ 
# 516
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof))) 
# 518
{ 
# 519
++(_M_gcount); 
# 520
__c = (__sb->snextc()); 
# 521
}  
# 522
if ((__n == ::__gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof))) 
# 524
{ 
# 525
(_M_gcount) = ::__gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 527
__large_ignore = true; 
# 528
} else { 
# 530
break; }  
# 531
}  
# 533
if (__large_ignore) { 
# 534
(_M_gcount) = ::__gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 536
if (traits_type::eq_int_type(__c, __eof)) { 
# 537
(__err |= ::std::ios_base::eofbit); }  
# 538
} 
# 539
catch (::__cxxabiv1::__forced_unwind &) 
# 540
{ 
# 541
(this->_M_setstate(ios_base::badbit)); 
# 542
throw; 
# 543
} 
# 544
catch (...) 
# 545
{ (this->_M_setstate(ios_base::badbit)); }  
# 546
if (__err) { 
# 547
(this->setstate(__err)); }  
# 548
}  
# 549
return *this; 
# 550
} 
# 552
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 555
basic_istream< _CharT, _Traits> ::ignore(::std::streamsize __n, int_type __delim) 
# 556
{ 
# 557
(_M_gcount) = (0); 
# 558
sentry __cerb(*this, true); 
# 559
if (__cerb && (__n > (0))) 
# 560
{ 
# 561
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 562
try 
# 563
{ 
# 564
const int_type __eof = traits_type::eof(); 
# 565
__streambuf_type *__sb = (this->rdbuf()); 
# 566
int_type __c = (__sb->sgetc()); 
# 569
bool __large_ignore = false; 
# 570
while (true) 
# 571
{ 
# 572
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 575
{ 
# 576
++(_M_gcount); 
# 577
__c = (__sb->snextc()); 
# 578
}  
# 579
if ((__n == ::__gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 582
{ 
# 583
(_M_gcount) = ::__gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 585
__large_ignore = true; 
# 586
} else { 
# 588
break; }  
# 589
}  
# 591
if (__large_ignore) { 
# 592
(_M_gcount) = ::__gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 594
if (traits_type::eq_int_type(__c, __eof)) { 
# 595
(__err |= ::std::ios_base::eofbit); } else { 
# 596
if (traits_type::eq_int_type(__c, __delim)) 
# 597
{ 
# 598
if ((_M_gcount) < ::__gnu_cxx::__numeric_traits_integer< long> ::__max) { 
# 600
++(_M_gcount); }  
# 601
(__sb->sbumpc()); 
# 602
}  }  
# 603
} 
# 604
catch (::__cxxabiv1::__forced_unwind &) 
# 605
{ 
# 606
(this->_M_setstate(ios_base::badbit)); 
# 607
throw; 
# 608
} 
# 609
catch (...) 
# 610
{ (this->_M_setstate(ios_base::badbit)); }  
# 611
if (__err) { 
# 612
(this->setstate(__err)); }  
# 613
}  
# 614
return *this; 
# 615
} 
# 617
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 620
basic_istream< _CharT, _Traits> ::peek() 
# 621
{ 
# 622
int_type __c = traits_type::eof(); 
# 623
(_M_gcount) = (0); 
# 624
sentry __cerb(*this, true); 
# 625
if (__cerb) 
# 626
{ 
# 627
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 628
try 
# 629
{ 
# 630
__c = ((this->rdbuf())->sgetc()); 
# 631
if (traits_type::eq_int_type(__c, traits_type::eof())) { 
# 632
(__err |= ::std::ios_base::eofbit); }  
# 633
} 
# 634
catch (::__cxxabiv1::__forced_unwind &) 
# 635
{ 
# 636
(this->_M_setstate(ios_base::badbit)); 
# 637
throw; 
# 638
} 
# 639
catch (...) 
# 640
{ (this->_M_setstate(ios_base::badbit)); }  
# 641
if (__err) { 
# 642
(this->setstate(__err)); }  
# 643
}  
# 644
return __c; 
# 645
} 
# 647
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 650
basic_istream< _CharT, _Traits> ::read(char_type *__s, ::std::streamsize __n) 
# 651
{ 
# 652
(_M_gcount) = (0); 
# 653
sentry __cerb(*this, true); 
# 654
if (__cerb) 
# 655
{ 
# 656
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 657
try 
# 658
{ 
# 659
(_M_gcount) = ((this->rdbuf())->sgetn(__s, __n)); 
# 660
if ((_M_gcount) != __n) { 
# 661
(__err |= ((::std::ios_base::eofbit | ::std::ios_base::failbit))); }  
# 662
} 
# 663
catch (::__cxxabiv1::__forced_unwind &) 
# 664
{ 
# 665
(this->_M_setstate(ios_base::badbit)); 
# 666
throw; 
# 667
} 
# 668
catch (...) 
# 669
{ (this->_M_setstate(ios_base::badbit)); }  
# 670
if (__err) { 
# 671
(this->setstate(__err)); }  
# 672
}  
# 673
return *this; 
# 674
} 
# 676
template< class _CharT, class _Traits> streamsize 
# 679
basic_istream< _CharT, _Traits> ::readsome(char_type *__s, ::std::streamsize __n) 
# 680
{ 
# 681
(_M_gcount) = (0); 
# 682
sentry __cerb(*this, true); 
# 683
if (__cerb) 
# 684
{ 
# 685
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 686
try 
# 687
{ 
# 689
const ::std::streamsize __num = ((this->rdbuf())->in_avail()); 
# 690
if (__num > (0)) { 
# 691
(_M_gcount) = ((this->rdbuf())->sgetn(__s, std::min(__num, __n))); } else { 
# 692
if (__num == (-1)) { 
# 693
(__err |= ::std::ios_base::eofbit); }  }  
# 694
} 
# 695
catch (::__cxxabiv1::__forced_unwind &) 
# 696
{ 
# 697
(this->_M_setstate(ios_base::badbit)); 
# 698
throw; 
# 699
} 
# 700
catch (...) 
# 701
{ (this->_M_setstate(ios_base::badbit)); }  
# 702
if (__err) { 
# 703
(this->setstate(__err)); }  
# 704
}  
# 705
return _M_gcount; 
# 706
} 
# 708
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 711
basic_istream< _CharT, _Traits> ::putback(char_type __c) 
# 712
{ 
# 715
(_M_gcount) = (0); 
# 717
(this->clear((this->rdstate()) & ((~::std::ios_base::eofbit)))); 
# 718
sentry __cerb(*this, true); 
# 719
if (__cerb) 
# 720
{ 
# 721
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 722
try 
# 723
{ 
# 724
const int_type __eof = traits_type::eof(); 
# 725
__streambuf_type *__sb = (this->rdbuf()); 
# 726
if ((!__sb) || traits_type::eq_int_type((__sb->sputbackc(__c)), __eof)) { 
# 728
(__err |= ::std::ios_base::badbit); }  
# 729
} 
# 730
catch (::__cxxabiv1::__forced_unwind &) 
# 731
{ 
# 732
(this->_M_setstate(ios_base::badbit)); 
# 733
throw; 
# 734
} 
# 735
catch (...) 
# 736
{ (this->_M_setstate(ios_base::badbit)); }  
# 737
if (__err) { 
# 738
(this->setstate(__err)); }  
# 739
}  
# 740
return *this; 
# 741
} 
# 743
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 746
basic_istream< _CharT, _Traits> ::unget() 
# 747
{ 
# 750
(_M_gcount) = (0); 
# 752
(this->clear((this->rdstate()) & ((~::std::ios_base::eofbit)))); 
# 753
sentry __cerb(*this, true); 
# 754
if (__cerb) 
# 755
{ 
# 756
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 757
try 
# 758
{ 
# 759
const int_type __eof = traits_type::eof(); 
# 760
__streambuf_type *__sb = (this->rdbuf()); 
# 761
if ((!__sb) || traits_type::eq_int_type((__sb->sungetc()), __eof)) { 
# 763
(__err |= ::std::ios_base::badbit); }  
# 764
} 
# 765
catch (::__cxxabiv1::__forced_unwind &) 
# 766
{ 
# 767
(this->_M_setstate(ios_base::badbit)); 
# 768
throw; 
# 769
} 
# 770
catch (...) 
# 771
{ (this->_M_setstate(ios_base::badbit)); }  
# 772
if (__err) { 
# 773
(this->setstate(__err)); }  
# 774
}  
# 775
return *this; 
# 776
} 
# 778
template< class _CharT, class _Traits> int 
# 781
basic_istream< _CharT, _Traits> ::sync() 
# 782
{ 
# 785
int __ret = (-1); 
# 786
sentry __cerb(*this, true); 
# 787
if (__cerb) 
# 788
{ 
# 789
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 790
try 
# 791
{ 
# 792
__streambuf_type *__sb = (this->rdbuf()); 
# 793
if (__sb) 
# 794
{ 
# 795
if ((__sb->pubsync()) == (-1)) { 
# 796
(__err |= ::std::ios_base::badbit); } else { 
# 798
__ret = 0; }  
# 799
}  
# 800
} 
# 801
catch (::__cxxabiv1::__forced_unwind &) 
# 802
{ 
# 803
(this->_M_setstate(ios_base::badbit)); 
# 804
throw; 
# 805
} 
# 806
catch (...) 
# 807
{ (this->_M_setstate(ios_base::badbit)); }  
# 808
if (__err) { 
# 809
(this->setstate(__err)); }  
# 810
}  
# 811
return __ret; 
# 812
} 
# 814
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::pos_type 
# 817
basic_istream< _CharT, _Traits> ::tellg() 
# 818
{ 
# 821
pos_type __ret = ((pos_type)(-1)); 
# 822
sentry __cerb(*this, true); 
# 823
if (__cerb) 
# 824
{ 
# 825
try 
# 826
{ 
# 827
if (!(this->fail())) { 
# 828
__ret = ((this->rdbuf())->pubseekoff(0, ios_base::cur, ios_base::in)); }  
# 830
} 
# 831
catch (::__cxxabiv1::__forced_unwind &) 
# 832
{ 
# 833
(this->_M_setstate(ios_base::badbit)); 
# 834
throw; 
# 835
} 
# 836
catch (...) 
# 837
{ (this->_M_setstate(ios_base::badbit)); }  
# 838
}  
# 839
return __ret; 
# 840
} 
# 842
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 845
basic_istream< _CharT, _Traits> ::seekg(pos_type __pos) 
# 846
{ 
# 850
(this->clear((this->rdstate()) & ((~::std::ios_base::eofbit)))); 
# 851
sentry __cerb(*this, true); 
# 852
if (__cerb) 
# 853
{ 
# 854
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 855
try 
# 856
{ 
# 857
if (!(this->fail())) 
# 858
{ 
# 860
const pos_type __p = ((this->rdbuf())->pubseekpos(__pos, ios_base::in)); 
# 864
if (__p == ((pos_type)((off_type)(-1)))) { 
# 865
(__err |= ::std::ios_base::failbit); }  
# 866
}  
# 867
} 
# 868
catch (::__cxxabiv1::__forced_unwind &) 
# 869
{ 
# 870
(this->_M_setstate(ios_base::badbit)); 
# 871
throw; 
# 872
} 
# 873
catch (...) 
# 874
{ (this->_M_setstate(ios_base::badbit)); }  
# 875
if (__err) { 
# 876
(this->setstate(__err)); }  
# 877
}  
# 878
return *this; 
# 879
} 
# 881
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 884
basic_istream< _CharT, _Traits> ::seekg(off_type __off, ::std::ios_base::seekdir __dir) 
# 885
{ 
# 889
(this->clear((this->rdstate()) & ((~::std::ios_base::eofbit)))); 
# 890
sentry __cerb(*this, true); 
# 891
if (__cerb) 
# 892
{ 
# 893
::std::ios_base::iostate __err = ::std::ios_base::goodbit; 
# 894
try 
# 895
{ 
# 896
if (!(this->fail())) 
# 897
{ 
# 899
const pos_type __p = ((this->rdbuf())->pubseekoff(__off, __dir, ios_base::in)); 
# 903
if (__p == ((pos_type)((off_type)(-1)))) { 
# 904
(__err |= ::std::ios_base::failbit); }  
# 905
}  
# 906
} 
# 907
catch (::__cxxabiv1::__forced_unwind &) 
# 908
{ 
# 909
(this->_M_setstate(ios_base::badbit)); 
# 910
throw; 
# 911
} 
# 912
catch (...) 
# 913
{ (this->_M_setstate(ios_base::badbit)); }  
# 914
if (__err) { 
# 915
(this->setstate(__err)); }  
# 916
}  
# 917
return *this; 
# 918
} 
# 921
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 923
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT &__c) 
# 924
{ 
# 925
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 926
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 928
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 929
if (__cerb) 
# 930
{ 
# 931
ios_base::iostate __err = ios_base::goodbit; 
# 932
try 
# 933
{ 
# 934
const __int_type __cb = ((__in.rdbuf())->sbumpc()); 
# 935
if (!_Traits::eq_int_type(__cb, _Traits::eof())) { 
# 936
__c = _Traits::to_char_type(__cb); } else { 
# 938
(__err |= ((ios_base::eofbit | ios_base::failbit))); }  
# 939
} 
# 940
catch (__cxxabiv1::__forced_unwind &) 
# 941
{ 
# 942
(__in._M_setstate(ios_base::badbit)); 
# 943
throw; 
# 944
} 
# 945
catch (...) 
# 946
{ (__in._M_setstate(ios_base::badbit)); }  
# 947
if (__err) { 
# 948
(__in.setstate(__err)); }  
# 949
}  
# 950
return __in; 
# 951
} 
# 953
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 955
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT *__s) 
# 956
{ 
# 957
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 958
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 959
typedef typename _Traits::int_type int_type; 
# 960
typedef _CharT char_type; 
# 961
typedef ctype< _CharT>  __ctype_type; 
# 963
streamsize __extracted = (0); 
# 964
ios_base::iostate __err = ios_base::goodbit; 
# 965
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 966
if (__cerb) 
# 967
{ 
# 968
try 
# 969
{ 
# 971
streamsize __num = (__in.width()); 
# 972
if (__num <= (0)) { 
# 973
__num = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 975
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 977
const int_type __eof = _Traits::eof(); 
# 978
__streambuf_type *__sb = (__in.rdbuf()); 
# 979
int_type __c = (__sb->sgetc()); 
# 981
while ((__extracted < (__num - (1))) && (!_Traits::eq_int_type(__c, __eof)) && (!(__ct.is(ctype_base::space, _Traits::to_char_type(__c))))) 
# 985
{ 
# 986
(*(__s++)) = _Traits::to_char_type(__c); 
# 987
++__extracted; 
# 988
__c = (__sb->snextc()); 
# 989
}  
# 990
if (_Traits::eq_int_type(__c, __eof)) { 
# 991
(__err |= ios_base::eofbit); }  
# 995
(*__s) = char_type(); 
# 996
(__in.width(0)); 
# 997
} 
# 998
catch (__cxxabiv1::__forced_unwind &) 
# 999
{ 
# 1000
(__in._M_setstate(ios_base::badbit)); 
# 1001
throw; 
# 1002
} 
# 1003
catch (...) 
# 1004
{ (__in._M_setstate(ios_base::badbit)); }  
# 1005
}  
# 1006
if (!__extracted) { 
# 1007
(__err |= ios_base::failbit); }  
# 1008
if (__err) { 
# 1009
(__in.setstate(__err)); }  
# 1010
return __in; 
# 1011
} 
# 1014
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1016
ws(basic_istream< _CharT, _Traits>  &__in) 
# 1017
{ 
# 1018
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1019
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 1020
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1021
typedef ctype< _CharT>  __ctype_type; 
# 1023
const __ctype_type &__ct = use_facet< ctype< _CharT> > ((__in.getloc())); 
# 1024
const __int_type __eof = _Traits::eof(); 
# 1025
__streambuf_type *__sb = (__in.rdbuf()); 
# 1026
__int_type __c = (__sb->sgetc()); 
# 1028
while ((!_Traits::eq_int_type(__c, __eof)) && (__ct.is(ctype_base::space, _Traits::to_char_type(__c)))) { 
# 1030
__c = (__sb->snextc()); }  
# 1032
if (_Traits::eq_int_type(__c, __eof)) { 
# 1033
(__in.setstate(ios_base::eofbit)); }  
# 1034
return __in; 
# 1035
} 
# 1040
extern template class basic_istream< char, char_traits< char> > ;
# 1041
extern template basic_istream< char, char_traits< char> >  &ws(basic_istream< char, char_traits< char> >  & __is);
# 1042
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, char & __c);
# 1043
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  &, char *);
# 1044
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, unsigned char & __c);
# 1045
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, signed char & __c);
# 1046
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, unsigned char * __s);
# 1047
extern template basic_istream< char, char_traits< char> >  &operator>>(basic_istream< char, char_traits< char> >  & __in, signed char * __s);
# 1049
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned short & __v);
# 1050
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned & __v);
# 1051
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long & __v);
# 1052
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long & __v);
# 1053
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(bool & __v);
# 1055
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long long & __v);
# 1056
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(unsigned long long & __v);
# 1058
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(float & __v);
# 1059
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(double & __v);
# 1060
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(long double & __v);
# 1061
extern template basic_istream< char, char_traits< char> > ::__istream_type &basic_istream< char, char_traits< char> > ::_M_extract(void *& __v);
# 1063
extern template class basic_iostream< char, char_traits< char> > ;
# 1066
extern template class basic_istream< wchar_t, char_traits< wchar_t> > ;
# 1067
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &ws(basic_istream< wchar_t, char_traits< wchar_t> >  & __is);
# 1068
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  & __in, wchar_t & __c);
# 1069
extern template basic_istream< wchar_t, char_traits< wchar_t> >  &operator>>(basic_istream< wchar_t, char_traits< wchar_t> >  &, wchar_t *);
# 1071
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned short & __v);
# 1072
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned & __v);
# 1073
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long & __v);
# 1074
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long & __v);
# 1075
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(bool & __v);
# 1077
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long long & __v);
# 1078
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(unsigned long long & __v);
# 1080
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(float & __v);
# 1081
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(double & __v);
# 1082
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(long double & __v);
# 1083
extern template basic_istream< wchar_t, char_traits< wchar_t> > ::__istream_type &basic_istream< wchar_t, char_traits< wchar_t> > ::_M_extract(void *& __v);
# 1085
extern template class basic_iostream< wchar_t, char_traits< wchar_t> > ;
# 1090
}
# 42 "/usr/include/c++/5/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 60
extern istream cin; 
# 61
extern ostream cout; 
# 62
extern ostream cerr; 
# 63
extern ostream clog; 
# 66
extern wistream wcin; 
# 67
extern wostream wcout; 
# 68
extern wostream wcerr; 
# 69
extern wostream wclog; 
# 74
static ios_base::Init __ioinit; 
# 77
}
# 4 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/builtinTypes.h"
typedef int binID; 
# 10 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/maths.h"
inline float minf(const float &a, const float &b) { return (a < b) ? a : b; } 
# 11
inline float maxf(const float &a, const float &b) { return (a > b) ? a : b; } 
# 18
inline int ceil_int_div(int numer, int denom) { 
# 19
return (int)ceilf(((float)numer) / ((float)denom)); 
# 20
} 
# 21
inline int floor_int_div(int numer, int denom) { 
# 22
return (int)floorf(((float)numer) / ((float)denom)); 
# 23
} 
# 25
template< class T> inline T 
# 26
lerp(T &val1, T &val2, float t) { 
# 27
return (val1 * ((1.0F) - t)) + (val2 * t); 
# 29
} 
# 31
template< class T> inline T 
# 32
interpolateBary(T &v0, T &v1, T &v2, float 
# 33
alpha, float beta, float gamma) { 
# 34
return ((v0 * alpha) + (v1 * beta)) + (v2 * gamma); 
# 37
} 
# 46
inline float dist2d(const float &x1, const float &y1, const float &
# 47
x2, const float &y2) { 
# 48
return sqrtf(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2))); 
# 49
} 
# 52
inline float sphereVolume(float r, int dimension) { 
# 54
switch (dimension) { 
# 55
case 0:  return (1.0F); 
# 56
case 1:  return (2.0F) * r; 
# 57
case 2:  return ((((1.0F)) * (3.141592653589793116)) * r) * r; 
# 58
case 3:  return (((((4.0F) / (3.0F)) * (3.141592653589793116)) * r) * r) * r; 
# 59
case 4:  return (((((((1.0F) / (2.0F)) * (3.141592653589793116)) * (3.141592653589793116)) * r) * r) * r) * r; 
# 60
case 5:  return ((((((((8.0F) / (15.0F)) * (3.141592653589793116)) * (3.141592653589793116)) * r) * r) * r) * r) * r; 
# 61
case 6:  return ((((((((((1.0F) / (6.0F)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * r) * r) * r) * r) * r) * r; 
# 62
case 7:  return (((((((((((16.0F) / (105.0F)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * r) * r) * r) * r) * r) * r) * r; 
# 63
case 8:  return (((((((((((((1.0F) / (24.0F)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * r) * r) * r) * r) * r) * r) * r) * r; 
# 64
case 9:  return ((((((((((((((32.0F) / (945.0F)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * r) * r) * r) * r) * r) * r) * r) * r) * r; 
# 65
case 10:  return ((((((((((((((((1.0F) / (120.0F)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * r) * r) * r) * r) * r) * r) * r) * r) * r) * r; 
# 66
case 11:  return (((((((((((((((((64.0F) / (10395.0F)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * (3.141592653589793116)) * r) * r) * r) * r) * r) * r) * r) * r) * r) * r) * r; 
# 67
default:  break; 
# 68
}  ; 
# 70
return (0.0F); 
# 71
} 
# 81
inline float getAngle(float y, float x) { 
# 86
float ay = fabsf(y); 
# 87
float ax = fabsf(x); 
# 89
float angle1q, angle; 
# 91
if (ax == (0.0F)) { 
# 92
angle1q = ((3.141592653589793116) * ((0.5F))); 
# 93
} else { 
# 94
angle1q = atan(ay / ax); 
# 95
}  
# 97
if (y >= (0)) { 
# 98
if (x >= (0)) { 
# 100
angle = angle1q; 
# 101
} else { 
# 103
angle = ((3.141592653589793116) - angle1q); 
# 104
}  
# 105
} else { 
# 106
if (x >= (0)) { 
# 108
angle = ((((2.0F)) * (3.141592653589793116)) - angle1q); 
# 109
} else { 
# 111
angle = ((3.141592653589793116) + angle1q); 
# 112
}  
# 113
}  
# 115
return angle; 
# 116
} 
# 118
inline void clampInplace(float &val, const float &vmin, const float &vmax) { 
# 119
if (val < vmin) { val = vmin; }  
# 120
if (val > vmax) { val = vmax; }  
# 121
} 
# 59 "/usr/local/cuda-8.0/include/cuda.h"
typedef uint32_t cuuint32_t; 
# 60
typedef uint64_t cuuint64_t; 
# 211
extern "C" {
# 221
typedef unsigned long long CUdeviceptr; 
# 228
typedef int CUdevice; 
# 229
typedef struct CUctx_st *CUcontext; 
# 230
typedef struct CUmod_st *CUmodule; 
# 231
typedef struct CUfunc_st *CUfunction; 
# 232
typedef struct CUarray_st *CUarray; 
# 233
typedef struct CUmipmappedArray_st *CUmipmappedArray; 
# 234
typedef struct CUtexref_st *CUtexref; 
# 235
typedef struct CUsurfref_st *CUsurfref; 
# 236
typedef CUevent_st *CUevent; 
# 237
typedef CUstream_st *CUstream; 
# 238
typedef struct CUgraphicsResource_st *CUgraphicsResource; 
# 239
typedef unsigned long long CUtexObject; 
# 240
typedef unsigned long long CUsurfObject; 
# 244
typedef 
# 242
struct CUuuid_st { 
# 243
char bytes[16]; 
# 244
} CUuuid; 
# 259
typedef 
# 257
struct CUipcEventHandle_st { 
# 258
char reserved[64]; 
# 259
} CUipcEventHandle; 
# 266
typedef 
# 264
struct CUipcMemHandle_st { 
# 265
char reserved[64]; 
# 266
} CUipcMemHandle; 
# 273
typedef 
# 271
enum CUipcMem_flags_enum { 
# 272
CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 1
# 273
} CUipcMem_flags; 
# 284
typedef 
# 280
enum CUmemAttach_flags_enum { 
# 281
CU_MEM_ATTACH_GLOBAL = 1, 
# 282
CU_MEM_ATTACH_HOST, 
# 283
CU_MEM_ATTACH_SINGLE = 4
# 284
} CUmemAttach_flags; 
# 301
typedef 
# 289
enum CUctx_flags_enum { 
# 290
CU_CTX_SCHED_AUTO, 
# 291
CU_CTX_SCHED_SPIN, 
# 292
CU_CTX_SCHED_YIELD, 
# 293
CU_CTX_SCHED_BLOCKING_SYNC = 4, 
# 294
CU_CTX_BLOCKING_SYNC = 4, 
# 297
CU_CTX_SCHED_MASK = 7, 
# 298
CU_CTX_MAP_HOST, 
# 299
CU_CTX_LMEM_RESIZE_TO_MAX = 16, 
# 300
CU_CTX_FLAGS_MASK = 31
# 301
} CUctx_flags; 
# 309
typedef 
# 306
enum CUstream_flags_enum { 
# 307
CU_STREAM_DEFAULT, 
# 308
CU_STREAM_NON_BLOCKING
# 309
} CUstream_flags; 
# 339
typedef 
# 334
enum CUevent_flags_enum { 
# 335
CU_EVENT_DEFAULT, 
# 336
CU_EVENT_BLOCKING_SYNC, 
# 337
CU_EVENT_DISABLE_TIMING, 
# 338
CU_EVENT_INTERPROCESS = 4
# 339
} CUevent_flags; 
# 357
typedef 
# 345
enum CUstreamWaitValue_flags_enum { 
# 346
CU_STREAM_WAIT_VALUE_GEQ, 
# 348
CU_STREAM_WAIT_VALUE_EQ, 
# 349
CU_STREAM_WAIT_VALUE_AND, 
# 350
CU_STREAM_WAIT_VALUE_FLUSH = 1073741824
# 357
} CUstreamWaitValue_flags; 
# 370
typedef 
# 362
enum CUstreamWriteValue_flags_enum { 
# 363
CU_STREAM_WRITE_VALUE_DEFAULT, 
# 364
CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER
# 370
} CUstreamWriteValue_flags; 
# 380
typedef 
# 375
enum CUstreamBatchMemOpType_enum { 
# 376
CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1, 
# 377
CU_STREAM_MEM_OP_WRITE_VALUE_32, 
# 378
CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES
# 380
} CUstreamBatchMemOpType; 
# 412
typedef 
# 385
union CUstreamBatchMemOpParams_union { 
# 386
CUstreamBatchMemOpType operation; 
# 387
struct CUstreamMemOpWaitValueParams_st { 
# 388
CUstreamBatchMemOpType operation; 
# 389
CUdeviceptr address; 
# 390
union { 
# 391
cuuint32_t value; 
# 392
cuuint64_t pad; 
# 393
}; 
# 394
unsigned flags; 
# 395
CUdeviceptr alias; 
# 396
} waitValue; 
# 397
struct CUstreamMemOpWriteValueParams_st { 
# 398
CUstreamBatchMemOpType operation; 
# 399
CUdeviceptr address; 
# 400
union { 
# 401
cuuint32_t value; 
# 402
cuuint64_t pad; 
# 403
}; 
# 404
unsigned flags; 
# 405
CUdeviceptr alias; 
# 406
} writeValue; 
# 407
struct CUstreamMemOpFlushRemoteWritesParams_st { 
# 408
CUstreamBatchMemOpType operation; 
# 409
unsigned flags; 
# 410
} flushRemoteWrites; 
# 411
cuuint64_t pad[6]; 
# 412
} CUstreamBatchMemOpParams; 
# 421
typedef 
# 418
enum CUoccupancy_flags_enum { 
# 419
CU_OCCUPANCY_DEFAULT, 
# 420
CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE
# 421
} CUoccupancy_flags; 
# 435
typedef 
# 426
enum CUarray_format_enum { 
# 427
CU_AD_FORMAT_UNSIGNED_INT8 = 1, 
# 428
CU_AD_FORMAT_UNSIGNED_INT16, 
# 429
CU_AD_FORMAT_UNSIGNED_INT32, 
# 430
CU_AD_FORMAT_SIGNED_INT8 = 8, 
# 431
CU_AD_FORMAT_SIGNED_INT16, 
# 432
CU_AD_FORMAT_SIGNED_INT32, 
# 433
CU_AD_FORMAT_HALF = 16, 
# 434
CU_AD_FORMAT_FLOAT = 32
# 435
} CUarray_format; 
# 445
typedef 
# 440
enum CUaddress_mode_enum { 
# 441
CU_TR_ADDRESS_MODE_WRAP, 
# 442
CU_TR_ADDRESS_MODE_CLAMP, 
# 443
CU_TR_ADDRESS_MODE_MIRROR, 
# 444
CU_TR_ADDRESS_MODE_BORDER
# 445
} CUaddress_mode; 
# 453
typedef 
# 450
enum CUfilter_mode_enum { 
# 451
CU_TR_FILTER_MODE_POINT, 
# 452
CU_TR_FILTER_MODE_LINEAR
# 453
} CUfilter_mode; 
# 556
typedef 
# 458
enum CUdevice_attribute_enum { 
# 459
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1, 
# 460
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X, 
# 461
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y, 
# 462
CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z, 
# 463
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X, 
# 464
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y, 
# 465
CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z, 
# 466
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK, 
# 467
CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8, 
# 468
CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY, 
# 469
CU_DEVICE_ATTRIBUTE_WARP_SIZE, 
# 470
CU_DEVICE_ATTRIBUTE_MAX_PITCH, 
# 471
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK, 
# 472
CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12, 
# 473
CU_DEVICE_ATTRIBUTE_CLOCK_RATE, 
# 474
CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT, 
# 475
CU_DEVICE_ATTRIBUTE_GPU_OVERLAP, 
# 476
CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT, 
# 477
CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT, 
# 478
CU_DEVICE_ATTRIBUTE_INTEGRATED, 
# 479
CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY, 
# 480
CU_DEVICE_ATTRIBUTE_COMPUTE_MODE, 
# 481
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH, 
# 482
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH, 
# 483
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT, 
# 484
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH, 
# 485
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT, 
# 486
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH, 
# 487
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH, 
# 488
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT, 
# 489
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS, 
# 490
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27, 
# 491
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT, 
# 492
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES, 
# 493
CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT, 
# 494
CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS, 
# 495
CU_DEVICE_ATTRIBUTE_ECC_ENABLED, 
# 496
CU_DEVICE_ATTRIBUTE_PCI_BUS_ID, 
# 497
CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID, 
# 498
CU_DEVICE_ATTRIBUTE_TCC_DRIVER, 
# 499
CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE, 
# 500
CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH, 
# 501
CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE, 
# 502
CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR, 
# 503
CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT, 
# 504
CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING, 
# 505
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH, 
# 506
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS, 
# 507
CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER, 
# 508
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH, 
# 509
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT, 
# 510
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE, 
# 511
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE, 
# 512
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE, 
# 513
CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID, 
# 514
CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT, 
# 515
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH, 
# 516
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH, 
# 517
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS, 
# 518
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH, 
# 519
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH, 
# 520
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT, 
# 521
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH, 
# 522
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT, 
# 523
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH, 
# 524
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH, 
# 525
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS, 
# 526
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH, 
# 527
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT, 
# 528
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS, 
# 529
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH, 
# 530
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH, 
# 531
CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS, 
# 532
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH, 
# 533
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH, 
# 534
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT, 
# 535
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH, 
# 536
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH, 
# 537
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT, 
# 538
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR, 
# 539
CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR, 
# 540
CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH, 
# 541
CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED, 
# 542
CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED, 
# 543
CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED, 
# 544
CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR, 
# 545
CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR, 
# 546
CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY, 
# 547
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD, 
# 548
CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID, 
# 549
CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED, 
# 550
CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO, 
# 551
CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS, 
# 552
CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS, 
# 553
CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED, 
# 554
CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM, 
# 555
CU_DEVICE_ATTRIBUTE_MAX
# 556
} CUdevice_attribute; 
# 572
typedef 
# 561
struct CUdevprop_st { 
# 562
int maxThreadsPerBlock; 
# 563
int maxThreadsDim[3]; 
# 564
int maxGridSize[3]; 
# 565
int sharedMemPerBlock; 
# 566
int totalConstantMemory; 
# 567
int SIMDWidth; 
# 568
int memPitch; 
# 569
int regsPerBlock; 
# 570
int clockRate; 
# 571
int textureAlign; 
# 572
} CUdevprop; 
# 586
typedef 
# 577
enum CUpointer_attribute_enum { 
# 578
CU_POINTER_ATTRIBUTE_CONTEXT = 1, 
# 579
CU_POINTER_ATTRIBUTE_MEMORY_TYPE, 
# 580
CU_POINTER_ATTRIBUTE_DEVICE_POINTER, 
# 581
CU_POINTER_ATTRIBUTE_HOST_POINTER, 
# 582
CU_POINTER_ATTRIBUTE_P2P_TOKENS, 
# 583
CU_POINTER_ATTRIBUTE_SYNC_MEMOPS, 
# 584
CU_POINTER_ATTRIBUTE_BUFFER_ID, 
# 585
CU_POINTER_ATTRIBUTE_IS_MANAGED
# 586
} CUpointer_attribute; 
# 647
typedef 
# 591
enum CUfunction_attribute_enum { 
# 597
CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK, 
# 604
CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES, 
# 610
CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES, 
# 615
CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES, 
# 620
CU_FUNC_ATTRIBUTE_NUM_REGS, 
# 629
CU_FUNC_ATTRIBUTE_PTX_VERSION, 
# 638
CU_FUNC_ATTRIBUTE_BINARY_VERSION, 
# 644
CU_FUNC_ATTRIBUTE_CACHE_MODE_CA, 
# 646
CU_FUNC_ATTRIBUTE_MAX
# 647
} CUfunction_attribute; 
# 657
typedef 
# 652
enum CUfunc_cache_enum { 
# 653
CU_FUNC_CACHE_PREFER_NONE, 
# 654
CU_FUNC_CACHE_PREFER_SHARED, 
# 655
CU_FUNC_CACHE_PREFER_L1, 
# 656
CU_FUNC_CACHE_PREFER_EQUAL
# 657
} CUfunc_cache; 
# 666
typedef 
# 662
enum CUsharedconfig_enum { 
# 663
CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE, 
# 664
CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE, 
# 665
CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE
# 666
} CUsharedconfig; 
# 676
typedef 
# 671
enum CUmemorytype_enum { 
# 672
CU_MEMORYTYPE_HOST = 1, 
# 673
CU_MEMORYTYPE_DEVICE, 
# 674
CU_MEMORYTYPE_ARRAY, 
# 675
CU_MEMORYTYPE_UNIFIED
# 676
} CUmemorytype; 
# 685
typedef 
# 681
enum CUcomputemode_enum { 
# 682
CU_COMPUTEMODE_DEFAULT, 
# 683
CU_COMPUTEMODE_PROHIBITED = 2, 
# 684
CU_COMPUTEMODE_EXCLUSIVE_PROCESS
# 685
} CUcomputemode; 
# 697
typedef 
# 690
enum CUmem_advise_enum { 
# 691
CU_MEM_ADVISE_SET_READ_MOSTLY = 1, 
# 692
CU_MEM_ADVISE_UNSET_READ_MOSTLY, 
# 693
CU_MEM_ADVISE_SET_PREFERRED_LOCATION, 
# 694
CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION, 
# 695
CU_MEM_ADVISE_SET_ACCESSED_BY, 
# 696
CU_MEM_ADVISE_UNSET_ACCESSED_BY
# 697
} CUmem_advise; 
# 704
typedef 
# 699
enum CUmem_range_attribute_enum { 
# 700
CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1, 
# 701
CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION, 
# 702
CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY, 
# 703
CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION
# 704
} CUmem_range_attribute; 
# 848
typedef 
# 709
enum CUjit_option_enum { 
# 716
CU_JIT_MAX_REGISTERS, 
# 731
CU_JIT_THREADS_PER_BLOCK, 
# 739
CU_JIT_WALL_TIME, 
# 748
CU_JIT_INFO_LOG_BUFFER, 
# 757
CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES, 
# 766
CU_JIT_ERROR_LOG_BUFFER, 
# 775
CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES, 
# 783
CU_JIT_OPTIMIZATION_LEVEL, 
# 791
CU_JIT_TARGET_FROM_CUCONTEXT, 
# 799
CU_JIT_TARGET, 
# 808
CU_JIT_FALLBACK_STRATEGY, 
# 816
CU_JIT_GENERATE_DEBUG_INFO, 
# 823
CU_JIT_LOG_VERBOSE, 
# 830
CU_JIT_GENERATE_LINE_INFO, 
# 838
CU_JIT_CACHE_MODE, 
# 843
CU_JIT_NEW_SM3X_OPT, 
# 844
CU_JIT_FAST_COMPILE, 
# 846
CU_JIT_NUM_OPTIONS
# 848
} CUjit_option; 
# 871
typedef 
# 853
enum CUjit_target_enum { 
# 855
CU_TARGET_COMPUTE_10 = 10, 
# 856
CU_TARGET_COMPUTE_11, 
# 857
CU_TARGET_COMPUTE_12, 
# 858
CU_TARGET_COMPUTE_13, 
# 859
CU_TARGET_COMPUTE_20 = 20, 
# 860
CU_TARGET_COMPUTE_21, 
# 861
CU_TARGET_COMPUTE_30 = 30, 
# 862
CU_TARGET_COMPUTE_32 = 32, 
# 863
CU_TARGET_COMPUTE_35 = 35, 
# 864
CU_TARGET_COMPUTE_37 = 37, 
# 865
CU_TARGET_COMPUTE_50 = 50, 
# 866
CU_TARGET_COMPUTE_52 = 52, 
# 867
CU_TARGET_COMPUTE_53, 
# 868
CU_TARGET_COMPUTE_60 = 60, 
# 869
CU_TARGET_COMPUTE_61, 
# 870
CU_TARGET_COMPUTE_62
# 871
} CUjit_target; 
# 882
typedef 
# 876
enum CUjit_fallback_enum { 
# 878
CU_PREFER_PTX, 
# 880
CU_PREFER_BINARY
# 882
} CUjit_fallback; 
# 892
typedef 
# 887
enum CUjit_cacheMode_enum { 
# 889
CU_JIT_CACHE_OPTION_NONE, 
# 890
CU_JIT_CACHE_OPTION_CG, 
# 891
CU_JIT_CACHE_OPTION_CA
# 892
} CUjit_cacheMode; 
# 930
typedef 
# 897
enum CUjitInputType_enum { 
# 903
CU_JIT_INPUT_CUBIN, 
# 909
CU_JIT_INPUT_PTX, 
# 915
CU_JIT_INPUT_FATBINARY, 
# 921
CU_JIT_INPUT_OBJECT, 
# 927
CU_JIT_INPUT_LIBRARY, 
# 929
CU_JIT_NUM_INPUT_TYPES
# 930
} CUjitInputType; 
# 933
typedef struct CUlinkState_st *CUlinkState; 
# 945
typedef 
# 939
enum CUgraphicsRegisterFlags_enum { 
# 940
CU_GRAPHICS_REGISTER_FLAGS_NONE, 
# 941
CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY, 
# 942
CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD, 
# 943
CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 4, 
# 944
CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 8
# 945
} CUgraphicsRegisterFlags; 
# 954
typedef 
# 950
enum CUgraphicsMapResourceFlags_enum { 
# 951
CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE, 
# 952
CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY, 
# 953
CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD
# 954
} CUgraphicsMapResourceFlags; 
# 966
typedef 
# 959
enum CUarray_cubemap_face_enum { 
# 960
CU_CUBEMAP_FACE_POSITIVE_X, 
# 961
CU_CUBEMAP_FACE_NEGATIVE_X, 
# 962
CU_CUBEMAP_FACE_POSITIVE_Y, 
# 963
CU_CUBEMAP_FACE_NEGATIVE_Y, 
# 964
CU_CUBEMAP_FACE_POSITIVE_Z, 
# 965
CU_CUBEMAP_FACE_NEGATIVE_Z
# 966
} CUarray_cubemap_face; 
# 978
typedef 
# 971
enum CUlimit_enum { 
# 972
CU_LIMIT_STACK_SIZE, 
# 973
CU_LIMIT_PRINTF_FIFO_SIZE, 
# 974
CU_LIMIT_MALLOC_HEAP_SIZE, 
# 975
CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH, 
# 976
CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT, 
# 977
CU_LIMIT_MAX
# 978
} CUlimit; 
# 988
typedef 
# 983
enum CUresourcetype_enum { 
# 984
CU_RESOURCE_TYPE_ARRAY, 
# 985
CU_RESOURCE_TYPE_MIPMAPPED_ARRAY, 
# 986
CU_RESOURCE_TYPE_LINEAR, 
# 987
CU_RESOURCE_TYPE_PITCH2D
# 988
} CUresourcetype; 
# 1389
typedef 
# 993
enum cudaError_enum { 
# 999
CUDA_SUCCESS, 
# 1005
CUDA_ERROR_INVALID_VALUE, 
# 1011
CUDA_ERROR_OUT_OF_MEMORY, 
# 1017
CUDA_ERROR_NOT_INITIALIZED, 
# 1022
CUDA_ERROR_DEINITIALIZED, 
# 1029
CUDA_ERROR_PROFILER_DISABLED, 
# 1037
CUDA_ERROR_PROFILER_NOT_INITIALIZED, 
# 1044
CUDA_ERROR_PROFILER_ALREADY_STARTED, 
# 1051
CUDA_ERROR_PROFILER_ALREADY_STOPPED, 
# 1057
CUDA_ERROR_NO_DEVICE = 100, 
# 1063
CUDA_ERROR_INVALID_DEVICE, 
# 1070
CUDA_ERROR_INVALID_IMAGE = 200, 
# 1080
CUDA_ERROR_INVALID_CONTEXT, 
# 1089
CUDA_ERROR_CONTEXT_ALREADY_CURRENT, 
# 1094
CUDA_ERROR_MAP_FAILED = 205, 
# 1099
CUDA_ERROR_UNMAP_FAILED, 
# 1105
CUDA_ERROR_ARRAY_IS_MAPPED, 
# 1110
CUDA_ERROR_ALREADY_MAPPED, 
# 1118
CUDA_ERROR_NO_BINARY_FOR_GPU, 
# 1123
CUDA_ERROR_ALREADY_ACQUIRED, 
# 1128
CUDA_ERROR_NOT_MAPPED, 
# 1134
CUDA_ERROR_NOT_MAPPED_AS_ARRAY, 
# 1140
CUDA_ERROR_NOT_MAPPED_AS_POINTER, 
# 1146
CUDA_ERROR_ECC_UNCORRECTABLE, 
# 1152
CUDA_ERROR_UNSUPPORTED_LIMIT, 
# 1159
CUDA_ERROR_CONTEXT_ALREADY_IN_USE, 
# 1165
CUDA_ERROR_PEER_ACCESS_UNSUPPORTED, 
# 1170
CUDA_ERROR_INVALID_PTX, 
# 1175
CUDA_ERROR_INVALID_GRAPHICS_CONTEXT, 
# 1181
CUDA_ERROR_NVLINK_UNCORRECTABLE, 
# 1186
CUDA_ERROR_INVALID_SOURCE = 300, 
# 1191
CUDA_ERROR_FILE_NOT_FOUND, 
# 1196
CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, 
# 1201
CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, 
# 1206
CUDA_ERROR_OPERATING_SYSTEM, 
# 1212
CUDA_ERROR_INVALID_HANDLE = 400, 
# 1218
CUDA_ERROR_NOT_FOUND = 500, 
# 1226
CUDA_ERROR_NOT_READY = 600, 
# 1235
CUDA_ERROR_ILLEGAL_ADDRESS = 700, 
# 1246
CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, 
# 1256
CUDA_ERROR_LAUNCH_TIMEOUT, 
# 1262
CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, 
# 1269
CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED, 
# 1276
CUDA_ERROR_PEER_ACCESS_NOT_ENABLED, 
# 1282
CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708, 
# 1289
CUDA_ERROR_CONTEXT_IS_DESTROYED, 
# 1297
CUDA_ERROR_ASSERT, 
# 1304
CUDA_ERROR_TOO_MANY_PEERS, 
# 1310
CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED, 
# 1316
CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED, 
# 1325
CUDA_ERROR_HARDWARE_STACK_ERROR, 
# 1333
CUDA_ERROR_ILLEGAL_INSTRUCTION, 
# 1342
CUDA_ERROR_MISALIGNED_ADDRESS, 
# 1353
CUDA_ERROR_INVALID_ADDRESS_SPACE, 
# 1361
CUDA_ERROR_INVALID_PC, 
# 1371
CUDA_ERROR_LAUNCH_FAILED, 
# 1377
CUDA_ERROR_NOT_PERMITTED = 800, 
# 1383
CUDA_ERROR_NOT_SUPPORTED, 
# 1388
CUDA_ERROR_UNKNOWN = 999
# 1389
} CUresult; 
# 1398
typedef 
# 1394
enum CUdevice_P2PAttribute_enum { 
# 1395
CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 1, 
# 1396
CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED, 
# 1397
CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED
# 1398
} CUdevice_P2PAttribute; 
# 1412
typedef void (*CUstreamCallback)(CUstream hStream, CUresult status, void * userData); 
# 1420
typedef ::size_t (*CUoccupancyB2DSize)(int blockSize); 
# 1496
typedef 
# 1475
struct CUDA_MEMCPY2D_st { 
# 1476
::size_t srcXInBytes; 
# 1477
::size_t srcY; 
# 1479
CUmemorytype srcMemoryType; 
# 1480
const void *srcHost; 
# 1481
CUdeviceptr srcDevice; 
# 1482
CUarray srcArray; 
# 1483
::size_t srcPitch; 
# 1485
::size_t dstXInBytes; 
# 1486
::size_t dstY; 
# 1488
CUmemorytype dstMemoryType; 
# 1489
void *dstHost; 
# 1490
CUdeviceptr dstDevice; 
# 1491
CUarray dstArray; 
# 1492
::size_t dstPitch; 
# 1494
::size_t WidthInBytes; 
# 1495
::size_t Height; 
# 1496
} CUDA_MEMCPY2D; 
# 1529
typedef 
# 1501
struct CUDA_MEMCPY3D_st { 
# 1502
::size_t srcXInBytes; 
# 1503
::size_t srcY; 
# 1504
::size_t srcZ; 
# 1505
::size_t srcLOD; 
# 1506
CUmemorytype srcMemoryType; 
# 1507
const void *srcHost; 
# 1508
CUdeviceptr srcDevice; 
# 1509
CUarray srcArray; 
# 1510
void *reserved0; 
# 1511
::size_t srcPitch; 
# 1512
::size_t srcHeight; 
# 1514
::size_t dstXInBytes; 
# 1515
::size_t dstY; 
# 1516
::size_t dstZ; 
# 1517
::size_t dstLOD; 
# 1518
CUmemorytype dstMemoryType; 
# 1519
void *dstHost; 
# 1520
CUdeviceptr dstDevice; 
# 1521
CUarray dstArray; 
# 1522
void *reserved1; 
# 1523
::size_t dstPitch; 
# 1524
::size_t dstHeight; 
# 1526
::size_t WidthInBytes; 
# 1527
::size_t Height; 
# 1528
::size_t Depth; 
# 1529
} CUDA_MEMCPY3D; 
# 1562
typedef 
# 1534
struct CUDA_MEMCPY3D_PEER_st { 
# 1535
::size_t srcXInBytes; 
# 1536
::size_t srcY; 
# 1537
::size_t srcZ; 
# 1538
::size_t srcLOD; 
# 1539
CUmemorytype srcMemoryType; 
# 1540
const void *srcHost; 
# 1541
CUdeviceptr srcDevice; 
# 1542
CUarray srcArray; 
# 1543
CUcontext srcContext; 
# 1544
::size_t srcPitch; 
# 1545
::size_t srcHeight; 
# 1547
::size_t dstXInBytes; 
# 1548
::size_t dstY; 
# 1549
::size_t dstZ; 
# 1550
::size_t dstLOD; 
# 1551
CUmemorytype dstMemoryType; 
# 1552
void *dstHost; 
# 1553
CUdeviceptr dstDevice; 
# 1554
CUarray dstArray; 
# 1555
CUcontext dstContext; 
# 1556
::size_t dstPitch; 
# 1557
::size_t dstHeight; 
# 1559
::size_t WidthInBytes; 
# 1560
::size_t Height; 
# 1561
::size_t Depth; 
# 1562
} CUDA_MEMCPY3D_PEER; 
# 1574
typedef 
# 1567
struct CUDA_ARRAY_DESCRIPTOR_st { 
# 1569
::size_t Width; 
# 1570
::size_t Height; 
# 1572
CUarray_format Format; 
# 1573
unsigned NumChannels; 
# 1574
} CUDA_ARRAY_DESCRIPTOR; 
# 1588
typedef 
# 1579
struct CUDA_ARRAY3D_DESCRIPTOR_st { 
# 1581
::size_t Width; 
# 1582
::size_t Height; 
# 1583
::size_t Depth; 
# 1585
CUarray_format Format; 
# 1586
unsigned NumChannels; 
# 1587
unsigned Flags; 
# 1588
} CUDA_ARRAY3D_DESCRIPTOR; 
# 1628
typedef 
# 1597
struct CUDA_RESOURCE_DESC_st { 
# 1599
CUresourcetype resType; 
# 1601
union { 
# 1602
struct { 
# 1603
CUarray hArray; 
# 1604
} array; 
# 1605
struct { 
# 1606
CUmipmappedArray hMipmappedArray; 
# 1607
} mipmap; 
# 1608
struct { 
# 1609
CUdeviceptr devPtr; 
# 1610
CUarray_format format; 
# 1611
unsigned numChannels; 
# 1612
::size_t sizeInBytes; 
# 1613
} linear; 
# 1614
struct { 
# 1615
CUdeviceptr devPtr; 
# 1616
CUarray_format format; 
# 1617
unsigned numChannels; 
# 1618
::size_t width; 
# 1619
::size_t height; 
# 1620
::size_t pitchInBytes; 
# 1621
} pitch2D; 
# 1622
struct { 
# 1623
int reserved[32]; 
# 1624
} reserved; 
# 1625
} res; 
# 1627
unsigned flags; 
# 1628
} CUDA_RESOURCE_DESC; 
# 1644
typedef 
# 1633
struct CUDA_TEXTURE_DESC_st { 
# 1634
CUaddress_mode addressMode[3]; 
# 1635
CUfilter_mode filterMode; 
# 1636
unsigned flags; 
# 1637
unsigned maxAnisotropy; 
# 1638
CUfilter_mode mipmapFilterMode; 
# 1639
float mipmapLevelBias; 
# 1640
float minMipmapLevelClamp; 
# 1641
float maxMipmapLevelClamp; 
# 1642
float borderColor[4]; 
# 1643
int reserved[12]; 
# 1644
} CUDA_TEXTURE_DESC; 
# 1686
typedef 
# 1649
enum CUresourceViewFormat_enum { 
# 1651
CU_RES_VIEW_FORMAT_NONE, 
# 1652
CU_RES_VIEW_FORMAT_UINT_1X8, 
# 1653
CU_RES_VIEW_FORMAT_UINT_2X8, 
# 1654
CU_RES_VIEW_FORMAT_UINT_4X8, 
# 1655
CU_RES_VIEW_FORMAT_SINT_1X8, 
# 1656
CU_RES_VIEW_FORMAT_SINT_2X8, 
# 1657
CU_RES_VIEW_FORMAT_SINT_4X8, 
# 1658
CU_RES_VIEW_FORMAT_UINT_1X16, 
# 1659
CU_RES_VIEW_FORMAT_UINT_2X16, 
# 1660
CU_RES_VIEW_FORMAT_UINT_4X16, 
# 1661
CU_RES_VIEW_FORMAT_SINT_1X16, 
# 1662
CU_RES_VIEW_FORMAT_SINT_2X16, 
# 1663
CU_RES_VIEW_FORMAT_SINT_4X16, 
# 1664
CU_RES_VIEW_FORMAT_UINT_1X32, 
# 1665
CU_RES_VIEW_FORMAT_UINT_2X32, 
# 1666
CU_RES_VIEW_FORMAT_UINT_4X32, 
# 1667
CU_RES_VIEW_FORMAT_SINT_1X32, 
# 1668
CU_RES_VIEW_FORMAT_SINT_2X32, 
# 1669
CU_RES_VIEW_FORMAT_SINT_4X32, 
# 1670
CU_RES_VIEW_FORMAT_FLOAT_1X16, 
# 1671
CU_RES_VIEW_FORMAT_FLOAT_2X16, 
# 1672
CU_RES_VIEW_FORMAT_FLOAT_4X16, 
# 1673
CU_RES_VIEW_FORMAT_FLOAT_1X32, 
# 1674
CU_RES_VIEW_FORMAT_FLOAT_2X32, 
# 1675
CU_RES_VIEW_FORMAT_FLOAT_4X32, 
# 1676
CU_RES_VIEW_FORMAT_UNSIGNED_BC1, 
# 1677
CU_RES_VIEW_FORMAT_UNSIGNED_BC2, 
# 1678
CU_RES_VIEW_FORMAT_UNSIGNED_BC3, 
# 1679
CU_RES_VIEW_FORMAT_UNSIGNED_BC4, 
# 1680
CU_RES_VIEW_FORMAT_SIGNED_BC4, 
# 1681
CU_RES_VIEW_FORMAT_UNSIGNED_BC5, 
# 1682
CU_RES_VIEW_FORMAT_SIGNED_BC5, 
# 1683
CU_RES_VIEW_FORMAT_UNSIGNED_BC6H, 
# 1684
CU_RES_VIEW_FORMAT_SIGNED_BC6H, 
# 1685
CU_RES_VIEW_FORMAT_UNSIGNED_BC7
# 1686
} CUresourceViewFormat; 
# 1702
typedef 
# 1691
struct CUDA_RESOURCE_VIEW_DESC_st { 
# 1693
CUresourceViewFormat format; 
# 1694
::size_t width; 
# 1695
::size_t height; 
# 1696
::size_t depth; 
# 1697
unsigned firstMipmapLevel; 
# 1698
unsigned lastMipmapLevel; 
# 1699
unsigned firstLayer; 
# 1700
unsigned lastLayer; 
# 1701
unsigned reserved[16]; 
# 1702
} CUDA_RESOURCE_VIEW_DESC; 
# 1710
typedef 
# 1707
struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st { 
# 1708
unsigned long long p2pToken; 
# 1709
unsigned vaSpaceToken; 
# 1710
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS; 
# 1857
CUresult cuGetErrorString(CUresult error, const char ** pStr); 
# 1876
CUresult cuGetErrorName(CUresult error, const char ** pStr); 
# 1908
CUresult cuInit(unsigned Flags); 
# 1938
CUresult cuDriverGetVersion(int * driverVersion); 
# 1978
CUresult cuDeviceGet(CUdevice * device, int ordinal); 
# 2003
CUresult cuDeviceGetCount(int * count); 
# 2031
CUresult cuDeviceGetName(char * name, int len, CUdevice dev); 
# 2058
CUresult cuDeviceTotalMem_v2(::size_t * bytes, CUdevice dev); 
# 2253
CUresult cuDeviceGetAttribute(int * pi, CUdevice_attribute attrib, CUdevice dev); 
# 2330
CUresult cuDeviceGetProperties(CUdevprop * prop, CUdevice dev); 
# 2363
CUresult cuDeviceComputeCapability(int * major, int * minor, CUdevice dev); 
# 2431
CUresult cuDevicePrimaryCtxRetain(CUcontext * pctx, CUdevice dev); 
# 2465
CUresult cuDevicePrimaryCtxRelease(CUdevice dev); 
# 2528
CUresult cuDevicePrimaryCtxSetFlags(CUdevice dev, unsigned flags); 
# 2552
CUresult cuDevicePrimaryCtxGetState(CUdevice dev, unsigned * flags, int * active); 
# 2590
CUresult cuDevicePrimaryCtxReset(CUdevice dev); 
# 2696
CUresult cuCtxCreate_v2(CUcontext * pctx, unsigned flags, CUdevice dev); 
# 2736
CUresult cuCtxDestroy_v2(CUcontext ctx); 
# 2772
CUresult cuCtxPushCurrent_v2(CUcontext ctx); 
# 2806
CUresult cuCtxPopCurrent_v2(CUcontext * pctx); 
# 2832
CUresult cuCtxSetCurrent(CUcontext ctx); 
# 2851
CUresult cuCtxGetCurrent(CUcontext * pctx); 
# 2881
CUresult cuCtxGetDevice(CUdevice * device); 
# 2909
CUresult cuCtxGetFlags(unsigned * flags); 
# 2939
CUresult cuCtxSynchronize(); 
# 3034
CUresult cuCtxSetLimit(CUlimit limit, ::size_t value); 
# 3073
CUresult cuCtxGetLimit(::size_t * pvalue, CUlimit limit); 
# 3116
CUresult cuCtxGetCacheConfig(CUfunc_cache * pconfig); 
# 3166
CUresult cuCtxSetCacheConfig(CUfunc_cache config); 
# 3208
CUresult cuCtxGetSharedMemConfig(CUsharedconfig * pConfig); 
# 3260
CUresult cuCtxSetSharedMemConfig(CUsharedconfig config); 
# 3298
CUresult cuCtxGetApiVersion(CUcontext ctx, unsigned * version); 
# 3337
CUresult cuCtxGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 3392
CUresult cuCtxAttach(CUcontext * pctx, unsigned flags); 
# 3428
CUresult cuCtxDetach(CUcontext ctx); 
# 3482
CUresult cuModuleLoad(CUmodule * module, const char * fname); 
# 3518
CUresult cuModuleLoadData(CUmodule * module, const void * image); 
# 3560
CUresult cuModuleLoadDataEx(CUmodule * module, const void * image, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 3601
CUresult cuModuleLoadFatBinary(CUmodule * module, const void * fatCubin); 
# 3626
CUresult cuModuleUnload(CUmodule hmod); 
# 3656
CUresult cuModuleGetFunction(CUfunction * hfunc, CUmodule hmod, const char * name); 
# 3690
CUresult cuModuleGetGlobal_v2(CUdeviceptr * dptr, ::size_t * bytes, CUmodule hmod, const char * name); 
# 3724
CUresult cuModuleGetTexRef(CUtexref * pTexRef, CUmodule hmod, const char * name); 
# 3755
CUresult cuModuleGetSurfRef(CUsurfref * pSurfRef, CUmodule hmod, const char * name); 
# 3797
CUresult cuLinkCreate_v2(unsigned numOptions, CUjit_option * options, void ** optionValues, CUlinkState * stateOut); 
# 3834
CUresult cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void * data, ::size_t size, const char * name, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 3873
CUresult cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char * path, unsigned numOptions, CUjit_option * options, void ** optionValues); 
# 3900
CUresult cuLinkComplete(CUlinkState state, void ** cubinOut, ::size_t * sizeOut); 
# 3914
CUresult cuLinkDestroy(CUlinkState state); 
# 3962
CUresult cuMemGetInfo_v2(::size_t * free, ::size_t * total); 
# 3995
CUresult cuMemAlloc_v2(CUdeviceptr * dptr, ::size_t bytesize); 
# 4056
CUresult cuMemAllocPitch_v2(CUdeviceptr * dptr, ::size_t * pPitch, ::size_t WidthInBytes, ::size_t Height, unsigned ElementSizeBytes); 
# 4085
CUresult cuMemFree_v2(CUdeviceptr dptr); 
# 4118
CUresult cuMemGetAddressRange_v2(CUdeviceptr * pbase, ::size_t * psize, CUdeviceptr dptr); 
# 4164
CUresult cuMemAllocHost_v2(void ** pp, ::size_t bytesize); 
# 4194
CUresult cuMemFreeHost(void * p); 
# 4276
CUresult cuMemHostAlloc(void ** pp, ::size_t bytesize, unsigned Flags); 
# 4329
CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr * pdptr, void * p, unsigned Flags); 
# 4354
CUresult cuMemHostGetFlags(unsigned * pFlags, void * p); 
# 4464
CUresult cuMemAllocManaged(CUdeviceptr * dptr, ::size_t bytesize, unsigned flags); 
# 4493
CUresult cuDeviceGetByPCIBusId(CUdevice * dev, const char * pciBusId); 
# 4521
CUresult cuDeviceGetPCIBusId(char * pciBusId, int len, CUdevice dev); 
# 4563
CUresult cuIpcGetEventHandle(CUipcEventHandle * pHandle, CUevent event); 
# 4600
CUresult cuIpcOpenEventHandle(CUevent * phEvent, CUipcEventHandle handle); 
# 4637
CUresult cuIpcGetMemHandle(CUipcMemHandle * pHandle, CUdeviceptr dptr); 
# 4688
CUresult cuIpcOpenMemHandle(CUdeviceptr * pdptr, CUipcMemHandle handle, unsigned Flags); 
# 4719
CUresult cuIpcCloseMemHandle(CUdeviceptr dptr); 
# 4802
CUresult cuMemHostRegister_v2(void * p, ::size_t bytesize, unsigned Flags); 
# 4826
CUresult cuMemHostUnregister(void * p); 
# 4862
CUresult cuMemcpy(CUdeviceptr dst, CUdeviceptr src, ::size_t ByteCount); 
# 4891
CUresult cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, ::size_t ByteCount); 
# 4927
CUresult cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void * srcHost, ::size_t ByteCount); 
# 4960
CUresult cuMemcpyDtoH_v2(void * dstHost, CUdeviceptr srcDevice, ::size_t ByteCount); 
# 4993
CUresult cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, ::size_t ByteCount); 
# 5028
CUresult cuMemcpyDtoA_v2(CUarray dstArray, ::size_t dstOffset, CUdeviceptr srcDevice, ::size_t ByteCount); 
# 5065
CUresult cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, ::size_t srcOffset, ::size_t ByteCount); 
# 5100
CUresult cuMemcpyHtoA_v2(CUarray dstArray, ::size_t dstOffset, const void * srcHost, ::size_t ByteCount); 
# 5135
CUresult cuMemcpyAtoH_v2(void * dstHost, CUarray srcArray, ::size_t srcOffset, ::size_t ByteCount); 
# 5174
CUresult cuMemcpyAtoA_v2(CUarray dstArray, ::size_t dstOffset, CUarray srcArray, ::size_t srcOffset, ::size_t ByteCount); 
# 5335
CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D * pCopy); 
# 5494
CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D * pCopy); 
# 5662
CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D * pCopy); 
# 5687
CUresult cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER * pCopy); 
# 5727
CUresult cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, ::size_t ByteCount, CUstream hStream); 
# 5758
CUresult cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, ::size_t ByteCount, CUstream hStream); 
# 5797
CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void * srcHost, ::size_t ByteCount, CUstream hStream); 
# 5834
CUresult cuMemcpyDtoHAsync_v2(void * dstHost, CUdeviceptr srcDevice, ::size_t ByteCount, CUstream hStream); 
# 5871
CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, ::size_t ByteCount, CUstream hStream); 
# 5910
CUresult cuMemcpyHtoAAsync_v2(CUarray dstArray, ::size_t dstOffset, const void * srcHost, ::size_t ByteCount, CUstream hStream); 
# 5949
CUresult cuMemcpyAtoHAsync_v2(void * dstHost, CUarray srcArray, ::size_t srcOffset, ::size_t ByteCount, CUstream hStream); 
# 6114
CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D * pCopy, CUstream hStream); 
# 6286
CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D * pCopy, CUstream hStream); 
# 6313
CUresult cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER * pCopy, CUstream hStream); 
# 6349
CUresult cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, ::size_t N); 
# 6383
CUresult cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, ::size_t N); 
# 6417
CUresult cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned ui, ::size_t N); 
# 6456
CUresult cuMemsetD2D8_v2(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned char uc, ::size_t Width, ::size_t Height); 
# 6496
CUresult cuMemsetD2D16_v2(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned short us, ::size_t Width, ::size_t Height); 
# 6536
CUresult cuMemsetD2D32_v2(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned ui, ::size_t Width, ::size_t Height); 
# 6572
CUresult cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, ::size_t N, CUstream hStream); 
# 6608
CUresult cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, ::size_t N, CUstream hStream); 
# 6643
CUresult cuMemsetD32Async(CUdeviceptr dstDevice, unsigned ui, ::size_t N, CUstream hStream); 
# 6684
CUresult cuMemsetD2D8Async(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned char uc, ::size_t Width, ::size_t Height, CUstream hStream); 
# 6726
CUresult cuMemsetD2D16Async(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned short us, ::size_t Width, ::size_t Height, CUstream hStream); 
# 6768
CUresult cuMemsetD2D32Async(CUdeviceptr dstDevice, ::size_t dstPitch, unsigned ui, ::size_t Width, ::size_t Height, CUstream hStream); 
# 6871
CUresult cuArrayCreate_v2(CUarray * pHandle, const CUDA_ARRAY_DESCRIPTOR * pAllocateArray); 
# 6904
CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR * pArrayDescriptor, CUarray hArray); 
# 6935
CUresult cuArrayDestroy(CUarray hArray); 
# 7115
CUresult cuArray3DCreate_v2(CUarray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pAllocateArray); 
# 7151
CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR * pArrayDescriptor, CUarray hArray); 
# 7278
CUresult cuMipmappedArrayCreate(CUmipmappedArray * pHandle, const CUDA_ARRAY3D_DESCRIPTOR * pMipmappedArrayDesc, unsigned numMipmapLevels); 
# 7304
CUresult cuMipmappedArrayGetLevel(CUarray * pLevelArray, CUmipmappedArray hMipmappedArray, unsigned level); 
# 7324
CUresult cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray); 
# 7570
CUresult cuPointerGetAttribute(void * data, CUpointer_attribute attribute, CUdeviceptr ptr); 
# 7639
CUresult cuMemPrefetchAsync(CUdeviceptr devPtr, ::size_t count, CUdevice dstDevice, CUstream hStream); 
# 7725
CUresult cuMemAdvise(CUdeviceptr devPtr, ::size_t count, CUmem_advise advice, CUdevice device); 
# 7782
CUresult cuMemRangeGetAttribute(void * data, ::size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, ::size_t count); 
# 7821
CUresult cuMemRangeGetAttributes(void ** data, ::size_t * dataSizes, CUmem_range_attribute * attributes, ::size_t numAttributes, CUdeviceptr devPtr, ::size_t count); 
# 7865
CUresult cuPointerSetAttribute(const void * value, CUpointer_attribute attribute, CUdeviceptr ptr); 
# 7907
CUresult cuPointerGetAttributes(unsigned numAttributes, CUpointer_attribute * attributes, void ** data, CUdeviceptr ptr); 
# 7955
CUresult cuStreamCreate(CUstream * phStream, unsigned Flags); 
# 8003
CUresult cuStreamCreateWithPriority(CUstream * phStream, unsigned flags, int priority); 
# 8033
CUresult cuStreamGetPriority(CUstream hStream, int * priority); 
# 8060
CUresult cuStreamGetFlags(CUstream hStream, unsigned * flags); 
# 8101
CUresult cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned Flags); 
# 8172
CUresult cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void * userData, unsigned flags); 
# 8251
CUresult cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, ::size_t length, unsigned flags); 
# 8282
CUresult cuStreamQuery(CUstream hStream); 
# 8309
CUresult cuStreamSynchronize(CUstream hStream); 
# 8338
CUresult cuStreamDestroy_v2(CUstream hStream); 
# 8393
CUresult cuEventCreate(CUevent * phEvent, unsigned Flags); 
# 8429
CUresult cuEventRecord(CUevent hEvent, CUstream hStream); 
# 8463
CUresult cuEventQuery(CUevent hEvent); 
# 8497
CUresult cuEventSynchronize(CUevent hEvent); 
# 8526
CUresult cuEventDestroy_v2(CUevent hEvent); 
# 8570
CUresult cuEventElapsedTime(float * pMilliseconds, CUevent hStart, CUevent hEnd); 
# 8605
CUresult cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags); 
# 8638
CUresult cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned flags); 
# 8670
CUresult cuStreamBatchMemOp(CUstream stream, unsigned count, CUstreamBatchMemOpParams * paramArray, unsigned flags); 
# 8738
CUresult cuFuncGetAttribute(int * pi, CUfunction_attribute attrib, CUfunction hfunc); 
# 8781
CUresult cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config); 
# 8833
CUresult cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config); 
# 8947
CUresult cuLaunchKernel(CUfunction f, unsigned gridDimX, unsigned gridDimY, unsigned gridDimZ, unsigned blockDimX, unsigned blockDimY, unsigned blockDimZ, unsigned sharedMemBytes, CUstream hStream, void ** kernelParams, void ** extra); 
# 9008
CUresult cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z); 
# 9042
CUresult cuFuncSetSharedSize(CUfunction hfunc, unsigned bytes); 
# 9074
CUresult cuParamSetSize(CUfunction hfunc, unsigned numbytes); 
# 9107
CUresult cuParamSeti(CUfunction hfunc, int offset, unsigned value); 
# 9140
CUresult cuParamSetf(CUfunction hfunc, int offset, float value); 
# 9175
CUresult cuParamSetv(CUfunction hfunc, int offset, void * ptr, unsigned numbytes); 
# 9212
CUresult cuLaunch(CUfunction f); 
# 9251
CUresult cuLaunchGrid(CUfunction f, int grid_width, int grid_height); 
# 9298
CUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream); 
# 9323
CUresult cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef); 
# 9361
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, CUfunction func, int blockSize, ::size_t dynamicSMemSize); 
# 9401
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, CUfunction func, int blockSize, ::size_t dynamicSMemSize, unsigned flags); 
# 9451
CUresult cuOccupancyMaxPotentialBlockSize(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, ::size_t dynamicSMemSize, int blockSizeLimit); 
# 9495
CUresult cuOccupancyMaxPotentialBlockSizeWithFlags(int * minGridSize, int * blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, ::size_t dynamicSMemSize, int blockSizeLimit, unsigned flags); 
# 9538
CUresult cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned Flags); 
# 9565
CUresult cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned Flags); 
# 9609
CUresult cuTexRefSetAddress_v2(::size_t * ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, ::size_t bytes); 
# 9661
CUresult cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR * desc, CUdeviceptr dptr, ::size_t Pitch); 
# 9690
CUresult cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents); 
# 9730
CUresult cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am); 
# 9763
CUresult cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm); 
# 9796
CUresult cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm); 
# 9822
CUresult cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias); 
# 9850
CUresult cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp); 
# 9876
CUresult cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned maxAniso); 
# 9906
CUresult cuTexRefSetBorderColor(CUtexref hTexRef, float * pBorderColor); 
# 9941
CUresult cuTexRefSetFlags(CUtexref hTexRef, unsigned Flags); 
# 9967
CUresult cuTexRefGetAddress_v2(CUdeviceptr * pdptr, CUtexref hTexRef); 
# 9993
CUresult cuTexRefGetArray(CUarray * phArray, CUtexref hTexRef); 
# 10018
CUresult cuTexRefGetMipmappedArray(CUmipmappedArray * phMipmappedArray, CUtexref hTexRef); 
# 10044
CUresult cuTexRefGetAddressMode(CUaddress_mode * pam, CUtexref hTexRef, int dim); 
# 10068
CUresult cuTexRefGetFilterMode(CUfilter_mode * pfm, CUtexref hTexRef); 
# 10094
CUresult cuTexRefGetFormat(CUarray_format * pFormat, int * pNumChannels, CUtexref hTexRef); 
# 10118
CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode * pfm, CUtexref hTexRef); 
# 10142
CUresult cuTexRefGetMipmapLevelBias(float * pbias, CUtexref hTexRef); 
# 10167
CUresult cuTexRefGetMipmapLevelClamp(float * pminMipmapLevelClamp, float * pmaxMipmapLevelClamp, CUtexref hTexRef); 
# 10191
CUresult cuTexRefGetMaxAnisotropy(int * pmaxAniso, CUtexref hTexRef); 
# 10218
CUresult cuTexRefGetBorderColor(float * pBorderColor, CUtexref hTexRef); 
# 10241
CUresult cuTexRefGetFlags(unsigned * pFlags, CUtexref hTexRef); 
# 10280
CUresult cuTexRefCreate(CUtexref * pTexRef); 
# 10300
CUresult cuTexRefDestroy(CUtexref hTexRef); 
# 10339
CUresult cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned Flags); 
# 10360
CUresult cuSurfRefGetArray(CUarray * phArray, CUsurfref hSurfRef); 
# 10582
CUresult cuTexObjectCreate(CUtexObject * pTexObject, const CUDA_RESOURCE_DESC * pResDesc, const CUDA_TEXTURE_DESC * pTexDesc, const CUDA_RESOURCE_VIEW_DESC * pResViewDesc); 
# 10600
CUresult cuTexObjectDestroy(CUtexObject texObject); 
# 10619
CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUtexObject texObject); 
# 10638
CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC * pTexDesc, CUtexObject texObject); 
# 10658
CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC * pResViewDesc, CUtexObject texObject); 
# 10699
CUresult cuSurfObjectCreate(CUsurfObject * pSurfObject, const CUDA_RESOURCE_DESC * pResDesc); 
# 10717
CUresult cuSurfObjectDestroy(CUsurfObject surfObject); 
# 10736
CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC * pResDesc, CUsurfObject surfObject); 
# 10778
CUresult cuDeviceCanAccessPeer(int * canAccessPeer, CUdevice dev, CUdevice peerDev); 
# 10815
CUresult cuDeviceGetP2PAttribute(int * value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice); 
# 10864
CUresult cuCtxEnablePeerAccess(CUcontext peerContext, unsigned Flags); 
# 10889
CUresult cuCtxDisablePeerAccess(CUcontext peerContext); 
# 10933
CUresult cuGraphicsUnregisterResource(CUgraphicsResource resource); 
# 10971
CUresult cuGraphicsSubResourceGetMappedArray(CUarray * pArray, CUgraphicsResource resource, unsigned arrayIndex, unsigned mipLevel); 
# 11002
CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray * pMipmappedArray, CUgraphicsResource resource); 
# 11038
CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr * pDevPtr, ::size_t * pSize, CUgraphicsResource resource); 
# 11079
CUresult cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned flags); 
# 11118
CUresult cuGraphicsMapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream); 
# 11154
CUresult cuGraphicsUnmapResources(unsigned count, CUgraphicsResource * resources, CUstream hStream); 
# 11158
CUresult cuGetExportTable(const void ** ppExportTable, const CUuuid * pExportTableId); 
# 11477
}
# 33 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/cvec.h"
struct cvec2f { float x, y; }; 
# 34
struct cvec3f { float x, y, z; }; 
# 35
struct cvec4f { float x, y, z, w; }; 
# 37
struct cvec2i { int x, y; }; 
# 38
struct cvec3i { int x, y, z; }; 
# 39
struct cvec4i { int x, y, z, w; }; 
# 41
inline void zerovec(cvec2f &v) { (v.x) = (0.0F); (v.y) = (0.0F); } 
# 42
inline void zerovec(cvec3f &v) { (v.x) = (0.0F); (v.y) = (0.0F); (v.z) = (0.0F); } 
# 43
inline void zerovec(cvec4f &v) { (v.x) = (0.0F); (v.y) = (0.0F); (v.z) = (0.0F); (v.w) = (0.0F); } 
# 45
inline void zerovec(cvec2i &v) { (v.x) = 0; (v.y) = 0; } 
# 46
inline void zerovec(cvec3i &v) { (v.x) = 0; (v.y) = 0; (v.z) = 0; } 
# 47
inline void zerovec(cvec4i &v) { (v.x) = 0; (v.y) = 0; (v.z) = 0; (v.w) = 0; } 
# 49
inline cvec2f gencvec2f(const float &x, const float &y) { cvec2f v; (v.x) = x; (v.y) = y; return v; } 
# 50
inline cvec3f gencvec3f(const float &x, const float &y, const float &z) { cvec3f v; (v.x) = x; (v.y) = y; (v.z) = z; return v; } 
# 51
inline cvec4f gencvec4f(const float &x, const float &y, const float &z, const float &w) { cvec4f v; (v.x) = x; (v.y) = y; (v.z) = z; (v.w) = w; return v; } 
# 53
inline cvec2i gencvec2i(const int &x, const int &y) { cvec2i v; (v.x) = x; (v.y) = y; return v; } 
# 54
inline cvec3i gencvec3i(const int &x, const int &y, const int &z) { cvec3i v; (v.x) = x; (v.y) = y; (v.z) = z; return v; } 
# 55
inline cvec4i gencvec4i(const int &x, const int &y, const int &z, const int &w) { cvec4i v; (v.x) = x; (v.y) = y; (v.z) = z; (v.w) = w; return v; } 
# 57
inline cvec2f negative(const cvec2f &v) { cvec2f n; (n.x) = (-(v.x)); (n.y) = (-(v.y)); return n; } 
# 58
inline cvec3f negative(const cvec3f &v) { cvec3f n; (n.x) = (-(v.x)); (n.y) = (-(v.y)); (n.z) = (-(v.z)); return n; } 
# 59
inline cvec4f negative(const cvec4f &v) { cvec4f n; (n.x) = (-(v.x)); (n.y) = (-(v.y)); (n.z) = (-(v.z)); (n.w) = (-(v.w)); return n; } 
# 61
inline float magsqr(const cvec2f &v) { return ((v.x) * (v.x)) + ((v.y) * (v.y)); } 
# 62
inline float magsqr(const cvec3f &v) { return (((v.x) * (v.x)) + ((v.y) * (v.y))) + ((v.z) * (v.z)); } 
# 63
inline float magsqr(const cvec4f &v) { return ((((v.x) * (v.x)) + ((v.y) * (v.y))) + ((v.z) * (v.z))) + ((v.w) * (v.w)); } 
# 66
inline cvec2f addvec(const cvec2f &v1, const cvec2f &v2) { cvec2f s; (s.x) = ((v1.x) + (v2.x)); (s.y) = ((v1.y) + (v2.y)); return s; } 
# 67
inline cvec3f addvec(const cvec3f &v1, const cvec3f &v2) { cvec3f s; (s.x) = ((v1.x) + (v2.x)); (s.y) = ((v1.y) + (v2.y)); (s.z) = ((v1.z) + (v2.z)); return s; } 
# 68
inline cvec4f addvec(const cvec4f &v1, const cvec4f &v2) { cvec4f s; (s.x) = ((v1.x) + (v2.x)); (s.y) = ((v1.y) + (v2.y)); (s.z) = ((v1.z) + (v2.z)); (s.w) = ((v1.w) + (v2.w)); return s; } 
# 70
inline cvec2f subvec(const cvec2f &v1, const cvec2f &v2) { cvec2f s; (s.x) = ((v1.x) - (v2.x)); (s.y) = ((v1.y) - (v2.y)); return s; } 
# 71
inline cvec3f subvec(const cvec3f &v1, const cvec3f &v2) { cvec3f s; (s.x) = ((v1.x) - (v2.x)); (s.y) = ((v1.y) - (v2.y)); (s.z) = ((v1.z) - (v2.z)); return s; } 
# 72
inline cvec4f subvec(const cvec4f &v1, const cvec4f &v2) { cvec4f s; (s.x) = ((v1.x) - (v2.x)); (s.y) = ((v1.y) - (v2.y)); (s.z) = ((v1.z) - (v2.z)); (s.w) = ((v1.w) - (v2.w)); return s; } 
# 74
inline cvec2f mulvec(const cvec2f &v1, const float &k) { cvec2f s; (s.x) = ((v1.x) * k); (s.y) = ((v1.y) * k); return s; } 
# 75
inline cvec3f mulvec(const cvec3f &v1, const float &k) { cvec3f s; (s.x) = ((v1.x) * k); (s.y) = ((v1.y) * k); (s.z) = ((v1.z) * k); return s; } 
# 76
inline cvec4f mulvec(const cvec4f &v1, const float &k) { cvec4f s; (s.x) = ((v1.x) * k); (s.y) = ((v1.y) * k); (s.z) = ((v1.z) * k); (s.w) = ((v1.w) * k); return s; } 
# 78
inline void mulvecInplace(cvec2f &v1, const float &k) { (v1.x) = ((v1.x) * k); (v1.y) = ((v1.y) * k); } 
# 79
inline void mulvecInplace(cvec3f &v1, const float &k) { (v1.x) = ((v1.x) * k); (v1.y) = ((v1.y) * k); (v1.z) = ((v1.z) * k); } 
# 80
inline void mulvecInplace(cvec4f &v1, const float &k) { (v1.x) = ((v1.x) * k); (v1.y) = ((v1.y) * k); (v1.z) = ((v1.z) * k); (v1.w) = ((v1.w) * k); } 
# 82
inline cvec2f operator+(const cvec2f &v1, const cvec2f &v2) { return addvec(v1, v2); } 
# 83
inline cvec3f operator+(const cvec3f &v1, const cvec3f &v2) { return addvec(v1, v2); } 
# 84
inline cvec4f operator+(const cvec4f &v1, const cvec4f &v2) { return addvec(v1, v2); } 
# 86
inline cvec2f operator-(const cvec2f &v1, const cvec2f &v2) { return subvec(v1, v2); } 
# 87
inline cvec3f operator-(const cvec3f &v1, const cvec3f &v2) { return subvec(v1, v2); } 
# 88
inline cvec4f operator-(const cvec4f &v1, const cvec4f &v2) { return subvec(v1, v2); } 
# 90
inline cvec2f operator*(const cvec2f &v1, const float &k) { return mulvec(v1, k); } 
# 91
inline cvec3f operator*(const cvec3f &v1, const float &k) { return mulvec(v1, k); } 
# 92
inline cvec4f operator*(const cvec4f &v1, const float &k) { return mulvec(v1, k); } 
# 94
inline cvec2f operator*(const float &k, const cvec2f &v1) { return mulvec(v1, k); } 
# 95
inline cvec3f operator*(const float &k, const cvec3f &v1) { return mulvec(v1, k); } 
# 96
inline cvec4f operator*(const float &k, const cvec4f &v1) { return mulvec(v1, k); } 
# 98
inline cvec2f &operator+=(cvec2f &v1, const cvec2f &v2) { (v1.x) += (v2.x); (v1.y) += (v2.y); return v1; } 
# 99
inline cvec3f &operator+=(cvec3f &v1, const cvec3f &v2) { (v1.x) += (v2.x); (v1.y) += (v2.y); (v1.z) += (v2.z); return v1; } 
# 100
inline cvec4f &operator+=(cvec4f &v1, const cvec4f &v2) { (v1.x) += (v2.x); (v1.y) += (v2.y); (v1.z) += (v2.z); (v1.w) += (v2.w); return v1; } 
# 102
inline cvec2f &operator-=(cvec2f &v1, const cvec2f &v2) { (v1.x) -= (v2.x); (v1.y) -= (v2.y); return v1; } 
# 103
inline cvec3f &operator-=(cvec3f &v1, const cvec3f &v2) { (v1.x) -= (v2.x); (v1.y) -= (v2.y); (v1.z) -= (v2.z); return v1; } 
# 104
inline cvec4f &operator-=(cvec4f &v1, const cvec4f &v2) { (v1.x) -= (v2.x); (v1.y) -= (v2.y); (v1.z) -= (v2.z); (v1.w) -= (v2.w); return v1; } 
# 106
inline cvec2f &operator*=(cvec2f &v1, const float &k) { (v1.x) *= k; (v1.y) *= k; return v1; } 
# 107
inline cvec3f &operator*=(cvec3f &v1, const float &k) { (v1.x) *= k; (v1.y) *= k; (v1.z) *= k; return v1; } 
# 108
inline cvec4f &operator*=(cvec4f &v1, const float &k) { (v1.x) *= k; (v1.y) *= k; (v1.z) *= k; (v1.w) *= k; return v1; } 
# 110
inline float dotvec(const cvec2f &v1, const cvec2f &v2) { return ((v1.x) * (v2.x)) + ((v1.y) * (v2.y)); } 
# 111
inline float dotvec(const cvec3f &v1, const cvec3f &v2) { return (((v1.x) * (v2.x)) + ((v1.y) * (v2.y))) + ((v1.z) * (v2.z)); } 
# 112
inline float dotvec(const cvec4f &v1, const cvec4f &v2) { return ((((v1.x) * (v2.x)) + ((v1.y) * (v2.y))) + ((v1.z) * (v2.z))) + ((v1.w) * (v2.w)); } 
# 114
inline bool equalvec(const cvec2f &v1, const cvec2f &v2) { return ((v1.x) == (v2.x)) && ((v1.y) == (v2.y)); } 
# 115
inline bool equalvec(const cvec3f &v1, const cvec3f &v2) { return ((v1.x) == (v2.x)) && ((v1.y) == (v2.y)) && ((v1.z) == (v2.z)); } 
# 116
inline bool equalvec(const cvec4f &v1, const cvec4f &v2) { return ((v1.x) == (v2.x)) && ((v1.y) == (v2.y)) && ((v1.z) == (v2.z)) && ((v1.w) == (v2.w)); } 
# 118
inline bool operator==(const cvec2f &v1, const cvec2f &v2) { return equalvec(v1, v2); } 
# 119
inline bool operator==(const cvec3f &v1, const cvec3f &v2) { return equalvec(v1, v2); } 
# 120
inline bool operator==(const cvec4f &v1, const cvec4f &v2) { return equalvec(v1, v2); } 
# 122
inline bool operator!=(const cvec2f &v1, const cvec2f &v2) { return !equalvec(v1, v2); } 
# 123
inline bool operator!=(const cvec3f &v1, const cvec3f &v2) { return !equalvec(v1, v2); } 
# 124
inline bool operator!=(const cvec4f &v1, const cvec4f &v2) { return !equalvec(v1, v2); } 
# 126
inline void clampInplace(float & val, const float & vmin = (0.0F), const float & vmax = (1.0F)); 
# 127
inline void clampInplace(cvec2f &v) { clampInplace(v.x); clampInplace(v.y); } 
# 128
inline void clampInplace(cvec3f &v) { clampInplace(v.x); clampInplace(v.y); clampInplace(v.z); } 
# 129
inline void clampInplace(cvec4f &v) { clampInplace(v.x); clampInplace(v.y); clampInplace(v.z); clampInplace(v.w); } 
# 131
inline cvec3f cvec4fxyz(cvec4f &v) { return gencvec3f(v.x, v.y, v.z); } 
# 133
template< class T> inline void disp2(const T &v) { printf("% 0.2f % 0.2f", (v.x), (v.y)); } 
# 134
template< class T> inline void disp3(const T &v) { printf("% 0.2f % 0.2f % 0.2f", (v.x), (v.y), (v.z)); } 
# 135
template< class T> inline void disp4(const T &v) { printf("% 0.2f % 0.2f % 0.2f % 0.2f", (v.x), (v.y), (v.z), (v.w)); } 
# 137
template< class T> cvec2f getcvec2f(const T &v) { cvec2f v2; (v2.x) = (v.x); (v2.y) = (v.y); return v2; } 
# 138
template< class T> cvec3f getcvec3f(const T &v) { cvec3f v3; (v3.x) = (v.x); (v3.y) = (v.y); (v3.z) = (v.z); return v3; } 
# 140
template< class T> inline float magvec(const T &v) { return sqrtf(magsqr(v)); } 
# 142
template< class T> inline void normalizeInplace(T &v) { 
# 143
float m = magvec(v); 
# 144
if (m != (0.0F)) { mulvecInplace(v, (1.0F) / m); }  
# 145
} 
# 147
template< class T> inline T lerp(const T &a, const T &b, float t) { 
# 148
return addvec(mulvec(a, (1.0F) - t), mulvec(b, t)); 
# 149
} 
# 151
inline cvec3f cross(const cvec3f &v1, const cvec3f &v2) 
# 152
{ 
# 153
cvec3f crossprod; 
# 154
(crossprod.x) = (((v1.y) * (v2.z)) - ((v1.z) * (v2.y))); 
# 155
(crossprod.y) = (((v1.z) * (v2.x)) - ((v1.x) * (v2.z))); 
# 156
(crossprod.z) = (((v1.x) * (v2.y)) - ((v1.y) * (v2.x))); 
# 157
return crossprod; 
# 158
} 
# 167
inline void matmultvec4f(const float *matrix, const cvec4f &v, cvec4f &ssv) 
# 168
{ 
# 169
(ssv.x) = (((((matrix[0]) * (v.x)) + ((matrix[4]) * (v.y))) + ((matrix[8]) * (v.z))) + ((matrix[12]) * (v.w))); 
# 170
(ssv.y) = (((((matrix[1]) * (v.x)) + ((matrix[5]) * (v.y))) + ((matrix[9]) * (v.z))) + ((matrix[13]) * (v.w))); 
# 171
(ssv.z) = (((((matrix[2]) * (v.x)) + ((matrix[6]) * (v.y))) + ((matrix[10]) * (v.z))) + ((matrix[14]) * (v.w))); 
# 172
(ssv.w) = (((((matrix[3]) * (v.x)) + ((matrix[7]) * (v.y))) + ((matrix[11]) * (v.z))) + ((matrix[15]) * (v.w))); 
# 173
} 
# 9 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/builtinTypes.h"
struct cvec2u { 
# 10
unsigned x, y; 
# 11
cvec2u() { } 
# 12
cvec2u(unsigned tx, unsigned ty) : x(tx), y(ty) { } 
# 13
cvec2u &operator=(cvec2u &t) { 
# 14
(x) = (t.x); 
# 15
(y) = (t.y); 
# 16
return *this; 
# 17
} 
# 18
}; 
# 20
struct ConstantState { 
# 22
int screenSizeX; 
# 23
int screenSizeY; 
# 24
float halfW, halfH; 
# 27
float projMatrix[16]; 
# 28
float viewMatrix[16]; 
# 29
float viewProjMatrix[16]; 
# 30
int debX, debY; 
# 32
void isConstantState() { } 
# 33
}; 
# 35
struct MutableState { 
# 37
float zBuffer[1024 * 768]; 
# 39
void isMutableState() { } 
# 40
}; 
# 42
struct Primitive { 
# 48
unsigned binID; 
# 50
}; 
# 52
struct Pixel : public Primitive { 
# 56
cvec2u pos; 
# 61
unsigned color; 
# 66
void setColor(float r, float g, float b, float a) { 
# 67
(color) = ((((((unsigned)(a * (255.0F))) << 24) | (((unsigned)(b * (255.0F))) << 16)) | (((unsigned)(g * (255.0F))) << 8)) | ((unsigned)(r * (255.0F)))); 
# 71
} 
# 72
}; 
# 74
struct boundingBox { 
# 75
cvec2f hi, lo; 
# 76
}; 
# 78
struct pointPrimitive : public Primitive { 
# 79
cvec2f pos; 
# 80
}; 
# 82
struct areaPrimitive : public Primitive { 
# 84
boundingBox bb; 
# 85
}; 
# 87
struct trianglePiko : public areaPrimitive { 
# 88
cvec3f v0, v1, v2; 
# 89
}; 
# 91
struct fragment : public pointPrimitive { 
# 92
float depth; 
# 93
unsigned color; 
# 94
}; 
# 96
struct particle : public areaPrimitive { 
# 97
cvec4f pos, tpos; 
# 98
}; 
# 4 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/internal/globalVariables.h"
int overrideBinID = (-1); 
# 67 "/usr/include/c++/5/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 69
namespace rel_ops { 
# 85
template< class _Tp> inline bool 
# 87
operator!=(const _Tp &__x, const _Tp &__y) 
# 88
{ return !(__x == __y); } 
# 98
template< class _Tp> inline bool 
# 100
operator>(const _Tp &__x, const _Tp &__y) 
# 101
{ return __y < __x; } 
# 111
template< class _Tp> inline bool 
# 113
operator<=(const _Tp &__x, const _Tp &__y) 
# 114
{ return !(__y < __x); } 
# 124
template< class _Tp> inline bool 
# 126
operator>=(const _Tp &__x, const _Tp &__y) 
# 127
{ return !(__x < __y); } 
# 130
}
# 132
}
# 77 "/usr/include/c++/5/utility" 3
namespace std __attribute((__visibility__("default"))) { 
# 81
template< class _Tp> class tuple_size; 
# 84
template< size_t _Int, class _Tp> class tuple_element; 
# 90
template< class _Tp1, class _Tp2> 
# 91
struct tuple_size< pair< _Tp1, _Tp2> >  : public integral_constant< unsigned long, 2UL>  { 
# 92
}; 
# 95
template< class _Tp1, class _Tp2> 
# 96
struct tuple_element< 0, pair< _Tp1, _Tp2> >  { 
# 97
typedef _Tp1 type; }; 
# 100
template< class _Tp1, class _Tp2> 
# 101
struct tuple_element< 1, pair< _Tp1, _Tp2> >  { 
# 102
typedef _Tp2 type; }; 
# 104
template< size_t _Int> struct __pair_get; 
# 108
template<> struct __pair_get< 0UL>  { 
# 110
template< class _Tp1, class _Tp2> static constexpr _Tp1 &
# 112
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 113
{ return __pair.first; } 
# 115
template< class _Tp1, class _Tp2> static constexpr _Tp1 &&
# 117
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 118
{ return std::forward< _Tp1> ((__pair.first)); } 
# 120
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &
# 122
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 123
{ return __pair.first; } 
# 124
}; 
# 127
template<> struct __pair_get< 1UL>  { 
# 129
template< class _Tp1, class _Tp2> static constexpr _Tp2 &
# 131
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 132
{ return __pair.second; } 
# 134
template< class _Tp1, class _Tp2> static constexpr _Tp2 &&
# 136
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 137
{ return std::forward< _Tp2> ((__pair.second)); } 
# 139
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &
# 141
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 142
{ return __pair.second; } 
# 143
}; 
# 145
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 147
get(pair< _Tp1, _Tp2>  &__in) noexcept 
# 148
{ return __pair_get< _Int> ::__get(__in); } 
# 150
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 152
get(pair< _Tp1, _Tp2>  &&__in) noexcept 
# 153
{ return __pair_get< _Int> ::__move_get(std::move(__in)); } 
# 155
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 157
get(const pair< _Tp1, _Tp2>  &__in) noexcept 
# 158
{ return __pair_get< _Int> ::__const_get(__in); } 
# 205
template< size_t ..._Indexes> 
# 206
struct _Index_tuple { 
# 208
typedef std::_Index_tuple< _Indexes..., sizeof...(_Indexes)>  __next; 
# 209
}; 
# 212
template< size_t _Num> 
# 213
struct _Build_index_tuple { 
# 215
typedef typename std::_Build_index_tuple< _Num - (1)> ::__type::__next __type; 
# 216
}; 
# 219
template<> struct _Build_index_tuple< 0UL>  { 
# 221
typedef _Index_tuple< >  __type; 
# 222
}; 
# 268
}
# 42 "/usr/include/c++/5/bits/algorithmfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 194
template< class _IIter, class _Predicate> inline bool all_of(_IIter, _IIter, _Predicate); 
# 198
template< class _IIter, class _Predicate> inline bool any_of(_IIter, _IIter, _Predicate); 
# 203
template< class _FIter, class _Tp> bool binary_search(_FIter, _FIter, const _Tp &); 
# 207
template< class _FIter, class _Tp, class _Compare> bool binary_search(_FIter, _FIter, const _Tp &, _Compare); 
# 211
template< class _IIter, class _OIter> inline _OIter copy(_IIter, _IIter, _OIter); 
# 215
template< class _BIter1, class _BIter2> inline _BIter2 copy_backward(_BIter1, _BIter1, _BIter2); 
# 220
template< class _IIter, class _OIter, class _Predicate> _OIter copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 224
template< class _IIter, class _Size, class _OIter> inline _OIter copy_n(_IIter, _Size, _OIter); 
# 232
template< class _FIter, class _Tp> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &); 
# 236
template< class _FIter, class _Tp, class _Compare> inline pair< _FIter, _FIter>  equal_range(_FIter, _FIter, const _Tp &, _Compare); 
# 240
template< class _FIter, class _Tp> inline void fill(_FIter, _FIter, const _Tp &); 
# 244
template< class _OIter, class _Size, class _Tp> inline _OIter fill_n(_OIter, _Size, const _Tp &); 
# 250
template< class _FIter1, class _FIter2> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2); 
# 254
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 262
template< class _IIter, class _Predicate> inline _IIter find_if_not(_IIter, _IIter, _Predicate); 
# 271
template< class _IIter1, class _IIter2> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2); 
# 275
template< class _IIter1, class _IIter2, class _Compare> inline bool includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 279
template< class _BIter> inline void inplace_merge(_BIter, _BIter, _BIter); 
# 283
template< class _BIter, class _Compare> inline void inplace_merge(_BIter, _BIter, _BIter, _Compare); 
# 288
template< class _RAIter> inline bool is_heap(_RAIter, _RAIter); 
# 292
template< class _RAIter, class _Compare> inline bool is_heap(_RAIter, _RAIter, _Compare); 
# 296
template< class _RAIter> inline _RAIter is_heap_until(_RAIter, _RAIter); 
# 300
template< class _RAIter, class _Compare> inline _RAIter is_heap_until(_RAIter, _RAIter, _Compare); 
# 304
template< class _IIter, class _Predicate> inline bool is_partitioned(_IIter, _IIter, _Predicate); 
# 308
template< class _FIter1, class _FIter2> inline bool is_permutation(_FIter1, _FIter1, _FIter2); 
# 312
template< class _FIter1, class _FIter2, class 
# 313
_BinaryPredicate> inline bool 
# 312
is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate); 
# 317
template< class _FIter> inline bool is_sorted(_FIter, _FIter); 
# 321
template< class _FIter, class _Compare> inline bool is_sorted(_FIter, _FIter, _Compare); 
# 325
template< class _FIter> inline _FIter is_sorted_until(_FIter, _FIter); 
# 329
template< class _FIter, class _Compare> inline _FIter is_sorted_until(_FIter, _FIter, _Compare); 
# 334
template< class _FIter1, class _FIter2> inline void iter_swap(_FIter1, _FIter2); 
# 338
template< class _FIter, class _Tp> inline _FIter lower_bound(_FIter, _FIter, const _Tp &); 
# 342
template< class _FIter, class _Tp, class _Compare> inline _FIter lower_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 346
template< class _RAIter> inline void make_heap(_RAIter, _RAIter); 
# 350
template< class _RAIter, class _Compare> inline void make_heap(_RAIter, _RAIter, _Compare); 
# 354
template< class _Tp> inline const _Tp &max(const _Tp &, const _Tp &); 
# 359
template< class _Tp, class _Compare> inline const _Tp &max(const _Tp &, const _Tp &, _Compare); 
# 367
template< class _Tp> inline const _Tp &min(const _Tp &, const _Tp &); 
# 372
template< class _Tp, class _Compare> inline const _Tp &min(const _Tp &, const _Tp &, _Compare); 
# 380
template< class _Tp> inline pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &); 
# 385
template< class _Tp, class _Compare> inline pair< const _Tp &, const _Tp &>  minmax(const _Tp &, const _Tp &, _Compare); 
# 390
template< class _FIter> inline pair< _FIter, _FIter>  minmax_element(_FIter, _FIter); 
# 395
template< class _FIter, class _Compare> inline pair< _FIter, _FIter>  minmax_element(_FIter, _FIter, _Compare); 
# 400
template< class _Tp> inline _Tp min(initializer_list< _Tp> ); 
# 405
template< class _Tp, class _Compare> inline _Tp min(initializer_list< _Tp> , _Compare); 
# 410
template< class _Tp> inline _Tp max(initializer_list< _Tp> ); 
# 415
template< class _Tp, class _Compare> inline _Tp max(initializer_list< _Tp> , _Compare); 
# 420
template< class _Tp> inline pair< _Tp, _Tp>  minmax(initializer_list< _Tp> ); 
# 425
template< class _Tp, class _Compare> inline pair< _Tp, _Tp>  minmax(initializer_list< _Tp> , _Compare); 
# 433
template< class _BIter> inline bool next_permutation(_BIter, _BIter); 
# 437
template< class _BIter, class _Compare> inline bool next_permutation(_BIter, _BIter, _Compare); 
# 442
template< class _IIter, class _Predicate> inline bool none_of(_IIter, _IIter, _Predicate); 
# 450
template< class _IIter, class _RAIter> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter); 
# 454
template< class _IIter, class _RAIter, class _Compare> inline _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare); 
# 461
template< class _IIter, class _OIter1, class 
# 462
_OIter2, class _Predicate> pair< _OIter1, _OIter2>  
# 461
partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate); 
# 466
template< class _FIter, class _Predicate> _FIter partition_point(_FIter, _FIter, _Predicate); 
# 471
template< class _RAIter> inline void pop_heap(_RAIter, _RAIter); 
# 475
template< class _RAIter, class _Compare> inline void pop_heap(_RAIter, _RAIter, _Compare); 
# 479
template< class _BIter> inline bool prev_permutation(_BIter, _BIter); 
# 483
template< class _BIter, class _Compare> inline bool prev_permutation(_BIter, _BIter, _Compare); 
# 487
template< class _RAIter> inline void push_heap(_RAIter, _RAIter); 
# 491
template< class _RAIter, class _Compare> inline void push_heap(_RAIter, _RAIter, _Compare); 
# 497
template< class _FIter, class _Tp> inline _FIter remove(_FIter, _FIter, const _Tp &); 
# 501
template< class _FIter, class _Predicate> inline _FIter remove_if(_FIter, _FIter, _Predicate); 
# 505
template< class _IIter, class _OIter, class _Tp> inline _OIter remove_copy(_IIter, _IIter, _OIter, const _Tp &); 
# 509
template< class _IIter, class _OIter, class _Predicate> inline _OIter remove_copy_if(_IIter, _IIter, _OIter, _Predicate); 
# 515
template< class _IIter, class _OIter, class _Tp> inline _OIter replace_copy(_IIter, _IIter, _OIter, const _Tp &, const _Tp &); 
# 519
template< class _Iter, class _OIter, class _Predicate, class _Tp> inline _OIter replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp &); 
# 525
template< class _BIter> inline void reverse(_BIter, _BIter); 
# 529
template< class _BIter, class _OIter> _OIter reverse_copy(_BIter, _BIter, _OIter); 
# 533
inline namespace _V2 { 
# 535
template< class _FIter> inline _FIter rotate(_FIter, _FIter, _FIter); 
# 538
}
# 540
template< class _FIter, class _OIter> inline _OIter rotate_copy(_FIter, _FIter, _FIter, _OIter); 
# 552
template< class _RAIter, class _UGenerator> void shuffle(_RAIter, _RAIter, _UGenerator &&); 
# 557
template< class _RAIter> inline void sort_heap(_RAIter, _RAIter); 
# 561
template< class _RAIter, class _Compare> inline void sort_heap(_RAIter, _RAIter, _Compare); 
# 565
template< class _BIter, class _Predicate> inline _BIter stable_partition(_BIter, _BIter, _Predicate); 
# 569
template< class _Tp> inline void swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 578
template< class _Tp, size_t _Nm> inline void swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(noexcept(swap(*(__a), *(__b)))); 
# 586
template< class _FIter1, class _FIter2> _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2); 
# 592
template< class _FIter> inline _FIter unique(_FIter, _FIter); 
# 596
template< class _FIter, class _BinaryPredicate> inline _FIter unique(_FIter, _FIter, _BinaryPredicate); 
# 602
template< class _FIter, class _Tp> inline _FIter upper_bound(_FIter, _FIter, const _Tp &); 
# 606
template< class _FIter, class _Tp, class _Compare> inline _FIter upper_bound(_FIter, _FIter, const _Tp &, _Compare); 
# 614
template< class _FIter> inline _FIter adjacent_find(_FIter, _FIter); 
# 618
template< class _FIter, class _BinaryPredicate> inline _FIter adjacent_find(_FIter, _FIter, _BinaryPredicate); 
# 622
template< class _IIter, class _Tp> inline typename iterator_traits< _IIter> ::difference_type count(_IIter, _IIter, const _Tp &); 
# 626
template< class _IIter, class _Predicate> inline typename iterator_traits< _IIter> ::difference_type count_if(_IIter, _IIter, _Predicate); 
# 630
template< class _IIter1, class _IIter2> inline bool equal(_IIter1, _IIter1, _IIter2); 
# 634
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 638
template< class _IIter, class _Tp> inline _IIter find(_IIter, _IIter, const _Tp &); 
# 642
template< class _FIter1, class _FIter2> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2); 
# 646
template< class _FIter1, class _FIter2, class _BinaryPredicate> _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 650
template< class _IIter, class _Predicate> inline _IIter find_if(_IIter, _IIter, _Predicate); 
# 654
template< class _IIter, class _Funct> _Funct for_each(_IIter, _IIter, _Funct); 
# 658
template< class _FIter, class _Generator> void generate(_FIter, _FIter, _Generator); 
# 662
template< class _OIter, class _Size, class _Generator> _OIter generate_n(_OIter, _Size, _Generator); 
# 666
template< class _IIter1, class _IIter2> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2); 
# 670
template< class _IIter1, class _IIter2, class _Compare> inline bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare); 
# 674
template< class _FIter> inline _FIter max_element(_FIter, _FIter); 
# 679
template< class _FIter, class _Compare> inline _FIter max_element(_FIter, _FIter, _Compare); 
# 684
template< class _IIter1, class _IIter2, class _OIter> inline _OIter merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 688
template< class _IIter1, class _IIter2, class _OIter, class 
# 689
_Compare> inline _OIter 
# 688
merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 693
template< class _FIter> inline _FIter min_element(_FIter, _FIter); 
# 698
template< class _FIter, class _Compare> inline _FIter min_element(_FIter, _FIter, _Compare); 
# 703
template< class _IIter1, class _IIter2> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2); 
# 707
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline pair< _IIter1, _IIter2>  mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate); 
# 711
template< class _RAIter> inline void nth_element(_RAIter, _RAIter, _RAIter); 
# 715
template< class _RAIter, class _Compare> inline void nth_element(_RAIter, _RAIter, _RAIter, _Compare); 
# 719
template< class _RAIter> inline void partial_sort(_RAIter, _RAIter, _RAIter); 
# 723
template< class _RAIter, class _Compare> inline void partial_sort(_RAIter, _RAIter, _RAIter, _Compare); 
# 727
template< class _BIter, class _Predicate> inline _BIter partition(_BIter, _BIter, _Predicate); 
# 731
template< class _RAIter> inline void random_shuffle(_RAIter, _RAIter); 
# 735
template< class _RAIter, class _Generator> void random_shuffle(_RAIter, _RAIter, _Generator &&); 
# 744
template< class _FIter, class _Tp> void replace(_FIter, _FIter, const _Tp &, const _Tp &); 
# 748
template< class _FIter, class _Predicate, class _Tp> void replace_if(_FIter, _FIter, _Predicate, const _Tp &); 
# 752
template< class _FIter1, class _FIter2> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2); 
# 756
template< class _FIter1, class _FIter2, class _BinaryPredicate> inline _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate); 
# 760
template< class _FIter, class _Size, class _Tp> inline _FIter search_n(_FIter, _FIter, _Size, const _Tp &); 
# 764
template< class _FIter, class _Size, class _Tp, class 
# 765
_BinaryPredicate> inline _FIter 
# 764
search_n(_FIter, _FIter, _Size, const _Tp &, _BinaryPredicate); 
# 769
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 773
template< class _IIter1, class _IIter2, class _OIter, class 
# 774
_Compare> inline _OIter 
# 773
set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 778
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 782
template< class _IIter1, class _IIter2, class _OIter, class 
# 783
_Compare> inline _OIter 
# 782
set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 787
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 791
template< class _IIter1, class _IIter2, class _OIter, class 
# 792
_Compare> inline _OIter 
# 791
set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 797
template< class _IIter1, class _IIter2, class _OIter> inline _OIter set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter); 
# 801
template< class _IIter1, class _IIter2, class _OIter, class 
# 802
_Compare> inline _OIter 
# 801
set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare); 
# 806
template< class _RAIter> inline void sort(_RAIter, _RAIter); 
# 810
template< class _RAIter, class _Compare> inline void sort(_RAIter, _RAIter, _Compare); 
# 814
template< class _RAIter> inline void stable_sort(_RAIter, _RAIter); 
# 818
template< class _RAIter, class _Compare> inline void stable_sort(_RAIter, _RAIter, _Compare); 
# 822
template< class _IIter, class _OIter, class _UnaryOperation> _OIter transform(_IIter, _IIter, _OIter, _UnaryOperation); 
# 826
template< class _IIter1, class _IIter2, class _OIter, class 
# 827
_BinaryOperation> _OIter 
# 826
transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation); 
# 831
template< class _IIter, class _OIter> inline _OIter unique_copy(_IIter, _IIter, _OIter); 
# 835
template< class _IIter, class _OIter, class _BinaryPredicate> inline _OIter unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate); 
# 840
}
# 62 "/usr/include/c++/5/bits/stl_heap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _RandomAccessIterator, class _Distance, class 
# 72
_Compare> _Distance 
# 74
__is_heap_until(_RandomAccessIterator __first, _Distance __n, _Compare 
# 75
__comp) 
# 76
{ 
# 77
_Distance __parent = (0); 
# 78
for (_Distance __child = (1); __child < __n; ++__child) 
# 79
{ 
# 80
if (__comp(__first + __parent, __first + __child)) { 
# 81
return __child; }  
# 82
if ((__child & 1) == 0) { 
# 83
++__parent; }  
# 84
}  
# 85
return __n; 
# 86
} 
# 90
template< class _RandomAccessIterator, class _Distance> inline bool 
# 92
__is_heap(_RandomAccessIterator __first, _Distance __n) 
# 93
{ 
# 94
return std::__is_heap_until(__first, __n, __gnu_cxx::__ops::__iter_less_iter()) == __n; 
# 96
} 
# 98
template< class _RandomAccessIterator, class _Compare, class 
# 99
_Distance> inline bool 
# 101
__is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n) 
# 102
{ 
# 103
return std::__is_heap_until(__first, __n, __gnu_cxx::__ops::__iter_comp_iter(__comp)) == __n; 
# 105
} 
# 107
template< class _RandomAccessIterator> inline bool 
# 109
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 110
{ return std::__is_heap(__first, std::distance(__first, __last)); } 
# 112
template< class _RandomAccessIterator, class _Compare> inline bool 
# 114
__is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 115
__comp) 
# 116
{ return std::__is_heap(__first, __comp, std::distance(__first, __last)); } 
# 121
template< class _RandomAccessIterator, class _Distance, class _Tp, class 
# 122
_Compare> void 
# 124
__push_heap(_RandomAccessIterator __first, _Distance 
# 125
__holeIndex, _Distance __topIndex, _Tp __value, _Compare 
# 126
__comp) 
# 127
{ 
# 128
_Distance __parent = (__holeIndex - 1) / 2; 
# 129
while ((__holeIndex > __topIndex) && __comp(__first + __parent, __value)) 
# 130
{ 
# 131
(*(__first + __holeIndex)) = std::move(*(__first + __parent)); 
# 132
__holeIndex = __parent; 
# 133
__parent = ((__holeIndex - 1) / 2); 
# 134
}  
# 135
(*(__first + __holeIndex)) = std::move(__value); 
# 136
} 
# 148
template< class _RandomAccessIterator> inline void 
# 150
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 151
{ 
# 153
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 155
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 161
; 
# 162
; 
# 164
_ValueType __value = std::move(*(__last - 1)); 
# 165
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __gnu_cxx::__ops::__iter_less_val()); 
# 168
} 
# 182
template< class _RandomAccessIterator, class _Compare> inline void 
# 184
push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 185
__comp) 
# 186
{ 
# 188
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 190
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 195
; 
# 196
; 
# 198
_ValueType __value = std::move(*(__last - 1)); 
# 199
std::__push_heap(__first, (_DistanceType)((__last - __first) - 1), (_DistanceType)0, std::move(__value), __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 202
} 
# 204
template< class _RandomAccessIterator, class _Distance, class 
# 205
_Tp, class _Compare> void 
# 207
__adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex, _Distance 
# 208
__len, _Tp __value, _Compare __comp) 
# 209
{ 
# 210
const _Distance __topIndex = __holeIndex; 
# 211
_Distance __secondChild = __holeIndex; 
# 212
while (__secondChild < ((__len - 1) / 2)) 
# 213
{ 
# 214
__secondChild = (2 * (__secondChild + 1)); 
# 215
if (__comp(__first + __secondChild, __first + (__secondChild - 1))) { 
# 217
__secondChild--; }  
# 218
(*(__first + __holeIndex)) = std::move(*(__first + __secondChild)); 
# 219
__holeIndex = __secondChild; 
# 220
}  
# 221
if (((__len & 1) == 0) && (__secondChild == ((__len - 2) / 2))) 
# 222
{ 
# 223
__secondChild = (2 * (__secondChild + 1)); 
# 224
(*(__first + __holeIndex)) = std::move(*(__first + (__secondChild - 1))); 
# 226
__holeIndex = (__secondChild - 1); 
# 227
}  
# 228
std::__push_heap(__first, __holeIndex, __topIndex, std::move(__value), __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 231
} 
# 233
template< class _RandomAccessIterator, class _Compare> inline void 
# 235
__pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator 
# 236
__result, _Compare __comp) 
# 237
{ 
# 239
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 241
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 243
_ValueType __value = std::move(*__result); 
# 244
(*__result) = std::move(*__first); 
# 245
std::__adjust_heap(__first, (_DistanceType)0, (_DistanceType)(__last - __first), std::move(__value), __comp); 
# 248
} 
# 261
template< class _RandomAccessIterator> inline void 
# 263
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 264
{ 
# 266
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 272
; 
# 273
; 
# 274
; 
# 276
if ((__last - __first) > 1) 
# 277
{ 
# 278
--__last; 
# 279
std::__pop_heap(__first, __last, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 281
}  
# 282
} 
# 295
template< class _RandomAccessIterator, class _Compare> inline void 
# 297
pop_heap(_RandomAccessIterator __first, _RandomAccessIterator 
# 298
__last, _Compare __comp) 
# 299
{ 
# 303
; 
# 304
; 
# 305
; 
# 307
if ((__last - __first) > 1) 
# 308
{ 
# 309
--__last; 
# 310
std::__pop_heap(__first, __last, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 312
}  
# 313
} 
# 315
template< class _RandomAccessIterator, class _Compare> void 
# 317
__make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 318
__comp) 
# 319
{ 
# 321
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 323
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 325
if ((__last - __first) < 2) { 
# 326
return; }  
# 328
const _DistanceType __len = __last - __first; 
# 329
_DistanceType __parent = (__len - 2) / 2; 
# 330
while (true) 
# 331
{ 
# 332
_ValueType __value = std::move(*(__first + __parent)); 
# 333
std::__adjust_heap(__first, __parent, __len, std::move(__value), __comp); 
# 335
if (__parent == 0) { 
# 336
return; }  
# 337
__parent--; 
# 338
}  
# 339
} 
# 349
template< class _RandomAccessIterator> inline void 
# 351
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 352
{ 
# 358
; 
# 360
std::__make_heap(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 362
} 
# 374
template< class _RandomAccessIterator, class _Compare> inline void 
# 376
make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 377
__comp) 
# 378
{ 
# 382
; 
# 384
std::__make_heap(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 386
} 
# 388
template< class _RandomAccessIterator, class _Compare> void 
# 390
__sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 391
__comp) 
# 392
{ 
# 393
while ((__last - __first) > 1) 
# 394
{ 
# 395
--__last; 
# 396
std::__pop_heap(__first, __last, __last, __comp); 
# 397
}  
# 398
} 
# 408
template< class _RandomAccessIterator> inline void 
# 410
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 411
{ 
# 417
; 
# 418
; 
# 420
std::__sort_heap(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 422
} 
# 434
template< class _RandomAccessIterator, class _Compare> inline void 
# 436
sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 437
__comp) 
# 438
{ 
# 442
; 
# 443
; 
# 445
std::__sort_heap(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 447
} 
# 460
template< class _RandomAccessIterator> inline _RandomAccessIterator 
# 462
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 463
{ 
# 469
; 
# 471
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __gnu_cxx::__ops::__iter_less_iter()); 
# 474
} 
# 487
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 489
is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 490
__comp) 
# 491
{ 
# 495
; 
# 497
return __first + std::__is_heap_until(__first, std::distance(__first, __last), __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 500
} 
# 509
template< class _RandomAccessIterator> inline bool 
# 511
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 512
{ return std::is_heap_until(__first, __last) == __last; } 
# 522
template< class _RandomAccessIterator, class _Compare> inline bool 
# 524
is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 525
__comp) 
# 526
{ return std::is_heap_until(__first, __last, __comp) == __last; } 
# 530
}
# 63 "/usr/include/c++/5/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72
template< class _T1, class ..._Args> inline void 
# 74
_Construct(_T1 *__p, _Args &&...__args) 
# 75
{ ::new (static_cast< void *>(__p)) (_T1)(std::forward< _Args> (__args)...); } 
# 90
template< class _Tp> inline void 
# 92
_Destroy(_Tp *__pointer) 
# 93
{ (__pointer->~_Tp()); } 
# 95
template< bool > 
# 96
struct _Destroy_aux { 
# 98
template< class _ForwardIterator> static void 
# 100
__destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 101
{ 
# 102
for (; __first != __last; ++__first) { 
# 103
std::_Destroy(std::__addressof(*__first)); }  
# 104
} 
# 105
}; 
# 108
template<> struct _Destroy_aux< true>  { 
# 110
template< class _ForwardIterator> static void 
# 112
__destroy(_ForwardIterator, _ForwardIterator) { } 
# 113
}; 
# 120
template< class _ForwardIterator> inline void 
# 122
_Destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 123
{ 
# 125
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 126
std::_Destroy_aux< __has_trivial_destructor(typename iterator_traits< _ForwardIterator> ::value_type)> ::__destroy(__first, __last); 
# 128
} 
# 136
template< class _ForwardIterator, class _Allocator> void 
# 138
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &
# 139
__alloc) 
# 140
{ 
# 141
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 142
for (; __first != __last; ++__first) { 
# 143
__traits::destroy(__alloc, std::__addressof(*__first)); }  
# 144
} 
# 146
template< class _ForwardIterator, class _Tp> inline void 
# 148
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp>  &) 
# 150
{ 
# 151
_Destroy(__first, __last); 
# 152
} 
# 155
}
# 62 "/usr/include/c++/5/bits/stl_tempbuf.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
template< class _Tp> pair< _Tp *, long>  
# 85
get_temporary_buffer(ptrdiff_t __len) noexcept 
# 86
{ 
# 87
const ptrdiff_t __max = (__gnu_cxx::__numeric_traits_integer< long> ::__max / sizeof(_Tp)); 
# 89
if (__len > __max) { 
# 90
__len = __max; }  
# 92
while (__len > (0)) 
# 93
{ 
# 94
_Tp *__tmp = static_cast< _Tp *>(::operator new(__len * sizeof(_Tp), std::nothrow)); 
# 96
if (__tmp != 0) { 
# 97
return pair< _Tp *, long> (__tmp, __len); }  
# 98
__len /= (2); 
# 99
}  
# 100
return pair< _Tp *, long> (static_cast< _Tp *>(0), 0); 
# 101
} 
# 110
template< class _Tp> inline void 
# 112
return_temporary_buffer(_Tp *__p) 
# 113
{ ::operator delete(__p, std::nothrow); } 
# 121
template< class _ForwardIterator, class _Tp> 
# 122
class _Temporary_buffer { 
# 128
public: typedef _Tp value_type; 
# 129
typedef value_type *pointer; 
# 130
typedef pointer iterator; 
# 131
typedef ptrdiff_t size_type; 
# 134
protected: size_type _M_original_len; 
# 135
size_type _M_len; 
# 136
pointer _M_buffer; 
# 141
public: size_type size() const 
# 142
{ return _M_len; } 
# 146
size_type requested_size() const 
# 147
{ return _M_original_len; } 
# 151
iterator begin() 
# 152
{ return _M_buffer; } 
# 156
iterator end() 
# 157
{ return (_M_buffer) + (_M_len); } 
# 163
_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last); 
# 165
~_Temporary_buffer() 
# 166
{ 
# 167
std::_Destroy(_M_buffer, (_M_buffer) + (_M_len)); 
# 168
std::return_temporary_buffer(_M_buffer); 
# 169
} 
# 173
private: _Temporary_buffer(const _Temporary_buffer &); 
# 176
void operator=(const _Temporary_buffer &); 
# 177
}; 
# 180
template< bool > 
# 181
struct __uninitialized_construct_buf_dispatch { 
# 183
template< class _Pointer, class _ForwardIterator> static void 
# 185
__ucr(_Pointer __first, _Pointer __last, _ForwardIterator 
# 186
__seed) 
# 187
{ 
# 188
if (__first == __last) { 
# 189
return; }  
# 191
_Pointer __cur = __first; 
# 192
try 
# 193
{ 
# 194
std::_Construct(std::__addressof(*__first), std::move(*__seed)); 
# 196
_Pointer __prev = __cur; 
# 197
++__cur; 
# 198
for (; __cur != __last; (++__cur), (++__prev)) { 
# 199
std::_Construct(std::__addressof(*__cur), std::move(*__prev)); }  
# 201
(*__seed) = std::move(*__prev); 
# 202
} 
# 203
catch (...) 
# 204
{ 
# 205
std::_Destroy(__first, __cur); 
# 206
throw; 
# 207
}  
# 208
} 
# 209
}; 
# 212
template<> struct __uninitialized_construct_buf_dispatch< true>  { 
# 214
template< class _Pointer, class _ForwardIterator> static void 
# 216
__ucr(_Pointer, _Pointer, _ForwardIterator) { } 
# 217
}; 
# 229
template< class _Pointer, class _ForwardIterator> inline void 
# 231
__uninitialized_construct_buf(_Pointer __first, _Pointer __last, _ForwardIterator 
# 232
__seed) 
# 233
{ 
# 235
typedef typename iterator_traits< _Pointer> ::value_type _ValueType; 
# 237
std::__uninitialized_construct_buf_dispatch< __has_trivial_constructor(typename iterator_traits< _Pointer> ::value_type)> ::__ucr(__first, __last, __seed); 
# 240
} 
# 242
template< class _ForwardIterator, class _Tp> 
# 244
_Temporary_buffer< _ForwardIterator, _Tp> ::_Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last) : _M_original_len(std::distance(__first, __last)), _M_len((0)), _M_buffer((0)) 
# 247
{ 
# 248
try 
# 249
{ 
# 250
pair< _Tp *, long>  __p(std::get_temporary_buffer< value_type> (_M_original_len)); 
# 252
(_M_buffer) = (__p.first); 
# 253
(_M_len) = (__p.second); 
# 254
if (_M_buffer) { 
# 255
std::__uninitialized_construct_buf(_M_buffer, (_M_buffer) + (_M_len), __first); }  
# 257
} 
# 258
catch (...) 
# 259
{ 
# 260
std::return_temporary_buffer(_M_buffer); 
# 261
(_M_buffer) = 0; 
# 262
(_M_len) = (0); 
# 263
throw; 
# 264
}  
# 265
} 
# 268
}
# 158 "/usr/include/c++/5/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 167
enum float_round_style { 
# 169
round_indeterminate = (-1), 
# 170
round_toward_zero = 0, 
# 171
round_to_nearest, 
# 172
round_toward_infinity, 
# 173
round_toward_neg_infinity
# 174
}; 
# 182
enum float_denorm_style { 
# 185
denorm_indeterminate = (-1), 
# 187
denorm_absent = 0, 
# 189
denorm_present
# 190
}; 
# 202
struct __numeric_limits_base { 
# 206
static constexpr bool is_specialized = false; 
# 211
static constexpr int digits = 0; 
# 214
static constexpr int digits10 = 0; 
# 219
static constexpr int max_digits10 = 0; 
# 223
static constexpr bool is_signed = false; 
# 226
static constexpr bool is_integer = false; 
# 231
static constexpr bool is_exact = false; 
# 235
static constexpr int radix = 0; 
# 239
static constexpr int min_exponent = 0; 
# 243
static constexpr int min_exponent10 = 0; 
# 248
static constexpr int max_exponent = 0; 
# 252
static constexpr int max_exponent10 = 0; 
# 255
static constexpr bool has_infinity = false; 
# 259
static constexpr bool has_quiet_NaN = false; 
# 263
static constexpr bool has_signaling_NaN = false; 
# 266
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 270
static constexpr bool has_denorm_loss = false; 
# 274
static constexpr bool is_iec559 = false; 
# 279
static constexpr bool is_bounded = false; 
# 288
static constexpr bool is_modulo = false; 
# 291
static constexpr bool traps = false; 
# 294
static constexpr bool tinyness_before = false; 
# 299
static constexpr float_round_style round_style = round_toward_zero; 
# 301
}; 
# 314
template< class _Tp> 
# 315
struct numeric_limits : public __numeric_limits_base { 
# 320
static constexpr _Tp min() noexcept { return _Tp(); } 
# 324
static constexpr _Tp max() noexcept { return _Tp(); } 
# 330
static constexpr _Tp lowest() noexcept { return _Tp(); } 
# 336
static constexpr _Tp epsilon() noexcept { return _Tp(); } 
# 340
static constexpr _Tp round_error() noexcept { return _Tp(); } 
# 344
static constexpr _Tp infinity() noexcept { return _Tp(); } 
# 349
static constexpr _Tp quiet_NaN() noexcept { return _Tp(); } 
# 354
static constexpr _Tp signaling_NaN() noexcept { return _Tp(); } 
# 360
static constexpr _Tp denorm_min() noexcept { return _Tp(); } 
# 361
}; 
# 364
template< class _Tp> 
# 365
struct numeric_limits< const _Tp>  : public numeric_limits< _Tp>  { 
# 366
}; 
# 368
template< class _Tp> 
# 369
struct numeric_limits< volatile _Tp>  : public numeric_limits< _Tp>  { 
# 370
}; 
# 372
template< class _Tp> 
# 373
struct numeric_limits< const volatile _Tp>  : public numeric_limits< _Tp>  { 
# 374
}; 
# 382
template<> struct numeric_limits< bool>  { 
# 384
static constexpr bool is_specialized = true; 
# 387
static constexpr bool min() noexcept { return false; } 
# 390
static constexpr bool max() noexcept { return true; } 
# 394
static constexpr bool lowest() noexcept { return min(); } 
# 396
static constexpr int digits = 1; 
# 397
static constexpr int digits10 = 0; 
# 399
static constexpr int max_digits10 = 0; 
# 401
static constexpr bool is_signed = false; 
# 402
static constexpr bool is_integer = true; 
# 403
static constexpr bool is_exact = true; 
# 404
static constexpr int radix = 2; 
# 407
static constexpr bool epsilon() noexcept { return false; } 
# 410
static constexpr bool round_error() noexcept { return false; } 
# 412
static constexpr int min_exponent = 0; 
# 413
static constexpr int min_exponent10 = 0; 
# 414
static constexpr int max_exponent = 0; 
# 415
static constexpr int max_exponent10 = 0; 
# 417
static constexpr bool has_infinity = false; 
# 418
static constexpr bool has_quiet_NaN = false; 
# 419
static constexpr bool has_signaling_NaN = false; 
# 420
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 422
static constexpr bool has_denorm_loss = false; 
# 425
static constexpr bool infinity() noexcept { return false; } 
# 428
static constexpr bool quiet_NaN() noexcept { return false; } 
# 431
static constexpr bool signaling_NaN() noexcept { return false; } 
# 434
static constexpr bool denorm_min() noexcept { return false; } 
# 436
static constexpr bool is_iec559 = false; 
# 437
static constexpr bool is_bounded = true; 
# 438
static constexpr bool is_modulo = false; 
# 443
static constexpr bool traps = true; 
# 444
static constexpr bool tinyness_before = false; 
# 445
static constexpr float_round_style round_style = round_toward_zero; 
# 447
}; 
# 451
template<> struct numeric_limits< char>  { 
# 453
static constexpr bool is_specialized = true; 
# 456
static constexpr char min() noexcept { return (((char)(-1)) < 0) ? (-((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)))) - 1 : ((char)0); } 
# 459
static constexpr char max() noexcept { return (((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)); } 
# 463
static constexpr char lowest() noexcept { return min(); } 
# 466
static constexpr int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 467
static constexpr int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643L)) / (2136)); 
# 469
static constexpr int max_digits10 = 0; 
# 471
static constexpr bool is_signed = (((char)(-1)) < 0); 
# 472
static constexpr bool is_integer = true; 
# 473
static constexpr bool is_exact = true; 
# 474
static constexpr int radix = 2; 
# 477
static constexpr char epsilon() noexcept { return 0; } 
# 480
static constexpr char round_error() noexcept { return 0; } 
# 482
static constexpr int min_exponent = 0; 
# 483
static constexpr int min_exponent10 = 0; 
# 484
static constexpr int max_exponent = 0; 
# 485
static constexpr int max_exponent10 = 0; 
# 487
static constexpr bool has_infinity = false; 
# 488
static constexpr bool has_quiet_NaN = false; 
# 489
static constexpr bool has_signaling_NaN = false; 
# 490
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 492
static constexpr bool has_denorm_loss = false; 
# 495
static constexpr char infinity() noexcept { return ((char)0); } 
# 498
static constexpr char quiet_NaN() noexcept { return ((char)0); } 
# 501
static constexpr char signaling_NaN() noexcept { return ((char)0); } 
# 504
static constexpr char denorm_min() noexcept { return static_cast< char>(0); } 
# 506
static constexpr bool is_iec559 = false; 
# 507
static constexpr bool is_bounded = true; 
# 508
static constexpr bool is_modulo = (!is_signed); 
# 510
static constexpr bool traps = true; 
# 511
static constexpr bool tinyness_before = false; 
# 512
static constexpr float_round_style round_style = round_toward_zero; 
# 514
}; 
# 518
template<> struct numeric_limits< signed char>  { 
# 520
static constexpr bool is_specialized = true; 
# 523
static constexpr signed char min() noexcept { return (-127) - 1; } 
# 526
static constexpr signed char max() noexcept { return 127; } 
# 530
static constexpr signed char lowest() noexcept { return min(); } 
# 533
static constexpr int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 534
static constexpr int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643L)) / (2136)); 
# 537
static constexpr int max_digits10 = 0; 
# 539
static constexpr bool is_signed = true; 
# 540
static constexpr bool is_integer = true; 
# 541
static constexpr bool is_exact = true; 
# 542
static constexpr int radix = 2; 
# 545
static constexpr signed char epsilon() noexcept { return 0; } 
# 548
static constexpr signed char round_error() noexcept { return 0; } 
# 550
static constexpr int min_exponent = 0; 
# 551
static constexpr int min_exponent10 = 0; 
# 552
static constexpr int max_exponent = 0; 
# 553
static constexpr int max_exponent10 = 0; 
# 555
static constexpr bool has_infinity = false; 
# 556
static constexpr bool has_quiet_NaN = false; 
# 557
static constexpr bool has_signaling_NaN = false; 
# 558
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 560
static constexpr bool has_denorm_loss = false; 
# 563
static constexpr signed char infinity() noexcept { return static_cast< signed char>(0); } 
# 566
static constexpr signed char quiet_NaN() noexcept { return static_cast< signed char>(0); } 
# 569
static constexpr signed char signaling_NaN() noexcept 
# 570
{ return static_cast< signed char>(0); } 
# 573
static constexpr signed char denorm_min() noexcept 
# 574
{ return static_cast< signed char>(0); } 
# 576
static constexpr bool is_iec559 = false; 
# 577
static constexpr bool is_bounded = true; 
# 578
static constexpr bool is_modulo = false; 
# 580
static constexpr bool traps = true; 
# 581
static constexpr bool tinyness_before = false; 
# 582
static constexpr float_round_style round_style = round_toward_zero; 
# 584
}; 
# 588
template<> struct numeric_limits< unsigned char>  { 
# 590
static constexpr bool is_specialized = true; 
# 593
static constexpr unsigned char min() noexcept { return 0; } 
# 596
static constexpr unsigned char max() noexcept { return ((127) * 2U) + (1); } 
# 600
static constexpr unsigned char lowest() noexcept { return min(); } 
# 603
static constexpr int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 605
static constexpr int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643L)) / (2136)); 
# 608
static constexpr int max_digits10 = 0; 
# 610
static constexpr bool is_signed = false; 
# 611
static constexpr bool is_integer = true; 
# 612
static constexpr bool is_exact = true; 
# 613
static constexpr int radix = 2; 
# 616
static constexpr unsigned char epsilon() noexcept { return 0; } 
# 619
static constexpr unsigned char round_error() noexcept { return 0; } 
# 621
static constexpr int min_exponent = 0; 
# 622
static constexpr int min_exponent10 = 0; 
# 623
static constexpr int max_exponent = 0; 
# 624
static constexpr int max_exponent10 = 0; 
# 626
static constexpr bool has_infinity = false; 
# 627
static constexpr bool has_quiet_NaN = false; 
# 628
static constexpr bool has_signaling_NaN = false; 
# 629
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 631
static constexpr bool has_denorm_loss = false; 
# 634
static constexpr unsigned char infinity() noexcept 
# 635
{ return static_cast< unsigned char>(0); } 
# 638
static constexpr unsigned char quiet_NaN() noexcept 
# 639
{ return static_cast< unsigned char>(0); } 
# 642
static constexpr unsigned char signaling_NaN() noexcept 
# 643
{ return static_cast< unsigned char>(0); } 
# 646
static constexpr unsigned char denorm_min() noexcept 
# 647
{ return static_cast< unsigned char>(0); } 
# 649
static constexpr bool is_iec559 = false; 
# 650
static constexpr bool is_bounded = true; 
# 651
static constexpr bool is_modulo = true; 
# 653
static constexpr bool traps = true; 
# 654
static constexpr bool tinyness_before = false; 
# 655
static constexpr float_round_style round_style = round_toward_zero; 
# 657
}; 
# 661
template<> struct numeric_limits< wchar_t>  { 
# 663
static constexpr bool is_specialized = true; 
# 666
static constexpr wchar_t min() noexcept { return (((wchar_t)(-1)) < 0) ? (-((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)))) - 1 : ((wchar_t)0); } 
# 669
static constexpr wchar_t max() noexcept { return (((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)); } 
# 673
static constexpr wchar_t lowest() noexcept { return min(); } 
# 676
static constexpr int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 677
static constexpr int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643L)) / (2136)); 
# 680
static constexpr int max_digits10 = 0; 
# 682
static constexpr bool is_signed = (((wchar_t)(-1)) < 0); 
# 683
static constexpr bool is_integer = true; 
# 684
static constexpr bool is_exact = true; 
# 685
static constexpr int radix = 2; 
# 688
static constexpr wchar_t epsilon() noexcept { return 0; } 
# 691
static constexpr wchar_t round_error() noexcept { return 0; } 
# 693
static constexpr int min_exponent = 0; 
# 694
static constexpr int min_exponent10 = 0; 
# 695
static constexpr int max_exponent = 0; 
# 696
static constexpr int max_exponent10 = 0; 
# 698
static constexpr bool has_infinity = false; 
# 699
static constexpr bool has_quiet_NaN = false; 
# 700
static constexpr bool has_signaling_NaN = false; 
# 701
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 703
static constexpr bool has_denorm_loss = false; 
# 706
static constexpr wchar_t infinity() noexcept { return ((wchar_t)0); } 
# 709
static constexpr wchar_t quiet_NaN() noexcept { return ((wchar_t)0); } 
# 712
static constexpr wchar_t signaling_NaN() noexcept { return ((wchar_t)0); } 
# 715
static constexpr wchar_t denorm_min() noexcept { return ((wchar_t)0); } 
# 717
static constexpr bool is_iec559 = false; 
# 718
static constexpr bool is_bounded = true; 
# 719
static constexpr bool is_modulo = (!is_signed); 
# 721
static constexpr bool traps = true; 
# 722
static constexpr bool tinyness_before = false; 
# 723
static constexpr float_round_style round_style = round_toward_zero; 
# 725
}; 
# 730
template<> struct numeric_limits< char16_t>  { 
# 732
static constexpr bool is_specialized = true; 
# 735
static constexpr char16_t min() noexcept { return (((char16_t)(-1)) < 0) ? (-((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)))) - 1 : ((char16_t)0); } 
# 738
static constexpr char16_t max() noexcept { return (((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)); } 
# 741
static constexpr char16_t lowest() noexcept { return min(); } 
# 743
static constexpr int digits = ((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)); 
# 744
static constexpr int digits10 = ((((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) * (643L)) / (2136)); 
# 745
static constexpr int max_digits10 = 0; 
# 746
static constexpr bool is_signed = (((char16_t)(-1)) < 0); 
# 747
static constexpr bool is_integer = true; 
# 748
static constexpr bool is_exact = true; 
# 749
static constexpr int radix = 2; 
# 752
static constexpr char16_t epsilon() noexcept { return 0; } 
# 755
static constexpr char16_t round_error() noexcept { return 0; } 
# 757
static constexpr int min_exponent = 0; 
# 758
static constexpr int min_exponent10 = 0; 
# 759
static constexpr int max_exponent = 0; 
# 760
static constexpr int max_exponent10 = 0; 
# 762
static constexpr bool has_infinity = false; 
# 763
static constexpr bool has_quiet_NaN = false; 
# 764
static constexpr bool has_signaling_NaN = false; 
# 765
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 766
static constexpr bool has_denorm_loss = false; 
# 769
static constexpr char16_t infinity() noexcept { return ((char16_t)0); } 
# 772
static constexpr char16_t quiet_NaN() noexcept { return ((char16_t)0); } 
# 775
static constexpr char16_t signaling_NaN() noexcept { return ((char16_t)0); } 
# 778
static constexpr char16_t denorm_min() noexcept { return ((char16_t)0); } 
# 780
static constexpr bool is_iec559 = false; 
# 781
static constexpr bool is_bounded = true; 
# 782
static constexpr bool is_modulo = (!is_signed); 
# 784
static constexpr bool traps = true; 
# 785
static constexpr bool tinyness_before = false; 
# 786
static constexpr float_round_style round_style = round_toward_zero; 
# 787
}; 
# 791
template<> struct numeric_limits< char32_t>  { 
# 793
static constexpr bool is_specialized = true; 
# 796
static constexpr char32_t min() noexcept { return (((char32_t)(-1)) < (0)) ? (-((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)))) - (1) : ((char32_t)0); } 
# 799
static constexpr char32_t max() noexcept { return (((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)); } 
# 802
static constexpr char32_t lowest() noexcept { return min(); } 
# 804
static constexpr int digits = ((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))); 
# 805
static constexpr int digits10 = ((((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) * (643L)) / (2136)); 
# 806
static constexpr int max_digits10 = 0; 
# 807
static constexpr bool is_signed = (((char32_t)(-1)) < (0)); 
# 808
static constexpr bool is_integer = true; 
# 809
static constexpr bool is_exact = true; 
# 810
static constexpr int radix = 2; 
# 813
static constexpr char32_t epsilon() noexcept { return 0; } 
# 816
static constexpr char32_t round_error() noexcept { return 0; } 
# 818
static constexpr int min_exponent = 0; 
# 819
static constexpr int min_exponent10 = 0; 
# 820
static constexpr int max_exponent = 0; 
# 821
static constexpr int max_exponent10 = 0; 
# 823
static constexpr bool has_infinity = false; 
# 824
static constexpr bool has_quiet_NaN = false; 
# 825
static constexpr bool has_signaling_NaN = false; 
# 826
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 827
static constexpr bool has_denorm_loss = false; 
# 830
static constexpr char32_t infinity() noexcept { return ((char32_t)0); } 
# 833
static constexpr char32_t quiet_NaN() noexcept { return ((char32_t)0); } 
# 836
static constexpr char32_t signaling_NaN() noexcept { return ((char32_t)0); } 
# 839
static constexpr char32_t denorm_min() noexcept { return ((char32_t)0); } 
# 841
static constexpr bool is_iec559 = false; 
# 842
static constexpr bool is_bounded = true; 
# 843
static constexpr bool is_modulo = (!is_signed); 
# 845
static constexpr bool traps = true; 
# 846
static constexpr bool tinyness_before = false; 
# 847
static constexpr float_round_style round_style = round_toward_zero; 
# 848
}; 
# 853
template<> struct numeric_limits< short>  { 
# 855
static constexpr bool is_specialized = true; 
# 858
static constexpr short min() noexcept { return (-32767) - 1; } 
# 861
static constexpr short max() noexcept { return 32767; } 
# 865
static constexpr short lowest() noexcept { return min(); } 
# 868
static constexpr int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 869
static constexpr int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643L)) / (2136)); 
# 871
static constexpr int max_digits10 = 0; 
# 873
static constexpr bool is_signed = true; 
# 874
static constexpr bool is_integer = true; 
# 875
static constexpr bool is_exact = true; 
# 876
static constexpr int radix = 2; 
# 879
static constexpr short epsilon() noexcept { return 0; } 
# 882
static constexpr short round_error() noexcept { return 0; } 
# 884
static constexpr int min_exponent = 0; 
# 885
static constexpr int min_exponent10 = 0; 
# 886
static constexpr int max_exponent = 0; 
# 887
static constexpr int max_exponent10 = 0; 
# 889
static constexpr bool has_infinity = false; 
# 890
static constexpr bool has_quiet_NaN = false; 
# 891
static constexpr bool has_signaling_NaN = false; 
# 892
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 894
static constexpr bool has_denorm_loss = false; 
# 897
static constexpr short infinity() noexcept { return ((short)0); } 
# 900
static constexpr short quiet_NaN() noexcept { return ((short)0); } 
# 903
static constexpr short signaling_NaN() noexcept { return ((short)0); } 
# 906
static constexpr short denorm_min() noexcept { return ((short)0); } 
# 908
static constexpr bool is_iec559 = false; 
# 909
static constexpr bool is_bounded = true; 
# 910
static constexpr bool is_modulo = false; 
# 912
static constexpr bool traps = true; 
# 913
static constexpr bool tinyness_before = false; 
# 914
static constexpr float_round_style round_style = round_toward_zero; 
# 916
}; 
# 920
template<> struct numeric_limits< unsigned short>  { 
# 922
static constexpr bool is_specialized = true; 
# 925
static constexpr unsigned short min() noexcept { return 0; } 
# 928
static constexpr unsigned short max() noexcept { return ((32767) * 2U) + (1); } 
# 932
static constexpr unsigned short lowest() noexcept { return min(); } 
# 935
static constexpr int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 937
static constexpr int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643L)) / (2136)); 
# 940
static constexpr int max_digits10 = 0; 
# 942
static constexpr bool is_signed = false; 
# 943
static constexpr bool is_integer = true; 
# 944
static constexpr bool is_exact = true; 
# 945
static constexpr int radix = 2; 
# 948
static constexpr unsigned short epsilon() noexcept { return 0; } 
# 951
static constexpr unsigned short round_error() noexcept { return 0; } 
# 953
static constexpr int min_exponent = 0; 
# 954
static constexpr int min_exponent10 = 0; 
# 955
static constexpr int max_exponent = 0; 
# 956
static constexpr int max_exponent10 = 0; 
# 958
static constexpr bool has_infinity = false; 
# 959
static constexpr bool has_quiet_NaN = false; 
# 960
static constexpr bool has_signaling_NaN = false; 
# 961
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 963
static constexpr bool has_denorm_loss = false; 
# 966
static constexpr unsigned short infinity() noexcept 
# 967
{ return static_cast< unsigned short>(0); } 
# 970
static constexpr unsigned short quiet_NaN() noexcept 
# 971
{ return static_cast< unsigned short>(0); } 
# 974
static constexpr unsigned short signaling_NaN() noexcept 
# 975
{ return static_cast< unsigned short>(0); } 
# 978
static constexpr unsigned short denorm_min() noexcept 
# 979
{ return static_cast< unsigned short>(0); } 
# 981
static constexpr bool is_iec559 = false; 
# 982
static constexpr bool is_bounded = true; 
# 983
static constexpr bool is_modulo = true; 
# 985
static constexpr bool traps = true; 
# 986
static constexpr bool tinyness_before = false; 
# 987
static constexpr float_round_style round_style = round_toward_zero; 
# 989
}; 
# 993
template<> struct numeric_limits< int>  { 
# 995
static constexpr bool is_specialized = true; 
# 998
static constexpr int min() noexcept { return (-2147483647) - 1; } 
# 1001
static constexpr int max() noexcept { return 2147483647; } 
# 1005
static constexpr int lowest() noexcept { return min(); } 
# 1008
static constexpr int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 1009
static constexpr int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643L)) / (2136)); 
# 1011
static constexpr int max_digits10 = 0; 
# 1013
static constexpr bool is_signed = true; 
# 1014
static constexpr bool is_integer = true; 
# 1015
static constexpr bool is_exact = true; 
# 1016
static constexpr int radix = 2; 
# 1019
static constexpr int epsilon() noexcept { return 0; } 
# 1022
static constexpr int round_error() noexcept { return 0; } 
# 1024
static constexpr int min_exponent = 0; 
# 1025
static constexpr int min_exponent10 = 0; 
# 1026
static constexpr int max_exponent = 0; 
# 1027
static constexpr int max_exponent10 = 0; 
# 1029
static constexpr bool has_infinity = false; 
# 1030
static constexpr bool has_quiet_NaN = false; 
# 1031
static constexpr bool has_signaling_NaN = false; 
# 1032
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1034
static constexpr bool has_denorm_loss = false; 
# 1037
static constexpr int infinity() noexcept { return static_cast< int>(0); } 
# 1040
static constexpr int quiet_NaN() noexcept { return static_cast< int>(0); } 
# 1043
static constexpr int signaling_NaN() noexcept { return static_cast< int>(0); } 
# 1046
static constexpr int denorm_min() noexcept { return static_cast< int>(0); } 
# 1048
static constexpr bool is_iec559 = false; 
# 1049
static constexpr bool is_bounded = true; 
# 1050
static constexpr bool is_modulo = false; 
# 1052
static constexpr bool traps = true; 
# 1053
static constexpr bool tinyness_before = false; 
# 1054
static constexpr float_round_style round_style = round_toward_zero; 
# 1056
}; 
# 1060
template<> struct numeric_limits< unsigned>  { 
# 1062
static constexpr bool is_specialized = true; 
# 1065
static constexpr unsigned min() noexcept { return 0; } 
# 1068
static constexpr unsigned max() noexcept { return ((2147483647) * 2U) + (1); } 
# 1072
static constexpr unsigned lowest() noexcept { return min(); } 
# 1075
static constexpr int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 1077
static constexpr int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643L)) / (2136)); 
# 1080
static constexpr int max_digits10 = 0; 
# 1082
static constexpr bool is_signed = false; 
# 1083
static constexpr bool is_integer = true; 
# 1084
static constexpr bool is_exact = true; 
# 1085
static constexpr int radix = 2; 
# 1088
static constexpr unsigned epsilon() noexcept { return 0; } 
# 1091
static constexpr unsigned round_error() noexcept { return 0; } 
# 1093
static constexpr int min_exponent = 0; 
# 1094
static constexpr int min_exponent10 = 0; 
# 1095
static constexpr int max_exponent = 0; 
# 1096
static constexpr int max_exponent10 = 0; 
# 1098
static constexpr bool has_infinity = false; 
# 1099
static constexpr bool has_quiet_NaN = false; 
# 1100
static constexpr bool has_signaling_NaN = false; 
# 1101
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1103
static constexpr bool has_denorm_loss = false; 
# 1106
static constexpr unsigned infinity() noexcept { return static_cast< unsigned>(0); } 
# 1109
static constexpr unsigned quiet_NaN() noexcept 
# 1110
{ return static_cast< unsigned>(0); } 
# 1113
static constexpr unsigned signaling_NaN() noexcept 
# 1114
{ return static_cast< unsigned>(0); } 
# 1117
static constexpr unsigned denorm_min() noexcept 
# 1118
{ return static_cast< unsigned>(0); } 
# 1120
static constexpr bool is_iec559 = false; 
# 1121
static constexpr bool is_bounded = true; 
# 1122
static constexpr bool is_modulo = true; 
# 1124
static constexpr bool traps = true; 
# 1125
static constexpr bool tinyness_before = false; 
# 1126
static constexpr float_round_style round_style = round_toward_zero; 
# 1128
}; 
# 1132
template<> struct numeric_limits< long>  { 
# 1134
static constexpr bool is_specialized = true; 
# 1137
static constexpr long min() noexcept { return (-9223372036854775807L) - (1); } 
# 1140
static constexpr long max() noexcept { return 9223372036854775807L; } 
# 1144
static constexpr long lowest() noexcept { return min(); } 
# 1147
static constexpr int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 1148
static constexpr int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643L)) / (2136)); 
# 1150
static constexpr int max_digits10 = 0; 
# 1152
static constexpr bool is_signed = true; 
# 1153
static constexpr bool is_integer = true; 
# 1154
static constexpr bool is_exact = true; 
# 1155
static constexpr int radix = 2; 
# 1158
static constexpr long epsilon() noexcept { return 0; } 
# 1161
static constexpr long round_error() noexcept { return 0; } 
# 1163
static constexpr int min_exponent = 0; 
# 1164
static constexpr int min_exponent10 = 0; 
# 1165
static constexpr int max_exponent = 0; 
# 1166
static constexpr int max_exponent10 = 0; 
# 1168
static constexpr bool has_infinity = false; 
# 1169
static constexpr bool has_quiet_NaN = false; 
# 1170
static constexpr bool has_signaling_NaN = false; 
# 1171
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1173
static constexpr bool has_denorm_loss = false; 
# 1176
static constexpr long infinity() noexcept { return static_cast< long>(0); } 
# 1179
static constexpr long quiet_NaN() noexcept { return static_cast< long>(0); } 
# 1182
static constexpr long signaling_NaN() noexcept { return static_cast< long>(0); } 
# 1185
static constexpr long denorm_min() noexcept { return static_cast< long>(0); } 
# 1187
static constexpr bool is_iec559 = false; 
# 1188
static constexpr bool is_bounded = true; 
# 1189
static constexpr bool is_modulo = false; 
# 1191
static constexpr bool traps = true; 
# 1192
static constexpr bool tinyness_before = false; 
# 1193
static constexpr float_round_style round_style = round_toward_zero; 
# 1195
}; 
# 1199
template<> struct numeric_limits< unsigned long>  { 
# 1201
static constexpr bool is_specialized = true; 
# 1204
static constexpr unsigned long min() noexcept { return 0; } 
# 1207
static constexpr unsigned long max() noexcept { return ((9223372036854775807L) * 2UL) + (1); } 
# 1211
static constexpr unsigned long lowest() noexcept { return min(); } 
# 1214
static constexpr int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 1216
static constexpr int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643L)) / (2136)); 
# 1219
static constexpr int max_digits10 = 0; 
# 1221
static constexpr bool is_signed = false; 
# 1222
static constexpr bool is_integer = true; 
# 1223
static constexpr bool is_exact = true; 
# 1224
static constexpr int radix = 2; 
# 1227
static constexpr unsigned long epsilon() noexcept { return 0; } 
# 1230
static constexpr unsigned long round_error() noexcept { return 0; } 
# 1232
static constexpr int min_exponent = 0; 
# 1233
static constexpr int min_exponent10 = 0; 
# 1234
static constexpr int max_exponent = 0; 
# 1235
static constexpr int max_exponent10 = 0; 
# 1237
static constexpr bool has_infinity = false; 
# 1238
static constexpr bool has_quiet_NaN = false; 
# 1239
static constexpr bool has_signaling_NaN = false; 
# 1240
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1242
static constexpr bool has_denorm_loss = false; 
# 1245
static constexpr unsigned long infinity() noexcept 
# 1246
{ return static_cast< unsigned long>(0); } 
# 1249
static constexpr unsigned long quiet_NaN() noexcept 
# 1250
{ return static_cast< unsigned long>(0); } 
# 1253
static constexpr unsigned long signaling_NaN() noexcept 
# 1254
{ return static_cast< unsigned long>(0); } 
# 1257
static constexpr unsigned long denorm_min() noexcept 
# 1258
{ return static_cast< unsigned long>(0); } 
# 1260
static constexpr bool is_iec559 = false; 
# 1261
static constexpr bool is_bounded = true; 
# 1262
static constexpr bool is_modulo = true; 
# 1264
static constexpr bool traps = true; 
# 1265
static constexpr bool tinyness_before = false; 
# 1266
static constexpr float_round_style round_style = round_toward_zero; 
# 1268
}; 
# 1272
template<> struct numeric_limits< long long>  { 
# 1274
static constexpr bool is_specialized = true; 
# 1277
static constexpr long long min() noexcept { return (-9223372036854775807LL) - (1); } 
# 1280
static constexpr long long max() noexcept { return 9223372036854775807LL; } 
# 1284
static constexpr long long lowest() noexcept { return min(); } 
# 1287
static constexpr int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 1289
static constexpr int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1292
static constexpr int max_digits10 = 0; 
# 1294
static constexpr bool is_signed = true; 
# 1295
static constexpr bool is_integer = true; 
# 1296
static constexpr bool is_exact = true; 
# 1297
static constexpr int radix = 2; 
# 1300
static constexpr long long epsilon() noexcept { return 0; } 
# 1303
static constexpr long long round_error() noexcept { return 0; } 
# 1305
static constexpr int min_exponent = 0; 
# 1306
static constexpr int min_exponent10 = 0; 
# 1307
static constexpr int max_exponent = 0; 
# 1308
static constexpr int max_exponent10 = 0; 
# 1310
static constexpr bool has_infinity = false; 
# 1311
static constexpr bool has_quiet_NaN = false; 
# 1312
static constexpr bool has_signaling_NaN = false; 
# 1313
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1315
static constexpr bool has_denorm_loss = false; 
# 1318
static constexpr long long infinity() noexcept { return static_cast< long long>(0); } 
# 1321
static constexpr long long quiet_NaN() noexcept { return static_cast< long long>(0); } 
# 1324
static constexpr long long signaling_NaN() noexcept 
# 1325
{ return static_cast< long long>(0); } 
# 1328
static constexpr long long denorm_min() noexcept { return static_cast< long long>(0); } 
# 1330
static constexpr bool is_iec559 = false; 
# 1331
static constexpr bool is_bounded = true; 
# 1332
static constexpr bool is_modulo = false; 
# 1334
static constexpr bool traps = true; 
# 1335
static constexpr bool tinyness_before = false; 
# 1336
static constexpr float_round_style round_style = round_toward_zero; 
# 1338
}; 
# 1342
template<> struct numeric_limits< unsigned long long>  { 
# 1344
static constexpr bool is_specialized = true; 
# 1347
static constexpr unsigned long long min() noexcept { return 0; } 
# 1350
static constexpr unsigned long long max() noexcept { return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1354
static constexpr unsigned long long lowest() noexcept { return min(); } 
# 1357
static constexpr int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1359
static constexpr int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1362
static constexpr int max_digits10 = 0; 
# 1364
static constexpr bool is_signed = false; 
# 1365
static constexpr bool is_integer = true; 
# 1366
static constexpr bool is_exact = true; 
# 1367
static constexpr int radix = 2; 
# 1370
static constexpr unsigned long long epsilon() noexcept { return 0; } 
# 1373
static constexpr unsigned long long round_error() noexcept { return 0; } 
# 1375
static constexpr int min_exponent = 0; 
# 1376
static constexpr int min_exponent10 = 0; 
# 1377
static constexpr int max_exponent = 0; 
# 1378
static constexpr int max_exponent10 = 0; 
# 1380
static constexpr bool has_infinity = false; 
# 1381
static constexpr bool has_quiet_NaN = false; 
# 1382
static constexpr bool has_signaling_NaN = false; 
# 1383
static constexpr float_denorm_style has_denorm = denorm_absent; 
# 1385
static constexpr bool has_denorm_loss = false; 
# 1388
static constexpr unsigned long long infinity() noexcept 
# 1389
{ return static_cast< unsigned long long>(0); } 
# 1392
static constexpr unsigned long long quiet_NaN() noexcept 
# 1393
{ return static_cast< unsigned long long>(0); } 
# 1396
static constexpr unsigned long long signaling_NaN() noexcept 
# 1397
{ return static_cast< unsigned long long>(0); } 
# 1400
static constexpr unsigned long long denorm_min() noexcept 
# 1401
{ return static_cast< unsigned long long>(0); } 
# 1403
static constexpr bool is_iec559 = false; 
# 1404
static constexpr bool is_bounded = true; 
# 1405
static constexpr bool is_modulo = true; 
# 1407
static constexpr bool traps = true; 
# 1408
static constexpr bool tinyness_before = false; 
# 1409
static constexpr float_round_style round_style = round_toward_zero; 
# 1411
}; 
# 1593
template<> struct numeric_limits< float>  { 
# 1595
static constexpr bool is_specialized = true; 
# 1598
static constexpr float min() noexcept { return (1.175494351e-38F); } 
# 1601
static constexpr float max() noexcept { return (3.402823466e+38F); } 
# 1605
static constexpr float lowest() noexcept { return -(3.402823466e+38F); } 
# 1608
static constexpr int digits = 24; 
# 1609
static constexpr int digits10 = 6; 
# 1611
static constexpr int max_digits10 = ((2) + (((24) * 643L) / (2136))); 
# 1614
static constexpr bool is_signed = true; 
# 1615
static constexpr bool is_integer = false; 
# 1616
static constexpr bool is_exact = false; 
# 1617
static constexpr int radix = 2; 
# 1620
static constexpr float epsilon() noexcept { return (1.192092896e-07F); } 
# 1623
static constexpr float round_error() noexcept { return (0.5F); } 
# 1625
static constexpr int min_exponent = (-125); 
# 1626
static constexpr int min_exponent10 = (-37); 
# 1627
static constexpr int max_exponent = 128; 
# 1628
static constexpr int max_exponent10 = 38; 
# 1630
static constexpr bool has_infinity = (1); 
# 1631
static constexpr bool has_quiet_NaN = (1); 
# 1632
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1633
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1635
static constexpr bool has_denorm_loss = false; 
# 1639
static constexpr float infinity() noexcept { return __builtin_huge_valf(); } 
# 1642
static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 1645
static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 1648
static constexpr float denorm_min() noexcept { return (1.401298464e-45F); } 
# 1650
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1652
static constexpr bool is_bounded = true; 
# 1653
static constexpr bool is_modulo = false; 
# 1655
static constexpr bool traps = false; 
# 1656
static constexpr bool tinyness_before = false; 
# 1658
static constexpr float_round_style round_style = round_to_nearest; 
# 1660
}; 
# 1668
template<> struct numeric_limits< double>  { 
# 1670
static constexpr bool is_specialized = true; 
# 1673
static constexpr double min() noexcept { return (double)(2.225073858507201383e-308L); } 
# 1676
static constexpr double max() noexcept { return (double)(1.797693134862315708e+308L); } 
# 1680
static constexpr double lowest() noexcept { return -((double)(1.797693134862315708e+308L)); } 
# 1683
static constexpr int digits = 53; 
# 1684
static constexpr int digits10 = 15; 
# 1686
static constexpr int max_digits10 = ((2) + (((53) * 643L) / (2136))); 
# 1689
static constexpr bool is_signed = true; 
# 1690
static constexpr bool is_integer = false; 
# 1691
static constexpr bool is_exact = false; 
# 1692
static constexpr int radix = 2; 
# 1695
static constexpr double epsilon() noexcept { return (double)(2.220446049250313081e-16L); } 
# 1698
static constexpr double round_error() noexcept { return (0.5); } 
# 1700
static constexpr int min_exponent = (-1021); 
# 1701
static constexpr int min_exponent10 = (-307); 
# 1702
static constexpr int max_exponent = 1024; 
# 1703
static constexpr int max_exponent10 = 308; 
# 1705
static constexpr bool has_infinity = (1); 
# 1706
static constexpr bool has_quiet_NaN = (1); 
# 1707
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1708
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1710
static constexpr bool has_denorm_loss = false; 
# 1714
static constexpr double infinity() noexcept { return __builtin_huge_val(); } 
# 1717
static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); } 
# 1720
static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); } 
# 1723
static constexpr double denorm_min() noexcept { return (double)(4.940656458412465442e-324L); } 
# 1725
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1727
static constexpr bool is_bounded = true; 
# 1728
static constexpr bool is_modulo = false; 
# 1730
static constexpr bool traps = false; 
# 1731
static constexpr bool tinyness_before = false; 
# 1733
static constexpr float_round_style round_style = round_to_nearest; 
# 1735
}; 
# 1743
template<> struct numeric_limits< long double>  { 
# 1745
static constexpr bool is_specialized = true; 
# 1748
static constexpr long double min() noexcept { return (0.0L); } 
# 1751
static constexpr long double max() noexcept { return ((__builtin_huge_vall())); } 
# 1755
static constexpr long double lowest() noexcept { return -((__builtin_huge_vall())); } 
# 1758
static constexpr int digits = 64; 
# 1759
static constexpr int digits10 = 18; 
# 1761
static constexpr int max_digits10 = ((2) + (((64) * 643L) / (2136))); 
# 1764
static constexpr bool is_signed = true; 
# 1765
static constexpr bool is_integer = false; 
# 1766
static constexpr bool is_exact = false; 
# 1767
static constexpr int radix = 2; 
# 1770
static constexpr long double epsilon() noexcept { return (1.084202172485504434e-19L); } 
# 1773
static constexpr long double round_error() noexcept { return (0.5L); } 
# 1775
static constexpr int min_exponent = (-16381); 
# 1776
static constexpr int min_exponent10 = (-4931); 
# 1777
static constexpr int max_exponent = 16384; 
# 1778
static constexpr int max_exponent10 = 4932; 
# 1780
static constexpr bool has_infinity = (1); 
# 1781
static constexpr bool has_quiet_NaN = (1); 
# 1782
static constexpr bool has_signaling_NaN = has_quiet_NaN; 
# 1783
static constexpr float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1785
static constexpr bool has_denorm_loss = false; 
# 1789
static constexpr long double infinity() noexcept { return __builtin_huge_vall(); } 
# 1792
static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); } 
# 1795
static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); } 
# 1798
static constexpr long double denorm_min() noexcept { return (0.0L); } 
# 1800
static constexpr bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1802
static constexpr bool is_bounded = true; 
# 1803
static constexpr bool is_modulo = false; 
# 1805
static constexpr bool traps = false; 
# 1806
static constexpr bool tinyness_before = false; 
# 1808
static constexpr float_round_style round_style = round_to_nearest; 
# 1810
}; 
# 1817
}
# 59 "/usr/include/c++/5/bits/stl_uninitialized.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63
template< bool _TrivialValueTypes> 
# 64
struct __uninitialized_copy { 
# 66
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 68
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 69
__result) 
# 70
{ 
# 71
_ForwardIterator __cur = __result; 
# 72
try 
# 73
{ 
# 74
for (; __first != __last; (++__first), (++__cur)) { 
# 75
std::_Construct(std::__addressof(*__cur), *__first); }  
# 76
return __cur; 
# 77
} 
# 78
catch (...) 
# 79
{ 
# 80
std::_Destroy(__result, __cur); 
# 81
throw; 
# 82
}  
# 83
} 
# 84
}; 
# 87
template<> struct __uninitialized_copy< true>  { 
# 89
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 91
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 92
__result) 
# 93
{ return std::copy(__first, __last, __result); } 
# 94
}; 
# 105
template< class _InputIterator, class _ForwardIterator> inline _ForwardIterator 
# 107
uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 108
__result) 
# 109
{ 
# 111
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType1; 
# 113
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType2; 
# 118
typedef typename iterator_traits< _InputIterator> ::reference _RefType1; 
# 119
typedef typename iterator_traits< _ForwardIterator> ::reference _RefType2; 
# 120
const bool __assignable = (is_assignable< typename iterator_traits< _ForwardIterator> ::reference, typename iterator_traits< _InputIterator> ::reference> ::value); 
# 123
return std::__uninitialized_copy< __is_trivial(typename iterator_traits< _InputIterator> ::value_type) && __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_copy(__first, __last, __result); 
# 127
} 
# 130
template< bool _TrivialValueType> 
# 131
struct __uninitialized_fill { 
# 133
template< class _ForwardIterator, class _Tp> static void 
# 135
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 136
__x) 
# 137
{ 
# 138
_ForwardIterator __cur = __first; 
# 139
try 
# 140
{ 
# 141
for (; __cur != __last; ++__cur) { 
# 142
std::_Construct(std::__addressof(*__cur), __x); }  
# 143
} 
# 144
catch (...) 
# 145
{ 
# 146
std::_Destroy(__first, __cur); 
# 147
throw; 
# 148
}  
# 149
} 
# 150
}; 
# 153
template<> struct __uninitialized_fill< true>  { 
# 155
template< class _ForwardIterator, class _Tp> static void 
# 157
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 158
__x) 
# 159
{ std::fill(__first, __last, __x); } 
# 160
}; 
# 171
template< class _ForwardIterator, class _Tp> inline void 
# 173
uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 174
__x) 
# 175
{ 
# 177
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 182
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 185
std::__uninitialized_fill< __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_fill(__first, __last, __x); 
# 187
} 
# 190
template< bool _TrivialValueType> 
# 191
struct __uninitialized_fill_n { 
# 193
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 195
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 196
__x) 
# 197
{ 
# 198
_ForwardIterator __cur = __first; 
# 199
try 
# 200
{ 
# 201
for (; __n > 0; (--__n), (++__cur)) { 
# 202
std::_Construct(std::__addressof(*__cur), __x); }  
# 203
return __cur; 
# 204
} 
# 205
catch (...) 
# 206
{ 
# 207
std::_Destroy(__first, __cur); 
# 208
throw; 
# 209
}  
# 210
} 
# 211
}; 
# 214
template<> struct __uninitialized_fill_n< true>  { 
# 216
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 218
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 219
__x) 
# 220
{ return std::fill_n(__first, __n, __x); } 
# 221
}; 
# 234
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 236
uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) 
# 237
{ 
# 239
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 244
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 246
return __uninitialized_fill_n< __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_fill_n(__first, __n, __x); 
# 248
} 
# 256
template< class _InputIterator, class _ForwardIterator, class 
# 257
_Allocator> _ForwardIterator 
# 259
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 260
__result, _Allocator &__alloc) 
# 261
{ 
# 262
_ForwardIterator __cur = __result; 
# 263
try 
# 264
{ 
# 265
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 266
for (; __first != __last; (++__first), (++__cur)) { 
# 267
__traits::construct(__alloc, std::__addressof(*__cur), *__first); }  
# 268
return __cur; 
# 269
} 
# 270
catch (...) 
# 271
{ 
# 272
std::_Destroy(__result, __cur, __alloc); 
# 273
throw; 
# 274
}  
# 275
} 
# 277
template< class _InputIterator, class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 279
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 280
__result, allocator< _Tp>  &) 
# 281
{ return std::uninitialized_copy(__first, __last, __result); } 
# 283
template< class _InputIterator, class _ForwardIterator, class 
# 284
_Allocator> inline _ForwardIterator 
# 286
__uninitialized_move_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 287
__result, _Allocator &__alloc) 
# 288
{ 
# 289
return std::__uninitialized_copy_a(std::make_move_iterator(__first), std::make_move_iterator(__last), __result, __alloc); 
# 292
} 
# 294
template< class _InputIterator, class _ForwardIterator, class 
# 295
_Allocator> inline _ForwardIterator 
# 297
__uninitialized_move_if_noexcept_a(_InputIterator __first, _InputIterator 
# 298
__last, _ForwardIterator 
# 299
__result, _Allocator &
# 300
__alloc) 
# 301
{ 
# 302
return std::__uninitialized_copy_a(std::__make_move_if_noexcept_iterator(__first), std::__make_move_if_noexcept_iterator(__last), __result, __alloc); 
# 305
} 
# 307
template< class _ForwardIterator, class _Tp, class _Allocator> void 
# 309
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 310
__x, _Allocator &__alloc) 
# 311
{ 
# 312
_ForwardIterator __cur = __first; 
# 313
try 
# 314
{ 
# 315
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 316
for (; __cur != __last; ++__cur) { 
# 317
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 318
} 
# 319
catch (...) 
# 320
{ 
# 321
std::_Destroy(__first, __cur, __alloc); 
# 322
throw; 
# 323
}  
# 324
} 
# 326
template< class _ForwardIterator, class _Tp, class _Tp2> inline void 
# 328
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 329
__x, allocator< _Tp2>  &) 
# 330
{ std::uninitialized_fill(__first, __last, __x); } 
# 332
template< class _ForwardIterator, class _Size, class _Tp, class 
# 333
_Allocator> _ForwardIterator 
# 335
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 336
__x, _Allocator &__alloc) 
# 337
{ 
# 338
_ForwardIterator __cur = __first; 
# 339
try 
# 340
{ 
# 341
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 342
for (; __n > 0; (--__n), (++__cur)) { 
# 343
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 344
return __cur; 
# 345
} 
# 346
catch (...) 
# 347
{ 
# 348
std::_Destroy(__first, __cur, __alloc); 
# 349
throw; 
# 350
}  
# 351
} 
# 353
template< class _ForwardIterator, class _Size, class _Tp, class 
# 354
_Tp2> inline _ForwardIterator 
# 356
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 357
__x, allocator< _Tp2>  &) 
# 358
{ return std::uninitialized_fill_n(__first, __n, __x); } 
# 370
template< class _InputIterator1, class _InputIterator2, class 
# 371
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 373
__uninitialized_copy_move(_InputIterator1 __first1, _InputIterator1 
# 374
__last1, _InputIterator2 
# 375
__first2, _InputIterator2 
# 376
__last2, _ForwardIterator 
# 377
__result, _Allocator &
# 378
__alloc) 
# 379
{ 
# 380
_ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1, __result, __alloc); 
# 383
try 
# 384
{ 
# 385
return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc); 
# 386
} 
# 387
catch (...) 
# 388
{ 
# 389
std::_Destroy(__result, __mid, __alloc); 
# 390
throw; 
# 391
}  
# 392
} 
# 398
template< class _InputIterator1, class _InputIterator2, class 
# 399
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 401
__uninitialized_move_copy(_InputIterator1 __first1, _InputIterator1 
# 402
__last1, _InputIterator2 
# 403
__first2, _InputIterator2 
# 404
__last2, _ForwardIterator 
# 405
__result, _Allocator &
# 406
__alloc) 
# 407
{ 
# 408
_ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1, __result, __alloc); 
# 411
try 
# 412
{ 
# 413
return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc); 
# 414
} 
# 415
catch (...) 
# 416
{ 
# 417
std::_Destroy(__result, __mid, __alloc); 
# 418
throw; 
# 419
}  
# 420
} 
# 425
template< class _ForwardIterator, class _Tp, class _InputIterator, class 
# 426
_Allocator> inline _ForwardIterator 
# 428
__uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &
# 429
__x, _InputIterator __first, _InputIterator 
# 430
__last, _Allocator &__alloc) 
# 431
{ 
# 432
std::__uninitialized_fill_a(__result, __mid, __x, __alloc); 
# 433
try 
# 434
{ 
# 435
return std::__uninitialized_move_a(__first, __last, __mid, __alloc); 
# 436
} 
# 437
catch (...) 
# 438
{ 
# 439
std::_Destroy(__result, __mid, __alloc); 
# 440
throw; 
# 441
}  
# 442
} 
# 447
template< class _InputIterator, class _ForwardIterator, class _Tp, class 
# 448
_Allocator> inline void 
# 450
__uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 451
__first2, _ForwardIterator 
# 452
__last2, const _Tp &__x, _Allocator &
# 453
__alloc) 
# 454
{ 
# 455
_ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1, __first2, __alloc); 
# 458
try 
# 459
{ 
# 460
std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc); 
# 461
} 
# 462
catch (...) 
# 463
{ 
# 464
std::_Destroy(__first2, __mid2, __alloc); 
# 465
throw; 
# 466
}  
# 467
} 
# 473
template< bool _TrivialValueType> 
# 474
struct __uninitialized_default_1 { 
# 476
template< class _ForwardIterator> static void 
# 478
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 479
{ 
# 480
_ForwardIterator __cur = __first; 
# 481
try 
# 482
{ 
# 483
for (; __cur != __last; ++__cur) { 
# 484
std::_Construct(std::__addressof(*__cur)); }  
# 485
} 
# 486
catch (...) 
# 487
{ 
# 488
std::_Destroy(__first, __cur); 
# 489
throw; 
# 490
}  
# 491
} 
# 492
}; 
# 495
template<> struct __uninitialized_default_1< true>  { 
# 497
template< class _ForwardIterator> static void 
# 499
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 500
{ 
# 502
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 504
std::fill(__first, __last, _ValueType()); 
# 505
} 
# 506
}; 
# 508
template< bool _TrivialValueType> 
# 509
struct __uninitialized_default_n_1 { 
# 511
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 513
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 514
{ 
# 515
_ForwardIterator __cur = __first; 
# 516
try 
# 517
{ 
# 518
for (; __n > 0; (--__n), (++__cur)) { 
# 519
std::_Construct(std::__addressof(*__cur)); }  
# 520
return __cur; 
# 521
} 
# 522
catch (...) 
# 523
{ 
# 524
std::_Destroy(__first, __cur); 
# 525
throw; 
# 526
}  
# 527
} 
# 528
}; 
# 531
template<> struct __uninitialized_default_n_1< true>  { 
# 533
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 535
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 536
{ 
# 538
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 540
return std::fill_n(__first, __n, _ValueType()); 
# 541
} 
# 542
}; 
# 547
template< class _ForwardIterator> inline void 
# 549
__uninitialized_default(_ForwardIterator __first, _ForwardIterator 
# 550
__last) 
# 551
{ 
# 553
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 555
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 557
std::__uninitialized_default_1< __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_default(__first, __last); 
# 560
} 
# 564
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 566
__uninitialized_default_n(_ForwardIterator __first, _Size __n) 
# 567
{ 
# 569
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 571
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 573
return __uninitialized_default_n_1< __is_trivial(typename iterator_traits< _ForwardIterator> ::value_type) && __assignable> ::__uninit_default_n(__first, __n); 
# 576
} 
# 582
template< class _ForwardIterator, class _Allocator> void 
# 584
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 585
__last, _Allocator &
# 586
__alloc) 
# 587
{ 
# 588
_ForwardIterator __cur = __first; 
# 589
try 
# 590
{ 
# 591
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 592
for (; __cur != __last; ++__cur) { 
# 593
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 594
} 
# 595
catch (...) 
# 596
{ 
# 597
std::_Destroy(__first, __cur, __alloc); 
# 598
throw; 
# 599
}  
# 600
} 
# 602
template< class _ForwardIterator, class _Tp> inline void 
# 604
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 605
__last, allocator< _Tp>  &) 
# 607
{ std::__uninitialized_default(__first, __last); } 
# 613
template< class _ForwardIterator, class _Size, class _Allocator> _ForwardIterator 
# 615
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, _Allocator &
# 616
__alloc) 
# 617
{ 
# 618
_ForwardIterator __cur = __first; 
# 619
try 
# 620
{ 
# 621
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 622
for (; __n > 0; (--__n), (++__cur)) { 
# 623
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 624
return __cur; 
# 625
} 
# 626
catch (...) 
# 627
{ 
# 628
std::_Destroy(__first, __cur, __alloc); 
# 629
throw; 
# 630
}  
# 631
} 
# 633
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 635
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, allocator< _Tp>  &) 
# 637
{ return std::__uninitialized_default_n(__first, __n); } 
# 640
template< class _InputIterator, class _Size, class 
# 641
_ForwardIterator> _ForwardIterator 
# 643
__uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 644
__result, input_iterator_tag) 
# 645
{ 
# 646
_ForwardIterator __cur = __result; 
# 647
try 
# 648
{ 
# 649
for (; __n > 0; ((--__n), (++__first)), (++__cur)) { 
# 650
std::_Construct(std::__addressof(*__cur), *__first); }  
# 651
return __cur; 
# 652
} 
# 653
catch (...) 
# 654
{ 
# 655
std::_Destroy(__result, __cur); 
# 656
throw; 
# 657
}  
# 658
} 
# 660
template< class _RandomAccessIterator, class _Size, class 
# 661
_ForwardIterator> inline _ForwardIterator 
# 663
__uninitialized_copy_n(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 664
__result, random_access_iterator_tag) 
# 666
{ return std::uninitialized_copy(__first, __first + __n, __result); } 
# 677
template< class _InputIterator, class _Size, class _ForwardIterator> inline _ForwardIterator 
# 679
uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 680
__result) 
# 681
{ return std::__uninitialized_copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 682
} 
# 686
}
# 66 "/usr/include/c++/5/bits/stl_vector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _Tp, class _Alloc> 
# 72
struct _Vector_base { 
# 75
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other _Tp_alloc_type; 
# 77
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other> ::pointer pointer; 
# 79
struct _Vector_impl : public _Tp_alloc_type { 
# 82
typename ::std::_Vector_base< _Tp, _Alloc> ::pointer _M_start; 
# 83
typename ::std::_Vector_base< _Tp, _Alloc> ::pointer _M_finish; 
# 84
typename ::std::_Vector_base< _Tp, _Alloc> ::pointer _M_end_of_storage; 
# 86
_Vector_impl() : ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage() 
# 88
{ } 
# 90
_Vector_impl(const typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &__a) noexcept : ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage() 
# 92
{ } 
# 95
_Vector_impl(typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &&__a) noexcept : ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(::std::move(__a)), _M_start(), _M_finish(), _M_end_of_storage() 
# 98
{ } 
# 101
void _M_swap_data(_Vector_impl &__x) noexcept 
# 102
{ 
# 103
::std::swap(_M_start, __x._M_start); 
# 104
::std::swap(_M_finish, __x._M_finish); 
# 105
::std::swap(_M_end_of_storage, __x._M_end_of_storage); 
# 106
} 
# 107
}; 
# 110
typedef _Alloc allocator_type; 
# 113
_Tp_alloc_type &_M_get_Tp_allocator() noexcept 
# 114
{ return *(static_cast< _Tp_alloc_type *>(&(this->_M_impl))); } 
# 117
const _Tp_alloc_type &_M_get_Tp_allocator() const noexcept 
# 118
{ return *(static_cast< const _Tp_alloc_type *>(&(this->_M_impl))); } 
# 121
allocator_type get_allocator() const noexcept 
# 122
{ return (allocator_type)this->_M_get_Tp_allocator(); } 
# 124
_Vector_base() : _M_impl() 
# 125
{ } 
# 127
_Vector_base(const allocator_type &__a) noexcept : _M_impl(__a) 
# 128
{ } 
# 130
_Vector_base(size_t __n) : _M_impl() 
# 132
{ _M_create_storage(__n); } 
# 134
_Vector_base(size_t __n, const allocator_type &__a) : _M_impl(__a) 
# 136
{ _M_create_storage(__n); } 
# 139
_Vector_base(_Tp_alloc_type &&__a) noexcept : _M_impl(std::move(__a)) 
# 140
{ } 
# 142
_Vector_base(_Vector_base &&__x) noexcept : _M_impl(std::move(__x._M_get_Tp_allocator())) 
# 144
{ ((this->_M_impl)._M_swap_data(__x._M_impl)); } 
# 146
_Vector_base(_Vector_base &&__x, const allocator_type &__a) : _M_impl(__a) 
# 148
{ 
# 149
if (__x.get_allocator() == __a) { 
# 150
((this->_M_impl)._M_swap_data(__x._M_impl)); } else 
# 152
{ 
# 153
size_t __n = ((__x._M_impl)._M_finish) - ((__x._M_impl)._M_start); 
# 154
_M_create_storage(__n); 
# 155
}  
# 156
} 
# 159
~_Vector_base() noexcept 
# 160
{ _M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 161
} 
# 164
_Vector_impl _M_impl; 
# 167
pointer _M_allocate(size_t __n) 
# 168
{ 
# 169
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other>  _Tr; 
# 170
return (__n != (0)) ? _Tr::allocate(_M_impl, __n) : (pointer()); 
# 171
} 
# 174
void _M_deallocate(pointer __p, size_t __n) 
# 175
{ 
# 176
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other>  _Tr; 
# 177
if (__p) { 
# 178
_Tr::deallocate(_M_impl, __p, __n); }  
# 179
} 
# 183
private: void _M_create_storage(size_t __n) 
# 184
{ 
# 185
((this->_M_impl)._M_start) = this->_M_allocate(__n); 
# 186
((this->_M_impl)._M_finish) = ((this->_M_impl)._M_start); 
# 187
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 188
} 
# 189
}; 
# 213
template< class _Tp, class _Alloc = allocator< _Tp> > 
# 214
class vector : protected _Vector_base< _Tp, _Alloc>  { 
# 217
typedef typename _Alloc::value_type _Alloc_value_type; 
# 221
typedef ::std::_Vector_base< _Tp, _Alloc>  _Base; 
# 222
typedef typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type _Tp_alloc_type; 
# 223
typedef ::__gnu_cxx::__alloc_traits< typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type>  _Alloc_traits; 
# 226
public: typedef _Tp value_type; 
# 227
typedef typename ::std::_Vector_base< _Tp, _Alloc> ::pointer pointer; 
# 228
typedef typename ::__gnu_cxx::__alloc_traits< typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer const_pointer; 
# 229
typedef typename ::__gnu_cxx::__alloc_traits< typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::reference reference; 
# 230
typedef typename ::__gnu_cxx::__alloc_traits< typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_reference const_reference; 
# 231
typedef ::__gnu_cxx::__normal_iterator< typename ::std::_Vector_base< _Tp, _Alloc> ::pointer, vector>  iterator; 
# 233
typedef ::__gnu_cxx::__normal_iterator< typename ::__gnu_cxx::__alloc_traits< typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector>  const_iterator; 
# 234
typedef ::std::reverse_iterator< ::__gnu_cxx::__normal_iterator< typename ::__gnu_cxx::__alloc_traits< typename ::std::_Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::const_pointer, vector> >  const_reverse_iterator; 
# 235
typedef ::std::reverse_iterator< ::__gnu_cxx::__normal_iterator< typename ::std::_Vector_base< _Tp, _Alloc> ::pointer, vector> >  reverse_iterator; 
# 236
typedef ::std::size_t size_type; 
# 237
typedef ::std::ptrdiff_t difference_type; 
# 238
typedef _Alloc allocator_type; 
# 241
protected: using ::std::_Vector_base< _Tp, _Alloc> ::_M_allocate;
# 242
using ::std::_Vector_base< _Tp, _Alloc> ::_M_deallocate;
# 243
using ::std::_Vector_base< _Tp, _Alloc> ::_M_impl;
# 244
using ::std::_Vector_base< _Tp, _Alloc> ::_M_get_Tp_allocator;
# 253
public: vector() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _Base() 
# 257
{ } 
# 264
explicit vector(const allocator_type &__a) noexcept : _Base(__a) 
# 265
{ } 
# 277
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : _Base(__n, __a) 
# 279
{ _M_default_initialize(__n); } 
# 289
vector(size_type __n, const value_type &__value, const allocator_type &
# 290
__a = allocator_type()) : _Base(__n, __a) 
# 292
{ _M_fill_initialize(__n, __value); } 
# 318
vector(const vector &__x) : _Base(__x.size(), _Alloc_traits::_S_select_on_copy((__x._M_get_Tp_allocator()))) 
# 321
{ ((this->_M_impl)._M_finish) = ::std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 325
} 
# 335
vector(vector &&__x) noexcept : _Base(::std::move(__x)) 
# 336
{ } 
# 339
vector(const vector &__x, const allocator_type &__a) : _Base(__x.size(), __a) 
# 341
{ ((this->_M_impl)._M_finish) = ::std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 345
} 
# 348
vector(vector &&__rv, const allocator_type &__m) noexcept(_Alloc_traits::_S_always_equal()) : _Base(::std::move(__rv), __m) 
# 351
{ 
# 352
if ((__rv.get_allocator()) != __m) 
# 353
{ 
# 354
((this->_M_impl)._M_finish) = ::std::__uninitialized_move_a(__rv.begin(), __rv.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 358
__rv.clear(); 
# 359
}  
# 360
} 
# 373
vector(initializer_list< _Tp>  __l, const allocator_type &
# 374
__a = allocator_type()) : _Base(__a) 
# 376
{ 
# 377
_M_range_initialize((__l.begin()), (__l.end()), ::std::random_access_iterator_tag()); 
# 379
} 
# 399
template< class _InputIterator, class 
# 400
 = ::std::_RequireInputIter< _InputIterator> > 
# 401
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 402
__a = allocator_type()) : _Base(__a) 
# 404
{ _M_initialize_dispatch(__first, __last, ::std::__false_type()); } 
# 423
~vector() noexcept 
# 424
{ ::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 425
} 
# 436
vector &operator=(const vector & __x); 
# 448
vector &operator=(vector &&__x) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 449
{ 
# 450
constexpr bool __move_storage = (_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()); 
# 453
_M_move_assign(::std::move(__x), integral_constant< bool, __move_storage> ()); 
# 455
return *this; 
# 456
} 
# 470
vector &operator=(initializer_list< _Tp>  __l) 
# 471
{ 
# 472
(this->assign((__l.begin()), (__l.end()))); 
# 473
return *this; 
# 474
} 
# 488
void assign(size_type __n, const value_type &__val) 
# 489
{ _M_fill_assign(__n, __val); } 
# 504
template< class _InputIterator, class 
# 505
 = ::std::_RequireInputIter< _InputIterator> > void 
# 507
assign(_InputIterator __first, _InputIterator __last) 
# 508
{ _M_assign_dispatch(__first, __last, ::std::__false_type()); } 
# 533
void assign(initializer_list< _Tp>  __l) 
# 534
{ (this->assign((__l.begin()), (__l.end()))); } 
# 538
using ::std::_Vector_base< _Tp, _Alloc> ::get_allocator;
# 547
iterator begin() noexcept 
# 548
{ return ((iterator)(((this->_M_impl)._M_start))); } 
# 556
const_iterator begin() const noexcept 
# 557
{ return ((const_iterator)(((this->_M_impl)._M_start))); } 
# 565
iterator end() noexcept 
# 566
{ return ((iterator)(((this->_M_impl)._M_finish))); } 
# 574
const_iterator end() const noexcept 
# 575
{ return ((const_iterator)(((this->_M_impl)._M_finish))); } 
# 583
reverse_iterator rbegin() noexcept 
# 584
{ return ((reverse_iterator)(this->end())); } 
# 592
const_reverse_iterator rbegin() const noexcept 
# 593
{ return ((const_reverse_iterator)(this->end())); } 
# 601
reverse_iterator rend() noexcept 
# 602
{ return ((reverse_iterator)(this->begin())); } 
# 610
const_reverse_iterator rend() const noexcept 
# 611
{ return ((const_reverse_iterator)(this->begin())); } 
# 620
const_iterator cbegin() const noexcept 
# 621
{ return ((const_iterator)(((this->_M_impl)._M_start))); } 
# 629
const_iterator cend() const noexcept 
# 630
{ return ((const_iterator)(((this->_M_impl)._M_finish))); } 
# 638
const_reverse_iterator crbegin() const noexcept 
# 639
{ return ((const_reverse_iterator)(this->end())); } 
# 647
const_reverse_iterator crend() const noexcept 
# 648
{ return ((const_reverse_iterator)(this->begin())); } 
# 654
size_type size() const noexcept 
# 655
{ return (size_type)(((this->_M_impl)._M_finish) - ((this->_M_impl)._M_start)); } 
# 659
size_type max_size() const noexcept 
# 660
{ return _Alloc_traits::max_size(_M_get_Tp_allocator()); } 
# 673
void resize(size_type __new_size) 
# 674
{ 
# 675
if (__new_size > size()) { 
# 676
_M_default_append(__new_size - size()); } else { 
# 677
if (__new_size < size()) { 
# 678
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 679
} 
# 693
void resize(size_type __new_size, const value_type &__x) 
# 694
{ 
# 695
if (__new_size > size()) { 
# 696
insert(this->end(), __new_size - size(), __x); } else { 
# 697
if (__new_size < size()) { 
# 698
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 699
} 
# 725
void shrink_to_fit() 
# 726
{ _M_shrink_to_fit(); } 
# 734
size_type capacity() const noexcept 
# 735
{ return (size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 736
} 
# 743
bool empty() const noexcept 
# 744
{ return this->begin() == this->end(); } 
# 764
void reserve(size_type __n); 
# 779
reference operator[](size_type __n) noexcept 
# 780
{ return *(((this->_M_impl)._M_start) + __n); } 
# 794
const_reference operator[](size_type __n) const noexcept 
# 795
{ return *(((this->_M_impl)._M_start) + __n); } 
# 800
protected: void _M_range_check(size_type __n) const 
# 801
{ 
# 802
if (__n >= this->size()) { 
# 803
__throw_out_of_range_fmt("vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, this->size()); }  
# 807
} 
# 822
public: reference at(size_type __n) 
# 823
{ 
# 824
_M_range_check(__n); 
# 825
return (*this)[__n]; 
# 826
} 
# 840
const_reference at(size_type __n) const 
# 841
{ 
# 842
_M_range_check(__n); 
# 843
return (*this)[__n]; 
# 844
} 
# 851
reference front() noexcept 
# 852
{ return *this->begin(); } 
# 859
const_reference front() const noexcept 
# 860
{ return *this->begin(); } 
# 867
reference back() noexcept 
# 868
{ return *(this->end() - 1); } 
# 875
const_reference back() const noexcept 
# 876
{ return *(this->end() - 1); } 
# 890
_Tp *data() noexcept 
# 891
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 898
const _Tp *data() const noexcept 
# 899
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 913
void push_back(const value_type &__x) 
# 914
{ 
# 915
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 916
{ 
# 917
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 919
++((this->_M_impl)._M_finish); 
# 920
} else { 
# 923
_M_emplace_back_aux(__x); }  
# 927
} 
# 931
void push_back(value_type &&__x) 
# 932
{ emplace_back(::std::move(__x)); } 
# 934
template< class ..._Args> void emplace_back(_Args && ...__args); 
# 949
void pop_back() noexcept 
# 950
{ 
# 951
--((this->_M_impl)._M_finish); 
# 952
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 953
} 
# 968
template< class ..._Args> iterator emplace(const_iterator __position, _Args && ...__args); 
# 984
iterator insert(const_iterator __position, const value_type & __x); 
# 1014
iterator insert(const_iterator __position, value_type &&__x) 
# 1015
{ return emplace(__position, ::std::move(__x)); } 
# 1031
iterator insert(const_iterator __position, initializer_list< _Tp>  __l) 
# 1032
{ return (this->insert(__position, (__l.begin()), (__l.end()))); } 
# 1051
iterator insert(const_iterator __position, size_type __n, const value_type &__x) 
# 1052
{ 
# 1053
difference_type __offset = __position - cbegin(); 
# 1054
_M_fill_insert(this->begin() + __offset, __n, __x); 
# 1055
return this->begin() + __offset; 
# 1056
} 
# 1092
template< class _InputIterator, class 
# 1093
 = ::std::_RequireInputIter< _InputIterator> > iterator 
# 1095
insert(const_iterator __position, _InputIterator __first, _InputIterator 
# 1096
__last) 
# 1097
{ 
# 1098
difference_type __offset = __position - cbegin(); 
# 1099
_M_insert_dispatch(this->begin() + __offset, __first, __last, ::std::__false_type()); 
# 1101
return this->begin() + __offset; 
# 1102
} 
# 1146
iterator erase(const_iterator __position) 
# 1147
{ return _M_erase(this->begin() + (__position - cbegin())); } 
# 1173
iterator erase(const_iterator __first, const_iterator __last) 
# 1174
{ 
# 1175
const auto __beg = this->begin(); 
# 1176
const auto __cbeg = cbegin(); 
# 1177
return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg)); 
# 1178
} 
# 1194
void swap(vector &__x) noexcept(_Alloc_traits::_S_nothrow_swap()) 
# 1198
{ 
# 1199
((this->_M_impl)._M_swap_data((__x._M_impl))); 
# 1200
_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(), (__x._M_get_Tp_allocator())); 
# 1202
} 
# 1211
void clear() noexcept 
# 1212
{ _M_erase_at_end(((this->_M_impl)._M_start)); } 
# 1221
protected: 
# 1219
template< class _ForwardIterator> pointer 
# 1221
_M_allocate_and_copy(size_type __n, _ForwardIterator 
# 1222
__first, _ForwardIterator __last) 
# 1223
{ 
# 1224
pointer __result = (this->_M_allocate(__n)); 
# 1225
try 
# 1226
{ 
# 1227
::std::__uninitialized_copy_a(__first, __last, __result, _M_get_Tp_allocator()); 
# 1229
return __result; 
# 1230
} 
# 1231
catch (...) 
# 1232
{ 
# 1233
_M_deallocate(__result, __n); 
# 1234
throw; 
# 1235
}  
# 1236
} 
# 1245
template< class _Integer> void 
# 1247
_M_initialize_dispatch(_Integer __n, _Integer __value, ::std::__true_type) 
# 1248
{ 
# 1249
((this->_M_impl)._M_start) = _M_allocate(static_cast< size_type>(__n)); 
# 1250
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + (static_cast< size_type>(__n))); 
# 1252
_M_fill_initialize(static_cast< size_type>(__n), __value); 
# 1253
} 
# 1256
template< class _InputIterator> void 
# 1258
_M_initialize_dispatch(_InputIterator __first, _InputIterator __last, ::std::__false_type) 
# 1260
{ 
# 1262
typedef typename iterator_traits< _InputIterator> ::iterator_category _IterCategory; 
# 1263
_M_range_initialize(__first, __last, _IterCategory()); 
# 1264
} 
# 1267
template< class _InputIterator> void 
# 1269
_M_range_initialize(_InputIterator __first, _InputIterator 
# 1270
__last, ::std::input_iterator_tag) 
# 1271
{ 
# 1272
for (; __first != __last; ++__first) { 
# 1274
emplace_back(*__first); }  
# 1278
} 
# 1281
template< class _ForwardIterator> void 
# 1283
_M_range_initialize(_ForwardIterator __first, _ForwardIterator 
# 1284
__last, ::std::forward_iterator_tag) 
# 1285
{ 
# 1286
const size_type __n = ::std::distance(__first, __last); 
# 1287
((this->_M_impl)._M_start) = (this->_M_allocate(__n)); 
# 1288
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 1289
((this->_M_impl)._M_finish) = ::std::__uninitialized_copy_a(__first, __last, ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 1293
} 
# 1298
void _M_fill_initialize(size_type __n, const value_type &__value) 
# 1299
{ 
# 1300
((this->_M_impl)._M_finish) = ::std::__uninitialized_fill_n_a(((this->_M_impl)._M_start), __n, __value, _M_get_Tp_allocator()); 
# 1303
} 
# 1308
void _M_default_initialize(size_type __n) 
# 1309
{ 
# 1310
((this->_M_impl)._M_finish) = ::std::__uninitialized_default_n_a(((this->_M_impl)._M_start), __n, _M_get_Tp_allocator()); 
# 1313
} 
# 1323
template< class _Integer> void 
# 1325
_M_assign_dispatch(_Integer __n, _Integer __val, ::std::__true_type) 
# 1326
{ _M_fill_assign(__n, __val); } 
# 1329
template< class _InputIterator> void 
# 1331
_M_assign_dispatch(_InputIterator __first, _InputIterator __last, ::std::__false_type) 
# 1333
{ 
# 1335
typedef typename iterator_traits< _InputIterator> ::iterator_category _IterCategory; 
# 1336
_M_assign_aux(__first, __last, _IterCategory()); 
# 1337
} 
# 1340
template< class _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, ::std::input_iterator_tag); 
# 1346
template< class _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, ::std::forward_iterator_tag); 
# 1354
void _M_fill_assign(size_type __n, const value_type & __val); 
# 1363
template< class _Integer> void 
# 1365
_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, ::std::__true_type) 
# 1367
{ _M_fill_insert(__pos, __n, __val); } 
# 1370
template< class _InputIterator> void 
# 1372
_M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator 
# 1373
__last, ::std::__false_type) 
# 1374
{ 
# 1376
typedef typename iterator_traits< _InputIterator> ::iterator_category _IterCategory; 
# 1377
_M_range_insert(__pos, __first, __last, _IterCategory()); 
# 1378
} 
# 1381
template< class _InputIterator> void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, ::std::input_iterator_tag); 
# 1387
template< class _ForwardIterator> void _M_range_insert(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, ::std::forward_iterator_tag); 
# 1395
void _M_fill_insert(iterator __pos, size_type __n, const value_type & __x); 
# 1400
void _M_default_append(size_type __n); 
# 1403
bool _M_shrink_to_fit(); 
# 1411
template< class ..._Args> void _M_insert_aux(iterator __position, _Args && ...__args); 
# 1415
template< class ..._Args> void _M_emplace_back_aux(_Args && ...__args); 
# 1422
size_type _M_check_len(size_type __n, const char *__s) const 
# 1423
{ 
# 1424
if ((max_size() - size()) < __n) { 
# 1425
__throw_length_error(__s); }  
# 1427
const size_type __len = size() + ::std::max(size(), __n); 
# 1428
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1429
} 
# 1436
void _M_erase_at_end(pointer __pos) noexcept 
# 1437
{ 
# 1438
::std::_Destroy(__pos, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 1439
((this->_M_impl)._M_finish) = __pos; 
# 1440
} 
# 1443
iterator _M_erase(iterator __position); 
# 1446
iterator _M_erase(iterator __first, iterator __last); 
# 1454
private: void _M_move_assign(vector &&__x, ::std::true_type) noexcept 
# 1455
{ 
# 1456
vector __tmp(get_allocator()); 
# 1457
((this->_M_impl)._M_swap_data((__tmp._M_impl))); 
# 1458
((this->_M_impl)._M_swap_data((__x._M_impl))); 
# 1459
::std::__alloc_on_move(_M_get_Tp_allocator(), (__x._M_get_Tp_allocator())); 
# 1460
} 
# 1465
void _M_move_assign(vector &&__x, ::std::false_type) 
# 1466
{ 
# 1467
if ((__x._M_get_Tp_allocator()) == (this->_M_get_Tp_allocator())) { 
# 1468
_M_move_assign(::std::move(__x), ::std::true_type()); } else 
# 1470
{ 
# 1473
(this->assign(::std::__make_move_if_noexcept_iterator(__x.begin()), ::std::__make_move_if_noexcept_iterator(__x.end()))); 
# 1475
__x.clear(); 
# 1476
}  
# 1477
} 
# 1481
template< class _Up> _Up *
# 1483
_M_data_ptr(_Up *__ptr) const 
# 1484
{ return __ptr; } 
# 1486
template< class _Ptr> typename pointer_traits< _Ptr> ::element_type *
# 1488
_M_data_ptr(_Ptr __ptr) const 
# 1489
{ return (empty()) ? nullptr : ::std::__addressof(*__ptr); } 
# 1496
}; 
# 1509
template< class _Tp, class _Alloc> inline bool 
# 1511
operator==(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1512
{ return ((__x.size()) == (__y.size())) && std::equal((__x.begin()), (__x.end()), (__y.begin())); 
# 1513
} 
# 1526
template< class _Tp, class _Alloc> inline bool 
# 1528
operator<(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1529
{ return std::lexicographical_compare((__x.begin()), (__x.end()), (__y.begin()), (__y.end())); 
# 1530
} 
# 1533
template< class _Tp, class _Alloc> inline bool 
# 1535
operator!=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1536
{ return !(__x == __y); } 
# 1539
template< class _Tp, class _Alloc> inline bool 
# 1541
operator>(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1542
{ return __y < __x; } 
# 1545
template< class _Tp, class _Alloc> inline bool 
# 1547
operator<=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1548
{ return !(__y < __x); } 
# 1551
template< class _Tp, class _Alloc> inline bool 
# 1553
operator>=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1554
{ return !(__x < __y); } 
# 1557
template< class _Tp, class _Alloc> inline void 
# 1559
swap(vector< _Tp, _Alloc>  &__x, vector< _Tp, _Alloc>  &__y) 
# 1560
{ (__x.swap(__y)); } 
# 1563
}
# 63 "/usr/include/c++/5/bits/stl_bvector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 67
typedef unsigned long _Bit_type; 
# 68
enum { _S_word_bit = 64}; 
# 70
struct _Bit_reference { 
# 72
_Bit_type *_M_p; 
# 73
_Bit_type _M_mask; 
# 75
_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y) 
# 76
{ } 
# 78
_Bit_reference() noexcept : _M_p((0)), _M_mask((0)) { } 
# 80
operator bool() const noexcept 
# 81
{ return !(!((*(_M_p)) & (_M_mask))); } 
# 84
_Bit_reference &operator=(bool __x) noexcept 
# 85
{ 
# 86
if (__x) { 
# 87
(*(_M_p)) |= (_M_mask); } else { 
# 89
(*(_M_p)) &= (~(_M_mask)); }  
# 90
return *this; 
# 91
} 
# 94
_Bit_reference &operator=(const _Bit_reference &__x) noexcept 
# 95
{ return ((*this) = ((bool)__x)); } 
# 98
bool operator==(const _Bit_reference &__x) const 
# 99
{ return ((bool)(*this)) == ((bool)__x); } 
# 102
bool operator<(const _Bit_reference &__x) const 
# 103
{ return (!((bool)(*this))) && ((bool)__x); } 
# 106
void flip() noexcept 
# 107
{ (*(_M_p)) ^= (_M_mask); } 
# 108
}; 
# 112
inline void swap(_Bit_reference __x, _Bit_reference __y) noexcept 
# 113
{ 
# 114
bool __tmp = __x; 
# 115
(__x = __y); 
# 116
(__y = __tmp); 
# 117
} 
# 120
inline void swap(_Bit_reference __x, bool &__y) noexcept 
# 121
{ 
# 122
bool __tmp = __x; 
# 123
(__x = __y); 
# 124
__y = __tmp; 
# 125
} 
# 128
inline void swap(bool &__x, _Bit_reference __y) noexcept 
# 129
{ 
# 130
bool __tmp = __x; 
# 131
__x = __y; 
# 132
(__y = __tmp); 
# 133
} 
# 136
struct _Bit_iterator_base : public iterator< random_access_iterator_tag, bool>  { 
# 139
_Bit_type *_M_p; 
# 140
unsigned _M_offset; 
# 142
_Bit_iterator_base(_Bit_type *__x, unsigned __y) : _M_p(__x), _M_offset(__y) 
# 143
{ } 
# 146
void _M_bump_up() 
# 147
{ 
# 148
if (((_M_offset)++) == (((int)_S_word_bit) - 1)) 
# 149
{ 
# 150
(_M_offset) = (0); 
# 151
++(_M_p); 
# 152
}  
# 153
} 
# 156
void _M_bump_down() 
# 157
{ 
# 158
if (((_M_offset)--) == (0)) 
# 159
{ 
# 160
(_M_offset) = (((int)_S_word_bit) - 1); 
# 161
--(_M_p); 
# 162
}  
# 163
} 
# 166
void _M_incr(ptrdiff_t __i) 
# 167
{ 
# 168
difference_type __n = __i + (_M_offset); 
# 169
(_M_p) += (__n / ((int)_S_word_bit)); 
# 170
__n = (__n % ((int)_S_word_bit)); 
# 171
if (__n < (0)) 
# 172
{ 
# 173
__n += ((int)_S_word_bit); 
# 174
--(_M_p); 
# 175
}  
# 176
(_M_offset) = (static_cast< unsigned>(__n)); 
# 177
} 
# 180
bool operator==(const _Bit_iterator_base &__i) const 
# 181
{ return ((_M_p) == (__i._M_p)) && ((_M_offset) == (__i._M_offset)); } 
# 184
bool operator<(const _Bit_iterator_base &__i) const 
# 185
{ 
# 186
return ((_M_p) < (__i._M_p)) || (((_M_p) == (__i._M_p)) && ((_M_offset) < (__i._M_offset))); 
# 188
} 
# 191
bool operator!=(const _Bit_iterator_base &__i) const 
# 192
{ return !((*this) == __i); } 
# 195
bool operator>(const _Bit_iterator_base &__i) const 
# 196
{ return (__i < (*this)); } 
# 199
bool operator<=(const _Bit_iterator_base &__i) const 
# 200
{ return !(__i < (*this)); } 
# 203
bool operator>=(const _Bit_iterator_base &__i) const 
# 204
{ return !((*this) < __i); } 
# 205
}; 
# 208
inline ptrdiff_t operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 209
{ 
# 210
return ((((int)_S_word_bit) * ((__x._M_p) - (__y._M_p))) + (__x._M_offset)) - (__y._M_offset); 
# 212
} 
# 214
struct _Bit_iterator : public _Bit_iterator_base { 
# 216
typedef _Bit_reference reference; 
# 217
typedef _Bit_reference *pointer; 
# 218
typedef _Bit_iterator iterator; 
# 220
_Bit_iterator() : _Bit_iterator_base(0, 0) { } 
# 222
_Bit_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 223
{ } 
# 226
iterator _M_const_cast() const 
# 227
{ return *this; } 
# 230
reference operator*() const 
# 231
{ return reference(_M_p, 1UL << (_M_offset)); } 
# 234
iterator &operator++() 
# 235
{ 
# 236
this->_M_bump_up(); 
# 237
return *this; 
# 238
} 
# 241
iterator operator++(int) 
# 242
{ 
# 243
iterator __tmp = *this; 
# 244
this->_M_bump_up(); 
# 245
return __tmp; 
# 246
} 
# 249
iterator &operator--() 
# 250
{ 
# 251
this->_M_bump_down(); 
# 252
return *this; 
# 253
} 
# 256
iterator operator--(int) 
# 257
{ 
# 258
iterator __tmp = *this; 
# 259
this->_M_bump_down(); 
# 260
return __tmp; 
# 261
} 
# 264
iterator &operator+=(difference_type __i) 
# 265
{ 
# 266
this->_M_incr(__i); 
# 267
return *this; 
# 268
} 
# 271
iterator &operator-=(difference_type __i) 
# 272
{ 
# 273
((*this) += (-__i)); 
# 274
return *this; 
# 275
} 
# 278
iterator operator+(difference_type __i) const 
# 279
{ 
# 280
iterator __tmp = *this; 
# 281
return (__tmp += __i); 
# 282
} 
# 285
iterator operator-(difference_type __i) const 
# 286
{ 
# 287
iterator __tmp = *this; 
# 288
return (__tmp -= __i); 
# 289
} 
# 292
reference operator[](difference_type __i) const 
# 293
{ return (*(((*this) + __i))); } 
# 294
}; 
# 297
inline _Bit_iterator operator+(ptrdiff_t __n, const _Bit_iterator &__x) 
# 298
{ return (__x + __n); } 
# 300
struct _Bit_const_iterator : public _Bit_iterator_base { 
# 302
typedef bool reference; 
# 303
typedef bool const_reference; 
# 304
typedef const bool *pointer; 
# 305
typedef _Bit_const_iterator const_iterator; 
# 307
_Bit_const_iterator() : _Bit_iterator_base(0, 0) { } 
# 309
_Bit_const_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 310
{ } 
# 312
_Bit_const_iterator(const _Bit_iterator &__x) : _Bit_iterator_base(__x._M_p, __x._M_offset) 
# 313
{ } 
# 316
_Bit_iterator _M_const_cast() const 
# 317
{ return _Bit_iterator(_M_p, _M_offset); } 
# 320
const_reference operator*() const 
# 321
{ return _Bit_reference(_M_p, 1UL << (_M_offset)); } 
# 324
const_iterator &operator++() 
# 325
{ 
# 326
this->_M_bump_up(); 
# 327
return *this; 
# 328
} 
# 331
const_iterator operator++(int) 
# 332
{ 
# 333
const_iterator __tmp = *this; 
# 334
this->_M_bump_up(); 
# 335
return __tmp; 
# 336
} 
# 339
const_iterator &operator--() 
# 340
{ 
# 341
this->_M_bump_down(); 
# 342
return *this; 
# 343
} 
# 346
const_iterator operator--(int) 
# 347
{ 
# 348
const_iterator __tmp = *this; 
# 349
this->_M_bump_down(); 
# 350
return __tmp; 
# 351
} 
# 354
const_iterator &operator+=(difference_type __i) 
# 355
{ 
# 356
this->_M_incr(__i); 
# 357
return *this; 
# 358
} 
# 361
const_iterator &operator-=(difference_type __i) 
# 362
{ 
# 363
((*this) += (-__i)); 
# 364
return *this; 
# 365
} 
# 368
const_iterator operator+(difference_type __i) const 
# 369
{ 
# 370
const_iterator __tmp = *this; 
# 371
return (__tmp += __i); 
# 372
} 
# 375
const_iterator operator-(difference_type __i) const 
# 376
{ 
# 377
const_iterator __tmp = *this; 
# 378
return (__tmp -= __i); 
# 379
} 
# 382
const_reference operator[](difference_type __i) const 
# 383
{ return (*(((*this) + __i))); } 
# 384
}; 
# 387
inline _Bit_const_iterator operator+(ptrdiff_t __n, const _Bit_const_iterator &__x) 
# 388
{ return (__x + __n); } 
# 391
inline void __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x) 
# 392
{ 
# 393
for (; (__first != __last); (++__first)) { 
# 394
(((*__first)) = __x); }  
# 395
} 
# 398
inline void fill(_Bit_iterator __first, _Bit_iterator __last, const bool &__x) 
# 399
{ 
# 400
if ((__first._M_p) != (__last._M_p)) 
# 401
{ 
# 402
std::fill((__first._M_p) + 1, __last._M_p, __x ? ~0 : 0); 
# 403
__fill_bvector(__first, _Bit_iterator((__first._M_p) + 1, 0), __x); 
# 404
__fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x); 
# 405
} else { 
# 407
__fill_bvector(__first, __last, __x); }  
# 408
} 
# 410
template< class _Alloc> 
# 411
struct _Bvector_base { 
# 414
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< unsigned long> ::other _Bit_alloc_type; 
# 416
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< unsigned long> ::other>  _Bit_alloc_traits; 
# 417
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< unsigned long> ::other> ::pointer _Bit_pointer; 
# 419
struct _Bvector_impl : public _Bit_alloc_type { 
# 422
::std::_Bit_iterator _M_start; 
# 423
::std::_Bit_iterator _M_finish; 
# 424
typename ::std::_Bvector_base< _Alloc> ::_Bit_pointer _M_end_of_storage; 
# 426
_Bvector_impl() : ::std::_Bvector_base< _Alloc> ::_Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage() 
# 428
{ } 
# 430
_Bvector_impl(const typename ::std::_Bvector_base< _Alloc> ::_Bit_alloc_type &__a) : ::std::_Bvector_base< _Alloc> ::_Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage() 
# 432
{ } 
# 435
_Bvector_impl(typename ::std::_Bvector_base< _Alloc> ::_Bit_alloc_type &&__a) : ::std::_Bvector_base< _Alloc> ::_Bit_alloc_type(::std::move(__a)), _M_start(), _M_finish(), _M_end_of_storage() 
# 438
{ } 
# 442
::std::_Bit_type *_M_end_addr() const noexcept 
# 443
{ 
# 444
if (_M_end_of_storage) { 
# 445
return ::std::__addressof((_M_end_of_storage)[-1]) + 1; }  
# 446
return 0; 
# 447
} 
# 448
}; 
# 451
typedef _Alloc allocator_type; 
# 454
_Bit_alloc_type &_M_get_Bit_allocator() noexcept 
# 455
{ return *(static_cast< _Bit_alloc_type *>(&(this->_M_impl))); } 
# 458
const _Bit_alloc_type &_M_get_Bit_allocator() const noexcept 
# 459
{ return *(static_cast< const _Bit_alloc_type *>(&(this->_M_impl))); } 
# 462
allocator_type get_allocator() const noexcept 
# 463
{ return (allocator_type)this->_M_get_Bit_allocator(); } 
# 465
_Bvector_base() : _M_impl() 
# 466
{ } 
# 468
_Bvector_base(const allocator_type &__a) : _M_impl(__a) 
# 469
{ } 
# 472
_Bvector_base(_Bvector_base &&__x) noexcept : _M_impl(std::move(__x._M_get_Bit_allocator())) 
# 474
{ 
# 475
((this->_M_impl)._M_start) = ((__x._M_impl)._M_start); 
# 476
((this->_M_impl)._M_finish) = ((__x._M_impl)._M_finish); 
# 477
((this->_M_impl)._M_end_of_storage) = ((__x._M_impl)._M_end_of_storage); 
# 478
((__x._M_impl)._M_start) = _Bit_iterator(); 
# 479
((__x._M_impl)._M_finish) = _Bit_iterator(); 
# 480
((__x._M_impl)._M_end_of_storage) = nullptr; 
# 481
} 
# 484
~_Bvector_base() 
# 485
{ this->_M_deallocate(); } 
# 488
protected: _Bvector_impl _M_impl; 
# 491
_Bit_pointer _M_allocate(size_t __n) 
# 492
{ return _Bit_alloc_traits::allocate(_M_impl, (_S_nword)(__n)); } 
# 495
void _M_deallocate() 
# 496
{ 
# 497
if (((_M_impl)._M_start)._M_p) 
# 498
{ 
# 499
const size_t __n = ((_M_impl)._M_end_addr()) - (((_M_impl)._M_start)._M_p); 
# 500
_Bit_alloc_traits::deallocate(_M_impl, ((_M_impl)._M_end_of_storage) - __n, __n); 
# 503
}  
# 504
} 
# 507
static size_t _S_nword(size_t __n) 
# 508
{ return ((__n + ((int)_S_word_bit)) - (1)) / ((int)_S_word_bit); } 
# 509
}; 
# 512
}
# 517
namespace std __attribute((__visibility__("default"))) { 
# 540
template< class _Alloc> 
# 541
class vector< bool, _Alloc>  : protected _Bvector_base< _Alloc>  { 
# 543
typedef ::std::_Bvector_base< _Alloc>  _Base; 
# 544
typedef typename ::std::_Bvector_base< _Alloc> ::_Bit_pointer _Bit_pointer; 
# 545
typedef typename ::std::_Bvector_base< _Alloc> ::_Bit_alloc_traits _Bit_alloc_traits; 
# 548
template< class > friend struct hash; 
# 552
public: typedef bool value_type; 
# 553
typedef ::std::size_t size_type; 
# 554
typedef ::std::ptrdiff_t difference_type; 
# 555
typedef ::std::_Bit_reference reference; 
# 556
typedef bool const_reference; 
# 557
typedef ::std::_Bit_reference *pointer; 
# 558
typedef const bool *const_pointer; 
# 559
typedef ::std::_Bit_iterator iterator; 
# 560
typedef ::std::_Bit_const_iterator const_iterator; 
# 561
typedef ::std::reverse_iterator< ::std::_Bit_const_iterator>  const_reverse_iterator; 
# 562
typedef ::std::reverse_iterator< ::std::_Bit_iterator>  reverse_iterator; 
# 563
typedef _Alloc allocator_type; 
# 565
allocator_type get_allocator() const 
# 566
{ return _Base::get_allocator(); } 
# 569
protected: using ::std::_Bvector_base< _Alloc> ::_M_allocate;
# 570
using ::std::_Bvector_base< _Alloc> ::_M_deallocate;
# 571
using ::std::_Bvector_base< _Alloc> ::_S_nword;
# 572
using ::std::_Bvector_base< _Alloc> ::_M_get_Bit_allocator;
# 575
public: vector() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _Base() 
# 579
{ } 
# 582
explicit vector(const allocator_type &__a) : _Base(__a) 
# 583
{ } 
# 587
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : vector(__n, false, __a) 
# 589
{ } 
# 591
vector(size_type __n, const bool &__value, const allocator_type &
# 592
__a = allocator_type()) : _Base(__a) 
# 594
{ 
# 595
_M_initialize(__n); 
# 596
::std::fill((((this->_M_impl)._M_start)._M_p), ((this->_M_impl)._M_end_addr()), __value ? ~0 : 0); 
# 598
} 
# 611
vector(const ::std::vector< bool, _Alloc>  &__x) : _Base(_Bit_alloc_traits::_S_select_on_copy((__x._M_get_Bit_allocator()))) 
# 613
{ 
# 614
_M_initialize(__x.size()); 
# 615
_M_copy_aligned(__x.begin(), __x.end(), ((this->_M_impl)._M_start)); 
# 616
} 
# 619
vector(::std::vector< bool, _Alloc>  &&__x) noexcept : _Base(::std::move(__x)) 
# 620
{ } 
# 622
vector(::std::vector< bool, _Alloc>  &&__x, const allocator_type &__a) noexcept(_Bit_alloc_traits::_S_always_equal()) : _Base(__a) 
# 625
{ 
# 626
if (__x.get_allocator() == __a) 
# 627
{ 
# 628
((this->_M_impl)._M_start) = ((__x._M_impl)._M_start); 
# 629
((this->_M_impl)._M_finish) = ((__x._M_impl)._M_finish); 
# 630
((this->_M_impl)._M_end_of_storage) = ((__x._M_impl)._M_end_of_storage); 
# 631
((__x._M_impl)._M_start) = ::std::_Bit_iterator(); 
# 632
((__x._M_impl)._M_finish) = ::std::_Bit_iterator(); 
# 633
((__x._M_impl)._M_end_of_storage) = nullptr; 
# 634
} else 
# 636
{ 
# 637
_M_initialize(__x.size()); 
# 638
_M_copy_aligned(__x.begin(), __x.end(), this->begin()); 
# 639
__x.clear(); 
# 640
}  
# 641
} 
# 643
vector(const ::std::vector< bool, _Alloc>  &__x, const allocator_type &__a) : _Base(__a) 
# 645
{ 
# 646
_M_initialize(__x.size()); 
# 647
_M_copy_aligned(__x.begin(), __x.end(), ((this->_M_impl)._M_start)); 
# 648
} 
# 650
vector(::std::initializer_list< bool>  __l, const allocator_type &
# 651
__a = allocator_type()) : _Base(__a) 
# 653
{ 
# 654
_M_initialize_range(__l.begin(), __l.end(), ::std::random_access_iterator_tag()); 
# 656
} 
# 660
template< class _InputIterator, class 
# 661
 = ::std::_RequireInputIter< _InputIterator> > 
# 662
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 663
__a = allocator_type()) : _Base(__a) 
# 665
{ _M_initialize_dispatch(__first, __last, ::std::__false_type()); } 
# 677
~vector() noexcept { } 
# 680
::std::vector< bool, _Alloc>  &operator=(const ::std::vector< bool, _Alloc>  &__x) 
# 681
{ 
# 682
if ((&__x) == this) { 
# 683
return *this; }  
# 685
if (_Bit_alloc_traits::_S_propagate_on_copy_assign()) 
# 686
{ 
# 687
if ((this->_M_get_Bit_allocator()) != (__x._M_get_Bit_allocator())) 
# 688
{ 
# 689
(this->_M_deallocate()); 
# 690
::std::__alloc_on_copy(_M_get_Bit_allocator(), (__x._M_get_Bit_allocator())); 
# 692
_M_initialize(__x.size()); 
# 693
} else { 
# 695
::std::__alloc_on_copy(_M_get_Bit_allocator(), (__x._M_get_Bit_allocator())); }  
# 697
}  
# 699
if (__x.size() > capacity()) 
# 700
{ 
# 701
(this->_M_deallocate()); 
# 702
_M_initialize(__x.size()); 
# 703
}  
# 704
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), this->begin()); 
# 706
return *this; 
# 707
} 
# 711
::std::vector< bool, _Alloc>  &operator=(::std::vector< bool, _Alloc>  &&__x) noexcept(_Bit_alloc_traits::_S_nothrow_move()) 
# 712
{ 
# 713
if (_Bit_alloc_traits::_S_propagate_on_move_assign() || ((this->_M_get_Bit_allocator()) == (__x._M_get_Bit_allocator()))) 
# 715
{ 
# 716
(this->_M_deallocate()); 
# 717
((this->_M_impl)._M_start) = ((__x._M_impl)._M_start); 
# 718
((this->_M_impl)._M_finish) = ((__x._M_impl)._M_finish); 
# 719
((this->_M_impl)._M_end_of_storage) = ((__x._M_impl)._M_end_of_storage); 
# 720
((__x._M_impl)._M_start) = ::std::_Bit_iterator(); 
# 721
((__x._M_impl)._M_finish) = ::std::_Bit_iterator(); 
# 722
((__x._M_impl)._M_end_of_storage) = nullptr; 
# 723
::std::__alloc_on_move(_M_get_Bit_allocator(), (__x._M_get_Bit_allocator())); 
# 725
} else 
# 727
{ 
# 728
if (__x.size() > capacity()) 
# 729
{ 
# 730
(this->_M_deallocate()); 
# 731
_M_initialize(__x.size()); 
# 732
}  
# 733
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), this->begin()); 
# 735
__x.clear(); 
# 736
}  
# 737
return *this; 
# 738
} 
# 741
::std::vector< bool, _Alloc>  &operator=(::std::initializer_list< bool>  __l) 
# 742
{ 
# 743
(this->assign(__l.begin(), __l.end())); 
# 744
return *this; 
# 745
} 
# 753
void assign(size_type __n, const bool &__x) 
# 754
{ _M_fill_assign(__n, __x); } 
# 757
template< class _InputIterator, class 
# 758
 = ::std::_RequireInputIter< _InputIterator> > void 
# 760
assign(_InputIterator __first, _InputIterator __last) 
# 761
{ _M_assign_dispatch(__first, __last, ::std::__false_type()); } 
# 774
void assign(::std::initializer_list< bool>  __l) 
# 775
{ (this->assign(__l.begin(), __l.end())); } 
# 779
iterator begin() noexcept 
# 780
{ return ((this->_M_impl)._M_start); } 
# 783
const_iterator begin() const noexcept 
# 784
{ return ((this->_M_impl)._M_start); } 
# 787
iterator end() noexcept 
# 788
{ return ((this->_M_impl)._M_finish); } 
# 791
const_iterator end() const noexcept 
# 792
{ return ((this->_M_impl)._M_finish); } 
# 795
reverse_iterator rbegin() noexcept 
# 796
{ return ((reverse_iterator)(this->end())); } 
# 799
const_reverse_iterator rbegin() const noexcept 
# 800
{ return ((const_reverse_iterator)(this->end())); } 
# 803
reverse_iterator rend() noexcept 
# 804
{ return ((reverse_iterator)(this->begin())); } 
# 807
const_reverse_iterator rend() const noexcept 
# 808
{ return ((const_reverse_iterator)(this->begin())); } 
# 812
const_iterator cbegin() const noexcept 
# 813
{ return ((this->_M_impl)._M_start); } 
# 816
const_iterator cend() const noexcept 
# 817
{ return ((this->_M_impl)._M_finish); } 
# 820
const_reverse_iterator crbegin() const noexcept 
# 821
{ return ((const_reverse_iterator)(this->end())); } 
# 824
const_reverse_iterator crend() const noexcept 
# 825
{ return ((const_reverse_iterator)(this->begin())); } 
# 829
size_type size() const noexcept 
# 830
{ return (size_type)(((this->end()) - (this->begin()))); } 
# 833
size_type max_size() const noexcept 
# 834
{ 
# 835
const size_type __isize = ((::__gnu_cxx::__numeric_traits_integer< long> ::__max - ((int)_S_word_bit)) + (1)); 
# 838
const size_type __asize = _Bit_alloc_traits::max_size(_M_get_Bit_allocator()); 
# 840
return (__asize <= (__isize / ((int)_S_word_bit))) ? __asize * ((int)_S_word_bit) : __isize; 
# 842
} 
# 845
size_type capacity() const noexcept 
# 846
{ return (size_type)((const_iterator(((this->_M_impl)._M_end_addr()), 0) - (this->begin()))); 
# 847
} 
# 850
bool empty() const noexcept 
# 851
{ return ((this->begin()) == (this->end())); } 
# 854
reference operator[](size_type __n) 
# 855
{ 
# 856
return (*iterator((((this->_M_impl)._M_start)._M_p) + (__n / ((int)_S_word_bit)), __n % ((int)_S_word_bit))); 
# 858
} 
# 861
const_reference operator[](size_type __n) const 
# 862
{ 
# 863
return (*const_iterator((((this->_M_impl)._M_start)._M_p) + (__n / ((int)_S_word_bit)), __n % ((int)_S_word_bit))); 
# 865
} 
# 869
protected: void _M_range_check(size_type __n) const 
# 870
{ 
# 871
if (__n >= this->size()) { 
# 872
__throw_out_of_range_fmt("vector<bool>::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, this->size()); }  
# 876
} 
# 880
public: reference at(size_type __n) 
# 881
{ _M_range_check(__n); return (*this)[__n]; } 
# 884
const_reference at(size_type __n) const 
# 885
{ _M_range_check(__n); return (*this)[__n]; } 
# 888
void reserve(size_type __n) 
# 889
{ 
# 890
if (__n > max_size()) { 
# 891
__throw_length_error("vector::reserve"); }  
# 892
if (capacity() < __n) { 
# 893
_M_reallocate(__n); }  
# 894
} 
# 897
reference front() 
# 898
{ return (*(this->begin())); } 
# 901
const_reference front() const 
# 902
{ return (*(this->begin())); } 
# 905
reference back() 
# 906
{ return (*(((this->end()) - (1)))); } 
# 909
const_reference back() const 
# 910
{ return (*(((this->end()) - (1)))); } 
# 918
void data() noexcept { } 
# 921
void push_back(bool __x) 
# 922
{ 
# 923
if ((((this->_M_impl)._M_finish)._M_p) != ((this->_M_impl)._M_end_addr())) { 
# 924
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 926
_M_insert_aux(this->end(), __x); }  
# 927
} 
# 930
void swap(::std::vector< bool, _Alloc>  &__x) noexcept(_Bit_alloc_traits::_S_nothrow_swap()) 
# 934
{ 
# 935
::std::swap(((this->_M_impl)._M_start), ((__x._M_impl)._M_start)); 
# 936
::std::swap(((this->_M_impl)._M_finish), ((__x._M_impl)._M_finish)); 
# 937
::std::swap(((this->_M_impl)._M_end_of_storage), ((__x._M_impl)._M_end_of_storage)); 
# 939
_Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(), (__x._M_get_Bit_allocator())); 
# 941
} 
# 945
static void swap(reference __x, reference __y) noexcept 
# 946
{ 
# 947
bool __tmp = __x; 
# 948
(__x = __y); 
# 949
(__y = __tmp); 
# 950
} 
# 954
iterator insert(const_iterator __position, const bool &__x = ((bool)0)) 
# 958
{ 
# 959
const difference_type __n = (__position - (this->begin())); 
# 960
if (((((this->_M_impl)._M_finish)._M_p) != ((this->_M_impl)._M_end_addr())) && (__position == (this->end()))) { 
# 962
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 964
_M_insert_aux(__position._M_const_cast(), __x); }  
# 965
return ((this->begin()) + __n); 
# 966
} 
# 969
template< class _InputIterator, class 
# 970
 = ::std::_RequireInputIter< _InputIterator> > iterator 
# 972
insert(const_iterator __position, _InputIterator 
# 973
__first, _InputIterator __last) 
# 974
{ 
# 975
difference_type __offset = __position - cbegin(); 
# 976
_M_insert_dispatch(__position._M_const_cast(), __first, __last, ::std::__false_type()); 
# 978
return ((this->begin()) + __offset); 
# 979
} 
# 993
iterator insert(const_iterator __position, size_type __n, const bool &__x) 
# 994
{ 
# 995
difference_type __offset = __position - cbegin(); 
# 996
_M_fill_insert(__position._M_const_cast(), __n, __x); 
# 997
return ((this->begin()) + __offset); 
# 998
} 
# 1007
iterator insert(const_iterator __p, ::std::initializer_list< bool>  __l) 
# 1008
{ return (this->insert(__p, __l.begin(), __l.end())); } 
# 1012
void pop_back() 
# 1013
{ --((this->_M_impl)._M_finish); } 
# 1017
iterator erase(const_iterator __position) 
# 1021
{ return this->_M_erase(__position._M_const_cast()); } 
# 1025
iterator erase(const_iterator __first, const_iterator __last) 
# 1029
{ return this->_M_erase(__first._M_const_cast(), __last._M_const_cast()); } 
# 1032
void resize(size_type __new_size, bool __x = ((bool)0)) 
# 1033
{ 
# 1034
if (__new_size < size()) { 
# 1035
_M_erase_at_end(((this->begin()) + ((difference_type)__new_size))); } else { 
# 1037
insert(this->end(), __new_size - size(), __x); }  
# 1038
} 
# 1042
void shrink_to_fit() 
# 1043
{ _M_shrink_to_fit(); } 
# 1047
void flip() noexcept 
# 1048
{ 
# 1049
::std::_Bit_type *const __end = ((this->_M_impl)._M_end_addr()); 
# 1050
for (::std::_Bit_type *__p = ((((this->_M_impl)._M_start)._M_p)); __p != __end; ++__p) { 
# 1051
(*__p) = (~(*__p)); }  
# 1052
} 
# 1055
void clear() noexcept 
# 1056
{ _M_erase_at_end(this->begin()); } 
# 1059
template< class ..._Args> void 
# 1061
emplace_back(_Args &&...__args) 
# 1062
{ push_back(bool(__args...)); } 
# 1064
template< class ..._Args> iterator 
# 1066
emplace(const_iterator __pos, _Args &&...__args) 
# 1067
{ return insert(__pos, bool(__args...)); } 
# 1073
protected: iterator _M_copy_aligned(const_iterator __first, const_iterator __last, iterator 
# 1074
__result) 
# 1075
{ 
# 1076
::std::_Bit_type *__q = std::copy(__first._M_p, __last._M_p, __result._M_p); 
# 1077
return std::copy(const_iterator(__last._M_p, 0), __last, iterator(__q, 0)); 
# 1079
} 
# 1082
void _M_initialize(size_type __n) 
# 1083
{ 
# 1084
_Bit_pointer __q = (this->_M_allocate(__n)); 
# 1085
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 1086
((this->_M_impl)._M_start) = iterator(::std::__addressof(*__q), 0); 
# 1087
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + ((difference_type)__n)); 
# 1088
} 
# 1091
void _M_reallocate(size_type __n); 
# 1095
bool _M_shrink_to_fit(); 
# 1102
template< class _Integer> void 
# 1104
_M_initialize_dispatch(_Integer __n, _Integer __x, ::std::__true_type) 
# 1105
{ 
# 1106
_M_initialize(static_cast< size_type>(__n)); 
# 1107
::std::fill((((this->_M_impl)._M_start)._M_p), ((this->_M_impl)._M_end_addr()), (__x) ? ~0 : 0); 
# 1109
} 
# 1111
template< class _InputIterator> void 
# 1113
_M_initialize_dispatch(_InputIterator __first, _InputIterator __last, ::std::__false_type) 
# 1115
{ _M_initialize_range(__first, __last, ::std::__iterator_category(__first)); 
# 1116
} 
# 1118
template< class _InputIterator> void 
# 1120
_M_initialize_range(_InputIterator __first, _InputIterator __last, ::std::input_iterator_tag) 
# 1122
{ 
# 1123
for (; __first != __last; ++__first) { 
# 1124
push_back(*__first); }  
# 1125
} 
# 1127
template< class _ForwardIterator> void 
# 1129
_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last, ::std::forward_iterator_tag) 
# 1131
{ 
# 1132
const size_type __n = ::std::distance(__first, __last); 
# 1133
_M_initialize(__n); 
# 1134
::std::copy(__first, __last, ((this->_M_impl)._M_start)); 
# 1135
} 
# 1139
template< class _Integer> void 
# 1141
_M_assign_dispatch(_Integer __n, _Integer __val, ::std::__true_type) 
# 1142
{ _M_fill_assign(__n, __val); } 
# 1144
template< class _InputIterator> void 
# 1146
_M_assign_dispatch(_InputIterator __first, _InputIterator __last, ::std::__false_type) 
# 1148
{ _M_assign_aux(__first, __last, ::std::__iterator_category(__first)); } 
# 1151
void _M_fill_assign(::std::size_t __n, bool __x) 
# 1152
{ 
# 1153
if (__n > size()) 
# 1154
{ 
# 1155
::std::fill((((this->_M_impl)._M_start)._M_p), ((this->_M_impl)._M_end_addr()), __x ? ~0 : 0); 
# 1157
insert(this->end(), __n - size(), __x); 
# 1158
} else 
# 1160
{ 
# 1161
_M_erase_at_end(((this->begin()) + __n)); 
# 1162
::std::fill((((this->_M_impl)._M_start)._M_p), ((this->_M_impl)._M_end_addr()), __x ? ~0 : 0); 
# 1164
}  
# 1165
} 
# 1167
template< class _InputIterator> void 
# 1169
_M_assign_aux(_InputIterator __first, _InputIterator __last, ::std::input_iterator_tag) 
# 1171
{ 
# 1172
iterator __cur = this->begin(); 
# 1173
for (; (__first != __last) && (__cur != (this->end())); (++__cur), (++__first)) { 
# 1174
(*__cur) = (*__first); }  
# 1175
if (__first == __last) { 
# 1176
_M_erase_at_end(__cur); } else { 
# 1178
insert(this->end(), __first, __last); }  
# 1179
} 
# 1181
template< class _ForwardIterator> void 
# 1183
_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, ::std::forward_iterator_tag) 
# 1185
{ 
# 1186
const size_type __len = ::std::distance(__first, __last); 
# 1187
if (__len < size()) { 
# 1188
_M_erase_at_end(::std::copy(__first, __last, this->begin())); } else 
# 1190
{ 
# 1191
_ForwardIterator __mid = __first; 
# 1192
::std::advance(__mid, size()); 
# 1193
::std::copy(__first, __mid, this->begin()); 
# 1194
insert(this->end(), __mid, __last); 
# 1195
}  
# 1196
} 
# 1202
template< class _Integer> void 
# 1204
_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x, ::std::__true_type) 
# 1206
{ _M_fill_insert(__pos, __n, __x); } 
# 1208
template< class _InputIterator> void 
# 1210
_M_insert_dispatch(iterator __pos, _InputIterator 
# 1211
__first, _InputIterator __last, ::std::__false_type) 
# 1213
{ _M_insert_range(__pos, __first, __last, ::std::__iterator_category(__first)); 
# 1214
} 
# 1217
void _M_fill_insert(iterator __position, size_type __n, bool __x); 
# 1219
template< class _InputIterator> void 
# 1221
_M_insert_range(iterator __pos, _InputIterator __first, _InputIterator 
# 1222
__last, ::std::input_iterator_tag) 
# 1223
{ 
# 1224
for (; __first != __last; ++__first) 
# 1225
{ 
# 1226
__pos = insert(__pos, *__first); 
# 1227
(++__pos); 
# 1228
}  
# 1229
} 
# 1231
template< class _ForwardIterator> void _M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator __last, ::std::forward_iterator_tag); 
# 1237
void _M_insert_aux(iterator __position, bool __x); 
# 1240
size_type _M_check_len(size_type __n, const char *__s) const 
# 1241
{ 
# 1242
if ((max_size() - size()) < __n) { 
# 1243
__throw_length_error(__s); }  
# 1245
const size_type __len = size() + ::std::max(size(), __n); 
# 1246
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1247
} 
# 1250
void _M_erase_at_end(iterator __pos) 
# 1251
{ ((this->_M_impl)._M_finish) = __pos; } 
# 1254
iterator _M_erase(iterator __pos); 
# 1257
iterator _M_erase(iterator __first, iterator __last); 
# 1258
}; 
# 1261
}
# 1267
namespace std __attribute((__visibility__("default"))) { 
# 1273
template< class _Alloc> 
# 1274
struct hash< vector< bool, _Alloc> >  : public __hash_base< unsigned long, vector< bool, _Alloc> >  { 
# 1278
::std::size_t operator()(const vector< bool, _Alloc>  &) const noexcept; 
# 1279
}; 
# 1282
}
# 59 "/usr/include/c++/5/bits/vector.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63
template< class _Tp, class _Alloc> void 
# 66
vector< _Tp, _Alloc> ::reserve(size_type __n) 
# 67
{ 
# 68
if (__n > this->max_size()) { 
# 69
__throw_length_error("vector::reserve"); }  
# 70
if (this->capacity() < __n) 
# 71
{ 
# 72
const size_type __old_size = size(); 
# 73
pointer __tmp = _M_allocate_and_copy(__n, ::std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_start)), ::std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_finish))); 
# 76
::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 78
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 81
((this->_M_impl)._M_start) = __tmp; 
# 82
((this->_M_impl)._M_finish) = (__tmp + __old_size); 
# 83
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 84
}  
# 85
} 
# 88
template< class _Tp, class _Alloc> 
# 89
template< class ..._Args> void 
# 92
vector< _Tp, _Alloc> ::emplace_back(_Args &&...__args) 
# 93
{ 
# 94
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 95
{ 
# 96
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), ::std::forward< _Args> (__args)...); 
# 98
++((this->_M_impl)._M_finish); 
# 99
} else { 
# 101
_M_emplace_back_aux(::std::forward< _Args> (__args)...); }  
# 102
} 
# 105
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 109
vector< _Tp, _Alloc> ::insert(const_iterator __position, const value_type &__x) 
# 113
{ 
# 114
const size_type __n = __position - this->begin(); 
# 115
if ((((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) && (__position == this->end())) 
# 117
{ 
# 118
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 119
++((this->_M_impl)._M_finish); 
# 120
} else 
# 122
{ 
# 124
const auto __pos = this->begin() + (__position - cbegin()); 
# 125
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 126
{ 
# 127
_Tp __x_copy = __x; 
# 128
_M_insert_aux(__pos, ::std::move(__x_copy)); 
# 129
} else { 
# 131
_M_insert_aux(__pos, __x); }  
# 135
}  
# 136
return ((iterator)(((this->_M_impl)._M_start) + __n)); 
# 137
} 
# 139
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 142
vector< _Tp, _Alloc> ::_M_erase(iterator __position) 
# 143
{ 
# 144
if ((__position + 1) != this->end()) { 
# 145
::std::move(__position + 1, this->end(), __position); }  
# 146
--((this->_M_impl)._M_finish); 
# 147
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 148
return __position; 
# 149
} 
# 151
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 154
vector< _Tp, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 155
{ 
# 156
if (__first != __last) 
# 157
{ 
# 158
if (__last != this->end()) { 
# 159
::std::move(__last, this->end(), __first); }  
# 160
_M_erase_at_end((__first.base()) + (this->end() - __last)); 
# 161
}  
# 162
return __first; 
# 163
} 
# 165
template< class _Tp, class _Alloc> vector< _Tp, _Alloc>  &
# 168
vector< _Tp, _Alloc> ::operator=(const vector &__x) 
# 169
{ 
# 170
if ((&__x) != this) 
# 171
{ 
# 173
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 174
{ 
# 175
if ((!_Alloc_traits::_S_always_equal()) && (_M_get_Tp_allocator() != (__x._M_get_Tp_allocator()))) 
# 177
{ 
# 179
this->clear(); 
# 180
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 183
((this->_M_impl)._M_start) = nullptr; 
# 184
((this->_M_impl)._M_finish) = nullptr; 
# 185
((this->_M_impl)._M_end_of_storage) = nullptr; 
# 186
}  
# 187
::std::__alloc_on_copy(_M_get_Tp_allocator(), (__x._M_get_Tp_allocator())); 
# 189
}  
# 191
const size_type __xlen = __x.size(); 
# 192
if (__xlen > capacity()) 
# 193
{ 
# 194
pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end()); 
# 196
::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 198
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 201
((this->_M_impl)._M_start) = __tmp; 
# 202
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __xlen); 
# 203
} else { 
# 204
if (size() >= __xlen) 
# 205
{ 
# 206
::std::_Destroy(::std::copy(__x.begin(), __x.end(), this->begin()), this->end(), _M_get_Tp_allocator()); 
# 208
} else 
# 210
{ 
# 211
::std::copy(((__x._M_impl)._M_start), ((__x._M_impl)._M_start) + size(), ((this->_M_impl)._M_start)); 
# 213
::std::__uninitialized_copy_a(((__x._M_impl)._M_start) + size(), ((__x._M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 217
}  }  
# 218
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __xlen); 
# 219
}  
# 220
return *this; 
# 221
} 
# 223
template< class _Tp, class _Alloc> void 
# 226
vector< _Tp, _Alloc> ::_M_fill_assign(::std::size_t __n, const value_type &__val) 
# 227
{ 
# 228
if (__n > capacity()) 
# 229
{ 
# 230
vector __tmp(__n, __val, _M_get_Tp_allocator()); 
# 231
((__tmp._M_impl)._M_swap_data((this->_M_impl))); 
# 232
} else { 
# 233
if (__n > size()) 
# 234
{ 
# 235
::std::fill(this->begin(), this->end(), __val); 
# 236
((this->_M_impl)._M_finish) = ::std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __n - size(), __val, _M_get_Tp_allocator()); 
# 240
} else { 
# 242
_M_erase_at_end(::std::fill_n(((this->_M_impl)._M_start), __n, __val)); }  }  
# 243
} 
# 245
template< class _Tp, class _Alloc> 
# 246
template< class _InputIterator> void 
# 249
vector< _Tp, _Alloc> ::_M_assign_aux(_InputIterator __first, _InputIterator __last, ::std::input_iterator_tag) 
# 251
{ 
# 252
pointer __cur(((this->_M_impl)._M_start)); 
# 253
for (; (__first != __last) && (__cur != ((this->_M_impl)._M_finish)); (++__cur), (++__first)) { 
# 255
(*__cur) = (*__first); }  
# 256
if (__first == __last) { 
# 257
_M_erase_at_end(__cur); } else { 
# 259
insert(this->end(), __first, __last); }  
# 260
} 
# 262
template< class _Tp, class _Alloc> 
# 263
template< class _ForwardIterator> void 
# 266
vector< _Tp, _Alloc> ::_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, ::std::forward_iterator_tag) 
# 268
{ 
# 269
const size_type __len = ::std::distance(__first, __last); 
# 271
if (__len > capacity()) 
# 272
{ 
# 273
pointer __tmp(_M_allocate_and_copy(__len, __first, __last)); 
# 274
::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 276
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 279
((this->_M_impl)._M_start) = __tmp; 
# 280
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __len); 
# 281
((this->_M_impl)._M_end_of_storage) = ((this->_M_impl)._M_finish); 
# 282
} else { 
# 283
if (size() >= __len) { 
# 284
_M_erase_at_end(::std::copy(__first, __last, ((this->_M_impl)._M_start))); } else 
# 286
{ 
# 287
_ForwardIterator __mid = __first; 
# 288
::std::advance(__mid, size()); 
# 289
::std::copy(__first, __mid, ((this->_M_impl)._M_start)); 
# 290
((this->_M_impl)._M_finish) = ::std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 294
}  }  
# 295
} 
# 298
template< class _Tp, class _Alloc> 
# 299
template< class ..._Args> typename vector< _Tp, _Alloc> ::iterator 
# 302
vector< _Tp, _Alloc> ::emplace(const_iterator __position, _Args &&...__args) 
# 303
{ 
# 304
const size_type __n = __position - this->begin(); 
# 305
if ((((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) && (__position == this->end())) 
# 307
{ 
# 308
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), ::std::forward< _Args> (__args)...); 
# 310
++((this->_M_impl)._M_finish); 
# 311
} else { 
# 313
_M_insert_aux(this->begin() + (__position - cbegin()), ::std::forward< _Args> (__args)...); }  
# 315
return ((iterator)(((this->_M_impl)._M_start) + __n)); 
# 316
} 
# 318
template< class _Tp, class _Alloc> 
# 319
template< class ..._Args> void 
# 322
vector< _Tp, _Alloc> ::_M_insert_aux(iterator __position, _Args &&...__args) 
# 329
{ 
# 330
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 331
{ 
# 332
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), ::std::move(*(((this->_M_impl)._M_finish) - 1))); 
# 335
++((this->_M_impl)._M_finish); 
# 339
::std::move_backward((__position.base()), ((this->_M_impl)._M_finish) - 2, ((this->_M_impl)._M_finish) - 1); 
# 345
(*__position) = (_Tp(::std::forward< _Args> (__args)...)); 
# 347
} else 
# 349
{ 
# 350
const size_type __len = _M_check_len((size_type)1, "vector::_M_insert_aux"); 
# 352
const size_type __elems_before = __position - this->begin(); 
# 353
pointer __new_start((this->_M_allocate(__len))); 
# 354
pointer __new_finish(__new_start); 
# 355
try 
# 356
{ 
# 361
_Alloc_traits::construct((this->_M_impl), __new_start + __elems_before, ::std::forward< _Args> (__args)...); 
# 368
__new_finish = pointer(); 
# 370
__new_finish = ::std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), (__position.base()), __new_start, _M_get_Tp_allocator()); 
# 375
++__new_finish; 
# 377
__new_finish = ::std::__uninitialized_move_if_noexcept_a((__position.base()), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 381
} 
# 382
catch (...) 
# 383
{ 
# 384
if (!__new_finish) { 
# 385
_Alloc_traits::destroy((this->_M_impl), __new_start + __elems_before); } else { 
# 388
::std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 389
_M_deallocate(__new_start, __len); 
# 390
throw; 
# 391
}  
# 392
::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 394
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 397
((this->_M_impl)._M_start) = __new_start; 
# 398
((this->_M_impl)._M_finish) = __new_finish; 
# 399
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 400
}  
# 401
} 
# 404
template< class _Tp, class _Alloc> 
# 405
template< class ..._Args> void 
# 408
vector< _Tp, _Alloc> ::_M_emplace_back_aux(_Args &&...__args) 
# 409
{ 
# 410
const size_type __len = _M_check_len((size_type)1, "vector::_M_emplace_back_aux"); 
# 412
pointer __new_start((this->_M_allocate(__len))); 
# 413
pointer __new_finish(__new_start); 
# 414
try 
# 415
{ 
# 416
_Alloc_traits::construct((this->_M_impl), __new_start + size(), ::std::forward< _Args> (__args)...); 
# 418
__new_finish = pointer(); 
# 420
__new_finish = ::std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __new_start, _M_get_Tp_allocator()); 
# 425
++__new_finish; 
# 426
} 
# 427
catch (...) 
# 428
{ 
# 429
if (!__new_finish) { 
# 430
_Alloc_traits::destroy((this->_M_impl), __new_start + size()); } else { 
# 432
::std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 433
_M_deallocate(__new_start, __len); 
# 434
throw; 
# 435
}  
# 436
::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 438
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 441
((this->_M_impl)._M_start) = __new_start; 
# 442
((this->_M_impl)._M_finish) = __new_finish; 
# 443
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 444
} 
# 447
template< class _Tp, class _Alloc> void 
# 450
vector< _Tp, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, const value_type &__x) 
# 451
{ 
# 452
if (__n != (0)) 
# 453
{ 
# 454
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 456
{ 
# 457
value_type __x_copy = __x; 
# 458
const size_type __elems_after = this->end() - __position; 
# 459
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 460
if (__elems_after > __n) 
# 461
{ 
# 462
::std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 466
((this->_M_impl)._M_finish) += __n; 
# 467
::std::move_backward((__position.base()), __old_finish - __n, __old_finish); 
# 469
::std::fill((__position.base()), (__position.base()) + __n, __x_copy); 
# 471
} else 
# 473
{ 
# 474
((this->_M_impl)._M_finish) = ::std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __n - __elems_after, __x_copy, _M_get_Tp_allocator()); 
# 479
::std::__uninitialized_move_a((__position.base()), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 482
((this->_M_impl)._M_finish) += __elems_after; 
# 483
::std::fill((__position.base()), __old_finish, __x_copy); 
# 484
}  
# 485
} else 
# 487
{ 
# 488
const size_type __len = _M_check_len(__n, "vector::_M_fill_insert"); 
# 490
const size_type __elems_before = __position - this->begin(); 
# 491
pointer __new_start((this->_M_allocate(__len))); 
# 492
pointer __new_finish(__new_start); 
# 493
try 
# 494
{ 
# 496
::std::__uninitialized_fill_n_a(__new_start + __elems_before, __n, __x, _M_get_Tp_allocator()); 
# 499
__new_finish = pointer(); 
# 501
__new_finish = ::std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), (__position.base()), __new_start, _M_get_Tp_allocator()); 
# 506
__new_finish += __n; 
# 508
__new_finish = ::std::__uninitialized_move_if_noexcept_a((__position.base()), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 512
} 
# 513
catch (...) 
# 514
{ 
# 515
if (!__new_finish) { 
# 516
::std::_Destroy(__new_start + __elems_before, (__new_start + __elems_before) + __n, _M_get_Tp_allocator()); } else { 
# 520
::std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 522
_M_deallocate(__new_start, __len); 
# 523
throw; 
# 524
}  
# 525
::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 527
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 530
((this->_M_impl)._M_start) = __new_start; 
# 531
((this->_M_impl)._M_finish) = __new_finish; 
# 532
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 533
}  
# 534
}  
# 535
} 
# 538
template< class _Tp, class _Alloc> void 
# 541
vector< _Tp, _Alloc> ::_M_default_append(size_type __n) 
# 542
{ 
# 543
if (__n != (0)) 
# 544
{ 
# 545
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 547
{ 
# 548
((this->_M_impl)._M_finish) = ::std::__uninitialized_default_n_a(((this->_M_impl)._M_finish), __n, _M_get_Tp_allocator()); 
# 551
} else 
# 553
{ 
# 554
const size_type __len = _M_check_len(__n, "vector::_M_default_append"); 
# 556
const size_type __old_size = this->size(); 
# 557
pointer __new_start((this->_M_allocate(__len))); 
# 558
pointer __new_finish(__new_start); 
# 559
try 
# 560
{ 
# 561
__new_finish = ::std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __new_start, _M_get_Tp_allocator()); 
# 565
__new_finish = ::std::__uninitialized_default_n_a(__new_finish, __n, _M_get_Tp_allocator()); 
# 568
} 
# 569
catch (...) 
# 570
{ 
# 571
::std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); 
# 573
_M_deallocate(__new_start, __len); 
# 574
throw; 
# 575
}  
# 576
::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 578
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 581
((this->_M_impl)._M_start) = __new_start; 
# 582
((this->_M_impl)._M_finish) = __new_finish; 
# 583
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 584
}  
# 585
}  
# 586
} 
# 588
template< class _Tp, class _Alloc> bool 
# 591
vector< _Tp, _Alloc> ::_M_shrink_to_fit() 
# 592
{ 
# 593
if (capacity() == size()) { 
# 594
return false; }  
# 595
return std::__shrink_to_fit_aux< vector> ::_S_do_it(*this); 
# 596
} 
# 599
template< class _Tp, class _Alloc> 
# 600
template< class _InputIterator> void 
# 603
vector< _Tp, _Alloc> ::_M_range_insert(iterator __pos, _InputIterator __first, _InputIterator 
# 604
__last, ::std::input_iterator_tag) 
# 605
{ 
# 606
for (; __first != __last; ++__first) 
# 607
{ 
# 608
__pos = insert(__pos, *__first); 
# 609
++__pos; 
# 610
}  
# 611
} 
# 613
template< class _Tp, class _Alloc> 
# 614
template< class _ForwardIterator> void 
# 617
vector< _Tp, _Alloc> ::_M_range_insert(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 618
__last, ::std::forward_iterator_tag) 
# 619
{ 
# 620
if (__first != __last) 
# 621
{ 
# 622
const size_type __n = ::std::distance(__first, __last); 
# 623
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 625
{ 
# 626
const size_type __elems_after = this->end() - __position; 
# 627
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 628
if (__elems_after > __n) 
# 629
{ 
# 630
::std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 634
((this->_M_impl)._M_finish) += __n; 
# 635
::std::move_backward((__position.base()), __old_finish - __n, __old_finish); 
# 637
::std::copy(__first, __last, __position); 
# 638
} else 
# 640
{ 
# 641
_ForwardIterator __mid = __first; 
# 642
::std::advance(__mid, __elems_after); 
# 643
::std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 646
((this->_M_impl)._M_finish) += (__n - __elems_after); 
# 647
::std::__uninitialized_move_a((__position.base()), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 651
((this->_M_impl)._M_finish) += __elems_after; 
# 652
::std::copy(__first, __mid, __position); 
# 653
}  
# 654
} else 
# 656
{ 
# 657
const size_type __len = _M_check_len(__n, "vector::_M_range_insert"); 
# 659
pointer __new_start((this->_M_allocate(__len))); 
# 660
pointer __new_finish(__new_start); 
# 661
try 
# 662
{ 
# 663
__new_finish = ::std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), (__position.base()), __new_start, _M_get_Tp_allocator()); 
# 667
__new_finish = ::std::__uninitialized_copy_a(__first, __last, __new_finish, _M_get_Tp_allocator()); 
# 671
__new_finish = ::std::__uninitialized_move_if_noexcept_a((__position.base()), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 675
} 
# 676
catch (...) 
# 677
{ 
# 678
::std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); 
# 680
_M_deallocate(__new_start, __len); 
# 681
throw; 
# 682
}  
# 683
::std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 685
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 688
((this->_M_impl)._M_start) = __new_start; 
# 689
((this->_M_impl)._M_finish) = __new_finish; 
# 690
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 691
}  
# 692
}  
# 693
} 
# 697
template< class _Alloc> void 
# 700
vector< bool, _Alloc> ::_M_reallocate(size_type __n) 
# 701
{ 
# 702
_Bit_pointer __q = (this->_M_allocate(__n)); 
# 703
iterator __start(::std::__addressof(*__q), 0); 
# 704
((this->_M_impl)._M_finish) = _M_copy_aligned(this->begin(), this->end(), __start); 
# 705
(this->_M_deallocate()); 
# 706
((this->_M_impl)._M_start) = __start; 
# 707
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 708
} 
# 710
template< class _Alloc> void 
# 713
vector< bool, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, bool __x) 
# 714
{ 
# 715
if (__n == (0)) { 
# 716
return; }  
# 717
if ((capacity() - size()) >= __n) 
# 718
{ 
# 719
::std::copy_backward(__position, this->end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 721
std::fill(__position, (__position + ((difference_type)__n)), __x); 
# 722
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 723
} else 
# 725
{ 
# 726
const size_type __len = _M_check_len(__n, "vector<bool>::_M_fill_insert"); 
# 728
_Bit_pointer __q = (this->_M_allocate(__len)); 
# 729
iterator __start(::std::__addressof(*__q), 0); 
# 730
iterator __i = _M_copy_aligned(this->begin(), __position, __start); 
# 731
std::fill(__i, (__i + ((difference_type)__n)), __x); 
# 732
((this->_M_impl)._M_finish) = ::std::copy(__position, this->end(), (__i + ((difference_type)__n))); 
# 734
(this->_M_deallocate()); 
# 735
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 736
((this->_M_impl)._M_start) = __start; 
# 737
}  
# 738
} 
# 740
template< class _Alloc> 
# 741
template< class _ForwardIterator> void 
# 744
vector< bool, _Alloc> ::_M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 745
__last, ::std::forward_iterator_tag) 
# 746
{ 
# 747
if (__first != __last) 
# 748
{ 
# 749
size_type __n = ::std::distance(__first, __last); 
# 750
if ((capacity() - size()) >= __n) 
# 751
{ 
# 752
::std::copy_backward(__position, this->end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 755
::std::copy(__first, __last, __position); 
# 756
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 757
} else 
# 759
{ 
# 760
const size_type __len = _M_check_len(__n, "vector<bool>::_M_insert_range"); 
# 762
_Bit_pointer __q = (this->_M_allocate(__len)); 
# 763
iterator __start(::std::__addressof(*__q), 0); 
# 764
iterator __i = _M_copy_aligned(this->begin(), __position, __start); 
# 765
__i = ::std::copy(__first, __last, __i); 
# 766
((this->_M_impl)._M_finish) = ::std::copy(__position, this->end(), __i); 
# 767
(this->_M_deallocate()); 
# 768
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 769
((this->_M_impl)._M_start) = __start; 
# 770
}  
# 771
}  
# 772
} 
# 774
template< class _Alloc> void 
# 777
vector< bool, _Alloc> ::_M_insert_aux(iterator __position, bool __x) 
# 778
{ 
# 779
if ((((this->_M_impl)._M_finish)._M_p) != ((this->_M_impl)._M_end_addr())) 
# 780
{ 
# 781
::std::copy_backward(__position, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish) + 1); 
# 783
(((*__position)) = __x); 
# 784
++((this->_M_impl)._M_finish); 
# 785
} else 
# 787
{ 
# 788
const size_type __len = _M_check_len((size_type)1, "vector<bool>::_M_insert_aux"); 
# 790
_Bit_pointer __q = (this->_M_allocate(__len)); 
# 791
iterator __start(::std::__addressof(*__q), 0); 
# 792
iterator __i = _M_copy_aligned(this->begin(), __position, __start); 
# 793
(((*(__i++))) = __x); 
# 794
((this->_M_impl)._M_finish) = ::std::copy(__position, this->end(), __i); 
# 795
(this->_M_deallocate()); 
# 796
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 797
((this->_M_impl)._M_start) = __start; 
# 798
}  
# 799
} 
# 801
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 804
vector< bool, _Alloc> ::_M_erase(iterator __position) 
# 805
{ 
# 806
if ((((__position + (1))) != (this->end()))) { 
# 807
::std::copy((__position + (1)), this->end(), __position); }  
# 808
--((this->_M_impl)._M_finish); 
# 809
return __position; 
# 810
} 
# 812
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 815
vector< bool, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 816
{ 
# 817
if ((__first != __last)) { 
# 818
_M_erase_at_end(::std::copy(__last, this->end(), __first)); }  
# 819
return __first; 
# 820
} 
# 823
template< class _Alloc> bool 
# 826
vector< bool, _Alloc> ::_M_shrink_to_fit() 
# 827
{ 
# 828
if ((capacity() - size()) < ((int)_S_word_bit)) { 
# 829
return false; }  
# 830
try 
# 831
{ 
# 832
_M_reallocate(size()); 
# 833
return true; 
# 834
} 
# 835
catch (...) 
# 836
{ return false; }  
# 837
} 
# 841
}
# 845
namespace std __attribute((__visibility__("default"))) { 
# 849
template< class _Alloc> size_t 
# 852
hash< vector< bool, _Alloc> > ::operator()(const vector< bool, _Alloc>  &__b) const noexcept 
# 853
{ 
# 854
::std::size_t __hash = (0); 
# 855
using ::std::_S_word_bit;
# 856
using ::std::_Bit_type;
# 858
const ::std::size_t __words = (__b.size()) / _S_word_bit; 
# 859
if (__words) 
# 860
{ 
# 861
const ::std::size_t __clength = (__words * sizeof(::std::_Bit_type)); 
# 862
__hash = ::std::_Hash_impl::hash((((__b._M_impl)._M_start)._M_p), __clength); 
# 863
}  
# 865
const ::std::size_t __extrabits = (__b.size()) % _S_word_bit; 
# 866
if (__extrabits) 
# 867
{ 
# 868
::std::_Bit_type __hiword = *(((__b._M_impl)._M_finish)._M_p); 
# 869
__hiword &= (~((~(static_cast< ::std::_Bit_type>(0))) << __extrabits)); 
# 871
const ::std::size_t __clength = (((__extrabits + (8)) - (1)) / (8)); 
# 873
if (__words) { 
# 874
__hash = std::_Hash_impl::hash(&__hiword, __clength, __hash); } else { 
# 876
__hash = std::_Hash_impl::hash(&__hiword, __clength); }  
# 877
}  
# 879
return __hash; 
# 880
} 
# 883
}
# 37 "/usr/include/c++/5/bits/uniform_int_dist.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
namespace __detail { 
# 44
template< class _Tp> inline bool 
# 46
_Power_of_2(_Tp __x) 
# 47
{ 
# 48
return ((__x - 1) & __x) == 0; 
# 49
} 
# 50
}
# 60
template< class _IntType = int> 
# 61
class uniform_int_distribution { 
# 63
static_assert((std::is_integral< _IntType> ::value), "template argument not an integral type");
# 68
public: typedef _IntType result_type; 
# 70
struct param_type { 
# 72
typedef uniform_int_distribution distribution_type; 
# 75
explicit param_type(_IntType __a = 0, _IntType 
# 76
__b = std::numeric_limits< _IntType> ::max()) : _M_a(__a), _M_b(__b) 
# 78
{ 
# 79
; 
# 80
} 
# 83
result_type a() const 
# 84
{ return _M_a; } 
# 87
result_type b() const 
# 88
{ return _M_b; } 
# 91
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 92
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 95
private: _IntType _M_a; 
# 96
_IntType _M_b; 
# 97
}; 
# 104
explicit uniform_int_distribution(_IntType __a = 0, _IntType 
# 105
__b = std::numeric_limits< _IntType> ::max()) : _M_param(__a, __b) 
# 107
{ } 
# 110
explicit uniform_int_distribution(const param_type &__p) : _M_param(__p) 
# 112
{ } 
# 120
void reset() { } 
# 123
result_type a() const 
# 124
{ return ((_M_param).a()); } 
# 127
result_type b() const 
# 128
{ return ((_M_param).b()); } 
# 134
param_type param() const 
# 135
{ return _M_param; } 
# 142
void param(const param_type &__param) 
# 143
{ (_M_param) = __param; } 
# 149
result_type min() const 
# 150
{ return this->a(); } 
# 156
result_type max() const 
# 157
{ return this->b(); } 
# 162
template< class _UniformRandomNumberGenerator> result_type 
# 164
operator()(_UniformRandomNumberGenerator &__urng) 
# 165
{ return (this->operator()(__urng, _M_param)); } 
# 167
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 172
template< class _ForwardIterator, class 
# 173
_UniformRandomNumberGenerator> void 
# 175
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 176
__urng) 
# 177
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 179
template< class _ForwardIterator, class 
# 180
_UniformRandomNumberGenerator> void 
# 182
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 183
__urng, const param_type &
# 184
__p) 
# 185
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 187
template< class _UniformRandomNumberGenerator> void 
# 189
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 190
__urng, const param_type &
# 191
__p) 
# 192
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 199
friend inline bool operator==(const uniform_int_distribution &__d1, const uniform_int_distribution &
# 200
__d2) 
# 201
{ return (__d1._M_param) == (__d2._M_param); } 
# 204
private: template< class _ForwardIterator, class 
# 205
_UniformRandomNumberGenerator> void 
# 204
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 211
param_type _M_param; 
# 212
}; 
# 214
template< class _IntType> 
# 215
template< class _UniformRandomNumberGenerator> typename uniform_int_distribution< _IntType> ::result_type 
# 218
uniform_int_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 219
__param) 
# 220
{ 
# 222
typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type; 
# 223
typedef typename make_unsigned< _IntType> ::type __utype; 
# 225
typedef typename common_type< typename _UniformRandomNumberGenerator::result_type, typename make_unsigned< _IntType> ::type> ::type __uctype; 
# 227
const __uctype __urngmin = (__urng.min()); 
# 228
const __uctype __urngmax = (__urng.max()); 
# 229
const __uctype __urngrange = __urngmax - __urngmin; 
# 230
const __uctype __urange = ((__uctype)(__param.b())) - ((__uctype)(__param.a())); 
# 233
__uctype __ret; 
# 235
if (__urngrange > __urange) 
# 236
{ 
# 238
const __uctype __uerange = __urange + 1; 
# 239
const __uctype __scaling = __urngrange / __uerange; 
# 240
const __uctype __past = __uerange * __scaling; 
# 241
do { 
# 242
__ret = (((__uctype)__urng()) - __urngmin); } 
# 243
while (__ret >= __past); 
# 244
__ret /= __scaling; 
# 245
} else { 
# 246
if (__urngrange < __urange) 
# 247
{ 
# 263
__uctype __tmp; 
# 264
do 
# 265
{ 
# 266
const __uctype __uerngrange = __urngrange + 1; 
# 267
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 269
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 270
} 
# 271
while ((__ret > __urange) || (__ret < __tmp)); 
# 272
} else { 
# 274
__ret = (((__uctype)__urng()) - __urngmin); }  }  
# 276
return __ret + (__param.a()); 
# 277
} 
# 280
template< class _IntType> 
# 281
template< class _ForwardIterator, class 
# 282
_UniformRandomNumberGenerator> void 
# 285
uniform_int_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 286
__urng, const param_type &
# 287
__param) 
# 288
{ 
# 291
typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type; 
# 292
typedef typename make_unsigned< _IntType> ::type __utype; 
# 294
typedef typename common_type< typename _UniformRandomNumberGenerator::result_type, typename make_unsigned< _IntType> ::type> ::type __uctype; 
# 296
const __uctype __urngmin = (__urng.min()); 
# 297
const __uctype __urngmax = (__urng.max()); 
# 298
const __uctype __urngrange = __urngmax - __urngmin; 
# 299
const __uctype __urange = ((__uctype)(__param.b())) - ((__uctype)(__param.a())); 
# 302
__uctype __ret; 
# 304
if (__urngrange > __urange) 
# 305
{ 
# 306
if (__detail::_Power_of_2(__urngrange + 1) && __detail::_Power_of_2(__urange + 1)) 
# 308
{ 
# 309
while (__f != __t) 
# 310
{ 
# 311
__ret = (((__uctype)__urng()) - __urngmin); 
# 312
(*(__f++)) = ((__ret & __urange) + (__param.a())); 
# 313
}  
# 314
} else 
# 316
{ 
# 318
const __uctype __uerange = __urange + 1; 
# 319
const __uctype __scaling = __urngrange / __uerange; 
# 320
const __uctype __past = __uerange * __scaling; 
# 321
while (__f != __t) 
# 322
{ 
# 323
do { 
# 324
__ret = (((__uctype)__urng()) - __urngmin); } 
# 325
while (__ret >= __past); 
# 326
(*(__f++)) = ((__ret / __scaling) + (__param.a())); 
# 327
}  
# 328
}  
# 329
} else { 
# 330
if (__urngrange < __urange) 
# 331
{ 
# 347
__uctype __tmp; 
# 348
while (__f != __t) 
# 349
{ 
# 350
do 
# 351
{ 
# 352
const __uctype __uerngrange = __urngrange + 1; 
# 353
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 355
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 356
} 
# 357
while ((__ret > __urange) || (__ret < __tmp)); 
# 358
(*(__f++)) = __ret; 
# 359
}  
# 360
} else { 
# 362
while (__f != __t) { 
# 363
(*(__f++)) = ((((__uctype)__urng()) - __urngmin) + (__param.a())); }  }  }  
# 364
} 
# 367
}
# 37 "/usr/include/c++/5/bits/random.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 56
template< class _RealType, size_t __bits, class 
# 57
_UniformRandomNumberGenerator> _RealType 
# 56
generate_canonical(_UniformRandomNumberGenerator & __g); 
# 66
namespace __detail { 
# 70
template< class _UIntType, size_t __w, bool 
# 71
 = __w < (static_cast< size_t>(std::numeric_limits< _UIntType> ::digits))> 
# 73
struct _Shift { 
# 74
static const _UIntType __value = (0); }; 
# 76
template< class _UIntType, size_t __w> 
# 77
struct _Shift< _UIntType, __w, true>  { 
# 78
static const _UIntType __value = (((_UIntType)1) << __w); }; 
# 80
template< int __s, int 
# 81
__which = ((((__s) <= ((8) * sizeof(int))) + ((__s) <= ((8) * sizeof(long)))) + ((__s) <= ((8) * sizeof(long long)))) + (__s <= 128)> 
# 86
struct _Select_uint_least_t { 
# 88
static_assert((__which < 0), "sorry, would be too much trouble for a slow result");
# 90
}; 
# 92
template< int __s> 
# 93
struct _Select_uint_least_t< __s, 4>  { 
# 94
typedef unsigned type; }; 
# 96
template< int __s> 
# 97
struct _Select_uint_least_t< __s, 3>  { 
# 98
typedef unsigned long type; }; 
# 100
template< int __s> 
# 101
struct _Select_uint_least_t< __s, 2>  { 
# 102
typedef unsigned long long type; }; 
# 105
template< int __s> 
# 106
struct _Select_uint_least_t< __s, 1>  { 
# 107
typedef __uint128_t type; }; 
# 111
template< class _Tp, _Tp __m, _Tp __a, _Tp __c, bool 
# 112
__big_enough = (!(__m & (__m - 1))) || (((((_Tp)(-1)) - __c) / __a) >= (__m - 1)), bool 
# 114
__schrage_ok = (__m % __a) < (__m / __a)> 
# 115
struct _Mod { 
# 118
typedef typename _Select_uint_least_t< (std::__lg(__a) + std::__lg(__m)) + 2> ::type _Tp2; 
# 120
static _Tp __calc(_Tp __x) 
# 121
{ return static_cast< _Tp>(((((_Tp2)__a) * __x) + __c) % __m); } 
# 122
}; 
# 125
template< class _Tp, _Tp __m, _Tp __a, _Tp __c> 
# 126
struct _Mod< _Tp, __m, __a, __c, false, true>  { 
# 129
static _Tp __calc(_Tp __x); 
# 130
}; 
# 135
template< class _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s> 
# 136
struct _Mod< _Tp, __m, __a, __c, true, __s>  { 
# 139
static _Tp __calc(_Tp __x) 
# 140
{ 
# 141
_Tp __res = (__a * __x) + __c; 
# 142
if (__m) { 
# 143
__res %= __m; }  
# 144
return __res; 
# 145
} 
# 146
}; 
# 148
template< class _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0> inline _Tp 
# 150
__mod(_Tp __x) 
# 151
{ return _Mod< _Tp, __m, __a, __c> ::__calc(__x); } 
# 157
template< class _Engine, class _DInputType> 
# 158
struct _Adaptor { 
# 160
static_assert((std::is_floating_point< _DInputType> ::value), "template argument not a floating point type");
# 164
_Adaptor(_Engine &__g) : _M_g(__g) 
# 165
{ } 
# 168
_DInputType min() const 
# 169
{ return (_DInputType)0; } 
# 172
_DInputType max() const 
# 173
{ return (_DInputType)1; } 
# 181
_DInputType operator()() 
# 182
{ 
# 183
return std::generate_canonical< _DInputType, numeric_limits< _DInputType> ::digits, _Engine> (_M_g); 
# 186
} 
# 189
private: _Engine &_M_g; 
# 190
}; 
# 193
}
# 235
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> 
# 236
class linear_congruential_engine { 
# 238
static_assert((std::is_unsigned< _UIntType> ::value), "template argument substituting _UIntType not an unsigned integral type");
# 240
static_assert(((__m == 0U) || ((__a < __m) && (__c < __m))), "template argument substituting __m out of bounds");
# 245
public: typedef _UIntType result_type; 
# 248
static constexpr result_type multiplier = (__a); 
# 250
static constexpr result_type increment = (__c); 
# 252
static constexpr result_type modulus = (__m); 
# 253
static constexpr result_type default_seed = (1U); 
# 263
explicit linear_congruential_engine(result_type __s = default_seed) 
# 264
{ seed(__s); } 
# 272
template< class _Sseq, class  = typename enable_if< !is_same< _Sseq, linear_congruential_engine> ::value> ::type> explicit 
# 276
linear_congruential_engine(_Sseq &__q) 
# 277
{ seed(__q); } 
# 286
void seed(result_type __s = default_seed); 
# 295
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type seed(_Sseq & __q); 
# 306
static constexpr result_type min() 
# 307
{ return (__c == 0U) ? 1U : 0U; } 
# 313
static constexpr result_type max() 
# 314
{ return __m - 1U; } 
# 320
void discard(unsigned long long __z) 
# 321
{ 
# 322
for (; __z != 0ULL; --__z) { 
# 323
(*this)(); }  
# 324
} 
# 330
result_type operator()() 
# 331
{ 
# 332
(_M_x) = __detail::__mod< _UIntType, __m, __a, __c> (_M_x); 
# 333
return _M_x; 
# 334
} 
# 348
friend inline bool operator==(const linear_congruential_engine &__lhs, const linear_congruential_engine &
# 349
__rhs) 
# 350
{ return (__lhs._M_x) == (__rhs._M_x); } 
# 360
template< class _UIntType1, _UIntType1 __a1, _UIntType1 __c1, _UIntType1 
# 361
__m1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 360
operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1>  & __lcr); 
# 380
template< class _UIntType1, _UIntType1 __a1, _UIntType1 __c1, _UIntType1 
# 381
__m1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 380
operator>>(basic_istream< _CharT, _Traits>  & __is, std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1>  & __lcr); 
# 388
private: _UIntType _M_x; 
# 389
}; 
# 402
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> inline bool 
# 404
operator!=(const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 405
__lhs, const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 407
__rhs) 
# 408
{ return !(__lhs == __rhs); } 
# 439
template< class _UIntType, size_t __w, size_t 
# 440
__n, size_t __m, size_t __r, _UIntType 
# 441
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 442
__b, size_t __t, _UIntType 
# 443
__c, size_t __l, _UIntType __f> 
# 444
class mersenne_twister_engine { 
# 446
static_assert((std::is_unsigned< _UIntType> ::value), "template argument substituting _UIntType not an unsigned integral type");
# 448
static_assert((((1U) <= __m) && (__m <= __n)), "template argument substituting __m out of bounds");
# 450
static_assert((__r <= __w), "template argument substituting __r out of bound");
# 452
static_assert((__u <= __w), "template argument substituting __u out of bound");
# 454
static_assert((__s <= __w), "template argument substituting __s out of bound");
# 456
static_assert((__t <= __w), "template argument substituting __t out of bound");
# 458
static_assert((__l <= __w), "template argument substituting __l out of bound");
# 460
static_assert((__w <= std::numeric_limits< _UIntType> ::digits), "template argument substituting __w out of bound");
# 462
static_assert((__a <= (__detail::_Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __a out of bound");
# 464
static_assert((__b <= (__detail::_Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __b out of bound");
# 466
static_assert((__c <= (__detail::_Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __c out of bound");
# 468
static_assert((__d <= (__detail::_Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __d out of bound");
# 470
static_assert((__f <= (__detail::_Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __f out of bound");
# 475
public: typedef _UIntType result_type; 
# 478
static constexpr size_t word_size = __w; 
# 479
static constexpr size_t state_size = __n; 
# 480
static constexpr size_t shift_size = __m; 
# 481
static constexpr size_t mask_bits = __r; 
# 482
static constexpr result_type xor_mask = (__a); 
# 483
static constexpr size_t tempering_u = __u; 
# 484
static constexpr result_type tempering_d = (__d); 
# 485
static constexpr size_t tempering_s = __s; 
# 486
static constexpr result_type tempering_b = (__b); 
# 487
static constexpr size_t tempering_t = __t; 
# 488
static constexpr result_type tempering_c = (__c); 
# 489
static constexpr size_t tempering_l = __l; 
# 490
static constexpr result_type initialization_multiplier = (__f); 
# 491
static constexpr result_type default_seed = (5489U); 
# 495
explicit mersenne_twister_engine(result_type __sd = default_seed) 
# 496
{ seed(__sd); } 
# 504
template< class _Sseq, class  = typename enable_if< !is_same< _Sseq, mersenne_twister_engine> ::value> ::type> explicit 
# 508
mersenne_twister_engine(_Sseq &__q) 
# 509
{ seed(__q); } 
# 512
void seed(result_type __sd = default_seed); 
# 514
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type seed(_Sseq & __q); 
# 522
static constexpr result_type min() 
# 523
{ return 0; } 
# 529
static constexpr result_type max() 
# 530
{ return __detail::_Shift< _UIntType, __w> ::__value - 1; } 
# 536
void discard(unsigned long long __z); 
# 539
result_type operator()(); 
# 554
friend inline bool operator==(const mersenne_twister_engine &__lhs, const mersenne_twister_engine &
# 555
__rhs) 
# 556
{ return std::equal(__lhs._M_x, (__lhs._M_x) + state_size, __rhs._M_x) && ((__lhs._M_p) == (__rhs._M_p)); 
# 557
} 
# 571
template< class _UIntType1, size_t 
# 572
__w1, size_t __n1, size_t 
# 573
__m1, size_t __r1, _UIntType1 
# 574
__a1, size_t __u1, _UIntType1 
# 575
__d1, size_t __s1, _UIntType1 
# 576
__b1, size_t __t1, _UIntType1 
# 577
__c1, size_t __l1, _UIntType1 __f1, class 
# 578
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 571
operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::mersenne_twister_engine< _UIntType1, __w1, __n1, __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1, __l1, __f1>  & __x); 
# 597
template< class _UIntType1, size_t 
# 598
__w1, size_t __n1, size_t 
# 599
__m1, size_t __r1, _UIntType1 
# 600
__a1, size_t __u1, _UIntType1 
# 601
__d1, size_t __s1, _UIntType1 
# 602
__b1, size_t __t1, _UIntType1 
# 603
__c1, size_t __l1, _UIntType1 __f1, class 
# 604
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 597
operator>>(basic_istream< _CharT, _Traits>  & __is, std::mersenne_twister_engine< _UIntType1, __w1, __n1, __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1, __l1, __f1>  & __x); 
# 612
private: void _M_gen_rand(); 
# 614
_UIntType _M_x[state_size]; 
# 615
size_t _M_p; 
# 616
}; 
# 630
template< class _UIntType, size_t __w, size_t 
# 631
__n, size_t __m, size_t __r, _UIntType 
# 632
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 633
__b, size_t __t, _UIntType 
# 634
__c, size_t __l, _UIntType __f> inline bool 
# 636
operator!=(const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 637
__lhs, const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 639
__rhs) 
# 640
{ return !(__lhs == __rhs); } 
# 658
template< class _UIntType, size_t __w, size_t __s, size_t __r> 
# 659
class subtract_with_carry_engine { 
# 661
static_assert((std::is_unsigned< _UIntType> ::value), "template argument substituting _UIntType not an unsigned integral type");
# 663
static_assert((((0U) < __s) && (__s < __r)), "template argument substituting __s out of bounds");
# 665
static_assert((((0U) < __w) && (__w <= std::numeric_limits< _UIntType> ::digits)), "template argument substituting __w out of bounds");
# 670
public: typedef _UIntType result_type; 
# 673
static constexpr size_t word_size = __w; 
# 674
static constexpr size_t short_lag = __s; 
# 675
static constexpr size_t long_lag = __r; 
# 676
static constexpr result_type default_seed = (19780503U); 
# 683
explicit subtract_with_carry_engine(result_type __sd = default_seed) 
# 684
{ seed(__sd); } 
# 692
template< class _Sseq, class  = typename enable_if< !is_same< _Sseq, subtract_with_carry_engine> ::value> ::type> explicit 
# 696
subtract_with_carry_engine(_Sseq &__q) 
# 697
{ seed(__q); } 
# 712
void seed(result_type __sd = default_seed); 
# 718
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type seed(_Sseq & __q); 
# 727
static constexpr result_type min() 
# 728
{ return 0; } 
# 735
static constexpr result_type max() 
# 736
{ return __detail::_Shift< _UIntType, __w> ::__value - 1; } 
# 742
void discard(unsigned long long __z) 
# 743
{ 
# 744
for (; __z != 0ULL; --__z) { 
# 745
(*this)(); }  
# 746
} 
# 752
result_type operator()(); 
# 767
friend inline bool operator==(const subtract_with_carry_engine &__lhs, const subtract_with_carry_engine &
# 768
__rhs) 
# 769
{ return std::equal(__lhs._M_x, (__lhs._M_x) + long_lag, __rhs._M_x) && ((__lhs._M_carry) == (__rhs._M_carry)) && ((__lhs._M_p) == (__rhs._M_p)); 
# 771
} 
# 785
template< class _UIntType1, size_t __w1, size_t __s1, size_t __r1, class 
# 786
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 785
operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::subtract_with_carry_engine< _UIntType1, __w1, __s1, __r1>  & __x); 
# 804
template< class _UIntType1, size_t __w1, size_t __s1, size_t __r1, class 
# 805
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 804
operator>>(basic_istream< _CharT, _Traits>  & __is, std::subtract_with_carry_engine< _UIntType1, __w1, __s1, __r1>  & __x); 
# 813
private: _UIntType _M_x[long_lag]; 
# 814
_UIntType _M_carry; 
# 815
size_t _M_p; 
# 816
}; 
# 830
template< class _UIntType, size_t __w, size_t __s, size_t __r> inline bool 
# 832
operator!=(const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 833
__lhs, const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 835
__rhs) 
# 836
{ return !(__lhs == __rhs); } 
# 845
template< class _RandomNumberEngine, size_t __p, size_t __r> 
# 846
class discard_block_engine { 
# 848
static_assert((((1) <= __r) && (__r <= __p)), "template argument substituting __r out of bounds");
# 853
public: typedef typename _RandomNumberEngine::result_type result_type; 
# 856
static constexpr size_t block_size = __p; 
# 857
static constexpr size_t used_block = __r; 
# 864
discard_block_engine() : _M_b(), _M_n((0)) 
# 865
{ } 
# 874
explicit discard_block_engine(const _RandomNumberEngine &__rng) : _M_b(__rng), _M_n((0)) 
# 875
{ } 
# 884
explicit discard_block_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)), _M_n((0)) 
# 885
{ } 
# 894
explicit discard_block_engine(result_type __s) : _M_b(__s), _M_n((0)) 
# 895
{ } 
# 902
template< class _Sseq, class  = typename enable_if< (!is_same< _Sseq, discard_block_engine> ::value) && (!is_same< _Sseq, _RandomNumberEngine> ::value)> ::type> explicit 
# 907
discard_block_engine(_Sseq &__q) : _M_b(__q), _M_n((0)) 
# 909
{ } 
# 916
void seed() 
# 917
{ 
# 918
((_M_b).seed()); 
# 919
(_M_n) = (0); 
# 920
} 
# 927
void seed(result_type __s) 
# 928
{ 
# 929
((_M_b).seed(__s)); 
# 930
(_M_n) = (0); 
# 931
} 
# 938
template< class _Sseq> void 
# 940
seed(_Sseq &__q) 
# 941
{ 
# 942
((_M_b).seed(__q)); 
# 943
(_M_n) = (0); 
# 944
} 
# 951
const _RandomNumberEngine &base() const noexcept 
# 952
{ return _M_b; } 
# 958
static constexpr result_type min() 
# 959
{ return _RandomNumberEngine::min(); } 
# 965
static constexpr result_type max() 
# 966
{ return _RandomNumberEngine::max(); } 
# 972
void discard(unsigned long long __z) 
# 973
{ 
# 974
for (; __z != 0ULL; --__z) { 
# 975
(*this)(); }  
# 976
} 
# 982
result_type operator()(); 
# 996
friend inline bool operator==(const discard_block_engine &__lhs, const discard_block_engine &
# 997
__rhs) 
# 998
{ return ((__lhs._M_b) == (__rhs._M_b)) && ((__lhs._M_n) == (__rhs._M_n)); } 
# 1011
template< class _RandomNumberEngine1, size_t __p1, size_t __r1, class 
# 1012
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 1011
operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::discard_block_engine< _RandomNumberEngine1, __p1, __r1>  & __x); 
# 1029
template< class _RandomNumberEngine1, size_t __p1, size_t __r1, class 
# 1030
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 1029
operator>>(basic_istream< _CharT, _Traits>  & __is, std::discard_block_engine< _RandomNumberEngine1, __p1, __r1>  & __x); 
# 1037
private: _RandomNumberEngine _M_b; 
# 1038
size_t _M_n; 
# 1039
}; 
# 1052
template< class _RandomNumberEngine, size_t __p, size_t __r> inline bool 
# 1054
operator!=(const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 1055
__lhs, const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 1057
__rhs) 
# 1058
{ return !(__lhs == __rhs); } 
# 1065
template< class _RandomNumberEngine, size_t __w, class _UIntType> 
# 1066
class independent_bits_engine { 
# 1068
static_assert((std::is_unsigned< _UIntType> ::value), "template argument substituting _UIntType not an unsigned integral type");
# 1070
static_assert((((0U) < __w) && (__w <= std::numeric_limits< _UIntType> ::digits)), "template argument substituting __w out of bounds");
# 1075
public: typedef _UIntType result_type; 
# 1082
independent_bits_engine() : _M_b() 
# 1083
{ } 
# 1092
explicit independent_bits_engine(const _RandomNumberEngine &__rng) : _M_b(__rng) 
# 1093
{ } 
# 1102
explicit independent_bits_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)) 
# 1103
{ } 
# 1112
explicit independent_bits_engine(result_type __s) : _M_b(__s) 
# 1113
{ } 
# 1120
template< class _Sseq, class  = typename enable_if< (!is_same< _Sseq, independent_bits_engine> ::value) && (!is_same< _Sseq, _RandomNumberEngine> ::value)> ::type> explicit 
# 1125
independent_bits_engine(_Sseq &__q) : _M_b(__q) 
# 1127
{ } 
# 1134
void seed() 
# 1135
{ ((_M_b).seed()); } 
# 1142
void seed(result_type __s) 
# 1143
{ ((_M_b).seed(__s)); } 
# 1150
template< class _Sseq> void 
# 1152
seed(_Sseq &__q) 
# 1153
{ ((_M_b).seed(__q)); } 
# 1160
const _RandomNumberEngine &base() const noexcept 
# 1161
{ return _M_b; } 
# 1167
static constexpr result_type min() 
# 1168
{ return 0U; } 
# 1174
static constexpr result_type max() 
# 1175
{ return __detail::_Shift< _UIntType, __w> ::__value - 1; } 
# 1181
void discard(unsigned long long __z) 
# 1182
{ 
# 1183
for (; __z != 0ULL; --__z) { 
# 1184
(*this)(); }  
# 1185
} 
# 1191
result_type operator()(); 
# 1206
friend inline bool operator==(const independent_bits_engine &__lhs, const independent_bits_engine &
# 1207
__rhs) 
# 1208
{ return (__lhs._M_b) == (__rhs._M_b); } 
# 1222
template< class _CharT, class _Traits> friend inline basic_istream< _CharT, _Traits>  &
# 1224
operator>>(basic_istream< _CharT, _Traits>  &__is, independent_bits_engine &
# 1226
__x) 
# 1227
{ 
# 1228
__is >> (__x._M_b); 
# 1229
return __is; 
# 1230
} 
# 1233
private: _RandomNumberEngine _M_b; 
# 1234
}; 
# 1248
template< class _RandomNumberEngine, size_t __w, class _UIntType> inline bool 
# 1250
operator!=(const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1251
__lhs, const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1253
__rhs) 
# 1254
{ return !(__lhs == __rhs); } 
# 1266
template< class _RandomNumberEngine, size_t __w, class _UIntType, class 
# 1267
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1269
operator<<(basic_ostream< _CharT, _Traits>  &__os, const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1271
__x) 
# 1272
{ 
# 1273
__os << (__x.base()); 
# 1274
return __os; 
# 1275
} 
# 1283
template< class _RandomNumberEngine, size_t __k> 
# 1284
class shuffle_order_engine { 
# 1286
static_assert(((1U) <= __k), "template argument substituting __k out of bound");
# 1291
public: typedef typename _RandomNumberEngine::result_type result_type; 
# 1293
static constexpr size_t table_size = __k; 
# 1300
shuffle_order_engine() : _M_b() 
# 1302
{ _M_initialize(); } 
# 1311
explicit shuffle_order_engine(const _RandomNumberEngine &__rng) : _M_b(__rng) 
# 1313
{ _M_initialize(); } 
# 1322
explicit shuffle_order_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)) 
# 1324
{ _M_initialize(); } 
# 1333
explicit shuffle_order_engine(result_type __s) : _M_b(__s) 
# 1335
{ _M_initialize(); } 
# 1342
template< class _Sseq, class  = typename enable_if< (!is_same< _Sseq, shuffle_order_engine> ::value) && (!is_same< _Sseq, _RandomNumberEngine> ::value)> ::type> explicit 
# 1347
shuffle_order_engine(_Sseq &__q) : _M_b(__q) 
# 1349
{ _M_initialize(); } 
# 1356
void seed() 
# 1357
{ 
# 1358
((_M_b).seed()); 
# 1359
_M_initialize(); 
# 1360
} 
# 1367
void seed(result_type __s) 
# 1368
{ 
# 1369
((_M_b).seed(__s)); 
# 1370
_M_initialize(); 
# 1371
} 
# 1378
template< class _Sseq> void 
# 1380
seed(_Sseq &__q) 
# 1381
{ 
# 1382
((_M_b).seed(__q)); 
# 1383
_M_initialize(); 
# 1384
} 
# 1390
const _RandomNumberEngine &base() const noexcept 
# 1391
{ return _M_b; } 
# 1397
static constexpr result_type min() 
# 1398
{ return _RandomNumberEngine::min(); } 
# 1404
static constexpr result_type max() 
# 1405
{ return _RandomNumberEngine::max(); } 
# 1411
void discard(unsigned long long __z) 
# 1412
{ 
# 1413
for (; __z != 0ULL; --__z) { 
# 1414
(*this)(); }  
# 1415
} 
# 1421
result_type operator()(); 
# 1435
friend inline bool operator==(const shuffle_order_engine &__lhs, const shuffle_order_engine &
# 1436
__rhs) 
# 1437
{ return ((__lhs._M_b) == (__rhs._M_b)) && std::equal(__lhs._M_v, (__lhs._M_v) + __k, __rhs._M_v) && ((__lhs._M_y) == (__rhs._M_y)); 
# 1439
} 
# 1452
template< class _RandomNumberEngine1, size_t __k1, class 
# 1453
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 1452
operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::shuffle_order_engine< _RandomNumberEngine1, __k1>  & __x); 
# 1470
template< class _RandomNumberEngine1, size_t __k1, class 
# 1471
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 1470
operator>>(basic_istream< _CharT, _Traits>  & __is, std::shuffle_order_engine< _RandomNumberEngine1, __k1>  & __x); 
# 1477
private: void _M_initialize() 
# 1478
{ 
# 1479
for (size_t __i = (0); __i < __k; ++__i) { 
# 1480
((_M_v)[__i]) = (_M_b)(); }  
# 1481
(_M_y) = (_M_b)(); 
# 1482
} 
# 1484
_RandomNumberEngine _M_b; 
# 1485
result_type _M_v[__k]; 
# 1486
result_type _M_y; 
# 1487
}; 
# 1500
template< class _RandomNumberEngine, size_t __k> inline bool 
# 1502
operator!=(const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 1503
__lhs, const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 1505
__rhs) 
# 1506
{ return !(__lhs == __rhs); } 
# 1513
typedef linear_congruential_engine< unsigned long, 16807UL, 0UL, 2147483647UL>  minstd_rand0; 
# 1519
typedef linear_congruential_engine< unsigned long, 48271UL, 0UL, 2147483647UL>  minstd_rand; 
# 1535
typedef mersenne_twister_engine< unsigned long, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>  mt19937; 
# 1547
typedef mersenne_twister_engine< unsigned long, 64UL, 312UL, 156UL, 31UL, 13043109905998158313UL, 29UL, 6148914691236517205UL, 17UL, 8202884508482404352UL, 37UL, 18444473444759240704UL, 43UL, 6364136223846793005UL>  mt19937_64; 
# 1550
typedef subtract_with_carry_engine< unsigned long, 24UL, 10UL, 24UL>  ranlux24_base; 
# 1553
typedef subtract_with_carry_engine< unsigned long, 48UL, 5UL, 12UL>  ranlux48_base; 
# 1555
typedef discard_block_engine< subtract_with_carry_engine< unsigned long, 24UL, 10UL, 24UL> , 223UL, 23UL>  ranlux24; 
# 1557
typedef discard_block_engine< subtract_with_carry_engine< unsigned long, 48UL, 5UL, 12UL> , 389UL, 11UL>  ranlux48; 
# 1559
typedef shuffle_order_engine< linear_congruential_engine< unsigned long, 16807UL, 0UL, 2147483647UL> , 256UL>  knuth_b; 
# 1561
typedef minstd_rand0 default_random_engine; 
# 1567
class random_device { 
# 1571
public: typedef unsigned result_type; 
# 1578
explicit random_device(const __cxx11::string &__token = "default") 
# 1579
{ 
# 1580
this->_M_init(__token); 
# 1581
} 
# 1583
~random_device() 
# 1584
{ this->_M_fini(); } 
# 1597
static constexpr result_type min() 
# 1598
{ return std::numeric_limits< unsigned> ::min(); } 
# 1601
static constexpr result_type max() 
# 1602
{ return std::numeric_limits< unsigned> ::max(); } 
# 1605
double entropy() const noexcept 
# 1606
{ return (0.0); } 
# 1609
result_type operator()() 
# 1610
{ 
# 1612
return this->_M_getval(); 
# 1616
} 
# 1619
random_device(const random_device &) = delete;
# 1620
void operator=(const random_device &) = delete;
# 1624
private: void _M_init(const __cxx11::string & __token); 
# 1625
void _M_init_pretr1(const __cxx11::string & __token); 
# 1626
void _M_fini(); 
# 1628
result_type _M_getval(); 
# 1629
result_type _M_getval_pretr1(); 
# 1632
union { 
# 1633
void *_M_file; 
# 1634
mt19937 _M_mt; 
# 1635
}; 
# 1636
}; 
# 1658
template< class _IntType> inline bool 
# 1660
operator!=(const uniform_int_distribution< _IntType>  &__d1, const uniform_int_distribution< _IntType>  &
# 1661
__d2) 
# 1662
{ return !(__d1 == __d2); } 
# 1674
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  &, const uniform_int_distribution< _IntType>  &); 
# 1688
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  &, uniform_int_distribution< _IntType>  &); 
# 1701
template< class _RealType = double> 
# 1702
class uniform_real_distribution { 
# 1704
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 1709
public: typedef _RealType result_type; 
# 1711
struct param_type { 
# 1713
typedef uniform_real_distribution distribution_type; 
# 1716
explicit param_type(_RealType __a = (_RealType)0, _RealType 
# 1717
__b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 1719
{ 
# 1720
; 
# 1721
} 
# 1724
result_type a() const 
# 1725
{ return _M_a; } 
# 1728
result_type b() const 
# 1729
{ return _M_b; } 
# 1732
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 1733
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 1736
private: _RealType _M_a; 
# 1737
_RealType _M_b; 
# 1738
}; 
# 1748
explicit uniform_real_distribution(_RealType __a = (_RealType)0, _RealType 
# 1749
__b = (_RealType)1) : _M_param(__a, __b) 
# 1751
{ } 
# 1754
explicit uniform_real_distribution(const param_type &__p) : _M_param(__p) 
# 1756
{ } 
# 1764
void reset() { } 
# 1767
result_type a() const 
# 1768
{ return ((_M_param).a()); } 
# 1771
result_type b() const 
# 1772
{ return ((_M_param).b()); } 
# 1778
param_type param() const 
# 1779
{ return _M_param; } 
# 1786
void param(const param_type &__param) 
# 1787
{ (_M_param) = __param; } 
# 1793
result_type min() const 
# 1794
{ return this->a(); } 
# 1800
result_type max() const 
# 1801
{ return this->b(); } 
# 1806
template< class _UniformRandomNumberGenerator> result_type 
# 1808
operator()(_UniformRandomNumberGenerator &__urng) 
# 1809
{ return (this->operator()(__urng, _M_param)); } 
# 1811
template< class _UniformRandomNumberGenerator> result_type 
# 1813
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1814
__p) 
# 1815
{ 
# 1817
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 1818
return (__aurng() * ((__p.b()) - (__p.a()))) + (__p.a()); 
# 1819
} 
# 1821
template< class _ForwardIterator, class 
# 1822
_UniformRandomNumberGenerator> void 
# 1824
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1825
__urng) 
# 1826
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 1828
template< class _ForwardIterator, class 
# 1829
_UniformRandomNumberGenerator> void 
# 1831
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1832
__urng, const param_type &
# 1833
__p) 
# 1834
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 1836
template< class _UniformRandomNumberGenerator> void 
# 1838
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 1839
__urng, const param_type &
# 1840
__p) 
# 1841
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 1848
friend inline bool operator==(const uniform_real_distribution &__d1, const uniform_real_distribution &
# 1849
__d2) 
# 1850
{ return (__d1._M_param) == (__d2._M_param); } 
# 1853
private: template< class _ForwardIterator, class 
# 1854
_UniformRandomNumberGenerator> void 
# 1853
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 1860
param_type _M_param; 
# 1861
}; 
# 1867
template< class _IntType> inline bool 
# 1869
operator!=(const uniform_real_distribution< _IntType>  &__d1, const uniform_real_distribution< _IntType>  &
# 1870
__d2) 
# 1871
{ return !(__d1 == __d2); } 
# 1883
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  &, const uniform_real_distribution< _RealType>  &); 
# 1897
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  &, uniform_real_distribution< _RealType>  &); 
# 1919
template< class _RealType = double> 
# 1920
class normal_distribution { 
# 1922
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 1927
public: typedef _RealType result_type; 
# 1929
struct param_type { 
# 1931
typedef normal_distribution distribution_type; 
# 1934
explicit param_type(_RealType __mean = (_RealType)0, _RealType 
# 1935
__stddev = (_RealType)1) : _M_mean(__mean), _M_stddev(__stddev) 
# 1937
{ 
# 1938
; 
# 1939
} 
# 1942
_RealType mean() const 
# 1943
{ return _M_mean; } 
# 1946
_RealType stddev() const 
# 1947
{ return _M_stddev; } 
# 1950
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 1951
{ return ((__p1._M_mean) == (__p2._M_mean)) && ((__p1._M_stddev) == (__p2._M_stddev)); 
# 1952
} 
# 1955
private: _RealType _M_mean; 
# 1956
_RealType _M_stddev; 
# 1957
}; 
# 1965
explicit normal_distribution(result_type __mean = (result_type)0, result_type 
# 1966
__stddev = (result_type)1) : _M_param(__mean, __stddev), _M_saved_available(false) 
# 1968
{ } 
# 1971
explicit normal_distribution(const param_type &__p) : _M_param(__p), _M_saved_available(false) 
# 1973
{ } 
# 1979
void reset() 
# 1980
{ (_M_saved_available) = false; } 
# 1986
_RealType mean() const 
# 1987
{ return ((_M_param).mean()); } 
# 1993
_RealType stddev() const 
# 1994
{ return ((_M_param).stddev()); } 
# 2000
param_type param() const 
# 2001
{ return _M_param; } 
# 2008
void param(const param_type &__param) 
# 2009
{ (_M_param) = __param; } 
# 2015
result_type min() const 
# 2016
{ return std::numeric_limits< _RealType> ::lowest(); } 
# 2022
result_type max() const 
# 2023
{ return std::numeric_limits< _RealType> ::max(); } 
# 2028
template< class _UniformRandomNumberGenerator> result_type 
# 2030
operator()(_UniformRandomNumberGenerator &__urng) 
# 2031
{ return (this->operator()(__urng, _M_param)); } 
# 2033
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2038
template< class _ForwardIterator, class 
# 2039
_UniformRandomNumberGenerator> void 
# 2041
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2042
__urng) 
# 2043
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 2045
template< class _ForwardIterator, class 
# 2046
_UniformRandomNumberGenerator> void 
# 2048
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2049
__urng, const param_type &
# 2050
__p) 
# 2051
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 2053
template< class _UniformRandomNumberGenerator> void 
# 2055
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2056
__urng, const param_type &
# 2057
__p) 
# 2058
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 2065
template< class _RealType1> friend bool operator==(const std::normal_distribution< _RealType1>  & __d1, const std::normal_distribution< _RealType1>  & __d2); 
# 2080
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::normal_distribution< _RealType1>  & __x); 
# 2095
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::normal_distribution< _RealType1>  & __x); 
# 2101
private: template< class _ForwardIterator, class 
# 2102
_UniformRandomNumberGenerator> void 
# 2101
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2108
param_type _M_param; 
# 2109
result_type _M_saved; 
# 2110
bool _M_saved_available; 
# 2111
}; 
# 2116
template< class _RealType> inline bool 
# 2118
operator!=(const normal_distribution< _RealType>  &__d1, const normal_distribution< _RealType>  &
# 2119
__d2) 
# 2120
{ return !(__d1 == __d2); } 
# 2132
template< class _RealType = double> 
# 2133
class lognormal_distribution { 
# 2135
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 2140
public: typedef _RealType result_type; 
# 2142
struct param_type { 
# 2144
typedef lognormal_distribution distribution_type; 
# 2147
explicit param_type(_RealType __m = (_RealType)0, _RealType 
# 2148
__s = (_RealType)1) : _M_m(__m), _M_s(__s) 
# 2150
{ } 
# 2153
_RealType m() const 
# 2154
{ return _M_m; } 
# 2157
_RealType s() const 
# 2158
{ return _M_s; } 
# 2161
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2162
{ return ((__p1._M_m) == (__p2._M_m)) && ((__p1._M_s) == (__p2._M_s)); } 
# 2165
private: _RealType _M_m; 
# 2166
_RealType _M_s; 
# 2167
}; 
# 2170
explicit lognormal_distribution(_RealType __m = (_RealType)0, _RealType 
# 2171
__s = (_RealType)1) : _M_param(__m, __s), _M_nd() 
# 2173
{ } 
# 2176
explicit lognormal_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 2178
{ } 
# 2184
void reset() 
# 2185
{ ((_M_nd).reset()); } 
# 2191
_RealType m() const 
# 2192
{ return ((_M_param).m()); } 
# 2195
_RealType s() const 
# 2196
{ return ((_M_param).s()); } 
# 2202
param_type param() const 
# 2203
{ return _M_param; } 
# 2210
void param(const param_type &__param) 
# 2211
{ (_M_param) = __param; } 
# 2217
result_type min() const 
# 2218
{ return (result_type)0; } 
# 2224
result_type max() const 
# 2225
{ return std::numeric_limits< _RealType> ::max(); } 
# 2230
template< class _UniformRandomNumberGenerator> result_type 
# 2232
operator()(_UniformRandomNumberGenerator &__urng) 
# 2233
{ return (this->operator()(__urng, _M_param)); } 
# 2235
template< class _UniformRandomNumberGenerator> result_type 
# 2237
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2238
__p) 
# 2239
{ return std::exp(((__p.s()) * (_M_nd)(__urng)) + (__p.m())); } 
# 2241
template< class _ForwardIterator, class 
# 2242
_UniformRandomNumberGenerator> void 
# 2244
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2245
__urng) 
# 2246
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 2248
template< class _ForwardIterator, class 
# 2249
_UniformRandomNumberGenerator> void 
# 2251
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2252
__urng, const param_type &
# 2253
__p) 
# 2254
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 2256
template< class _UniformRandomNumberGenerator> void 
# 2258
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2259
__urng, const param_type &
# 2260
__p) 
# 2261
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 2269
friend inline bool operator==(const lognormal_distribution &__d1, const lognormal_distribution &
# 2270
__d2) 
# 2271
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)); 
# 2272
} 
# 2284
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::lognormal_distribution< _RealType1>  & __x); 
# 2299
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::lognormal_distribution< _RealType1>  & __x); 
# 2305
private: template< class _ForwardIterator, class 
# 2306
_UniformRandomNumberGenerator> void 
# 2305
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2312
param_type _M_param; 
# 2314
normal_distribution< _RealType>  _M_nd; 
# 2315
}; 
# 2320
template< class _RealType> inline bool 
# 2322
operator!=(const lognormal_distribution< _RealType>  &__d1, const lognormal_distribution< _RealType>  &
# 2323
__d2) 
# 2324
{ return !(__d1 == __d2); } 
# 2336
template< class _RealType = double> 
# 2337
class gamma_distribution { 
# 2339
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 2344
public: typedef _RealType result_type; 
# 2346
struct param_type { 
# 2348
typedef gamma_distribution distribution_type; 
# 2349
friend class gamma_distribution; 
# 2352
explicit param_type(_RealType __alpha_val = (_RealType)1, _RealType 
# 2353
__beta_val = (_RealType)1) : _M_alpha(__alpha_val), _M_beta(__beta_val) 
# 2355
{ 
# 2356
; 
# 2357
_M_initialize(); 
# 2358
} 
# 2361
_RealType alpha() const 
# 2362
{ return _M_alpha; } 
# 2365
_RealType beta() const 
# 2366
{ return _M_beta; } 
# 2369
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2370
{ return ((__p1._M_alpha) == (__p2._M_alpha)) && ((__p1._M_beta) == (__p2._M_beta)); 
# 2371
} 
# 2375
private: void _M_initialize(); 
# 2377
_RealType _M_alpha; 
# 2378
_RealType _M_beta; 
# 2380
_RealType _M_malpha, _M_a2; 
# 2381
}; 
# 2389
explicit gamma_distribution(_RealType __alpha_val = (_RealType)1, _RealType 
# 2390
__beta_val = (_RealType)1) : _M_param(__alpha_val, __beta_val), _M_nd() 
# 2392
{ } 
# 2395
explicit gamma_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 2397
{ } 
# 2403
void reset() 
# 2404
{ ((_M_nd).reset()); } 
# 2410
_RealType alpha() const 
# 2411
{ return ((_M_param).alpha()); } 
# 2417
_RealType beta() const 
# 2418
{ return ((_M_param).beta()); } 
# 2424
param_type param() const 
# 2425
{ return _M_param; } 
# 2432
void param(const param_type &__param) 
# 2433
{ (_M_param) = __param; } 
# 2439
result_type min() const 
# 2440
{ return (result_type)0; } 
# 2446
result_type max() const 
# 2447
{ return std::numeric_limits< _RealType> ::max(); } 
# 2452
template< class _UniformRandomNumberGenerator> result_type 
# 2454
operator()(_UniformRandomNumberGenerator &__urng) 
# 2455
{ return (this->operator()(__urng, _M_param)); } 
# 2457
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2462
template< class _ForwardIterator, class 
# 2463
_UniformRandomNumberGenerator> void 
# 2465
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2466
__urng) 
# 2467
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 2469
template< class _ForwardIterator, class 
# 2470
_UniformRandomNumberGenerator> void 
# 2472
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2473
__urng, const param_type &
# 2474
__p) 
# 2475
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 2477
template< class _UniformRandomNumberGenerator> void 
# 2479
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2480
__urng, const param_type &
# 2481
__p) 
# 2482
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 2490
friend inline bool operator==(const gamma_distribution &__d1, const gamma_distribution &
# 2491
__d2) 
# 2492
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)); 
# 2493
} 
# 2505
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::gamma_distribution< _RealType1>  & __x); 
# 2519
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::gamma_distribution< _RealType1>  & __x); 
# 2525
private: template< class _ForwardIterator, class 
# 2526
_UniformRandomNumberGenerator> void 
# 2525
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2532
param_type _M_param; 
# 2534
normal_distribution< _RealType>  _M_nd; 
# 2535
}; 
# 2540
template< class _RealType> inline bool 
# 2542
operator!=(const gamma_distribution< _RealType>  &__d1, const gamma_distribution< _RealType>  &
# 2543
__d2) 
# 2544
{ return !(__d1 == __d2); } 
# 2553
template< class _RealType = double> 
# 2554
class chi_squared_distribution { 
# 2556
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 2561
public: typedef _RealType result_type; 
# 2563
struct param_type { 
# 2565
typedef chi_squared_distribution distribution_type; 
# 2568
explicit param_type(_RealType __n = (_RealType)1) : _M_n(__n) 
# 2570
{ } 
# 2573
_RealType n() const 
# 2574
{ return _M_n; } 
# 2577
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2578
{ return (__p1._M_n) == (__p2._M_n); } 
# 2581
private: _RealType _M_n; 
# 2582
}; 
# 2585
explicit chi_squared_distribution(_RealType __n = (_RealType)1) : _M_param(__n), _M_gd(__n / 2) 
# 2587
{ } 
# 2590
explicit chi_squared_distribution(const param_type &__p) : _M_param(__p), _M_gd((__p.n()) / 2) 
# 2592
{ } 
# 2598
void reset() 
# 2599
{ ((_M_gd).reset()); } 
# 2605
_RealType n() const 
# 2606
{ return ((_M_param).n()); } 
# 2612
param_type param() const 
# 2613
{ return _M_param; } 
# 2620
void param(const param_type &__param) 
# 2621
{ (_M_param) = __param; } 
# 2627
result_type min() const 
# 2628
{ return (result_type)0; } 
# 2634
result_type max() const 
# 2635
{ return std::numeric_limits< _RealType> ::max(); } 
# 2640
template< class _UniformRandomNumberGenerator> result_type 
# 2642
operator()(_UniformRandomNumberGenerator &__urng) 
# 2643
{ return 2 * (_M_gd)(__urng); } 
# 2645
template< class _UniformRandomNumberGenerator> result_type 
# 2647
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2648
__p) 
# 2649
{ 
# 2651
typedef typename gamma_distribution< _RealType> ::param_type param_type; 
# 2652
return 2 * (_M_gd)(__urng, (param_type)((__p.n()) / 2)); 
# 2653
} 
# 2655
template< class _ForwardIterator, class 
# 2656
_UniformRandomNumberGenerator> void 
# 2658
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2659
__urng) 
# 2660
{ (this->__generate_impl(__f, __t, __urng)); } 
# 2662
template< class _ForwardIterator, class 
# 2663
_UniformRandomNumberGenerator> void 
# 2665
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2666
__urng, const param_type &
# 2667
__p) 
# 2668
{ 
# 2669
typename gamma_distribution< _RealType> ::param_type __p2((__p.n()) / 2); 
# 2670
(this->__generate_impl(__f, __t, __urng, __p2)); } 
# 2672
template< class _UniformRandomNumberGenerator> void 
# 2674
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2675
__urng) 
# 2676
{ (this->__generate_impl(__f, __t, __urng)); } 
# 2678
template< class _UniformRandomNumberGenerator> void 
# 2680
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2681
__urng, const param_type &
# 2682
__p) 
# 2683
{ 
# 2684
typename gamma_distribution< _RealType> ::param_type __p2((__p.n()) / 2); 
# 2685
(this->__generate_impl(__f, __t, __urng, __p2)); } 
# 2693
friend inline bool operator==(const chi_squared_distribution &__d1, const chi_squared_distribution &
# 2694
__d2) 
# 2695
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_gd) == (__d2._M_gd)); } 
# 2707
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::chi_squared_distribution< _RealType1>  & __x); 
# 2722
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::chi_squared_distribution< _RealType1>  & __x); 
# 2728
private: template< class _ForwardIterator, class 
# 2729
_UniformRandomNumberGenerator> void 
# 2728
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 2734
template< class _ForwardIterator, class 
# 2735
_UniformRandomNumberGenerator> void 
# 2734
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const typename gamma_distribution< _RealType> ::param_type & __p); 
# 2742
param_type _M_param; 
# 2744
gamma_distribution< _RealType>  _M_gd; 
# 2745
}; 
# 2750
template< class _RealType> inline bool 
# 2752
operator!=(const chi_squared_distribution< _RealType>  &__d1, const chi_squared_distribution< _RealType>  &
# 2753
__d2) 
# 2754
{ return !(__d1 == __d2); } 
# 2763
template< class _RealType = double> 
# 2764
class cauchy_distribution { 
# 2766
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 2771
public: typedef _RealType result_type; 
# 2773
struct param_type { 
# 2775
typedef cauchy_distribution distribution_type; 
# 2778
explicit param_type(_RealType __a = (_RealType)0, _RealType 
# 2779
__b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 2781
{ } 
# 2784
_RealType a() const 
# 2785
{ return _M_a; } 
# 2788
_RealType b() const 
# 2789
{ return _M_b; } 
# 2792
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2793
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 2796
private: _RealType _M_a; 
# 2797
_RealType _M_b; 
# 2798
}; 
# 2801
explicit cauchy_distribution(_RealType __a = (_RealType)0, _RealType 
# 2802
__b = (_RealType)1) : _M_param(__a, __b) 
# 2804
{ } 
# 2807
explicit cauchy_distribution(const param_type &__p) : _M_param(__p) 
# 2809
{ } 
# 2815
void reset() 
# 2816
{ } 
# 2822
_RealType a() const 
# 2823
{ return ((_M_param).a()); } 
# 2826
_RealType b() const 
# 2827
{ return ((_M_param).b()); } 
# 2833
param_type param() const 
# 2834
{ return _M_param; } 
# 2841
void param(const param_type &__param) 
# 2842
{ (_M_param) = __param; } 
# 2848
result_type min() const 
# 2849
{ return std::numeric_limits< _RealType> ::lowest(); } 
# 2855
result_type max() const 
# 2856
{ return std::numeric_limits< _RealType> ::max(); } 
# 2861
template< class _UniformRandomNumberGenerator> result_type 
# 2863
operator()(_UniformRandomNumberGenerator &__urng) 
# 2864
{ return (this->operator()(__urng, _M_param)); } 
# 2866
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2871
template< class _ForwardIterator, class 
# 2872
_UniformRandomNumberGenerator> void 
# 2874
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2875
__urng) 
# 2876
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 2878
template< class _ForwardIterator, class 
# 2879
_UniformRandomNumberGenerator> void 
# 2881
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2882
__urng, const param_type &
# 2883
__p) 
# 2884
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 2886
template< class _UniformRandomNumberGenerator> void 
# 2888
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2889
__urng, const param_type &
# 2890
__p) 
# 2891
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 2898
friend inline bool operator==(const cauchy_distribution &__d1, const cauchy_distribution &
# 2899
__d2) 
# 2900
{ return (__d1._M_param) == (__d2._M_param); } 
# 2903
private: template< class _ForwardIterator, class 
# 2904
_UniformRandomNumberGenerator> void 
# 2903
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2910
param_type _M_param; 
# 2911
}; 
# 2917
template< class _RealType> inline bool 
# 2919
operator!=(const cauchy_distribution< _RealType>  &__d1, const cauchy_distribution< _RealType>  &
# 2920
__d2) 
# 2921
{ return !(__d1 == __d2); } 
# 2933
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const cauchy_distribution< _RealType>  & __x); 
# 2948
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, cauchy_distribution< _RealType>  & __x); 
# 2964
template< class _RealType = double> 
# 2965
class fisher_f_distribution { 
# 2967
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 2972
public: typedef _RealType result_type; 
# 2974
struct param_type { 
# 2976
typedef fisher_f_distribution distribution_type; 
# 2979
explicit param_type(_RealType __m = (_RealType)1, _RealType 
# 2980
__n = (_RealType)1) : _M_m(__m), _M_n(__n) 
# 2982
{ } 
# 2985
_RealType m() const 
# 2986
{ return _M_m; } 
# 2989
_RealType n() const 
# 2990
{ return _M_n; } 
# 2993
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2994
{ return ((__p1._M_m) == (__p2._M_m)) && ((__p1._M_n) == (__p2._M_n)); } 
# 2997
private: _RealType _M_m; 
# 2998
_RealType _M_n; 
# 2999
}; 
# 3002
explicit fisher_f_distribution(_RealType __m = (_RealType)1, _RealType 
# 3003
__n = (_RealType)1) : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2) 
# 3005
{ } 
# 3008
explicit fisher_f_distribution(const param_type &__p) : _M_param(__p), _M_gd_x((__p.m()) / 2), _M_gd_y((__p.n()) / 2) 
# 3010
{ } 
# 3016
void reset() 
# 3017
{ 
# 3018
((_M_gd_x).reset()); 
# 3019
((_M_gd_y).reset()); 
# 3020
} 
# 3026
_RealType m() const 
# 3027
{ return ((_M_param).m()); } 
# 3030
_RealType n() const 
# 3031
{ return ((_M_param).n()); } 
# 3037
param_type param() const 
# 3038
{ return _M_param; } 
# 3045
void param(const param_type &__param) 
# 3046
{ (_M_param) = __param; } 
# 3052
result_type min() const 
# 3053
{ return (result_type)0; } 
# 3059
result_type max() const 
# 3060
{ return std::numeric_limits< _RealType> ::max(); } 
# 3065
template< class _UniformRandomNumberGenerator> result_type 
# 3067
operator()(_UniformRandomNumberGenerator &__urng) 
# 3068
{ return ((_M_gd_x)(__urng) * n()) / ((_M_gd_y)(__urng) * m()); } 
# 3070
template< class _UniformRandomNumberGenerator> result_type 
# 3072
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3073
__p) 
# 3074
{ 
# 3076
typedef typename gamma_distribution< _RealType> ::param_type param_type; 
# 3077
return ((_M_gd_x)(__urng, (param_type)((__p.m()) / 2)) * n()) / ((_M_gd_y)(__urng, (param_type)((__p.n()) / 2)) * m()); 
# 3079
} 
# 3081
template< class _ForwardIterator, class 
# 3082
_UniformRandomNumberGenerator> void 
# 3084
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3085
__urng) 
# 3086
{ (this->__generate_impl(__f, __t, __urng)); } 
# 3088
template< class _ForwardIterator, class 
# 3089
_UniformRandomNumberGenerator> void 
# 3091
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3092
__urng, const param_type &
# 3093
__p) 
# 3094
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3096
template< class _UniformRandomNumberGenerator> void 
# 3098
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3099
__urng) 
# 3100
{ (this->__generate_impl(__f, __t, __urng)); } 
# 3102
template< class _UniformRandomNumberGenerator> void 
# 3104
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3105
__urng, const param_type &
# 3106
__p) 
# 3107
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3115
friend inline bool operator==(const fisher_f_distribution &__d1, const fisher_f_distribution &
# 3116
__d2) 
# 3117
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_gd_x) == (__d2._M_gd_x)) && ((__d1._M_gd_y) == (__d2._M_gd_y)); 
# 3119
} 
# 3131
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::fisher_f_distribution< _RealType1>  & __x); 
# 3146
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::fisher_f_distribution< _RealType1>  & __x); 
# 3152
private: template< class _ForwardIterator, class 
# 3153
_UniformRandomNumberGenerator> void 
# 3152
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 3158
template< class _ForwardIterator, class 
# 3159
_UniformRandomNumberGenerator> void 
# 3158
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3165
param_type _M_param; 
# 3167
gamma_distribution< _RealType>  _M_gd_x, _M_gd_y; 
# 3168
}; 
# 3173
template< class _RealType> inline bool 
# 3175
operator!=(const fisher_f_distribution< _RealType>  &__d1, const fisher_f_distribution< _RealType>  &
# 3176
__d2) 
# 3177
{ return !(__d1 == __d2); } 
# 3188
template< class _RealType = double> 
# 3189
class student_t_distribution { 
# 3191
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 3196
public: typedef _RealType result_type; 
# 3198
struct param_type { 
# 3200
typedef student_t_distribution distribution_type; 
# 3203
explicit param_type(_RealType __n = (_RealType)1) : _M_n(__n) 
# 3205
{ } 
# 3208
_RealType n() const 
# 3209
{ return _M_n; } 
# 3212
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3213
{ return (__p1._M_n) == (__p2._M_n); } 
# 3216
private: _RealType _M_n; 
# 3217
}; 
# 3220
explicit student_t_distribution(_RealType __n = (_RealType)1) : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2) 
# 3222
{ } 
# 3225
explicit student_t_distribution(const param_type &__p) : _M_param(__p), _M_nd(), _M_gd((__p.n()) / 2, 2) 
# 3227
{ } 
# 3233
void reset() 
# 3234
{ 
# 3235
((_M_nd).reset()); 
# 3236
((_M_gd).reset()); 
# 3237
} 
# 3243
_RealType n() const 
# 3244
{ return ((_M_param).n()); } 
# 3250
param_type param() const 
# 3251
{ return _M_param; } 
# 3258
void param(const param_type &__param) 
# 3259
{ (_M_param) = __param; } 
# 3265
result_type min() const 
# 3266
{ return std::numeric_limits< _RealType> ::lowest(); } 
# 3272
result_type max() const 
# 3273
{ return std::numeric_limits< _RealType> ::max(); } 
# 3278
template< class _UniformRandomNumberGenerator> result_type 
# 3280
operator()(_UniformRandomNumberGenerator &__urng) 
# 3281
{ return (_M_nd)(__urng) * std::sqrt(n() / (_M_gd)(__urng)); } 
# 3283
template< class _UniformRandomNumberGenerator> result_type 
# 3285
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3286
__p) 
# 3287
{ 
# 3289
typedef typename gamma_distribution< _RealType> ::param_type param_type; 
# 3291
const result_type __g = (_M_gd)(__urng, param_type((__p.n()) / 2, 2)); 
# 3292
return (_M_nd)(__urng) * std::sqrt((__p.n()) / __g); 
# 3293
} 
# 3295
template< class _ForwardIterator, class 
# 3296
_UniformRandomNumberGenerator> void 
# 3298
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3299
__urng) 
# 3300
{ (this->__generate_impl(__f, __t, __urng)); } 
# 3302
template< class _ForwardIterator, class 
# 3303
_UniformRandomNumberGenerator> void 
# 3305
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3306
__urng, const param_type &
# 3307
__p) 
# 3308
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3310
template< class _UniformRandomNumberGenerator> void 
# 3312
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3313
__urng) 
# 3314
{ (this->__generate_impl(__f, __t, __urng)); } 
# 3316
template< class _UniformRandomNumberGenerator> void 
# 3318
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3319
__urng, const param_type &
# 3320
__p) 
# 3321
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3329
friend inline bool operator==(const student_t_distribution &__d1, const student_t_distribution &
# 3330
__d2) 
# 3331
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)) && ((__d1._M_gd) == (__d2._M_gd)); 
# 3332
} 
# 3344
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::student_t_distribution< _RealType1>  & __x); 
# 3359
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::student_t_distribution< _RealType1>  & __x); 
# 3365
private: template< class _ForwardIterator, class 
# 3366
_UniformRandomNumberGenerator> void 
# 3365
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 3370
template< class _ForwardIterator, class 
# 3371
_UniformRandomNumberGenerator> void 
# 3370
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3377
param_type _M_param; 
# 3379
normal_distribution< _RealType>  _M_nd; 
# 3380
gamma_distribution< _RealType>  _M_gd; 
# 3381
}; 
# 3386
template< class _RealType> inline bool 
# 3388
operator!=(const student_t_distribution< _RealType>  &__d1, const student_t_distribution< _RealType>  &
# 3389
__d2) 
# 3390
{ return !(__d1 == __d2); } 
# 3407
class bernoulli_distribution { 
# 3411
public: typedef bool result_type; 
# 3413
struct param_type { 
# 3415
typedef bernoulli_distribution distribution_type; 
# 3418
explicit param_type(double __p = (0.5)) : _M_p(__p) 
# 3420
{ 
# 3421
; 
# 3422
} 
# 3425
double p() const 
# 3426
{ return _M_p; } 
# 3429
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3430
{ return (__p1._M_p) == (__p2._M_p); } 
# 3433
private: double _M_p; 
# 3434
}; 
# 3444
explicit bernoulli_distribution(double __p = (0.5)) : _M_param(__p) 
# 3446
{ } 
# 3449
explicit bernoulli_distribution(const param_type &__p) : _M_param(__p) 
# 3451
{ } 
# 3459
void reset() { } 
# 3465
double p() const 
# 3466
{ return (_M_param).p(); } 
# 3472
param_type param() const 
# 3473
{ return _M_param; } 
# 3480
void param(const param_type &__param) 
# 3481
{ (_M_param) = __param; } 
# 3487
result_type min() const 
# 3488
{ return std::numeric_limits< bool> ::min(); } 
# 3494
result_type max() const 
# 3495
{ return std::numeric_limits< bool> ::max(); } 
# 3500
template< class _UniformRandomNumberGenerator> result_type 
# 3502
operator()(_UniformRandomNumberGenerator &__urng) 
# 3503
{ return (this->operator()(__urng, _M_param)); } 
# 3505
template< class _UniformRandomNumberGenerator> result_type 
# 3507
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3508
__p) 
# 3509
{ 
# 3511
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 3512
if ((__aurng() - (__aurng.min())) < (__p.p() * ((__aurng.max()) - (__aurng.min())))) { 
# 3514
return true; }  
# 3515
return false; 
# 3516
} 
# 3518
template< class _ForwardIterator, class 
# 3519
_UniformRandomNumberGenerator> void 
# 3521
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3522
__urng) 
# 3523
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 3525
template< class _ForwardIterator, class 
# 3526
_UniformRandomNumberGenerator> void 
# 3528
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3529
__urng, const param_type &__p) 
# 3530
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3532
template< class _UniformRandomNumberGenerator> void 
# 3534
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3535
__urng, const param_type &
# 3536
__p) 
# 3537
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3544
friend inline bool operator==(const bernoulli_distribution &__d1, const bernoulli_distribution &
# 3545
__d2) 
# 3546
{ return ((__d1._M_param) == (__d2._M_param)); } 
# 3549
private: template< class _ForwardIterator, class 
# 3550
_UniformRandomNumberGenerator> void 
# 3549
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3556
param_type _M_param; 
# 3557
}; 
# 3564
inline bool operator!=(const bernoulli_distribution &__d1, const bernoulli_distribution &
# 3565
__d2) 
# 3566
{ return !((__d1 == __d2)); } 
# 3578
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const bernoulli_distribution & __x); 
# 3592
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 3594
operator>>(basic_istream< _CharT, _Traits>  &__is, bernoulli_distribution &
# 3595
__x) 
# 3596
{ 
# 3597
double __p; 
# 3598
__is >> __p; 
# 3599
__x.param(((bernoulli_distribution::param_type)(__p))); 
# 3600
return __is; 
# 3601
} 
# 3611
template< class _IntType = int> 
# 3612
class binomial_distribution { 
# 3614
static_assert((std::is_integral< _IntType> ::value), "template argument not an integral type");
# 3619
public: typedef _IntType result_type; 
# 3621
struct param_type { 
# 3623
typedef binomial_distribution distribution_type; 
# 3624
friend class binomial_distribution; 
# 3627
explicit param_type(_IntType __t = (_IntType)1, double __p = (0.5)) : _M_t(__t), _M_p(__p) 
# 3629
{ 
# 3632
; 
# 3633
_M_initialize(); 
# 3634
} 
# 3637
_IntType t() const 
# 3638
{ return _M_t; } 
# 3641
double p() const 
# 3642
{ return _M_p; } 
# 3645
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3646
{ return ((__p1._M_t) == (__p2._M_t)) && ((__p1._M_p) == (__p2._M_p)); } 
# 3650
private: void _M_initialize(); 
# 3652
_IntType _M_t; 
# 3653
double _M_p; 
# 3655
double _M_q; 
# 3657
double _M_d1, _M_d2, _M_s1, _M_s2, _M_c, 
# 3658
_M_a1, _M_a123, _M_s, _M_lf, _M_lp1p; 
# 3660
bool _M_easy; 
# 3661
}; 
# 3665
explicit binomial_distribution(_IntType __t = (_IntType)1, double 
# 3666
__p = (0.5)) : _M_param(__t, __p), _M_nd() 
# 3668
{ } 
# 3671
explicit binomial_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 3673
{ } 
# 3679
void reset() 
# 3680
{ (_M_nd).reset(); } 
# 3686
_IntType t() const 
# 3687
{ return ((_M_param).t()); } 
# 3693
double p() const 
# 3694
{ return ((_M_param).p()); } 
# 3700
param_type param() const 
# 3701
{ return _M_param; } 
# 3708
void param(const param_type &__param) 
# 3709
{ (_M_param) = __param; } 
# 3715
result_type min() const 
# 3716
{ return 0; } 
# 3722
result_type max() const 
# 3723
{ return ((_M_param).t()); } 
# 3728
template< class _UniformRandomNumberGenerator> result_type 
# 3730
operator()(_UniformRandomNumberGenerator &__urng) 
# 3731
{ return (this->operator()(__urng, _M_param)); } 
# 3733
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3738
template< class _ForwardIterator, class 
# 3739
_UniformRandomNumberGenerator> void 
# 3741
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3742
__urng) 
# 3743
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 3745
template< class _ForwardIterator, class 
# 3746
_UniformRandomNumberGenerator> void 
# 3748
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3749
__urng, const param_type &
# 3750
__p) 
# 3751
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3753
template< class _UniformRandomNumberGenerator> void 
# 3755
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3756
__urng, const param_type &
# 3757
__p) 
# 3758
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3766
friend inline bool operator==(const binomial_distribution &__d1, const binomial_distribution &
# 3767
__d2) 
# 3769
{ return ((__d1._M_param) == (__d2._M_param)) && (((__d1._M_nd) == (__d2._M_nd))); } 
# 3784
template< class _IntType1, class 
# 3785
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 3784
operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::binomial_distribution< _IntType1>  & __x); 
# 3800
template< class _IntType1, class 
# 3801
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 3800
operator>>(basic_istream< _CharT, _Traits>  & __is, std::binomial_distribution< _IntType1>  & __x); 
# 3807
private: template< class _ForwardIterator, class 
# 3808
_UniformRandomNumberGenerator> void 
# 3807
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3814
template< class _UniformRandomNumberGenerator> result_type _M_waiting(_UniformRandomNumberGenerator & __urng, _IntType __t, double __q); 
# 3819
param_type _M_param; 
# 3822
normal_distribution< double>  _M_nd; 
# 3823
}; 
# 3828
template< class _IntType> inline bool 
# 3830
operator!=(const binomial_distribution< _IntType>  &__d1, const binomial_distribution< _IntType>  &
# 3831
__d2) 
# 3832
{ return !(__d1 == __d2); } 
# 3842
template< class _IntType = int> 
# 3843
class geometric_distribution { 
# 3845
static_assert((std::is_integral< _IntType> ::value), "template argument not an integral type");
# 3850
public: typedef _IntType result_type; 
# 3852
struct param_type { 
# 3854
typedef geometric_distribution distribution_type; 
# 3855
friend class geometric_distribution; 
# 3858
explicit param_type(double __p = (0.5)) : _M_p(__p) 
# 3860
{ 
# 3861
; 
# 3862
_M_initialize(); 
# 3863
} 
# 3866
double p() const 
# 3867
{ return _M_p; } 
# 3870
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3871
{ return (__p1._M_p) == (__p2._M_p); } 
# 3875
private: void _M_initialize() 
# 3876
{ (_M_log_1_p) = std::log((1.0) - (_M_p)); } 
# 3878
double _M_p; 
# 3880
double _M_log_1_p; 
# 3881
}; 
# 3885
explicit geometric_distribution(double __p = (0.5)) : _M_param(__p) 
# 3887
{ } 
# 3890
explicit geometric_distribution(const param_type &__p) : _M_param(__p) 
# 3892
{ } 
# 3900
void reset() { } 
# 3906
double p() const 
# 3907
{ return ((_M_param).p()); } 
# 3913
param_type param() const 
# 3914
{ return _M_param; } 
# 3921
void param(const param_type &__param) 
# 3922
{ (_M_param) = __param; } 
# 3928
result_type min() const 
# 3929
{ return 0; } 
# 3935
result_type max() const 
# 3936
{ return std::numeric_limits< _IntType> ::max(); } 
# 3941
template< class _UniformRandomNumberGenerator> result_type 
# 3943
operator()(_UniformRandomNumberGenerator &__urng) 
# 3944
{ return (this->operator()(__urng, _M_param)); } 
# 3946
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3951
template< class _ForwardIterator, class 
# 3952
_UniformRandomNumberGenerator> void 
# 3954
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3955
__urng) 
# 3956
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 3958
template< class _ForwardIterator, class 
# 3959
_UniformRandomNumberGenerator> void 
# 3961
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3962
__urng, const param_type &
# 3963
__p) 
# 3964
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3966
template< class _UniformRandomNumberGenerator> void 
# 3968
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3969
__urng, const param_type &
# 3970
__p) 
# 3971
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 3978
friend inline bool operator==(const geometric_distribution &__d1, const geometric_distribution &
# 3979
__d2) 
# 3980
{ return (__d1._M_param) == (__d2._M_param); } 
# 3983
private: template< class _ForwardIterator, class 
# 3984
_UniformRandomNumberGenerator> void 
# 3983
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3990
param_type _M_param; 
# 3991
}; 
# 3997
template< class _IntType> inline bool 
# 3999
operator!=(const geometric_distribution< _IntType>  &__d1, const geometric_distribution< _IntType>  &
# 4000
__d2) 
# 4001
{ return !(__d1 == __d2); } 
# 4013
template< class _IntType, class 
# 4014
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 4013
operator<<(basic_ostream< _CharT, _Traits>  & __os, const geometric_distribution< _IntType>  & __x); 
# 4028
template< class _IntType, class 
# 4029
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 4028
operator>>(basic_istream< _CharT, _Traits>  & __is, geometric_distribution< _IntType>  & __x); 
# 4042
template< class _IntType = int> 
# 4043
class negative_binomial_distribution { 
# 4045
static_assert((std::is_integral< _IntType> ::value), "template argument not an integral type");
# 4050
public: typedef _IntType result_type; 
# 4052
struct param_type { 
# 4054
typedef negative_binomial_distribution distribution_type; 
# 4057
explicit param_type(_IntType __k = 1, double __p = (0.5)) : _M_k(__k), _M_p(__p) 
# 4059
{ 
# 4060
; 
# 4061
} 
# 4064
_IntType k() const 
# 4065
{ return _M_k; } 
# 4068
double p() const 
# 4069
{ return _M_p; } 
# 4072
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4073
{ return ((__p1._M_k) == (__p2._M_k)) && ((__p1._M_p) == (__p2._M_p)); } 
# 4076
private: _IntType _M_k; 
# 4077
double _M_p; 
# 4078
}; 
# 4081
explicit negative_binomial_distribution(_IntType __k = 1, double __p = (0.5)) : _M_param(__k, __p), _M_gd(__k, ((1.0) - __p) / __p) 
# 4083
{ } 
# 4086
explicit negative_binomial_distribution(const param_type &__p) : _M_param(__p), _M_gd((__p.k()), ((1.0) - (__p.p())) / (__p.p())) 
# 4088
{ } 
# 4094
void reset() 
# 4095
{ (_M_gd).reset(); } 
# 4101
_IntType k() const 
# 4102
{ return ((_M_param).k()); } 
# 4108
double p() const 
# 4109
{ return ((_M_param).p()); } 
# 4115
param_type param() const 
# 4116
{ return _M_param; } 
# 4123
void param(const param_type &__param) 
# 4124
{ (_M_param) = __param; } 
# 4130
result_type min() const 
# 4131
{ return (result_type)0; } 
# 4137
result_type max() const 
# 4138
{ return std::numeric_limits< _IntType> ::max(); } 
# 4143
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng); 
# 4147
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4152
template< class _ForwardIterator, class 
# 4153
_UniformRandomNumberGenerator> void 
# 4155
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4156
__urng) 
# 4157
{ (this->__generate_impl(__f, __t, __urng)); } 
# 4159
template< class _ForwardIterator, class 
# 4160
_UniformRandomNumberGenerator> void 
# 4162
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4163
__urng, const param_type &
# 4164
__p) 
# 4165
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 4167
template< class _UniformRandomNumberGenerator> void 
# 4169
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4170
__urng) 
# 4171
{ (this->__generate_impl(__f, __t, __urng)); } 
# 4173
template< class _UniformRandomNumberGenerator> void 
# 4175
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4176
__urng, const param_type &
# 4177
__p) 
# 4178
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 4186
friend inline bool operator==(const negative_binomial_distribution &__d1, const negative_binomial_distribution &
# 4187
__d2) 
# 4188
{ return ((__d1._M_param) == (__d2._M_param)) && (((__d1._M_gd) == (__d2._M_gd))); } 
# 4201
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::negative_binomial_distribution< _IntType1>  & __x); 
# 4216
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::negative_binomial_distribution< _IntType1>  & __x); 
# 4222
private: template< class _ForwardIterator, class 
# 4223
_UniformRandomNumberGenerator> void 
# 4222
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 4227
template< class _ForwardIterator, class 
# 4228
_UniformRandomNumberGenerator> void 
# 4227
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4234
param_type _M_param; 
# 4236
gamma_distribution< double>  _M_gd; 
# 4237
}; 
# 4242
template< class _IntType> inline bool 
# 4244
operator!=(const negative_binomial_distribution< _IntType>  &__d1, const negative_binomial_distribution< _IntType>  &
# 4245
__d2) 
# 4246
{ return !(__d1 == __d2); } 
# 4264
template< class _IntType = int> 
# 4265
class poisson_distribution { 
# 4267
static_assert((std::is_integral< _IntType> ::value), "template argument not an integral type");
# 4272
public: typedef _IntType result_type; 
# 4274
struct param_type { 
# 4276
typedef poisson_distribution distribution_type; 
# 4277
friend class poisson_distribution; 
# 4280
explicit param_type(double __mean = (1.0)) : _M_mean(__mean) 
# 4282
{ 
# 4283
; 
# 4284
_M_initialize(); 
# 4285
} 
# 4288
double mean() const 
# 4289
{ return _M_mean; } 
# 4292
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4293
{ return (__p1._M_mean) == (__p2._M_mean); } 
# 4298
private: void _M_initialize(); 
# 4300
double _M_mean; 
# 4302
double _M_lm_thr; 
# 4304
double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb; 
# 4306
}; 
# 4310
explicit poisson_distribution(double __mean = (1.0)) : _M_param(__mean), _M_nd() 
# 4312
{ } 
# 4315
explicit poisson_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 4317
{ } 
# 4323
void reset() 
# 4324
{ (_M_nd).reset(); } 
# 4330
double mean() const 
# 4331
{ return ((_M_param).mean()); } 
# 4337
param_type param() const 
# 4338
{ return _M_param; } 
# 4345
void param(const param_type &__param) 
# 4346
{ (_M_param) = __param; } 
# 4352
result_type min() const 
# 4353
{ return 0; } 
# 4359
result_type max() const 
# 4360
{ return std::numeric_limits< _IntType> ::max(); } 
# 4365
template< class _UniformRandomNumberGenerator> result_type 
# 4367
operator()(_UniformRandomNumberGenerator &__urng) 
# 4368
{ return (this->operator()(__urng, _M_param)); } 
# 4370
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4375
template< class _ForwardIterator, class 
# 4376
_UniformRandomNumberGenerator> void 
# 4378
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4379
__urng) 
# 4380
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 4382
template< class _ForwardIterator, class 
# 4383
_UniformRandomNumberGenerator> void 
# 4385
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4386
__urng, const param_type &
# 4387
__p) 
# 4388
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 4390
template< class _UniformRandomNumberGenerator> void 
# 4392
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4393
__urng, const param_type &
# 4394
__p) 
# 4395
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 4403
friend inline bool operator==(const poisson_distribution &__d1, const poisson_distribution &
# 4404
__d2) 
# 4406
{ return ((__d1._M_param) == (__d2._M_param)) && (((__d1._M_nd) == (__d2._M_nd))); } 
# 4421
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::poisson_distribution< _IntType1>  & __x); 
# 4436
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::poisson_distribution< _IntType1>  & __x); 
# 4442
private: template< class _ForwardIterator, class 
# 4443
_UniformRandomNumberGenerator> void 
# 4442
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4449
param_type _M_param; 
# 4452
normal_distribution< double>  _M_nd; 
# 4453
}; 
# 4458
template< class _IntType> inline bool 
# 4460
operator!=(const poisson_distribution< _IntType>  &__d1, const poisson_distribution< _IntType>  &
# 4461
__d2) 
# 4462
{ return !(__d1 == __d2); } 
# 4480
template< class _RealType = double> 
# 4481
class exponential_distribution { 
# 4483
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 4488
public: typedef _RealType result_type; 
# 4490
struct param_type { 
# 4492
typedef exponential_distribution distribution_type; 
# 4495
explicit param_type(_RealType __lambda = (_RealType)1) : _M_lambda(__lambda) 
# 4497
{ 
# 4498
; 
# 4499
} 
# 4502
_RealType lambda() const 
# 4503
{ return _M_lambda; } 
# 4506
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4507
{ return (__p1._M_lambda) == (__p2._M_lambda); } 
# 4510
private: _RealType _M_lambda; 
# 4511
}; 
# 4519
explicit exponential_distribution(const result_type &__lambda = (result_type)1) : _M_param(__lambda) 
# 4521
{ } 
# 4524
explicit exponential_distribution(const param_type &__p) : _M_param(__p) 
# 4526
{ } 
# 4534
void reset() { } 
# 4540
_RealType lambda() const 
# 4541
{ return ((_M_param).lambda()); } 
# 4547
param_type param() const 
# 4548
{ return _M_param; } 
# 4555
void param(const param_type &__param) 
# 4556
{ (_M_param) = __param; } 
# 4562
result_type min() const 
# 4563
{ return (result_type)0; } 
# 4569
result_type max() const 
# 4570
{ return std::numeric_limits< _RealType> ::max(); } 
# 4575
template< class _UniformRandomNumberGenerator> result_type 
# 4577
operator()(_UniformRandomNumberGenerator &__urng) 
# 4578
{ return (this->operator()(__urng, _M_param)); } 
# 4580
template< class _UniformRandomNumberGenerator> result_type 
# 4582
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 4583
__p) 
# 4584
{ 
# 4586
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 4587
return (-std::log(((result_type)1) - __aurng())) / (__p.lambda()); 
# 4588
} 
# 4590
template< class _ForwardIterator, class 
# 4591
_UniformRandomNumberGenerator> void 
# 4593
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4594
__urng) 
# 4595
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 4597
template< class _ForwardIterator, class 
# 4598
_UniformRandomNumberGenerator> void 
# 4600
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4601
__urng, const param_type &
# 4602
__p) 
# 4603
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 4605
template< class _UniformRandomNumberGenerator> void 
# 4607
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4608
__urng, const param_type &
# 4609
__p) 
# 4610
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 4617
friend inline bool operator==(const exponential_distribution &__d1, const exponential_distribution &
# 4618
__d2) 
# 4619
{ return (__d1._M_param) == (__d2._M_param); } 
# 4622
private: template< class _ForwardIterator, class 
# 4623
_UniformRandomNumberGenerator> void 
# 4622
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4629
param_type _M_param; 
# 4630
}; 
# 4636
template< class _RealType> inline bool 
# 4638
operator!=(const exponential_distribution< _RealType>  &__d1, const exponential_distribution< _RealType>  &
# 4639
__d2) 
# 4640
{ return !(__d1 == __d2); } 
# 4652
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const exponential_distribution< _RealType>  & __x); 
# 4667
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, exponential_distribution< _RealType>  & __x); 
# 4682
template< class _RealType = double> 
# 4683
class weibull_distribution { 
# 4685
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 4690
public: typedef _RealType result_type; 
# 4692
struct param_type { 
# 4694
typedef weibull_distribution distribution_type; 
# 4697
explicit param_type(_RealType __a = (_RealType)1, _RealType 
# 4698
__b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 4700
{ } 
# 4703
_RealType a() const 
# 4704
{ return _M_a; } 
# 4707
_RealType b() const 
# 4708
{ return _M_b; } 
# 4711
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4712
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 4715
private: _RealType _M_a; 
# 4716
_RealType _M_b; 
# 4717
}; 
# 4720
explicit weibull_distribution(_RealType __a = (_RealType)1, _RealType 
# 4721
__b = (_RealType)1) : _M_param(__a, __b) 
# 4723
{ } 
# 4726
explicit weibull_distribution(const param_type &__p) : _M_param(__p) 
# 4728
{ } 
# 4734
void reset() 
# 4735
{ } 
# 4741
_RealType a() const 
# 4742
{ return ((_M_param).a()); } 
# 4748
_RealType b() const 
# 4749
{ return ((_M_param).b()); } 
# 4755
param_type param() const 
# 4756
{ return _M_param; } 
# 4763
void param(const param_type &__param) 
# 4764
{ (_M_param) = __param; } 
# 4770
result_type min() const 
# 4771
{ return (result_type)0; } 
# 4777
result_type max() const 
# 4778
{ return std::numeric_limits< _RealType> ::max(); } 
# 4783
template< class _UniformRandomNumberGenerator> result_type 
# 4785
operator()(_UniformRandomNumberGenerator &__urng) 
# 4786
{ return (this->operator()(__urng, _M_param)); } 
# 4788
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4793
template< class _ForwardIterator, class 
# 4794
_UniformRandomNumberGenerator> void 
# 4796
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4797
__urng) 
# 4798
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 4800
template< class _ForwardIterator, class 
# 4801
_UniformRandomNumberGenerator> void 
# 4803
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4804
__urng, const param_type &
# 4805
__p) 
# 4806
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 4808
template< class _UniformRandomNumberGenerator> void 
# 4810
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4811
__urng, const param_type &
# 4812
__p) 
# 4813
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 4820
friend inline bool operator==(const weibull_distribution &__d1, const weibull_distribution &
# 4821
__d2) 
# 4822
{ return (__d1._M_param) == (__d2._M_param); } 
# 4825
private: template< class _ForwardIterator, class 
# 4826
_UniformRandomNumberGenerator> void 
# 4825
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4832
param_type _M_param; 
# 4833
}; 
# 4839
template< class _RealType> inline bool 
# 4841
operator!=(const weibull_distribution< _RealType>  &__d1, const weibull_distribution< _RealType>  &
# 4842
__d2) 
# 4843
{ return !(__d1 == __d2); } 
# 4855
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const weibull_distribution< _RealType>  & __x); 
# 4870
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, weibull_distribution< _RealType>  & __x); 
# 4885
template< class _RealType = double> 
# 4886
class extreme_value_distribution { 
# 4888
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 4893
public: typedef _RealType result_type; 
# 4895
struct param_type { 
# 4897
typedef extreme_value_distribution distribution_type; 
# 4900
explicit param_type(_RealType __a = (_RealType)0, _RealType 
# 4901
__b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 4903
{ } 
# 4906
_RealType a() const 
# 4907
{ return _M_a; } 
# 4910
_RealType b() const 
# 4911
{ return _M_b; } 
# 4914
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4915
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 4918
private: _RealType _M_a; 
# 4919
_RealType _M_b; 
# 4920
}; 
# 4923
explicit extreme_value_distribution(_RealType __a = (_RealType)0, _RealType 
# 4924
__b = (_RealType)1) : _M_param(__a, __b) 
# 4926
{ } 
# 4929
explicit extreme_value_distribution(const param_type &__p) : _M_param(__p) 
# 4931
{ } 
# 4937
void reset() 
# 4938
{ } 
# 4944
_RealType a() const 
# 4945
{ return ((_M_param).a()); } 
# 4951
_RealType b() const 
# 4952
{ return ((_M_param).b()); } 
# 4958
param_type param() const 
# 4959
{ return _M_param; } 
# 4966
void param(const param_type &__param) 
# 4967
{ (_M_param) = __param; } 
# 4973
result_type min() const 
# 4974
{ return std::numeric_limits< _RealType> ::lowest(); } 
# 4980
result_type max() const 
# 4981
{ return std::numeric_limits< _RealType> ::max(); } 
# 4986
template< class _UniformRandomNumberGenerator> result_type 
# 4988
operator()(_UniformRandomNumberGenerator &__urng) 
# 4989
{ return (this->operator()(__urng, _M_param)); } 
# 4991
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4996
template< class _ForwardIterator, class 
# 4997
_UniformRandomNumberGenerator> void 
# 4999
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5000
__urng) 
# 5001
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 5003
template< class _ForwardIterator, class 
# 5004
_UniformRandomNumberGenerator> void 
# 5006
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5007
__urng, const param_type &
# 5008
__p) 
# 5009
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 5011
template< class _UniformRandomNumberGenerator> void 
# 5013
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5014
__urng, const param_type &
# 5015
__p) 
# 5016
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 5023
friend inline bool operator==(const extreme_value_distribution &__d1, const extreme_value_distribution &
# 5024
__d2) 
# 5025
{ return (__d1._M_param) == (__d2._M_param); } 
# 5028
private: template< class _ForwardIterator, class 
# 5029
_UniformRandomNumberGenerator> void 
# 5028
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5035
param_type _M_param; 
# 5036
}; 
# 5042
template< class _RealType> inline bool 
# 5044
operator!=(const extreme_value_distribution< _RealType>  &__d1, const extreme_value_distribution< _RealType>  &
# 5045
__d2) 
# 5046
{ return !(__d1 == __d2); } 
# 5058
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const extreme_value_distribution< _RealType>  & __x); 
# 5073
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, extreme_value_distribution< _RealType>  & __x); 
# 5085
template< class _IntType = int> 
# 5086
class discrete_distribution { 
# 5088
static_assert((std::is_integral< _IntType> ::value), "template argument not an integral type");
# 5093
public: typedef _IntType result_type; 
# 5095
struct param_type { 
# 5097
typedef discrete_distribution distribution_type; 
# 5098
friend class discrete_distribution; 
# 5100
param_type() : _M_prob(), _M_cp() 
# 5102
{ } 
# 5104
template< class _InputIterator> 
# 5105
param_type(_InputIterator __wbegin, _InputIterator 
# 5106
__wend) : _M_prob(__wbegin, __wend), _M_cp() 
# 5108
{ _M_initialize(); } 
# 5110
param_type(initializer_list< double>  __wil) : _M_prob(__wil.begin(), __wil.end()), _M_cp() 
# 5112
{ _M_initialize(); } 
# 5114
template< class _Func> param_type(size_t __nw, double __xmin, double __xmax, _Func __fw); 
# 5119
param_type(const param_type &) = default;
# 5120
param_type &operator=(const param_type &) = default;
# 5123
vector< double>  probabilities() const 
# 5124
{ return ((_M_prob).empty() ? vector< double> (1, (1.0)) : _M_prob); } 
# 5127
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5128
{ return ((__p1._M_prob) == (__p2._M_prob)); } 
# 5132
private: void _M_initialize(); 
# 5134
vector< double>  _M_prob; 
# 5135
vector< double>  _M_cp; 
# 5136
}; 
# 5138
discrete_distribution() : _M_param() 
# 5140
{ } 
# 5142
template< class _InputIterator> 
# 5143
discrete_distribution(_InputIterator __wbegin, _InputIterator 
# 5144
__wend) : _M_param(__wbegin, __wend) 
# 5146
{ } 
# 5148
discrete_distribution(initializer_list< double>  __wl) : _M_param(__wl) 
# 5150
{ } 
# 5152
template< class _Func> 
# 5153
discrete_distribution(size_t __nw, double __xmin, double __xmax, _Func 
# 5154
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5156
{ } 
# 5159
explicit discrete_distribution(const param_type &__p) : _M_param(__p) 
# 5161
{ } 
# 5167
void reset() 
# 5168
{ } 
# 5174
vector< double>  probabilities() const 
# 5175
{ 
# 5176
return ((((_M_param)._M_prob).empty())) ? vector< double> (1, (1.0)) : ((_M_param)._M_prob); 
# 5178
} 
# 5184
param_type param() const 
# 5185
{ return _M_param; } 
# 5192
void param(const param_type &__param) 
# 5193
{ (_M_param) = __param; } 
# 5199
result_type min() const 
# 5200
{ return (result_type)0; } 
# 5206
result_type max() const 
# 5207
{ 
# 5208
return ((((_M_param)._M_prob).empty())) ? (result_type)0 : ((result_type)((((_M_param)._M_prob).size()) - 1)); 
# 5210
} 
# 5215
template< class _UniformRandomNumberGenerator> result_type 
# 5217
operator()(_UniformRandomNumberGenerator &__urng) 
# 5218
{ return (this->operator()(__urng, _M_param)); } 
# 5220
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5225
template< class _ForwardIterator, class 
# 5226
_UniformRandomNumberGenerator> void 
# 5228
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5229
__urng) 
# 5230
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 5232
template< class _ForwardIterator, class 
# 5233
_UniformRandomNumberGenerator> void 
# 5235
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5236
__urng, const param_type &
# 5237
__p) 
# 5238
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 5240
template< class _UniformRandomNumberGenerator> void 
# 5242
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5243
__urng, const param_type &
# 5244
__p) 
# 5245
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 5252
friend inline bool operator==(const discrete_distribution &__d1, const discrete_distribution &
# 5253
__d2) 
# 5254
{ return (__d1._M_param) == (__d2._M_param); } 
# 5266
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::discrete_distribution< _IntType1>  & __x); 
# 5282
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::discrete_distribution< _IntType1>  & __x); 
# 5288
private: template< class _ForwardIterator, class 
# 5289
_UniformRandomNumberGenerator> void 
# 5288
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5295
param_type _M_param; 
# 5296
}; 
# 5302
template< class _IntType> inline bool 
# 5304
operator!=(const discrete_distribution< _IntType>  &__d1, const discrete_distribution< _IntType>  &
# 5305
__d2) 
# 5306
{ return !(__d1 == __d2); } 
# 5315
template< class _RealType = double> 
# 5316
class piecewise_constant_distribution { 
# 5318
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 5323
public: typedef _RealType result_type; 
# 5325
struct param_type { 
# 5327
typedef piecewise_constant_distribution distribution_type; 
# 5328
friend class piecewise_constant_distribution; 
# 5330
param_type() : _M_int(), _M_den(), _M_cp() 
# 5332
{ } 
# 5334
template< class _InputIteratorB, class _InputIteratorW> param_type(_InputIteratorB __bfirst, _InputIteratorB __bend, _InputIteratorW __wbegin); 
# 5339
template< class _Func> param_type(initializer_list< _RealType>  __bi, _Func __fw); 
# 5342
template< class _Func> param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw); 
# 5347
param_type(const param_type &) = default;
# 5348
param_type &operator=(const param_type &) = default;
# 5351
vector< _RealType>  intervals() const 
# 5352
{ 
# 5353
if (((_M_int).empty())) 
# 5354
{ 
# 5355
vector< _RealType>  __tmp(2); 
# 5356
(__tmp[1]) = ((_RealType)1); 
# 5357
return __tmp; 
# 5358
} else { 
# 5360
return _M_int; }  
# 5361
} 
# 5364
vector< double>  densities() const 
# 5365
{ return ((_M_den).empty() ? vector< double> (1, (1.0)) : _M_den); } 
# 5368
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5369
{ return ((__p1._M_int) == (__p2._M_int)) && (((__p1._M_den) == (__p2._M_den))); } 
# 5373
private: void _M_initialize(); 
# 5375
vector< _RealType>  _M_int; 
# 5376
vector< double>  _M_den; 
# 5377
vector< double>  _M_cp; 
# 5378
}; 
# 5381
explicit piecewise_constant_distribution() : _M_param() 
# 5383
{ } 
# 5385
template< class _InputIteratorB, class _InputIteratorW> 
# 5386
piecewise_constant_distribution(_InputIteratorB __bfirst, _InputIteratorB 
# 5387
__bend, _InputIteratorW 
# 5388
__wbegin) : _M_param(__bfirst, __bend, __wbegin) 
# 5390
{ } 
# 5392
template< class _Func> 
# 5393
piecewise_constant_distribution(initializer_list< _RealType>  __bl, _Func 
# 5394
__fw) : _M_param(__bl, __fw) 
# 5396
{ } 
# 5398
template< class _Func> 
# 5399
piecewise_constant_distribution(size_t __nw, _RealType 
# 5400
__xmin, _RealType __xmax, _Func 
# 5401
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5403
{ } 
# 5406
explicit piecewise_constant_distribution(const param_type &__p) : _M_param(__p) 
# 5408
{ } 
# 5414
void reset() 
# 5415
{ } 
# 5421
vector< _RealType>  intervals() const 
# 5422
{ 
# 5423
if ((((_M_param)._M_int).empty())) 
# 5424
{ 
# 5425
vector< _RealType>  __tmp(2); 
# 5426
(__tmp[1]) = ((_RealType)1); 
# 5427
return __tmp; 
# 5428
} else { 
# 5430
return ((_M_param)._M_int); }  
# 5431
} 
# 5437
vector< double>  densities() const 
# 5438
{ 
# 5439
return ((((_M_param)._M_den).empty())) ? vector< double> (1, (1.0)) : ((_M_param)._M_den); 
# 5441
} 
# 5447
param_type param() const 
# 5448
{ return _M_param; } 
# 5455
void param(const param_type &__param) 
# 5456
{ (_M_param) = __param; } 
# 5462
result_type min() const 
# 5463
{ 
# 5464
return ((((_M_param)._M_int).empty())) ? (result_type)0 : (((_M_param)._M_int).front()); 
# 5466
} 
# 5472
result_type max() const 
# 5473
{ 
# 5474
return ((((_M_param)._M_int).empty())) ? (result_type)1 : (((_M_param)._M_int).back()); 
# 5476
} 
# 5481
template< class _UniformRandomNumberGenerator> result_type 
# 5483
operator()(_UniformRandomNumberGenerator &__urng) 
# 5484
{ return (this->operator()(__urng, _M_param)); } 
# 5486
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5491
template< class _ForwardIterator, class 
# 5492
_UniformRandomNumberGenerator> void 
# 5494
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5495
__urng) 
# 5496
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 5498
template< class _ForwardIterator, class 
# 5499
_UniformRandomNumberGenerator> void 
# 5501
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5502
__urng, const param_type &
# 5503
__p) 
# 5504
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 5506
template< class _UniformRandomNumberGenerator> void 
# 5508
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5509
__urng, const param_type &
# 5510
__p) 
# 5511
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 5518
friend inline bool operator==(const piecewise_constant_distribution &__d1, const piecewise_constant_distribution &
# 5519
__d2) 
# 5520
{ return (__d1._M_param) == (__d2._M_param); } 
# 5533
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::piecewise_constant_distribution< _RealType1>  & __x); 
# 5549
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::piecewise_constant_distribution< _RealType1>  & __x); 
# 5555
private: template< class _ForwardIterator, class 
# 5556
_UniformRandomNumberGenerator> void 
# 5555
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5562
param_type _M_param; 
# 5563
}; 
# 5569
template< class _RealType> inline bool 
# 5571
operator!=(const piecewise_constant_distribution< _RealType>  &__d1, const piecewise_constant_distribution< _RealType>  &
# 5572
__d2) 
# 5573
{ return !(__d1 == __d2); } 
# 5582
template< class _RealType = double> 
# 5583
class piecewise_linear_distribution { 
# 5585
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 5590
public: typedef _RealType result_type; 
# 5592
struct param_type { 
# 5594
typedef piecewise_linear_distribution distribution_type; 
# 5595
friend class piecewise_linear_distribution; 
# 5597
param_type() : _M_int(), _M_den(), _M_cp(), _M_m() 
# 5599
{ } 
# 5601
template< class _InputIteratorB, class _InputIteratorW> param_type(_InputIteratorB __bfirst, _InputIteratorB __bend, _InputIteratorW __wbegin); 
# 5606
template< class _Func> param_type(initializer_list< _RealType>  __bl, _Func __fw); 
# 5609
template< class _Func> param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw); 
# 5614
param_type(const param_type &) = default;
# 5615
param_type &operator=(const param_type &) = default;
# 5618
vector< _RealType>  intervals() const 
# 5619
{ 
# 5620
if (((_M_int).empty())) 
# 5621
{ 
# 5622
vector< _RealType>  __tmp(2); 
# 5623
(__tmp[1]) = ((_RealType)1); 
# 5624
return __tmp; 
# 5625
} else { 
# 5627
return _M_int; }  
# 5628
} 
# 5631
vector< double>  densities() const 
# 5632
{ return ((_M_den).empty() ? vector< double> (2, (1.0)) : _M_den); } 
# 5635
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5636
{ return ((__p1._M_int) == (__p2._M_int)) && (((__p1._M_den) == (__p2._M_den))); 
# 5637
} 
# 5641
private: void _M_initialize(); 
# 5643
vector< _RealType>  _M_int; 
# 5644
vector< double>  _M_den; 
# 5645
vector< double>  _M_cp; 
# 5646
vector< double>  _M_m; 
# 5647
}; 
# 5650
explicit piecewise_linear_distribution() : _M_param() 
# 5652
{ } 
# 5654
template< class _InputIteratorB, class _InputIteratorW> 
# 5655
piecewise_linear_distribution(_InputIteratorB __bfirst, _InputIteratorB 
# 5656
__bend, _InputIteratorW 
# 5657
__wbegin) : _M_param(__bfirst, __bend, __wbegin) 
# 5659
{ } 
# 5661
template< class _Func> 
# 5662
piecewise_linear_distribution(initializer_list< _RealType>  __bl, _Func 
# 5663
__fw) : _M_param(__bl, __fw) 
# 5665
{ } 
# 5667
template< class _Func> 
# 5668
piecewise_linear_distribution(size_t __nw, _RealType 
# 5669
__xmin, _RealType __xmax, _Func 
# 5670
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5672
{ } 
# 5675
explicit piecewise_linear_distribution(const param_type &__p) : _M_param(__p) 
# 5677
{ } 
# 5683
void reset() 
# 5684
{ } 
# 5690
vector< _RealType>  intervals() const 
# 5691
{ 
# 5692
if ((((_M_param)._M_int).empty())) 
# 5693
{ 
# 5694
vector< _RealType>  __tmp(2); 
# 5695
(__tmp[1]) = ((_RealType)1); 
# 5696
return __tmp; 
# 5697
} else { 
# 5699
return ((_M_param)._M_int); }  
# 5700
} 
# 5707
vector< double>  densities() const 
# 5708
{ 
# 5709
return ((((_M_param)._M_den).empty())) ? vector< double> (2, (1.0)) : ((_M_param)._M_den); 
# 5711
} 
# 5717
param_type param() const 
# 5718
{ return _M_param; } 
# 5725
void param(const param_type &__param) 
# 5726
{ (_M_param) = __param; } 
# 5732
result_type min() const 
# 5733
{ 
# 5734
return ((((_M_param)._M_int).empty())) ? (result_type)0 : (((_M_param)._M_int).front()); 
# 5736
} 
# 5742
result_type max() const 
# 5743
{ 
# 5744
return ((((_M_param)._M_int).empty())) ? (result_type)1 : (((_M_param)._M_int).back()); 
# 5746
} 
# 5751
template< class _UniformRandomNumberGenerator> result_type 
# 5753
operator()(_UniformRandomNumberGenerator &__urng) 
# 5754
{ return (this->operator()(__urng, _M_param)); } 
# 5756
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5761
template< class _ForwardIterator, class 
# 5762
_UniformRandomNumberGenerator> void 
# 5764
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5765
__urng) 
# 5766
{ (this->__generate(__f, __t, __urng, _M_param)); } 
# 5768
template< class _ForwardIterator, class 
# 5769
_UniformRandomNumberGenerator> void 
# 5771
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5772
__urng, const param_type &
# 5773
__p) 
# 5774
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 5776
template< class _UniformRandomNumberGenerator> void 
# 5778
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5779
__urng, const param_type &
# 5780
__p) 
# 5781
{ (this->__generate_impl(__f, __t, __urng, __p)); } 
# 5788
friend inline bool operator==(const piecewise_linear_distribution &__d1, const piecewise_linear_distribution &
# 5789
__d2) 
# 5790
{ return (__d1._M_param) == (__d2._M_param); } 
# 5803
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const std::piecewise_linear_distribution< _RealType1>  & __x); 
# 5819
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, std::piecewise_linear_distribution< _RealType1>  & __x); 
# 5825
private: template< class _ForwardIterator, class 
# 5826
_UniformRandomNumberGenerator> void 
# 5825
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5832
param_type _M_param; 
# 5833
}; 
# 5839
template< class _RealType> inline bool 
# 5841
operator!=(const piecewise_linear_distribution< _RealType>  &__d1, const piecewise_linear_distribution< _RealType>  &
# 5842
__d2) 
# 5843
{ return !(__d1 == __d2); } 
# 5860
class seed_seq { 
# 5865
public: typedef uint_least32_t result_type; 
# 5868
seed_seq() : _M_v() 
# 5870
{ } 
# 5872
template< class _IntType> seed_seq(initializer_list< _IntType>  il); 
# 5875
template< class _InputIterator> seed_seq(_InputIterator __begin, _InputIterator __end); 
# 5879
template< class _RandomAccessIterator> void generate(_RandomAccessIterator __begin, _RandomAccessIterator __end); 
# 5884
size_t size() const 
# 5885
{ return (_M_v).size(); } 
# 5887
template< class OutputIterator> void 
# 5889
param(OutputIterator __dest) const 
# 5890
{ std::copy((_M_v).begin(), (_M_v).end(), __dest); } 
# 5894
private: vector< unsigned>  _M_v; 
# 5895
}; 
# 5902
}
# 30 "/usr/lib/gcc/x86_64-linux-gnu/5/include/ia32intrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 31
__bsfd(int __X) 
# 32
{ 
# 33
return __builtin_ctz(__X); 
# 34
} 
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 39
__bsrd(int __X) 
# 40
{ 
# 41
return __builtin_ia32_bsrsi(__X); 
# 42
} 
# 46
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 47
__bswapd(int __X) 
# 48
{ 
# 49
return __builtin_bswap32(__X); 
# 50
} 
# 53
#pragma GCC push_options
#pragma GCC target ( "sse4.2" )
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 61
__crc32b(unsigned __C, unsigned char __V) 
# 62
{ 
# 63
return __builtin_ia32_crc32qi(__C, __V); 
# 64
} 
# 67
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 68
__crc32w(unsigned __C, unsigned short __V) 
# 69
{ 
# 70
return __builtin_ia32_crc32hi(__C, __V); 
# 71
} 
# 74
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 75
__crc32d(unsigned __C, unsigned __V) 
# 76
{ 
# 77
return __builtin_ia32_crc32si(__C, __V); 
# 78
} 
# 82
#pragma GCC pop_options
# 87
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 88
__popcntd(unsigned __X) 
# 89
{ 
# 90
return __builtin_popcount(__X); 
# 91
} 
# 95
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 96
__rdpmc(int __S) 
# 97
{ 
# 98
return __builtin_ia32_rdpmc(__S); 
# 99
} 
# 103
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 104
__rdtsc() 
# 105
{ 
# 106
return __builtin_ia32_rdtsc(); 
# 107
} 
# 111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 112
__rdtscp(unsigned *__A) 
# 113
{ 
# 114
return __builtin_ia32_rdtscp(__A); 
# 115
} 
# 119
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 120
__rolb(unsigned char __X, int __C) 
# 121
{ 
# 122
return __builtin_ia32_rolqi(__X, __C); 
# 123
} 
# 127
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned short 
# 128
__rolw(unsigned short __X, int __C) 
# 129
{ 
# 130
return __builtin_ia32_rolhi(__X, __C); 
# 131
} 
# 135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 136
__rold(unsigned __X, int __C) 
# 137
{ 
# 138
return (__X << __C) | (__X >> (32 - __C)); 
# 139
} 
# 143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 144
__rorb(unsigned char __X, int __C) 
# 145
{ 
# 146
return __builtin_ia32_rorqi(__X, __C); 
# 147
} 
# 151
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned short 
# 152
__rorw(unsigned short __X, int __C) 
# 153
{ 
# 154
return __builtin_ia32_rorhi(__X, __C); 
# 155
} 
# 159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 160
__rord(unsigned __X, int __C) 
# 161
{ 
# 162
return (__X >> __C) | (__X << (32 - __C)); 
# 163
} 
# 167
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 168
__pause() 
# 169
{ 
# 170
__builtin_ia32_pause(); 
# 171
} 
# 176
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 177
__bsfq(long long __X) 
# 178
{ 
# 179
return __builtin_ctzll(__X); 
# 180
} 
# 184
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 185
__bsrq(long long __X) 
# 186
{ 
# 187
return __builtin_ia32_bsrdi(__X); 
# 188
} 
# 192
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 193
__bswapq(long long __X) 
# 194
{ 
# 195
return __builtin_bswap64(__X); 
# 196
} 
# 199
#pragma GCC push_options
#pragma GCC target ( "sse4.2" )
# 206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 207
__crc32q(unsigned long long __C, unsigned long long __V) 
# 208
{ 
# 209
return __builtin_ia32_crc32di(__C, __V); 
# 210
} 
# 214
#pragma GCC pop_options
# 219
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 220
__popcntq(unsigned long long __X) 
# 221
{ 
# 222
return __builtin_popcountll(__X); 
# 223
} 
# 227
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 228
__rolq(unsigned long long __X, int __C) 
# 229
{ 
# 230
return (__X << __C) | (__X >> (64 - __C)); 
# 231
} 
# 235
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 236
__rorq(unsigned long long __X, int __C) 
# 237
{ 
# 238
return (__X >> __C) | (__X << (64 - __C)); 
# 239
} 
# 243
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 244
__readeflags() 
# 245
{ 
# 246
return __builtin_ia32_readeflags_u64(); 
# 247
} 
# 251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 252
__writeeflags(unsigned long long X) 
# 253
{ 
# 254
__builtin_ia32_writeeflags_u64(X); 
# 255
} 
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5/include/mmintrin.h" 3
typedef int __m64 __attribute((__vector_size__(8), __may_alias__)); 
# 41
typedef int __v2si __attribute((__vector_size__(8))); 
# 42
typedef short __v4hi __attribute((__vector_size__(8))); 
# 43
typedef char __v8qi __attribute((__vector_size__(8))); 
# 44
typedef long long __v1di __attribute((__vector_size__(8))); 
# 45
typedef float __v2sf __attribute((__vector_size__(8))); 
# 48
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 49
_mm_empty() 
# 50
{ 
# 51
__builtin_ia32_emms(); 
# 52
} 
# 54
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 55
_m_empty() 
# 56
{ 
# 57
_mm_empty(); 
# 58
} 
# 61
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 62
_mm_cvtsi32_si64(int __i) 
# 63
{ 
# 64
return (__m64)__builtin_ia32_vec_init_v2si(__i, 0); 
# 65
} 
# 67
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 68
_m_from_int(int __i) 
# 69
{ 
# 70
return _mm_cvtsi32_si64(__i); 
# 71
} 
# 77
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 78
_m_from_int64(long long __i) 
# 79
{ 
# 80
return (__m64)__i; 
# 81
} 
# 83
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 84
_mm_cvtsi64_m64(long long __i) 
# 85
{ 
# 86
return (__m64)__i; 
# 87
} 
# 90
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 91
_mm_cvtsi64x_si64(long long __i) 
# 92
{ 
# 93
return (__m64)__i; 
# 94
} 
# 96
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 97
_mm_set_pi64x(long long __i) 
# 98
{ 
# 99
return (__m64)__i; 
# 100
} 
# 104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 105
_mm_cvtsi64_si32(__m64 __i) 
# 106
{ 
# 107
return __builtin_ia32_vec_ext_v2si((__v2si)__i, 0); 
# 108
} 
# 110
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 111
_m_to_int(__m64 __i) 
# 112
{ 
# 113
return _mm_cvtsi64_si32(__i); 
# 114
} 
# 120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 121
_m_to_int64(__m64 __i) 
# 122
{ 
# 123
return (long long)__i; 
# 124
} 
# 126
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 127
_mm_cvtm64_si64(__m64 __i) 
# 128
{ 
# 129
return (long long)__i; 
# 130
} 
# 133
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 134
_mm_cvtsi64_si64x(__m64 __i) 
# 135
{ 
# 136
return (long long)__i; 
# 137
} 
# 143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 144
_mm_packs_pi16(__m64 __m1, __m64 __m2) 
# 145
{ 
# 146
return (__m64)__builtin_ia32_packsswb((__v4hi)__m1, (__v4hi)__m2); 
# 147
} 
# 149
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 150
_m_packsswb(__m64 __m1, __m64 __m2) 
# 151
{ 
# 152
return _mm_packs_pi16(__m1, __m2); 
# 153
} 
# 158
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 159
_mm_packs_pi32(__m64 __m1, __m64 __m2) 
# 160
{ 
# 161
return (__m64)__builtin_ia32_packssdw((__v2si)__m1, (__v2si)__m2); 
# 162
} 
# 164
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 165
_m_packssdw(__m64 __m1, __m64 __m2) 
# 166
{ 
# 167
return _mm_packs_pi32(__m1, __m2); 
# 168
} 
# 173
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 174
_mm_packs_pu16(__m64 __m1, __m64 __m2) 
# 175
{ 
# 176
return (__m64)__builtin_ia32_packuswb((__v4hi)__m1, (__v4hi)__m2); 
# 177
} 
# 179
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 180
_m_packuswb(__m64 __m1, __m64 __m2) 
# 181
{ 
# 182
return _mm_packs_pu16(__m1, __m2); 
# 183
} 
# 187
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 188
_mm_unpackhi_pi8(__m64 __m1, __m64 __m2) 
# 189
{ 
# 190
return (__m64)__builtin_ia32_punpckhbw((__v8qi)__m1, (__v8qi)__m2); 
# 191
} 
# 193
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 194
_m_punpckhbw(__m64 __m1, __m64 __m2) 
# 195
{ 
# 196
return _mm_unpackhi_pi8(__m1, __m2); 
# 197
} 
# 201
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 202
_mm_unpackhi_pi16(__m64 __m1, __m64 __m2) 
# 203
{ 
# 204
return (__m64)__builtin_ia32_punpckhwd((__v4hi)__m1, (__v4hi)__m2); 
# 205
} 
# 207
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 208
_m_punpckhwd(__m64 __m1, __m64 __m2) 
# 209
{ 
# 210
return _mm_unpackhi_pi16(__m1, __m2); 
# 211
} 
# 215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 216
_mm_unpackhi_pi32(__m64 __m1, __m64 __m2) 
# 217
{ 
# 218
return (__m64)__builtin_ia32_punpckhdq((__v2si)__m1, (__v2si)__m2); 
# 219
} 
# 221
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 222
_m_punpckhdq(__m64 __m1, __m64 __m2) 
# 223
{ 
# 224
return _mm_unpackhi_pi32(__m1, __m2); 
# 225
} 
# 229
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 230
_mm_unpacklo_pi8(__m64 __m1, __m64 __m2) 
# 231
{ 
# 232
return (__m64)__builtin_ia32_punpcklbw((__v8qi)__m1, (__v8qi)__m2); 
# 233
} 
# 235
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 236
_m_punpcklbw(__m64 __m1, __m64 __m2) 
# 237
{ 
# 238
return _mm_unpacklo_pi8(__m1, __m2); 
# 239
} 
# 243
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 244
_mm_unpacklo_pi16(__m64 __m1, __m64 __m2) 
# 245
{ 
# 246
return (__m64)__builtin_ia32_punpcklwd((__v4hi)__m1, (__v4hi)__m2); 
# 247
} 
# 249
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 250
_m_punpcklwd(__m64 __m1, __m64 __m2) 
# 251
{ 
# 252
return _mm_unpacklo_pi16(__m1, __m2); 
# 253
} 
# 257
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 258
_mm_unpacklo_pi32(__m64 __m1, __m64 __m2) 
# 259
{ 
# 260
return (__m64)__builtin_ia32_punpckldq((__v2si)__m1, (__v2si)__m2); 
# 261
} 
# 263
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 264
_m_punpckldq(__m64 __m1, __m64 __m2) 
# 265
{ 
# 266
return _mm_unpacklo_pi32(__m1, __m2); 
# 267
} 
# 270
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 271
_mm_add_pi8(__m64 __m1, __m64 __m2) 
# 272
{ 
# 273
return (__m64)__builtin_ia32_paddb((__v8qi)__m1, (__v8qi)__m2); 
# 274
} 
# 276
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 277
_m_paddb(__m64 __m1, __m64 __m2) 
# 278
{ 
# 279
return _mm_add_pi8(__m1, __m2); 
# 280
} 
# 283
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 284
_mm_add_pi16(__m64 __m1, __m64 __m2) 
# 285
{ 
# 286
return (__m64)__builtin_ia32_paddw((__v4hi)__m1, (__v4hi)__m2); 
# 287
} 
# 289
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 290
_m_paddw(__m64 __m1, __m64 __m2) 
# 291
{ 
# 292
return _mm_add_pi16(__m1, __m2); 
# 293
} 
# 296
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 297
_mm_add_pi32(__m64 __m1, __m64 __m2) 
# 298
{ 
# 299
return (__m64)__builtin_ia32_paddd((__v2si)__m1, (__v2si)__m2); 
# 300
} 
# 302
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 303
_m_paddd(__m64 __m1, __m64 __m2) 
# 304
{ 
# 305
return _mm_add_pi32(__m1, __m2); 
# 306
} 
# 315
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 316
_mm_add_si64(__m64 __m1, __m64 __m2) 
# 317
{ 
# 318
return (__m64)__builtin_ia32_paddq((__v1di)__m1, (__v1di)__m2); 
# 319
} 
# 327
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 328
_mm_adds_pi8(__m64 __m1, __m64 __m2) 
# 329
{ 
# 330
return (__m64)__builtin_ia32_paddsb((__v8qi)__m1, (__v8qi)__m2); 
# 331
} 
# 333
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 334
_m_paddsb(__m64 __m1, __m64 __m2) 
# 335
{ 
# 336
return _mm_adds_pi8(__m1, __m2); 
# 337
} 
# 341
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 342
_mm_adds_pi16(__m64 __m1, __m64 __m2) 
# 343
{ 
# 344
return (__m64)__builtin_ia32_paddsw((__v4hi)__m1, (__v4hi)__m2); 
# 345
} 
# 347
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 348
_m_paddsw(__m64 __m1, __m64 __m2) 
# 349
{ 
# 350
return _mm_adds_pi16(__m1, __m2); 
# 351
} 
# 355
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 356
_mm_adds_pu8(__m64 __m1, __m64 __m2) 
# 357
{ 
# 358
return (__m64)__builtin_ia32_paddusb((__v8qi)__m1, (__v8qi)__m2); 
# 359
} 
# 361
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 362
_m_paddusb(__m64 __m1, __m64 __m2) 
# 363
{ 
# 364
return _mm_adds_pu8(__m1, __m2); 
# 365
} 
# 369
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 370
_mm_adds_pu16(__m64 __m1, __m64 __m2) 
# 371
{ 
# 372
return (__m64)__builtin_ia32_paddusw((__v4hi)__m1, (__v4hi)__m2); 
# 373
} 
# 375
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 376
_m_paddusw(__m64 __m1, __m64 __m2) 
# 377
{ 
# 378
return _mm_adds_pu16(__m1, __m2); 
# 379
} 
# 382
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 383
_mm_sub_pi8(__m64 __m1, __m64 __m2) 
# 384
{ 
# 385
return (__m64)__builtin_ia32_psubb((__v8qi)__m1, (__v8qi)__m2); 
# 386
} 
# 388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 389
_m_psubb(__m64 __m1, __m64 __m2) 
# 390
{ 
# 391
return _mm_sub_pi8(__m1, __m2); 
# 392
} 
# 395
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 396
_mm_sub_pi16(__m64 __m1, __m64 __m2) 
# 397
{ 
# 398
return (__m64)__builtin_ia32_psubw((__v4hi)__m1, (__v4hi)__m2); 
# 399
} 
# 401
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 402
_m_psubw(__m64 __m1, __m64 __m2) 
# 403
{ 
# 404
return _mm_sub_pi16(__m1, __m2); 
# 405
} 
# 408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 409
_mm_sub_pi32(__m64 __m1, __m64 __m2) 
# 410
{ 
# 411
return (__m64)__builtin_ia32_psubd((__v2si)__m1, (__v2si)__m2); 
# 412
} 
# 414
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 415
_m_psubd(__m64 __m1, __m64 __m2) 
# 416
{ 
# 417
return _mm_sub_pi32(__m1, __m2); 
# 418
} 
# 427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 428
_mm_sub_si64(__m64 __m1, __m64 __m2) 
# 429
{ 
# 430
return (__m64)__builtin_ia32_psubq((__v1di)__m1, (__v1di)__m2); 
# 431
} 
# 439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 440
_mm_subs_pi8(__m64 __m1, __m64 __m2) 
# 441
{ 
# 442
return (__m64)__builtin_ia32_psubsb((__v8qi)__m1, (__v8qi)__m2); 
# 443
} 
# 445
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 446
_m_psubsb(__m64 __m1, __m64 __m2) 
# 447
{ 
# 448
return _mm_subs_pi8(__m1, __m2); 
# 449
} 
# 453
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 454
_mm_subs_pi16(__m64 __m1, __m64 __m2) 
# 455
{ 
# 456
return (__m64)__builtin_ia32_psubsw((__v4hi)__m1, (__v4hi)__m2); 
# 457
} 
# 459
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 460
_m_psubsw(__m64 __m1, __m64 __m2) 
# 461
{ 
# 462
return _mm_subs_pi16(__m1, __m2); 
# 463
} 
# 467
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 468
_mm_subs_pu8(__m64 __m1, __m64 __m2) 
# 469
{ 
# 470
return (__m64)__builtin_ia32_psubusb((__v8qi)__m1, (__v8qi)__m2); 
# 471
} 
# 473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 474
_m_psubusb(__m64 __m1, __m64 __m2) 
# 475
{ 
# 476
return _mm_subs_pu8(__m1, __m2); 
# 477
} 
# 481
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 482
_mm_subs_pu16(__m64 __m1, __m64 __m2) 
# 483
{ 
# 484
return (__m64)__builtin_ia32_psubusw((__v4hi)__m1, (__v4hi)__m2); 
# 485
} 
# 487
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 488
_m_psubusw(__m64 __m1, __m64 __m2) 
# 489
{ 
# 490
return _mm_subs_pu16(__m1, __m2); 
# 491
} 
# 496
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 497
_mm_madd_pi16(__m64 __m1, __m64 __m2) 
# 498
{ 
# 499
return (__m64)__builtin_ia32_pmaddwd((__v4hi)__m1, (__v4hi)__m2); 
# 500
} 
# 502
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 503
_m_pmaddwd(__m64 __m1, __m64 __m2) 
# 504
{ 
# 505
return _mm_madd_pi16(__m1, __m2); 
# 506
} 
# 510
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 511
_mm_mulhi_pi16(__m64 __m1, __m64 __m2) 
# 512
{ 
# 513
return (__m64)__builtin_ia32_pmulhw((__v4hi)__m1, (__v4hi)__m2); 
# 514
} 
# 516
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 517
_m_pmulhw(__m64 __m1, __m64 __m2) 
# 518
{ 
# 519
return _mm_mulhi_pi16(__m1, __m2); 
# 520
} 
# 524
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 525
_mm_mullo_pi16(__m64 __m1, __m64 __m2) 
# 526
{ 
# 527
return (__m64)__builtin_ia32_pmullw((__v4hi)__m1, (__v4hi)__m2); 
# 528
} 
# 530
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 531
_m_pmullw(__m64 __m1, __m64 __m2) 
# 532
{ 
# 533
return _mm_mullo_pi16(__m1, __m2); 
# 534
} 
# 537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 538
_mm_sll_pi16(__m64 __m, __m64 __count) 
# 539
{ 
# 540
return (__m64)__builtin_ia32_psllw((__v4hi)__m, (__v4hi)__count); 
# 541
} 
# 543
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 544
_m_psllw(__m64 __m, __m64 __count) 
# 545
{ 
# 546
return _mm_sll_pi16(__m, __count); 
# 547
} 
# 549
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 550
_mm_slli_pi16(__m64 __m, int __count) 
# 551
{ 
# 552
return (__m64)__builtin_ia32_psllwi((__v4hi)__m, __count); 
# 553
} 
# 555
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 556
_m_psllwi(__m64 __m, int __count) 
# 557
{ 
# 558
return _mm_slli_pi16(__m, __count); 
# 559
} 
# 562
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 563
_mm_sll_pi32(__m64 __m, __m64 __count) 
# 564
{ 
# 565
return (__m64)__builtin_ia32_pslld((__v2si)__m, (__v2si)__count); 
# 566
} 
# 568
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 569
_m_pslld(__m64 __m, __m64 __count) 
# 570
{ 
# 571
return _mm_sll_pi32(__m, __count); 
# 572
} 
# 574
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 575
_mm_slli_pi32(__m64 __m, int __count) 
# 576
{ 
# 577
return (__m64)__builtin_ia32_pslldi((__v2si)__m, __count); 
# 578
} 
# 580
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 581
_m_pslldi(__m64 __m, int __count) 
# 582
{ 
# 583
return _mm_slli_pi32(__m, __count); 
# 584
} 
# 587
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 588
_mm_sll_si64(__m64 __m, __m64 __count) 
# 589
{ 
# 590
return (__m64)__builtin_ia32_psllq((__v1di)__m, (__v1di)__count); 
# 591
} 
# 593
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 594
_m_psllq(__m64 __m, __m64 __count) 
# 595
{ 
# 596
return _mm_sll_si64(__m, __count); 
# 597
} 
# 599
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 600
_mm_slli_si64(__m64 __m, int __count) 
# 601
{ 
# 602
return (__m64)__builtin_ia32_psllqi((__v1di)__m, __count); 
# 603
} 
# 605
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 606
_m_psllqi(__m64 __m, int __count) 
# 607
{ 
# 608
return _mm_slli_si64(__m, __count); 
# 609
} 
# 612
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 613
_mm_sra_pi16(__m64 __m, __m64 __count) 
# 614
{ 
# 615
return (__m64)__builtin_ia32_psraw((__v4hi)__m, (__v4hi)__count); 
# 616
} 
# 618
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 619
_m_psraw(__m64 __m, __m64 __count) 
# 620
{ 
# 621
return _mm_sra_pi16(__m, __count); 
# 622
} 
# 624
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 625
_mm_srai_pi16(__m64 __m, int __count) 
# 626
{ 
# 627
return (__m64)__builtin_ia32_psrawi((__v4hi)__m, __count); 
# 628
} 
# 630
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 631
_m_psrawi(__m64 __m, int __count) 
# 632
{ 
# 633
return _mm_srai_pi16(__m, __count); 
# 634
} 
# 637
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 638
_mm_sra_pi32(__m64 __m, __m64 __count) 
# 639
{ 
# 640
return (__m64)__builtin_ia32_psrad((__v2si)__m, (__v2si)__count); 
# 641
} 
# 643
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 644
_m_psrad(__m64 __m, __m64 __count) 
# 645
{ 
# 646
return _mm_sra_pi32(__m, __count); 
# 647
} 
# 649
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 650
_mm_srai_pi32(__m64 __m, int __count) 
# 651
{ 
# 652
return (__m64)__builtin_ia32_psradi((__v2si)__m, __count); 
# 653
} 
# 655
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 656
_m_psradi(__m64 __m, int __count) 
# 657
{ 
# 658
return _mm_srai_pi32(__m, __count); 
# 659
} 
# 662
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 663
_mm_srl_pi16(__m64 __m, __m64 __count) 
# 664
{ 
# 665
return (__m64)__builtin_ia32_psrlw((__v4hi)__m, (__v4hi)__count); 
# 666
} 
# 668
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 669
_m_psrlw(__m64 __m, __m64 __count) 
# 670
{ 
# 671
return _mm_srl_pi16(__m, __count); 
# 672
} 
# 674
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 675
_mm_srli_pi16(__m64 __m, int __count) 
# 676
{ 
# 677
return (__m64)__builtin_ia32_psrlwi((__v4hi)__m, __count); 
# 678
} 
# 680
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 681
_m_psrlwi(__m64 __m, int __count) 
# 682
{ 
# 683
return _mm_srli_pi16(__m, __count); 
# 684
} 
# 687
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 688
_mm_srl_pi32(__m64 __m, __m64 __count) 
# 689
{ 
# 690
return (__m64)__builtin_ia32_psrld((__v2si)__m, (__v2si)__count); 
# 691
} 
# 693
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 694
_m_psrld(__m64 __m, __m64 __count) 
# 695
{ 
# 696
return _mm_srl_pi32(__m, __count); 
# 697
} 
# 699
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 700
_mm_srli_pi32(__m64 __m, int __count) 
# 701
{ 
# 702
return (__m64)__builtin_ia32_psrldi((__v2si)__m, __count); 
# 703
} 
# 705
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 706
_m_psrldi(__m64 __m, int __count) 
# 707
{ 
# 708
return _mm_srli_pi32(__m, __count); 
# 709
} 
# 712
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 713
_mm_srl_si64(__m64 __m, __m64 __count) 
# 714
{ 
# 715
return (__m64)__builtin_ia32_psrlq((__v1di)__m, (__v1di)__count); 
# 716
} 
# 718
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 719
_m_psrlq(__m64 __m, __m64 __count) 
# 720
{ 
# 721
return _mm_srl_si64(__m, __count); 
# 722
} 
# 724
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 725
_mm_srli_si64(__m64 __m, int __count) 
# 726
{ 
# 727
return (__m64)__builtin_ia32_psrlqi((__v1di)__m, __count); 
# 728
} 
# 730
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 731
_m_psrlqi(__m64 __m, int __count) 
# 732
{ 
# 733
return _mm_srli_si64(__m, __count); 
# 734
} 
# 737
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 738
_mm_and_si64(__m64 __m1, __m64 __m2) 
# 739
{ 
# 740
return __builtin_ia32_pand(__m1, __m2); 
# 741
} 
# 743
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 744
_m_pand(__m64 __m1, __m64 __m2) 
# 745
{ 
# 746
return _mm_and_si64(__m1, __m2); 
# 747
} 
# 751
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 752
_mm_andnot_si64(__m64 __m1, __m64 __m2) 
# 753
{ 
# 754
return __builtin_ia32_pandn(__m1, __m2); 
# 755
} 
# 757
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 758
_m_pandn(__m64 __m1, __m64 __m2) 
# 759
{ 
# 760
return _mm_andnot_si64(__m1, __m2); 
# 761
} 
# 764
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 765
_mm_or_si64(__m64 __m1, __m64 __m2) 
# 766
{ 
# 767
return __builtin_ia32_por(__m1, __m2); 
# 768
} 
# 770
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 771
_m_por(__m64 __m1, __m64 __m2) 
# 772
{ 
# 773
return _mm_or_si64(__m1, __m2); 
# 774
} 
# 777
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 778
_mm_xor_si64(__m64 __m1, __m64 __m2) 
# 779
{ 
# 780
return __builtin_ia32_pxor(__m1, __m2); 
# 781
} 
# 783
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 784
_m_pxor(__m64 __m1, __m64 __m2) 
# 785
{ 
# 786
return _mm_xor_si64(__m1, __m2); 
# 787
} 
# 791
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 792
_mm_cmpeq_pi8(__m64 __m1, __m64 __m2) 
# 793
{ 
# 794
return (__m64)__builtin_ia32_pcmpeqb((__v8qi)__m1, (__v8qi)__m2); 
# 795
} 
# 797
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 798
_m_pcmpeqb(__m64 __m1, __m64 __m2) 
# 799
{ 
# 800
return _mm_cmpeq_pi8(__m1, __m2); 
# 801
} 
# 803
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 804
_mm_cmpgt_pi8(__m64 __m1, __m64 __m2) 
# 805
{ 
# 806
return (__m64)__builtin_ia32_pcmpgtb((__v8qi)__m1, (__v8qi)__m2); 
# 807
} 
# 809
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 810
_m_pcmpgtb(__m64 __m1, __m64 __m2) 
# 811
{ 
# 812
return _mm_cmpgt_pi8(__m1, __m2); 
# 813
} 
# 817
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 818
_mm_cmpeq_pi16(__m64 __m1, __m64 __m2) 
# 819
{ 
# 820
return (__m64)__builtin_ia32_pcmpeqw((__v4hi)__m1, (__v4hi)__m2); 
# 821
} 
# 823
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 824
_m_pcmpeqw(__m64 __m1, __m64 __m2) 
# 825
{ 
# 826
return _mm_cmpeq_pi16(__m1, __m2); 
# 827
} 
# 829
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 830
_mm_cmpgt_pi16(__m64 __m1, __m64 __m2) 
# 831
{ 
# 832
return (__m64)__builtin_ia32_pcmpgtw((__v4hi)__m1, (__v4hi)__m2); 
# 833
} 
# 835
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 836
_m_pcmpgtw(__m64 __m1, __m64 __m2) 
# 837
{ 
# 838
return _mm_cmpgt_pi16(__m1, __m2); 
# 839
} 
# 843
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 844
_mm_cmpeq_pi32(__m64 __m1, __m64 __m2) 
# 845
{ 
# 846
return (__m64)__builtin_ia32_pcmpeqd((__v2si)__m1, (__v2si)__m2); 
# 847
} 
# 849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 850
_m_pcmpeqd(__m64 __m1, __m64 __m2) 
# 851
{ 
# 852
return _mm_cmpeq_pi32(__m1, __m2); 
# 853
} 
# 855
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 856
_mm_cmpgt_pi32(__m64 __m1, __m64 __m2) 
# 857
{ 
# 858
return (__m64)__builtin_ia32_pcmpgtd((__v2si)__m1, (__v2si)__m2); 
# 859
} 
# 861
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 862
_m_pcmpgtd(__m64 __m1, __m64 __m2) 
# 863
{ 
# 864
return _mm_cmpgt_pi32(__m1, __m2); 
# 865
} 
# 868
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 869
_mm_setzero_si64() 
# 870
{ 
# 871
return (__m64)0LL; 
# 872
} 
# 875
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 876
_mm_set_pi32(int __i1, int __i0) 
# 877
{ 
# 878
return (__m64)__builtin_ia32_vec_init_v2si(__i0, __i1); 
# 879
} 
# 882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 883
_mm_set_pi16(short __w3, short __w2, short __w1, short __w0) 
# 884
{ 
# 885
return (__m64)__builtin_ia32_vec_init_v4hi(__w0, __w1, __w2, __w3); 
# 886
} 
# 889
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 890
_mm_set_pi8(char __b7, char __b6, char __b5, char __b4, char 
# 891
__b3, char __b2, char __b1, char __b0) 
# 892
{ 
# 893
return (__m64)__builtin_ia32_vec_init_v8qi(__b0, __b1, __b2, __b3, __b4, __b5, __b6, __b7); 
# 895
} 
# 898
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 899
_mm_setr_pi32(int __i0, int __i1) 
# 900
{ 
# 901
return _mm_set_pi32(__i1, __i0); 
# 902
} 
# 904
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 905
_mm_setr_pi16(short __w0, short __w1, short __w2, short __w3) 
# 906
{ 
# 907
return _mm_set_pi16(__w3, __w2, __w1, __w0); 
# 908
} 
# 910
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 911
_mm_setr_pi8(char __b0, char __b1, char __b2, char __b3, char 
# 912
__b4, char __b5, char __b6, char __b7) 
# 913
{ 
# 914
return _mm_set_pi8(__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0); 
# 915
} 
# 918
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 919
_mm_set1_pi32(int __i) 
# 920
{ 
# 921
return _mm_set_pi32(__i, __i); 
# 922
} 
# 925
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 926
_mm_set1_pi16(short __w) 
# 927
{ 
# 928
return _mm_set_pi16(__w, __w, __w, __w); 
# 929
} 
# 932
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 933
_mm_set1_pi8(char __b) 
# 934
{ 
# 935
return _mm_set_pi8(__b, __b, __b, __b, __b, __b, __b, __b); 
# 936
} 
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include/mm_malloc.h" 3
extern "C" int posix_memalign(void **, ::size_t, ::size_t) throw(); 
# 38
static inline void *_mm_malloc(::size_t size, ::size_t alignment) 
# 39
{ 
# 40
void *ptr; 
# 41
if (alignment == (1)) { 
# 42
return malloc(size); }  
# 43
if ((alignment == (2)) || ((sizeof(void *) == (8)) && (alignment == (4)))) { 
# 44
alignment = sizeof(void *); }  
# 45
if (posix_memalign(&ptr, alignment, size) == 0) { 
# 46
return ptr; } else { 
# 48
return __null; }  
# 49
} 
# 52
static inline void _mm_free(void *ptr) 
# 53
{ 
# 54
free(ptr); 
# 55
} 
# 37 "/usr/lib/gcc/x86_64-linux-gnu/5/include/xmmintrin.h" 3
enum _mm_hint { 
# 40
_MM_HINT_ET0 = 7, 
# 41
_MM_HINT_ET1 = 6, 
# 42
_MM_HINT_T0 = 3, 
# 43
_MM_HINT_T1 = 2, 
# 44
_MM_HINT_T2 = 1, 
# 45
_MM_HINT_NTA = 0
# 46
}; 
# 51
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 52
_mm_prefetch(const void *__P, _mm_hint __I) 
# 53
{ 
# 54
__builtin_prefetch(__P, (__I & 4) >> 2, __I & 3); 
# 55
} 
# 69
typedef float __m128 __attribute((__vector_size__(16), __may_alias__)); 
# 72
typedef float __v4sf __attribute((__vector_size__(16))); 
# 106
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 107
_mm_undefined_ps() 
# 108
{ 
# 109
__m128 __Y = __Y; 
# 110
return __Y; 
# 111
} 
# 114
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 115
_mm_setzero_ps() 
# 116
{ 
# 117
return __extension__ ((__m128){(0.0F), (0.0F), (0.0F), (0.0F)}); 
# 118
} 
# 124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 125
_mm_add_ss(__m128 __A, __m128 __B) 
# 126
{ 
# 127
return (__m128)__builtin_ia32_addss((__v4sf)__A, (__v4sf)__B); 
# 128
} 
# 130
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 131
_mm_sub_ss(__m128 __A, __m128 __B) 
# 132
{ 
# 133
return (__m128)__builtin_ia32_subss((__v4sf)__A, (__v4sf)__B); 
# 134
} 
# 136
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 137
_mm_mul_ss(__m128 __A, __m128 __B) 
# 138
{ 
# 139
return (__m128)__builtin_ia32_mulss((__v4sf)__A, (__v4sf)__B); 
# 140
} 
# 142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 143
_mm_div_ss(__m128 __A, __m128 __B) 
# 144
{ 
# 145
return (__m128)__builtin_ia32_divss((__v4sf)__A, (__v4sf)__B); 
# 146
} 
# 148
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 149
_mm_sqrt_ss(__m128 __A) 
# 150
{ 
# 151
return (__m128)__builtin_ia32_sqrtss((__v4sf)__A); 
# 152
} 
# 154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 155
_mm_rcp_ss(__m128 __A) 
# 156
{ 
# 157
return (__m128)__builtin_ia32_rcpss((__v4sf)__A); 
# 158
} 
# 160
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 161
_mm_rsqrt_ss(__m128 __A) 
# 162
{ 
# 163
return (__m128)__builtin_ia32_rsqrtss((__v4sf)__A); 
# 164
} 
# 166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 167
_mm_min_ss(__m128 __A, __m128 __B) 
# 168
{ 
# 169
return (__m128)__builtin_ia32_minss((__v4sf)__A, (__v4sf)__B); 
# 170
} 
# 172
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 173
_mm_max_ss(__m128 __A, __m128 __B) 
# 174
{ 
# 175
return (__m128)__builtin_ia32_maxss((__v4sf)__A, (__v4sf)__B); 
# 176
} 
# 180
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 181
_mm_add_ps(__m128 __A, __m128 __B) 
# 182
{ 
# 183
return (__m128)(((__v4sf)__A) + ((__v4sf)__B)); 
# 184
} 
# 186
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 187
_mm_sub_ps(__m128 __A, __m128 __B) 
# 188
{ 
# 189
return (__m128)(((__v4sf)__A) - ((__v4sf)__B)); 
# 190
} 
# 192
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 193
_mm_mul_ps(__m128 __A, __m128 __B) 
# 194
{ 
# 195
return (__m128)(((__v4sf)__A) * ((__v4sf)__B)); 
# 196
} 
# 198
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 199
_mm_div_ps(__m128 __A, __m128 __B) 
# 200
{ 
# 201
return (__m128)(((__v4sf)__A) / ((__v4sf)__B)); 
# 202
} 
# 204
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 205
_mm_sqrt_ps(__m128 __A) 
# 206
{ 
# 207
return (__m128)__builtin_ia32_sqrtps((__v4sf)__A); 
# 208
} 
# 210
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 211
_mm_rcp_ps(__m128 __A) 
# 212
{ 
# 213
return (__m128)__builtin_ia32_rcpps((__v4sf)__A); 
# 214
} 
# 216
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 217
_mm_rsqrt_ps(__m128 __A) 
# 218
{ 
# 219
return (__m128)__builtin_ia32_rsqrtps((__v4sf)__A); 
# 220
} 
# 222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 223
_mm_min_ps(__m128 __A, __m128 __B) 
# 224
{ 
# 225
return (__m128)__builtin_ia32_minps((__v4sf)__A, (__v4sf)__B); 
# 226
} 
# 228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 229
_mm_max_ps(__m128 __A, __m128 __B) 
# 230
{ 
# 231
return (__m128)__builtin_ia32_maxps((__v4sf)__A, (__v4sf)__B); 
# 232
} 
# 236
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 237
_mm_and_ps(__m128 __A, __m128 __B) 
# 238
{ 
# 239
return __builtin_ia32_andps(__A, __B); 
# 240
} 
# 242
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 243
_mm_andnot_ps(__m128 __A, __m128 __B) 
# 244
{ 
# 245
return __builtin_ia32_andnps(__A, __B); 
# 246
} 
# 248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 249
_mm_or_ps(__m128 __A, __m128 __B) 
# 250
{ 
# 251
return __builtin_ia32_orps(__A, __B); 
# 252
} 
# 254
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 255
_mm_xor_ps(__m128 __A, __m128 __B) 
# 256
{ 
# 257
return __builtin_ia32_xorps(__A, __B); 
# 258
} 
# 264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 265
_mm_cmpeq_ss(__m128 __A, __m128 __B) 
# 266
{ 
# 267
return (__m128)__builtin_ia32_cmpeqss((__v4sf)__A, (__v4sf)__B); 
# 268
} 
# 270
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 271
_mm_cmplt_ss(__m128 __A, __m128 __B) 
# 272
{ 
# 273
return (__m128)__builtin_ia32_cmpltss((__v4sf)__A, (__v4sf)__B); 
# 274
} 
# 276
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 277
_mm_cmple_ss(__m128 __A, __m128 __B) 
# 278
{ 
# 279
return (__m128)__builtin_ia32_cmpless((__v4sf)__A, (__v4sf)__B); 
# 280
} 
# 282
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 283
_mm_cmpgt_ss(__m128 __A, __m128 __B) 
# 284
{ 
# 285
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_cmpltss((__v4sf)__B, (__v4sf)__A)); 
# 290
} 
# 292
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 293
_mm_cmpge_ss(__m128 __A, __m128 __B) 
# 294
{ 
# 295
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_cmpless((__v4sf)__B, (__v4sf)__A)); 
# 300
} 
# 302
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 303
_mm_cmpneq_ss(__m128 __A, __m128 __B) 
# 304
{ 
# 305
return (__m128)__builtin_ia32_cmpneqss((__v4sf)__A, (__v4sf)__B); 
# 306
} 
# 308
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 309
_mm_cmpnlt_ss(__m128 __A, __m128 __B) 
# 310
{ 
# 311
return (__m128)__builtin_ia32_cmpnltss((__v4sf)__A, (__v4sf)__B); 
# 312
} 
# 314
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 315
_mm_cmpnle_ss(__m128 __A, __m128 __B) 
# 316
{ 
# 317
return (__m128)__builtin_ia32_cmpnless((__v4sf)__A, (__v4sf)__B); 
# 318
} 
# 320
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 321
_mm_cmpngt_ss(__m128 __A, __m128 __B) 
# 322
{ 
# 323
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_cmpnltss((__v4sf)__B, (__v4sf)__A)); 
# 328
} 
# 330
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 331
_mm_cmpnge_ss(__m128 __A, __m128 __B) 
# 332
{ 
# 333
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_cmpnless((__v4sf)__B, (__v4sf)__A)); 
# 338
} 
# 340
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 341
_mm_cmpord_ss(__m128 __A, __m128 __B) 
# 342
{ 
# 343
return (__m128)__builtin_ia32_cmpordss((__v4sf)__A, (__v4sf)__B); 
# 344
} 
# 346
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 347
_mm_cmpunord_ss(__m128 __A, __m128 __B) 
# 348
{ 
# 349
return (__m128)__builtin_ia32_cmpunordss((__v4sf)__A, (__v4sf)__B); 
# 350
} 
# 356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 357
_mm_cmpeq_ps(__m128 __A, __m128 __B) 
# 358
{ 
# 359
return (__m128)__builtin_ia32_cmpeqps((__v4sf)__A, (__v4sf)__B); 
# 360
} 
# 362
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 363
_mm_cmplt_ps(__m128 __A, __m128 __B) 
# 364
{ 
# 365
return (__m128)__builtin_ia32_cmpltps((__v4sf)__A, (__v4sf)__B); 
# 366
} 
# 368
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 369
_mm_cmple_ps(__m128 __A, __m128 __B) 
# 370
{ 
# 371
return (__m128)__builtin_ia32_cmpleps((__v4sf)__A, (__v4sf)__B); 
# 372
} 
# 374
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 375
_mm_cmpgt_ps(__m128 __A, __m128 __B) 
# 376
{ 
# 377
return (__m128)__builtin_ia32_cmpgtps((__v4sf)__A, (__v4sf)__B); 
# 378
} 
# 380
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 381
_mm_cmpge_ps(__m128 __A, __m128 __B) 
# 382
{ 
# 383
return (__m128)__builtin_ia32_cmpgeps((__v4sf)__A, (__v4sf)__B); 
# 384
} 
# 386
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 387
_mm_cmpneq_ps(__m128 __A, __m128 __B) 
# 388
{ 
# 389
return (__m128)__builtin_ia32_cmpneqps((__v4sf)__A, (__v4sf)__B); 
# 390
} 
# 392
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 393
_mm_cmpnlt_ps(__m128 __A, __m128 __B) 
# 394
{ 
# 395
return (__m128)__builtin_ia32_cmpnltps((__v4sf)__A, (__v4sf)__B); 
# 396
} 
# 398
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 399
_mm_cmpnle_ps(__m128 __A, __m128 __B) 
# 400
{ 
# 401
return (__m128)__builtin_ia32_cmpnleps((__v4sf)__A, (__v4sf)__B); 
# 402
} 
# 404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 405
_mm_cmpngt_ps(__m128 __A, __m128 __B) 
# 406
{ 
# 407
return (__m128)__builtin_ia32_cmpngtps((__v4sf)__A, (__v4sf)__B); 
# 408
} 
# 410
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 411
_mm_cmpnge_ps(__m128 __A, __m128 __B) 
# 412
{ 
# 413
return (__m128)__builtin_ia32_cmpngeps((__v4sf)__A, (__v4sf)__B); 
# 414
} 
# 416
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 417
_mm_cmpord_ps(__m128 __A, __m128 __B) 
# 418
{ 
# 419
return (__m128)__builtin_ia32_cmpordps((__v4sf)__A, (__v4sf)__B); 
# 420
} 
# 422
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 423
_mm_cmpunord_ps(__m128 __A, __m128 __B) 
# 424
{ 
# 425
return (__m128)__builtin_ia32_cmpunordps((__v4sf)__A, (__v4sf)__B); 
# 426
} 
# 431
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 432
_mm_comieq_ss(__m128 __A, __m128 __B) 
# 433
{ 
# 434
return __builtin_ia32_comieq((__v4sf)__A, (__v4sf)__B); 
# 435
} 
# 437
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 438
_mm_comilt_ss(__m128 __A, __m128 __B) 
# 439
{ 
# 440
return __builtin_ia32_comilt((__v4sf)__A, (__v4sf)__B); 
# 441
} 
# 443
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 444
_mm_comile_ss(__m128 __A, __m128 __B) 
# 445
{ 
# 446
return __builtin_ia32_comile((__v4sf)__A, (__v4sf)__B); 
# 447
} 
# 449
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 450
_mm_comigt_ss(__m128 __A, __m128 __B) 
# 451
{ 
# 452
return __builtin_ia32_comigt((__v4sf)__A, (__v4sf)__B); 
# 453
} 
# 455
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 456
_mm_comige_ss(__m128 __A, __m128 __B) 
# 457
{ 
# 458
return __builtin_ia32_comige((__v4sf)__A, (__v4sf)__B); 
# 459
} 
# 461
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 462
_mm_comineq_ss(__m128 __A, __m128 __B) 
# 463
{ 
# 464
return __builtin_ia32_comineq((__v4sf)__A, (__v4sf)__B); 
# 465
} 
# 467
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 468
_mm_ucomieq_ss(__m128 __A, __m128 __B) 
# 469
{ 
# 470
return __builtin_ia32_ucomieq((__v4sf)__A, (__v4sf)__B); 
# 471
} 
# 473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 474
_mm_ucomilt_ss(__m128 __A, __m128 __B) 
# 475
{ 
# 476
return __builtin_ia32_ucomilt((__v4sf)__A, (__v4sf)__B); 
# 477
} 
# 479
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 480
_mm_ucomile_ss(__m128 __A, __m128 __B) 
# 481
{ 
# 482
return __builtin_ia32_ucomile((__v4sf)__A, (__v4sf)__B); 
# 483
} 
# 485
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 486
_mm_ucomigt_ss(__m128 __A, __m128 __B) 
# 487
{ 
# 488
return __builtin_ia32_ucomigt((__v4sf)__A, (__v4sf)__B); 
# 489
} 
# 491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 492
_mm_ucomige_ss(__m128 __A, __m128 __B) 
# 493
{ 
# 494
return __builtin_ia32_ucomige((__v4sf)__A, (__v4sf)__B); 
# 495
} 
# 497
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 498
_mm_ucomineq_ss(__m128 __A, __m128 __B) 
# 499
{ 
# 500
return __builtin_ia32_ucomineq((__v4sf)__A, (__v4sf)__B); 
# 501
} 
# 505
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 506
_mm_cvtss_si32(__m128 __A) 
# 507
{ 
# 508
return __builtin_ia32_cvtss2si((__v4sf)__A); 
# 509
} 
# 511
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 512
_mm_cvt_ss2si(__m128 __A) 
# 513
{ 
# 514
return _mm_cvtss_si32(__A); 
# 515
} 
# 522
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 523
_mm_cvtss_si64(__m128 __A) 
# 524
{ 
# 525
return __builtin_ia32_cvtss2si64((__v4sf)__A); 
# 526
} 
# 529
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 530
_mm_cvtss_si64x(__m128 __A) 
# 531
{ 
# 532
return __builtin_ia32_cvtss2si64((__v4sf)__A); 
# 533
} 
# 538
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 539
_mm_cvtps_pi32(__m128 __A) 
# 540
{ 
# 541
return (__m64)__builtin_ia32_cvtps2pi((__v4sf)__A); 
# 542
} 
# 544
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 545
_mm_cvt_ps2pi(__m128 __A) 
# 546
{ 
# 547
return _mm_cvtps_pi32(__A); 
# 548
} 
# 551
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 552
_mm_cvttss_si32(__m128 __A) 
# 553
{ 
# 554
return __builtin_ia32_cvttss2si((__v4sf)__A); 
# 555
} 
# 557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 558
_mm_cvtt_ss2si(__m128 __A) 
# 559
{ 
# 560
return _mm_cvttss_si32(__A); 
# 561
} 
# 567
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 568
_mm_cvttss_si64(__m128 __A) 
# 569
{ 
# 570
return __builtin_ia32_cvttss2si64((__v4sf)__A); 
# 571
} 
# 574
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 575
_mm_cvttss_si64x(__m128 __A) 
# 576
{ 
# 577
return __builtin_ia32_cvttss2si64((__v4sf)__A); 
# 578
} 
# 583
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 584
_mm_cvttps_pi32(__m128 __A) 
# 585
{ 
# 586
return (__m64)__builtin_ia32_cvttps2pi((__v4sf)__A); 
# 587
} 
# 589
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 590
_mm_cvtt_ps2pi(__m128 __A) 
# 591
{ 
# 592
return _mm_cvttps_pi32(__A); 
# 593
} 
# 596
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 597
_mm_cvtsi32_ss(__m128 __A, int __B) 
# 598
{ 
# 599
return (__m128)__builtin_ia32_cvtsi2ss((__v4sf)__A, __B); 
# 600
} 
# 602
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 603
_mm_cvt_si2ss(__m128 __A, int __B) 
# 604
{ 
# 605
return _mm_cvtsi32_ss(__A, __B); 
# 606
} 
# 612
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 613
_mm_cvtsi64_ss(__m128 __A, long long __B) 
# 614
{ 
# 615
return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B); 
# 616
} 
# 619
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 620
_mm_cvtsi64x_ss(__m128 __A, long long __B) 
# 621
{ 
# 622
return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B); 
# 623
} 
# 628
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 629
_mm_cvtpi32_ps(__m128 __A, __m64 __B) 
# 630
{ 
# 631
return (__m128)__builtin_ia32_cvtpi2ps((__v4sf)__A, (__v2si)__B); 
# 632
} 
# 634
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 635
_mm_cvt_pi2ps(__m128 __A, __m64 __B) 
# 636
{ 
# 637
return _mm_cvtpi32_ps(__A, __B); 
# 638
} 
# 641
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 642
_mm_cvtpi16_ps(__m64 __A) 
# 643
{ 
# 644
__v4hi __sign; 
# 645
__v2si __hisi, __losi; 
# 646
__v4sf __zero, __ra, __rb; 
# 651
__sign = __builtin_ia32_pcmpgtw((__v4hi)0LL, (__v4hi)__A); 
# 654
__losi = ((__v2si)__builtin_ia32_punpcklwd((__v4hi)__A, __sign)); 
# 655
__hisi = ((__v2si)__builtin_ia32_punpckhwd((__v4hi)__A, __sign)); 
# 658
__zero = ((__v4sf)_mm_setzero_ps()); 
# 659
__ra = __builtin_ia32_cvtpi2ps(__zero, __losi); 
# 660
__rb = __builtin_ia32_cvtpi2ps(__ra, __hisi); 
# 662
return (__m128)__builtin_ia32_movlhps(__ra, __rb); 
# 663
} 
# 666
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 667
_mm_cvtpu16_ps(__m64 __A) 
# 668
{ 
# 669
__v2si __hisi, __losi; 
# 670
__v4sf __zero, __ra, __rb; 
# 673
__losi = ((__v2si)__builtin_ia32_punpcklwd((__v4hi)__A, (__v4hi)0LL)); 
# 674
__hisi = ((__v2si)__builtin_ia32_punpckhwd((__v4hi)__A, (__v4hi)0LL)); 
# 677
__zero = ((__v4sf)_mm_setzero_ps()); 
# 678
__ra = __builtin_ia32_cvtpi2ps(__zero, __losi); 
# 679
__rb = __builtin_ia32_cvtpi2ps(__ra, __hisi); 
# 681
return (__m128)__builtin_ia32_movlhps(__ra, __rb); 
# 682
} 
# 685
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 686
_mm_cvtpi8_ps(__m64 __A) 
# 687
{ 
# 688
__v8qi __sign; 
# 693
__sign = __builtin_ia32_pcmpgtb((__v8qi)0LL, (__v8qi)__A); 
# 696
__A = ((__m64)__builtin_ia32_punpcklbw((__v8qi)__A, __sign)); 
# 698
return _mm_cvtpi16_ps(__A); 
# 699
} 
# 702
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 703
_mm_cvtpu8_ps(__m64 __A) 
# 704
{ 
# 705
__A = ((__m64)__builtin_ia32_punpcklbw((__v8qi)__A, (__v8qi)0LL)); 
# 706
return _mm_cvtpu16_ps(__A); 
# 707
} 
# 710
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 711
_mm_cvtpi32x2_ps(__m64 __A, __m64 __B) 
# 712
{ 
# 713
__v4sf __zero = (__v4sf)_mm_setzero_ps(); 
# 714
__v4sf __sfa = __builtin_ia32_cvtpi2ps(__zero, (__v2si)__A); 
# 715
__v4sf __sfb = __builtin_ia32_cvtpi2ps(__sfa, (__v2si)__B); 
# 716
return (__m128)__builtin_ia32_movlhps(__sfa, __sfb); 
# 717
} 
# 720
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 721
_mm_cvtps_pi16(__m128 __A) 
# 722
{ 
# 723
__v4sf __hisf = (__v4sf)__A; 
# 724
__v4sf __losf = __builtin_ia32_movhlps(__hisf, __hisf); 
# 725
__v2si __hisi = __builtin_ia32_cvtps2pi(__hisf); 
# 726
__v2si __losi = __builtin_ia32_cvtps2pi(__losf); 
# 727
return (__m64)__builtin_ia32_packssdw(__hisi, __losi); 
# 728
} 
# 731
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 732
_mm_cvtps_pi8(__m128 __A) 
# 733
{ 
# 734
__v4hi __tmp = (__v4hi)_mm_cvtps_pi16(__A); 
# 735
return (__m64)__builtin_ia32_packsswb(__tmp, (__v4hi)0LL); 
# 736
} 
# 740
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 741
_mm_shuffle_ps(__m128 __A, __m128 __B, const int __mask) 
# 742
{ 
# 743
return (__m128)__builtin_ia32_shufps((__v4sf)__A, (__v4sf)__B, __mask); 
# 744
} 
# 752
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 753
_mm_unpackhi_ps(__m128 __A, __m128 __B) 
# 754
{ 
# 755
return (__m128)__builtin_ia32_unpckhps((__v4sf)__A, (__v4sf)__B); 
# 756
} 
# 759
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 760
_mm_unpacklo_ps(__m128 __A, __m128 __B) 
# 761
{ 
# 762
return (__m128)__builtin_ia32_unpcklps((__v4sf)__A, (__v4sf)__B); 
# 763
} 
# 767
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 768
_mm_loadh_pi(__m128 __A, const __m64 *__P) 
# 769
{ 
# 770
return (__m128)__builtin_ia32_loadhps((__v4sf)__A, (const __v2sf *)__P); 
# 771
} 
# 774
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 775
_mm_storeh_pi(__m64 *__P, __m128 __A) 
# 776
{ 
# 777
__builtin_ia32_storehps((__v2sf *)__P, (__v4sf)__A); 
# 778
} 
# 781
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 782
_mm_movehl_ps(__m128 __A, __m128 __B) 
# 783
{ 
# 784
return (__m128)__builtin_ia32_movhlps((__v4sf)__A, (__v4sf)__B); 
# 785
} 
# 788
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 789
_mm_movelh_ps(__m128 __A, __m128 __B) 
# 790
{ 
# 791
return (__m128)__builtin_ia32_movlhps((__v4sf)__A, (__v4sf)__B); 
# 792
} 
# 796
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 797
_mm_loadl_pi(__m128 __A, const __m64 *__P) 
# 798
{ 
# 799
return (__m128)__builtin_ia32_loadlps((__v4sf)__A, (const __v2sf *)__P); 
# 800
} 
# 803
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 804
_mm_storel_pi(__m64 *__P, __m128 __A) 
# 805
{ 
# 806
__builtin_ia32_storelps((__v2sf *)__P, (__v4sf)__A); 
# 807
} 
# 810
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 811
_mm_movemask_ps(__m128 __A) 
# 812
{ 
# 813
return __builtin_ia32_movmskps((__v4sf)__A); 
# 814
} 
# 817
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 818
_mm_getcsr() 
# 819
{ 
# 820
return __builtin_ia32_stmxcsr(); 
# 821
} 
# 824
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 825
_MM_GET_EXCEPTION_STATE() 
# 826
{ 
# 827
return _mm_getcsr() & (63); 
# 828
} 
# 830
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 831
_MM_GET_EXCEPTION_MASK() 
# 832
{ 
# 833
return _mm_getcsr() & (8064); 
# 834
} 
# 836
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 837
_MM_GET_ROUNDING_MODE() 
# 838
{ 
# 839
return _mm_getcsr() & (24576); 
# 840
} 
# 842
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 843
_MM_GET_FLUSH_ZERO_MODE() 
# 844
{ 
# 845
return _mm_getcsr() & (32768); 
# 846
} 
# 849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 850
_mm_setcsr(unsigned __I) 
# 851
{ 
# 852
__builtin_ia32_ldmxcsr(__I); 
# 853
} 
# 856
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 857
_MM_SET_EXCEPTION_STATE(unsigned __mask) 
# 858
{ 
# 859
_mm_setcsr((_mm_getcsr() & (~63)) | __mask); 
# 860
} 
# 862
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 863
_MM_SET_EXCEPTION_MASK(unsigned __mask) 
# 864
{ 
# 865
_mm_setcsr((_mm_getcsr() & (~8064)) | __mask); 
# 866
} 
# 868
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 869
_MM_SET_ROUNDING_MODE(unsigned __mode) 
# 870
{ 
# 871
_mm_setcsr((_mm_getcsr() & (~24576)) | __mode); 
# 872
} 
# 874
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 875
_MM_SET_FLUSH_ZERO_MODE(unsigned __mode) 
# 876
{ 
# 877
_mm_setcsr((_mm_getcsr() & (~32768)) | __mode); 
# 878
} 
# 881
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 882
_mm_set_ss(float __F) 
# 883
{ 
# 884
return __extension__ (__m128)(((__v4sf){__F, (0.0F), (0.0F), (0.0F)})); 
# 885
} 
# 888
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 889
_mm_set1_ps(float __F) 
# 890
{ 
# 891
return __extension__ (__m128)(((__v4sf){__F, __F, __F, __F})); 
# 892
} 
# 894
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 895
_mm_set_ps1(float __F) 
# 896
{ 
# 897
return _mm_set1_ps(__F); 
# 898
} 
# 901
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 902
_mm_load_ss(const float *__P) 
# 903
{ 
# 904
return _mm_set_ss(*__P); 
# 905
} 
# 908
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 909
_mm_load1_ps(const float *__P) 
# 910
{ 
# 911
return _mm_set1_ps(*__P); 
# 912
} 
# 914
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 915
_mm_load_ps1(const float *__P) 
# 916
{ 
# 917
return _mm_load1_ps(__P); 
# 918
} 
# 921
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 922
_mm_load_ps(const float *__P) 
# 923
{ 
# 924
return (__m128)(*((__v4sf *)__P)); 
# 925
} 
# 928
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 929
_mm_loadu_ps(const float *__P) 
# 930
{ 
# 931
return (__m128)__builtin_ia32_loadups(__P); 
# 932
} 
# 935
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 936
_mm_loadr_ps(const float *__P) 
# 937
{ 
# 938
__v4sf __tmp = *((__v4sf *)__P); 
# 939
return (__m128)__builtin_ia32_shufps(__tmp, __tmp, (((0 << 6) | (1 << 4)) | (2 << 2)) | 3); 
# 940
} 
# 943
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 944
_mm_set_ps(const float __Z, const float __Y, const float __X, const float __W) 
# 945
{ 
# 946
return __extension__ (__m128)(((__v4sf){__W, __X, __Y, __Z})); 
# 947
} 
# 950
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 951
_mm_setr_ps(float __Z, float __Y, float __X, float __W) 
# 952
{ 
# 953
return __extension__ (__m128)(((__v4sf){__Z, __Y, __X, __W})); 
# 954
} 
# 957
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 958
_mm_store_ss(float *__P, __m128 __A) 
# 959
{ 
# 960
(*__P) = (((__v4sf)__A)[0]); 
# 961
} 
# 963
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline float 
# 964
_mm_cvtss_f32(__m128 __A) 
# 965
{ 
# 966
return ((__v4sf)__A)[0]; 
# 967
} 
# 970
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 971
_mm_store_ps(float *__P, __m128 __A) 
# 972
{ 
# 973
(*((__v4sf *)__P)) = ((__v4sf)__A); 
# 974
} 
# 977
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 978
_mm_storeu_ps(float *__P, __m128 __A) 
# 979
{ 
# 980
__builtin_ia32_storeups(__P, (__v4sf)__A); 
# 981
} 
# 984
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 985
_mm_store1_ps(float *__P, __m128 __A) 
# 986
{ 
# 987
__v4sf __va = (__v4sf)__A; 
# 988
__v4sf __tmp = __builtin_ia32_shufps(__va, __va, (((0 << 6) | (0 << 4)) | (0 << 2)) | 0); 
# 989
_mm_storeu_ps(__P, __tmp); 
# 990
} 
# 992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 993
_mm_store_ps1(float *__P, __m128 __A) 
# 994
{ 
# 995
_mm_store1_ps(__P, __A); 
# 996
} 
# 999
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1000
_mm_storer_ps(float *__P, __m128 __A) 
# 1001
{ 
# 1002
__v4sf __va = (__v4sf)__A; 
# 1003
__v4sf __tmp = __builtin_ia32_shufps(__va, __va, (((0 << 6) | (1 << 4)) | (2 << 2)) | 3); 
# 1004
_mm_store_ps(__P, __tmp); 
# 1005
} 
# 1008
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1009
_mm_move_ss(__m128 __A, __m128 __B) 
# 1010
{ 
# 1011
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__B); 
# 1012
} 
# 1016
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1017
_mm_extract_pi16(const __m64 __A, const int __N) 
# 1018
{ 
# 1019
return __builtin_ia32_vec_ext_v4hi((__v4hi)__A, __N); 
# 1020
} 
# 1022
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1023
_m_pextrw(const __m64 __A, const int __N) 
# 1024
{ 
# 1025
return _mm_extract_pi16(__A, __N); 
# 1026
} 
# 1037
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1038
_mm_insert_pi16(const __m64 __A, const int __D, const int __N) 
# 1039
{ 
# 1040
return (__m64)__builtin_ia32_vec_set_v4hi((__v4hi)__A, __D, __N); 
# 1041
} 
# 1043
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1044
_m_pinsrw(const __m64 __A, const int __D, const int __N) 
# 1045
{ 
# 1046
return _mm_insert_pi16(__A, __D, __N); 
# 1047
} 
# 1057
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1058
_mm_max_pi16(__m64 __A, __m64 __B) 
# 1059
{ 
# 1060
return (__m64)__builtin_ia32_pmaxsw((__v4hi)__A, (__v4hi)__B); 
# 1061
} 
# 1063
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1064
_m_pmaxsw(__m64 __A, __m64 __B) 
# 1065
{ 
# 1066
return _mm_max_pi16(__A, __B); 
# 1067
} 
# 1070
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1071
_mm_max_pu8(__m64 __A, __m64 __B) 
# 1072
{ 
# 1073
return (__m64)__builtin_ia32_pmaxub((__v8qi)__A, (__v8qi)__B); 
# 1074
} 
# 1076
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1077
_m_pmaxub(__m64 __A, __m64 __B) 
# 1078
{ 
# 1079
return _mm_max_pu8(__A, __B); 
# 1080
} 
# 1083
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1084
_mm_min_pi16(__m64 __A, __m64 __B) 
# 1085
{ 
# 1086
return (__m64)__builtin_ia32_pminsw((__v4hi)__A, (__v4hi)__B); 
# 1087
} 
# 1089
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1090
_m_pminsw(__m64 __A, __m64 __B) 
# 1091
{ 
# 1092
return _mm_min_pi16(__A, __B); 
# 1093
} 
# 1096
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1097
_mm_min_pu8(__m64 __A, __m64 __B) 
# 1098
{ 
# 1099
return (__m64)__builtin_ia32_pminub((__v8qi)__A, (__v8qi)__B); 
# 1100
} 
# 1102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1103
_m_pminub(__m64 __A, __m64 __B) 
# 1104
{ 
# 1105
return _mm_min_pu8(__A, __B); 
# 1106
} 
# 1109
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1110
_mm_movemask_pi8(__m64 __A) 
# 1111
{ 
# 1112
return __builtin_ia32_pmovmskb((__v8qi)__A); 
# 1113
} 
# 1115
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1116
_m_pmovmskb(__m64 __A) 
# 1117
{ 
# 1118
return _mm_movemask_pi8(__A); 
# 1119
} 
# 1123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1124
_mm_mulhi_pu16(__m64 __A, __m64 __B) 
# 1125
{ 
# 1126
return (__m64)__builtin_ia32_pmulhuw((__v4hi)__A, (__v4hi)__B); 
# 1127
} 
# 1129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1130
_m_pmulhuw(__m64 __A, __m64 __B) 
# 1131
{ 
# 1132
return _mm_mulhi_pu16(__A, __B); 
# 1133
} 
# 1138
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1139
_mm_shuffle_pi16(__m64 __A, const int __N) 
# 1140
{ 
# 1141
return (__m64)__builtin_ia32_pshufw((__v4hi)__A, __N); 
# 1142
} 
# 1144
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1145
_m_pshufw(__m64 __A, const int __N) 
# 1146
{ 
# 1147
return _mm_shuffle_pi16(__A, __N); 
# 1148
} 
# 1159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1160
_mm_maskmove_si64(__m64 __A, __m64 __N, char *__P) 
# 1161
{ 
# 1162
__builtin_ia32_maskmovq((__v8qi)__A, (__v8qi)__N, __P); 
# 1163
} 
# 1165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1166
_m_maskmovq(__m64 __A, __m64 __N, char *__P) 
# 1167
{ 
# 1168
_mm_maskmove_si64(__A, __N, __P); 
# 1169
} 
# 1172
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1173
_mm_avg_pu8(__m64 __A, __m64 __B) 
# 1174
{ 
# 1175
return (__m64)__builtin_ia32_pavgb((__v8qi)__A, (__v8qi)__B); 
# 1176
} 
# 1178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1179
_m_pavgb(__m64 __A, __m64 __B) 
# 1180
{ 
# 1181
return _mm_avg_pu8(__A, __B); 
# 1182
} 
# 1185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1186
_mm_avg_pu16(__m64 __A, __m64 __B) 
# 1187
{ 
# 1188
return (__m64)__builtin_ia32_pavgw((__v4hi)__A, (__v4hi)__B); 
# 1189
} 
# 1191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1192
_m_pavgw(__m64 __A, __m64 __B) 
# 1193
{ 
# 1194
return _mm_avg_pu16(__A, __B); 
# 1195
} 
# 1200
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1201
_mm_sad_pu8(__m64 __A, __m64 __B) 
# 1202
{ 
# 1203
return (__m64)__builtin_ia32_psadbw((__v8qi)__A, (__v8qi)__B); 
# 1204
} 
# 1206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1207
_m_psadbw(__m64 __A, __m64 __B) 
# 1208
{ 
# 1209
return _mm_sad_pu8(__A, __B); 
# 1210
} 
# 1213
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1214
_mm_stream_pi(__m64 *__P, __m64 __A) 
# 1215
{ 
# 1216
__builtin_ia32_movntq((unsigned long long *)__P, (unsigned long long)__A); 
# 1217
} 
# 1220
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1221
_mm_stream_ps(float *__P, __m128 __A) 
# 1222
{ 
# 1223
__builtin_ia32_movntps(__P, (__v4sf)__A); 
# 1224
} 
# 1228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1229
_mm_sfence() 
# 1230
{ 
# 1231
__builtin_ia32_sfence(); 
# 1232
} 
# 40 "/usr/lib/gcc/x86_64-linux-gnu/5/include/emmintrin.h" 3
typedef double __v2df __attribute((__vector_size__(16))); 
# 41
typedef long long __v2di __attribute((__vector_size__(16))); 
# 42
typedef unsigned long long __v2du __attribute((__vector_size__(16))); 
# 43
typedef int __v4si __attribute((__vector_size__(16))); 
# 44
typedef unsigned __v4su __attribute((__vector_size__(16))); 
# 45
typedef short __v8hi __attribute((__vector_size__(16))); 
# 46
typedef unsigned short __v8hu __attribute((__vector_size__(16))); 
# 47
typedef char __v16qi __attribute((__vector_size__(16))); 
# 48
typedef unsigned char __v16qu __attribute((__vector_size__(16))); 
# 52
typedef long long __m128i __attribute((__vector_size__(16), __may_alias__)); 
# 53
typedef double __m128d __attribute((__vector_size__(16), __may_alias__)); 
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 61
_mm_set_sd(double __F) 
# 62
{ 
# 63
return __extension__ ((__m128d){__F, (0.0)}); 
# 64
} 
# 67
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 68
_mm_set1_pd(double __F) 
# 69
{ 
# 70
return __extension__ ((__m128d){__F, __F}); 
# 71
} 
# 73
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 74
_mm_set_pd1(double __F) 
# 75
{ 
# 76
return _mm_set1_pd(__F); 
# 77
} 
# 80
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 81
_mm_set_pd(double __W, double __X) 
# 82
{ 
# 83
return __extension__ ((__m128d){__X, __W}); 
# 84
} 
# 87
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 88
_mm_setr_pd(double __W, double __X) 
# 89
{ 
# 90
return __extension__ ((__m128d){__W, __X}); 
# 91
} 
# 94
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 95
_mm_undefined_pd() 
# 96
{ 
# 97
__m128d __Y = __Y; 
# 98
return __Y; 
# 99
} 
# 102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 103
_mm_setzero_pd() 
# 104
{ 
# 105
return __extension__ ((__m128d){(0.0), (0.0)}); 
# 106
} 
# 109
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 110
_mm_move_sd(__m128d __A, __m128d __B) 
# 111
{ 
# 112
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__B); 
# 113
} 
# 116
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 117
_mm_load_pd(const double *__P) 
# 118
{ 
# 119
return *((__m128d *)__P); 
# 120
} 
# 123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 124
_mm_loadu_pd(const double *__P) 
# 125
{ 
# 126
return __builtin_ia32_loadupd(__P); 
# 127
} 
# 130
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 131
_mm_load1_pd(const double *__P) 
# 132
{ 
# 133
return _mm_set1_pd(*__P); 
# 134
} 
# 137
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 138
_mm_load_sd(const double *__P) 
# 139
{ 
# 140
return _mm_set_sd(*__P); 
# 141
} 
# 143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 144
_mm_load_pd1(const double *__P) 
# 145
{ 
# 146
return _mm_load1_pd(__P); 
# 147
} 
# 150
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 151
_mm_loadr_pd(const double *__P) 
# 152
{ 
# 153
__m128d __tmp = _mm_load_pd(__P); 
# 154
return __builtin_ia32_shufpd(__tmp, __tmp, (0 << 1) | 1); 
# 155
} 
# 158
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 159
_mm_store_pd(double *__P, __m128d __A) 
# 160
{ 
# 161
(*((__m128d *)__P)) = __A; 
# 162
} 
# 165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 166
_mm_storeu_pd(double *__P, __m128d __A) 
# 167
{ 
# 168
__builtin_ia32_storeupd(__P, __A); 
# 169
} 
# 172
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 173
_mm_store_sd(double *__P, __m128d __A) 
# 174
{ 
# 175
(*__P) = (((__v2df)__A)[0]); 
# 176
} 
# 178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline double 
# 179
_mm_cvtsd_f64(__m128d __A) 
# 180
{ 
# 181
return ((__v2df)__A)[0]; 
# 182
} 
# 184
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 185
_mm_storel_pd(double *__P, __m128d __A) 
# 186
{ 
# 187
_mm_store_sd(__P, __A); 
# 188
} 
# 191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 192
_mm_storeh_pd(double *__P, __m128d __A) 
# 193
{ 
# 194
(*__P) = (((__v2df)__A)[1]); 
# 195
} 
# 199
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 200
_mm_store1_pd(double *__P, __m128d __A) 
# 201
{ 
# 202
_mm_store_pd(__P, __builtin_ia32_shufpd(__A, __A, (0 << 1) | 0)); 
# 203
} 
# 205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 206
_mm_store_pd1(double *__P, __m128d __A) 
# 207
{ 
# 208
_mm_store1_pd(__P, __A); 
# 209
} 
# 212
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 213
_mm_storer_pd(double *__P, __m128d __A) 
# 214
{ 
# 215
_mm_store_pd(__P, __builtin_ia32_shufpd(__A, __A, (0 << 1) | 1)); 
# 216
} 
# 218
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 219
_mm_cvtsi128_si32(__m128i __A) 
# 220
{ 
# 221
return __builtin_ia32_vec_ext_v4si((__v4si)__A, 0); 
# 222
} 
# 226
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 227
_mm_cvtsi128_si64(__m128i __A) 
# 228
{ 
# 229
return ((__v2di)__A)[0]; 
# 230
} 
# 233
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 234
_mm_cvtsi128_si64x(__m128i __A) 
# 235
{ 
# 236
return ((__v2di)__A)[0]; 
# 237
} 
# 240
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 241
_mm_add_pd(__m128d __A, __m128d __B) 
# 242
{ 
# 243
return (__m128d)(((__v2df)__A) + ((__v2df)__B)); 
# 244
} 
# 246
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 247
_mm_add_sd(__m128d __A, __m128d __B) 
# 248
{ 
# 249
return (__m128d)__builtin_ia32_addsd((__v2df)__A, (__v2df)__B); 
# 250
} 
# 252
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 253
_mm_sub_pd(__m128d __A, __m128d __B) 
# 254
{ 
# 255
return (__m128d)(((__v2df)__A) - ((__v2df)__B)); 
# 256
} 
# 258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 259
_mm_sub_sd(__m128d __A, __m128d __B) 
# 260
{ 
# 261
return (__m128d)__builtin_ia32_subsd((__v2df)__A, (__v2df)__B); 
# 262
} 
# 264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 265
_mm_mul_pd(__m128d __A, __m128d __B) 
# 266
{ 
# 267
return (__m128d)(((__v2df)__A) * ((__v2df)__B)); 
# 268
} 
# 270
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 271
_mm_mul_sd(__m128d __A, __m128d __B) 
# 272
{ 
# 273
return (__m128d)__builtin_ia32_mulsd((__v2df)__A, (__v2df)__B); 
# 274
} 
# 276
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 277
_mm_div_pd(__m128d __A, __m128d __B) 
# 278
{ 
# 279
return (__m128d)(((__v2df)__A) / ((__v2df)__B)); 
# 280
} 
# 282
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 283
_mm_div_sd(__m128d __A, __m128d __B) 
# 284
{ 
# 285
return (__m128d)__builtin_ia32_divsd((__v2df)__A, (__v2df)__B); 
# 286
} 
# 288
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 289
_mm_sqrt_pd(__m128d __A) 
# 290
{ 
# 291
return (__m128d)__builtin_ia32_sqrtpd((__v2df)__A); 
# 292
} 
# 295
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 296
_mm_sqrt_sd(__m128d __A, __m128d __B) 
# 297
{ 
# 298
__v2df __tmp = __builtin_ia32_movsd((__v2df)__A, (__v2df)__B); 
# 299
return (__m128d)__builtin_ia32_sqrtsd((__v2df)__tmp); 
# 300
} 
# 302
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 303
_mm_min_pd(__m128d __A, __m128d __B) 
# 304
{ 
# 305
return (__m128d)__builtin_ia32_minpd((__v2df)__A, (__v2df)__B); 
# 306
} 
# 308
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 309
_mm_min_sd(__m128d __A, __m128d __B) 
# 310
{ 
# 311
return (__m128d)__builtin_ia32_minsd((__v2df)__A, (__v2df)__B); 
# 312
} 
# 314
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 315
_mm_max_pd(__m128d __A, __m128d __B) 
# 316
{ 
# 317
return (__m128d)__builtin_ia32_maxpd((__v2df)__A, (__v2df)__B); 
# 318
} 
# 320
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 321
_mm_max_sd(__m128d __A, __m128d __B) 
# 322
{ 
# 323
return (__m128d)__builtin_ia32_maxsd((__v2df)__A, (__v2df)__B); 
# 324
} 
# 326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 327
_mm_and_pd(__m128d __A, __m128d __B) 
# 328
{ 
# 329
return (__m128d)__builtin_ia32_andpd((__v2df)__A, (__v2df)__B); 
# 330
} 
# 332
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 333
_mm_andnot_pd(__m128d __A, __m128d __B) 
# 334
{ 
# 335
return (__m128d)__builtin_ia32_andnpd((__v2df)__A, (__v2df)__B); 
# 336
} 
# 338
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 339
_mm_or_pd(__m128d __A, __m128d __B) 
# 340
{ 
# 341
return (__m128d)__builtin_ia32_orpd((__v2df)__A, (__v2df)__B); 
# 342
} 
# 344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 345
_mm_xor_pd(__m128d __A, __m128d __B) 
# 346
{ 
# 347
return (__m128d)__builtin_ia32_xorpd((__v2df)__A, (__v2df)__B); 
# 348
} 
# 350
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 351
_mm_cmpeq_pd(__m128d __A, __m128d __B) 
# 352
{ 
# 353
return (__m128d)__builtin_ia32_cmpeqpd((__v2df)__A, (__v2df)__B); 
# 354
} 
# 356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 357
_mm_cmplt_pd(__m128d __A, __m128d __B) 
# 358
{ 
# 359
return (__m128d)__builtin_ia32_cmpltpd((__v2df)__A, (__v2df)__B); 
# 360
} 
# 362
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 363
_mm_cmple_pd(__m128d __A, __m128d __B) 
# 364
{ 
# 365
return (__m128d)__builtin_ia32_cmplepd((__v2df)__A, (__v2df)__B); 
# 366
} 
# 368
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 369
_mm_cmpgt_pd(__m128d __A, __m128d __B) 
# 370
{ 
# 371
return (__m128d)__builtin_ia32_cmpgtpd((__v2df)__A, (__v2df)__B); 
# 372
} 
# 374
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 375
_mm_cmpge_pd(__m128d __A, __m128d __B) 
# 376
{ 
# 377
return (__m128d)__builtin_ia32_cmpgepd((__v2df)__A, (__v2df)__B); 
# 378
} 
# 380
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 381
_mm_cmpneq_pd(__m128d __A, __m128d __B) 
# 382
{ 
# 383
return (__m128d)__builtin_ia32_cmpneqpd((__v2df)__A, (__v2df)__B); 
# 384
} 
# 386
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 387
_mm_cmpnlt_pd(__m128d __A, __m128d __B) 
# 388
{ 
# 389
return (__m128d)__builtin_ia32_cmpnltpd((__v2df)__A, (__v2df)__B); 
# 390
} 
# 392
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 393
_mm_cmpnle_pd(__m128d __A, __m128d __B) 
# 394
{ 
# 395
return (__m128d)__builtin_ia32_cmpnlepd((__v2df)__A, (__v2df)__B); 
# 396
} 
# 398
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 399
_mm_cmpngt_pd(__m128d __A, __m128d __B) 
# 400
{ 
# 401
return (__m128d)__builtin_ia32_cmpngtpd((__v2df)__A, (__v2df)__B); 
# 402
} 
# 404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 405
_mm_cmpnge_pd(__m128d __A, __m128d __B) 
# 406
{ 
# 407
return (__m128d)__builtin_ia32_cmpngepd((__v2df)__A, (__v2df)__B); 
# 408
} 
# 410
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 411
_mm_cmpord_pd(__m128d __A, __m128d __B) 
# 412
{ 
# 413
return (__m128d)__builtin_ia32_cmpordpd((__v2df)__A, (__v2df)__B); 
# 414
} 
# 416
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 417
_mm_cmpunord_pd(__m128d __A, __m128d __B) 
# 418
{ 
# 419
return (__m128d)__builtin_ia32_cmpunordpd((__v2df)__A, (__v2df)__B); 
# 420
} 
# 422
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 423
_mm_cmpeq_sd(__m128d __A, __m128d __B) 
# 424
{ 
# 425
return (__m128d)__builtin_ia32_cmpeqsd((__v2df)__A, (__v2df)__B); 
# 426
} 
# 428
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 429
_mm_cmplt_sd(__m128d __A, __m128d __B) 
# 430
{ 
# 431
return (__m128d)__builtin_ia32_cmpltsd((__v2df)__A, (__v2df)__B); 
# 432
} 
# 434
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 435
_mm_cmple_sd(__m128d __A, __m128d __B) 
# 436
{ 
# 437
return (__m128d)__builtin_ia32_cmplesd((__v2df)__A, (__v2df)__B); 
# 438
} 
# 440
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 441
_mm_cmpgt_sd(__m128d __A, __m128d __B) 
# 442
{ 
# 443
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_cmpltsd((__v2df)__B, (__v2df)__A)); 
# 448
} 
# 450
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 451
_mm_cmpge_sd(__m128d __A, __m128d __B) 
# 452
{ 
# 453
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_cmplesd((__v2df)__B, (__v2df)__A)); 
# 458
} 
# 460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 461
_mm_cmpneq_sd(__m128d __A, __m128d __B) 
# 462
{ 
# 463
return (__m128d)__builtin_ia32_cmpneqsd((__v2df)__A, (__v2df)__B); 
# 464
} 
# 466
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 467
_mm_cmpnlt_sd(__m128d __A, __m128d __B) 
# 468
{ 
# 469
return (__m128d)__builtin_ia32_cmpnltsd((__v2df)__A, (__v2df)__B); 
# 470
} 
# 472
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 473
_mm_cmpnle_sd(__m128d __A, __m128d __B) 
# 474
{ 
# 475
return (__m128d)__builtin_ia32_cmpnlesd((__v2df)__A, (__v2df)__B); 
# 476
} 
# 478
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 479
_mm_cmpngt_sd(__m128d __A, __m128d __B) 
# 480
{ 
# 481
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_cmpnltsd((__v2df)__B, (__v2df)__A)); 
# 486
} 
# 488
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 489
_mm_cmpnge_sd(__m128d __A, __m128d __B) 
# 490
{ 
# 491
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_cmpnlesd((__v2df)__B, (__v2df)__A)); 
# 496
} 
# 498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 499
_mm_cmpord_sd(__m128d __A, __m128d __B) 
# 500
{ 
# 501
return (__m128d)__builtin_ia32_cmpordsd((__v2df)__A, (__v2df)__B); 
# 502
} 
# 504
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 505
_mm_cmpunord_sd(__m128d __A, __m128d __B) 
# 506
{ 
# 507
return (__m128d)__builtin_ia32_cmpunordsd((__v2df)__A, (__v2df)__B); 
# 508
} 
# 510
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 511
_mm_comieq_sd(__m128d __A, __m128d __B) 
# 512
{ 
# 513
return __builtin_ia32_comisdeq((__v2df)__A, (__v2df)__B); 
# 514
} 
# 516
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 517
_mm_comilt_sd(__m128d __A, __m128d __B) 
# 518
{ 
# 519
return __builtin_ia32_comisdlt((__v2df)__A, (__v2df)__B); 
# 520
} 
# 522
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 523
_mm_comile_sd(__m128d __A, __m128d __B) 
# 524
{ 
# 525
return __builtin_ia32_comisdle((__v2df)__A, (__v2df)__B); 
# 526
} 
# 528
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 529
_mm_comigt_sd(__m128d __A, __m128d __B) 
# 530
{ 
# 531
return __builtin_ia32_comisdgt((__v2df)__A, (__v2df)__B); 
# 532
} 
# 534
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 535
_mm_comige_sd(__m128d __A, __m128d __B) 
# 536
{ 
# 537
return __builtin_ia32_comisdge((__v2df)__A, (__v2df)__B); 
# 538
} 
# 540
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 541
_mm_comineq_sd(__m128d __A, __m128d __B) 
# 542
{ 
# 543
return __builtin_ia32_comisdneq((__v2df)__A, (__v2df)__B); 
# 544
} 
# 546
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 547
_mm_ucomieq_sd(__m128d __A, __m128d __B) 
# 548
{ 
# 549
return __builtin_ia32_ucomisdeq((__v2df)__A, (__v2df)__B); 
# 550
} 
# 552
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 553
_mm_ucomilt_sd(__m128d __A, __m128d __B) 
# 554
{ 
# 555
return __builtin_ia32_ucomisdlt((__v2df)__A, (__v2df)__B); 
# 556
} 
# 558
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 559
_mm_ucomile_sd(__m128d __A, __m128d __B) 
# 560
{ 
# 561
return __builtin_ia32_ucomisdle((__v2df)__A, (__v2df)__B); 
# 562
} 
# 564
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 565
_mm_ucomigt_sd(__m128d __A, __m128d __B) 
# 566
{ 
# 567
return __builtin_ia32_ucomisdgt((__v2df)__A, (__v2df)__B); 
# 568
} 
# 570
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 571
_mm_ucomige_sd(__m128d __A, __m128d __B) 
# 572
{ 
# 573
return __builtin_ia32_ucomisdge((__v2df)__A, (__v2df)__B); 
# 574
} 
# 576
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 577
_mm_ucomineq_sd(__m128d __A, __m128d __B) 
# 578
{ 
# 579
return __builtin_ia32_ucomisdneq((__v2df)__A, (__v2df)__B); 
# 580
} 
# 584
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 585
_mm_set_epi64x(long long __q1, long long __q0) 
# 586
{ 
# 587
return __extension__ (__m128i)(((__v2di){__q0, __q1})); 
# 588
} 
# 590
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 591
_mm_set_epi64(__m64 __q1, __m64 __q0) 
# 592
{ 
# 593
return _mm_set_epi64x((long long)__q1, (long long)__q0); 
# 594
} 
# 596
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 597
_mm_set_epi32(int __q3, int __q2, int __q1, int __q0) 
# 598
{ 
# 599
return __extension__ (__m128i)(((__v4si){__q0, __q1, __q2, __q3})); 
# 600
} 
# 602
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 603
_mm_set_epi16(short __q7, short __q6, short __q5, short __q4, short 
# 604
__q3, short __q2, short __q1, short __q0) 
# 605
{ 
# 606
return __extension__ (__m128i)(((__v8hi){__q0, __q1, __q2, __q3, __q4, __q5, __q6, __q7})); 
# 608
} 
# 610
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 611
_mm_set_epi8(char __q15, char __q14, char __q13, char __q12, char 
# 612
__q11, char __q10, char __q09, char __q08, char 
# 613
__q07, char __q06, char __q05, char __q04, char 
# 614
__q03, char __q02, char __q01, char __q00) 
# 615
{ 
# 616
return __extension__ (__m128i)(((__v16qi){__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15})); 
# 620
} 
# 624
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 625
_mm_set1_epi64x(long long __A) 
# 626
{ 
# 627
return _mm_set_epi64x(__A, __A); 
# 628
} 
# 630
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 631
_mm_set1_epi64(__m64 __A) 
# 632
{ 
# 633
return _mm_set_epi64(__A, __A); 
# 634
} 
# 636
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 637
_mm_set1_epi32(int __A) 
# 638
{ 
# 639
return _mm_set_epi32(__A, __A, __A, __A); 
# 640
} 
# 642
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 643
_mm_set1_epi16(short __A) 
# 644
{ 
# 645
return _mm_set_epi16(__A, __A, __A, __A, __A, __A, __A, __A); 
# 646
} 
# 648
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 649
_mm_set1_epi8(char __A) 
# 650
{ 
# 651
return _mm_set_epi8(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A); 
# 653
} 
# 658
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 659
_mm_setr_epi64(__m64 __q0, __m64 __q1) 
# 660
{ 
# 661
return _mm_set_epi64(__q1, __q0); 
# 662
} 
# 664
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 665
_mm_setr_epi32(int __q0, int __q1, int __q2, int __q3) 
# 666
{ 
# 667
return _mm_set_epi32(__q3, __q2, __q1, __q0); 
# 668
} 
# 670
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 671
_mm_setr_epi16(short __q0, short __q1, short __q2, short __q3, short 
# 672
__q4, short __q5, short __q6, short __q7) 
# 673
{ 
# 674
return _mm_set_epi16(__q7, __q6, __q5, __q4, __q3, __q2, __q1, __q0); 
# 675
} 
# 677
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 678
_mm_setr_epi8(char __q00, char __q01, char __q02, char __q03, char 
# 679
__q04, char __q05, char __q06, char __q07, char 
# 680
__q08, char __q09, char __q10, char __q11, char 
# 681
__q12, char __q13, char __q14, char __q15) 
# 682
{ 
# 683
return _mm_set_epi8(__q15, __q14, __q13, __q12, __q11, __q10, __q09, __q08, __q07, __q06, __q05, __q04, __q03, __q02, __q01, __q00); 
# 685
} 
# 689
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 690
_mm_load_si128(const __m128i *__P) 
# 691
{ 
# 692
return *__P; 
# 693
} 
# 695
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 696
_mm_loadu_si128(const __m128i *__P) 
# 697
{ 
# 698
return (__m128i)__builtin_ia32_loaddqu((const char *)__P); 
# 699
} 
# 701
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 702
_mm_loadl_epi64(const __m128i *__P) 
# 703
{ 
# 704
return _mm_set_epi64((__m64)0LL, *((__m64 *)__P)); 
# 705
} 
# 707
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 708
_mm_store_si128(__m128i *__P, __m128i __B) 
# 709
{ 
# 710
(*__P) = __B; 
# 711
} 
# 713
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 714
_mm_storeu_si128(__m128i *__P, __m128i __B) 
# 715
{ 
# 716
__builtin_ia32_storedqu((char *)__P, (__v16qi)__B); 
# 717
} 
# 719
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 720
_mm_storel_epi64(__m128i *__P, __m128i __B) 
# 721
{ 
# 722
(*((long long *)__P)) = (((__v2di)__B)[0]); 
# 723
} 
# 725
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 726
_mm_movepi64_pi64(__m128i __B) 
# 727
{ 
# 728
return (__m64)(((__v2di)__B)[0]); 
# 729
} 
# 731
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 732
_mm_movpi64_epi64(__m64 __A) 
# 733
{ 
# 734
return _mm_set_epi64((__m64)0LL, __A); 
# 735
} 
# 737
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 738
_mm_move_epi64(__m128i __A) 
# 739
{ 
# 740
return (__m128i)__builtin_ia32_movq128((__v2di)__A); 
# 741
} 
# 744
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 745
_mm_undefined_si128() 
# 746
{ 
# 747
__m128i __Y = __Y; 
# 748
return __Y; 
# 749
} 
# 752
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 753
_mm_setzero_si128() 
# 754
{ 
# 755
return __extension__ (__m128i)(((__v4si){0, 0, 0, 0})); 
# 756
} 
# 758
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 759
_mm_cvtepi32_pd(__m128i __A) 
# 760
{ 
# 761
return (__m128d)__builtin_ia32_cvtdq2pd((__v4si)__A); 
# 762
} 
# 764
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 765
_mm_cvtepi32_ps(__m128i __A) 
# 766
{ 
# 767
return (__m128)__builtin_ia32_cvtdq2ps((__v4si)__A); 
# 768
} 
# 770
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 771
_mm_cvtpd_epi32(__m128d __A) 
# 772
{ 
# 773
return (__m128i)__builtin_ia32_cvtpd2dq((__v2df)__A); 
# 774
} 
# 776
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 777
_mm_cvtpd_pi32(__m128d __A) 
# 778
{ 
# 779
return (__m64)__builtin_ia32_cvtpd2pi((__v2df)__A); 
# 780
} 
# 782
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 783
_mm_cvtpd_ps(__m128d __A) 
# 784
{ 
# 785
return (__m128)__builtin_ia32_cvtpd2ps((__v2df)__A); 
# 786
} 
# 788
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 789
_mm_cvttpd_epi32(__m128d __A) 
# 790
{ 
# 791
return (__m128i)__builtin_ia32_cvttpd2dq((__v2df)__A); 
# 792
} 
# 794
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 795
_mm_cvttpd_pi32(__m128d __A) 
# 796
{ 
# 797
return (__m64)__builtin_ia32_cvttpd2pi((__v2df)__A); 
# 798
} 
# 800
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 801
_mm_cvtpi32_pd(__m64 __A) 
# 802
{ 
# 803
return (__m128d)__builtin_ia32_cvtpi2pd((__v2si)__A); 
# 804
} 
# 806
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 807
_mm_cvtps_epi32(__m128 __A) 
# 808
{ 
# 809
return (__m128i)__builtin_ia32_cvtps2dq((__v4sf)__A); 
# 810
} 
# 812
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 813
_mm_cvttps_epi32(__m128 __A) 
# 814
{ 
# 815
return (__m128i)__builtin_ia32_cvttps2dq((__v4sf)__A); 
# 816
} 
# 818
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 819
_mm_cvtps_pd(__m128 __A) 
# 820
{ 
# 821
return (__m128d)__builtin_ia32_cvtps2pd((__v4sf)__A); 
# 822
} 
# 824
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 825
_mm_cvtsd_si32(__m128d __A) 
# 826
{ 
# 827
return __builtin_ia32_cvtsd2si((__v2df)__A); 
# 828
} 
# 832
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 833
_mm_cvtsd_si64(__m128d __A) 
# 834
{ 
# 835
return __builtin_ia32_cvtsd2si64((__v2df)__A); 
# 836
} 
# 839
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 840
_mm_cvtsd_si64x(__m128d __A) 
# 841
{ 
# 842
return __builtin_ia32_cvtsd2si64((__v2df)__A); 
# 843
} 
# 846
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 847
_mm_cvttsd_si32(__m128d __A) 
# 848
{ 
# 849
return __builtin_ia32_cvttsd2si((__v2df)__A); 
# 850
} 
# 854
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 855
_mm_cvttsd_si64(__m128d __A) 
# 856
{ 
# 857
return __builtin_ia32_cvttsd2si64((__v2df)__A); 
# 858
} 
# 861
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 862
_mm_cvttsd_si64x(__m128d __A) 
# 863
{ 
# 864
return __builtin_ia32_cvttsd2si64((__v2df)__A); 
# 865
} 
# 868
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 869
_mm_cvtsd_ss(__m128 __A, __m128d __B) 
# 870
{ 
# 871
return (__m128)__builtin_ia32_cvtsd2ss((__v4sf)__A, (__v2df)__B); 
# 872
} 
# 874
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 875
_mm_cvtsi32_sd(__m128d __A, int __B) 
# 876
{ 
# 877
return (__m128d)__builtin_ia32_cvtsi2sd((__v2df)__A, __B); 
# 878
} 
# 882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 883
_mm_cvtsi64_sd(__m128d __A, long long __B) 
# 884
{ 
# 885
return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B); 
# 886
} 
# 889
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 890
_mm_cvtsi64x_sd(__m128d __A, long long __B) 
# 891
{ 
# 892
return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B); 
# 893
} 
# 896
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 897
_mm_cvtss_sd(__m128d __A, __m128 __B) 
# 898
{ 
# 899
return (__m128d)__builtin_ia32_cvtss2sd((__v2df)__A, (__v4sf)__B); 
# 900
} 
# 903
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 904
_mm_shuffle_pd(__m128d __A, __m128d __B, const int __mask) 
# 905
{ 
# 906
return (__m128d)__builtin_ia32_shufpd((__v2df)__A, (__v2df)__B, __mask); 
# 907
} 
# 914
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 915
_mm_unpackhi_pd(__m128d __A, __m128d __B) 
# 916
{ 
# 917
return (__m128d)__builtin_ia32_unpckhpd((__v2df)__A, (__v2df)__B); 
# 918
} 
# 920
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 921
_mm_unpacklo_pd(__m128d __A, __m128d __B) 
# 922
{ 
# 923
return (__m128d)__builtin_ia32_unpcklpd((__v2df)__A, (__v2df)__B); 
# 924
} 
# 926
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 927
_mm_loadh_pd(__m128d __A, const double *__B) 
# 928
{ 
# 929
return (__m128d)__builtin_ia32_loadhpd((__v2df)__A, __B); 
# 930
} 
# 932
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 933
_mm_loadl_pd(__m128d __A, const double *__B) 
# 934
{ 
# 935
return (__m128d)__builtin_ia32_loadlpd((__v2df)__A, __B); 
# 936
} 
# 938
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 939
_mm_movemask_pd(__m128d __A) 
# 940
{ 
# 941
return __builtin_ia32_movmskpd((__v2df)__A); 
# 942
} 
# 944
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 945
_mm_packs_epi16(__m128i __A, __m128i __B) 
# 946
{ 
# 947
return (__m128i)__builtin_ia32_packsswb128((__v8hi)__A, (__v8hi)__B); 
# 948
} 
# 950
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 951
_mm_packs_epi32(__m128i __A, __m128i __B) 
# 952
{ 
# 953
return (__m128i)__builtin_ia32_packssdw128((__v4si)__A, (__v4si)__B); 
# 954
} 
# 956
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 957
_mm_packus_epi16(__m128i __A, __m128i __B) 
# 958
{ 
# 959
return (__m128i)__builtin_ia32_packuswb128((__v8hi)__A, (__v8hi)__B); 
# 960
} 
# 962
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 963
_mm_unpackhi_epi8(__m128i __A, __m128i __B) 
# 964
{ 
# 965
return (__m128i)__builtin_ia32_punpckhbw128((__v16qi)__A, (__v16qi)__B); 
# 966
} 
# 968
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 969
_mm_unpackhi_epi16(__m128i __A, __m128i __B) 
# 970
{ 
# 971
return (__m128i)__builtin_ia32_punpckhwd128((__v8hi)__A, (__v8hi)__B); 
# 972
} 
# 974
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 975
_mm_unpackhi_epi32(__m128i __A, __m128i __B) 
# 976
{ 
# 977
return (__m128i)__builtin_ia32_punpckhdq128((__v4si)__A, (__v4si)__B); 
# 978
} 
# 980
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 981
_mm_unpackhi_epi64(__m128i __A, __m128i __B) 
# 982
{ 
# 983
return (__m128i)__builtin_ia32_punpckhqdq128((__v2di)__A, (__v2di)__B); 
# 984
} 
# 986
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 987
_mm_unpacklo_epi8(__m128i __A, __m128i __B) 
# 988
{ 
# 989
return (__m128i)__builtin_ia32_punpcklbw128((__v16qi)__A, (__v16qi)__B); 
# 990
} 
# 992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 993
_mm_unpacklo_epi16(__m128i __A, __m128i __B) 
# 994
{ 
# 995
return (__m128i)__builtin_ia32_punpcklwd128((__v8hi)__A, (__v8hi)__B); 
# 996
} 
# 998
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 999
_mm_unpacklo_epi32(__m128i __A, __m128i __B) 
# 1000
{ 
# 1001
return (__m128i)__builtin_ia32_punpckldq128((__v4si)__A, (__v4si)__B); 
# 1002
} 
# 1004
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1005
_mm_unpacklo_epi64(__m128i __A, __m128i __B) 
# 1006
{ 
# 1007
return (__m128i)__builtin_ia32_punpcklqdq128((__v2di)__A, (__v2di)__B); 
# 1008
} 
# 1010
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1011
_mm_add_epi8(__m128i __A, __m128i __B) 
# 1012
{ 
# 1013
return (__m128i)(((__v16qu)__A) + ((__v16qu)__B)); 
# 1014
} 
# 1016
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1017
_mm_add_epi16(__m128i __A, __m128i __B) 
# 1018
{ 
# 1019
return (__m128i)(((__v8hu)__A) + ((__v8hu)__B)); 
# 1020
} 
# 1022
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1023
_mm_add_epi32(__m128i __A, __m128i __B) 
# 1024
{ 
# 1025
return (__m128i)(((__v4su)__A) + ((__v4su)__B)); 
# 1026
} 
# 1028
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1029
_mm_add_epi64(__m128i __A, __m128i __B) 
# 1030
{ 
# 1031
return (__m128i)(((__v2du)__A) + ((__v2du)__B)); 
# 1032
} 
# 1034
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1035
_mm_adds_epi8(__m128i __A, __m128i __B) 
# 1036
{ 
# 1037
return (__m128i)__builtin_ia32_paddsb128((__v16qi)__A, (__v16qi)__B); 
# 1038
} 
# 1040
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1041
_mm_adds_epi16(__m128i __A, __m128i __B) 
# 1042
{ 
# 1043
return (__m128i)__builtin_ia32_paddsw128((__v8hi)__A, (__v8hi)__B); 
# 1044
} 
# 1046
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1047
_mm_adds_epu8(__m128i __A, __m128i __B) 
# 1048
{ 
# 1049
return (__m128i)__builtin_ia32_paddusb128((__v16qi)__A, (__v16qi)__B); 
# 1050
} 
# 1052
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1053
_mm_adds_epu16(__m128i __A, __m128i __B) 
# 1054
{ 
# 1055
return (__m128i)__builtin_ia32_paddusw128((__v8hi)__A, (__v8hi)__B); 
# 1056
} 
# 1058
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1059
_mm_sub_epi8(__m128i __A, __m128i __B) 
# 1060
{ 
# 1061
return (__m128i)(((__v16qu)__A) - ((__v16qu)__B)); 
# 1062
} 
# 1064
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1065
_mm_sub_epi16(__m128i __A, __m128i __B) 
# 1066
{ 
# 1067
return (__m128i)(((__v8hu)__A) - ((__v8hu)__B)); 
# 1068
} 
# 1070
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1071
_mm_sub_epi32(__m128i __A, __m128i __B) 
# 1072
{ 
# 1073
return (__m128i)(((__v4su)__A) - ((__v4su)__B)); 
# 1074
} 
# 1076
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1077
_mm_sub_epi64(__m128i __A, __m128i __B) 
# 1078
{ 
# 1079
return (__m128i)(((__v2du)__A) - ((__v2du)__B)); 
# 1080
} 
# 1082
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1083
_mm_subs_epi8(__m128i __A, __m128i __B) 
# 1084
{ 
# 1085
return (__m128i)__builtin_ia32_psubsb128((__v16qi)__A, (__v16qi)__B); 
# 1086
} 
# 1088
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1089
_mm_subs_epi16(__m128i __A, __m128i __B) 
# 1090
{ 
# 1091
return (__m128i)__builtin_ia32_psubsw128((__v8hi)__A, (__v8hi)__B); 
# 1092
} 
# 1094
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1095
_mm_subs_epu8(__m128i __A, __m128i __B) 
# 1096
{ 
# 1097
return (__m128i)__builtin_ia32_psubusb128((__v16qi)__A, (__v16qi)__B); 
# 1098
} 
# 1100
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1101
_mm_subs_epu16(__m128i __A, __m128i __B) 
# 1102
{ 
# 1103
return (__m128i)__builtin_ia32_psubusw128((__v8hi)__A, (__v8hi)__B); 
# 1104
} 
# 1106
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1107
_mm_madd_epi16(__m128i __A, __m128i __B) 
# 1108
{ 
# 1109
return (__m128i)__builtin_ia32_pmaddwd128((__v8hi)__A, (__v8hi)__B); 
# 1110
} 
# 1112
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1113
_mm_mulhi_epi16(__m128i __A, __m128i __B) 
# 1114
{ 
# 1115
return (__m128i)__builtin_ia32_pmulhw128((__v8hi)__A, (__v8hi)__B); 
# 1116
} 
# 1118
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1119
_mm_mullo_epi16(__m128i __A, __m128i __B) 
# 1120
{ 
# 1121
return (__m128i)(((__v8hu)__A) * ((__v8hu)__B)); 
# 1122
} 
# 1124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 1125
_mm_mul_su32(__m64 __A, __m64 __B) 
# 1126
{ 
# 1127
return (__m64)__builtin_ia32_pmuludq((__v2si)__A, (__v2si)__B); 
# 1128
} 
# 1130
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1131
_mm_mul_epu32(__m128i __A, __m128i __B) 
# 1132
{ 
# 1133
return (__m128i)__builtin_ia32_pmuludq128((__v4si)__A, (__v4si)__B); 
# 1134
} 
# 1136
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1137
_mm_slli_epi16(__m128i __A, int __B) 
# 1138
{ 
# 1139
return (__m128i)__builtin_ia32_psllwi128((__v8hi)__A, __B); 
# 1140
} 
# 1142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1143
_mm_slli_epi32(__m128i __A, int __B) 
# 1144
{ 
# 1145
return (__m128i)__builtin_ia32_pslldi128((__v4si)__A, __B); 
# 1146
} 
# 1148
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1149
_mm_slli_epi64(__m128i __A, int __B) 
# 1150
{ 
# 1151
return (__m128i)__builtin_ia32_psllqi128((__v2di)__A, __B); 
# 1152
} 
# 1154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1155
_mm_srai_epi16(__m128i __A, int __B) 
# 1156
{ 
# 1157
return (__m128i)__builtin_ia32_psrawi128((__v8hi)__A, __B); 
# 1158
} 
# 1160
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1161
_mm_srai_epi32(__m128i __A, int __B) 
# 1162
{ 
# 1163
return (__m128i)__builtin_ia32_psradi128((__v4si)__A, __B); 
# 1164
} 
# 1167
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1168
_mm_bsrli_si128(__m128i __A, const int __N) 
# 1169
{ 
# 1170
return (__m128i)__builtin_ia32_psrldqi128(__A, __N * 8); 
# 1171
} 
# 1173
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1174
_mm_bslli_si128(__m128i __A, const int __N) 
# 1175
{ 
# 1176
return (__m128i)__builtin_ia32_pslldqi128(__A, __N * 8); 
# 1177
} 
# 1179
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1180
_mm_srli_si128(__m128i __A, const int __N) 
# 1181
{ 
# 1182
return (__m128i)__builtin_ia32_psrldqi128(__A, __N * 8); 
# 1183
} 
# 1185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1186
_mm_slli_si128(__m128i __A, const int __N) 
# 1187
{ 
# 1188
return (__m128i)__builtin_ia32_pslldqi128(__A, __N * 8); 
# 1189
} 
# 1201
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1202
_mm_srli_epi16(__m128i __A, int __B) 
# 1203
{ 
# 1204
return (__m128i)__builtin_ia32_psrlwi128((__v8hi)__A, __B); 
# 1205
} 
# 1207
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1208
_mm_srli_epi32(__m128i __A, int __B) 
# 1209
{ 
# 1210
return (__m128i)__builtin_ia32_psrldi128((__v4si)__A, __B); 
# 1211
} 
# 1213
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1214
_mm_srli_epi64(__m128i __A, int __B) 
# 1215
{ 
# 1216
return (__m128i)__builtin_ia32_psrlqi128((__v2di)__A, __B); 
# 1217
} 
# 1219
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1220
_mm_sll_epi16(__m128i __A, __m128i __B) 
# 1221
{ 
# 1222
return (__m128i)__builtin_ia32_psllw128((__v8hi)__A, (__v8hi)__B); 
# 1223
} 
# 1225
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1226
_mm_sll_epi32(__m128i __A, __m128i __B) 
# 1227
{ 
# 1228
return (__m128i)__builtin_ia32_pslld128((__v4si)__A, (__v4si)__B); 
# 1229
} 
# 1231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1232
_mm_sll_epi64(__m128i __A, __m128i __B) 
# 1233
{ 
# 1234
return (__m128i)__builtin_ia32_psllq128((__v2di)__A, (__v2di)__B); 
# 1235
} 
# 1237
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1238
_mm_sra_epi16(__m128i __A, __m128i __B) 
# 1239
{ 
# 1240
return (__m128i)__builtin_ia32_psraw128((__v8hi)__A, (__v8hi)__B); 
# 1241
} 
# 1243
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1244
_mm_sra_epi32(__m128i __A, __m128i __B) 
# 1245
{ 
# 1246
return (__m128i)__builtin_ia32_psrad128((__v4si)__A, (__v4si)__B); 
# 1247
} 
# 1249
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1250
_mm_srl_epi16(__m128i __A, __m128i __B) 
# 1251
{ 
# 1252
return (__m128i)__builtin_ia32_psrlw128((__v8hi)__A, (__v8hi)__B); 
# 1253
} 
# 1255
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1256
_mm_srl_epi32(__m128i __A, __m128i __B) 
# 1257
{ 
# 1258
return (__m128i)__builtin_ia32_psrld128((__v4si)__A, (__v4si)__B); 
# 1259
} 
# 1261
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1262
_mm_srl_epi64(__m128i __A, __m128i __B) 
# 1263
{ 
# 1264
return (__m128i)__builtin_ia32_psrlq128((__v2di)__A, (__v2di)__B); 
# 1265
} 
# 1267
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1268
_mm_and_si128(__m128i __A, __m128i __B) 
# 1269
{ 
# 1270
return (__m128i)(((__v2du)__A) & ((__v2du)__B)); 
# 1271
} 
# 1273
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1274
_mm_andnot_si128(__m128i __A, __m128i __B) 
# 1275
{ 
# 1276
return (__m128i)__builtin_ia32_pandn128((__v2di)__A, (__v2di)__B); 
# 1277
} 
# 1279
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1280
_mm_or_si128(__m128i __A, __m128i __B) 
# 1281
{ 
# 1282
return (__m128i)(((__v2du)__A) | ((__v2du)__B)); 
# 1283
} 
# 1285
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1286
_mm_xor_si128(__m128i __A, __m128i __B) 
# 1287
{ 
# 1288
return (__m128i)(((__v2du)__A) ^ ((__v2du)__B)); 
# 1289
} 
# 1291
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1292
_mm_cmpeq_epi8(__m128i __A, __m128i __B) 
# 1293
{ 
# 1294
return (__m128i)(((__v16qi)__A) == ((__v16qi)__B)); 
# 1295
} 
# 1297
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1298
_mm_cmpeq_epi16(__m128i __A, __m128i __B) 
# 1299
{ 
# 1300
return (__m128i)(((__v8hi)__A) == ((__v8hi)__B)); 
# 1301
} 
# 1303
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1304
_mm_cmpeq_epi32(__m128i __A, __m128i __B) 
# 1305
{ 
# 1306
return (__m128i)(((__v4si)__A) == ((__v4si)__B)); 
# 1307
} 
# 1309
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1310
_mm_cmplt_epi8(__m128i __A, __m128i __B) 
# 1311
{ 
# 1312
return (__m128i)(((__v16qi)__A) < ((__v16qi)__B)); 
# 1313
} 
# 1315
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1316
_mm_cmplt_epi16(__m128i __A, __m128i __B) 
# 1317
{ 
# 1318
return (__m128i)(((__v8hi)__A) < ((__v8hi)__B)); 
# 1319
} 
# 1321
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1322
_mm_cmplt_epi32(__m128i __A, __m128i __B) 
# 1323
{ 
# 1324
return (__m128i)(((__v4si)__A) < ((__v4si)__B)); 
# 1325
} 
# 1327
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1328
_mm_cmpgt_epi8(__m128i __A, __m128i __B) 
# 1329
{ 
# 1330
return (__m128i)(((__v16qi)__A) > ((__v16qi)__B)); 
# 1331
} 
# 1333
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1334
_mm_cmpgt_epi16(__m128i __A, __m128i __B) 
# 1335
{ 
# 1336
return (__m128i)(((__v8hi)__A) > ((__v8hi)__B)); 
# 1337
} 
# 1339
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1340
_mm_cmpgt_epi32(__m128i __A, __m128i __B) 
# 1341
{ 
# 1342
return (__m128i)(((__v4si)__A) > ((__v4si)__B)); 
# 1343
} 
# 1346
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1347
_mm_extract_epi16(const __m128i __A, const int __N) 
# 1348
{ 
# 1349
return (unsigned short)__builtin_ia32_vec_ext_v8hi((__v8hi)__A, __N); 
# 1350
} 
# 1352
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1353
_mm_insert_epi16(const __m128i __A, const int __D, const int __N) 
# 1354
{ 
# 1355
return (__m128i)__builtin_ia32_vec_set_v8hi((__v8hi)__A, __D, __N); 
# 1356
} 
# 1365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1366
_mm_max_epi16(__m128i __A, __m128i __B) 
# 1367
{ 
# 1368
return (__m128i)__builtin_ia32_pmaxsw128((__v8hi)__A, (__v8hi)__B); 
# 1369
} 
# 1371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1372
_mm_max_epu8(__m128i __A, __m128i __B) 
# 1373
{ 
# 1374
return (__m128i)__builtin_ia32_pmaxub128((__v16qi)__A, (__v16qi)__B); 
# 1375
} 
# 1377
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1378
_mm_min_epi16(__m128i __A, __m128i __B) 
# 1379
{ 
# 1380
return (__m128i)__builtin_ia32_pminsw128((__v8hi)__A, (__v8hi)__B); 
# 1381
} 
# 1383
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1384
_mm_min_epu8(__m128i __A, __m128i __B) 
# 1385
{ 
# 1386
return (__m128i)__builtin_ia32_pminub128((__v16qi)__A, (__v16qi)__B); 
# 1387
} 
# 1389
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1390
_mm_movemask_epi8(__m128i __A) 
# 1391
{ 
# 1392
return __builtin_ia32_pmovmskb128((__v16qi)__A); 
# 1393
} 
# 1395
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1396
_mm_mulhi_epu16(__m128i __A, __m128i __B) 
# 1397
{ 
# 1398
return (__m128i)__builtin_ia32_pmulhuw128((__v8hi)__A, (__v8hi)__B); 
# 1399
} 
# 1402
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1403
_mm_shufflehi_epi16(__m128i __A, const int __mask) 
# 1404
{ 
# 1405
return (__m128i)__builtin_ia32_pshufhw((__v8hi)__A, __mask); 
# 1406
} 
# 1408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1409
_mm_shufflelo_epi16(__m128i __A, const int __mask) 
# 1410
{ 
# 1411
return (__m128i)__builtin_ia32_pshuflw((__v8hi)__A, __mask); 
# 1412
} 
# 1414
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1415
_mm_shuffle_epi32(__m128i __A, const int __mask) 
# 1416
{ 
# 1417
return (__m128i)__builtin_ia32_pshufd((__v4si)__A, __mask); 
# 1418
} 
# 1428
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1429
_mm_maskmoveu_si128(__m128i __A, __m128i __B, char *__C) 
# 1430
{ 
# 1431
__builtin_ia32_maskmovdqu((__v16qi)__A, (__v16qi)__B, __C); 
# 1432
} 
# 1434
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1435
_mm_avg_epu8(__m128i __A, __m128i __B) 
# 1436
{ 
# 1437
return (__m128i)__builtin_ia32_pavgb128((__v16qi)__A, (__v16qi)__B); 
# 1438
} 
# 1440
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1441
_mm_avg_epu16(__m128i __A, __m128i __B) 
# 1442
{ 
# 1443
return (__m128i)__builtin_ia32_pavgw128((__v8hi)__A, (__v8hi)__B); 
# 1444
} 
# 1446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1447
_mm_sad_epu8(__m128i __A, __m128i __B) 
# 1448
{ 
# 1449
return (__m128i)__builtin_ia32_psadbw128((__v16qi)__A, (__v16qi)__B); 
# 1450
} 
# 1452
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1453
_mm_stream_si32(int *__A, int __B) 
# 1454
{ 
# 1455
__builtin_ia32_movnti(__A, __B); 
# 1456
} 
# 1459
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1460
_mm_stream_si64(long long *__A, long long __B) 
# 1461
{ 
# 1462
__builtin_ia32_movnti64(__A, __B); 
# 1463
} 
# 1466
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1467
_mm_stream_si128(__m128i *__A, __m128i __B) 
# 1468
{ 
# 1469
__builtin_ia32_movntdq((__v2di *)__A, (__v2di)__B); 
# 1470
} 
# 1472
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1473
_mm_stream_pd(double *__A, __m128d __B) 
# 1474
{ 
# 1475
__builtin_ia32_movntpd(__A, (__v2df)__B); 
# 1476
} 
# 1478
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1479
_mm_clflush(const void *__A) 
# 1480
{ 
# 1481
__builtin_ia32_clflush(__A); 
# 1482
} 
# 1484
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1485
_mm_lfence() 
# 1486
{ 
# 1487
__builtin_ia32_lfence(); 
# 1488
} 
# 1490
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1491
_mm_mfence() 
# 1492
{ 
# 1493
__builtin_ia32_mfence(); 
# 1494
} 
# 1496
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1497
_mm_cvtsi32_si128(int __A) 
# 1498
{ 
# 1499
return _mm_set_epi32(0, 0, 0, __A); 
# 1500
} 
# 1504
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1505
_mm_cvtsi64_si128(long long __A) 
# 1506
{ 
# 1507
return _mm_set_epi64x(0, __A); 
# 1508
} 
# 1511
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1512
_mm_cvtsi64x_si128(long long __A) 
# 1513
{ 
# 1514
return _mm_set_epi64x(0, __A); 
# 1515
} 
# 1520
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1521
_mm_castpd_ps(__m128d __A) 
# 1522
{ 
# 1523
return (__m128)__A; 
# 1524
} 
# 1526
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1527
_mm_castpd_si128(__m128d __A) 
# 1528
{ 
# 1529
return (__m128i)__A; 
# 1530
} 
# 1532
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1533
_mm_castps_pd(__m128 __A) 
# 1534
{ 
# 1535
return (__m128d)__A; 
# 1536
} 
# 1538
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1539
_mm_castps_si128(__m128 __A) 
# 1540
{ 
# 1541
return (__m128i)__A; 
# 1542
} 
# 1544
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1545
_mm_castsi128_ps(__m128i __A) 
# 1546
{ 
# 1547
return (__m128)__A; 
# 1548
} 
# 1550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1551
_mm_castsi128_pd(__m128i __A) 
# 1552
{ 
# 1553
return (__m128d)__A; 
# 1554
} 
# 1261 "/usr/lib/gcc/x86_64-linux-gnu/5/include/xmmintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1262
_mm_pause() 
# 1263
{ 
# 1264
__builtin_ia32_pause(); 
# 1265
} 
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include/pmmintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "sse3" )
# 49
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 50
_mm_addsub_ps(__m128 __X, __m128 __Y) 
# 51
{ 
# 52
return (__m128)__builtin_ia32_addsubps((__v4sf)__X, (__v4sf)__Y); 
# 53
} 
# 55
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 56
_mm_hadd_ps(__m128 __X, __m128 __Y) 
# 57
{ 
# 58
return (__m128)__builtin_ia32_haddps((__v4sf)__X, (__v4sf)__Y); 
# 59
} 
# 61
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 62
_mm_hsub_ps(__m128 __X, __m128 __Y) 
# 63
{ 
# 64
return (__m128)__builtin_ia32_hsubps((__v4sf)__X, (__v4sf)__Y); 
# 65
} 
# 67
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 68
_mm_movehdup_ps(__m128 __X) 
# 69
{ 
# 70
return (__m128)__builtin_ia32_movshdup((__v4sf)__X); 
# 71
} 
# 73
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 74
_mm_moveldup_ps(__m128 __X) 
# 75
{ 
# 76
return (__m128)__builtin_ia32_movsldup((__v4sf)__X); 
# 77
} 
# 79
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 80
_mm_addsub_pd(__m128d __X, __m128d __Y) 
# 81
{ 
# 82
return (__m128d)__builtin_ia32_addsubpd((__v2df)__X, (__v2df)__Y); 
# 83
} 
# 85
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 86
_mm_hadd_pd(__m128d __X, __m128d __Y) 
# 87
{ 
# 88
return (__m128d)__builtin_ia32_haddpd((__v2df)__X, (__v2df)__Y); 
# 89
} 
# 91
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 92
_mm_hsub_pd(__m128d __X, __m128d __Y) 
# 93
{ 
# 94
return (__m128d)__builtin_ia32_hsubpd((__v2df)__X, (__v2df)__Y); 
# 95
} 
# 97
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 98
_mm_loaddup_pd(const double *__P) 
# 99
{ 
# 100
return _mm_load1_pd(__P); 
# 101
} 
# 103
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 104
_mm_movedup_pd(__m128d __X) 
# 105
{ 
# 106
return _mm_shuffle_pd(__X, __X, (0 << 1) | 0); 
# 107
} 
# 109
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 110
_mm_lddqu_si128(const __m128i *__P) 
# 111
{ 
# 112
return (__m128i)__builtin_ia32_lddqu((const char *)__P); 
# 113
} 
# 115
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 116
_mm_monitor(const void *__P, unsigned __E, unsigned __H) 
# 117
{ 
# 118
__builtin_ia32_monitor(__P, __E, __H); 
# 119
} 
# 121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 122
_mm_mwait(unsigned __E, unsigned __H) 
# 123
{ 
# 124
__builtin_ia32_mwait(__E, __H); 
# 125
} 
# 129
#pragma GCC pop_options
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include/tmmintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "ssse3" )
# 39
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 40
_mm_hadd_epi16(__m128i __X, __m128i __Y) 
# 41
{ 
# 42
return (__m128i)__builtin_ia32_phaddw128((__v8hi)__X, (__v8hi)__Y); 
# 43
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 46
_mm_hadd_epi32(__m128i __X, __m128i __Y) 
# 47
{ 
# 48
return (__m128i)__builtin_ia32_phaddd128((__v4si)__X, (__v4si)__Y); 
# 49
} 
# 51
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 52
_mm_hadds_epi16(__m128i __X, __m128i __Y) 
# 53
{ 
# 54
return (__m128i)__builtin_ia32_phaddsw128((__v8hi)__X, (__v8hi)__Y); 
# 55
} 
# 57
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 58
_mm_hadd_pi16(__m64 __X, __m64 __Y) 
# 59
{ 
# 60
return (__m64)__builtin_ia32_phaddw((__v4hi)__X, (__v4hi)__Y); 
# 61
} 
# 63
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 64
_mm_hadd_pi32(__m64 __X, __m64 __Y) 
# 65
{ 
# 66
return (__m64)__builtin_ia32_phaddd((__v2si)__X, (__v2si)__Y); 
# 67
} 
# 69
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 70
_mm_hadds_pi16(__m64 __X, __m64 __Y) 
# 71
{ 
# 72
return (__m64)__builtin_ia32_phaddsw((__v4hi)__X, (__v4hi)__Y); 
# 73
} 
# 75
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 76
_mm_hsub_epi16(__m128i __X, __m128i __Y) 
# 77
{ 
# 78
return (__m128i)__builtin_ia32_phsubw128((__v8hi)__X, (__v8hi)__Y); 
# 79
} 
# 81
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 82
_mm_hsub_epi32(__m128i __X, __m128i __Y) 
# 83
{ 
# 84
return (__m128i)__builtin_ia32_phsubd128((__v4si)__X, (__v4si)__Y); 
# 85
} 
# 87
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 88
_mm_hsubs_epi16(__m128i __X, __m128i __Y) 
# 89
{ 
# 90
return (__m128i)__builtin_ia32_phsubsw128((__v8hi)__X, (__v8hi)__Y); 
# 91
} 
# 93
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 94
_mm_hsub_pi16(__m64 __X, __m64 __Y) 
# 95
{ 
# 96
return (__m64)__builtin_ia32_phsubw((__v4hi)__X, (__v4hi)__Y); 
# 97
} 
# 99
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 100
_mm_hsub_pi32(__m64 __X, __m64 __Y) 
# 101
{ 
# 102
return (__m64)__builtin_ia32_phsubd((__v2si)__X, (__v2si)__Y); 
# 103
} 
# 105
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 106
_mm_hsubs_pi16(__m64 __X, __m64 __Y) 
# 107
{ 
# 108
return (__m64)__builtin_ia32_phsubsw((__v4hi)__X, (__v4hi)__Y); 
# 109
} 
# 111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 112
_mm_maddubs_epi16(__m128i __X, __m128i __Y) 
# 113
{ 
# 114
return (__m128i)__builtin_ia32_pmaddubsw128((__v16qi)__X, (__v16qi)__Y); 
# 115
} 
# 117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 118
_mm_maddubs_pi16(__m64 __X, __m64 __Y) 
# 119
{ 
# 120
return (__m64)__builtin_ia32_pmaddubsw((__v8qi)__X, (__v8qi)__Y); 
# 121
} 
# 123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 124
_mm_mulhrs_epi16(__m128i __X, __m128i __Y) 
# 125
{ 
# 126
return (__m128i)__builtin_ia32_pmulhrsw128((__v8hi)__X, (__v8hi)__Y); 
# 127
} 
# 129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 130
_mm_mulhrs_pi16(__m64 __X, __m64 __Y) 
# 131
{ 
# 132
return (__m64)__builtin_ia32_pmulhrsw((__v4hi)__X, (__v4hi)__Y); 
# 133
} 
# 135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 136
_mm_shuffle_epi8(__m128i __X, __m128i __Y) 
# 137
{ 
# 138
return (__m128i)__builtin_ia32_pshufb128((__v16qi)__X, (__v16qi)__Y); 
# 139
} 
# 141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 142
_mm_shuffle_pi8(__m64 __X, __m64 __Y) 
# 143
{ 
# 144
return (__m64)__builtin_ia32_pshufb((__v8qi)__X, (__v8qi)__Y); 
# 145
} 
# 147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 148
_mm_sign_epi8(__m128i __X, __m128i __Y) 
# 149
{ 
# 150
return (__m128i)__builtin_ia32_psignb128((__v16qi)__X, (__v16qi)__Y); 
# 151
} 
# 153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 154
_mm_sign_epi16(__m128i __X, __m128i __Y) 
# 155
{ 
# 156
return (__m128i)__builtin_ia32_psignw128((__v8hi)__X, (__v8hi)__Y); 
# 157
} 
# 159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 160
_mm_sign_epi32(__m128i __X, __m128i __Y) 
# 161
{ 
# 162
return (__m128i)__builtin_ia32_psignd128((__v4si)__X, (__v4si)__Y); 
# 163
} 
# 165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 166
_mm_sign_pi8(__m64 __X, __m64 __Y) 
# 167
{ 
# 168
return (__m64)__builtin_ia32_psignb((__v8qi)__X, (__v8qi)__Y); 
# 169
} 
# 171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 172
_mm_sign_pi16(__m64 __X, __m64 __Y) 
# 173
{ 
# 174
return (__m64)__builtin_ia32_psignw((__v4hi)__X, (__v4hi)__Y); 
# 175
} 
# 177
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 178
_mm_sign_pi32(__m64 __X, __m64 __Y) 
# 179
{ 
# 180
return (__m64)__builtin_ia32_psignd((__v2si)__X, (__v2si)__Y); 
# 181
} 
# 184
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 185
_mm_alignr_epi8(__m128i __X, __m128i __Y, const int __N) 
# 186
{ 
# 187
return (__m128i)__builtin_ia32_palignr128((__v2di)__X, (__v2di)__Y, __N * 8); 
# 189
} 
# 191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 192
_mm_alignr_pi8(__m64 __X, __m64 __Y, const int __N) 
# 193
{ 
# 194
return (__m64)__builtin_ia32_palignr((__v1di)__X, (__v1di)__Y, __N * 8); 
# 196
} 
# 208
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 209
_mm_abs_epi8(__m128i __X) 
# 210
{ 
# 211
return (__m128i)__builtin_ia32_pabsb128((__v16qi)__X); 
# 212
} 
# 214
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 215
_mm_abs_epi16(__m128i __X) 
# 216
{ 
# 217
return (__m128i)__builtin_ia32_pabsw128((__v8hi)__X); 
# 218
} 
# 220
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 221
_mm_abs_epi32(__m128i __X) 
# 222
{ 
# 223
return (__m128i)__builtin_ia32_pabsd128((__v4si)__X); 
# 224
} 
# 226
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 227
_mm_abs_pi8(__m64 __X) 
# 228
{ 
# 229
return (__m64)__builtin_ia32_pabsb((__v8qi)__X); 
# 230
} 
# 232
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 233
_mm_abs_pi16(__m64 __X) 
# 234
{ 
# 235
return (__m64)__builtin_ia32_pabsw((__v4hi)__X); 
# 236
} 
# 238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 239
_mm_abs_pi32(__m64 __X) 
# 240
{ 
# 241
return (__m64)__builtin_ia32_pabsd((__v2si)__X); 
# 242
} 
# 246
#pragma GCC pop_options
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include/ammintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "sse4a" )
# 39
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 40
_mm_stream_sd(double *__P, __m128d __Y) 
# 41
{ 
# 42
__builtin_ia32_movntsd(__P, (__v2df)__Y); 
# 43
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 46
_mm_stream_ss(float *__P, __m128 __Y) 
# 47
{ 
# 48
__builtin_ia32_movntss(__P, (__v4sf)__Y); 
# 49
} 
# 51
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 52
_mm_extract_si64(__m128i __X, __m128i __Y) 
# 53
{ 
# 54
return (__m128i)__builtin_ia32_extrq((__v2di)__X, (__v16qi)__Y); 
# 55
} 
# 58
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 59
_mm_extracti_si64(__m128i __X, const unsigned __I, const unsigned __L) 
# 60
{ 
# 61
return (__m128i)__builtin_ia32_extrqi((__v2di)__X, __I, __L); 
# 62
} 
# 69
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 70
_mm_insert_si64(__m128i __X, __m128i __Y) 
# 71
{ 
# 72
return (__m128i)__builtin_ia32_insertq((__v2di)__X, (__v2di)__Y); 
# 73
} 
# 76
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 77
_mm_inserti_si64(__m128i __X, __m128i __Y, const unsigned __I, const unsigned __L) 
# 78
{ 
# 79
return (__m128i)__builtin_ia32_insertqi((__v2di)__X, (__v2di)__Y, __I, __L); 
# 80
} 
# 90
#pragma GCC pop_options
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include/smmintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "sse4.1" )
# 66
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 67
_mm_testz_si128(__m128i __M, __m128i __V) 
# 68
{ 
# 69
return __builtin_ia32_ptestz128((__v2di)__M, (__v2di)__V); 
# 70
} 
# 74
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 75
_mm_testc_si128(__m128i __M, __m128i __V) 
# 76
{ 
# 77
return __builtin_ia32_ptestc128((__v2di)__M, (__v2di)__V); 
# 78
} 
# 82
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 83
_mm_testnzc_si128(__m128i __M, __m128i __V) 
# 84
{ 
# 85
return __builtin_ia32_ptestnzc128((__v2di)__M, (__v2di)__V); 
# 86
} 
# 99
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 100
_mm_round_pd(__m128d __V, const int __M) 
# 101
{ 
# 102
return (__m128d)__builtin_ia32_roundpd((__v2df)__V, __M); 
# 103
} 
# 105
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 106
_mm_round_sd(__m128d __D, __m128d __V, const int __M) 
# 107
{ 
# 108
return (__m128d)__builtin_ia32_roundsd((__v2df)__D, (__v2df)__V, __M); 
# 111
} 
# 124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 125
_mm_round_ps(__m128 __V, const int __M) 
# 126
{ 
# 127
return (__m128)__builtin_ia32_roundps((__v4sf)__V, __M); 
# 128
} 
# 130
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 131
_mm_round_ss(__m128 __D, __m128 __V, const int __M) 
# 132
{ 
# 133
return (__m128)__builtin_ia32_roundss((__v4sf)__D, (__v4sf)__V, __M); 
# 136
} 
# 165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 166
_mm_blend_epi16(__m128i __X, __m128i __Y, const int __M) 
# 167
{ 
# 168
return (__m128i)__builtin_ia32_pblendw128((__v8hi)__X, (__v8hi)__Y, __M); 
# 171
} 
# 178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 179
_mm_blendv_epi8(__m128i __X, __m128i __Y, __m128i __M) 
# 180
{ 
# 181
return (__m128i)__builtin_ia32_pblendvb128((__v16qi)__X, (__v16qi)__Y, (__v16qi)__M); 
# 184
} 
# 190
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 191
_mm_blend_ps(__m128 __X, __m128 __Y, const int __M) 
# 192
{ 
# 193
return (__m128)__builtin_ia32_blendps((__v4sf)__X, (__v4sf)__Y, __M); 
# 196
} 
# 203
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 204
_mm_blendv_ps(__m128 __X, __m128 __Y, __m128 __M) 
# 205
{ 
# 206
return (__m128)__builtin_ia32_blendvps((__v4sf)__X, (__v4sf)__Y, (__v4sf)__M); 
# 209
} 
# 215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 216
_mm_blend_pd(__m128d __X, __m128d __Y, const int __M) 
# 217
{ 
# 218
return (__m128d)__builtin_ia32_blendpd((__v2df)__X, (__v2df)__Y, __M); 
# 221
} 
# 228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 229
_mm_blendv_pd(__m128d __X, __m128d __Y, __m128d __M) 
# 230
{ 
# 231
return (__m128d)__builtin_ia32_blendvpd((__v2df)__X, (__v2df)__Y, (__v2df)__M); 
# 234
} 
# 240
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 241
_mm_dp_ps(__m128 __X, __m128 __Y, const int __M) 
# 242
{ 
# 243
return (__m128)__builtin_ia32_dpps((__v4sf)__X, (__v4sf)__Y, __M); 
# 246
} 
# 248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 249
_mm_dp_pd(__m128d __X, __m128d __Y, const int __M) 
# 250
{ 
# 251
return (__m128d)__builtin_ia32_dppd((__v2df)__X, (__v2df)__Y, __M); 
# 254
} 
# 267
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 268
_mm_cmpeq_epi64(__m128i __X, __m128i __Y) 
# 269
{ 
# 270
return (__m128i)(((__v2di)__X) == ((__v2di)__Y)); 
# 271
} 
# 275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 276
_mm_min_epi8(__m128i __X, __m128i __Y) 
# 277
{ 
# 278
return (__m128i)__builtin_ia32_pminsb128((__v16qi)__X, (__v16qi)__Y); 
# 279
} 
# 281
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 282
_mm_max_epi8(__m128i __X, __m128i __Y) 
# 283
{ 
# 284
return (__m128i)__builtin_ia32_pmaxsb128((__v16qi)__X, (__v16qi)__Y); 
# 285
} 
# 287
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 288
_mm_min_epu16(__m128i __X, __m128i __Y) 
# 289
{ 
# 290
return (__m128i)__builtin_ia32_pminuw128((__v8hi)__X, (__v8hi)__Y); 
# 291
} 
# 293
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 294
_mm_max_epu16(__m128i __X, __m128i __Y) 
# 295
{ 
# 296
return (__m128i)__builtin_ia32_pmaxuw128((__v8hi)__X, (__v8hi)__Y); 
# 297
} 
# 299
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 300
_mm_min_epi32(__m128i __X, __m128i __Y) 
# 301
{ 
# 302
return (__m128i)__builtin_ia32_pminsd128((__v4si)__X, (__v4si)__Y); 
# 303
} 
# 305
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 306
_mm_max_epi32(__m128i __X, __m128i __Y) 
# 307
{ 
# 308
return (__m128i)__builtin_ia32_pmaxsd128((__v4si)__X, (__v4si)__Y); 
# 309
} 
# 311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 312
_mm_min_epu32(__m128i __X, __m128i __Y) 
# 313
{ 
# 314
return (__m128i)__builtin_ia32_pminud128((__v4si)__X, (__v4si)__Y); 
# 315
} 
# 317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 318
_mm_max_epu32(__m128i __X, __m128i __Y) 
# 319
{ 
# 320
return (__m128i)__builtin_ia32_pmaxud128((__v4si)__X, (__v4si)__Y); 
# 321
} 
# 325
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 326
_mm_mullo_epi32(__m128i __X, __m128i __Y) 
# 327
{ 
# 328
return (__m128i)(((__v4su)__X) * ((__v4su)__Y)); 
# 329
} 
# 333
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 334
_mm_mul_epi32(__m128i __X, __m128i __Y) 
# 335
{ 
# 336
return (__m128i)__builtin_ia32_pmuldq128((__v4si)__X, (__v4si)__Y); 
# 337
} 
# 345
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 346
_mm_insert_ps(__m128 __D, __m128 __S, const int __N) 
# 347
{ 
# 348
return (__m128)__builtin_ia32_insertps128((__v4sf)__D, (__v4sf)__S, __N); 
# 351
} 
# 365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 366
_mm_extract_ps(__m128 __X, const int __N) 
# 367
{ 
# 368
union { int i; float f; } __tmp; 
# 369
(__tmp.f) = __builtin_ia32_vec_ext_v4sf((__v4sf)__X, __N); 
# 370
return __tmp.i; 
# 371
} 
# 398
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 399
_mm_insert_epi8(__m128i __D, int __S, const int __N) 
# 400
{ 
# 401
return (__m128i)__builtin_ia32_vec_set_v16qi((__v16qi)__D, __S, __N); 
# 403
} 
# 405
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 406
_mm_insert_epi32(__m128i __D, int __S, const int __N) 
# 407
{ 
# 408
return (__m128i)__builtin_ia32_vec_set_v4si((__v4si)__D, __S, __N); 
# 410
} 
# 413
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 414
_mm_insert_epi64(__m128i __D, long long __S, const int __N) 
# 415
{ 
# 416
return (__m128i)__builtin_ia32_vec_set_v2di((__v2di)__D, __S, __N); 
# 418
} 
# 440
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 441
_mm_extract_epi8(__m128i __X, const int __N) 
# 442
{ 
# 443
return (unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)__X, __N); 
# 444
} 
# 446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 447
_mm_extract_epi32(__m128i __X, const int __N) 
# 448
{ 
# 449
return __builtin_ia32_vec_ext_v4si((__v4si)__X, __N); 
# 450
} 
# 453
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 454
_mm_extract_epi64(__m128i __X, const int __N) 
# 455
{ 
# 456
return __builtin_ia32_vec_ext_v2di((__v2di)__X, __N); 
# 457
} 
# 473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 474
_mm_minpos_epu16(__m128i __X) 
# 475
{ 
# 476
return (__m128i)__builtin_ia32_phminposuw128((__v8hi)__X); 
# 477
} 
# 481
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 482
_mm_cvtepi8_epi32(__m128i __X) 
# 483
{ 
# 484
return (__m128i)__builtin_ia32_pmovsxbd128((__v16qi)__X); 
# 485
} 
# 487
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 488
_mm_cvtepi16_epi32(__m128i __X) 
# 489
{ 
# 490
return (__m128i)__builtin_ia32_pmovsxwd128((__v8hi)__X); 
# 491
} 
# 493
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 494
_mm_cvtepi8_epi64(__m128i __X) 
# 495
{ 
# 496
return (__m128i)__builtin_ia32_pmovsxbq128((__v16qi)__X); 
# 497
} 
# 499
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 500
_mm_cvtepi32_epi64(__m128i __X) 
# 501
{ 
# 502
return (__m128i)__builtin_ia32_pmovsxdq128((__v4si)__X); 
# 503
} 
# 505
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 506
_mm_cvtepi16_epi64(__m128i __X) 
# 507
{ 
# 508
return (__m128i)__builtin_ia32_pmovsxwq128((__v8hi)__X); 
# 509
} 
# 511
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 512
_mm_cvtepi8_epi16(__m128i __X) 
# 513
{ 
# 514
return (__m128i)__builtin_ia32_pmovsxbw128((__v16qi)__X); 
# 515
} 
# 519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 520
_mm_cvtepu8_epi32(__m128i __X) 
# 521
{ 
# 522
return (__m128i)__builtin_ia32_pmovzxbd128((__v16qi)__X); 
# 523
} 
# 525
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 526
_mm_cvtepu16_epi32(__m128i __X) 
# 527
{ 
# 528
return (__m128i)__builtin_ia32_pmovzxwd128((__v8hi)__X); 
# 529
} 
# 531
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 532
_mm_cvtepu8_epi64(__m128i __X) 
# 533
{ 
# 534
return (__m128i)__builtin_ia32_pmovzxbq128((__v16qi)__X); 
# 535
} 
# 537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 538
_mm_cvtepu32_epi64(__m128i __X) 
# 539
{ 
# 540
return (__m128i)__builtin_ia32_pmovzxdq128((__v4si)__X); 
# 541
} 
# 543
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 544
_mm_cvtepu16_epi64(__m128i __X) 
# 545
{ 
# 546
return (__m128i)__builtin_ia32_pmovzxwq128((__v8hi)__X); 
# 547
} 
# 549
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 550
_mm_cvtepu8_epi16(__m128i __X) 
# 551
{ 
# 552
return (__m128i)__builtin_ia32_pmovzxbw128((__v16qi)__X); 
# 553
} 
# 557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 558
_mm_packus_epi32(__m128i __X, __m128i __Y) 
# 559
{ 
# 560
return (__m128i)__builtin_ia32_packusdw128((__v4si)__X, (__v4si)__Y); 
# 561
} 
# 568
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 569
_mm_mpsadbw_epu8(__m128i __X, __m128i __Y, const int __M) 
# 570
{ 
# 571
return (__m128i)__builtin_ia32_mpsadbw128((__v16qi)__X, (__v16qi)__Y, __M); 
# 573
} 
# 581
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 582
_mm_stream_load_si128(__m128i *__X) 
# 583
{ 
# 584
return (__m128i)__builtin_ia32_movntdqa((__v2di *)__X); 
# 585
} 
# 588
#pragma GCC push_options
#pragma GCC target ( "sse4.2" )
# 622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 623
_mm_cmpistrm(__m128i __X, __m128i __Y, const int __M) 
# 624
{ 
# 625
return (__m128i)__builtin_ia32_pcmpistrm128((__v16qi)__X, (__v16qi)__Y, __M); 
# 628
} 
# 630
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 631
_mm_cmpistri(__m128i __X, __m128i __Y, const int __M) 
# 632
{ 
# 633
return __builtin_ia32_pcmpistri128((__v16qi)__X, (__v16qi)__Y, __M); 
# 636
} 
# 638
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 639
_mm_cmpestrm(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) 
# 640
{ 
# 641
return (__m128i)__builtin_ia32_pcmpestrm128((__v16qi)__X, __LX, (__v16qi)__Y, __LY, __M); 
# 644
} 
# 646
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 647
_mm_cmpestri(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) 
# 648
{ 
# 649
return __builtin_ia32_pcmpestri128((__v16qi)__X, __LX, (__v16qi)__Y, __LY, __M); 
# 652
} 
# 675
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 676
_mm_cmpistra(__m128i __X, __m128i __Y, const int __M) 
# 677
{ 
# 678
return __builtin_ia32_pcmpistria128((__v16qi)__X, (__v16qi)__Y, __M); 
# 681
} 
# 683
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 684
_mm_cmpistrc(__m128i __X, __m128i __Y, const int __M) 
# 685
{ 
# 686
return __builtin_ia32_pcmpistric128((__v16qi)__X, (__v16qi)__Y, __M); 
# 689
} 
# 691
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 692
_mm_cmpistro(__m128i __X, __m128i __Y, const int __M) 
# 693
{ 
# 694
return __builtin_ia32_pcmpistrio128((__v16qi)__X, (__v16qi)__Y, __M); 
# 697
} 
# 699
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 700
_mm_cmpistrs(__m128i __X, __m128i __Y, const int __M) 
# 701
{ 
# 702
return __builtin_ia32_pcmpistris128((__v16qi)__X, (__v16qi)__Y, __M); 
# 705
} 
# 707
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 708
_mm_cmpistrz(__m128i __X, __m128i __Y, const int __M) 
# 709
{ 
# 710
return __builtin_ia32_pcmpistriz128((__v16qi)__X, (__v16qi)__Y, __M); 
# 713
} 
# 715
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 716
_mm_cmpestra(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) 
# 717
{ 
# 718
return __builtin_ia32_pcmpestria128((__v16qi)__X, __LX, (__v16qi)__Y, __LY, __M); 
# 721
} 
# 723
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 724
_mm_cmpestrc(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) 
# 725
{ 
# 726
return __builtin_ia32_pcmpestric128((__v16qi)__X, __LX, (__v16qi)__Y, __LY, __M); 
# 729
} 
# 731
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 732
_mm_cmpestro(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) 
# 733
{ 
# 734
return __builtin_ia32_pcmpestrio128((__v16qi)__X, __LX, (__v16qi)__Y, __LY, __M); 
# 737
} 
# 739
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 740
_mm_cmpestrs(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) 
# 741
{ 
# 742
return __builtin_ia32_pcmpestris128((__v16qi)__X, __LX, (__v16qi)__Y, __LY, __M); 
# 745
} 
# 747
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 748
_mm_cmpestrz(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) 
# 749
{ 
# 750
return __builtin_ia32_pcmpestriz128((__v16qi)__X, __LX, (__v16qi)__Y, __LY, __M); 
# 753
} 
# 795
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 796
_mm_cmpgt_epi64(__m128i __X, __m128i __Y) 
# 797
{ 
# 798
return (__m128i)(((__v2di)__X) > ((__v2di)__Y)); 
# 799
} 
# 803
#pragma GCC pop_options
# 808
#pragma GCC pop_options
# 28 "/usr/lib/gcc/x86_64-linux-gnu/5/include/popcntintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "popcnt" )
# 34
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 35
_mm_popcnt_u32(unsigned __X) 
# 36
{ 
# 37
return __builtin_popcount(__X); 
# 38
} 
# 41
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 42
_mm_popcnt_u64(unsigned long long __X) 
# 43
{ 
# 44
return __builtin_popcountll(__X); 
# 45
} 
# 50
#pragma GCC pop_options
# 814 "/usr/lib/gcc/x86_64-linux-gnu/5/include/smmintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "sse4.1" )
# 820
#pragma GCC push_options
#pragma GCC target ( "sse4.2" )
# 826
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 827
_mm_crc32_u8(unsigned __C, unsigned char __V) 
# 828
{ 
# 829
return __builtin_ia32_crc32qi(__C, __V); 
# 830
} 
# 832
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 833
_mm_crc32_u16(unsigned __C, unsigned short __V) 
# 834
{ 
# 835
return __builtin_ia32_crc32hi(__C, __V); 
# 836
} 
# 838
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 839
_mm_crc32_u32(unsigned __C, unsigned __V) 
# 840
{ 
# 841
return __builtin_ia32_crc32si(__C, __V); 
# 842
} 
# 845
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 846
_mm_crc32_u64(unsigned long long __C, unsigned long long __V) 
# 847
{ 
# 848
return __builtin_ia32_crc32di(__C, __V); 
# 849
} 
# 854
#pragma GCC pop_options
# 859
#pragma GCC pop_options
# 36 "/usr/lib/gcc/x86_64-linux-gnu/5/include/wmmintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "aes" )
# 43
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 44
_mm_aesdec_si128(__m128i __X, __m128i __Y) 
# 45
{ 
# 46
return (__m128i)__builtin_ia32_aesdec128((__v2di)__X, (__v2di)__Y); 
# 47
} 
# 51
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 52
_mm_aesdeclast_si128(__m128i __X, __m128i __Y) 
# 53
{ 
# 54
return (__m128i)__builtin_ia32_aesdeclast128((__v2di)__X, (__v2di)__Y); 
# 56
} 
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 61
_mm_aesenc_si128(__m128i __X, __m128i __Y) 
# 62
{ 
# 63
return (__m128i)__builtin_ia32_aesenc128((__v2di)__X, (__v2di)__Y); 
# 64
} 
# 68
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 69
_mm_aesenclast_si128(__m128i __X, __m128i __Y) 
# 70
{ 
# 71
return (__m128i)__builtin_ia32_aesenclast128((__v2di)__X, (__v2di)__Y); 
# 72
} 
# 76
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 77
_mm_aesimc_si128(__m128i __X) 
# 78
{ 
# 79
return (__m128i)__builtin_ia32_aesimc128((__v2di)__X); 
# 80
} 
# 86
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 87
_mm_aeskeygenassist_si128(__m128i __X, const int __C) 
# 88
{ 
# 89
return (__m128i)__builtin_ia32_aeskeygenassist128((__v2di)__X, __C); 
# 90
} 
# 99
#pragma GCC pop_options
# 105
#pragma GCC push_options
#pragma GCC target ( "pclmul" )
# 115
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 116
_mm_clmulepi64_si128(__m128i __X, __m128i __Y, const int __I) 
# 117
{ 
# 118
return (__m128i)__builtin_ia32_pclmulqdq128((__v2di)__X, (__v2di)__Y, __I); 
# 120
} 
# 129
#pragma GCC pop_options
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avxintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx" )
# 41
typedef double __v4df __attribute((__vector_size__(32))); 
# 42
typedef float __v8sf __attribute((__vector_size__(32))); 
# 43
typedef long long __v4di __attribute((__vector_size__(32))); 
# 44
typedef unsigned long long __v4du __attribute((__vector_size__(32))); 
# 45
typedef int __v8si __attribute((__vector_size__(32))); 
# 46
typedef unsigned __v8su __attribute((__vector_size__(32))); 
# 47
typedef short __v16hi __attribute((__vector_size__(32))); 
# 48
typedef unsigned short __v16hu __attribute((__vector_size__(32))); 
# 49
typedef char __v32qi __attribute((__vector_size__(32))); 
# 50
typedef unsigned char __v32qu __attribute((__vector_size__(32))); 
# 54
typedef float __m256 __attribute((__vector_size__(32), __may_alias__)); 
# 56
typedef long long __m256i __attribute((__vector_size__(32), __may_alias__)); 
# 58
typedef double __m256d __attribute((__vector_size__(32), __may_alias__)); 
# 128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 129
_mm256_add_pd(__m256d __A, __m256d __B) 
# 130
{ 
# 131
return (__m256d)(((__v4df)__A) + ((__v4df)__B)); 
# 132
} 
# 134
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 135
_mm256_add_ps(__m256 __A, __m256 __B) 
# 136
{ 
# 137
return (__m256)(((__v8sf)__A) + ((__v8sf)__B)); 
# 138
} 
# 140
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 141
_mm256_addsub_pd(__m256d __A, __m256d __B) 
# 142
{ 
# 143
return (__m256d)__builtin_ia32_addsubpd256((__v4df)__A, (__v4df)__B); 
# 144
} 
# 146
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 147
_mm256_addsub_ps(__m256 __A, __m256 __B) 
# 148
{ 
# 149
return (__m256)__builtin_ia32_addsubps256((__v8sf)__A, (__v8sf)__B); 
# 150
} 
# 153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 154
_mm256_and_pd(__m256d __A, __m256d __B) 
# 155
{ 
# 156
return (__m256d)__builtin_ia32_andpd256((__v4df)__A, (__v4df)__B); 
# 157
} 
# 159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 160
_mm256_and_ps(__m256 __A, __m256 __B) 
# 161
{ 
# 162
return (__m256)__builtin_ia32_andps256((__v8sf)__A, (__v8sf)__B); 
# 163
} 
# 165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 166
_mm256_andnot_pd(__m256d __A, __m256d __B) 
# 167
{ 
# 168
return (__m256d)__builtin_ia32_andnpd256((__v4df)__A, (__v4df)__B); 
# 169
} 
# 171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 172
_mm256_andnot_ps(__m256 __A, __m256 __B) 
# 173
{ 
# 174
return (__m256)__builtin_ia32_andnps256((__v8sf)__A, (__v8sf)__B); 
# 175
} 
# 181
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 182
_mm256_blend_pd(__m256d __X, __m256d __Y, const int __M) 
# 183
{ 
# 184
return (__m256d)__builtin_ia32_blendpd256((__v4df)__X, (__v4df)__Y, __M); 
# 187
} 
# 189
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 190
_mm256_blend_ps(__m256 __X, __m256 __Y, const int __M) 
# 191
{ 
# 192
return (__m256)__builtin_ia32_blendps256((__v8sf)__X, (__v8sf)__Y, __M); 
# 195
} 
# 206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 207
_mm256_blendv_pd(__m256d __X, __m256d __Y, __m256d __M) 
# 208
{ 
# 209
return (__m256d)__builtin_ia32_blendvpd256((__v4df)__X, (__v4df)__Y, (__v4df)__M); 
# 212
} 
# 214
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 215
_mm256_blendv_ps(__m256 __X, __m256 __Y, __m256 __M) 
# 216
{ 
# 217
return (__m256)__builtin_ia32_blendvps256((__v8sf)__X, (__v8sf)__Y, (__v8sf)__M); 
# 220
} 
# 222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 223
_mm256_div_pd(__m256d __A, __m256d __B) 
# 224
{ 
# 225
return (__m256d)(((__v4df)__A) / ((__v4df)__B)); 
# 226
} 
# 228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 229
_mm256_div_ps(__m256 __A, __m256 __B) 
# 230
{ 
# 231
return (__m256)(((__v8sf)__A) / ((__v8sf)__B)); 
# 232
} 
# 238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 239
_mm256_dp_ps(__m256 __X, __m256 __Y, const int __M) 
# 240
{ 
# 241
return (__m256)__builtin_ia32_dpps256((__v8sf)__X, (__v8sf)__Y, __M); 
# 244
} 
# 251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 252
_mm256_hadd_pd(__m256d __X, __m256d __Y) 
# 253
{ 
# 254
return (__m256d)__builtin_ia32_haddpd256((__v4df)__X, (__v4df)__Y); 
# 255
} 
# 257
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 258
_mm256_hadd_ps(__m256 __X, __m256 __Y) 
# 259
{ 
# 260
return (__m256)__builtin_ia32_haddps256((__v8sf)__X, (__v8sf)__Y); 
# 261
} 
# 263
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 264
_mm256_hsub_pd(__m256d __X, __m256d __Y) 
# 265
{ 
# 266
return (__m256d)__builtin_ia32_hsubpd256((__v4df)__X, (__v4df)__Y); 
# 267
} 
# 269
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 270
_mm256_hsub_ps(__m256 __X, __m256 __Y) 
# 271
{ 
# 272
return (__m256)__builtin_ia32_hsubps256((__v8sf)__X, (__v8sf)__Y); 
# 273
} 
# 275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 276
_mm256_max_pd(__m256d __A, __m256d __B) 
# 277
{ 
# 278
return (__m256d)__builtin_ia32_maxpd256((__v4df)__A, (__v4df)__B); 
# 279
} 
# 281
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 282
_mm256_max_ps(__m256 __A, __m256 __B) 
# 283
{ 
# 284
return (__m256)__builtin_ia32_maxps256((__v8sf)__A, (__v8sf)__B); 
# 285
} 
# 287
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 288
_mm256_min_pd(__m256d __A, __m256d __B) 
# 289
{ 
# 290
return (__m256d)__builtin_ia32_minpd256((__v4df)__A, (__v4df)__B); 
# 291
} 
# 293
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 294
_mm256_min_ps(__m256 __A, __m256 __B) 
# 295
{ 
# 296
return (__m256)__builtin_ia32_minps256((__v8sf)__A, (__v8sf)__B); 
# 297
} 
# 299
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 300
_mm256_mul_pd(__m256d __A, __m256d __B) 
# 301
{ 
# 302
return (__m256d)(((__v4df)__A) * ((__v4df)__B)); 
# 303
} 
# 305
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 306
_mm256_mul_ps(__m256 __A, __m256 __B) 
# 307
{ 
# 308
return (__m256)(((__v8sf)__A) * ((__v8sf)__B)); 
# 309
} 
# 311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 312
_mm256_or_pd(__m256d __A, __m256d __B) 
# 313
{ 
# 314
return (__m256d)__builtin_ia32_orpd256((__v4df)__A, (__v4df)__B); 
# 315
} 
# 317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 318
_mm256_or_ps(__m256 __A, __m256 __B) 
# 319
{ 
# 320
return (__m256)__builtin_ia32_orps256((__v8sf)__A, (__v8sf)__B); 
# 321
} 
# 324
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 325
_mm256_shuffle_pd(__m256d __A, __m256d __B, const int __mask) 
# 326
{ 
# 327
return (__m256d)__builtin_ia32_shufpd256((__v4df)__A, (__v4df)__B, __mask); 
# 329
} 
# 331
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 332
_mm256_shuffle_ps(__m256 __A, __m256 __B, const int __mask) 
# 333
{ 
# 334
return (__m256)__builtin_ia32_shufps256((__v8sf)__A, (__v8sf)__B, __mask); 
# 336
} 
# 347
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 348
_mm256_sub_pd(__m256d __A, __m256d __B) 
# 349
{ 
# 350
return (__m256d)(((__v4df)__A) - ((__v4df)__B)); 
# 351
} 
# 353
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 354
_mm256_sub_ps(__m256 __A, __m256 __B) 
# 355
{ 
# 356
return (__m256)(((__v8sf)__A) - ((__v8sf)__B)); 
# 357
} 
# 359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 360
_mm256_xor_pd(__m256d __A, __m256d __B) 
# 361
{ 
# 362
return (__m256d)__builtin_ia32_xorpd256((__v4df)__A, (__v4df)__B); 
# 363
} 
# 365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 366
_mm256_xor_ps(__m256 __A, __m256 __B) 
# 367
{ 
# 368
return (__m256)__builtin_ia32_xorps256((__v8sf)__A, (__v8sf)__B); 
# 369
} 
# 372
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 373
_mm_cmp_pd(__m128d __X, __m128d __Y, const int __P) 
# 374
{ 
# 375
return (__m128d)__builtin_ia32_cmppd((__v2df)__X, (__v2df)__Y, __P); 
# 376
} 
# 378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 379
_mm_cmp_ps(__m128 __X, __m128 __Y, const int __P) 
# 380
{ 
# 381
return (__m128)__builtin_ia32_cmpps((__v4sf)__X, (__v4sf)__Y, __P); 
# 382
} 
# 384
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 385
_mm256_cmp_pd(__m256d __X, __m256d __Y, const int __P) 
# 386
{ 
# 387
return (__m256d)__builtin_ia32_cmppd256((__v4df)__X, (__v4df)__Y, __P); 
# 389
} 
# 391
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 392
_mm256_cmp_ps(__m256 __X, __m256 __Y, const int __P) 
# 393
{ 
# 394
return (__m256)__builtin_ia32_cmpps256((__v8sf)__X, (__v8sf)__Y, __P); 
# 396
} 
# 398
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 399
_mm_cmp_sd(__m128d __X, __m128d __Y, const int __P) 
# 400
{ 
# 401
return (__m128d)__builtin_ia32_cmpsd((__v2df)__X, (__v2df)__Y, __P); 
# 402
} 
# 404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 405
_mm_cmp_ss(__m128 __X, __m128 __Y, const int __P) 
# 406
{ 
# 407
return (__m128)__builtin_ia32_cmpss((__v4sf)__X, (__v4sf)__Y, __P); 
# 408
} 
# 435
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 436
_mm256_cvtepi32_pd(__m128i __A) 
# 437
{ 
# 438
return (__m256d)__builtin_ia32_cvtdq2pd256((__v4si)__A); 
# 439
} 
# 441
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 442
_mm256_cvtepi32_ps(__m256i __A) 
# 443
{ 
# 444
return (__m256)__builtin_ia32_cvtdq2ps256((__v8si)__A); 
# 445
} 
# 447
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 448
_mm256_cvtpd_ps(__m256d __A) 
# 449
{ 
# 450
return (__m128)__builtin_ia32_cvtpd2ps256((__v4df)__A); 
# 451
} 
# 453
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 454
_mm256_cvtps_epi32(__m256 __A) 
# 455
{ 
# 456
return (__m256i)__builtin_ia32_cvtps2dq256((__v8sf)__A); 
# 457
} 
# 459
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 460
_mm256_cvtps_pd(__m128 __A) 
# 461
{ 
# 462
return (__m256d)__builtin_ia32_cvtps2pd256((__v4sf)__A); 
# 463
} 
# 465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 466
_mm256_cvttpd_epi32(__m256d __A) 
# 467
{ 
# 468
return (__m128i)__builtin_ia32_cvttpd2dq256((__v4df)__A); 
# 469
} 
# 471
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 472
_mm256_cvtpd_epi32(__m256d __A) 
# 473
{ 
# 474
return (__m128i)__builtin_ia32_cvtpd2dq256((__v4df)__A); 
# 475
} 
# 477
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 478
_mm256_cvttps_epi32(__m256 __A) 
# 479
{ 
# 480
return (__m256i)__builtin_ia32_cvttps2dq256((__v8sf)__A); 
# 481
} 
# 484
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 485
_mm256_extractf128_pd(__m256d __X, const int __N) 
# 486
{ 
# 487
return (__m128d)__builtin_ia32_vextractf128_pd256((__v4df)__X, __N); 
# 488
} 
# 490
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 491
_mm256_extractf128_ps(__m256 __X, const int __N) 
# 492
{ 
# 493
return (__m128)__builtin_ia32_vextractf128_ps256((__v8sf)__X, __N); 
# 494
} 
# 496
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 497
_mm256_extractf128_si256(__m256i __X, const int __N) 
# 498
{ 
# 499
return (__m128i)__builtin_ia32_vextractf128_si256((__v8si)__X, __N); 
# 500
} 
# 502
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 503
_mm256_extract_epi32(__m256i __X, const int __N) 
# 504
{ 
# 505
__m128i __Y = _mm256_extractf128_si256(__X, __N >> 2); 
# 506
return _mm_extract_epi32(__Y, __N % 4); 
# 507
} 
# 509
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 510
_mm256_extract_epi16(__m256i __X, const int __N) 
# 511
{ 
# 512
__m128i __Y = _mm256_extractf128_si256(__X, __N >> 3); 
# 513
return _mm_extract_epi16(__Y, __N % 8); 
# 514
} 
# 516
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 517
_mm256_extract_epi8(__m256i __X, const int __N) 
# 518
{ 
# 519
__m128i __Y = _mm256_extractf128_si256(__X, __N >> 4); 
# 520
return _mm_extract_epi8(__Y, __N % 16); 
# 521
} 
# 524
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 525
_mm256_extract_epi64(__m256i __X, const int __N) 
# 526
{ 
# 527
__m128i __Y = _mm256_extractf128_si256(__X, __N >> 1); 
# 528
return _mm_extract_epi64(__Y, __N % 2); 
# 529
} 
# 575
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 576
_mm256_zeroall() 
# 577
{ 
# 578
__builtin_ia32_vzeroall(); 
# 579
} 
# 581
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 582
_mm256_zeroupper() 
# 583
{ 
# 584
__builtin_ia32_vzeroupper(); 
# 585
} 
# 587
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 588
_mm_permutevar_pd(__m128d __A, __m128i __C) 
# 589
{ 
# 590
return (__m128d)__builtin_ia32_vpermilvarpd((__v2df)__A, (__v2di)__C); 
# 592
} 
# 594
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 595
_mm256_permutevar_pd(__m256d __A, __m256i __C) 
# 596
{ 
# 597
return (__m256d)__builtin_ia32_vpermilvarpd256((__v4df)__A, (__v4di)__C); 
# 599
} 
# 601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 602
_mm_permutevar_ps(__m128 __A, __m128i __C) 
# 603
{ 
# 604
return (__m128)__builtin_ia32_vpermilvarps((__v4sf)__A, (__v4si)__C); 
# 606
} 
# 608
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 609
_mm256_permutevar_ps(__m256 __A, __m256i __C) 
# 610
{ 
# 611
return (__m256)__builtin_ia32_vpermilvarps256((__v8sf)__A, (__v8si)__C); 
# 613
} 
# 616
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 617
_mm_permute_pd(__m128d __X, const int __C) 
# 618
{ 
# 619
return (__m128d)__builtin_ia32_vpermilpd((__v2df)__X, __C); 
# 620
} 
# 622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 623
_mm256_permute_pd(__m256d __X, const int __C) 
# 624
{ 
# 625
return (__m256d)__builtin_ia32_vpermilpd256((__v4df)__X, __C); 
# 626
} 
# 628
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 629
_mm_permute_ps(__m128 __X, const int __C) 
# 630
{ 
# 631
return (__m128)__builtin_ia32_vpermilps((__v4sf)__X, __C); 
# 632
} 
# 634
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 635
_mm256_permute_ps(__m256 __X, const int __C) 
# 636
{ 
# 637
return (__m256)__builtin_ia32_vpermilps256((__v8sf)__X, __C); 
# 638
} 
# 654
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 655
_mm256_permute2f128_pd(__m256d __X, __m256d __Y, const int __C) 
# 656
{ 
# 657
return (__m256d)__builtin_ia32_vperm2f128_pd256((__v4df)__X, (__v4df)__Y, __C); 
# 660
} 
# 662
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 663
_mm256_permute2f128_ps(__m256 __X, __m256 __Y, const int __C) 
# 664
{ 
# 665
return (__m256)__builtin_ia32_vperm2f128_ps256((__v8sf)__X, (__v8sf)__Y, __C); 
# 668
} 
# 670
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 671
_mm256_permute2f128_si256(__m256i __X, __m256i __Y, const int __C) 
# 672
{ 
# 673
return (__m256i)__builtin_ia32_vperm2f128_si256((__v8si)__X, (__v8si)__Y, __C); 
# 676
} 
# 694
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 695
_mm_broadcast_ss(const float *__X) 
# 696
{ 
# 697
return (__m128)__builtin_ia32_vbroadcastss(__X); 
# 698
} 
# 700
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 701
_mm256_broadcast_sd(const double *__X) 
# 702
{ 
# 703
return (__m256d)__builtin_ia32_vbroadcastsd256(__X); 
# 704
} 
# 706
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 707
_mm256_broadcast_ss(const float *__X) 
# 708
{ 
# 709
return (__m256)__builtin_ia32_vbroadcastss256(__X); 
# 710
} 
# 712
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 713
_mm256_broadcast_pd(const __m128d *__X) 
# 714
{ 
# 715
return (__m256d)__builtin_ia32_vbroadcastf128_pd256(__X); 
# 716
} 
# 718
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 719
_mm256_broadcast_ps(const __m128 *__X) 
# 720
{ 
# 721
return (__m256)__builtin_ia32_vbroadcastf128_ps256(__X); 
# 722
} 
# 725
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 726
_mm256_insertf128_pd(__m256d __X, __m128d __Y, const int __O) 
# 727
{ 
# 728
return (__m256d)__builtin_ia32_vinsertf128_pd256((__v4df)__X, (__v2df)__Y, __O); 
# 731
} 
# 733
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 734
_mm256_insertf128_ps(__m256 __X, __m128 __Y, const int __O) 
# 735
{ 
# 736
return (__m256)__builtin_ia32_vinsertf128_ps256((__v8sf)__X, (__v4sf)__Y, __O); 
# 739
} 
# 741
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 742
_mm256_insertf128_si256(__m256i __X, __m128i __Y, const int __O) 
# 743
{ 
# 744
return (__m256i)__builtin_ia32_vinsertf128_si256((__v8si)__X, (__v4si)__Y, __O); 
# 747
} 
# 749
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 750
_mm256_insert_epi32(__m256i __X, int __D, const int __N) 
# 751
{ 
# 752
__m128i __Y = _mm256_extractf128_si256(__X, __N >> 2); 
# 753
__Y = _mm_insert_epi32(__Y, __D, __N % 4); 
# 754
return _mm256_insertf128_si256(__X, __Y, __N >> 2); 
# 755
} 
# 757
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 758
_mm256_insert_epi16(__m256i __X, int __D, const int __N) 
# 759
{ 
# 760
__m128i __Y = _mm256_extractf128_si256(__X, __N >> 3); 
# 761
__Y = _mm_insert_epi16(__Y, __D, __N % 8); 
# 762
return _mm256_insertf128_si256(__X, __Y, __N >> 3); 
# 763
} 
# 765
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 766
_mm256_insert_epi8(__m256i __X, int __D, const int __N) 
# 767
{ 
# 768
__m128i __Y = _mm256_extractf128_si256(__X, __N >> 4); 
# 769
__Y = _mm_insert_epi8(__Y, __D, __N % 16); 
# 770
return _mm256_insertf128_si256(__X, __Y, __N >> 4); 
# 771
} 
# 774
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 775
_mm256_insert_epi64(__m256i __X, long long __D, const int __N) 
# 776
{ 
# 777
__m128i __Y = _mm256_extractf128_si256(__X, __N >> 1); 
# 778
__Y = _mm_insert_epi64(__Y, __D, __N % 2); 
# 779
return _mm256_insertf128_si256(__X, __Y, __N >> 1); 
# 780
} 
# 833
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 834
_mm256_load_pd(const double *__P) 
# 835
{ 
# 836
return *((__m256d *)__P); 
# 837
} 
# 839
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 840
_mm256_store_pd(double *__P, __m256d __A) 
# 841
{ 
# 842
(*((__m256d *)__P)) = __A; 
# 843
} 
# 845
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 846
_mm256_load_ps(const float *__P) 
# 847
{ 
# 848
return *((__m256 *)__P); 
# 849
} 
# 851
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 852
_mm256_store_ps(float *__P, __m256 __A) 
# 853
{ 
# 854
(*((__m256 *)__P)) = __A; 
# 855
} 
# 857
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 858
_mm256_loadu_pd(const double *__P) 
# 859
{ 
# 860
return (__m256d)__builtin_ia32_loadupd256(__P); 
# 861
} 
# 863
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 864
_mm256_storeu_pd(double *__P, __m256d __A) 
# 865
{ 
# 866
__builtin_ia32_storeupd256(__P, (__v4df)__A); 
# 867
} 
# 869
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 870
_mm256_loadu_ps(const float *__P) 
# 871
{ 
# 872
return (__m256)__builtin_ia32_loadups256(__P); 
# 873
} 
# 875
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 876
_mm256_storeu_ps(float *__P, __m256 __A) 
# 877
{ 
# 878
__builtin_ia32_storeups256(__P, (__v8sf)__A); 
# 879
} 
# 881
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 882
_mm256_load_si256(const __m256i *__P) 
# 883
{ 
# 884
return *__P; 
# 885
} 
# 887
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 888
_mm256_store_si256(__m256i *__P, __m256i __A) 
# 889
{ 
# 890
(*__P) = __A; 
# 891
} 
# 893
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 894
_mm256_loadu_si256(const __m256i *__P) 
# 895
{ 
# 896
return (__m256i)__builtin_ia32_loaddqu256((const char *)__P); 
# 897
} 
# 899
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 900
_mm256_storeu_si256(__m256i *__P, __m256i __A) 
# 901
{ 
# 902
__builtin_ia32_storedqu256((char *)__P, (__v32qi)__A); 
# 903
} 
# 905
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 906
_mm_maskload_pd(const double *__P, __m128i __M) 
# 907
{ 
# 908
return (__m128d)__builtin_ia32_maskloadpd((const __v2df *)__P, (__v2di)__M); 
# 910
} 
# 912
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 913
_mm_maskstore_pd(double *__P, __m128i __M, __m128d __A) 
# 914
{ 
# 915
__builtin_ia32_maskstorepd((__v2df *)__P, (__v2di)__M, (__v2df)__A); 
# 916
} 
# 918
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 919
_mm256_maskload_pd(const double *__P, __m256i __M) 
# 920
{ 
# 921
return (__m256d)__builtin_ia32_maskloadpd256((const __v4df *)__P, (__v4di)__M); 
# 923
} 
# 925
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 926
_mm256_maskstore_pd(double *__P, __m256i __M, __m256d __A) 
# 927
{ 
# 928
__builtin_ia32_maskstorepd256((__v4df *)__P, (__v4di)__M, (__v4df)__A); 
# 929
} 
# 931
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 932
_mm_maskload_ps(const float *__P, __m128i __M) 
# 933
{ 
# 934
return (__m128)__builtin_ia32_maskloadps((const __v4sf *)__P, (__v4si)__M); 
# 936
} 
# 938
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 939
_mm_maskstore_ps(float *__P, __m128i __M, __m128 __A) 
# 940
{ 
# 941
__builtin_ia32_maskstoreps((__v4sf *)__P, (__v4si)__M, (__v4sf)__A); 
# 942
} 
# 944
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 945
_mm256_maskload_ps(const float *__P, __m256i __M) 
# 946
{ 
# 947
return (__m256)__builtin_ia32_maskloadps256((const __v8sf *)__P, (__v8si)__M); 
# 949
} 
# 951
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 952
_mm256_maskstore_ps(float *__P, __m256i __M, __m256 __A) 
# 953
{ 
# 954
__builtin_ia32_maskstoreps256((__v8sf *)__P, (__v8si)__M, (__v8sf)__A); 
# 955
} 
# 957
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 958
_mm256_movehdup_ps(__m256 __X) 
# 959
{ 
# 960
return (__m256)__builtin_ia32_movshdup256((__v8sf)__X); 
# 961
} 
# 963
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 964
_mm256_moveldup_ps(__m256 __X) 
# 965
{ 
# 966
return (__m256)__builtin_ia32_movsldup256((__v8sf)__X); 
# 967
} 
# 969
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 970
_mm256_movedup_pd(__m256d __X) 
# 971
{ 
# 972
return (__m256d)__builtin_ia32_movddup256((__v4df)__X); 
# 973
} 
# 975
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 976
_mm256_lddqu_si256(const __m256i *__P) 
# 977
{ 
# 978
return (__m256i)__builtin_ia32_lddqu256((const char *)__P); 
# 979
} 
# 981
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 982
_mm256_stream_si256(__m256i *__A, __m256i __B) 
# 983
{ 
# 984
__builtin_ia32_movntdq256((__v4di *)__A, (__v4di)__B); 
# 985
} 
# 987
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 988
_mm256_stream_pd(double *__A, __m256d __B) 
# 989
{ 
# 990
__builtin_ia32_movntpd256(__A, (__v4df)__B); 
# 991
} 
# 993
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 994
_mm256_stream_ps(float *__P, __m256 __A) 
# 995
{ 
# 996
__builtin_ia32_movntps256(__P, (__v8sf)__A); 
# 997
} 
# 999
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1000
_mm256_rcp_ps(__m256 __A) 
# 1001
{ 
# 1002
return (__m256)__builtin_ia32_rcpps256((__v8sf)__A); 
# 1003
} 
# 1005
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1006
_mm256_rsqrt_ps(__m256 __A) 
# 1007
{ 
# 1008
return (__m256)__builtin_ia32_rsqrtps256((__v8sf)__A); 
# 1009
} 
# 1011
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1012
_mm256_sqrt_pd(__m256d __A) 
# 1013
{ 
# 1014
return (__m256d)__builtin_ia32_sqrtpd256((__v4df)__A); 
# 1015
} 
# 1017
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1018
_mm256_sqrt_ps(__m256 __A) 
# 1019
{ 
# 1020
return (__m256)__builtin_ia32_sqrtps256((__v8sf)__A); 
# 1021
} 
# 1024
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1025
_mm256_round_pd(__m256d __V, const int __M) 
# 1026
{ 
# 1027
return (__m256d)__builtin_ia32_roundpd256((__v4df)__V, __M); 
# 1028
} 
# 1030
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1031
_mm256_round_ps(__m256 __V, const int __M) 
# 1032
{ 
# 1033
return (__m256)__builtin_ia32_roundps256((__v8sf)__V, __M); 
# 1034
} 
# 1048
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1049
_mm256_unpackhi_pd(__m256d __A, __m256d __B) 
# 1050
{ 
# 1051
return (__m256d)__builtin_ia32_unpckhpd256((__v4df)__A, (__v4df)__B); 
# 1052
} 
# 1054
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1055
_mm256_unpacklo_pd(__m256d __A, __m256d __B) 
# 1056
{ 
# 1057
return (__m256d)__builtin_ia32_unpcklpd256((__v4df)__A, (__v4df)__B); 
# 1058
} 
# 1060
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1061
_mm256_unpackhi_ps(__m256 __A, __m256 __B) 
# 1062
{ 
# 1063
return (__m256)__builtin_ia32_unpckhps256((__v8sf)__A, (__v8sf)__B); 
# 1064
} 
# 1066
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1067
_mm256_unpacklo_ps(__m256 __A, __m256 __B) 
# 1068
{ 
# 1069
return (__m256)__builtin_ia32_unpcklps256((__v8sf)__A, (__v8sf)__B); 
# 1070
} 
# 1072
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1073
_mm_testz_pd(__m128d __M, __m128d __V) 
# 1074
{ 
# 1075
return __builtin_ia32_vtestzpd((__v2df)__M, (__v2df)__V); 
# 1076
} 
# 1078
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1079
_mm_testc_pd(__m128d __M, __m128d __V) 
# 1080
{ 
# 1081
return __builtin_ia32_vtestcpd((__v2df)__M, (__v2df)__V); 
# 1082
} 
# 1084
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1085
_mm_testnzc_pd(__m128d __M, __m128d __V) 
# 1086
{ 
# 1087
return __builtin_ia32_vtestnzcpd((__v2df)__M, (__v2df)__V); 
# 1088
} 
# 1090
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1091
_mm_testz_ps(__m128 __M, __m128 __V) 
# 1092
{ 
# 1093
return __builtin_ia32_vtestzps((__v4sf)__M, (__v4sf)__V); 
# 1094
} 
# 1096
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1097
_mm_testc_ps(__m128 __M, __m128 __V) 
# 1098
{ 
# 1099
return __builtin_ia32_vtestcps((__v4sf)__M, (__v4sf)__V); 
# 1100
} 
# 1102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1103
_mm_testnzc_ps(__m128 __M, __m128 __V) 
# 1104
{ 
# 1105
return __builtin_ia32_vtestnzcps((__v4sf)__M, (__v4sf)__V); 
# 1106
} 
# 1108
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1109
_mm256_testz_pd(__m256d __M, __m256d __V) 
# 1110
{ 
# 1111
return __builtin_ia32_vtestzpd256((__v4df)__M, (__v4df)__V); 
# 1112
} 
# 1114
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1115
_mm256_testc_pd(__m256d __M, __m256d __V) 
# 1116
{ 
# 1117
return __builtin_ia32_vtestcpd256((__v4df)__M, (__v4df)__V); 
# 1118
} 
# 1120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1121
_mm256_testnzc_pd(__m256d __M, __m256d __V) 
# 1122
{ 
# 1123
return __builtin_ia32_vtestnzcpd256((__v4df)__M, (__v4df)__V); 
# 1124
} 
# 1126
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1127
_mm256_testz_ps(__m256 __M, __m256 __V) 
# 1128
{ 
# 1129
return __builtin_ia32_vtestzps256((__v8sf)__M, (__v8sf)__V); 
# 1130
} 
# 1132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1133
_mm256_testc_ps(__m256 __M, __m256 __V) 
# 1134
{ 
# 1135
return __builtin_ia32_vtestcps256((__v8sf)__M, (__v8sf)__V); 
# 1136
} 
# 1138
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1139
_mm256_testnzc_ps(__m256 __M, __m256 __V) 
# 1140
{ 
# 1141
return __builtin_ia32_vtestnzcps256((__v8sf)__M, (__v8sf)__V); 
# 1142
} 
# 1144
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1145
_mm256_testz_si256(__m256i __M, __m256i __V) 
# 1146
{ 
# 1147
return __builtin_ia32_ptestz256((__v4di)__M, (__v4di)__V); 
# 1148
} 
# 1150
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1151
_mm256_testc_si256(__m256i __M, __m256i __V) 
# 1152
{ 
# 1153
return __builtin_ia32_ptestc256((__v4di)__M, (__v4di)__V); 
# 1154
} 
# 1156
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1157
_mm256_testnzc_si256(__m256i __M, __m256i __V) 
# 1158
{ 
# 1159
return __builtin_ia32_ptestnzc256((__v4di)__M, (__v4di)__V); 
# 1160
} 
# 1162
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1163
_mm256_movemask_pd(__m256d __A) 
# 1164
{ 
# 1165
return __builtin_ia32_movmskpd256((__v4df)__A); 
# 1166
} 
# 1168
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 1169
_mm256_movemask_ps(__m256 __A) 
# 1170
{ 
# 1171
return __builtin_ia32_movmskps256((__v8sf)__A); 
# 1172
} 
# 1174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1175
_mm256_undefined_pd() 
# 1176
{ 
# 1177
__m256d __Y = __Y; 
# 1178
return __Y; 
# 1179
} 
# 1181
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1182
_mm256_undefined_ps() 
# 1183
{ 
# 1184
__m256 __Y = __Y; 
# 1185
return __Y; 
# 1186
} 
# 1188
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1189
_mm256_undefined_si256() 
# 1190
{ 
# 1191
__m256i __Y = __Y; 
# 1192
return __Y; 
# 1193
} 
# 1195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1196
_mm256_setzero_pd() 
# 1197
{ 
# 1198
return __extension__ ((__m256d){(0.0), (0.0), (0.0), (0.0)}); 
# 1199
} 
# 1201
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1202
_mm256_setzero_ps() 
# 1203
{ 
# 1204
return __extension__ ((__m256){((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0))}); 
# 1206
} 
# 1208
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1209
_mm256_setzero_si256() 
# 1210
{ 
# 1211
return __extension__ (__m256i)(((__v4di){(0), (0), (0), (0)})); 
# 1212
} 
# 1215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1216
_mm256_set_pd(double __A, double __B, double __C, double __D) 
# 1217
{ 
# 1218
return __extension__ ((__m256d){__D, __C, __B, __A}); 
# 1219
} 
# 1222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1223
_mm256_set_ps(float __A, float __B, float __C, float __D, float 
# 1224
__E, float __F, float __G, float __H) 
# 1225
{ 
# 1226
return __extension__ ((__m256){__H, __G, __F, __E, __D, __C, __B, __A}); 
# 1228
} 
# 1231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1232
_mm256_set_epi32(int __A, int __B, int __C, int __D, int 
# 1233
__E, int __F, int __G, int __H) 
# 1234
{ 
# 1235
return __extension__ (__m256i)(((__v8si){__H, __G, __F, __E, __D, __C, __B, __A})); 
# 1237
} 
# 1239
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1240
_mm256_set_epi16(short __q15, short __q14, short __q13, short __q12, short 
# 1241
__q11, short __q10, short __q09, short __q08, short 
# 1242
__q07, short __q06, short __q05, short __q04, short 
# 1243
__q03, short __q02, short __q01, short __q00) 
# 1244
{ 
# 1245
return __extension__ (__m256i)(((__v16hi){__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15})); 
# 1249
} 
# 1251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1252
_mm256_set_epi8(char __q31, char __q30, char __q29, char __q28, char 
# 1253
__q27, char __q26, char __q25, char __q24, char 
# 1254
__q23, char __q22, char __q21, char __q20, char 
# 1255
__q19, char __q18, char __q17, char __q16, char 
# 1256
__q15, char __q14, char __q13, char __q12, char 
# 1257
__q11, char __q10, char __q09, char __q08, char 
# 1258
__q07, char __q06, char __q05, char __q04, char 
# 1259
__q03, char __q02, char __q01, char __q00) 
# 1260
{ 
# 1261
return __extension__ (__m256i)(((__v32qi){__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15, __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23, __q24, __q25, __q26, __q27, __q28, __q29, __q30, __q31})); 
# 1267
} 
# 1269
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1270
_mm256_set_epi64x(long long __A, long long __B, long long __C, long long 
# 1271
__D) 
# 1272
{ 
# 1273
return __extension__ (__m256i)(((__v4di){__D, __C, __B, __A})); 
# 1274
} 
# 1277
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1278
_mm256_set1_pd(double __A) 
# 1279
{ 
# 1280
return __extension__ ((__m256d){__A, __A, __A, __A}); 
# 1281
} 
# 1284
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1285
_mm256_set1_ps(float __A) 
# 1286
{ 
# 1287
return __extension__ ((__m256){__A, __A, __A, __A, __A, __A, __A, __A}); 
# 1289
} 
# 1292
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1293
_mm256_set1_epi32(int __A) 
# 1294
{ 
# 1295
return __extension__ (__m256i)(((__v8si){__A, __A, __A, __A, __A, __A, __A, __A})); 
# 1297
} 
# 1299
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1300
_mm256_set1_epi16(short __A) 
# 1301
{ 
# 1302
return _mm256_set_epi16(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A); 
# 1304
} 
# 1306
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1307
_mm256_set1_epi8(char __A) 
# 1308
{ 
# 1309
return _mm256_set_epi8(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A); 
# 1313
} 
# 1315
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1316
_mm256_set1_epi64x(long long __A) 
# 1317
{ 
# 1318
return __extension__ (__m256i)(((__v4di){__A, __A, __A, __A})); 
# 1319
} 
# 1324
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1325
_mm256_setr_pd(double __A, double __B, double __C, double __D) 
# 1326
{ 
# 1327
return _mm256_set_pd(__D, __C, __B, __A); 
# 1328
} 
# 1330
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1331
_mm256_setr_ps(float __A, float __B, float __C, float __D, float 
# 1332
__E, float __F, float __G, float __H) 
# 1333
{ 
# 1334
return _mm256_set_ps(__H, __G, __F, __E, __D, __C, __B, __A); 
# 1335
} 
# 1337
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1338
_mm256_setr_epi32(int __A, int __B, int __C, int __D, int 
# 1339
__E, int __F, int __G, int __H) 
# 1340
{ 
# 1341
return _mm256_set_epi32(__H, __G, __F, __E, __D, __C, __B, __A); 
# 1342
} 
# 1344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1345
_mm256_setr_epi16(short __q15, short __q14, short __q13, short __q12, short 
# 1346
__q11, short __q10, short __q09, short __q08, short 
# 1347
__q07, short __q06, short __q05, short __q04, short 
# 1348
__q03, short __q02, short __q01, short __q00) 
# 1349
{ 
# 1350
return _mm256_set_epi16(__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15); 
# 1354
} 
# 1356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1357
_mm256_setr_epi8(char __q31, char __q30, char __q29, char __q28, char 
# 1358
__q27, char __q26, char __q25, char __q24, char 
# 1359
__q23, char __q22, char __q21, char __q20, char 
# 1360
__q19, char __q18, char __q17, char __q16, char 
# 1361
__q15, char __q14, char __q13, char __q12, char 
# 1362
__q11, char __q10, char __q09, char __q08, char 
# 1363
__q07, char __q06, char __q05, char __q04, char 
# 1364
__q03, char __q02, char __q01, char __q00) 
# 1365
{ 
# 1366
return _mm256_set_epi8(__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15, __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23, __q24, __q25, __q26, __q27, __q28, __q29, __q30, __q31); 
# 1374
} 
# 1376
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1377
_mm256_setr_epi64x(long long __A, long long __B, long long __C, long long 
# 1378
__D) 
# 1379
{ 
# 1380
return _mm256_set_epi64x(__D, __C, __B, __A); 
# 1381
} 
# 1385
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1386
_mm256_castpd_ps(__m256d __A) 
# 1387
{ 
# 1388
return (__m256)__A; 
# 1389
} 
# 1391
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1392
_mm256_castpd_si256(__m256d __A) 
# 1393
{ 
# 1394
return (__m256i)__A; 
# 1395
} 
# 1397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1398
_mm256_castps_pd(__m256 __A) 
# 1399
{ 
# 1400
return (__m256d)__A; 
# 1401
} 
# 1403
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1404
_mm256_castps_si256(__m256 __A) 
# 1405
{ 
# 1406
return (__m256i)__A; 
# 1407
} 
# 1409
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1410
_mm256_castsi256_ps(__m256i __A) 
# 1411
{ 
# 1412
return (__m256)__A; 
# 1413
} 
# 1415
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1416
_mm256_castsi256_pd(__m256i __A) 
# 1417
{ 
# 1418
return (__m256d)__A; 
# 1419
} 
# 1421
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1422
_mm256_castpd256_pd128(__m256d __A) 
# 1423
{ 
# 1424
return (__m128d)__builtin_ia32_pd_pd256((__v4df)__A); 
# 1425
} 
# 1427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1428
_mm256_castps256_ps128(__m256 __A) 
# 1429
{ 
# 1430
return (__m128)__builtin_ia32_ps_ps256((__v8sf)__A); 
# 1431
} 
# 1433
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1434
_mm256_castsi256_si128(__m256i __A) 
# 1435
{ 
# 1436
return (__m128i)__builtin_ia32_si_si256((__v8si)__A); 
# 1437
} 
# 1444
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1445
_mm256_castpd128_pd256(__m128d __A) 
# 1446
{ 
# 1447
return (__m256d)__builtin_ia32_pd256_pd((__v2df)__A); 
# 1448
} 
# 1450
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1451
_mm256_castps128_ps256(__m128 __A) 
# 1452
{ 
# 1453
return (__m256)__builtin_ia32_ps256_ps((__v4sf)__A); 
# 1454
} 
# 1456
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1457
_mm256_castsi128_si256(__m128i __A) 
# 1458
{ 
# 1459
return (__m256i)__builtin_ia32_si256_si((__v4si)__A); 
# 1460
} 
# 1464
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx2intrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx2" )
# 42
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 43
_mm256_mpsadbw_epu8(__m256i __X, __m256i __Y, const int __M) 
# 44
{ 
# 45
return (__m256i)__builtin_ia32_mpsadbw256((__v32qi)__X, (__v32qi)__Y, __M); 
# 47
} 
# 55
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 56
_mm256_abs_epi8(__m256i __A) 
# 57
{ 
# 58
return (__m256i)__builtin_ia32_pabsb256((__v32qi)__A); 
# 59
} 
# 62
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 63
_mm256_abs_epi16(__m256i __A) 
# 64
{ 
# 65
return (__m256i)__builtin_ia32_pabsw256((__v16hi)__A); 
# 66
} 
# 69
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 70
_mm256_abs_epi32(__m256i __A) 
# 71
{ 
# 72
return (__m256i)__builtin_ia32_pabsd256((__v8si)__A); 
# 73
} 
# 76
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 77
_mm256_packs_epi32(__m256i __A, __m256i __B) 
# 78
{ 
# 79
return (__m256i)__builtin_ia32_packssdw256((__v8si)__A, (__v8si)__B); 
# 80
} 
# 83
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 84
_mm256_packs_epi16(__m256i __A, __m256i __B) 
# 85
{ 
# 86
return (__m256i)__builtin_ia32_packsswb256((__v16hi)__A, (__v16hi)__B); 
# 87
} 
# 90
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 91
_mm256_packus_epi32(__m256i __A, __m256i __B) 
# 92
{ 
# 93
return (__m256i)__builtin_ia32_packusdw256((__v8si)__A, (__v8si)__B); 
# 94
} 
# 97
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 98
_mm256_packus_epi16(__m256i __A, __m256i __B) 
# 99
{ 
# 100
return (__m256i)__builtin_ia32_packuswb256((__v16hi)__A, (__v16hi)__B); 
# 101
} 
# 104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 105
_mm256_add_epi8(__m256i __A, __m256i __B) 
# 106
{ 
# 107
return (__m256i)(((__v32qu)__A) + ((__v32qu)__B)); 
# 108
} 
# 111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 112
_mm256_add_epi16(__m256i __A, __m256i __B) 
# 113
{ 
# 114
return (__m256i)(((__v16hu)__A) + ((__v16hu)__B)); 
# 115
} 
# 118
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 119
_mm256_add_epi32(__m256i __A, __m256i __B) 
# 120
{ 
# 121
return (__m256i)(((__v8su)__A) + ((__v8su)__B)); 
# 122
} 
# 125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 126
_mm256_add_epi64(__m256i __A, __m256i __B) 
# 127
{ 
# 128
return (__m256i)(((__v4du)__A) + ((__v4du)__B)); 
# 129
} 
# 132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 133
_mm256_adds_epi8(__m256i __A, __m256i __B) 
# 134
{ 
# 135
return (__m256i)__builtin_ia32_paddsb256((__v32qi)__A, (__v32qi)__B); 
# 136
} 
# 139
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 140
_mm256_adds_epi16(__m256i __A, __m256i __B) 
# 141
{ 
# 142
return (__m256i)__builtin_ia32_paddsw256((__v16hi)__A, (__v16hi)__B); 
# 143
} 
# 146
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 147
_mm256_adds_epu8(__m256i __A, __m256i __B) 
# 148
{ 
# 149
return (__m256i)__builtin_ia32_paddusb256((__v32qi)__A, (__v32qi)__B); 
# 150
} 
# 153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 154
_mm256_adds_epu16(__m256i __A, __m256i __B) 
# 155
{ 
# 156
return (__m256i)__builtin_ia32_paddusw256((__v16hi)__A, (__v16hi)__B); 
# 157
} 
# 161
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 162
_mm256_alignr_epi8(__m256i __A, __m256i __B, const int __N) 
# 163
{ 
# 164
return (__m256i)__builtin_ia32_palignr256((__v4di)__A, (__v4di)__B, __N * 8); 
# 167
} 
# 178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 179
_mm256_and_si256(__m256i __A, __m256i __B) 
# 180
{ 
# 181
return (__m256i)(((__v4du)__A) & ((__v4du)__B)); 
# 182
} 
# 185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 186
_mm256_andnot_si256(__m256i __A, __m256i __B) 
# 187
{ 
# 188
return (__m256i)__builtin_ia32_andnotsi256((__v4di)__A, (__v4di)__B); 
# 189
} 
# 192
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 193
_mm256_avg_epu8(__m256i __A, __m256i __B) 
# 194
{ 
# 195
return (__m256i)__builtin_ia32_pavgb256((__v32qi)__A, (__v32qi)__B); 
# 196
} 
# 199
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 200
_mm256_avg_epu16(__m256i __A, __m256i __B) 
# 201
{ 
# 202
return (__m256i)__builtin_ia32_pavgw256((__v16hi)__A, (__v16hi)__B); 
# 203
} 
# 206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 207
_mm256_blendv_epi8(__m256i __X, __m256i __Y, __m256i __M) 
# 208
{ 
# 209
return (__m256i)__builtin_ia32_pblendvb256((__v32qi)__X, (__v32qi)__Y, (__v32qi)__M); 
# 212
} 
# 216
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 217
_mm256_blend_epi16(__m256i __X, __m256i __Y, const int __M) 
# 218
{ 
# 219
return (__m256i)__builtin_ia32_pblendw256((__v16hi)__X, (__v16hi)__Y, __M); 
# 222
} 
# 230
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 231
_mm256_cmpeq_epi8(__m256i __A, __m256i __B) 
# 232
{ 
# 233
return (__m256i)(((__v32qi)__A) == ((__v32qi)__B)); 
# 234
} 
# 237
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 238
_mm256_cmpeq_epi16(__m256i __A, __m256i __B) 
# 239
{ 
# 240
return (__m256i)(((__v16hi)__A) == ((__v16hi)__B)); 
# 241
} 
# 244
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 245
_mm256_cmpeq_epi32(__m256i __A, __m256i __B) 
# 246
{ 
# 247
return (__m256i)(((__v8si)__A) == ((__v8si)__B)); 
# 248
} 
# 251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 252
_mm256_cmpeq_epi64(__m256i __A, __m256i __B) 
# 253
{ 
# 254
return (__m256i)(((__v4di)__A) == ((__v4di)__B)); 
# 255
} 
# 258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 259
_mm256_cmpgt_epi8(__m256i __A, __m256i __B) 
# 260
{ 
# 261
return (__m256i)(((__v32qi)__A) > ((__v32qi)__B)); 
# 262
} 
# 265
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 266
_mm256_cmpgt_epi16(__m256i __A, __m256i __B) 
# 267
{ 
# 268
return (__m256i)(((__v16hi)__A) > ((__v16hi)__B)); 
# 269
} 
# 272
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 273
_mm256_cmpgt_epi32(__m256i __A, __m256i __B) 
# 274
{ 
# 275
return (__m256i)(((__v8si)__A) > ((__v8si)__B)); 
# 276
} 
# 279
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 280
_mm256_cmpgt_epi64(__m256i __A, __m256i __B) 
# 281
{ 
# 282
return (__m256i)(((__v4di)__A) > ((__v4di)__B)); 
# 283
} 
# 286
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 287
_mm256_hadd_epi16(__m256i __X, __m256i __Y) 
# 288
{ 
# 289
return (__m256i)__builtin_ia32_phaddw256((__v16hi)__X, (__v16hi)__Y); 
# 291
} 
# 294
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 295
_mm256_hadd_epi32(__m256i __X, __m256i __Y) 
# 296
{ 
# 297
return (__m256i)__builtin_ia32_phaddd256((__v8si)__X, (__v8si)__Y); 
# 298
} 
# 301
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 302
_mm256_hadds_epi16(__m256i __X, __m256i __Y) 
# 303
{ 
# 304
return (__m256i)__builtin_ia32_phaddsw256((__v16hi)__X, (__v16hi)__Y); 
# 306
} 
# 309
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 310
_mm256_hsub_epi16(__m256i __X, __m256i __Y) 
# 311
{ 
# 312
return (__m256i)__builtin_ia32_phsubw256((__v16hi)__X, (__v16hi)__Y); 
# 314
} 
# 317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 318
_mm256_hsub_epi32(__m256i __X, __m256i __Y) 
# 319
{ 
# 320
return (__m256i)__builtin_ia32_phsubd256((__v8si)__X, (__v8si)__Y); 
# 321
} 
# 324
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 325
_mm256_hsubs_epi16(__m256i __X, __m256i __Y) 
# 326
{ 
# 327
return (__m256i)__builtin_ia32_phsubsw256((__v16hi)__X, (__v16hi)__Y); 
# 329
} 
# 332
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 333
_mm256_maddubs_epi16(__m256i __X, __m256i __Y) 
# 334
{ 
# 335
return (__m256i)__builtin_ia32_pmaddubsw256((__v32qi)__X, (__v32qi)__Y); 
# 337
} 
# 340
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 341
_mm256_madd_epi16(__m256i __A, __m256i __B) 
# 342
{ 
# 343
return (__m256i)__builtin_ia32_pmaddwd256((__v16hi)__A, (__v16hi)__B); 
# 345
} 
# 348
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 349
_mm256_max_epi8(__m256i __A, __m256i __B) 
# 350
{ 
# 351
return (__m256i)__builtin_ia32_pmaxsb256((__v32qi)__A, (__v32qi)__B); 
# 352
} 
# 355
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 356
_mm256_max_epi16(__m256i __A, __m256i __B) 
# 357
{ 
# 358
return (__m256i)__builtin_ia32_pmaxsw256((__v16hi)__A, (__v16hi)__B); 
# 359
} 
# 362
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 363
_mm256_max_epi32(__m256i __A, __m256i __B) 
# 364
{ 
# 365
return (__m256i)__builtin_ia32_pmaxsd256((__v8si)__A, (__v8si)__B); 
# 366
} 
# 369
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 370
_mm256_max_epu8(__m256i __A, __m256i __B) 
# 371
{ 
# 372
return (__m256i)__builtin_ia32_pmaxub256((__v32qi)__A, (__v32qi)__B); 
# 373
} 
# 376
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 377
_mm256_max_epu16(__m256i __A, __m256i __B) 
# 378
{ 
# 379
return (__m256i)__builtin_ia32_pmaxuw256((__v16hi)__A, (__v16hi)__B); 
# 380
} 
# 383
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 384
_mm256_max_epu32(__m256i __A, __m256i __B) 
# 385
{ 
# 386
return (__m256i)__builtin_ia32_pmaxud256((__v8si)__A, (__v8si)__B); 
# 387
} 
# 390
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 391
_mm256_min_epi8(__m256i __A, __m256i __B) 
# 392
{ 
# 393
return (__m256i)__builtin_ia32_pminsb256((__v32qi)__A, (__v32qi)__B); 
# 394
} 
# 397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 398
_mm256_min_epi16(__m256i __A, __m256i __B) 
# 399
{ 
# 400
return (__m256i)__builtin_ia32_pminsw256((__v16hi)__A, (__v16hi)__B); 
# 401
} 
# 404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 405
_mm256_min_epi32(__m256i __A, __m256i __B) 
# 406
{ 
# 407
return (__m256i)__builtin_ia32_pminsd256((__v8si)__A, (__v8si)__B); 
# 408
} 
# 411
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 412
_mm256_min_epu8(__m256i __A, __m256i __B) 
# 413
{ 
# 414
return (__m256i)__builtin_ia32_pminub256((__v32qi)__A, (__v32qi)__B); 
# 415
} 
# 418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 419
_mm256_min_epu16(__m256i __A, __m256i __B) 
# 420
{ 
# 421
return (__m256i)__builtin_ia32_pminuw256((__v16hi)__A, (__v16hi)__B); 
# 422
} 
# 425
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 426
_mm256_min_epu32(__m256i __A, __m256i __B) 
# 427
{ 
# 428
return (__m256i)__builtin_ia32_pminud256((__v8si)__A, (__v8si)__B); 
# 429
} 
# 432
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 433
_mm256_movemask_epi8(__m256i __A) 
# 434
{ 
# 435
return __builtin_ia32_pmovmskb256((__v32qi)__A); 
# 436
} 
# 439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 440
_mm256_cvtepi8_epi16(__m128i __X) 
# 441
{ 
# 442
return (__m256i)__builtin_ia32_pmovsxbw256((__v16qi)__X); 
# 443
} 
# 446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 447
_mm256_cvtepi8_epi32(__m128i __X) 
# 448
{ 
# 449
return (__m256i)__builtin_ia32_pmovsxbd256((__v16qi)__X); 
# 450
} 
# 453
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 454
_mm256_cvtepi8_epi64(__m128i __X) 
# 455
{ 
# 456
return (__m256i)__builtin_ia32_pmovsxbq256((__v16qi)__X); 
# 457
} 
# 460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 461
_mm256_cvtepi16_epi32(__m128i __X) 
# 462
{ 
# 463
return (__m256i)__builtin_ia32_pmovsxwd256((__v8hi)__X); 
# 464
} 
# 467
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 468
_mm256_cvtepi16_epi64(__m128i __X) 
# 469
{ 
# 470
return (__m256i)__builtin_ia32_pmovsxwq256((__v8hi)__X); 
# 471
} 
# 474
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 475
_mm256_cvtepi32_epi64(__m128i __X) 
# 476
{ 
# 477
return (__m256i)__builtin_ia32_pmovsxdq256((__v4si)__X); 
# 478
} 
# 481
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 482
_mm256_cvtepu8_epi16(__m128i __X) 
# 483
{ 
# 484
return (__m256i)__builtin_ia32_pmovzxbw256((__v16qi)__X); 
# 485
} 
# 488
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 489
_mm256_cvtepu8_epi32(__m128i __X) 
# 490
{ 
# 491
return (__m256i)__builtin_ia32_pmovzxbd256((__v16qi)__X); 
# 492
} 
# 495
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 496
_mm256_cvtepu8_epi64(__m128i __X) 
# 497
{ 
# 498
return (__m256i)__builtin_ia32_pmovzxbq256((__v16qi)__X); 
# 499
} 
# 502
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 503
_mm256_cvtepu16_epi32(__m128i __X) 
# 504
{ 
# 505
return (__m256i)__builtin_ia32_pmovzxwd256((__v8hi)__X); 
# 506
} 
# 509
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 510
_mm256_cvtepu16_epi64(__m128i __X) 
# 511
{ 
# 512
return (__m256i)__builtin_ia32_pmovzxwq256((__v8hi)__X); 
# 513
} 
# 516
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 517
_mm256_cvtepu32_epi64(__m128i __X) 
# 518
{ 
# 519
return (__m256i)__builtin_ia32_pmovzxdq256((__v4si)__X); 
# 520
} 
# 523
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 524
_mm256_mul_epi32(__m256i __X, __m256i __Y) 
# 525
{ 
# 526
return (__m256i)__builtin_ia32_pmuldq256((__v8si)__X, (__v8si)__Y); 
# 527
} 
# 530
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 531
_mm256_mulhrs_epi16(__m256i __X, __m256i __Y) 
# 532
{ 
# 533
return (__m256i)__builtin_ia32_pmulhrsw256((__v16hi)__X, (__v16hi)__Y); 
# 535
} 
# 538
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 539
_mm256_mulhi_epu16(__m256i __A, __m256i __B) 
# 540
{ 
# 541
return (__m256i)__builtin_ia32_pmulhuw256((__v16hi)__A, (__v16hi)__B); 
# 542
} 
# 545
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 546
_mm256_mulhi_epi16(__m256i __A, __m256i __B) 
# 547
{ 
# 548
return (__m256i)__builtin_ia32_pmulhw256((__v16hi)__A, (__v16hi)__B); 
# 549
} 
# 552
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 553
_mm256_mullo_epi16(__m256i __A, __m256i __B) 
# 554
{ 
# 555
return (__m256i)(((__v16hu)__A) * ((__v16hu)__B)); 
# 556
} 
# 559
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 560
_mm256_mullo_epi32(__m256i __A, __m256i __B) 
# 561
{ 
# 562
return (__m256i)(((__v8su)__A) * ((__v8su)__B)); 
# 563
} 
# 566
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 567
_mm256_mul_epu32(__m256i __A, __m256i __B) 
# 568
{ 
# 569
return (__m256i)__builtin_ia32_pmuludq256((__v8si)__A, (__v8si)__B); 
# 570
} 
# 573
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 574
_mm256_or_si256(__m256i __A, __m256i __B) 
# 575
{ 
# 576
return (__m256i)(((__v4du)__A) | ((__v4du)__B)); 
# 577
} 
# 580
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 581
_mm256_sad_epu8(__m256i __A, __m256i __B) 
# 582
{ 
# 583
return (__m256i)__builtin_ia32_psadbw256((__v32qi)__A, (__v32qi)__B); 
# 584
} 
# 587
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 588
_mm256_shuffle_epi8(__m256i __X, __m256i __Y) 
# 589
{ 
# 590
return (__m256i)__builtin_ia32_pshufb256((__v32qi)__X, (__v32qi)__Y); 
# 592
} 
# 596
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 597
_mm256_shuffle_epi32(__m256i __A, const int __mask) 
# 598
{ 
# 599
return (__m256i)__builtin_ia32_pshufd256((__v8si)__A, __mask); 
# 600
} 
# 603
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 604
_mm256_shufflehi_epi16(__m256i __A, const int __mask) 
# 605
{ 
# 606
return (__m256i)__builtin_ia32_pshufhw256((__v16hi)__A, __mask); 
# 607
} 
# 610
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 611
_mm256_shufflelo_epi16(__m256i __A, const int __mask) 
# 612
{ 
# 613
return (__m256i)__builtin_ia32_pshuflw256((__v16hi)__A, __mask); 
# 614
} 
# 625
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 626
_mm256_sign_epi8(__m256i __X, __m256i __Y) 
# 627
{ 
# 628
return (__m256i)__builtin_ia32_psignb256((__v32qi)__X, (__v32qi)__Y); 
# 629
} 
# 632
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 633
_mm256_sign_epi16(__m256i __X, __m256i __Y) 
# 634
{ 
# 635
return (__m256i)__builtin_ia32_psignw256((__v16hi)__X, (__v16hi)__Y); 
# 636
} 
# 639
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 640
_mm256_sign_epi32(__m256i __X, __m256i __Y) 
# 641
{ 
# 642
return (__m256i)__builtin_ia32_psignd256((__v8si)__X, (__v8si)__Y); 
# 643
} 
# 647
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 648
_mm256_bslli_epi128(__m256i __A, const int __N) 
# 649
{ 
# 650
return (__m256i)__builtin_ia32_pslldqi256(__A, __N * 8); 
# 651
} 
# 654
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 655
_mm256_slli_si256(__m256i __A, const int __N) 
# 656
{ 
# 657
return (__m256i)__builtin_ia32_pslldqi256(__A, __N * 8); 
# 658
} 
# 667
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 668
_mm256_slli_epi16(__m256i __A, int __B) 
# 669
{ 
# 670
return (__m256i)__builtin_ia32_psllwi256((__v16hi)__A, __B); 
# 671
} 
# 674
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 675
_mm256_sll_epi16(__m256i __A, __m128i __B) 
# 676
{ 
# 677
return (__m256i)__builtin_ia32_psllw256((__v16hi)__A, (__v8hi)__B); 
# 678
} 
# 681
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 682
_mm256_slli_epi32(__m256i __A, int __B) 
# 683
{ 
# 684
return (__m256i)__builtin_ia32_pslldi256((__v8si)__A, __B); 
# 685
} 
# 688
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 689
_mm256_sll_epi32(__m256i __A, __m128i __B) 
# 690
{ 
# 691
return (__m256i)__builtin_ia32_pslld256((__v8si)__A, (__v4si)__B); 
# 692
} 
# 695
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 696
_mm256_slli_epi64(__m256i __A, int __B) 
# 697
{ 
# 698
return (__m256i)__builtin_ia32_psllqi256((__v4di)__A, __B); 
# 699
} 
# 702
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 703
_mm256_sll_epi64(__m256i __A, __m128i __B) 
# 704
{ 
# 705
return (__m256i)__builtin_ia32_psllq256((__v4di)__A, (__v2di)__B); 
# 706
} 
# 709
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 710
_mm256_srai_epi16(__m256i __A, int __B) 
# 711
{ 
# 712
return (__m256i)__builtin_ia32_psrawi256((__v16hi)__A, __B); 
# 713
} 
# 716
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 717
_mm256_sra_epi16(__m256i __A, __m128i __B) 
# 718
{ 
# 719
return (__m256i)__builtin_ia32_psraw256((__v16hi)__A, (__v8hi)__B); 
# 720
} 
# 723
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 724
_mm256_srai_epi32(__m256i __A, int __B) 
# 725
{ 
# 726
return (__m256i)__builtin_ia32_psradi256((__v8si)__A, __B); 
# 727
} 
# 730
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 731
_mm256_sra_epi32(__m256i __A, __m128i __B) 
# 732
{ 
# 733
return (__m256i)__builtin_ia32_psrad256((__v8si)__A, (__v4si)__B); 
# 734
} 
# 738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 739
_mm256_bsrli_epi128(__m256i __A, const int __N) 
# 740
{ 
# 741
return (__m256i)__builtin_ia32_psrldqi256(__A, __N * 8); 
# 742
} 
# 745
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 746
_mm256_srli_si256(__m256i __A, const int __N) 
# 747
{ 
# 748
return (__m256i)__builtin_ia32_psrldqi256(__A, __N * 8); 
# 749
} 
# 758
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 759
_mm256_srli_epi16(__m256i __A, int __B) 
# 760
{ 
# 761
return (__m256i)__builtin_ia32_psrlwi256((__v16hi)__A, __B); 
# 762
} 
# 765
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 766
_mm256_srl_epi16(__m256i __A, __m128i __B) 
# 767
{ 
# 768
return (__m256i)__builtin_ia32_psrlw256((__v16hi)__A, (__v8hi)__B); 
# 769
} 
# 772
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 773
_mm256_srli_epi32(__m256i __A, int __B) 
# 774
{ 
# 775
return (__m256i)__builtin_ia32_psrldi256((__v8si)__A, __B); 
# 776
} 
# 779
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 780
_mm256_srl_epi32(__m256i __A, __m128i __B) 
# 781
{ 
# 782
return (__m256i)__builtin_ia32_psrld256((__v8si)__A, (__v4si)__B); 
# 783
} 
# 786
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 787
_mm256_srli_epi64(__m256i __A, int __B) 
# 788
{ 
# 789
return (__m256i)__builtin_ia32_psrlqi256((__v4di)__A, __B); 
# 790
} 
# 793
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 794
_mm256_srl_epi64(__m256i __A, __m128i __B) 
# 795
{ 
# 796
return (__m256i)__builtin_ia32_psrlq256((__v4di)__A, (__v2di)__B); 
# 797
} 
# 800
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 801
_mm256_sub_epi8(__m256i __A, __m256i __B) 
# 802
{ 
# 803
return (__m256i)(((__v32qu)__A) - ((__v32qu)__B)); 
# 804
} 
# 807
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 808
_mm256_sub_epi16(__m256i __A, __m256i __B) 
# 809
{ 
# 810
return (__m256i)(((__v16hu)__A) - ((__v16hu)__B)); 
# 811
} 
# 814
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 815
_mm256_sub_epi32(__m256i __A, __m256i __B) 
# 816
{ 
# 817
return (__m256i)(((__v8su)__A) - ((__v8su)__B)); 
# 818
} 
# 821
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 822
_mm256_sub_epi64(__m256i __A, __m256i __B) 
# 823
{ 
# 824
return (__m256i)(((__v4du)__A) - ((__v4du)__B)); 
# 825
} 
# 828
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 829
_mm256_subs_epi8(__m256i __A, __m256i __B) 
# 830
{ 
# 831
return (__m256i)__builtin_ia32_psubsb256((__v32qi)__A, (__v32qi)__B); 
# 832
} 
# 835
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 836
_mm256_subs_epi16(__m256i __A, __m256i __B) 
# 837
{ 
# 838
return (__m256i)__builtin_ia32_psubsw256((__v16hi)__A, (__v16hi)__B); 
# 839
} 
# 842
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 843
_mm256_subs_epu8(__m256i __A, __m256i __B) 
# 844
{ 
# 845
return (__m256i)__builtin_ia32_psubusb256((__v32qi)__A, (__v32qi)__B); 
# 846
} 
# 849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 850
_mm256_subs_epu16(__m256i __A, __m256i __B) 
# 851
{ 
# 852
return (__m256i)__builtin_ia32_psubusw256((__v16hi)__A, (__v16hi)__B); 
# 853
} 
# 856
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 857
_mm256_unpackhi_epi8(__m256i __A, __m256i __B) 
# 858
{ 
# 859
return (__m256i)__builtin_ia32_punpckhbw256((__v32qi)__A, (__v32qi)__B); 
# 860
} 
# 863
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 864
_mm256_unpackhi_epi16(__m256i __A, __m256i __B) 
# 865
{ 
# 866
return (__m256i)__builtin_ia32_punpckhwd256((__v16hi)__A, (__v16hi)__B); 
# 867
} 
# 870
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 871
_mm256_unpackhi_epi32(__m256i __A, __m256i __B) 
# 872
{ 
# 873
return (__m256i)__builtin_ia32_punpckhdq256((__v8si)__A, (__v8si)__B); 
# 874
} 
# 877
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 878
_mm256_unpackhi_epi64(__m256i __A, __m256i __B) 
# 879
{ 
# 880
return (__m256i)__builtin_ia32_punpckhqdq256((__v4di)__A, (__v4di)__B); 
# 881
} 
# 884
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 885
_mm256_unpacklo_epi8(__m256i __A, __m256i __B) 
# 886
{ 
# 887
return (__m256i)__builtin_ia32_punpcklbw256((__v32qi)__A, (__v32qi)__B); 
# 888
} 
# 891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 892
_mm256_unpacklo_epi16(__m256i __A, __m256i __B) 
# 893
{ 
# 894
return (__m256i)__builtin_ia32_punpcklwd256((__v16hi)__A, (__v16hi)__B); 
# 895
} 
# 898
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 899
_mm256_unpacklo_epi32(__m256i __A, __m256i __B) 
# 900
{ 
# 901
return (__m256i)__builtin_ia32_punpckldq256((__v8si)__A, (__v8si)__B); 
# 902
} 
# 905
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 906
_mm256_unpacklo_epi64(__m256i __A, __m256i __B) 
# 907
{ 
# 908
return (__m256i)__builtin_ia32_punpcklqdq256((__v4di)__A, (__v4di)__B); 
# 909
} 
# 912
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 913
_mm256_xor_si256(__m256i __A, __m256i __B) 
# 914
{ 
# 915
return (__m256i)(((__v4du)__A) ^ ((__v4du)__B)); 
# 916
} 
# 919
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 920
_mm256_stream_load_si256(const __m256i *__X) 
# 921
{ 
# 922
return (__m256i)__builtin_ia32_movntdqa256((__v4di *)__X); 
# 923
} 
# 926
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 927
_mm_broadcastss_ps(__m128 __X) 
# 928
{ 
# 929
return (__m128)__builtin_ia32_vbroadcastss_ps((__v4sf)__X); 
# 930
} 
# 933
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 934
_mm256_broadcastss_ps(__m128 __X) 
# 935
{ 
# 936
return (__m256)__builtin_ia32_vbroadcastss_ps256((__v4sf)__X); 
# 937
} 
# 940
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 941
_mm256_broadcastsd_pd(__m128d __X) 
# 942
{ 
# 943
return (__m256d)__builtin_ia32_vbroadcastsd_pd256((__v2df)__X); 
# 944
} 
# 947
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 948
_mm256_broadcastsi128_si256(__m128i __X) 
# 949
{ 
# 950
return (__m256i)__builtin_ia32_vbroadcastsi256((__v2di)__X); 
# 951
} 
# 955
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 956
_mm_blend_epi32(__m128i __X, __m128i __Y, const int __M) 
# 957
{ 
# 958
return (__m128i)__builtin_ia32_pblendd128((__v4si)__X, (__v4si)__Y, __M); 
# 961
} 
# 970
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 971
_mm256_blend_epi32(__m256i __X, __m256i __Y, const int __M) 
# 972
{ 
# 973
return (__m256i)__builtin_ia32_pblendd256((__v8si)__X, (__v8si)__Y, __M); 
# 976
} 
# 984
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 985
_mm256_broadcastb_epi8(__m128i __X) 
# 986
{ 
# 987
return (__m256i)__builtin_ia32_pbroadcastb256((__v16qi)__X); 
# 988
} 
# 991
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 992
_mm256_broadcastw_epi16(__m128i __X) 
# 993
{ 
# 994
return (__m256i)__builtin_ia32_pbroadcastw256((__v8hi)__X); 
# 995
} 
# 998
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 999
_mm256_broadcastd_epi32(__m128i __X) 
# 1000
{ 
# 1001
return (__m256i)__builtin_ia32_pbroadcastd256((__v4si)__X); 
# 1002
} 
# 1005
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1006
_mm256_broadcastq_epi64(__m128i __X) 
# 1007
{ 
# 1008
return (__m256i)__builtin_ia32_pbroadcastq256((__v2di)__X); 
# 1009
} 
# 1012
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1013
_mm_broadcastb_epi8(__m128i __X) 
# 1014
{ 
# 1015
return (__m128i)__builtin_ia32_pbroadcastb128((__v16qi)__X); 
# 1016
} 
# 1019
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1020
_mm_broadcastw_epi16(__m128i __X) 
# 1021
{ 
# 1022
return (__m128i)__builtin_ia32_pbroadcastw128((__v8hi)__X); 
# 1023
} 
# 1026
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1027
_mm_broadcastd_epi32(__m128i __X) 
# 1028
{ 
# 1029
return (__m128i)__builtin_ia32_pbroadcastd128((__v4si)__X); 
# 1030
} 
# 1033
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1034
_mm_broadcastq_epi64(__m128i __X) 
# 1035
{ 
# 1036
return (__m128i)__builtin_ia32_pbroadcastq128((__v2di)__X); 
# 1037
} 
# 1040
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1041
_mm256_permutevar8x32_epi32(__m256i __X, __m256i __Y) 
# 1042
{ 
# 1043
return (__m256i)__builtin_ia32_permvarsi256((__v8si)__X, (__v8si)__Y); 
# 1044
} 
# 1048
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1049
_mm256_permute4x64_pd(__m256d __X, const int __M) 
# 1050
{ 
# 1051
return (__m256d)__builtin_ia32_permdf256((__v4df)__X, __M); 
# 1052
} 
# 1059
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1060
_mm256_permutevar8x32_ps(__m256 __X, __m256i __Y) 
# 1061
{ 
# 1062
return (__m256)__builtin_ia32_permvarsf256((__v8sf)__X, (__v8si)__Y); 
# 1063
} 
# 1067
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1068
_mm256_permute4x64_epi64(__m256i __X, const int __M) 
# 1069
{ 
# 1070
return (__m256i)__builtin_ia32_permdi256((__v4di)__X, __M); 
# 1071
} 
# 1080
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1081
_mm256_permute2x128_si256(__m256i __X, __m256i __Y, const int __M) 
# 1082
{ 
# 1083
return (__m256i)__builtin_ia32_permti256((__v4di)__X, (__v4di)__Y, __M); 
# 1084
} 
# 1092
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1093
_mm256_extracti128_si256(__m256i __X, const int __M) 
# 1094
{ 
# 1095
return (__m128i)__builtin_ia32_extract128i256((__v4di)__X, __M); 
# 1096
} 
# 1104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1105
_mm256_inserti128_si256(__m256i __X, __m128i __Y, const int __M) 
# 1106
{ 
# 1107
return (__m256i)__builtin_ia32_insert128i256((__v4di)__X, (__v2di)__Y, __M); 
# 1108
} 
# 1117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1118
_mm256_maskload_epi32(const int *__X, __m256i __M) 
# 1119
{ 
# 1120
return (__m256i)__builtin_ia32_maskloadd256((const __v8si *)__X, (__v8si)__M); 
# 1122
} 
# 1125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1126
_mm256_maskload_epi64(const long long *__X, __m256i __M) 
# 1127
{ 
# 1128
return (__m256i)__builtin_ia32_maskloadq256((const __v4di *)__X, (__v4di)__M); 
# 1130
} 
# 1133
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1134
_mm_maskload_epi32(const int *__X, __m128i __M) 
# 1135
{ 
# 1136
return (__m128i)__builtin_ia32_maskloadd((const __v4si *)__X, (__v4si)__M); 
# 1138
} 
# 1141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1142
_mm_maskload_epi64(const long long *__X, __m128i __M) 
# 1143
{ 
# 1144
return (__m128i)__builtin_ia32_maskloadq((const __v2di *)__X, (__v2di)__M); 
# 1146
} 
# 1149
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1150
_mm256_maskstore_epi32(int *__X, __m256i __M, __m256i __Y) 
# 1151
{ 
# 1152
__builtin_ia32_maskstored256((__v8si *)__X, (__v8si)__M, (__v8si)__Y); 
# 1153
} 
# 1156
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1157
_mm256_maskstore_epi64(long long *__X, __m256i __M, __m256i __Y) 
# 1158
{ 
# 1159
__builtin_ia32_maskstoreq256((__v4di *)__X, (__v4di)__M, (__v4di)__Y); 
# 1160
} 
# 1163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1164
_mm_maskstore_epi32(int *__X, __m128i __M, __m128i __Y) 
# 1165
{ 
# 1166
__builtin_ia32_maskstored((__v4si *)__X, (__v4si)__M, (__v4si)__Y); 
# 1167
} 
# 1170
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1171
_mm_maskstore_epi64(long long *__X, __m128i __M, __m128i __Y) 
# 1172
{ 
# 1173
__builtin_ia32_maskstoreq((__v2di *)__X, (__v2di)__M, (__v2di)__Y); 
# 1174
} 
# 1177
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1178
_mm256_sllv_epi32(__m256i __X, __m256i __Y) 
# 1179
{ 
# 1180
return (__m256i)__builtin_ia32_psllv8si((__v8si)__X, (__v8si)__Y); 
# 1181
} 
# 1184
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1185
_mm_sllv_epi32(__m128i __X, __m128i __Y) 
# 1186
{ 
# 1187
return (__m128i)__builtin_ia32_psllv4si((__v4si)__X, (__v4si)__Y); 
# 1188
} 
# 1191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1192
_mm256_sllv_epi64(__m256i __X, __m256i __Y) 
# 1193
{ 
# 1194
return (__m256i)__builtin_ia32_psllv4di((__v4di)__X, (__v4di)__Y); 
# 1195
} 
# 1198
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1199
_mm_sllv_epi64(__m128i __X, __m128i __Y) 
# 1200
{ 
# 1201
return (__m128i)__builtin_ia32_psllv2di((__v2di)__X, (__v2di)__Y); 
# 1202
} 
# 1205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1206
_mm256_srav_epi32(__m256i __X, __m256i __Y) 
# 1207
{ 
# 1208
return (__m256i)__builtin_ia32_psrav8si((__v8si)__X, (__v8si)__Y); 
# 1209
} 
# 1212
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1213
_mm_srav_epi32(__m128i __X, __m128i __Y) 
# 1214
{ 
# 1215
return (__m128i)__builtin_ia32_psrav4si((__v4si)__X, (__v4si)__Y); 
# 1216
} 
# 1219
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1220
_mm256_srlv_epi32(__m256i __X, __m256i __Y) 
# 1221
{ 
# 1222
return (__m256i)__builtin_ia32_psrlv8si((__v8si)__X, (__v8si)__Y); 
# 1223
} 
# 1226
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1227
_mm_srlv_epi32(__m128i __X, __m128i __Y) 
# 1228
{ 
# 1229
return (__m128i)__builtin_ia32_psrlv4si((__v4si)__X, (__v4si)__Y); 
# 1230
} 
# 1233
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1234
_mm256_srlv_epi64(__m256i __X, __m256i __Y) 
# 1235
{ 
# 1236
return (__m256i)__builtin_ia32_psrlv4di((__v4di)__X, (__v4di)__Y); 
# 1237
} 
# 1240
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1241
_mm_srlv_epi64(__m128i __X, __m128i __Y) 
# 1242
{ 
# 1243
return (__m128i)__builtin_ia32_psrlv2di((__v2di)__X, (__v2di)__Y); 
# 1244
} 
# 1248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1249
_mm_i32gather_pd(const double *base, __m128i index, const int scale) 
# 1250
{ 
# 1251
__v2df zero = _mm_setzero_pd(); 
# 1252
__v2df mask = _mm_cmpeq_pd(zero, zero); 
# 1254
return (__m128d)__builtin_ia32_gathersiv2df(_mm_undefined_pd(), base, (__v4si)index, mask, scale); 
# 1259
} 
# 1262
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1263
_mm_mask_i32gather_pd(__m128d src, const double *base, __m128i index, __m128d 
# 1264
mask, const int scale) 
# 1265
{ 
# 1266
return (__m128d)__builtin_ia32_gathersiv2df((__v2df)src, base, (__v4si)index, (__v2df)mask, scale); 
# 1271
} 
# 1274
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1275
_mm256_i32gather_pd(const double *base, __m128i index, const int scale) 
# 1276
{ 
# 1277
__v4df zero = _mm256_setzero_pd(); 
# 1278
__v4df mask = _mm256_cmp_pd(zero, zero, 0); 
# 1280
return (__m256d)__builtin_ia32_gathersiv4df(_mm256_undefined_pd(), base, (__v4si)index, mask, scale); 
# 1285
} 
# 1288
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1289
_mm256_mask_i32gather_pd(__m256d src, const double *base, __m128i 
# 1290
index, __m256d mask, const int scale) 
# 1291
{ 
# 1292
return (__m256d)__builtin_ia32_gathersiv4df((__v4df)src, base, (__v4si)index, (__v4df)mask, scale); 
# 1297
} 
# 1300
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1301
_mm_i64gather_pd(const double *base, __m128i index, const int scale) 
# 1302
{ 
# 1303
__v2df src = _mm_setzero_pd(); 
# 1304
__v2df mask = _mm_cmpeq_pd(src, src); 
# 1306
return (__m128d)__builtin_ia32_gatherdiv2df(src, base, (__v2di)index, mask, scale); 
# 1311
} 
# 1314
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1315
_mm_mask_i64gather_pd(__m128d src, const double *base, __m128i index, __m128d 
# 1316
mask, const int scale) 
# 1317
{ 
# 1318
return (__m128d)__builtin_ia32_gatherdiv2df((__v2df)src, base, (__v2di)index, (__v2df)mask, scale); 
# 1323
} 
# 1326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1327
_mm256_i64gather_pd(const double *base, __m256i index, const int scale) 
# 1328
{ 
# 1329
__v4df src = _mm256_setzero_pd(); 
# 1330
__v4df mask = _mm256_cmp_pd(src, src, 0); 
# 1332
return (__m256d)__builtin_ia32_gatherdiv4df(src, base, (__v4di)index, mask, scale); 
# 1337
} 
# 1340
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1341
_mm256_mask_i64gather_pd(__m256d src, const double *base, __m256i 
# 1342
index, __m256d mask, const int scale) 
# 1343
{ 
# 1344
return (__m256d)__builtin_ia32_gatherdiv4df((__v4df)src, base, (__v4di)index, (__v4df)mask, scale); 
# 1349
} 
# 1352
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1353
_mm_i32gather_ps(const float *base, __m128i index, const int scale) 
# 1354
{ 
# 1355
__v4sf src = _mm_setzero_ps(); 
# 1356
__v4sf mask = _mm_cmpeq_ps(src, src); 
# 1358
return (__m128)__builtin_ia32_gathersiv4sf(src, base, (__v4si)index, mask, scale); 
# 1363
} 
# 1366
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1367
_mm_mask_i32gather_ps(__m128 src, const float *base, __m128i index, __m128 
# 1368
mask, const int scale) 
# 1369
{ 
# 1370
return (__m128)__builtin_ia32_gathersiv4sf((__v4sf)src, base, (__v4si)index, (__v4sf)mask, scale); 
# 1375
} 
# 1378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1379
_mm256_i32gather_ps(const float *base, __m256i index, const int scale) 
# 1380
{ 
# 1381
__v8sf src = _mm256_setzero_ps(); 
# 1382
__v8sf mask = _mm256_cmp_ps(src, src, 0); 
# 1384
return (__m256)__builtin_ia32_gathersiv8sf(src, base, (__v8si)index, mask, scale); 
# 1389
} 
# 1392
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1393
_mm256_mask_i32gather_ps(__m256 src, const float *base, __m256i 
# 1394
index, __m256 mask, const int scale) 
# 1395
{ 
# 1396
return (__m256)__builtin_ia32_gathersiv8sf((__v8sf)src, base, (__v8si)index, (__v8sf)mask, scale); 
# 1401
} 
# 1404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1405
_mm_i64gather_ps(const float *base, __m128i index, const int scale) 
# 1406
{ 
# 1407
__v4sf src = _mm_setzero_ps(); 
# 1408
__v4sf mask = _mm_cmpeq_ps(src, src); 
# 1410
return (__m128)__builtin_ia32_gatherdiv4sf(src, base, (__v2di)index, mask, scale); 
# 1415
} 
# 1418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1419
_mm_mask_i64gather_ps(__m128 src, const float *base, __m128i index, __m128 
# 1420
mask, const int scale) 
# 1421
{ 
# 1422
return (__m128)__builtin_ia32_gatherdiv4sf((__v4sf)src, base, (__v2di)index, (__v4sf)mask, scale); 
# 1427
} 
# 1430
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1431
_mm256_i64gather_ps(const float *base, __m256i index, const int scale) 
# 1432
{ 
# 1433
__v4sf src = _mm_setzero_ps(); 
# 1434
__v4sf mask = _mm_cmpeq_ps(src, src); 
# 1436
return (__m128)__builtin_ia32_gatherdiv4sf256(src, base, (__v4di)index, mask, scale); 
# 1441
} 
# 1444
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1445
_mm256_mask_i64gather_ps(__m128 src, const float *base, __m256i 
# 1446
index, __m128 mask, const int scale) 
# 1447
{ 
# 1448
return (__m128)__builtin_ia32_gatherdiv4sf256((__v4sf)src, base, (__v4di)index, (__v4sf)mask, scale); 
# 1453
} 
# 1456
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1457
_mm_i32gather_epi64(const long long *base, __m128i 
# 1458
index, const int scale) 
# 1459
{ 
# 1460
__v2di src = ((__v2di){(0), (0)}); 
# 1461
__v2di mask = ((__v2di){(~0), (~0)}); 
# 1463
return (__m128i)__builtin_ia32_gathersiv2di(src, base, (__v4si)index, mask, scale); 
# 1468
} 
# 1471
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1472
_mm_mask_i32gather_epi64(__m128i src, const long long *base, __m128i 
# 1473
index, __m128i mask, const int scale) 
# 1474
{ 
# 1475
return (__m128i)__builtin_ia32_gathersiv2di((__v2di)src, base, (__v4si)index, (__v2di)mask, scale); 
# 1480
} 
# 1483
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1484
_mm256_i32gather_epi64(const long long *base, __m128i 
# 1485
index, const int scale) 
# 1486
{ 
# 1487
__v4di src = ((__v4di){(0), (0), (0), (0)}); 
# 1488
__v4di mask = ((__v4di){(~0), (~0), (~0), (~0)}); 
# 1490
return (__m256i)__builtin_ia32_gathersiv4di(src, base, (__v4si)index, mask, scale); 
# 1495
} 
# 1498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1499
_mm256_mask_i32gather_epi64(__m256i src, const long long *base, __m128i 
# 1500
index, __m256i mask, const int scale) 
# 1501
{ 
# 1502
return (__m256i)__builtin_ia32_gathersiv4di((__v4di)src, base, (__v4si)index, (__v4di)mask, scale); 
# 1507
} 
# 1510
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1511
_mm_i64gather_epi64(const long long *base, __m128i 
# 1512
index, const int scale) 
# 1513
{ 
# 1514
__v2di src = ((__v2di){(0), (0)}); 
# 1515
__v2di mask = ((__v2di){(~0), (~0)}); 
# 1517
return (__m128i)__builtin_ia32_gatherdiv2di(src, base, (__v2di)index, mask, scale); 
# 1522
} 
# 1525
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1526
_mm_mask_i64gather_epi64(__m128i src, const long long *base, __m128i index, __m128i 
# 1527
mask, const int scale) 
# 1528
{ 
# 1529
return (__m128i)__builtin_ia32_gatherdiv2di((__v2di)src, base, (__v2di)index, (__v2di)mask, scale); 
# 1534
} 
# 1537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1538
_mm256_i64gather_epi64(const long long *base, __m256i 
# 1539
index, const int scale) 
# 1540
{ 
# 1541
__v4di src = ((__v4di){(0), (0), (0), (0)}); 
# 1542
__v4di mask = ((__v4di){(~0), (~0), (~0), (~0)}); 
# 1544
return (__m256i)__builtin_ia32_gatherdiv4di(src, base, (__v4di)index, mask, scale); 
# 1549
} 
# 1552
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1553
_mm256_mask_i64gather_epi64(__m256i src, const long long *base, __m256i 
# 1554
index, __m256i mask, const int scale) 
# 1555
{ 
# 1556
return (__m256i)__builtin_ia32_gatherdiv4di((__v4di)src, base, (__v4di)index, (__v4di)mask, scale); 
# 1561
} 
# 1564
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1565
_mm_i32gather_epi32(const int *base, __m128i index, const int scale) 
# 1566
{ 
# 1567
__v4si src = ((__v4si){0, 0, 0, 0}); 
# 1568
__v4si mask = ((__v4si){(~0), (~0), (~0), (~0)}); 
# 1570
return (__m128i)__builtin_ia32_gathersiv4si(src, base, (__v4si)index, mask, scale); 
# 1575
} 
# 1578
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1579
_mm_mask_i32gather_epi32(__m128i src, const int *base, __m128i index, __m128i 
# 1580
mask, const int scale) 
# 1581
{ 
# 1582
return (__m128i)__builtin_ia32_gathersiv4si((__v4si)src, base, (__v4si)index, (__v4si)mask, scale); 
# 1587
} 
# 1590
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1591
_mm256_i32gather_epi32(const int *base, __m256i index, const int scale) 
# 1592
{ 
# 1593
__v8si src = ((__v8si){0, 0, 0, 0, 0, 0, 0, 0}); 
# 1594
__v8si mask = ((__v8si){(~0), (~0), (~0), (~0), (~0), (~0), (~0), (~0)}); 
# 1596
return (__m256i)__builtin_ia32_gathersiv8si(src, base, (__v8si)index, mask, scale); 
# 1601
} 
# 1604
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1605
_mm256_mask_i32gather_epi32(__m256i src, const int *base, __m256i 
# 1606
index, __m256i mask, const int scale) 
# 1607
{ 
# 1608
return (__m256i)__builtin_ia32_gathersiv8si((__v8si)src, base, (__v8si)index, (__v8si)mask, scale); 
# 1613
} 
# 1616
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1617
_mm_i64gather_epi32(const int *base, __m128i index, const int scale) 
# 1618
{ 
# 1619
__v4si src = ((__v4si){0, 0, 0, 0}); 
# 1620
__v4si mask = ((__v4si){(~0), (~0), (~0), (~0)}); 
# 1622
return (__m128i)__builtin_ia32_gatherdiv4si(src, base, (__v2di)index, mask, scale); 
# 1627
} 
# 1630
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1631
_mm_mask_i64gather_epi32(__m128i src, const int *base, __m128i index, __m128i 
# 1632
mask, const int scale) 
# 1633
{ 
# 1634
return (__m128i)__builtin_ia32_gatherdiv4si((__v4si)src, base, (__v2di)index, (__v4si)mask, scale); 
# 1639
} 
# 1642
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1643
_mm256_i64gather_epi32(const int *base, __m256i index, const int scale) 
# 1644
{ 
# 1645
__v4si src = ((__v4si){0, 0, 0, 0}); 
# 1646
__v4si mask = ((__v4si){(~0), (~0), (~0), (~0)}); 
# 1648
return (__m128i)__builtin_ia32_gatherdiv4si256(src, base, (__v4di)index, mask, scale); 
# 1653
} 
# 1656
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1657
_mm256_mask_i64gather_epi32(__m128i src, const int *base, __m256i 
# 1658
index, __m128i mask, const int scale) 
# 1659
{ 
# 1660
return (__m128i)__builtin_ia32_gatherdiv4si256((__v4si)src, base, (__v4di)index, (__v4si)mask, scale); 
# 1665
} 
# 1901
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512fintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512f" )
# 38
typedef double __v8df __attribute((__vector_size__(64))); 
# 39
typedef float __v16sf __attribute((__vector_size__(64))); 
# 40
typedef long long __v8di __attribute((__vector_size__(64))); 
# 41
typedef unsigned long long __v8du __attribute((__vector_size__(64))); 
# 42
typedef int __v16si __attribute((__vector_size__(64))); 
# 43
typedef unsigned __v16su __attribute((__vector_size__(64))); 
# 44
typedef short __v32hi __attribute((__vector_size__(64))); 
# 45
typedef unsigned short __v32hu __attribute((__vector_size__(64))); 
# 46
typedef char __v64qi __attribute((__vector_size__(64))); 
# 47
typedef unsigned char __v64qu __attribute((__vector_size__(64))); 
# 51
typedef float __m512 __attribute((__vector_size__(64), __may_alias__)); 
# 52
typedef long long __m512i __attribute((__vector_size__(64), __may_alias__)); 
# 53
typedef double __m512d __attribute((__vector_size__(64), __may_alias__)); 
# 55
typedef unsigned char __mmask8; 
# 56
typedef unsigned short __mmask16; 
# 59
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 60
_mm512_set_epi64(long long __A, long long __B, long long __C, long long 
# 61
__D, long long __E, long long __F, long long 
# 62
__G, long long __H) 
# 63
{ 
# 64
return __extension__ (__m512i)(((__v8di){__H, __G, __F, __E, __D, __C, __B, __A})); 
# 66
} 
# 70
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 71
_mm512_set_epi32(int __A, int __B, int __C, int __D, int 
# 72
__E, int __F, int __G, int __H, int 
# 73
__I, int __J, int __K, int __L, int 
# 74
__M, int __N, int __O, int __P) 
# 75
{ 
# 76
return __extension__ (__m512i)(((__v16si){__P, __O, __N, __M, __L, __K, __J, __I, __H, __G, __F, __E, __D, __C, __B, __A})); 
# 79
} 
# 82
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 83
_mm512_set_pd(double __A, double __B, double __C, double __D, double 
# 84
__E, double __F, double __G, double __H) 
# 85
{ 
# 86
return __extension__ ((__m512d){__H, __G, __F, __E, __D, __C, __B, __A}); 
# 88
} 
# 91
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 92
_mm512_set_ps(float __A, float __B, float __C, float __D, float 
# 93
__E, float __F, float __G, float __H, float 
# 94
__I, float __J, float __K, float __L, float 
# 95
__M, float __N, float __O, float __P) 
# 96
{ 
# 97
return __extension__ ((__m512){__P, __O, __N, __M, __L, __K, __J, __I, __H, __G, __F, __E, __D, __C, __B, __A}); 
# 100
} 
# 116
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 117
_mm512_undefined_ps() 
# 118
{ 
# 119
__m512 __Y = __Y; 
# 120
return __Y; 
# 121
} 
# 124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 125
_mm512_undefined_pd() 
# 126
{ 
# 127
__m512d __Y = __Y; 
# 128
return __Y; 
# 129
} 
# 132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 133
_mm512_undefined_si512() 
# 134
{ 
# 135
__m512i __Y = __Y; 
# 136
return __Y; 
# 137
} 
# 140
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 141
_mm512_set1_epi8(char __A) 
# 142
{ 
# 143
return __extension__ (__m512i)(((__v64qi){__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A})); 
# 152
} 
# 155
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 156
_mm512_set1_epi16(short __A) 
# 157
{ 
# 158
return __extension__ (__m512i)(((__v32hi){__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A})); 
# 163
} 
# 166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 167
_mm512_set1_pd(double __A) 
# 168
{ 
# 169
return (__m512d)__builtin_ia32_broadcastsd512(__extension__ ((__v2df){__A}), (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 174
} 
# 177
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 178
_mm512_set1_ps(float __A) 
# 179
{ 
# 180
return (__m512)__builtin_ia32_broadcastss512(__extension__ ((__v4sf){__A}), (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 185
} 
# 189
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 190
_mm512_set4_epi32(int __A, int __B, int __C, int __D) 
# 191
{ 
# 192
return __extension__ (__m512i)(((__v16si){__D, __C, __B, __A, __D, __C, __B, __A, __D, __C, __B, __A, __D, __C, __B, __A})); 
# 195
} 
# 198
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 199
_mm512_set4_epi64(long long __A, long long __B, long long __C, long long 
# 200
__D) 
# 201
{ 
# 202
return __extension__ (__m512i)(((__v8di){__D, __C, __B, __A, __D, __C, __B, __A})); 
# 204
} 
# 207
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 208
_mm512_set4_pd(double __A, double __B, double __C, double __D) 
# 209
{ 
# 210
return __extension__ ((__m512d){__D, __C, __B, __A, __D, __C, __B, __A}); 
# 212
} 
# 215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 216
_mm512_set4_ps(float __A, float __B, float __C, float __D) 
# 217
{ 
# 218
return __extension__ ((__m512){__D, __C, __B, __A, __D, __C, __B, __A, __D, __C, __B, __A, __D, __C, __B, __A}); 
# 221
} 
# 236
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 237
_mm512_setzero_ps() 
# 238
{ 
# 239
return __extension__ ((__m512){((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0)), ((0.0))}); 
# 241
} 
# 244
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 245
_mm512_setzero_pd() 
# 246
{ 
# 247
return __extension__ ((__m512d){(0.0), (0.0), (0.0), (0.0), (0.0), (0.0), (0.0), (0.0)}); 
# 248
} 
# 251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 252
_mm512_setzero_epi32() 
# 253
{ 
# 254
return __extension__ (__m512i)(((__v8di){(0), (0), (0), (0), (0), (0), (0), (0)})); 
# 255
} 
# 258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 259
_mm512_setzero_si512() 
# 260
{ 
# 261
return __extension__ (__m512i)(((__v8di){(0), (0), (0), (0), (0), (0), (0), (0)})); 
# 262
} 
# 265
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 266
_mm512_mask_mov_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 267
{ 
# 268
return (__m512d)__builtin_ia32_movapd512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U); 
# 271
} 
# 274
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 275
_mm512_maskz_mov_pd(__mmask8 __U, __m512d __A) 
# 276
{ 
# 277
return (__m512d)__builtin_ia32_movapd512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 281
} 
# 284
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 285
_mm512_mask_mov_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 286
{ 
# 287
return (__m512)__builtin_ia32_movaps512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U); 
# 290
} 
# 293
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 294
_mm512_maskz_mov_ps(__mmask16 __U, __m512 __A) 
# 295
{ 
# 296
return (__m512)__builtin_ia32_movaps512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 300
} 
# 303
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 304
_mm512_load_pd(const void *__P) 
# 305
{ 
# 306
return *((__m512d *)__P); 
# 307
} 
# 310
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 311
_mm512_mask_load_pd(__m512d __W, __mmask8 __U, const void *__P) 
# 312
{ 
# 313
return (__m512d)__builtin_ia32_loadapd512_mask((const __v8df *)__P, (__v8df)__W, (__mmask8)__U); 
# 316
} 
# 319
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 320
_mm512_maskz_load_pd(__mmask8 __U, const void *__P) 
# 321
{ 
# 322
return (__m512d)__builtin_ia32_loadapd512_mask((const __v8df *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 326
} 
# 329
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 330
_mm512_store_pd(void *__P, __m512d __A) 
# 331
{ 
# 332
(*((__m512d *)__P)) = __A; 
# 333
} 
# 336
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 337
_mm512_mask_store_pd(void *__P, __mmask8 __U, __m512d __A) 
# 338
{ 
# 339
__builtin_ia32_storeapd512_mask((__v8df *)__P, (__v8df)__A, (__mmask8)__U); 
# 341
} 
# 344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 345
_mm512_load_ps(const void *__P) 
# 346
{ 
# 347
return *((__m512 *)__P); 
# 348
} 
# 351
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 352
_mm512_mask_load_ps(__m512 __W, __mmask16 __U, const void *__P) 
# 353
{ 
# 354
return (__m512)__builtin_ia32_loadaps512_mask((const __v16sf *)__P, (__v16sf)__W, (__mmask16)__U); 
# 357
} 
# 360
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 361
_mm512_maskz_load_ps(__mmask16 __U, const void *__P) 
# 362
{ 
# 363
return (__m512)__builtin_ia32_loadaps512_mask((const __v16sf *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 367
} 
# 370
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 371
_mm512_store_ps(void *__P, __m512 __A) 
# 372
{ 
# 373
(*((__m512 *)__P)) = __A; 
# 374
} 
# 377
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 378
_mm512_mask_store_ps(void *__P, __mmask16 __U, __m512 __A) 
# 379
{ 
# 380
__builtin_ia32_storeaps512_mask((__v16sf *)__P, (__v16sf)__A, (__mmask16)__U); 
# 382
} 
# 385
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 386
_mm512_mask_mov_epi64(__m512i __W, __mmask8 __U, __m512i __A) 
# 387
{ 
# 388
return (__m512i)__builtin_ia32_movdqa64_512_mask((__v8di)__A, (__v8di)__W, (__mmask8)__U); 
# 391
} 
# 394
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 395
_mm512_maskz_mov_epi64(__mmask8 __U, __m512i __A) 
# 396
{ 
# 397
return (__m512i)__builtin_ia32_movdqa64_512_mask((__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 401
} 
# 404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 405
_mm512_load_epi64(const void *__P) 
# 406
{ 
# 407
return *((__m512i *)__P); 
# 408
} 
# 411
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 412
_mm512_mask_load_epi64(__m512i __W, __mmask8 __U, const void *__P) 
# 413
{ 
# 414
return (__m512i)__builtin_ia32_movdqa64load512_mask((const __v8di *)__P, (__v8di)__W, (__mmask8)__U); 
# 417
} 
# 420
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 421
_mm512_maskz_load_epi64(__mmask8 __U, const void *__P) 
# 422
{ 
# 423
return (__m512i)__builtin_ia32_movdqa64load512_mask((const __v8di *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 427
} 
# 430
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 431
_mm512_store_epi64(void *__P, __m512i __A) 
# 432
{ 
# 433
(*((__m512i *)__P)) = __A; 
# 434
} 
# 437
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 438
_mm512_mask_store_epi64(void *__P, __mmask8 __U, __m512i __A) 
# 439
{ 
# 440
__builtin_ia32_movdqa64store512_mask((__v8di *)__P, (__v8di)__A, (__mmask8)__U); 
# 442
} 
# 445
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 446
_mm512_mask_mov_epi32(__m512i __W, __mmask16 __U, __m512i __A) 
# 447
{ 
# 448
return (__m512i)__builtin_ia32_movdqa32_512_mask((__v16si)__A, (__v16si)__W, (__mmask16)__U); 
# 451
} 
# 454
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 455
_mm512_maskz_mov_epi32(__mmask16 __U, __m512i __A) 
# 456
{ 
# 457
return (__m512i)__builtin_ia32_movdqa32_512_mask((__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 461
} 
# 464
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 465
_mm512_load_si512(const void *__P) 
# 466
{ 
# 467
return *((__m512i *)__P); 
# 468
} 
# 471
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 472
_mm512_load_epi32(const void *__P) 
# 473
{ 
# 474
return *((__m512i *)__P); 
# 475
} 
# 478
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 479
_mm512_mask_load_epi32(__m512i __W, __mmask16 __U, const void *__P) 
# 480
{ 
# 481
return (__m512i)__builtin_ia32_movdqa32load512_mask((const __v16si *)__P, (__v16si)__W, (__mmask16)__U); 
# 484
} 
# 487
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 488
_mm512_maskz_load_epi32(__mmask16 __U, const void *__P) 
# 489
{ 
# 490
return (__m512i)__builtin_ia32_movdqa32load512_mask((const __v16si *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 494
} 
# 497
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 498
_mm512_store_si512(void *__P, __m512i __A) 
# 499
{ 
# 500
(*((__m512i *)__P)) = __A; 
# 501
} 
# 504
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 505
_mm512_store_epi32(void *__P, __m512i __A) 
# 506
{ 
# 507
(*((__m512i *)__P)) = __A; 
# 508
} 
# 511
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 512
_mm512_mask_store_epi32(void *__P, __mmask16 __U, __m512i __A) 
# 513
{ 
# 514
__builtin_ia32_movdqa32store512_mask((__v16si *)__P, (__v16si)__A, (__mmask16)__U); 
# 516
} 
# 519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 520
_mm512_mullo_epi32(__m512i __A, __m512i __B) 
# 521
{ 
# 522
return (__m512i)(((__v16su)__A) * ((__v16su)__B)); 
# 523
} 
# 526
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 527
_mm512_maskz_mullo_epi32(__mmask16 __M, __m512i __A, __m512i __B) 
# 528
{ 
# 529
return (__m512i)__builtin_ia32_pmulld512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M); 
# 534
} 
# 537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 538
_mm512_mask_mullo_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) 
# 539
{ 
# 540
return (__m512i)__builtin_ia32_pmulld512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, __M); 
# 543
} 
# 546
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 547
_mm512_sllv_epi32(__m512i __X, __m512i __Y) 
# 548
{ 
# 549
return (__m512i)__builtin_ia32_psllv16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 554
} 
# 557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 558
_mm512_mask_sllv_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) 
# 559
{ 
# 560
return (__m512i)__builtin_ia32_psllv16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)__W, (__mmask16)__U); 
# 564
} 
# 567
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 568
_mm512_maskz_sllv_epi32(__mmask16 __U, __m512i __X, __m512i __Y) 
# 569
{ 
# 570
return (__m512i)__builtin_ia32_psllv16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 575
} 
# 578
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 579
_mm512_srav_epi32(__m512i __X, __m512i __Y) 
# 580
{ 
# 581
return (__m512i)__builtin_ia32_psrav16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 586
} 
# 589
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 590
_mm512_mask_srav_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) 
# 591
{ 
# 592
return (__m512i)__builtin_ia32_psrav16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)__W, (__mmask16)__U); 
# 596
} 
# 599
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 600
_mm512_maskz_srav_epi32(__mmask16 __U, __m512i __X, __m512i __Y) 
# 601
{ 
# 602
return (__m512i)__builtin_ia32_psrav16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 607
} 
# 610
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 611
_mm512_srlv_epi32(__m512i __X, __m512i __Y) 
# 612
{ 
# 613
return (__m512i)__builtin_ia32_psrlv16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 618
} 
# 621
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 622
_mm512_mask_srlv_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) 
# 623
{ 
# 624
return (__m512i)__builtin_ia32_psrlv16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)__W, (__mmask16)__U); 
# 628
} 
# 631
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 632
_mm512_maskz_srlv_epi32(__mmask16 __U, __m512i __X, __m512i __Y) 
# 633
{ 
# 634
return (__m512i)__builtin_ia32_psrlv16si_mask((__v16si)__X, (__v16si)__Y, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 639
} 
# 642
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 643
_mm512_add_epi64(__m512i __A, __m512i __B) 
# 644
{ 
# 645
return (__m512i)(((__v8du)__A) + ((__v8du)__B)); 
# 646
} 
# 649
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 650
_mm512_mask_add_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 651
{ 
# 652
return (__m512i)__builtin_ia32_paddq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 656
} 
# 659
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 660
_mm512_maskz_add_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 661
{ 
# 662
return (__m512i)__builtin_ia32_paddq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 667
} 
# 670
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 671
_mm512_sub_epi64(__m512i __A, __m512i __B) 
# 672
{ 
# 673
return (__m512i)(((__v8du)__A) - ((__v8du)__B)); 
# 674
} 
# 677
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 678
_mm512_mask_sub_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 679
{ 
# 680
return (__m512i)__builtin_ia32_psubq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 684
} 
# 687
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 688
_mm512_maskz_sub_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 689
{ 
# 690
return (__m512i)__builtin_ia32_psubq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 695
} 
# 698
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 699
_mm512_sllv_epi64(__m512i __X, __m512i __Y) 
# 700
{ 
# 701
return (__m512i)__builtin_ia32_psllv8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 706
} 
# 709
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 710
_mm512_mask_sllv_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) 
# 711
{ 
# 712
return (__m512i)__builtin_ia32_psllv8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)__W, (__mmask8)__U); 
# 716
} 
# 719
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 720
_mm512_maskz_sllv_epi64(__mmask8 __U, __m512i __X, __m512i __Y) 
# 721
{ 
# 722
return (__m512i)__builtin_ia32_psllv8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 727
} 
# 730
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 731
_mm512_srav_epi64(__m512i __X, __m512i __Y) 
# 732
{ 
# 733
return (__m512i)__builtin_ia32_psrav8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 738
} 
# 741
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 742
_mm512_mask_srav_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) 
# 743
{ 
# 744
return (__m512i)__builtin_ia32_psrav8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)__W, (__mmask8)__U); 
# 748
} 
# 751
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 752
_mm512_maskz_srav_epi64(__mmask8 __U, __m512i __X, __m512i __Y) 
# 753
{ 
# 754
return (__m512i)__builtin_ia32_psrav8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 759
} 
# 762
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 763
_mm512_srlv_epi64(__m512i __X, __m512i __Y) 
# 764
{ 
# 765
return (__m512i)__builtin_ia32_psrlv8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 770
} 
# 773
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 774
_mm512_mask_srlv_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) 
# 775
{ 
# 776
return (__m512i)__builtin_ia32_psrlv8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)__W, (__mmask8)__U); 
# 780
} 
# 783
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 784
_mm512_maskz_srlv_epi64(__mmask8 __U, __m512i __X, __m512i __Y) 
# 785
{ 
# 786
return (__m512i)__builtin_ia32_psrlv8di_mask((__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 791
} 
# 794
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 795
_mm512_add_epi32(__m512i __A, __m512i __B) 
# 796
{ 
# 797
return (__m512i)(((__v16su)__A) + ((__v16su)__B)); 
# 798
} 
# 801
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 802
_mm512_mask_add_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 803
{ 
# 804
return (__m512i)__builtin_ia32_paddd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 808
} 
# 811
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 812
_mm512_maskz_add_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 813
{ 
# 814
return (__m512i)__builtin_ia32_paddd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 819
} 
# 822
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 823
_mm512_mul_epi32(__m512i __X, __m512i __Y) 
# 824
{ 
# 825
return (__m512i)__builtin_ia32_pmuldq512_mask((__v16si)__X, (__v16si)__Y, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 830
} 
# 833
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 834
_mm512_mask_mul_epi32(__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y) 
# 835
{ 
# 836
return (__m512i)__builtin_ia32_pmuldq512_mask((__v16si)__X, (__v16si)__Y, (__v8di)__W, __M); 
# 839
} 
# 842
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 843
_mm512_maskz_mul_epi32(__mmask8 __M, __m512i __X, __m512i __Y) 
# 844
{ 
# 845
return (__m512i)__builtin_ia32_pmuldq512_mask((__v16si)__X, (__v16si)__Y, (__v8di)_mm512_setzero_si512(), __M); 
# 850
} 
# 853
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 854
_mm512_sub_epi32(__m512i __A, __m512i __B) 
# 855
{ 
# 856
return (__m512i)(((__v16su)__A) - ((__v16su)__B)); 
# 857
} 
# 860
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 861
_mm512_mask_sub_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 862
{ 
# 863
return (__m512i)__builtin_ia32_psubd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 867
} 
# 870
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 871
_mm512_maskz_sub_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 872
{ 
# 873
return (__m512i)__builtin_ia32_psubd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 878
} 
# 881
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 882
_mm512_mul_epu32(__m512i __X, __m512i __Y) 
# 883
{ 
# 884
return (__m512i)__builtin_ia32_pmuludq512_mask((__v16si)__X, (__v16si)__Y, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 889
} 
# 892
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 893
_mm512_mask_mul_epu32(__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y) 
# 894
{ 
# 895
return (__m512i)__builtin_ia32_pmuludq512_mask((__v16si)__X, (__v16si)__Y, (__v8di)__W, __M); 
# 898
} 
# 901
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 902
_mm512_maskz_mul_epu32(__mmask8 __M, __m512i __X, __m512i __Y) 
# 903
{ 
# 904
return (__m512i)__builtin_ia32_pmuludq512_mask((__v16si)__X, (__v16si)__Y, (__v8di)_mm512_setzero_si512(), __M); 
# 909
} 
# 913
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 914
_mm512_slli_epi64(__m512i __A, unsigned __B) 
# 915
{ 
# 916
return (__m512i)__builtin_ia32_psllqi512_mask((__v8di)__A, __B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 920
} 
# 923
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 924
_mm512_mask_slli_epi64(__m512i __W, __mmask8 __U, __m512i __A, unsigned 
# 925
__B) 
# 926
{ 
# 927
return (__m512i)__builtin_ia32_psllqi512_mask((__v8di)__A, __B, (__v8di)__W, (__mmask8)__U); 
# 930
} 
# 933
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 934
_mm512_maskz_slli_epi64(__mmask8 __U, __m512i __A, unsigned __B) 
# 935
{ 
# 936
return (__m512i)__builtin_ia32_psllqi512_mask((__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 940
} 
# 959
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 960
_mm512_sll_epi64(__m512i __A, __m128i __B) 
# 961
{ 
# 962
return (__m512i)__builtin_ia32_psllq512_mask((__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 967
} 
# 970
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 971
_mm512_mask_sll_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) 
# 972
{ 
# 973
return (__m512i)__builtin_ia32_psllq512_mask((__v8di)__A, (__v2di)__B, (__v8di)__W, (__mmask8)__U); 
# 977
} 
# 980
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 981
_mm512_maskz_sll_epi64(__mmask8 __U, __m512i __A, __m128i __B) 
# 982
{ 
# 983
return (__m512i)__builtin_ia32_psllq512_mask((__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 988
} 
# 992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 993
_mm512_srli_epi64(__m512i __A, unsigned __B) 
# 994
{ 
# 995
return (__m512i)__builtin_ia32_psrlqi512_mask((__v8di)__A, __B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 999
} 
# 1002
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1003
_mm512_mask_srli_epi64(__m512i __W, __mmask8 __U, __m512i 
# 1004
__A, unsigned __B) 
# 1005
{ 
# 1006
return (__m512i)__builtin_ia32_psrlqi512_mask((__v8di)__A, __B, (__v8di)__W, (__mmask8)__U); 
# 1009
} 
# 1012
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1013
_mm512_maskz_srli_epi64(__mmask8 __U, __m512i __A, unsigned __B) 
# 1014
{ 
# 1015
return (__m512i)__builtin_ia32_psrlqi512_mask((__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1019
} 
# 1038
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1039
_mm512_srl_epi64(__m512i __A, __m128i __B) 
# 1040
{ 
# 1041
return (__m512i)__builtin_ia32_psrlq512_mask((__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 1046
} 
# 1049
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1050
_mm512_mask_srl_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) 
# 1051
{ 
# 1052
return (__m512i)__builtin_ia32_psrlq512_mask((__v8di)__A, (__v2di)__B, (__v8di)__W, (__mmask8)__U); 
# 1056
} 
# 1059
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1060
_mm512_maskz_srl_epi64(__mmask8 __U, __m512i __A, __m128i __B) 
# 1061
{ 
# 1062
return (__m512i)__builtin_ia32_psrlq512_mask((__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1067
} 
# 1071
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1072
_mm512_srai_epi64(__m512i __A, unsigned __B) 
# 1073
{ 
# 1074
return (__m512i)__builtin_ia32_psraqi512_mask((__v8di)__A, __B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 1078
} 
# 1081
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1082
_mm512_mask_srai_epi64(__m512i __W, __mmask8 __U, __m512i __A, unsigned 
# 1083
__B) 
# 1084
{ 
# 1085
return (__m512i)__builtin_ia32_psraqi512_mask((__v8di)__A, __B, (__v8di)__W, (__mmask8)__U); 
# 1088
} 
# 1091
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1092
_mm512_maskz_srai_epi64(__mmask8 __U, __m512i __A, unsigned __B) 
# 1093
{ 
# 1094
return (__m512i)__builtin_ia32_psraqi512_mask((__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1098
} 
# 1117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1118
_mm512_sra_epi64(__m512i __A, __m128i __B) 
# 1119
{ 
# 1120
return (__m512i)__builtin_ia32_psraq512_mask((__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 1125
} 
# 1128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1129
_mm512_mask_sra_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) 
# 1130
{ 
# 1131
return (__m512i)__builtin_ia32_psraq512_mask((__v8di)__A, (__v2di)__B, (__v8di)__W, (__mmask8)__U); 
# 1135
} 
# 1138
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1139
_mm512_maskz_sra_epi64(__mmask8 __U, __m512i __A, __m128i __B) 
# 1140
{ 
# 1141
return (__m512i)__builtin_ia32_psraq512_mask((__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1146
} 
# 1150
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1151
_mm512_slli_epi32(__m512i __A, unsigned __B) 
# 1152
{ 
# 1153
return (__m512i)__builtin_ia32_pslldi512_mask((__v16si)__A, __B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1157
} 
# 1160
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1161
_mm512_mask_slli_epi32(__m512i __W, __mmask16 __U, __m512i __A, unsigned 
# 1162
__B) 
# 1163
{ 
# 1164
return (__m512i)__builtin_ia32_pslldi512_mask((__v16si)__A, __B, (__v16si)__W, (__mmask16)__U); 
# 1167
} 
# 1170
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1171
_mm512_maskz_slli_epi32(__mmask16 __U, __m512i __A, unsigned __B) 
# 1172
{ 
# 1173
return (__m512i)__builtin_ia32_pslldi512_mask((__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1177
} 
# 1196
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1197
_mm512_sll_epi32(__m512i __A, __m128i __B) 
# 1198
{ 
# 1199
return (__m512i)__builtin_ia32_pslld512_mask((__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1204
} 
# 1207
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1208
_mm512_mask_sll_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) 
# 1209
{ 
# 1210
return (__m512i)__builtin_ia32_pslld512_mask((__v16si)__A, (__v4si)__B, (__v16si)__W, (__mmask16)__U); 
# 1214
} 
# 1217
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1218
_mm512_maskz_sll_epi32(__mmask16 __U, __m512i __A, __m128i __B) 
# 1219
{ 
# 1220
return (__m512i)__builtin_ia32_pslld512_mask((__v16si)__A, (__v4si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1225
} 
# 1229
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1230
_mm512_srli_epi32(__m512i __A, unsigned __B) 
# 1231
{ 
# 1232
return (__m512i)__builtin_ia32_psrldi512_mask((__v16si)__A, __B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1236
} 
# 1239
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1240
_mm512_mask_srli_epi32(__m512i __W, __mmask16 __U, __m512i 
# 1241
__A, unsigned __B) 
# 1242
{ 
# 1243
return (__m512i)__builtin_ia32_psrldi512_mask((__v16si)__A, __B, (__v16si)__W, (__mmask16)__U); 
# 1246
} 
# 1249
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1250
_mm512_maskz_srli_epi32(__mmask16 __U, __m512i __A, unsigned __B) 
# 1251
{ 
# 1252
return (__m512i)__builtin_ia32_psrldi512_mask((__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1256
} 
# 1275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1276
_mm512_srl_epi32(__m512i __A, __m128i __B) 
# 1277
{ 
# 1278
return (__m512i)__builtin_ia32_psrld512_mask((__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1283
} 
# 1286
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1287
_mm512_mask_srl_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) 
# 1288
{ 
# 1289
return (__m512i)__builtin_ia32_psrld512_mask((__v16si)__A, (__v4si)__B, (__v16si)__W, (__mmask16)__U); 
# 1293
} 
# 1296
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1297
_mm512_maskz_srl_epi32(__mmask16 __U, __m512i __A, __m128i __B) 
# 1298
{ 
# 1299
return (__m512i)__builtin_ia32_psrld512_mask((__v16si)__A, (__v4si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1304
} 
# 1308
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1309
_mm512_srai_epi32(__m512i __A, unsigned __B) 
# 1310
{ 
# 1311
return (__m512i)__builtin_ia32_psradi512_mask((__v16si)__A, __B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1315
} 
# 1318
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1319
_mm512_mask_srai_epi32(__m512i __W, __mmask16 __U, __m512i __A, unsigned 
# 1320
__B) 
# 1321
{ 
# 1322
return (__m512i)__builtin_ia32_psradi512_mask((__v16si)__A, __B, (__v16si)__W, (__mmask16)__U); 
# 1325
} 
# 1328
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1329
_mm512_maskz_srai_epi32(__mmask16 __U, __m512i __A, unsigned __B) 
# 1330
{ 
# 1331
return (__m512i)__builtin_ia32_psradi512_mask((__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1335
} 
# 1354
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1355
_mm512_sra_epi32(__m512i __A, __m128i __B) 
# 1356
{ 
# 1357
return (__m512i)__builtin_ia32_psrad512_mask((__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1362
} 
# 1365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1366
_mm512_mask_sra_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) 
# 1367
{ 
# 1368
return (__m512i)__builtin_ia32_psrad512_mask((__v16si)__A, (__v4si)__B, (__v16si)__W, (__mmask16)__U); 
# 1372
} 
# 1375
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1376
_mm512_maskz_sra_epi32(__mmask16 __U, __m512i __A, __m128i __B) 
# 1377
{ 
# 1378
return (__m512i)__builtin_ia32_psrad512_mask((__v16si)__A, (__v4si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1383
} 
# 1387
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1388
_mm_add_round_sd(__m128d __A, __m128d __B, const int __R) 
# 1389
{ 
# 1390
return (__m128d)__builtin_ia32_addsd_round((__v2df)__A, (__v2df)__B, __R); 
# 1393
} 
# 1396
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1397
_mm_add_round_ss(__m128 __A, __m128 __B, const int __R) 
# 1398
{ 
# 1399
return (__m128)__builtin_ia32_addss_round((__v4sf)__A, (__v4sf)__B, __R); 
# 1402
} 
# 1405
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1406
_mm_sub_round_sd(__m128d __A, __m128d __B, const int __R) 
# 1407
{ 
# 1408
return (__m128d)__builtin_ia32_subsd_round((__v2df)__A, (__v2df)__B, __R); 
# 1411
} 
# 1414
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1415
_mm_sub_round_ss(__m128 __A, __m128 __B, const int __R) 
# 1416
{ 
# 1417
return (__m128)__builtin_ia32_subss_round((__v4sf)__A, (__v4sf)__B, __R); 
# 1420
} 
# 1438
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1439
_mm512_ternarylogic_epi64(__m512i __A, __m512i __B, __m512i __C, const int imm) 
# 1440
{ 
# 1441
return (__m512i)__builtin_ia32_pternlogq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__C, imm, (__mmask8)(-1)); 
# 1445
} 
# 1448
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1449
_mm512_mask_ternarylogic_epi64(__m512i __A, __mmask8 __U, __m512i __B, __m512i 
# 1450
__C, const int imm) 
# 1451
{ 
# 1452
return (__m512i)__builtin_ia32_pternlogq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__C, imm, (__mmask8)__U); 
# 1456
} 
# 1459
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1460
_mm512_maskz_ternarylogic_epi64(__mmask8 __U, __m512i __A, __m512i __B, __m512i 
# 1461
__C, const int imm) 
# 1462
{ 
# 1463
return (__m512i)__builtin_ia32_pternlogq512_maskz((__v8di)__A, (__v8di)__B, (__v8di)__C, imm, (__mmask8)__U); 
# 1467
} 
# 1470
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1471
_mm512_ternarylogic_epi32(__m512i __A, __m512i __B, __m512i __C, const int imm) 
# 1472
{ 
# 1473
return (__m512i)__builtin_ia32_pternlogd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__C, imm, (__mmask16)(-1)); 
# 1477
} 
# 1480
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1481
_mm512_mask_ternarylogic_epi32(__m512i __A, __mmask16 __U, __m512i __B, __m512i 
# 1482
__C, const int imm) 
# 1483
{ 
# 1484
return (__m512i)__builtin_ia32_pternlogd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__C, imm, (__mmask16)__U); 
# 1488
} 
# 1491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1492
_mm512_maskz_ternarylogic_epi32(__mmask16 __U, __m512i __A, __m512i __B, __m512i 
# 1493
__C, const int imm) 
# 1494
{ 
# 1495
return (__m512i)__builtin_ia32_pternlogd512_maskz((__v16si)__A, (__v16si)__B, (__v16si)__C, imm, (__mmask16)__U); 
# 1499
} 
# 1525
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1526
_mm512_rcp14_pd(__m512d __A) 
# 1527
{ 
# 1528
return (__m512d)__builtin_ia32_rcp14pd512_mask((__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 1532
} 
# 1535
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1536
_mm512_mask_rcp14_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 1537
{ 
# 1538
return (__m512d)__builtin_ia32_rcp14pd512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U); 
# 1541
} 
# 1544
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1545
_mm512_maskz_rcp14_pd(__mmask8 __U, __m512d __A) 
# 1546
{ 
# 1547
return (__m512d)__builtin_ia32_rcp14pd512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 1551
} 
# 1554
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1555
_mm512_rcp14_ps(__m512 __A) 
# 1556
{ 
# 1557
return (__m512)__builtin_ia32_rcp14ps512_mask((__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 1561
} 
# 1564
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1565
_mm512_mask_rcp14_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 1566
{ 
# 1567
return (__m512)__builtin_ia32_rcp14ps512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U); 
# 1570
} 
# 1573
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1574
_mm512_maskz_rcp14_ps(__mmask16 __U, __m512 __A) 
# 1575
{ 
# 1576
return (__m512)__builtin_ia32_rcp14ps512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 1580
} 
# 1583
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1584
_mm_rcp14_sd(__m128d __A, __m128d __B) 
# 1585
{ 
# 1586
return (__m128d)__builtin_ia32_rcp14sd((__v2df)__B, (__v2df)__A); 
# 1588
} 
# 1591
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1592
_mm_rcp14_ss(__m128 __A, __m128 __B) 
# 1593
{ 
# 1594
return (__m128)__builtin_ia32_rcp14ss((__v4sf)__B, (__v4sf)__A); 
# 1596
} 
# 1599
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1600
_mm512_rsqrt14_pd(__m512d __A) 
# 1601
{ 
# 1602
return (__m512d)__builtin_ia32_rsqrt14pd512_mask((__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 1606
} 
# 1609
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1610
_mm512_mask_rsqrt14_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 1611
{ 
# 1612
return (__m512d)__builtin_ia32_rsqrt14pd512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U); 
# 1615
} 
# 1618
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1619
_mm512_maskz_rsqrt14_pd(__mmask8 __U, __m512d __A) 
# 1620
{ 
# 1621
return (__m512d)__builtin_ia32_rsqrt14pd512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 1625
} 
# 1628
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1629
_mm512_rsqrt14_ps(__m512 __A) 
# 1630
{ 
# 1631
return (__m512)__builtin_ia32_rsqrt14ps512_mask((__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 1635
} 
# 1638
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1639
_mm512_mask_rsqrt14_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 1640
{ 
# 1641
return (__m512)__builtin_ia32_rsqrt14ps512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U); 
# 1644
} 
# 1647
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1648
_mm512_maskz_rsqrt14_ps(__mmask16 __U, __m512 __A) 
# 1649
{ 
# 1650
return (__m512)__builtin_ia32_rsqrt14ps512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 1654
} 
# 1657
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1658
_mm_rsqrt14_sd(__m128d __A, __m128d __B) 
# 1659
{ 
# 1660
return (__m128d)__builtin_ia32_rsqrt14sd((__v2df)__B, (__v2df)__A); 
# 1662
} 
# 1665
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1666
_mm_rsqrt14_ss(__m128 __A, __m128 __B) 
# 1667
{ 
# 1668
return (__m128)__builtin_ia32_rsqrt14ss((__v4sf)__B, (__v4sf)__A); 
# 1670
} 
# 1674
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1675
_mm512_sqrt_round_pd(__m512d __A, const int __R) 
# 1676
{ 
# 1677
return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 1681
} 
# 1684
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1685
_mm512_mask_sqrt_round_pd(__m512d __W, __mmask8 __U, __m512d __A, const int 
# 1686
__R) 
# 1687
{ 
# 1688
return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U, __R); 
# 1691
} 
# 1694
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1695
_mm512_maskz_sqrt_round_pd(__mmask8 __U, __m512d __A, const int __R) 
# 1696
{ 
# 1697
return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 1701
} 
# 1704
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1705
_mm512_sqrt_round_ps(__m512 __A, const int __R) 
# 1706
{ 
# 1707
return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 1711
} 
# 1714
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1715
_mm512_mask_sqrt_round_ps(__m512 __W, __mmask16 __U, __m512 __A, const int __R) 
# 1716
{ 
# 1717
return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U, __R); 
# 1720
} 
# 1723
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1724
_mm512_maskz_sqrt_round_ps(__mmask16 __U, __m512 __A, const int __R) 
# 1725
{ 
# 1726
return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 1730
} 
# 1733
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1734
_mm_sqrt_round_sd(__m128d __A, __m128d __B, const int __R) 
# 1735
{ 
# 1736
return (__m128d)__builtin_ia32_sqrtsd_round((__v2df)__B, (__v2df)__A, __R); 
# 1739
} 
# 1742
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1743
_mm_sqrt_round_ss(__m128 __A, __m128 __B, const int __R) 
# 1744
{ 
# 1745
return (__m128)__builtin_ia32_sqrtss_round((__v4sf)__B, (__v4sf)__A, __R); 
# 1748
} 
# 1776
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1777
_mm512_cvtepi8_epi32(__m128i __A) 
# 1778
{ 
# 1779
return (__m512i)__builtin_ia32_pmovsxbd512_mask((__v16qi)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1783
} 
# 1786
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1787
_mm512_mask_cvtepi8_epi32(__m512i __W, __mmask16 __U, __m128i __A) 
# 1788
{ 
# 1789
return (__m512i)__builtin_ia32_pmovsxbd512_mask((__v16qi)__A, (__v16si)__W, (__mmask16)__U); 
# 1792
} 
# 1795
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1796
_mm512_maskz_cvtepi8_epi32(__mmask16 __U, __m128i __A) 
# 1797
{ 
# 1798
return (__m512i)__builtin_ia32_pmovsxbd512_mask((__v16qi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1802
} 
# 1805
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1806
_mm512_cvtepi8_epi64(__m128i __A) 
# 1807
{ 
# 1808
return (__m512i)__builtin_ia32_pmovsxbq512_mask((__v16qi)__A, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 1812
} 
# 1815
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1816
_mm512_mask_cvtepi8_epi64(__m512i __W, __mmask8 __U, __m128i __A) 
# 1817
{ 
# 1818
return (__m512i)__builtin_ia32_pmovsxbq512_mask((__v16qi)__A, (__v8di)__W, (__mmask8)__U); 
# 1821
} 
# 1824
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1825
_mm512_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) 
# 1826
{ 
# 1827
return (__m512i)__builtin_ia32_pmovsxbq512_mask((__v16qi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1831
} 
# 1834
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1835
_mm512_cvtepi16_epi32(__m256i __A) 
# 1836
{ 
# 1837
return (__m512i)__builtin_ia32_pmovsxwd512_mask((__v16hi)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1841
} 
# 1844
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1845
_mm512_mask_cvtepi16_epi32(__m512i __W, __mmask16 __U, __m256i __A) 
# 1846
{ 
# 1847
return (__m512i)__builtin_ia32_pmovsxwd512_mask((__v16hi)__A, (__v16si)__W, (__mmask16)__U); 
# 1850
} 
# 1853
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1854
_mm512_maskz_cvtepi16_epi32(__mmask16 __U, __m256i __A) 
# 1855
{ 
# 1856
return (__m512i)__builtin_ia32_pmovsxwd512_mask((__v16hi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1860
} 
# 1863
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1864
_mm512_cvtepi16_epi64(__m128i __A) 
# 1865
{ 
# 1866
return (__m512i)__builtin_ia32_pmovsxwq512_mask((__v8hi)__A, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 1870
} 
# 1873
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1874
_mm512_mask_cvtepi16_epi64(__m512i __W, __mmask8 __U, __m128i __A) 
# 1875
{ 
# 1876
return (__m512i)__builtin_ia32_pmovsxwq512_mask((__v8hi)__A, (__v8di)__W, (__mmask8)__U); 
# 1879
} 
# 1882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1883
_mm512_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) 
# 1884
{ 
# 1885
return (__m512i)__builtin_ia32_pmovsxwq512_mask((__v8hi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1889
} 
# 1892
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1893
_mm512_cvtepi32_epi64(__m256i __X) 
# 1894
{ 
# 1895
return (__m512i)__builtin_ia32_pmovsxdq512_mask((__v8si)__X, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 1899
} 
# 1902
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1903
_mm512_mask_cvtepi32_epi64(__m512i __W, __mmask8 __U, __m256i __X) 
# 1904
{ 
# 1905
return (__m512i)__builtin_ia32_pmovsxdq512_mask((__v8si)__X, (__v8di)__W, (__mmask8)__U); 
# 1908
} 
# 1911
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1912
_mm512_maskz_cvtepi32_epi64(__mmask8 __U, __m256i __X) 
# 1913
{ 
# 1914
return (__m512i)__builtin_ia32_pmovsxdq512_mask((__v8si)__X, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1918
} 
# 1921
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1922
_mm512_cvtepu8_epi32(__m128i __A) 
# 1923
{ 
# 1924
return (__m512i)__builtin_ia32_pmovzxbd512_mask((__v16qi)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1928
} 
# 1931
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1932
_mm512_mask_cvtepu8_epi32(__m512i __W, __mmask16 __U, __m128i __A) 
# 1933
{ 
# 1934
return (__m512i)__builtin_ia32_pmovzxbd512_mask((__v16qi)__A, (__v16si)__W, (__mmask16)__U); 
# 1937
} 
# 1940
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1941
_mm512_maskz_cvtepu8_epi32(__mmask16 __U, __m128i __A) 
# 1942
{ 
# 1943
return (__m512i)__builtin_ia32_pmovzxbd512_mask((__v16qi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1947
} 
# 1950
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1951
_mm512_cvtepu8_epi64(__m128i __A) 
# 1952
{ 
# 1953
return (__m512i)__builtin_ia32_pmovzxbq512_mask((__v16qi)__A, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 1957
} 
# 1960
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1961
_mm512_mask_cvtepu8_epi64(__m512i __W, __mmask8 __U, __m128i __A) 
# 1962
{ 
# 1963
return (__m512i)__builtin_ia32_pmovzxbq512_mask((__v16qi)__A, (__v8di)__W, (__mmask8)__U); 
# 1966
} 
# 1969
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1970
_mm512_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) 
# 1971
{ 
# 1972
return (__m512i)__builtin_ia32_pmovzxbq512_mask((__v16qi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1976
} 
# 1979
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1980
_mm512_cvtepu16_epi32(__m256i __A) 
# 1981
{ 
# 1982
return (__m512i)__builtin_ia32_pmovzxwd512_mask((__v16hi)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 1986
} 
# 1989
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1990
_mm512_mask_cvtepu16_epi32(__m512i __W, __mmask16 __U, __m256i __A) 
# 1991
{ 
# 1992
return (__m512i)__builtin_ia32_pmovzxwd512_mask((__v16hi)__A, (__v16si)__W, (__mmask16)__U); 
# 1995
} 
# 1998
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1999
_mm512_maskz_cvtepu16_epi32(__mmask16 __U, __m256i __A) 
# 2000
{ 
# 2001
return (__m512i)__builtin_ia32_pmovzxwd512_mask((__v16hi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 2005
} 
# 2008
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2009
_mm512_cvtepu16_epi64(__m128i __A) 
# 2010
{ 
# 2011
return (__m512i)__builtin_ia32_pmovzxwq512_mask((__v8hi)__A, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 2015
} 
# 2018
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2019
_mm512_mask_cvtepu16_epi64(__m512i __W, __mmask8 __U, __m128i __A) 
# 2020
{ 
# 2021
return (__m512i)__builtin_ia32_pmovzxwq512_mask((__v8hi)__A, (__v8di)__W, (__mmask8)__U); 
# 2024
} 
# 2027
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2028
_mm512_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) 
# 2029
{ 
# 2030
return (__m512i)__builtin_ia32_pmovzxwq512_mask((__v8hi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 2034
} 
# 2037
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2038
_mm512_cvtepu32_epi64(__m256i __X) 
# 2039
{ 
# 2040
return (__m512i)__builtin_ia32_pmovzxdq512_mask((__v8si)__X, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 2044
} 
# 2047
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2048
_mm512_mask_cvtepu32_epi64(__m512i __W, __mmask8 __U, __m256i __X) 
# 2049
{ 
# 2050
return (__m512i)__builtin_ia32_pmovzxdq512_mask((__v8si)__X, (__v8di)__W, (__mmask8)__U); 
# 2053
} 
# 2056
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2057
_mm512_maskz_cvtepu32_epi64(__mmask8 __U, __m256i __X) 
# 2058
{ 
# 2059
return (__m512i)__builtin_ia32_pmovzxdq512_mask((__v8si)__X, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 2063
} 
# 2067
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2068
_mm512_add_round_pd(__m512d __A, __m512d __B, const int __R) 
# 2069
{ 
# 2070
return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 2075
} 
# 2078
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2079
_mm512_mask_add_round_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 2080
__B, const int __R) 
# 2081
{ 
# 2082
return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, __R); 
# 2086
} 
# 2089
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2090
_mm512_maskz_add_round_pd(__mmask8 __U, __m512d __A, __m512d __B, const int 
# 2091
__R) 
# 2092
{ 
# 2093
return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 2098
} 
# 2101
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2102
_mm512_add_round_ps(__m512 __A, __m512 __B, const int __R) 
# 2103
{ 
# 2104
return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 2109
} 
# 2112
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2113
_mm512_mask_add_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 2114
__B, const int __R) 
# 2115
{ 
# 2116
return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R); 
# 2120
} 
# 2123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2124
_mm512_maskz_add_round_ps(__mmask16 __U, __m512 __A, __m512 __B, const int __R) 
# 2125
{ 
# 2126
return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 2131
} 
# 2134
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2135
_mm512_sub_round_pd(__m512d __A, __m512d __B, const int __R) 
# 2136
{ 
# 2137
return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 2142
} 
# 2145
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2146
_mm512_mask_sub_round_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 2147
__B, const int __R) 
# 2148
{ 
# 2149
return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, __R); 
# 2153
} 
# 2156
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2157
_mm512_maskz_sub_round_pd(__mmask8 __U, __m512d __A, __m512d __B, const int 
# 2158
__R) 
# 2159
{ 
# 2160
return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 2165
} 
# 2168
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2169
_mm512_sub_round_ps(__m512 __A, __m512 __B, const int __R) 
# 2170
{ 
# 2171
return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 2176
} 
# 2179
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2180
_mm512_mask_sub_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 2181
__B, const int __R) 
# 2182
{ 
# 2183
return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R); 
# 2187
} 
# 2190
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2191
_mm512_maskz_sub_round_ps(__mmask16 __U, __m512 __A, __m512 __B, const int __R) 
# 2192
{ 
# 2193
return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 2198
} 
# 2239
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2240
_mm512_mul_round_pd(__m512d __A, __m512d __B, const int __R) 
# 2241
{ 
# 2242
return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 2247
} 
# 2250
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2251
_mm512_mask_mul_round_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 2252
__B, const int __R) 
# 2253
{ 
# 2254
return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, __R); 
# 2258
} 
# 2261
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2262
_mm512_maskz_mul_round_pd(__mmask8 __U, __m512d __A, __m512d __B, const int 
# 2263
__R) 
# 2264
{ 
# 2265
return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 2270
} 
# 2273
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2274
_mm512_mul_round_ps(__m512 __A, __m512 __B, const int __R) 
# 2275
{ 
# 2276
return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 2281
} 
# 2284
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2285
_mm512_mask_mul_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 2286
__B, const int __R) 
# 2287
{ 
# 2288
return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R); 
# 2292
} 
# 2295
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2296
_mm512_maskz_mul_round_ps(__mmask16 __U, __m512 __A, __m512 __B, const int __R) 
# 2297
{ 
# 2298
return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 2303
} 
# 2306
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2307
_mm512_div_round_pd(__m512d __M, __m512d __V, const int __R) 
# 2308
{ 
# 2309
return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 2314
} 
# 2317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2318
_mm512_mask_div_round_pd(__m512d __W, __mmask8 __U, __m512d __M, __m512d 
# 2319
__V, const int __R) 
# 2320
{ 
# 2321
return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V, (__v8df)__W, (__mmask8)__U, __R); 
# 2325
} 
# 2328
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2329
_mm512_maskz_div_round_pd(__mmask8 __U, __m512d __M, __m512d __V, const int 
# 2330
__R) 
# 2331
{ 
# 2332
return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 2337
} 
# 2340
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2341
_mm512_div_round_ps(__m512 __A, __m512 __B, const int __R) 
# 2342
{ 
# 2343
return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 2348
} 
# 2351
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2352
_mm512_mask_div_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 2353
__B, const int __R) 
# 2354
{ 
# 2355
return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R); 
# 2359
} 
# 2362
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2363
_mm512_maskz_div_round_ps(__mmask16 __U, __m512 __A, __m512 __B, const int __R) 
# 2364
{ 
# 2365
return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 2370
} 
# 2373
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 2374
_mm_mul_round_sd(__m128d __A, __m128d __B, const int __R) 
# 2375
{ 
# 2376
return (__m128d)__builtin_ia32_mulsd_round((__v2df)__A, (__v2df)__B, __R); 
# 2379
} 
# 2382
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 2383
_mm_mul_round_ss(__m128 __A, __m128 __B, const int __R) 
# 2384
{ 
# 2385
return (__m128)__builtin_ia32_mulss_round((__v4sf)__A, (__v4sf)__B, __R); 
# 2388
} 
# 2391
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 2392
_mm_div_round_sd(__m128d __A, __m128d __B, const int __R) 
# 2393
{ 
# 2394
return (__m128d)__builtin_ia32_divsd_round((__v2df)__A, (__v2df)__B, __R); 
# 2397
} 
# 2400
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 2401
_mm_div_round_ss(__m128 __A, __m128 __B, const int __R) 
# 2402
{ 
# 2403
return (__m128)__builtin_ia32_divss_round((__v4sf)__A, (__v4sf)__B, __R); 
# 2406
} 
# 2460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2461
_mm512_max_round_pd(__m512d __A, __m512d __B, const int __R) 
# 2462
{ 
# 2463
return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 2468
} 
# 2471
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2472
_mm512_mask_max_round_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 2473
__B, const int __R) 
# 2474
{ 
# 2475
return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, __R); 
# 2479
} 
# 2482
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2483
_mm512_maskz_max_round_pd(__mmask8 __U, __m512d __A, __m512d __B, const int 
# 2484
__R) 
# 2485
{ 
# 2486
return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 2491
} 
# 2494
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2495
_mm512_max_round_ps(__m512 __A, __m512 __B, const int __R) 
# 2496
{ 
# 2497
return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 2502
} 
# 2505
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2506
_mm512_mask_max_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 2507
__B, const int __R) 
# 2508
{ 
# 2509
return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R); 
# 2513
} 
# 2516
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2517
_mm512_maskz_max_round_ps(__mmask16 __U, __m512 __A, __m512 __B, const int __R) 
# 2518
{ 
# 2519
return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 2524
} 
# 2527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2528
_mm512_min_round_pd(__m512d __A, __m512d __B, const int __R) 
# 2529
{ 
# 2530
return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 2535
} 
# 2538
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2539
_mm512_mask_min_round_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 2540
__B, const int __R) 
# 2541
{ 
# 2542
return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, __R); 
# 2546
} 
# 2549
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2550
_mm512_maskz_min_round_pd(__mmask8 __U, __m512d __A, __m512d __B, const int 
# 2551
__R) 
# 2552
{ 
# 2553
return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 2558
} 
# 2561
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2562
_mm512_min_round_ps(__m512 __A, __m512 __B, const int __R) 
# 2563
{ 
# 2564
return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 2569
} 
# 2572
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2573
_mm512_mask_min_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 2574
__B, const int __R) 
# 2575
{ 
# 2576
return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R); 
# 2580
} 
# 2583
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2584
_mm512_maskz_min_round_ps(__mmask16 __U, __m512 __A, __m512 __B, const int __R) 
# 2585
{ 
# 2586
return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 2591
} 
# 2632
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2633
_mm512_scalef_round_pd(__m512d __A, __m512d __B, const int __R) 
# 2634
{ 
# 2635
return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 2640
} 
# 2643
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2644
_mm512_mask_scalef_round_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 2645
__B, const int __R) 
# 2646
{ 
# 2647
return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, __R); 
# 2651
} 
# 2654
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2655
_mm512_maskz_scalef_round_pd(__mmask8 __U, __m512d __A, __m512d __B, const int 
# 2656
__R) 
# 2657
{ 
# 2658
return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 2663
} 
# 2666
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2667
_mm512_scalef_round_ps(__m512 __A, __m512 __B, const int __R) 
# 2668
{ 
# 2669
return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 2674
} 
# 2677
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2678
_mm512_mask_scalef_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 2679
__B, const int __R) 
# 2680
{ 
# 2681
return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R); 
# 2685
} 
# 2688
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2689
_mm512_maskz_scalef_round_ps(__mmask16 __U, __m512 __A, __m512 __B, const int 
# 2690
__R) 
# 2691
{ 
# 2692
return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 2697
} 
# 2700
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 2701
_mm_scalef_round_sd(__m128d __A, __m128d __B, const int __R) 
# 2702
{ 
# 2703
return (__m128d)__builtin_ia32_scalefsd_round((__v2df)__A, (__v2df)__B, __R); 
# 2706
} 
# 2709
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 2710
_mm_scalef_round_ss(__m128 __A, __m128 __B, const int __R) 
# 2711
{ 
# 2712
return (__m128)__builtin_ia32_scalefss_round((__v4sf)__A, (__v4sf)__B, __R); 
# 2715
} 
# 2744
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2745
_mm512_fmadd_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) 
# 2746
{ 
# 2747
return (__m512d)__builtin_ia32_vfmaddpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)(-1), __R); 
# 2751
} 
# 2754
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2755
_mm512_mask_fmadd_round_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d 
# 2756
__C, const int __R) 
# 2757
{ 
# 2758
return (__m512d)__builtin_ia32_vfmaddpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 2762
} 
# 2765
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2766
_mm512_mask3_fmadd_round_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 
# 2767
__U, const int __R) 
# 2768
{ 
# 2769
return (__m512d)__builtin_ia32_vfmaddpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 2773
} 
# 2776
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2777
_mm512_maskz_fmadd_round_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d 
# 2778
__C, const int __R) 
# 2779
{ 
# 2780
return (__m512d)__builtin_ia32_vfmaddpd512_maskz((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 2784
} 
# 2787
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2788
_mm512_fmadd_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) 
# 2789
{ 
# 2790
return (__m512)__builtin_ia32_vfmaddps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)(-1), __R); 
# 2794
} 
# 2797
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2798
_mm512_mask_fmadd_round_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 
# 2799
__C, const int __R) 
# 2800
{ 
# 2801
return (__m512)__builtin_ia32_vfmaddps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 2805
} 
# 2808
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2809
_mm512_mask3_fmadd_round_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 
# 2810
__U, const int __R) 
# 2811
{ 
# 2812
return (__m512)__builtin_ia32_vfmaddps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 2816
} 
# 2819
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2820
_mm512_maskz_fmadd_round_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 
# 2821
__C, const int __R) 
# 2822
{ 
# 2823
return (__m512)__builtin_ia32_vfmaddps512_maskz((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 2827
} 
# 2830
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2831
_mm512_fmsub_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) 
# 2832
{ 
# 2833
return (__m512d)__builtin_ia32_vfmaddpd512_mask((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)(-1), __R); 
# 2837
} 
# 2840
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2841
_mm512_mask_fmsub_round_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d 
# 2842
__C, const int __R) 
# 2843
{ 
# 2844
return (__m512d)__builtin_ia32_vfmaddpd512_mask((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)__U, __R); 
# 2848
} 
# 2851
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2852
_mm512_mask3_fmsub_round_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 
# 2853
__U, const int __R) 
# 2854
{ 
# 2855
return (__m512d)__builtin_ia32_vfmsubpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 2859
} 
# 2862
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2863
_mm512_maskz_fmsub_round_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d 
# 2864
__C, const int __R) 
# 2865
{ 
# 2866
return (__m512d)__builtin_ia32_vfmaddpd512_maskz((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)__U, __R); 
# 2870
} 
# 2873
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2874
_mm512_fmsub_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) 
# 2875
{ 
# 2876
return (__m512)__builtin_ia32_vfmaddps512_mask((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)(-1), __R); 
# 2880
} 
# 2883
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2884
_mm512_mask_fmsub_round_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 
# 2885
__C, const int __R) 
# 2886
{ 
# 2887
return (__m512)__builtin_ia32_vfmaddps512_mask((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, __R); 
# 2891
} 
# 2894
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2895
_mm512_mask3_fmsub_round_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 
# 2896
__U, const int __R) 
# 2897
{ 
# 2898
return (__m512)__builtin_ia32_vfmsubps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 2902
} 
# 2905
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2906
_mm512_maskz_fmsub_round_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 
# 2907
__C, const int __R) 
# 2908
{ 
# 2909
return (__m512)__builtin_ia32_vfmaddps512_maskz((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, __R); 
# 2913
} 
# 2916
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2917
_mm512_fmaddsub_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) 
# 2918
{ 
# 2919
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)(-1), __R); 
# 2923
} 
# 2926
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2927
_mm512_mask_fmaddsub_round_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d 
# 2928
__C, const int __R) 
# 2929
{ 
# 2930
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 2934
} 
# 2937
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2938
_mm512_mask3_fmaddsub_round_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 
# 2939
__U, const int __R) 
# 2940
{ 
# 2941
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 2945
} 
# 2948
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 2949
_mm512_maskz_fmaddsub_round_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d 
# 2950
__C, const int __R) 
# 2951
{ 
# 2952
return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 2956
} 
# 2959
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2960
_mm512_fmaddsub_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) 
# 2961
{ 
# 2962
return (__m512)__builtin_ia32_vfmaddsubps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)(-1), __R); 
# 2966
} 
# 2969
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2970
_mm512_mask_fmaddsub_round_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 
# 2971
__C, const int __R) 
# 2972
{ 
# 2973
return (__m512)__builtin_ia32_vfmaddsubps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 2977
} 
# 2980
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2981
_mm512_mask3_fmaddsub_round_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 
# 2982
__U, const int __R) 
# 2983
{ 
# 2984
return (__m512)__builtin_ia32_vfmaddsubps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 2988
} 
# 2991
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 2992
_mm512_maskz_fmaddsub_round_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 
# 2993
__C, const int __R) 
# 2994
{ 
# 2995
return (__m512)__builtin_ia32_vfmaddsubps512_maskz((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 2999
} 
# 3002
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3003
_mm512_fmsubadd_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) 
# 3004
{ 
# 3005
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)(-1), __R); 
# 3009
} 
# 3012
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3013
_mm512_mask_fmsubadd_round_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d 
# 3014
__C, const int __R) 
# 3015
{ 
# 3016
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)__U, __R); 
# 3020
} 
# 3023
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3024
_mm512_mask3_fmsubadd_round_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 
# 3025
__U, const int __R) 
# 3026
{ 
# 3027
return (__m512d)__builtin_ia32_vfmsubaddpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 3031
} 
# 3034
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3035
_mm512_maskz_fmsubadd_round_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d 
# 3036
__C, const int __R) 
# 3037
{ 
# 3038
return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)__U, __R); 
# 3042
} 
# 3045
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3046
_mm512_fmsubadd_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) 
# 3047
{ 
# 3048
return (__m512)__builtin_ia32_vfmaddsubps512_mask((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)(-1), __R); 
# 3052
} 
# 3055
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3056
_mm512_mask_fmsubadd_round_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 
# 3057
__C, const int __R) 
# 3058
{ 
# 3059
return (__m512)__builtin_ia32_vfmaddsubps512_mask((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, __R); 
# 3063
} 
# 3066
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3067
_mm512_mask3_fmsubadd_round_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 
# 3068
__U, const int __R) 
# 3069
{ 
# 3070
return (__m512)__builtin_ia32_vfmsubaddps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 3074
} 
# 3077
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3078
_mm512_maskz_fmsubadd_round_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 
# 3079
__C, const int __R) 
# 3080
{ 
# 3081
return (__m512)__builtin_ia32_vfmaddsubps512_maskz((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, __R); 
# 3085
} 
# 3088
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3089
_mm512_fnmadd_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) 
# 3090
{ 
# 3091
return (__m512d)__builtin_ia32_vfmaddpd512_mask(-((__v8df)__A), (__v8df)__B, (__v8df)__C, (__mmask8)(-1), __R); 
# 3095
} 
# 3098
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3099
_mm512_mask_fnmadd_round_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d 
# 3100
__C, const int __R) 
# 3101
{ 
# 3102
return (__m512d)__builtin_ia32_vfnmaddpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 3106
} 
# 3109
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3110
_mm512_mask3_fnmadd_round_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 
# 3111
__U, const int __R) 
# 3112
{ 
# 3113
return (__m512d)__builtin_ia32_vfmaddpd512_mask3(-((__v8df)__A), (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 3117
} 
# 3120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3121
_mm512_maskz_fnmadd_round_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d 
# 3122
__C, const int __R) 
# 3123
{ 
# 3124
return (__m512d)__builtin_ia32_vfmaddpd512_maskz(-((__v8df)__A), (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 3128
} 
# 3131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3132
_mm512_fnmadd_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) 
# 3133
{ 
# 3134
return (__m512)__builtin_ia32_vfmaddps512_mask(-((__v16sf)__A), (__v16sf)__B, (__v16sf)__C, (__mmask16)(-1), __R); 
# 3138
} 
# 3141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3142
_mm512_mask_fnmadd_round_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 
# 3143
__C, const int __R) 
# 3144
{ 
# 3145
return (__m512)__builtin_ia32_vfnmaddps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 3149
} 
# 3152
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3153
_mm512_mask3_fnmadd_round_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 
# 3154
__U, const int __R) 
# 3155
{ 
# 3156
return (__m512)__builtin_ia32_vfmaddps512_mask3(-((__v16sf)__A), (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 3160
} 
# 3163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3164
_mm512_maskz_fnmadd_round_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 
# 3165
__C, const int __R) 
# 3166
{ 
# 3167
return (__m512)__builtin_ia32_vfmaddps512_maskz(-((__v16sf)__A), (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 3171
} 
# 3174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3175
_mm512_fnmsub_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) 
# 3176
{ 
# 3177
return (__m512d)__builtin_ia32_vfmaddpd512_mask(-((__v8df)__A), (__v8df)__B, -((__v8df)__C), (__mmask8)(-1), __R); 
# 3181
} 
# 3184
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3185
_mm512_mask_fnmsub_round_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d 
# 3186
__C, const int __R) 
# 3187
{ 
# 3188
return (__m512d)__builtin_ia32_vfnmsubpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 3192
} 
# 3195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3196
_mm512_mask3_fnmsub_round_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 
# 3197
__U, const int __R) 
# 3198
{ 
# 3199
return (__m512d)__builtin_ia32_vfnmsubpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R); 
# 3203
} 
# 3206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3207
_mm512_maskz_fnmsub_round_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d 
# 3208
__C, const int __R) 
# 3209
{ 
# 3210
return (__m512d)__builtin_ia32_vfmaddpd512_maskz(-((__v8df)__A), (__v8df)__B, -((__v8df)__C), (__mmask8)__U, __R); 
# 3214
} 
# 3217
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3218
_mm512_fnmsub_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) 
# 3219
{ 
# 3220
return (__m512)__builtin_ia32_vfmaddps512_mask(-((__v16sf)__A), (__v16sf)__B, -((__v16sf)__C), (__mmask16)(-1), __R); 
# 3224
} 
# 3227
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3228
_mm512_mask_fnmsub_round_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 
# 3229
__C, const int __R) 
# 3230
{ 
# 3231
return (__m512)__builtin_ia32_vfnmsubps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 3235
} 
# 3238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3239
_mm512_mask3_fnmsub_round_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 
# 3240
__U, const int __R) 
# 3241
{ 
# 3242
return (__m512)__builtin_ia32_vfnmsubps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R); 
# 3246
} 
# 3249
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3250
_mm512_maskz_fnmsub_round_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 
# 3251
__C, const int __R) 
# 3252
{ 
# 3253
return (__m512)__builtin_ia32_vfmaddps512_maskz(-((__v16sf)__A), (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, __R); 
# 3257
} 
# 3405
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3406
_mm512_abs_epi64(__m512i __A) 
# 3407
{ 
# 3408
return (__m512i)__builtin_ia32_pabsq512_mask((__v8di)__A, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 3412
} 
# 3415
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3416
_mm512_mask_abs_epi64(__m512i __W, __mmask8 __U, __m512i __A) 
# 3417
{ 
# 3418
return (__m512i)__builtin_ia32_pabsq512_mask((__v8di)__A, (__v8di)__W, (__mmask8)__U); 
# 3421
} 
# 3424
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3425
_mm512_maskz_abs_epi64(__mmask8 __U, __m512i __A) 
# 3426
{ 
# 3427
return (__m512i)__builtin_ia32_pabsq512_mask((__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 3431
} 
# 3434
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3435
_mm512_abs_epi32(__m512i __A) 
# 3436
{ 
# 3437
return (__m512i)__builtin_ia32_pabsd512_mask((__v16si)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 3441
} 
# 3444
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3445
_mm512_mask_abs_epi32(__m512i __W, __mmask16 __U, __m512i __A) 
# 3446
{ 
# 3447
return (__m512i)__builtin_ia32_pabsd512_mask((__v16si)__A, (__v16si)__W, (__mmask16)__U); 
# 3450
} 
# 3453
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3454
_mm512_maskz_abs_epi32(__mmask16 __U, __m512i __A) 
# 3455
{ 
# 3456
return (__m512i)__builtin_ia32_pabsd512_mask((__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 3460
} 
# 3463
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3464
_mm512_broadcastss_ps(__m128 __A) 
# 3465
{ 
# 3466
return (__m512)__builtin_ia32_broadcastss512((__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 3470
} 
# 3473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3474
_mm512_mask_broadcastss_ps(__m512 __O, __mmask16 __M, __m128 __A) 
# 3475
{ 
# 3476
return (__m512)__builtin_ia32_broadcastss512((__v4sf)__A, (__v16sf)__O, __M); 
# 3478
} 
# 3481
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3482
_mm512_maskz_broadcastss_ps(__mmask16 __M, __m128 __A) 
# 3483
{ 
# 3484
return (__m512)__builtin_ia32_broadcastss512((__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M); 
# 3488
} 
# 3491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3492
_mm512_broadcastsd_pd(__m128d __A) 
# 3493
{ 
# 3494
return (__m512d)__builtin_ia32_broadcastsd512((__v2df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 3498
} 
# 3501
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3502
_mm512_mask_broadcastsd_pd(__m512d __O, __mmask8 __M, __m128d __A) 
# 3503
{ 
# 3504
return (__m512d)__builtin_ia32_broadcastsd512((__v2df)__A, (__v8df)__O, __M); 
# 3506
} 
# 3509
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3510
_mm512_maskz_broadcastsd_pd(__mmask8 __M, __m128d __A) 
# 3511
{ 
# 3512
return (__m512d)__builtin_ia32_broadcastsd512((__v2df)__A, (__v8df)_mm512_setzero_pd(), __M); 
# 3516
} 
# 3519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3520
_mm512_broadcastd_epi32(__m128i __A) 
# 3521
{ 
# 3522
return (__m512i)__builtin_ia32_pbroadcastd512((__v4si)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 3526
} 
# 3529
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3530
_mm512_mask_broadcastd_epi32(__m512i __O, __mmask16 __M, __m128i __A) 
# 3531
{ 
# 3532
return (__m512i)__builtin_ia32_pbroadcastd512((__v4si)__A, (__v16si)__O, __M); 
# 3534
} 
# 3537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3538
_mm512_maskz_broadcastd_epi32(__mmask16 __M, __m128i __A) 
# 3539
{ 
# 3540
return (__m512i)__builtin_ia32_pbroadcastd512((__v4si)__A, (__v16si)_mm512_setzero_si512(), __M); 
# 3544
} 
# 3547
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3548
_mm512_set1_epi32(int __A) 
# 3549
{ 
# 3550
return (__m512i)__builtin_ia32_pbroadcastd512_gpr_mask(__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 3554
} 
# 3557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3558
_mm512_mask_set1_epi32(__m512i __O, __mmask16 __M, int __A) 
# 3559
{ 
# 3560
return (__m512i)__builtin_ia32_pbroadcastd512_gpr_mask(__A, (__v16si)__O, __M); 
# 3562
} 
# 3565
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3566
_mm512_maskz_set1_epi32(__mmask16 __M, int __A) 
# 3567
{ 
# 3568
return (__m512i)__builtin_ia32_pbroadcastd512_gpr_mask(__A, (__v16si)_mm512_setzero_si512(), __M); 
# 3572
} 
# 3575
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3576
_mm512_broadcastq_epi64(__m128i __A) 
# 3577
{ 
# 3578
return (__m512i)__builtin_ia32_pbroadcastq512((__v2di)__A, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 3582
} 
# 3585
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3586
_mm512_mask_broadcastq_epi64(__m512i __O, __mmask8 __M, __m128i __A) 
# 3587
{ 
# 3588
return (__m512i)__builtin_ia32_pbroadcastq512((__v2di)__A, (__v8di)__O, __M); 
# 3590
} 
# 3593
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3594
_mm512_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) 
# 3595
{ 
# 3596
return (__m512i)__builtin_ia32_pbroadcastq512((__v2di)__A, (__v8di)_mm512_setzero_si512(), __M); 
# 3600
} 
# 3603
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3604
_mm512_set1_epi64(long long __A) 
# 3605
{ 
# 3606
return (__m512i)__builtin_ia32_pbroadcastq512_gpr_mask(__A, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 3610
} 
# 3613
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3614
_mm512_mask_set1_epi64(__m512i __O, __mmask8 __M, long long __A) 
# 3615
{ 
# 3616
return (__m512i)__builtin_ia32_pbroadcastq512_gpr_mask(__A, (__v8di)__O, __M); 
# 3618
} 
# 3621
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3622
_mm512_maskz_set1_epi64(__mmask8 __M, long long __A) 
# 3623
{ 
# 3624
return (__m512i)__builtin_ia32_pbroadcastq512_gpr_mask(__A, (__v8di)_mm512_setzero_si512(), __M); 
# 3628
} 
# 3631
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3632
_mm512_broadcast_f32x4(__m128 __A) 
# 3633
{ 
# 3634
return (__m512)__builtin_ia32_broadcastf32x4_512((__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 3638
} 
# 3641
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3642
_mm512_mask_broadcast_f32x4(__m512 __O, __mmask16 __M, __m128 __A) 
# 3643
{ 
# 3644
return (__m512)__builtin_ia32_broadcastf32x4_512((__v4sf)__A, (__v16sf)__O, __M); 
# 3647
} 
# 3650
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3651
_mm512_maskz_broadcast_f32x4(__mmask16 __M, __m128 __A) 
# 3652
{ 
# 3653
return (__m512)__builtin_ia32_broadcastf32x4_512((__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M); 
# 3657
} 
# 3660
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3661
_mm512_broadcast_i32x4(__m128i __A) 
# 3662
{ 
# 3663
return (__m512i)__builtin_ia32_broadcasti32x4_512((__v4si)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 3667
} 
# 3670
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3671
_mm512_mask_broadcast_i32x4(__m512i __O, __mmask16 __M, __m128i __A) 
# 3672
{ 
# 3673
return (__m512i)__builtin_ia32_broadcasti32x4_512((__v4si)__A, (__v16si)__O, __M); 
# 3676
} 
# 3679
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3680
_mm512_maskz_broadcast_i32x4(__mmask16 __M, __m128i __A) 
# 3681
{ 
# 3682
return (__m512i)__builtin_ia32_broadcasti32x4_512((__v4si)__A, (__v16si)_mm512_setzero_si512(), __M); 
# 3686
} 
# 3689
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3690
_mm512_broadcast_f64x4(__m256d __A) 
# 3691
{ 
# 3692
return (__m512d)__builtin_ia32_broadcastf64x4_512((__v4df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 3696
} 
# 3699
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3700
_mm512_mask_broadcast_f64x4(__m512d __O, __mmask8 __M, __m256d __A) 
# 3701
{ 
# 3702
return (__m512d)__builtin_ia32_broadcastf64x4_512((__v4df)__A, (__v8df)__O, __M); 
# 3705
} 
# 3708
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3709
_mm512_maskz_broadcast_f64x4(__mmask8 __M, __m256d __A) 
# 3710
{ 
# 3711
return (__m512d)__builtin_ia32_broadcastf64x4_512((__v4df)__A, (__v8df)_mm512_setzero_pd(), __M); 
# 3715
} 
# 3718
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3719
_mm512_broadcast_i64x4(__m256i __A) 
# 3720
{ 
# 3721
return (__m512i)__builtin_ia32_broadcasti64x4_512((__v4di)__A, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 3725
} 
# 3728
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3729
_mm512_mask_broadcast_i64x4(__m512i __O, __mmask8 __M, __m256i __A) 
# 3730
{ 
# 3731
return (__m512i)__builtin_ia32_broadcasti64x4_512((__v4di)__A, (__v8di)__O, __M); 
# 3734
} 
# 3737
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3738
_mm512_maskz_broadcast_i64x4(__mmask8 __M, __m256i __A) 
# 3739
{ 
# 3740
return (__m512i)__builtin_ia32_broadcasti64x4_512((__v4di)__A, (__v8di)_mm512_setzero_si512(), __M); 
# 3744
} 
# 3834
typedef 
# 3747
enum { 
# 3748
_MM_PERM_AAAA, _MM_PERM_AAAB, _MM_PERM_AAAC, 
# 3749
_MM_PERM_AAAD, _MM_PERM_AABA, _MM_PERM_AABB, 
# 3750
_MM_PERM_AABC, _MM_PERM_AABD, _MM_PERM_AACA, 
# 3751
_MM_PERM_AACB, _MM_PERM_AACC, _MM_PERM_AACD, 
# 3752
_MM_PERM_AADA, _MM_PERM_AADB, _MM_PERM_AADC, 
# 3753
_MM_PERM_AADD, _MM_PERM_ABAA, _MM_PERM_ABAB, 
# 3754
_MM_PERM_ABAC, _MM_PERM_ABAD, _MM_PERM_ABBA, 
# 3755
_MM_PERM_ABBB, _MM_PERM_ABBC, _MM_PERM_ABBD, 
# 3756
_MM_PERM_ABCA, _MM_PERM_ABCB, _MM_PERM_ABCC, 
# 3757
_MM_PERM_ABCD, _MM_PERM_ABDA, _MM_PERM_ABDB, 
# 3758
_MM_PERM_ABDC, _MM_PERM_ABDD, _MM_PERM_ACAA, 
# 3759
_MM_PERM_ACAB, _MM_PERM_ACAC, _MM_PERM_ACAD, 
# 3760
_MM_PERM_ACBA, _MM_PERM_ACBB, _MM_PERM_ACBC, 
# 3761
_MM_PERM_ACBD, _MM_PERM_ACCA, _MM_PERM_ACCB, 
# 3762
_MM_PERM_ACCC, _MM_PERM_ACCD, _MM_PERM_ACDA, 
# 3763
_MM_PERM_ACDB, _MM_PERM_ACDC, _MM_PERM_ACDD, 
# 3764
_MM_PERM_ADAA, _MM_PERM_ADAB, _MM_PERM_ADAC, 
# 3765
_MM_PERM_ADAD, _MM_PERM_ADBA, _MM_PERM_ADBB, 
# 3766
_MM_PERM_ADBC, _MM_PERM_ADBD, _MM_PERM_ADCA, 
# 3767
_MM_PERM_ADCB, _MM_PERM_ADCC, _MM_PERM_ADCD, 
# 3768
_MM_PERM_ADDA, _MM_PERM_ADDB, _MM_PERM_ADDC, 
# 3769
_MM_PERM_ADDD, _MM_PERM_BAAA, _MM_PERM_BAAB, 
# 3770
_MM_PERM_BAAC, _MM_PERM_BAAD, _MM_PERM_BABA, 
# 3771
_MM_PERM_BABB, _MM_PERM_BABC, _MM_PERM_BABD, 
# 3772
_MM_PERM_BACA, _MM_PERM_BACB, _MM_PERM_BACC, 
# 3773
_MM_PERM_BACD, _MM_PERM_BADA, _MM_PERM_BADB, 
# 3774
_MM_PERM_BADC, _MM_PERM_BADD, _MM_PERM_BBAA, 
# 3775
_MM_PERM_BBAB, _MM_PERM_BBAC, _MM_PERM_BBAD, 
# 3776
_MM_PERM_BBBA, _MM_PERM_BBBB, _MM_PERM_BBBC, 
# 3777
_MM_PERM_BBBD, _MM_PERM_BBCA, _MM_PERM_BBCB, 
# 3778
_MM_PERM_BBCC, _MM_PERM_BBCD, _MM_PERM_BBDA, 
# 3779
_MM_PERM_BBDB, _MM_PERM_BBDC, _MM_PERM_BBDD, 
# 3780
_MM_PERM_BCAA, _MM_PERM_BCAB, _MM_PERM_BCAC, 
# 3781
_MM_PERM_BCAD, _MM_PERM_BCBA, _MM_PERM_BCBB, 
# 3782
_MM_PERM_BCBC, _MM_PERM_BCBD, _MM_PERM_BCCA, 
# 3783
_MM_PERM_BCCB, _MM_PERM_BCCC, _MM_PERM_BCCD, 
# 3784
_MM_PERM_BCDA, _MM_PERM_BCDB, _MM_PERM_BCDC, 
# 3785
_MM_PERM_BCDD, _MM_PERM_BDAA, _MM_PERM_BDAB, 
# 3786
_MM_PERM_BDAC, _MM_PERM_BDAD, _MM_PERM_BDBA, 
# 3787
_MM_PERM_BDBB, _MM_PERM_BDBC, _MM_PERM_BDBD, 
# 3788
_MM_PERM_BDCA, _MM_PERM_BDCB, _MM_PERM_BDCC, 
# 3789
_MM_PERM_BDCD, _MM_PERM_BDDA, _MM_PERM_BDDB, 
# 3790
_MM_PERM_BDDC, _MM_PERM_BDDD, _MM_PERM_CAAA, 
# 3791
_MM_PERM_CAAB, _MM_PERM_CAAC, _MM_PERM_CAAD, 
# 3792
_MM_PERM_CABA, _MM_PERM_CABB, _MM_PERM_CABC, 
# 3793
_MM_PERM_CABD, _MM_PERM_CACA, _MM_PERM_CACB, 
# 3794
_MM_PERM_CACC, _MM_PERM_CACD, _MM_PERM_CADA, 
# 3795
_MM_PERM_CADB, _MM_PERM_CADC, _MM_PERM_CADD, 
# 3796
_MM_PERM_CBAA, _MM_PERM_CBAB, _MM_PERM_CBAC, 
# 3797
_MM_PERM_CBAD, _MM_PERM_CBBA, _MM_PERM_CBBB, 
# 3798
_MM_PERM_CBBC, _MM_PERM_CBBD, _MM_PERM_CBCA, 
# 3799
_MM_PERM_CBCB, _MM_PERM_CBCC, _MM_PERM_CBCD, 
# 3800
_MM_PERM_CBDA, _MM_PERM_CBDB, _MM_PERM_CBDC, 
# 3801
_MM_PERM_CBDD, _MM_PERM_CCAA, _MM_PERM_CCAB, 
# 3802
_MM_PERM_CCAC, _MM_PERM_CCAD, _MM_PERM_CCBA, 
# 3803
_MM_PERM_CCBB, _MM_PERM_CCBC, _MM_PERM_CCBD, 
# 3804
_MM_PERM_CCCA, _MM_PERM_CCCB, _MM_PERM_CCCC, 
# 3805
_MM_PERM_CCCD, _MM_PERM_CCDA, _MM_PERM_CCDB, 
# 3806
_MM_PERM_CCDC, _MM_PERM_CCDD, _MM_PERM_CDAA, 
# 3807
_MM_PERM_CDAB, _MM_PERM_CDAC, _MM_PERM_CDAD, 
# 3808
_MM_PERM_CDBA, _MM_PERM_CDBB, _MM_PERM_CDBC, 
# 3809
_MM_PERM_CDBD, _MM_PERM_CDCA, _MM_PERM_CDCB, 
# 3810
_MM_PERM_CDCC, _MM_PERM_CDCD, _MM_PERM_CDDA, 
# 3811
_MM_PERM_CDDB, _MM_PERM_CDDC, _MM_PERM_CDDD, 
# 3812
_MM_PERM_DAAA, _MM_PERM_DAAB, _MM_PERM_DAAC, 
# 3813
_MM_PERM_DAAD, _MM_PERM_DABA, _MM_PERM_DABB, 
# 3814
_MM_PERM_DABC, _MM_PERM_DABD, _MM_PERM_DACA, 
# 3815
_MM_PERM_DACB, _MM_PERM_DACC, _MM_PERM_DACD, 
# 3816
_MM_PERM_DADA, _MM_PERM_DADB, _MM_PERM_DADC, 
# 3817
_MM_PERM_DADD, _MM_PERM_DBAA, _MM_PERM_DBAB, 
# 3818
_MM_PERM_DBAC, _MM_PERM_DBAD, _MM_PERM_DBBA, 
# 3819
_MM_PERM_DBBB, _MM_PERM_DBBC, _MM_PERM_DBBD, 
# 3820
_MM_PERM_DBCA, _MM_PERM_DBCB, _MM_PERM_DBCC, 
# 3821
_MM_PERM_DBCD, _MM_PERM_DBDA, _MM_PERM_DBDB, 
# 3822
_MM_PERM_DBDC, _MM_PERM_DBDD, _MM_PERM_DCAA, 
# 3823
_MM_PERM_DCAB, _MM_PERM_DCAC, _MM_PERM_DCAD, 
# 3824
_MM_PERM_DCBA, _MM_PERM_DCBB, _MM_PERM_DCBC, 
# 3825
_MM_PERM_DCBD, _MM_PERM_DCCA, _MM_PERM_DCCB, 
# 3826
_MM_PERM_DCCC, _MM_PERM_DCCD, _MM_PERM_DCDA, 
# 3827
_MM_PERM_DCDB, _MM_PERM_DCDC, _MM_PERM_DCDD, 
# 3828
_MM_PERM_DDAA, _MM_PERM_DDAB, _MM_PERM_DDAC, 
# 3829
_MM_PERM_DDAD, _MM_PERM_DDBA, _MM_PERM_DDBB, 
# 3830
_MM_PERM_DDBC, _MM_PERM_DDBD, _MM_PERM_DDCA, 
# 3831
_MM_PERM_DDCB, _MM_PERM_DDCC, _MM_PERM_DDCD, 
# 3832
_MM_PERM_DDDA, _MM_PERM_DDDB, _MM_PERM_DDDC, 
# 3833
_MM_PERM_DDDD
# 3834
} _MM_PERM_ENUM; 
# 3838
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3839
_mm512_shuffle_epi32(__m512i __A, _MM_PERM_ENUM __mask) 
# 3840
{ 
# 3841
return (__m512i)__builtin_ia32_pshufd512_mask((__v16si)__A, __mask, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 3846
} 
# 3849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3850
_mm512_mask_shuffle_epi32(__m512i __W, __mmask16 __U, __m512i __A, _MM_PERM_ENUM 
# 3851
__mask) 
# 3852
{ 
# 3853
return (__m512i)__builtin_ia32_pshufd512_mask((__v16si)__A, __mask, (__v16si)__W, (__mmask16)__U); 
# 3857
} 
# 3860
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3861
_mm512_maskz_shuffle_epi32(__mmask16 __U, __m512i __A, _MM_PERM_ENUM __mask) 
# 3862
{ 
# 3863
return (__m512i)__builtin_ia32_pshufd512_mask((__v16si)__A, __mask, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 3868
} 
# 3871
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3872
_mm512_shuffle_i64x2(__m512i __A, __m512i __B, const int __imm) 
# 3873
{ 
# 3874
return (__m512i)__builtin_ia32_shuf_i64x2_mask((__v8di)__A, (__v8di)__B, __imm, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 3879
} 
# 3882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3883
_mm512_mask_shuffle_i64x2(__m512i __W, __mmask8 __U, __m512i __A, __m512i 
# 3884
__B, const int __imm) 
# 3885
{ 
# 3886
return (__m512i)__builtin_ia32_shuf_i64x2_mask((__v8di)__A, (__v8di)__B, __imm, (__v8di)__W, (__mmask8)__U); 
# 3890
} 
# 3893
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3894
_mm512_maskz_shuffle_i64x2(__mmask8 __U, __m512i __A, __m512i __B, const int 
# 3895
__imm) 
# 3896
{ 
# 3897
return (__m512i)__builtin_ia32_shuf_i64x2_mask((__v8di)__A, (__v8di)__B, __imm, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 3902
} 
# 3905
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3906
_mm512_shuffle_i32x4(__m512i __A, __m512i __B, const int __imm) 
# 3907
{ 
# 3908
return (__m512i)__builtin_ia32_shuf_i32x4_mask((__v16si)__A, (__v16si)__B, __imm, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 3914
} 
# 3917
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3918
_mm512_mask_shuffle_i32x4(__m512i __W, __mmask16 __U, __m512i __A, __m512i 
# 3919
__B, const int __imm) 
# 3920
{ 
# 3921
return (__m512i)__builtin_ia32_shuf_i32x4_mask((__v16si)__A, (__v16si)__B, __imm, (__v16si)__W, (__mmask16)__U); 
# 3926
} 
# 3929
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 3930
_mm512_maskz_shuffle_i32x4(__mmask16 __U, __m512i __A, __m512i __B, const int 
# 3931
__imm) 
# 3932
{ 
# 3933
return (__m512i)__builtin_ia32_shuf_i32x4_mask((__v16si)__A, (__v16si)__B, __imm, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 3939
} 
# 3942
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3943
_mm512_shuffle_f64x2(__m512d __A, __m512d __B, const int __imm) 
# 3944
{ 
# 3945
return (__m512d)__builtin_ia32_shuf_f64x2_mask((__v8df)__A, (__v8df)__B, __imm, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 3950
} 
# 3953
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3954
_mm512_mask_shuffle_f64x2(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 3955
__B, const int __imm) 
# 3956
{ 
# 3957
return (__m512d)__builtin_ia32_shuf_f64x2_mask((__v8df)__A, (__v8df)__B, __imm, (__v8df)__W, (__mmask8)__U); 
# 3961
} 
# 3964
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 3965
_mm512_maskz_shuffle_f64x2(__mmask8 __U, __m512d __A, __m512d __B, const int 
# 3966
__imm) 
# 3967
{ 
# 3968
return (__m512d)__builtin_ia32_shuf_f64x2_mask((__v8df)__A, (__v8df)__B, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 3973
} 
# 3976
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3977
_mm512_shuffle_f32x4(__m512 __A, __m512 __B, const int __imm) 
# 3978
{ 
# 3979
return (__m512)__builtin_ia32_shuf_f32x4_mask((__v16sf)__A, (__v16sf)__B, __imm, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 3984
} 
# 3987
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3988
_mm512_mask_shuffle_f32x4(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 3989
__B, const int __imm) 
# 3990
{ 
# 3991
return (__m512)__builtin_ia32_shuf_f32x4_mask((__v16sf)__A, (__v16sf)__B, __imm, (__v16sf)__W, (__mmask16)__U); 
# 3995
} 
# 3998
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 3999
_mm512_maskz_shuffle_f32x4(__mmask16 __U, __m512 __A, __m512 __B, const int 
# 4000
__imm) 
# 4001
{ 
# 4002
return (__m512)__builtin_ia32_shuf_f32x4_mask((__v16sf)__A, (__v16sf)__B, __imm, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 4007
} 
# 4099
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4100
_mm512_rolv_epi32(__m512i __A, __m512i __B) 
# 4101
{ 
# 4102
return (__m512i)__builtin_ia32_prolvd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 4107
} 
# 4110
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4111
_mm512_mask_rolv_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 4112
{ 
# 4113
return (__m512i)__builtin_ia32_prolvd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 4117
} 
# 4120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4121
_mm512_maskz_rolv_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 4122
{ 
# 4123
return (__m512i)__builtin_ia32_prolvd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 4128
} 
# 4131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4132
_mm512_rorv_epi32(__m512i __A, __m512i __B) 
# 4133
{ 
# 4134
return (__m512i)__builtin_ia32_prorvd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 4139
} 
# 4142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4143
_mm512_mask_rorv_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 4144
{ 
# 4145
return (__m512i)__builtin_ia32_prorvd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 4149
} 
# 4152
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4153
_mm512_maskz_rorv_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 4154
{ 
# 4155
return (__m512i)__builtin_ia32_prorvd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 4160
} 
# 4163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4164
_mm512_rolv_epi64(__m512i __A, __m512i __B) 
# 4165
{ 
# 4166
return (__m512i)__builtin_ia32_prolvq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 4171
} 
# 4174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4175
_mm512_mask_rolv_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 4176
{ 
# 4177
return (__m512i)__builtin_ia32_prolvq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 4181
} 
# 4184
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4185
_mm512_maskz_rolv_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 4186
{ 
# 4187
return (__m512i)__builtin_ia32_prolvq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 4192
} 
# 4195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4196
_mm512_rorv_epi64(__m512i __A, __m512i __B) 
# 4197
{ 
# 4198
return (__m512i)__builtin_ia32_prorvq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 4203
} 
# 4206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4207
_mm512_mask_rorv_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 4208
{ 
# 4209
return (__m512i)__builtin_ia32_prorvq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 4213
} 
# 4216
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4217
_mm512_maskz_rorv_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 4218
{ 
# 4219
return (__m512i)__builtin_ia32_prorvq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 4224
} 
# 4228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4229
_mm512_cvtt_roundpd_epi32(__m512d __A, const int __R) 
# 4230
{ 
# 4231
return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1), __R); 
# 4235
} 
# 4238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4239
_mm512_mask_cvtt_roundpd_epi32(__m256i __W, __mmask8 __U, __m512d __A, const int 
# 4240
__R) 
# 4241
{ 
# 4242
return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)__W, (__mmask8)__U, __R); 
# 4245
} 
# 4248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4249
_mm512_maskz_cvtt_roundpd_epi32(__mmask8 __U, __m512d __A, const int __R) 
# 4250
{ 
# 4251
return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, __R); 
# 4255
} 
# 4258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4259
_mm512_cvtt_roundpd_epu32(__m512d __A, const int __R) 
# 4260
{ 
# 4261
return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1), __R); 
# 4265
} 
# 4268
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4269
_mm512_mask_cvtt_roundpd_epu32(__m256i __W, __mmask8 __U, __m512d __A, const int 
# 4270
__R) 
# 4271
{ 
# 4272
return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)__W, (__mmask8)__U, __R); 
# 4275
} 
# 4278
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4279
_mm512_maskz_cvtt_roundpd_epu32(__mmask8 __U, __m512d __A, const int __R) 
# 4280
{ 
# 4281
return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, __R); 
# 4285
} 
# 4308
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4309
_mm512_cvt_roundpd_epi32(__m512d __A, const int __R) 
# 4310
{ 
# 4311
return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1), __R); 
# 4315
} 
# 4318
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4319
_mm512_mask_cvt_roundpd_epi32(__m256i __W, __mmask8 __U, __m512d __A, const int 
# 4320
__R) 
# 4321
{ 
# 4322
return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)__W, (__mmask8)__U, __R); 
# 4325
} 
# 4328
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4329
_mm512_maskz_cvt_roundpd_epi32(__mmask8 __U, __m512d __A, const int __R) 
# 4330
{ 
# 4331
return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, __R); 
# 4335
} 
# 4338
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4339
_mm512_cvt_roundpd_epu32(__m512d __A, const int __R) 
# 4340
{ 
# 4341
return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1), __R); 
# 4345
} 
# 4348
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4349
_mm512_mask_cvt_roundpd_epu32(__m256i __W, __mmask8 __U, __m512d __A, const int 
# 4350
__R) 
# 4351
{ 
# 4352
return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)__W, (__mmask8)__U, __R); 
# 4355
} 
# 4358
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4359
_mm512_maskz_cvt_roundpd_epu32(__mmask8 __U, __m512d __A, const int __R) 
# 4360
{ 
# 4361
return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, __R); 
# 4365
} 
# 4388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4389
_mm512_cvtt_roundps_epi32(__m512 __A, const int __R) 
# 4390
{ 
# 4391
return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1), __R); 
# 4395
} 
# 4398
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4399
_mm512_mask_cvtt_roundps_epi32(__m512i __W, __mmask16 __U, __m512 __A, const int 
# 4400
__R) 
# 4401
{ 
# 4402
return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)__W, (__mmask16)__U, __R); 
# 4405
} 
# 4408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4409
_mm512_maskz_cvtt_roundps_epi32(__mmask16 __U, __m512 __A, const int __R) 
# 4410
{ 
# 4411
return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, __R); 
# 4415
} 
# 4418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4419
_mm512_cvtt_roundps_epu32(__m512 __A, const int __R) 
# 4420
{ 
# 4421
return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1), __R); 
# 4425
} 
# 4428
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4429
_mm512_mask_cvtt_roundps_epu32(__m512i __W, __mmask16 __U, __m512 __A, const int 
# 4430
__R) 
# 4431
{ 
# 4432
return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)__W, (__mmask16)__U, __R); 
# 4435
} 
# 4438
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4439
_mm512_maskz_cvtt_roundps_epu32(__mmask16 __U, __m512 __A, const int __R) 
# 4440
{ 
# 4441
return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, __R); 
# 4445
} 
# 4468
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4469
_mm512_cvt_roundps_epi32(__m512 __A, const int __R) 
# 4470
{ 
# 4471
return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1), __R); 
# 4475
} 
# 4478
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4479
_mm512_mask_cvt_roundps_epi32(__m512i __W, __mmask16 __U, __m512 __A, const int 
# 4480
__R) 
# 4481
{ 
# 4482
return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)__W, (__mmask16)__U, __R); 
# 4485
} 
# 4488
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4489
_mm512_maskz_cvt_roundps_epi32(__mmask16 __U, __m512 __A, const int __R) 
# 4490
{ 
# 4491
return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, __R); 
# 4495
} 
# 4498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4499
_mm512_cvt_roundps_epu32(__m512 __A, const int __R) 
# 4500
{ 
# 4501
return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1), __R); 
# 4505
} 
# 4508
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4509
_mm512_mask_cvt_roundps_epu32(__m512i __W, __mmask16 __U, __m512 __A, const int 
# 4510
__R) 
# 4511
{ 
# 4512
return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)__W, (__mmask16)__U, __R); 
# 4515
} 
# 4518
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 4519
_mm512_maskz_cvt_roundps_epu32(__mmask16 __U, __m512 __A, const int __R) 
# 4520
{ 
# 4521
return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, __R); 
# 4525
} 
# 4547
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4548
_mm_cvtu32_sd(__m128d __A, unsigned __B) 
# 4549
{ 
# 4550
return (__m128d)__builtin_ia32_cvtusi2sd32((__v2df)__A, __B); 
# 4551
} 
# 4556
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4557
_mm_cvt_roundu64_sd(__m128d __A, unsigned long long __B, const int __R) 
# 4558
{ 
# 4559
return (__m128d)__builtin_ia32_cvtusi2sd64((__v2df)__A, __B, __R); 
# 4560
} 
# 4563
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4564
_mm_cvt_roundi64_sd(__m128d __A, long long __B, const int __R) 
# 4565
{ 
# 4566
return (__m128d)__builtin_ia32_cvtsi2sd64((__v2df)__A, __B, __R); 
# 4567
} 
# 4570
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4571
_mm_cvt_roundsi64_sd(__m128d __A, long long __B, const int __R) 
# 4572
{ 
# 4573
return (__m128d)__builtin_ia32_cvtsi2sd64((__v2df)__A, __B, __R); 
# 4574
} 
# 4590
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4591
_mm_cvt_roundu32_ss(__m128 __A, unsigned __B, const int __R) 
# 4592
{ 
# 4593
return (__m128)__builtin_ia32_cvtusi2ss32((__v4sf)__A, __B, __R); 
# 4594
} 
# 4597
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4598
_mm_cvt_roundsi32_ss(__m128 __A, int __B, const int __R) 
# 4599
{ 
# 4600
return (__m128)__builtin_ia32_cvtsi2ss32((__v4sf)__A, __B, __R); 
# 4601
} 
# 4604
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4605
_mm_cvt_roundi32_ss(__m128 __A, int __B, const int __R) 
# 4606
{ 
# 4607
return (__m128)__builtin_ia32_cvtsi2ss32((__v4sf)__A, __B, __R); 
# 4608
} 
# 4623
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4624
_mm_cvt_roundu64_ss(__m128 __A, unsigned long long __B, const int __R) 
# 4625
{ 
# 4626
return (__m128)__builtin_ia32_cvtusi2ss64((__v4sf)__A, __B, __R); 
# 4627
} 
# 4630
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4631
_mm_cvt_roundsi64_ss(__m128 __A, long long __B, const int __R) 
# 4632
{ 
# 4633
return (__m128)__builtin_ia32_cvtsi2ss64((__v4sf)__A, __B, __R); 
# 4634
} 
# 4637
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4638
_mm_cvt_roundi64_ss(__m128 __A, long long __B, const int __R) 
# 4639
{ 
# 4640
return (__m128)__builtin_ia32_cvtsi2ss64((__v4sf)__A, __B, __R); 
# 4641
} 
# 4656
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4657
_mm512_cvtepi32_epi8(__m512i __A) 
# 4658
{ 
# 4659
return (__m128i)__builtin_ia32_pmovdb512_mask((__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)(-1)); 
# 4663
} 
# 4666
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4667
_mm512_mask_cvtepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) 
# 4668
{ 
# 4669
__builtin_ia32_pmovdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M); 
# 4670
} 
# 4673
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4674
_mm512_mask_cvtepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) 
# 4675
{ 
# 4676
return (__m128i)__builtin_ia32_pmovdb512_mask((__v16si)__A, (__v16qi)__O, __M); 
# 4678
} 
# 4681
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4682
_mm512_maskz_cvtepi32_epi8(__mmask16 __M, __m512i __A) 
# 4683
{ 
# 4684
return (__m128i)__builtin_ia32_pmovdb512_mask((__v16si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 4688
} 
# 4691
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4692
_mm512_cvtsepi32_epi8(__m512i __A) 
# 4693
{ 
# 4694
return (__m128i)__builtin_ia32_pmovsdb512_mask((__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)(-1)); 
# 4698
} 
# 4701
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4702
_mm512_mask_cvtsepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) 
# 4703
{ 
# 4704
__builtin_ia32_pmovsdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M); 
# 4705
} 
# 4708
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4709
_mm512_mask_cvtsepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) 
# 4710
{ 
# 4711
return (__m128i)__builtin_ia32_pmovsdb512_mask((__v16si)__A, (__v16qi)__O, __M); 
# 4713
} 
# 4716
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4717
_mm512_maskz_cvtsepi32_epi8(__mmask16 __M, __m512i __A) 
# 4718
{ 
# 4719
return (__m128i)__builtin_ia32_pmovsdb512_mask((__v16si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 4723
} 
# 4726
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4727
_mm512_cvtusepi32_epi8(__m512i __A) 
# 4728
{ 
# 4729
return (__m128i)__builtin_ia32_pmovusdb512_mask((__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)(-1)); 
# 4733
} 
# 4736
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4737
_mm512_mask_cvtusepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) 
# 4738
{ 
# 4739
__builtin_ia32_pmovusdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M); 
# 4740
} 
# 4743
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4744
_mm512_mask_cvtusepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) 
# 4745
{ 
# 4746
return (__m128i)__builtin_ia32_pmovusdb512_mask((__v16si)__A, (__v16qi)__O, __M); 
# 4749
} 
# 4752
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4753
_mm512_maskz_cvtusepi32_epi8(__mmask16 __M, __m512i __A) 
# 4754
{ 
# 4755
return (__m128i)__builtin_ia32_pmovusdb512_mask((__v16si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 4759
} 
# 4762
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4763
_mm512_cvtepi32_epi16(__m512i __A) 
# 4764
{ 
# 4765
return (__m256i)__builtin_ia32_pmovdw512_mask((__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)(-1)); 
# 4769
} 
# 4772
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4773
_mm512_mask_cvtepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) 
# 4774
{ 
# 4775
__builtin_ia32_pmovdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M); 
# 4776
} 
# 4779
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4780
_mm512_mask_cvtepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) 
# 4781
{ 
# 4782
return (__m256i)__builtin_ia32_pmovdw512_mask((__v16si)__A, (__v16hi)__O, __M); 
# 4784
} 
# 4787
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4788
_mm512_maskz_cvtepi32_epi16(__mmask16 __M, __m512i __A) 
# 4789
{ 
# 4790
return (__m256i)__builtin_ia32_pmovdw512_mask((__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M); 
# 4794
} 
# 4797
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4798
_mm512_cvtsepi32_epi16(__m512i __A) 
# 4799
{ 
# 4800
return (__m256i)__builtin_ia32_pmovsdw512_mask((__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)(-1)); 
# 4804
} 
# 4807
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4808
_mm512_mask_cvtsepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) 
# 4809
{ 
# 4810
__builtin_ia32_pmovsdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M); 
# 4811
} 
# 4814
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4815
_mm512_mask_cvtsepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) 
# 4816
{ 
# 4817
return (__m256i)__builtin_ia32_pmovsdw512_mask((__v16si)__A, (__v16hi)__O, __M); 
# 4819
} 
# 4822
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4823
_mm512_maskz_cvtsepi32_epi16(__mmask16 __M, __m512i __A) 
# 4824
{ 
# 4825
return (__m256i)__builtin_ia32_pmovsdw512_mask((__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M); 
# 4829
} 
# 4832
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4833
_mm512_cvtusepi32_epi16(__m512i __A) 
# 4834
{ 
# 4835
return (__m256i)__builtin_ia32_pmovusdw512_mask((__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)(-1)); 
# 4839
} 
# 4842
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4843
_mm512_mask_cvtusepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) 
# 4844
{ 
# 4845
__builtin_ia32_pmovusdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M); 
# 4846
} 
# 4849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4850
_mm512_mask_cvtusepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) 
# 4851
{ 
# 4852
return (__m256i)__builtin_ia32_pmovusdw512_mask((__v16si)__A, (__v16hi)__O, __M); 
# 4855
} 
# 4858
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4859
_mm512_maskz_cvtusepi32_epi16(__mmask16 __M, __m512i __A) 
# 4860
{ 
# 4861
return (__m256i)__builtin_ia32_pmovusdw512_mask((__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M); 
# 4865
} 
# 4868
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4869
_mm512_cvtepi64_epi32(__m512i __A) 
# 4870
{ 
# 4871
return (__m256i)__builtin_ia32_pmovqd512_mask((__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1)); 
# 4875
} 
# 4878
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4879
_mm512_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) 
# 4880
{ 
# 4881
__builtin_ia32_pmovqd512mem_mask((__v8si *)__P, (__v8di)__A, __M); 
# 4882
} 
# 4885
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4886
_mm512_mask_cvtepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) 
# 4887
{ 
# 4888
return (__m256i)__builtin_ia32_pmovqd512_mask((__v8di)__A, (__v8si)__O, __M); 
# 4890
} 
# 4893
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4894
_mm512_maskz_cvtepi64_epi32(__mmask8 __M, __m512i __A) 
# 4895
{ 
# 4896
return (__m256i)__builtin_ia32_pmovqd512_mask((__v8di)__A, (__v8si)_mm256_setzero_si256(), __M); 
# 4900
} 
# 4903
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4904
_mm512_cvtsepi64_epi32(__m512i __A) 
# 4905
{ 
# 4906
__v8si __O; 
# 4907
return (__m256i)__builtin_ia32_pmovsqd512_mask((__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1)); 
# 4911
} 
# 4914
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4915
_mm512_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) 
# 4916
{ 
# 4917
__builtin_ia32_pmovsqd512mem_mask((__v8si *)__P, (__v8di)__A, __M); 
# 4918
} 
# 4921
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4922
_mm512_mask_cvtsepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) 
# 4923
{ 
# 4924
return (__m256i)__builtin_ia32_pmovsqd512_mask((__v8di)__A, (__v8si)__O, __M); 
# 4926
} 
# 4929
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4930
_mm512_maskz_cvtsepi64_epi32(__mmask8 __M, __m512i __A) 
# 4931
{ 
# 4932
return (__m256i)__builtin_ia32_pmovsqd512_mask((__v8di)__A, (__v8si)_mm256_setzero_si256(), __M); 
# 4936
} 
# 4939
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4940
_mm512_cvtusepi64_epi32(__m512i __A) 
# 4941
{ 
# 4942
return (__m256i)__builtin_ia32_pmovusqd512_mask((__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1)); 
# 4946
} 
# 4949
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4950
_mm512_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) 
# 4951
{ 
# 4952
__builtin_ia32_pmovusqd512mem_mask((__v8si *)__P, (__v8di)__A, __M); 
# 4953
} 
# 4956
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4957
_mm512_mask_cvtusepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) 
# 4958
{ 
# 4959
return (__m256i)__builtin_ia32_pmovusqd512_mask((__v8di)__A, (__v8si)__O, __M); 
# 4961
} 
# 4964
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4965
_mm512_maskz_cvtusepi64_epi32(__mmask8 __M, __m512i __A) 
# 4966
{ 
# 4967
return (__m256i)__builtin_ia32_pmovusqd512_mask((__v8di)__A, (__v8si)_mm256_setzero_si256(), __M); 
# 4971
} 
# 4974
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4975
_mm512_cvtepi64_epi16(__m512i __A) 
# 4976
{ 
# 4977
return (__m128i)__builtin_ia32_pmovqw512_mask((__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 4981
} 
# 4984
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 4985
_mm512_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) 
# 4986
{ 
# 4987
__builtin_ia32_pmovqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M); 
# 4988
} 
# 4991
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4992
_mm512_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) 
# 4993
{ 
# 4994
return (__m128i)__builtin_ia32_pmovqw512_mask((__v8di)__A, (__v8hi)__O, __M); 
# 4996
} 
# 4999
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5000
_mm512_maskz_cvtepi64_epi16(__mmask8 __M, __m512i __A) 
# 5001
{ 
# 5002
return (__m128i)__builtin_ia32_pmovqw512_mask((__v8di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 5006
} 
# 5009
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5010
_mm512_cvtsepi64_epi16(__m512i __A) 
# 5011
{ 
# 5012
return (__m128i)__builtin_ia32_pmovsqw512_mask((__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 5016
} 
# 5019
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5020
_mm512_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) 
# 5021
{ 
# 5022
__builtin_ia32_pmovsqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M); 
# 5023
} 
# 5026
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5027
_mm512_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) 
# 5028
{ 
# 5029
return (__m128i)__builtin_ia32_pmovsqw512_mask((__v8di)__A, (__v8hi)__O, __M); 
# 5031
} 
# 5034
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5035
_mm512_maskz_cvtsepi64_epi16(__mmask8 __M, __m512i __A) 
# 5036
{ 
# 5037
return (__m128i)__builtin_ia32_pmovsqw512_mask((__v8di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 5041
} 
# 5044
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5045
_mm512_cvtusepi64_epi16(__m512i __A) 
# 5046
{ 
# 5047
return (__m128i)__builtin_ia32_pmovusqw512_mask((__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 5051
} 
# 5054
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5055
_mm512_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) 
# 5056
{ 
# 5057
__builtin_ia32_pmovusqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M); 
# 5058
} 
# 5061
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5062
_mm512_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) 
# 5063
{ 
# 5064
return (__m128i)__builtin_ia32_pmovusqw512_mask((__v8di)__A, (__v8hi)__O, __M); 
# 5066
} 
# 5069
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5070
_mm512_maskz_cvtusepi64_epi16(__mmask8 __M, __m512i __A) 
# 5071
{ 
# 5072
return (__m128i)__builtin_ia32_pmovusqw512_mask((__v8di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 5076
} 
# 5079
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5080
_mm512_cvtepi64_epi8(__m512i __A) 
# 5081
{ 
# 5082
return (__m128i)__builtin_ia32_pmovqb512_mask((__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 5086
} 
# 5089
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5090
_mm512_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) 
# 5091
{ 
# 5092
__builtin_ia32_pmovqb512mem_mask((__v16qi *)__P, (__v8di)__A, __M); 
# 5093
} 
# 5096
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5097
_mm512_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) 
# 5098
{ 
# 5099
return (__m128i)__builtin_ia32_pmovqb512_mask((__v8di)__A, (__v16qi)__O, __M); 
# 5101
} 
# 5104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5105
_mm512_maskz_cvtepi64_epi8(__mmask8 __M, __m512i __A) 
# 5106
{ 
# 5107
return (__m128i)__builtin_ia32_pmovqb512_mask((__v8di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 5111
} 
# 5114
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5115
_mm512_cvtsepi64_epi8(__m512i __A) 
# 5116
{ 
# 5117
return (__m128i)__builtin_ia32_pmovsqb512_mask((__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 5121
} 
# 5124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5125
_mm512_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) 
# 5126
{ 
# 5127
__builtin_ia32_pmovsqb512mem_mask((__v16qi *)__P, (__v8di)__A, __M); 
# 5128
} 
# 5131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5132
_mm512_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) 
# 5133
{ 
# 5134
return (__m128i)__builtin_ia32_pmovsqb512_mask((__v8di)__A, (__v16qi)__O, __M); 
# 5136
} 
# 5139
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5140
_mm512_maskz_cvtsepi64_epi8(__mmask8 __M, __m512i __A) 
# 5141
{ 
# 5142
return (__m128i)__builtin_ia32_pmovsqb512_mask((__v8di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 5146
} 
# 5149
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5150
_mm512_cvtusepi64_epi8(__m512i __A) 
# 5151
{ 
# 5152
return (__m128i)__builtin_ia32_pmovusqb512_mask((__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 5156
} 
# 5159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5160
_mm512_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) 
# 5161
{ 
# 5162
__builtin_ia32_pmovusqb512mem_mask((__v16qi *)__P, (__v8di)__A, __M); 
# 5163
} 
# 5166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5167
_mm512_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) 
# 5168
{ 
# 5169
return (__m128i)__builtin_ia32_pmovusqb512_mask((__v8di)__A, (__v16qi)__O, __M); 
# 5172
} 
# 5175
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5176
_mm512_maskz_cvtusepi64_epi8(__mmask8 __M, __m512i __A) 
# 5177
{ 
# 5178
return (__m128i)__builtin_ia32_pmovusqb512_mask((__v8di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 5182
} 
# 5185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5186
_mm512_cvtepi32_pd(__m256i __A) 
# 5187
{ 
# 5188
return (__m512d)__builtin_ia32_cvtdq2pd512_mask((__v8si)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 5192
} 
# 5195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5196
_mm512_mask_cvtepi32_pd(__m512d __W, __mmask8 __U, __m256i __A) 
# 5197
{ 
# 5198
return (__m512d)__builtin_ia32_cvtdq2pd512_mask((__v8si)__A, (__v8df)__W, (__mmask8)__U); 
# 5201
} 
# 5204
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5205
_mm512_maskz_cvtepi32_pd(__mmask8 __U, __m256i __A) 
# 5206
{ 
# 5207
return (__m512d)__builtin_ia32_cvtdq2pd512_mask((__v8si)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 5211
} 
# 5214
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5215
_mm512_cvtepu32_pd(__m256i __A) 
# 5216
{ 
# 5217
return (__m512d)__builtin_ia32_cvtudq2pd512_mask((__v8si)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 5221
} 
# 5224
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5225
_mm512_mask_cvtepu32_pd(__m512d __W, __mmask8 __U, __m256i __A) 
# 5226
{ 
# 5227
return (__m512d)__builtin_ia32_cvtudq2pd512_mask((__v8si)__A, (__v8df)__W, (__mmask8)__U); 
# 5230
} 
# 5233
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5234
_mm512_maskz_cvtepu32_pd(__mmask8 __U, __m256i __A) 
# 5235
{ 
# 5236
return (__m512d)__builtin_ia32_cvtudq2pd512_mask((__v8si)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 5240
} 
# 5244
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5245
_mm512_cvt_roundepi32_ps(__m512i __A, const int __R) 
# 5246
{ 
# 5247
return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 5251
} 
# 5254
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5255
_mm512_mask_cvt_roundepi32_ps(__m512 __W, __mmask16 __U, __m512i __A, const int 
# 5256
__R) 
# 5257
{ 
# 5258
return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)__W, (__mmask16)__U, __R); 
# 5261
} 
# 5264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5265
_mm512_maskz_cvt_roundepi32_ps(__mmask16 __U, __m512i __A, const int __R) 
# 5266
{ 
# 5267
return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 5271
} 
# 5274
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5275
_mm512_cvt_roundepu32_ps(__m512i __A, const int __R) 
# 5276
{ 
# 5277
return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 5281
} 
# 5284
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5285
_mm512_mask_cvt_roundepu32_ps(__m512 __W, __mmask16 __U, __m512i __A, const int 
# 5286
__R) 
# 5287
{ 
# 5288
return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)__W, (__mmask16)__U, __R); 
# 5291
} 
# 5294
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5295
_mm512_maskz_cvt_roundepu32_ps(__mmask16 __U, __m512i __A, const int __R) 
# 5296
{ 
# 5297
return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 5301
} 
# 5325
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5326
_mm512_extractf64x4_pd(__m512d __A, const int __imm) 
# 5327
{ 
# 5328
return (__m256d)__builtin_ia32_extractf64x4_mask((__v8df)__A, __imm, (__v4df)_mm256_undefined_pd(), (__mmask8)(-1)); 
# 5333
} 
# 5336
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5337
_mm512_mask_extractf64x4_pd(__m256d __W, __mmask8 __U, __m512d __A, const int 
# 5338
__imm) 
# 5339
{ 
# 5340
return (__m256d)__builtin_ia32_extractf64x4_mask((__v8df)__A, __imm, (__v4df)__W, (__mmask8)__U); 
# 5344
} 
# 5347
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5348
_mm512_maskz_extractf64x4_pd(__mmask8 __U, __m512d __A, const int __imm) 
# 5349
{ 
# 5350
return (__m256d)__builtin_ia32_extractf64x4_mask((__v8df)__A, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 5355
} 
# 5358
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5359
_mm512_extractf32x4_ps(__m512 __A, const int __imm) 
# 5360
{ 
# 5361
return (__m128)__builtin_ia32_extractf32x4_mask((__v16sf)__A, __imm, (__v4sf)_mm_undefined_ps(), (__mmask8)(-1)); 
# 5366
} 
# 5369
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5370
_mm512_mask_extractf32x4_ps(__m128 __W, __mmask8 __U, __m512 __A, const int 
# 5371
__imm) 
# 5372
{ 
# 5373
return (__m128)__builtin_ia32_extractf32x4_mask((__v16sf)__A, __imm, (__v4sf)__W, (__mmask8)__U); 
# 5377
} 
# 5380
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5381
_mm512_maskz_extractf32x4_ps(__mmask8 __U, __m512 __A, const int __imm) 
# 5382
{ 
# 5383
return (__m128)__builtin_ia32_extractf32x4_mask((__v16sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 5388
} 
# 5391
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5392
_mm512_extracti64x4_epi64(__m512i __A, const int __imm) 
# 5393
{ 
# 5394
return (__m256i)__builtin_ia32_extracti64x4_mask((__v8di)__A, __imm, (__v4di)_mm256_undefined_si256(), (__mmask8)(-1)); 
# 5399
} 
# 5402
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5403
_mm512_mask_extracti64x4_epi64(__m256i __W, __mmask8 __U, __m512i __A, const int 
# 5404
__imm) 
# 5405
{ 
# 5406
return (__m256i)__builtin_ia32_extracti64x4_mask((__v8di)__A, __imm, (__v4di)__W, (__mmask8)__U); 
# 5410
} 
# 5413
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5414
_mm512_maskz_extracti64x4_epi64(__mmask8 __U, __m512i __A, const int __imm) 
# 5415
{ 
# 5416
return (__m256i)__builtin_ia32_extracti64x4_mask((__v8di)__A, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 5421
} 
# 5424
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5425
_mm512_extracti32x4_epi32(__m512i __A, const int __imm) 
# 5426
{ 
# 5427
return (__m128i)__builtin_ia32_extracti32x4_mask((__v16si)__A, __imm, (__v4si)_mm_undefined_si128(), (__mmask8)(-1)); 
# 5432
} 
# 5435
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5436
_mm512_mask_extracti32x4_epi32(__m128i __W, __mmask8 __U, __m512i __A, const int 
# 5437
__imm) 
# 5438
{ 
# 5439
return (__m128i)__builtin_ia32_extracti32x4_mask((__v16si)__A, __imm, (__v4si)__W, (__mmask8)__U); 
# 5443
} 
# 5446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5447
_mm512_maskz_extracti32x4_epi32(__mmask8 __U, __m512i __A, const int __imm) 
# 5448
{ 
# 5449
return (__m128i)__builtin_ia32_extracti32x4_mask((__v16si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 5454
} 
# 5532
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5533
_mm512_inserti32x4(__m512i __A, __m128i __B, const int __imm) 
# 5534
{ 
# 5535
return (__m512i)__builtin_ia32_inserti32x4_mask((__v16si)__A, (__v4si)__B, __imm, (__v16si)__A, -1); 
# 5539
} 
# 5542
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5543
_mm512_insertf32x4(__m512 __A, __m128 __B, const int __imm) 
# 5544
{ 
# 5545
return (__m512)__builtin_ia32_insertf32x4_mask((__v16sf)__A, (__v4sf)__B, __imm, (__v16sf)__A, -1); 
# 5549
} 
# 5552
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5553
_mm512_inserti64x4(__m512i __A, __m256i __B, const int __imm) 
# 5554
{ 
# 5555
return (__m512i)__builtin_ia32_inserti64x4_mask((__v8di)__A, (__v4di)__B, __imm, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 5561
} 
# 5564
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5565
_mm512_mask_inserti64x4(__m512i __W, __mmask8 __U, __m512i __A, __m256i 
# 5566
__B, const int __imm) 
# 5567
{ 
# 5568
return (__m512i)__builtin_ia32_inserti64x4_mask((__v8di)__A, (__v4di)__B, __imm, (__v8di)__W, (__mmask8)__U); 
# 5573
} 
# 5576
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5577
_mm512_maskz_inserti64x4(__mmask8 __U, __m512i __A, __m256i __B, const int 
# 5578
__imm) 
# 5579
{ 
# 5580
return (__m512i)__builtin_ia32_inserti64x4_mask((__v8di)__A, (__v4di)__B, __imm, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 5586
} 
# 5589
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5590
_mm512_insertf64x4(__m512d __A, __m256d __B, const int __imm) 
# 5591
{ 
# 5592
return (__m512d)__builtin_ia32_insertf64x4_mask((__v8df)__A, (__v4df)__B, __imm, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 5598
} 
# 5601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5602
_mm512_mask_insertf64x4(__m512d __W, __mmask8 __U, __m512d __A, __m256d 
# 5603
__B, const int __imm) 
# 5604
{ 
# 5605
return (__m512d)__builtin_ia32_insertf64x4_mask((__v8df)__A, (__v4df)__B, __imm, (__v8df)__W, (__mmask8)__U); 
# 5610
} 
# 5613
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5614
_mm512_maskz_insertf64x4(__mmask8 __U, __m512d __A, __m256d __B, const int 
# 5615
__imm) 
# 5616
{ 
# 5617
return (__m512d)__builtin_ia32_insertf64x4_mask((__v8df)__A, (__v4df)__B, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 5623
} 
# 5671
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5672
_mm512_loadu_pd(const void *__P) 
# 5673
{ 
# 5674
return (__m512d)__builtin_ia32_loadupd512_mask((const __v8df *)__P, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 5678
} 
# 5681
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5682
_mm512_mask_loadu_pd(__m512d __W, __mmask8 __U, const void *__P) 
# 5683
{ 
# 5684
return (__m512d)__builtin_ia32_loadupd512_mask((const __v8df *)__P, (__v8df)__W, (__mmask8)__U); 
# 5687
} 
# 5690
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5691
_mm512_maskz_loadu_pd(__mmask8 __U, const void *__P) 
# 5692
{ 
# 5693
return (__m512d)__builtin_ia32_loadupd512_mask((const __v8df *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 5697
} 
# 5700
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5701
_mm512_storeu_pd(void *__P, __m512d __A) 
# 5702
{ 
# 5703
__builtin_ia32_storeupd512_mask((__v8df *)__P, (__v8df)__A, (__mmask8)(-1)); 
# 5705
} 
# 5708
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5709
_mm512_mask_storeu_pd(void *__P, __mmask8 __U, __m512d __A) 
# 5710
{ 
# 5711
__builtin_ia32_storeupd512_mask((__v8df *)__P, (__v8df)__A, (__mmask8)__U); 
# 5713
} 
# 5716
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5717
_mm512_loadu_ps(const void *__P) 
# 5718
{ 
# 5719
return (__m512)__builtin_ia32_loadups512_mask((const __v16sf *)__P, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 5723
} 
# 5726
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5727
_mm512_mask_loadu_ps(__m512 __W, __mmask16 __U, const void *__P) 
# 5728
{ 
# 5729
return (__m512)__builtin_ia32_loadups512_mask((const __v16sf *)__P, (__v16sf)__W, (__mmask16)__U); 
# 5732
} 
# 5735
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5736
_mm512_maskz_loadu_ps(__mmask16 __U, const void *__P) 
# 5737
{ 
# 5738
return (__m512)__builtin_ia32_loadups512_mask((const __v16sf *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 5742
} 
# 5745
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5746
_mm512_storeu_ps(void *__P, __m512 __A) 
# 5747
{ 
# 5748
__builtin_ia32_storeups512_mask((__v16sf *)__P, (__v16sf)__A, (__mmask16)(-1)); 
# 5750
} 
# 5753
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5754
_mm512_mask_storeu_ps(void *__P, __mmask16 __U, __m512 __A) 
# 5755
{ 
# 5756
__builtin_ia32_storeups512_mask((__v16sf *)__P, (__v16sf)__A, (__mmask16)__U); 
# 5758
} 
# 5761
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5762
_mm512_mask_loadu_epi64(__m512i __W, __mmask8 __U, const void *__P) 
# 5763
{ 
# 5764
return (__m512i)__builtin_ia32_loaddqudi512_mask((const __v8di *)__P, (__v8di)__W, (__mmask8)__U); 
# 5767
} 
# 5770
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5771
_mm512_maskz_loadu_epi64(__mmask8 __U, const void *__P) 
# 5772
{ 
# 5773
return (__m512i)__builtin_ia32_loaddqudi512_mask((const __v8di *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 5777
} 
# 5780
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5781
_mm512_mask_storeu_epi64(void *__P, __mmask8 __U, __m512i __A) 
# 5782
{ 
# 5783
__builtin_ia32_storedqudi512_mask((__v8di *)__P, (__v8di)__A, (__mmask8)__U); 
# 5785
} 
# 5788
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5789
_mm512_loadu_si512(const void *__P) 
# 5790
{ 
# 5791
return (__m512i)__builtin_ia32_loaddqusi512_mask((const __v16si *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)(-1)); 
# 5795
} 
# 5798
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5799
_mm512_mask_loadu_epi32(__m512i __W, __mmask16 __U, const void *__P) 
# 5800
{ 
# 5801
return (__m512i)__builtin_ia32_loaddqusi512_mask((const __v16si *)__P, (__v16si)__W, (__mmask16)__U); 
# 5804
} 
# 5807
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5808
_mm512_maskz_loadu_epi32(__mmask16 __U, const void *__P) 
# 5809
{ 
# 5810
return (__m512i)__builtin_ia32_loaddqusi512_mask((const __v16si *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 5814
} 
# 5817
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5818
_mm512_storeu_si512(void *__P, __m512i __A) 
# 5819
{ 
# 5820
__builtin_ia32_storedqusi512_mask((__v16si *)__P, (__v16si)__A, (__mmask16)(-1)); 
# 5822
} 
# 5825
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5826
_mm512_mask_storeu_epi32(void *__P, __mmask16 __U, __m512i __A) 
# 5827
{ 
# 5828
__builtin_ia32_storedqusi512_mask((__v16si *)__P, (__v16si)__A, (__mmask16)__U); 
# 5830
} 
# 5833
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5834
_mm512_permutevar_pd(__m512d __A, __m512i __C) 
# 5835
{ 
# 5836
return (__m512d)__builtin_ia32_vpermilvarpd512_mask((__v8df)__A, (__v8di)__C, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 5841
} 
# 5844
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5845
_mm512_mask_permutevar_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512i __C) 
# 5846
{ 
# 5847
return (__m512d)__builtin_ia32_vpermilvarpd512_mask((__v8df)__A, (__v8di)__C, (__v8df)__W, (__mmask8)__U); 
# 5851
} 
# 5854
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5855
_mm512_maskz_permutevar_pd(__mmask8 __U, __m512d __A, __m512i __C) 
# 5856
{ 
# 5857
return (__m512d)__builtin_ia32_vpermilvarpd512_mask((__v8df)__A, (__v8di)__C, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 5862
} 
# 5865
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5866
_mm512_permutevar_ps(__m512 __A, __m512i __C) 
# 5867
{ 
# 5868
return (__m512)__builtin_ia32_vpermilvarps512_mask((__v16sf)__A, (__v16si)__C, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 5873
} 
# 5876
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5877
_mm512_mask_permutevar_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512i __C) 
# 5878
{ 
# 5879
return (__m512)__builtin_ia32_vpermilvarps512_mask((__v16sf)__A, (__v16si)__C, (__v16sf)__W, (__mmask16)__U); 
# 5883
} 
# 5886
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 5887
_mm512_maskz_permutevar_ps(__mmask16 __U, __m512 __A, __m512i __C) 
# 5888
{ 
# 5889
return (__m512)__builtin_ia32_vpermilvarps512_mask((__v16sf)__A, (__v16si)__C, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 5894
} 
# 5897
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5898
_mm512_permutex2var_epi64(__m512i __A, __m512i __I, __m512i __B) 
# 5899
{ 
# 5900
return (__m512i)__builtin_ia32_vpermt2varq512_mask((__v8di)__I, (__v8di)__A, (__v8di)__B, (__mmask8)(-1)); 
# 5905
} 
# 5908
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5909
_mm512_mask_permutex2var_epi64(__m512i __A, __mmask8 __U, __m512i __I, __m512i 
# 5910
__B) 
# 5911
{ 
# 5912
return (__m512i)__builtin_ia32_vpermt2varq512_mask((__v8di)__I, (__v8di)__A, (__v8di)__B, (__mmask8)__U); 
# 5917
} 
# 5920
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5921
_mm512_mask2_permutex2var_epi64(__m512i __A, __m512i __I, __mmask8 
# 5922
__U, __m512i __B) 
# 5923
{ 
# 5924
return (__m512i)__builtin_ia32_vpermi2varq512_mask((__v8di)__A, (__v8di)__I, (__v8di)__B, (__mmask8)__U); 
# 5929
} 
# 5932
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5933
_mm512_maskz_permutex2var_epi64(__mmask8 __U, __m512i __A, __m512i 
# 5934
__I, __m512i __B) 
# 5935
{ 
# 5936
return (__m512i)__builtin_ia32_vpermt2varq512_maskz((__v8di)__I, (__v8di)__A, (__v8di)__B, (__mmask8)__U); 
# 5941
} 
# 5944
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5945
_mm512_permutex2var_epi32(__m512i __A, __m512i __I, __m512i __B) 
# 5946
{ 
# 5947
return (__m512i)__builtin_ia32_vpermt2vard512_mask((__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)(-1)); 
# 5952
} 
# 5955
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5956
_mm512_mask_permutex2var_epi32(__m512i __A, __mmask16 __U, __m512i 
# 5957
__I, __m512i __B) 
# 5958
{ 
# 5959
return (__m512i)__builtin_ia32_vpermt2vard512_mask((__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)__U); 
# 5964
} 
# 5967
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5968
_mm512_mask2_permutex2var_epi32(__m512i __A, __m512i __I, __mmask16 
# 5969
__U, __m512i __B) 
# 5970
{ 
# 5971
return (__m512i)__builtin_ia32_vpermi2vard512_mask((__v16si)__A, (__v16si)__I, (__v16si)__B, (__mmask16)__U); 
# 5976
} 
# 5979
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 5980
_mm512_maskz_permutex2var_epi32(__mmask16 __U, __m512i __A, __m512i 
# 5981
__I, __m512i __B) 
# 5982
{ 
# 5983
return (__m512i)__builtin_ia32_vpermt2vard512_maskz((__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)__U); 
# 5988
} 
# 5991
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 5992
_mm512_permutex2var_pd(__m512d __A, __m512i __I, __m512d __B) 
# 5993
{ 
# 5994
return (__m512d)__builtin_ia32_vpermt2varpd512_mask((__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)(-1)); 
# 5999
} 
# 6002
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6003
_mm512_mask_permutex2var_pd(__m512d __A, __mmask8 __U, __m512i __I, __m512d 
# 6004
__B) 
# 6005
{ 
# 6006
return (__m512d)__builtin_ia32_vpermt2varpd512_mask((__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)__U); 
# 6011
} 
# 6014
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6015
_mm512_mask2_permutex2var_pd(__m512d __A, __m512i __I, __mmask8 __U, __m512d 
# 6016
__B) 
# 6017
{ 
# 6018
return (__m512d)__builtin_ia32_vpermi2varpd512_mask((__v8df)__A, (__v8di)__I, (__v8df)__B, (__mmask8)__U); 
# 6023
} 
# 6026
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6027
_mm512_maskz_permutex2var_pd(__mmask8 __U, __m512d __A, __m512i __I, __m512d 
# 6028
__B) 
# 6029
{ 
# 6030
return (__m512d)__builtin_ia32_vpermt2varpd512_maskz((__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)__U); 
# 6035
} 
# 6038
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6039
_mm512_permutex2var_ps(__m512 __A, __m512i __I, __m512 __B) 
# 6040
{ 
# 6041
return (__m512)__builtin_ia32_vpermt2varps512_mask((__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)(-1)); 
# 6046
} 
# 6049
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6050
_mm512_mask_permutex2var_ps(__m512 __A, __mmask16 __U, __m512i __I, __m512 __B) 
# 6051
{ 
# 6052
return (__m512)__builtin_ia32_vpermt2varps512_mask((__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)__U); 
# 6057
} 
# 6060
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6061
_mm512_mask2_permutex2var_ps(__m512 __A, __m512i __I, __mmask16 __U, __m512 
# 6062
__B) 
# 6063
{ 
# 6064
return (__m512)__builtin_ia32_vpermi2varps512_mask((__v16sf)__A, (__v16si)__I, (__v16sf)__B, (__mmask16)__U); 
# 6069
} 
# 6072
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6073
_mm512_maskz_permutex2var_ps(__mmask16 __U, __m512 __A, __m512i __I, __m512 
# 6074
__B) 
# 6075
{ 
# 6076
return (__m512)__builtin_ia32_vpermt2varps512_maskz((__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)__U); 
# 6081
} 
# 6085
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6086
_mm512_permute_pd(__m512d __X, const int __C) 
# 6087
{ 
# 6088
return (__m512d)__builtin_ia32_vpermilpd512_mask((__v8df)__X, __C, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 6092
} 
# 6095
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6096
_mm512_mask_permute_pd(__m512d __W, __mmask8 __U, __m512d __X, const int __C) 
# 6097
{ 
# 6098
return (__m512d)__builtin_ia32_vpermilpd512_mask((__v8df)__X, __C, (__v8df)__W, (__mmask8)__U); 
# 6101
} 
# 6104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6105
_mm512_maskz_permute_pd(__mmask8 __U, __m512d __X, const int __C) 
# 6106
{ 
# 6107
return (__m512d)__builtin_ia32_vpermilpd512_mask((__v8df)__X, __C, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 6111
} 
# 6114
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6115
_mm512_permute_ps(__m512 __X, const int __C) 
# 6116
{ 
# 6117
return (__m512)__builtin_ia32_vpermilps512_mask((__v16sf)__X, __C, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 6121
} 
# 6124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6125
_mm512_mask_permute_ps(__m512 __W, __mmask16 __U, __m512 __X, const int __C) 
# 6126
{ 
# 6127
return (__m512)__builtin_ia32_vpermilps512_mask((__v16sf)__X, __C, (__v16sf)__W, (__mmask16)__U); 
# 6130
} 
# 6133
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6134
_mm512_maskz_permute_ps(__mmask16 __U, __m512 __X, const int __C) 
# 6135
{ 
# 6136
return (__m512)__builtin_ia32_vpermilps512_mask((__v16sf)__X, __C, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 6140
} 
# 6175
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6176
_mm512_permutex_epi64(__m512i __X, const int __I) 
# 6177
{ 
# 6178
return (__m512i)__builtin_ia32_permdi512_mask((__v8di)__X, __I, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 6182
} 
# 6185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6186
_mm512_mask_permutex_epi64(__m512i __W, __mmask8 __M, __m512i 
# 6187
__X, const int __I) 
# 6188
{ 
# 6189
return (__m512i)__builtin_ia32_permdi512_mask((__v8di)__X, __I, (__v8di)__W, (__mmask8)__M); 
# 6192
} 
# 6195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6196
_mm512_maskz_permutex_epi64(__mmask8 __M, __m512i __X, const int __I) 
# 6197
{ 
# 6198
return (__m512i)__builtin_ia32_permdi512_mask((__v8di)__X, __I, (__v8di)_mm512_setzero_si512(), (__mmask8)__M); 
# 6202
} 
# 6205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6206
_mm512_permutex_pd(__m512d __X, const int __M) 
# 6207
{ 
# 6208
return (__m512d)__builtin_ia32_permdf512_mask((__v8df)__X, __M, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 6212
} 
# 6215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6216
_mm512_mask_permutex_pd(__m512d __W, __mmask8 __U, __m512d __X, const int __M) 
# 6217
{ 
# 6218
return (__m512d)__builtin_ia32_permdf512_mask((__v8df)__X, __M, (__v8df)__W, (__mmask8)__U); 
# 6221
} 
# 6224
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6225
_mm512_maskz_permutex_pd(__mmask8 __U, __m512d __X, const int __M) 
# 6226
{ 
# 6227
return (__m512d)__builtin_ia32_permdf512_mask((__v8df)__X, __M, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 6231
} 
# 6269
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6270
_mm512_maskz_permutexvar_epi64(__mmask8 __M, __m512i __X, __m512i __Y) 
# 6271
{ 
# 6272
return (__m512i)__builtin_ia32_permvardi512_mask((__v8di)__Y, (__v8di)__X, (__v8di)_mm512_setzero_si512(), __M); 
# 6277
} 
# 6280
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6281
_mm512_permutexvar_epi64(__m512i __X, __m512i __Y) 
# 6282
{ 
# 6283
return (__m512i)__builtin_ia32_permvardi512_mask((__v8di)__Y, (__v8di)__X, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 6288
} 
# 6291
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6292
_mm512_mask_permutexvar_epi64(__m512i __W, __mmask8 __M, __m512i __X, __m512i 
# 6293
__Y) 
# 6294
{ 
# 6295
return (__m512i)__builtin_ia32_permvardi512_mask((__v8di)__Y, (__v8di)__X, (__v8di)__W, __M); 
# 6299
} 
# 6302
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6303
_mm512_maskz_permutexvar_epi32(__mmask16 __M, __m512i __X, __m512i __Y) 
# 6304
{ 
# 6305
return (__m512i)__builtin_ia32_permvarsi512_mask((__v16si)__Y, (__v16si)__X, (__v16si)_mm512_setzero_si512(), __M); 
# 6310
} 
# 6313
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6314
_mm512_permutexvar_epi32(__m512i __X, __m512i __Y) 
# 6315
{ 
# 6316
return (__m512i)__builtin_ia32_permvarsi512_mask((__v16si)__Y, (__v16si)__X, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 6321
} 
# 6324
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6325
_mm512_mask_permutexvar_epi32(__m512i __W, __mmask16 __M, __m512i __X, __m512i 
# 6326
__Y) 
# 6327
{ 
# 6328
return (__m512i)__builtin_ia32_permvarsi512_mask((__v16si)__Y, (__v16si)__X, (__v16si)__W, __M); 
# 6332
} 
# 6335
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6336
_mm512_permutexvar_pd(__m512i __X, __m512d __Y) 
# 6337
{ 
# 6338
return (__m512d)__builtin_ia32_permvardf512_mask((__v8df)__Y, (__v8di)__X, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 6343
} 
# 6346
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6347
_mm512_mask_permutexvar_pd(__m512d __W, __mmask8 __U, __m512i __X, __m512d __Y) 
# 6348
{ 
# 6349
return (__m512d)__builtin_ia32_permvardf512_mask((__v8df)__Y, (__v8di)__X, (__v8df)__W, (__mmask8)__U); 
# 6353
} 
# 6356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6357
_mm512_maskz_permutexvar_pd(__mmask8 __U, __m512i __X, __m512d __Y) 
# 6358
{ 
# 6359
return (__m512d)__builtin_ia32_permvardf512_mask((__v8df)__Y, (__v8di)__X, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 6364
} 
# 6367
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6368
_mm512_permutexvar_ps(__m512i __X, __m512 __Y) 
# 6369
{ 
# 6370
return (__m512)__builtin_ia32_permvarsf512_mask((__v16sf)__Y, (__v16si)__X, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 6375
} 
# 6378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6379
_mm512_mask_permutexvar_ps(__m512 __W, __mmask16 __U, __m512i __X, __m512 __Y) 
# 6380
{ 
# 6381
return (__m512)__builtin_ia32_permvarsf512_mask((__v16sf)__Y, (__v16si)__X, (__v16sf)__W, (__mmask16)__U); 
# 6385
} 
# 6388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6389
_mm512_maskz_permutexvar_ps(__mmask16 __U, __m512i __X, __m512 __Y) 
# 6390
{ 
# 6391
return (__m512)__builtin_ia32_permvarsf512_mask((__v16sf)__Y, (__v16si)__X, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 6396
} 
# 6400
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6401
_mm512_shuffle_ps(__m512 __M, __m512 __V, const int __imm) 
# 6402
{ 
# 6403
return (__m512)__builtin_ia32_shufps512_mask((__v16sf)__M, (__v16sf)__V, __imm, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 6408
} 
# 6411
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6412
_mm512_mask_shuffle_ps(__m512 __W, __mmask16 __U, __m512 __M, __m512 
# 6413
__V, const int __imm) 
# 6414
{ 
# 6415
return (__m512)__builtin_ia32_shufps512_mask((__v16sf)__M, (__v16sf)__V, __imm, (__v16sf)__W, (__mmask16)__U); 
# 6419
} 
# 6422
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6423
_mm512_maskz_shuffle_ps(__mmask16 __U, __m512 __M, __m512 __V, const int __imm) 
# 6424
{ 
# 6425
return (__m512)__builtin_ia32_shufps512_mask((__v16sf)__M, (__v16sf)__V, __imm, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 6430
} 
# 6433
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6434
_mm512_shuffle_pd(__m512d __M, __m512d __V, const int __imm) 
# 6435
{ 
# 6436
return (__m512d)__builtin_ia32_shufpd512_mask((__v8df)__M, (__v8df)__V, __imm, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 6441
} 
# 6444
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6445
_mm512_mask_shuffle_pd(__m512d __W, __mmask8 __U, __m512d __M, __m512d 
# 6446
__V, const int __imm) 
# 6447
{ 
# 6448
return (__m512d)__builtin_ia32_shufpd512_mask((__v8df)__M, (__v8df)__V, __imm, (__v8df)__W, (__mmask8)__U); 
# 6452
} 
# 6455
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6456
_mm512_maskz_shuffle_pd(__mmask8 __U, __m512d __M, __m512d __V, const int 
# 6457
__imm) 
# 6458
{ 
# 6459
return (__m512d)__builtin_ia32_shufpd512_mask((__v8df)__M, (__v8df)__V, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 6464
} 
# 6467
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6468
_mm512_fixupimm_round_pd(__m512d __A, __m512d __B, __m512i __C, const int 
# 6469
__imm, const int __R) 
# 6470
{ 
# 6471
return (__m512d)__builtin_ia32_fixupimmpd512_mask((__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)(-1), __R); 
# 6476
} 
# 6479
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6480
_mm512_mask_fixupimm_round_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512i 
# 6481
__C, const int __imm, const int __R) 
# 6482
{ 
# 6483
return (__m512d)__builtin_ia32_fixupimmpd512_mask((__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)__U, __R); 
# 6488
} 
# 6491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 6492
_mm512_maskz_fixupimm_round_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512i 
# 6493
__C, const int __imm, const int __R) 
# 6494
{ 
# 6495
return (__m512d)__builtin_ia32_fixupimmpd512_maskz((__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)__U, __R); 
# 6500
} 
# 6503
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6504
_mm512_fixupimm_round_ps(__m512 __A, __m512 __B, __m512i __C, const int 
# 6505
__imm, const int __R) 
# 6506
{ 
# 6507
return (__m512)__builtin_ia32_fixupimmps512_mask((__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)(-1), __R); 
# 6512
} 
# 6515
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6516
_mm512_mask_fixupimm_round_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512i 
# 6517
__C, const int __imm, const int __R) 
# 6518
{ 
# 6519
return (__m512)__builtin_ia32_fixupimmps512_mask((__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)__U, __R); 
# 6524
} 
# 6527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6528
_mm512_maskz_fixupimm_round_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512i 
# 6529
__C, const int __imm, const int __R) 
# 6530
{ 
# 6531
return (__m512)__builtin_ia32_fixupimmps512_maskz((__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)__U, __R); 
# 6536
} 
# 6539
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6540
_mm_fixupimm_round_sd(__m128d __A, __m128d __B, __m128i __C, const int 
# 6541
__imm, const int __R) 
# 6542
{ 
# 6543
return (__m128d)__builtin_ia32_fixupimmsd_mask((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)(-1), __R); 
# 6547
} 
# 6550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6551
_mm_mask_fixupimm_round_sd(__m128d __A, __mmask8 __U, __m128d __B, __m128i 
# 6552
__C, const int __imm, const int __R) 
# 6553
{ 
# 6554
return (__m128d)__builtin_ia32_fixupimmsd_mask((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U, __R); 
# 6558
} 
# 6561
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6562
_mm_maskz_fixupimm_round_sd(__mmask8 __U, __m128d __A, __m128d __B, __m128i 
# 6563
__C, const int __imm, const int __R) 
# 6564
{ 
# 6565
return (__m128d)__builtin_ia32_fixupimmsd_maskz((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U, __R); 
# 6570
} 
# 6573
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6574
_mm_fixupimm_round_ss(__m128 __A, __m128 __B, __m128i __C, const int 
# 6575
__imm, const int __R) 
# 6576
{ 
# 6577
return (__m128)__builtin_ia32_fixupimmss_mask((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)(-1), __R); 
# 6581
} 
# 6584
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6585
_mm_mask_fixupimm_round_ss(__m128 __A, __mmask8 __U, __m128 __B, __m128i 
# 6586
__C, const int __imm, const int __R) 
# 6587
{ 
# 6588
return (__m128)__builtin_ia32_fixupimmss_mask((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U, __R); 
# 6592
} 
# 6595
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6596
_mm_maskz_fixupimm_round_ss(__mmask8 __U, __m128 __A, __m128 __B, __m128i 
# 6597
__C, const int __imm, const int __R) 
# 6598
{ 
# 6599
return (__m128)__builtin_ia32_fixupimmss_maskz((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U, __R); 
# 6603
} 
# 6704
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6705
_mm512_movehdup_ps(__m512 __A) 
# 6706
{ 
# 6707
return (__m512)__builtin_ia32_movshdup512_mask((__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 6711
} 
# 6714
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6715
_mm512_mask_movehdup_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 6716
{ 
# 6717
return (__m512)__builtin_ia32_movshdup512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U); 
# 6720
} 
# 6723
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6724
_mm512_maskz_movehdup_ps(__mmask16 __U, __m512 __A) 
# 6725
{ 
# 6726
return (__m512)__builtin_ia32_movshdup512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 6730
} 
# 6733
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6734
_mm512_moveldup_ps(__m512 __A) 
# 6735
{ 
# 6736
return (__m512)__builtin_ia32_movsldup512_mask((__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 6740
} 
# 6743
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6744
_mm512_mask_moveldup_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 6745
{ 
# 6746
return (__m512)__builtin_ia32_movsldup512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U); 
# 6749
} 
# 6752
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 6753
_mm512_maskz_moveldup_ps(__mmask16 __U, __m512 __A) 
# 6754
{ 
# 6755
return (__m512)__builtin_ia32_movsldup512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 6759
} 
# 6762
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6763
_mm512_or_si512(__m512i __A, __m512i __B) 
# 6764
{ 
# 6765
return (__m512i)(((__v16su)__A) | ((__v16su)__B)); 
# 6766
} 
# 6769
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6770
_mm512_or_epi32(__m512i __A, __m512i __B) 
# 6771
{ 
# 6772
return (__m512i)(((__v16su)__A) | ((__v16su)__B)); 
# 6773
} 
# 6776
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6777
_mm512_mask_or_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 6778
{ 
# 6779
return (__m512i)__builtin_ia32_pord512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 6783
} 
# 6786
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6787
_mm512_maskz_or_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 6788
{ 
# 6789
return (__m512i)__builtin_ia32_pord512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 6794
} 
# 6797
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6798
_mm512_or_epi64(__m512i __A, __m512i __B) 
# 6799
{ 
# 6800
return (__m512i)(((__v8du)__A) | ((__v8du)__B)); 
# 6801
} 
# 6804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6805
_mm512_mask_or_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 6806
{ 
# 6807
return (__m512i)__builtin_ia32_porq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 6811
} 
# 6814
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6815
_mm512_maskz_or_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 6816
{ 
# 6817
return (__m512i)__builtin_ia32_porq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 6822
} 
# 6825
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6826
_mm512_xor_si512(__m512i __A, __m512i __B) 
# 6827
{ 
# 6828
return (__m512i)(((__v16su)__A) ^ ((__v16su)__B)); 
# 6829
} 
# 6832
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6833
_mm512_xor_epi32(__m512i __A, __m512i __B) 
# 6834
{ 
# 6835
return (__m512i)(((__v16su)__A) ^ ((__v16su)__B)); 
# 6836
} 
# 6839
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6840
_mm512_mask_xor_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 6841
{ 
# 6842
return (__m512i)__builtin_ia32_pxord512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 6846
} 
# 6849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6850
_mm512_maskz_xor_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 6851
{ 
# 6852
return (__m512i)__builtin_ia32_pxord512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 6857
} 
# 6860
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6861
_mm512_xor_epi64(__m512i __A, __m512i __B) 
# 6862
{ 
# 6863
return (__m512i)(((__v8du)__A) ^ ((__v8du)__B)); 
# 6864
} 
# 6867
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6868
_mm512_mask_xor_epi64(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 6869
{ 
# 6870
return (__m512i)__builtin_ia32_pxorq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 6874
} 
# 6877
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6878
_mm512_maskz_xor_epi64(__mmask16 __U, __m512i __A, __m512i __B) 
# 6879
{ 
# 6880
return (__m512i)__builtin_ia32_pxorq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 6885
} 
# 6889
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6890
_mm512_rol_epi32(__m512i __A, const int __B) 
# 6891
{ 
# 6892
return (__m512i)__builtin_ia32_prold512_mask((__v16si)__A, __B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 6896
} 
# 6899
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6900
_mm512_mask_rol_epi32(__m512i __W, __mmask16 __U, __m512i __A, const int __B) 
# 6901
{ 
# 6902
return (__m512i)__builtin_ia32_prold512_mask((__v16si)__A, __B, (__v16si)__W, (__mmask16)__U); 
# 6905
} 
# 6908
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6909
_mm512_maskz_rol_epi32(__mmask16 __U, __m512i __A, const int __B) 
# 6910
{ 
# 6911
return (__m512i)__builtin_ia32_prold512_mask((__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 6915
} 
# 6918
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6919
_mm512_ror_epi32(__m512i __A, int __B) 
# 6920
{ 
# 6921
return (__m512i)__builtin_ia32_prord512_mask((__v16si)__A, __B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 6925
} 
# 6928
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6929
_mm512_mask_ror_epi32(__m512i __W, __mmask16 __U, __m512i __A, int __B) 
# 6930
{ 
# 6931
return (__m512i)__builtin_ia32_prord512_mask((__v16si)__A, __B, (__v16si)__W, (__mmask16)__U); 
# 6934
} 
# 6937
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6938
_mm512_maskz_ror_epi32(__mmask16 __U, __m512i __A, int __B) 
# 6939
{ 
# 6940
return (__m512i)__builtin_ia32_prord512_mask((__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 6944
} 
# 6947
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6948
_mm512_rol_epi64(__m512i __A, const int __B) 
# 6949
{ 
# 6950
return (__m512i)__builtin_ia32_prolq512_mask((__v8di)__A, __B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 6954
} 
# 6957
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6958
_mm512_mask_rol_epi64(__m512i __W, __mmask8 __U, __m512i __A, const int __B) 
# 6959
{ 
# 6960
return (__m512i)__builtin_ia32_prolq512_mask((__v8di)__A, __B, (__v8di)__W, (__mmask8)__U); 
# 6963
} 
# 6966
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6967
_mm512_maskz_rol_epi64(__mmask8 __U, __m512i __A, const int __B) 
# 6968
{ 
# 6969
return (__m512i)__builtin_ia32_prolq512_mask((__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 6973
} 
# 6976
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6977
_mm512_ror_epi64(__m512i __A, int __B) 
# 6978
{ 
# 6979
return (__m512i)__builtin_ia32_prorq512_mask((__v8di)__A, __B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 6983
} 
# 6986
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6987
_mm512_mask_ror_epi64(__m512i __W, __mmask8 __U, __m512i __A, int __B) 
# 6988
{ 
# 6989
return (__m512i)__builtin_ia32_prorq512_mask((__v8di)__A, __B, (__v8di)__W, (__mmask8)__U); 
# 6992
} 
# 6995
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 6996
_mm512_maskz_ror_epi64(__mmask8 __U, __m512i __A, int __B) 
# 6997
{ 
# 6998
return (__m512i)__builtin_ia32_prorq512_mask((__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 7002
} 
# 7069
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7070
_mm512_and_si512(__m512i __A, __m512i __B) 
# 7071
{ 
# 7072
return (__m512i)(((__v16su)__A) & ((__v16su)__B)); 
# 7073
} 
# 7076
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7077
_mm512_and_epi32(__m512i __A, __m512i __B) 
# 7078
{ 
# 7079
return (__m512i)(((__v16su)__A) & ((__v16su)__B)); 
# 7080
} 
# 7083
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7084
_mm512_mask_and_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 7085
{ 
# 7086
return (__m512i)__builtin_ia32_pandd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 7090
} 
# 7093
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7094
_mm512_maskz_and_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 7095
{ 
# 7096
return (__m512i)__builtin_ia32_pandd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 7101
} 
# 7104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7105
_mm512_and_epi64(__m512i __A, __m512i __B) 
# 7106
{ 
# 7107
return (__m512i)(((__v8du)__A) & ((__v8du)__B)); 
# 7108
} 
# 7111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7112
_mm512_mask_and_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 7113
{ 
# 7114
return (__m512i)__builtin_ia32_pandq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, __U); 
# 7117
} 
# 7120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7121
_mm512_maskz_and_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 7122
{ 
# 7123
return (__m512i)__builtin_ia32_pandq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_pd(), __U); 
# 7128
} 
# 7131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7132
_mm512_andnot_si512(__m512i __A, __m512i __B) 
# 7133
{ 
# 7134
return (__m512i)__builtin_ia32_pandnd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 7139
} 
# 7142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7143
_mm512_andnot_epi32(__m512i __A, __m512i __B) 
# 7144
{ 
# 7145
return (__m512i)__builtin_ia32_pandnd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 7150
} 
# 7153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7154
_mm512_mask_andnot_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) 
# 7155
{ 
# 7156
return (__m512i)__builtin_ia32_pandnd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 7160
} 
# 7163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7164
_mm512_maskz_andnot_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 7165
{ 
# 7166
return (__m512i)__builtin_ia32_pandnd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 7171
} 
# 7174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7175
_mm512_andnot_epi64(__m512i __A, __m512i __B) 
# 7176
{ 
# 7177
return (__m512i)__builtin_ia32_pandnq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 7182
} 
# 7185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7186
_mm512_mask_andnot_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 7187
{ 
# 7188
return (__m512i)__builtin_ia32_pandnq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, __U); 
# 7191
} 
# 7194
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7195
_mm512_maskz_andnot_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 7196
{ 
# 7197
return (__m512i)__builtin_ia32_pandnq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_pd(), __U); 
# 7202
} 
# 7205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 7206
_mm512_test_epi32_mask(__m512i __A, __m512i __B) 
# 7207
{ 
# 7208
return (__mmask16)__builtin_ia32_ptestmd512((__v16si)__A, (__v16si)__B, (__mmask16)(-1)); 
# 7211
} 
# 7214
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 7215
_mm512_mask_test_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) 
# 7216
{ 
# 7217
return (__mmask16)__builtin_ia32_ptestmd512((__v16si)__A, (__v16si)__B, __U); 
# 7219
} 
# 7222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 7223
_mm512_test_epi64_mask(__m512i __A, __m512i __B) 
# 7224
{ 
# 7225
return (__mmask8)__builtin_ia32_ptestmq512((__v8di)__A, (__v8di)__B, (__mmask8)(-1)); 
# 7228
} 
# 7231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 7232
_mm512_mask_test_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) 
# 7233
{ 
# 7234
return (__mmask8)__builtin_ia32_ptestmq512((__v8di)__A, (__v8di)__B, __U); 
# 7235
} 
# 7238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 7239
_mm512_testn_epi32_mask(__m512i __A, __m512i __B) 
# 7240
{ 
# 7241
return (__mmask16)__builtin_ia32_ptestnmd512((__v16si)__A, (__v16si)__B, (__mmask16)(-1)); 
# 7244
} 
# 7247
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 7248
_mm512_mask_testn_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) 
# 7249
{ 
# 7250
return (__mmask16)__builtin_ia32_ptestnmd512((__v16si)__A, (__v16si)__B, __U); 
# 7252
} 
# 7255
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 7256
_mm512_testn_epi64_mask(__m512i __A, __m512i __B) 
# 7257
{ 
# 7258
return (__mmask8)__builtin_ia32_ptestnmq512((__v8di)__A, (__v8di)__B, (__mmask8)(-1)); 
# 7261
} 
# 7264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 7265
_mm512_mask_testn_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) 
# 7266
{ 
# 7267
return (__mmask8)__builtin_ia32_ptestnmq512((__v8di)__A, (__v8di)__B, __U); 
# 7269
} 
# 7272
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7273
_mm512_unpackhi_epi32(__m512i __A, __m512i __B) 
# 7274
{ 
# 7275
return (__m512i)__builtin_ia32_punpckhdq512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 7280
} 
# 7283
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7284
_mm512_mask_unpackhi_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i 
# 7285
__B) 
# 7286
{ 
# 7287
return (__m512i)__builtin_ia32_punpckhdq512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 7291
} 
# 7294
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7295
_mm512_maskz_unpackhi_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 7296
{ 
# 7297
return (__m512i)__builtin_ia32_punpckhdq512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 7302
} 
# 7305
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7306
_mm512_unpackhi_epi64(__m512i __A, __m512i __B) 
# 7307
{ 
# 7308
return (__m512i)__builtin_ia32_punpckhqdq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 7313
} 
# 7316
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7317
_mm512_mask_unpackhi_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 7318
{ 
# 7319
return (__m512i)__builtin_ia32_punpckhqdq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 7323
} 
# 7326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7327
_mm512_maskz_unpackhi_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 7328
{ 
# 7329
return (__m512i)__builtin_ia32_punpckhqdq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 7334
} 
# 7337
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7338
_mm512_unpacklo_epi32(__m512i __A, __m512i __B) 
# 7339
{ 
# 7340
return (__m512i)__builtin_ia32_punpckldq512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 7345
} 
# 7348
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7349
_mm512_mask_unpacklo_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i 
# 7350
__B) 
# 7351
{ 
# 7352
return (__m512i)__builtin_ia32_punpckldq512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U); 
# 7356
} 
# 7359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7360
_mm512_maskz_unpacklo_epi32(__mmask16 __U, __m512i __A, __m512i __B) 
# 7361
{ 
# 7362
return (__m512i)__builtin_ia32_punpckldq512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 7367
} 
# 7370
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7371
_mm512_unpacklo_epi64(__m512i __A, __m512i __B) 
# 7372
{ 
# 7373
return (__m512i)__builtin_ia32_punpcklqdq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 7378
} 
# 7381
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7382
_mm512_mask_unpacklo_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) 
# 7383
{ 
# 7384
return (__m512i)__builtin_ia32_punpcklqdq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 7388
} 
# 7391
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 7392
_mm512_maskz_unpacklo_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 7393
{ 
# 7394
return (__m512i)__builtin_ia32_punpcklqdq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 7399
} 
# 7404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 7405
_mm_cvt_roundss_u64(__m128 __A, const int __R) 
# 7406
{ 
# 7407
return (unsigned long long)__builtin_ia32_vcvtss2usi64((__v4sf)__A, __R); 
# 7408
} 
# 7411
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 7412
_mm_cvt_roundss_si64(__m128 __A, const int __R) 
# 7413
{ 
# 7414
return (long long)__builtin_ia32_vcvtss2si64((__v4sf)__A, __R); 
# 7415
} 
# 7418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 7419
_mm_cvt_roundss_i64(__m128 __A, const int __R) 
# 7420
{ 
# 7421
return (long long)__builtin_ia32_vcvtss2si64((__v4sf)__A, __R); 
# 7422
} 
# 7425
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 7426
_mm_cvtt_roundss_u64(__m128 __A, const int __R) 
# 7427
{ 
# 7428
return (unsigned long long)__builtin_ia32_vcvttss2usi64((__v4sf)__A, __R); 
# 7429
} 
# 7432
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 7433
_mm_cvtt_roundss_i64(__m128 __A, const int __R) 
# 7434
{ 
# 7435
return (long long)__builtin_ia32_vcvttss2si64((__v4sf)__A, __R); 
# 7436
} 
# 7439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 7440
_mm_cvtt_roundss_si64(__m128 __A, const int __R) 
# 7441
{ 
# 7442
return (long long)__builtin_ia32_vcvttss2si64((__v4sf)__A, __R); 
# 7443
} 
# 7467
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 7468
_mm_cvt_roundss_u32(__m128 __A, const int __R) 
# 7469
{ 
# 7470
return (unsigned)__builtin_ia32_vcvtss2usi32((__v4sf)__A, __R); 
# 7471
} 
# 7474
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 7475
_mm_cvt_roundss_si32(__m128 __A, const int __R) 
# 7476
{ 
# 7477
return (int)__builtin_ia32_vcvtss2si32((__v4sf)__A, __R); 
# 7478
} 
# 7481
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 7482
_mm_cvt_roundss_i32(__m128 __A, const int __R) 
# 7483
{ 
# 7484
return (int)__builtin_ia32_vcvtss2si32((__v4sf)__A, __R); 
# 7485
} 
# 7488
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 7489
_mm_cvtt_roundss_u32(__m128 __A, const int __R) 
# 7490
{ 
# 7491
return (unsigned)__builtin_ia32_vcvttss2usi32((__v4sf)__A, __R); 
# 7492
} 
# 7495
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 7496
_mm_cvtt_roundss_i32(__m128 __A, const int __R) 
# 7497
{ 
# 7498
return (int)__builtin_ia32_vcvttss2si32((__v4sf)__A, __R); 
# 7499
} 
# 7502
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 7503
_mm_cvtt_roundss_si32(__m128 __A, const int __R) 
# 7504
{ 
# 7505
return (int)__builtin_ia32_vcvttss2si32((__v4sf)__A, __R); 
# 7506
} 
# 7530
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 7531
_mm_cvt_roundsd_u64(__m128d __A, const int __R) 
# 7532
{ 
# 7533
return (unsigned long long)__builtin_ia32_vcvtsd2usi64((__v2df)__A, __R); 
# 7534
} 
# 7537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 7538
_mm_cvt_roundsd_si64(__m128d __A, const int __R) 
# 7539
{ 
# 7540
return (long long)__builtin_ia32_vcvtsd2si64((__v2df)__A, __R); 
# 7541
} 
# 7544
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 7545
_mm_cvt_roundsd_i64(__m128d __A, const int __R) 
# 7546
{ 
# 7547
return (long long)__builtin_ia32_vcvtsd2si64((__v2df)__A, __R); 
# 7548
} 
# 7551
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 7552
_mm_cvtt_roundsd_u64(__m128d __A, const int __R) 
# 7553
{ 
# 7554
return (unsigned long long)__builtin_ia32_vcvttsd2usi64((__v2df)__A, __R); 
# 7555
} 
# 7558
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 7559
_mm_cvtt_roundsd_si64(__m128d __A, const int __R) 
# 7560
{ 
# 7561
return (long long)__builtin_ia32_vcvttsd2si64((__v2df)__A, __R); 
# 7562
} 
# 7565
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 7566
_mm_cvtt_roundsd_i64(__m128d __A, const int __R) 
# 7567
{ 
# 7568
return (long long)__builtin_ia32_vcvttsd2si64((__v2df)__A, __R); 
# 7569
} 
# 7593
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 7594
_mm_cvt_roundsd_u32(__m128d __A, const int __R) 
# 7595
{ 
# 7596
return (unsigned)__builtin_ia32_vcvtsd2usi32((__v2df)__A, __R); 
# 7597
} 
# 7600
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 7601
_mm_cvt_roundsd_si32(__m128d __A, const int __R) 
# 7602
{ 
# 7603
return (int)__builtin_ia32_vcvtsd2si32((__v2df)__A, __R); 
# 7604
} 
# 7607
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 7608
_mm_cvt_roundsd_i32(__m128d __A, const int __R) 
# 7609
{ 
# 7610
return (int)__builtin_ia32_vcvtsd2si32((__v2df)__A, __R); 
# 7611
} 
# 7614
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 7615
_mm_cvtt_roundsd_u32(__m128d __A, const int __R) 
# 7616
{ 
# 7617
return (unsigned)__builtin_ia32_vcvttsd2usi32((__v2df)__A, __R); 
# 7618
} 
# 7621
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 7622
_mm_cvtt_roundsd_i32(__m128d __A, const int __R) 
# 7623
{ 
# 7624
return (int)__builtin_ia32_vcvttsd2si32((__v2df)__A, __R); 
# 7625
} 
# 7628
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 7629
_mm_cvtt_roundsd_si32(__m128d __A, const int __R) 
# 7630
{ 
# 7631
return (int)__builtin_ia32_vcvttsd2si32((__v2df)__A, __R); 
# 7632
} 
# 7654
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7655
_mm512_movedup_pd(__m512d __A) 
# 7656
{ 
# 7657
return (__m512d)__builtin_ia32_movddup512_mask((__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 7661
} 
# 7664
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7665
_mm512_mask_movedup_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 7666
{ 
# 7667
return (__m512d)__builtin_ia32_movddup512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U); 
# 7670
} 
# 7673
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7674
_mm512_maskz_movedup_pd(__mmask8 __U, __m512d __A) 
# 7675
{ 
# 7676
return (__m512d)__builtin_ia32_movddup512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 7680
} 
# 7683
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7684
_mm512_unpacklo_pd(__m512d __A, __m512d __B) 
# 7685
{ 
# 7686
return (__m512d)__builtin_ia32_unpcklpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 7691
} 
# 7694
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7695
_mm512_mask_unpacklo_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 7696
{ 
# 7697
return (__m512d)__builtin_ia32_unpcklpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U); 
# 7701
} 
# 7704
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7705
_mm512_maskz_unpacklo_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 7706
{ 
# 7707
return (__m512d)__builtin_ia32_unpcklpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 7712
} 
# 7715
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7716
_mm512_unpackhi_pd(__m512d __A, __m512d __B) 
# 7717
{ 
# 7718
return (__m512d)__builtin_ia32_unpckhpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1)); 
# 7723
} 
# 7726
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7727
_mm512_mask_unpackhi_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 7728
{ 
# 7729
return (__m512d)__builtin_ia32_unpckhpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U); 
# 7733
} 
# 7736
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7737
_mm512_maskz_unpackhi_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 7738
{ 
# 7739
return (__m512d)__builtin_ia32_unpckhpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 7744
} 
# 7747
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 7748
_mm512_unpackhi_ps(__m512 __A, __m512 __B) 
# 7749
{ 
# 7750
return (__m512)__builtin_ia32_unpckhps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 7755
} 
# 7758
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 7759
_mm512_mask_unpackhi_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 7760
{ 
# 7761
return (__m512)__builtin_ia32_unpckhps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U); 
# 7765
} 
# 7768
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 7769
_mm512_maskz_unpackhi_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 7770
{ 
# 7771
return (__m512)__builtin_ia32_unpckhps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 7776
} 
# 7780
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7781
_mm512_cvt_roundps_pd(__m256 __A, const int __R) 
# 7782
{ 
# 7783
return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 7787
} 
# 7790
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7791
_mm512_mask_cvt_roundps_pd(__m512d __W, __mmask8 __U, __m256 __A, const int 
# 7792
__R) 
# 7793
{ 
# 7794
return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)__W, (__mmask8)__U, __R); 
# 7797
} 
# 7800
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 7801
_mm512_maskz_cvt_roundps_pd(__mmask8 __U, __m256 __A, const int __R) 
# 7802
{ 
# 7803
return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 7807
} 
# 7810
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 7811
_mm512_cvt_roundph_ps(__m256i __A, const int __R) 
# 7812
{ 
# 7813
return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 7817
} 
# 7820
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 7821
_mm512_mask_cvt_roundph_ps(__m512 __W, __mmask16 __U, __m256i __A, const int 
# 7822
__R) 
# 7823
{ 
# 7824
return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)__W, (__mmask16)__U, __R); 
# 7827
} 
# 7830
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 7831
_mm512_maskz_cvt_roundph_ps(__mmask16 __U, __m256i __A, const int __R) 
# 7832
{ 
# 7833
return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 7837
} 
# 7840
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7841
_mm512_cvt_roundps_ph(__m512 __A, const int __I) 
# 7842
{ 
# 7843
return (__m256i)__builtin_ia32_vcvtps2ph512_mask((__v16sf)__A, __I, (__v16hi)_mm256_undefined_si256(), -1); 
# 7848
} 
# 7851
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7852
_mm512_cvtps_ph(__m512 __A, const int __I) 
# 7853
{ 
# 7854
return (__m256i)__builtin_ia32_vcvtps2ph512_mask((__v16sf)__A, __I, (__v16hi)_mm256_undefined_si256(), -1); 
# 7859
} 
# 7862
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7863
_mm512_mask_cvt_roundps_ph(__m256i __U, __mmask16 __W, __m512 __A, const int 
# 7864
__I) 
# 7865
{ 
# 7866
return (__m256i)__builtin_ia32_vcvtps2ph512_mask((__v16sf)__A, __I, (__v16hi)__U, (__mmask16)__W); 
# 7870
} 
# 7873
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7874
_mm512_mask_cvtps_ph(__m256i __U, __mmask16 __W, __m512 __A, const int __I) 
# 7875
{ 
# 7876
return (__m256i)__builtin_ia32_vcvtps2ph512_mask((__v16sf)__A, __I, (__v16hi)__U, (__mmask16)__W); 
# 7880
} 
# 7883
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7884
_mm512_maskz_cvt_roundps_ph(__mmask16 __W, __m512 __A, const int __I) 
# 7885
{ 
# 7886
return (__m256i)__builtin_ia32_vcvtps2ph512_mask((__v16sf)__A, __I, (__v16hi)_mm256_setzero_si256(), (__mmask16)__W); 
# 7891
} 
# 7894
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7895
_mm512_maskz_cvtps_ph(__mmask16 __W, __m512 __A, const int __I) 
# 7896
{ 
# 7897
return (__m256i)__builtin_ia32_vcvtps2ph512_mask((__v16sf)__A, __I, (__v16hi)_mm256_setzero_si256(), (__mmask16)__W); 
# 7902
} 
# 7944
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7945
_mm512_cvt_roundpd_ps(__m512d __A, const int __R) 
# 7946
{ 
# 7947
return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)_mm256_undefined_ps(), (__mmask8)(-1), __R); 
# 7951
} 
# 7954
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7955
_mm512_mask_cvt_roundpd_ps(__m256 __W, __mmask8 __U, __m512d __A, const int 
# 7956
__R) 
# 7957
{ 
# 7958
return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)__W, (__mmask8)__U, __R); 
# 7961
} 
# 7964
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7965
_mm512_maskz_cvt_roundpd_ps(__mmask8 __U, __m512d __A, const int __R) 
# 7966
{ 
# 7967
return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, __R); 
# 7971
} 
# 7974
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7975
_mm_cvt_roundsd_ss(__m128 __A, __m128d __B, const int __R) 
# 7976
{ 
# 7977
return (__m128)__builtin_ia32_cvtsd2ss_round((__v4sf)__A, (__v2df)__B, __R); 
# 7980
} 
# 7983
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7984
_mm_cvt_roundss_sd(__m128d __A, __m128 __B, const int __R) 
# 7985
{ 
# 7986
return (__m128d)__builtin_ia32_cvtss2sd_round((__v2df)__A, (__v4sf)__B, __R); 
# 7989
} 
# 8008
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 8009
_mm512_stream_si512(__m512i *__P, __m512i __A) 
# 8010
{ 
# 8011
__builtin_ia32_movntdq512((__v8di *)__P, (__v8di)__A); 
# 8012
} 
# 8015
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 8016
_mm512_stream_ps(float *__P, __m512 __A) 
# 8017
{ 
# 8018
__builtin_ia32_movntps512(__P, (__v16sf)__A); 
# 8019
} 
# 8022
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 8023
_mm512_stream_pd(double *__P, __m512d __A) 
# 8024
{ 
# 8025
__builtin_ia32_movntpd512(__P, (__v8df)__A); 
# 8026
} 
# 8029
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 8030
_mm512_stream_load_si512(void *__P) 
# 8031
{ 
# 8032
return __builtin_ia32_movntdqa512((__v8di *)__P); 
# 8033
} 
# 8042
typedef 
# 8037
enum { 
# 8038
_MM_MANT_NORM_1_2, 
# 8039
_MM_MANT_NORM_p5_2, 
# 8040
_MM_MANT_NORM_p5_1, 
# 8041
_MM_MANT_NORM_p75_1p5
# 8042
} _MM_MANTISSA_NORM_ENUM; 
# 8049
typedef 
# 8045
enum { 
# 8046
_MM_MANT_SIGN_src, 
# 8047
_MM_MANT_SIGN_zero, 
# 8048
_MM_MANT_SIGN_nan
# 8049
} _MM_MANTISSA_SIGN_ENUM; 
# 8053
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8054
_mm_getexp_round_ss(__m128 __A, __m128 __B, const int __R) 
# 8055
{ 
# 8056
return (__m128)__builtin_ia32_getexpss128_round((__v4sf)__A, (__v4sf)__B, __R); 
# 8059
} 
# 8062
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8063
_mm_getexp_round_sd(__m128d __A, __m128d __B, const int __R) 
# 8064
{ 
# 8065
return (__m128d)__builtin_ia32_getexpsd128_round((__v2df)__A, (__v2df)__B, __R); 
# 8068
} 
# 8071
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8072
_mm512_getexp_round_ps(__m512 __A, const int __R) 
# 8073
{ 
# 8074
return (__m512)__builtin_ia32_getexpps512_mask((__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 8078
} 
# 8081
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8082
_mm512_mask_getexp_round_ps(__m512 __W, __mmask16 __U, __m512 __A, const int 
# 8083
__R) 
# 8084
{ 
# 8085
return (__m512)__builtin_ia32_getexpps512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U, __R); 
# 8088
} 
# 8091
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8092
_mm512_maskz_getexp_round_ps(__mmask16 __U, __m512 __A, const int __R) 
# 8093
{ 
# 8094
return (__m512)__builtin_ia32_getexpps512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 8098
} 
# 8101
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8102
_mm512_getexp_round_pd(__m512d __A, const int __R) 
# 8103
{ 
# 8104
return (__m512d)__builtin_ia32_getexppd512_mask((__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 8108
} 
# 8111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8112
_mm512_mask_getexp_round_pd(__m512d __W, __mmask8 __U, __m512d __A, const int 
# 8113
__R) 
# 8114
{ 
# 8115
return (__m512d)__builtin_ia32_getexppd512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U, __R); 
# 8118
} 
# 8121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8122
_mm512_maskz_getexp_round_pd(__mmask8 __U, __m512d __A, const int __R) 
# 8123
{ 
# 8124
return (__m512d)__builtin_ia32_getexppd512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 8128
} 
# 8131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8132
_mm512_getmant_round_pd(__m512d __A, _MM_MANTISSA_NORM_ENUM __B, _MM_MANTISSA_SIGN_ENUM 
# 8133
__C, const int __R) 
# 8134
{ 
# 8135
return (__m512d)__builtin_ia32_getmantpd512_mask((__v8df)__A, (__C << 2) | __B, _mm512_undefined_pd(), (__mmask8)(-1), __R); 
# 8139
} 
# 8142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8143
_mm512_mask_getmant_round_pd(__m512d __W, __mmask8 __U, __m512d __A, _MM_MANTISSA_NORM_ENUM 
# 8144
__B, _MM_MANTISSA_SIGN_ENUM 
# 8145
__C, const int __R) 
# 8146
{ 
# 8147
return (__m512d)__builtin_ia32_getmantpd512_mask((__v8df)__A, (__C << 2) | __B, (__v8df)__W, __U, __R); 
# 8151
} 
# 8154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8155
_mm512_maskz_getmant_round_pd(__mmask8 __U, __m512d __A, _MM_MANTISSA_NORM_ENUM 
# 8156
__B, _MM_MANTISSA_SIGN_ENUM 
# 8157
__C, const int __R) 
# 8158
{ 
# 8159
return (__m512d)__builtin_ia32_getmantpd512_mask((__v8df)__A, (__C << 2) | __B, (__v8df)_mm512_setzero_pd(), __U, __R); 
# 8164
} 
# 8167
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8168
_mm512_getmant_round_ps(__m512 __A, _MM_MANTISSA_NORM_ENUM __B, _MM_MANTISSA_SIGN_ENUM 
# 8169
__C, const int __R) 
# 8170
{ 
# 8171
return (__m512)__builtin_ia32_getmantps512_mask((__v16sf)__A, (__C << 2) | __B, _mm512_undefined_ps(), (__mmask16)(-1), __R); 
# 8175
} 
# 8178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8179
_mm512_mask_getmant_round_ps(__m512 __W, __mmask16 __U, __m512 __A, _MM_MANTISSA_NORM_ENUM 
# 8180
__B, _MM_MANTISSA_SIGN_ENUM 
# 8181
__C, const int __R) 
# 8182
{ 
# 8183
return (__m512)__builtin_ia32_getmantps512_mask((__v16sf)__A, (__C << 2) | __B, (__v16sf)__W, __U, __R); 
# 8187
} 
# 8190
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8191
_mm512_maskz_getmant_round_ps(__mmask16 __U, __m512 __A, _MM_MANTISSA_NORM_ENUM 
# 8192
__B, _MM_MANTISSA_SIGN_ENUM 
# 8193
__C, const int __R) 
# 8194
{ 
# 8195
return (__m512)__builtin_ia32_getmantps512_mask((__v16sf)__A, (__C << 2) | __B, (__v16sf)_mm512_setzero_ps(), __U, __R); 
# 8200
} 
# 8203
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8204
_mm_getmant_round_sd(__m128d __A, __m128d __B, _MM_MANTISSA_NORM_ENUM 
# 8205
__C, _MM_MANTISSA_SIGN_ENUM 
# 8206
__D, const int __R) 
# 8207
{ 
# 8208
return (__m128d)__builtin_ia32_getmantsd_round((__v2df)__A, (__v2df)__B, (__D << 2) | __C, __R); 
# 8212
} 
# 8215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8216
_mm_getmant_round_ss(__m128 __A, __m128 __B, _MM_MANTISSA_NORM_ENUM 
# 8217
__C, _MM_MANTISSA_SIGN_ENUM 
# 8218
__D, const int __R) 
# 8219
{ 
# 8220
return (__m128)__builtin_ia32_getmantss_round((__v4sf)__A, (__v4sf)__B, (__D << 2) | __C, __R); 
# 8224
} 
# 8312
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8313
_mm512_roundscale_round_ps(__m512 __A, const int __imm, const int __R) 
# 8314
{ 
# 8315
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, __imm, (__v16sf)_mm512_undefined_ps(), -1, __R); 
# 8319
} 
# 8322
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8323
_mm512_mask_roundscale_round_ps(__m512 __A, __mmask16 __B, __m512 __C, const int 
# 8324
__imm, const int __R) 
# 8325
{ 
# 8326
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__C, __imm, (__v16sf)__A, (__mmask16)__B, __R); 
# 8329
} 
# 8332
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8333
_mm512_maskz_roundscale_round_ps(__mmask16 __A, __m512 __B, const int 
# 8334
__imm, const int __R) 
# 8335
{ 
# 8336
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__B, __imm, (__v16sf)_mm512_setzero_ps(), (__mmask16)__A, __R); 
# 8341
} 
# 8344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8345
_mm512_roundscale_round_pd(__m512d __A, const int __imm, const int __R) 
# 8346
{ 
# 8347
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, __imm, (__v8df)_mm512_undefined_pd(), -1, __R); 
# 8351
} 
# 8354
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8355
_mm512_mask_roundscale_round_pd(__m512d __A, __mmask8 __B, __m512d 
# 8356
__C, const int __imm, const int __R) 
# 8357
{ 
# 8358
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__C, __imm, (__v8df)__A, (__mmask8)__B, __R); 
# 8361
} 
# 8364
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8365
_mm512_maskz_roundscale_round_pd(__mmask8 __A, __m512d __B, const int 
# 8366
__imm, const int __R) 
# 8367
{ 
# 8368
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__B, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)__A, __R); 
# 8373
} 
# 8376
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8377
_mm_roundscale_round_ss(__m128 __A, __m128 __B, const int __imm, const int __R) 
# 8378
{ 
# 8379
return (__m128)__builtin_ia32_rndscaless_round((__v4sf)__A, (__v4sf)__B, __imm, __R); 
# 8381
} 
# 8384
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8385
_mm_roundscale_round_sd(__m128d __A, __m128d __B, const int __imm, const int 
# 8386
__R) 
# 8387
{ 
# 8388
return (__m128d)__builtin_ia32_rndscalesd_round((__v2df)__A, (__v2df)__B, __imm, __R); 
# 8390
} 
# 8428
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8429
_mm512_floor_ps(__m512 __A) 
# 8430
{ 
# 8431
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, 1 | 0, (__v16sf)__A, -1, 4); 
# 8435
} 
# 8438
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8439
_mm512_floor_pd(__m512d __A) 
# 8440
{ 
# 8441
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, 1 | 0, (__v8df)__A, -1, 4); 
# 8445
} 
# 8448
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8449
_mm512_ceil_ps(__m512 __A) 
# 8450
{ 
# 8451
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, 2 | 0, (__v16sf)__A, -1, 4); 
# 8455
} 
# 8458
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8459
_mm512_ceil_pd(__m512d __A) 
# 8460
{ 
# 8461
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, 2 | 0, (__v8df)__A, -1, 4); 
# 8465
} 
# 8468
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8469
_mm512_mask_floor_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 8470
{ 
# 8471
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, 1 | 0, (__v16sf)__W, __U, 4); 
# 8475
} 
# 8478
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8479
_mm512_mask_floor_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 8480
{ 
# 8481
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, 1 | 0, (__v8df)__W, __U, 4); 
# 8485
} 
# 8488
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 8489
_mm512_mask_ceil_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 8490
{ 
# 8491
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, 2 | 0, (__v16sf)__W, __U, 4); 
# 8495
} 
# 8498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 8499
_mm512_mask_ceil_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 8500
{ 
# 8501
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, 2 | 0, (__v8df)__W, __U, 4); 
# 8505
} 
# 8509
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 8510
_mm512_alignr_epi32(__m512i __A, __m512i __B, const int __imm) 
# 8511
{ 
# 8512
return (__m512i)__builtin_ia32_alignd512_mask((__v16si)__A, (__v16si)__B, __imm, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 8517
} 
# 8520
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 8521
_mm512_mask_alignr_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i 
# 8522
__B, const int __imm) 
# 8523
{ 
# 8524
return (__m512i)__builtin_ia32_alignd512_mask((__v16si)__A, (__v16si)__B, __imm, (__v16si)__W, (__mmask16)__U); 
# 8528
} 
# 8531
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 8532
_mm512_maskz_alignr_epi32(__mmask16 __U, __m512i __A, __m512i __B, const int 
# 8533
__imm) 
# 8534
{ 
# 8535
return (__m512i)__builtin_ia32_alignd512_mask((__v16si)__A, (__v16si)__B, __imm, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 8540
} 
# 8543
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 8544
_mm512_alignr_epi64(__m512i __A, __m512i __B, const int __imm) 
# 8545
{ 
# 8546
return (__m512i)__builtin_ia32_alignq512_mask((__v8di)__A, (__v8di)__B, __imm, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 8551
} 
# 8554
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 8555
_mm512_mask_alignr_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i 
# 8556
__B, const int __imm) 
# 8557
{ 
# 8558
return (__m512i)__builtin_ia32_alignq512_mask((__v8di)__A, (__v8di)__B, __imm, (__v8di)__W, (__mmask8)__U); 
# 8562
} 
# 8565
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 8566
_mm512_maskz_alignr_epi64(__mmask8 __U, __m512i __A, __m512i __B, const int 
# 8567
__imm) 
# 8568
{ 
# 8569
return (__m512i)__builtin_ia32_alignq512_mask((__v8di)__A, (__v8di)__B, __imm, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 8574
} 
# 8607
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8608
_mm512_cmpeq_epi32_mask(__m512i __A, __m512i __B) 
# 8609
{ 
# 8610
return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__A, (__v16si)__B, (__mmask16)(-1)); 
# 8613
} 
# 8616
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8617
_mm512_mask_cmpeq_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) 
# 8618
{ 
# 8619
return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__A, (__v16si)__B, __U); 
# 8621
} 
# 8624
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8625
_mm512_mask_cmpeq_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) 
# 8626
{ 
# 8627
return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__A, (__v8di)__B, __U); 
# 8629
} 
# 8632
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8633
_mm512_cmpeq_epi64_mask(__m512i __A, __m512i __B) 
# 8634
{ 
# 8635
return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__A, (__v8di)__B, (__mmask8)(-1)); 
# 8638
} 
# 8641
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8642
_mm512_cmpgt_epi32_mask(__m512i __A, __m512i __B) 
# 8643
{ 
# 8644
return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__A, (__v16si)__B, (__mmask16)(-1)); 
# 8647
} 
# 8650
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8651
_mm512_mask_cmpgt_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) 
# 8652
{ 
# 8653
return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__A, (__v16si)__B, __U); 
# 8655
} 
# 8658
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8659
_mm512_mask_cmpgt_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) 
# 8660
{ 
# 8661
return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__A, (__v8di)__B, __U); 
# 8663
} 
# 8666
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8667
_mm512_cmpgt_epi64_mask(__m512i __A, __m512i __B) 
# 8668
{ 
# 8669
return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__A, (__v8di)__B, (__mmask8)(-1)); 
# 8672
} 
# 8675
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8676
_mm512_cmpge_epi32_mask(__m512i __X, __m512i __Y) 
# 8677
{ 
# 8678
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 5, (__mmask16)(-1)); 
# 8681
} 
# 8684
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8685
_mm512_mask_cmpge_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8686
{ 
# 8687
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 5, (__mmask16)__M); 
# 8690
} 
# 8693
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8694
_mm512_mask_cmpge_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8695
{ 
# 8696
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 5, (__mmask16)__M); 
# 8699
} 
# 8702
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8703
_mm512_cmpge_epu32_mask(__m512i __X, __m512i __Y) 
# 8704
{ 
# 8705
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 5, (__mmask16)(-1)); 
# 8708
} 
# 8711
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8712
_mm512_mask_cmpge_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) 
# 8713
{ 
# 8714
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 5, (__mmask8)__M); 
# 8717
} 
# 8720
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8721
_mm512_cmpge_epi64_mask(__m512i __X, __m512i __Y) 
# 8722
{ 
# 8723
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 5, (__mmask8)(-1)); 
# 8726
} 
# 8729
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8730
_mm512_mask_cmpge_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) 
# 8731
{ 
# 8732
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 5, (__mmask8)__M); 
# 8735
} 
# 8738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8739
_mm512_cmpge_epu64_mask(__m512i __X, __m512i __Y) 
# 8740
{ 
# 8741
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 5, (__mmask8)(-1)); 
# 8744
} 
# 8747
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8748
_mm512_mask_cmple_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8749
{ 
# 8750
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 2, (__mmask16)__M); 
# 8753
} 
# 8756
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8757
_mm512_cmple_epi32_mask(__m512i __X, __m512i __Y) 
# 8758
{ 
# 8759
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 2, (__mmask16)(-1)); 
# 8762
} 
# 8765
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8766
_mm512_mask_cmple_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8767
{ 
# 8768
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 2, (__mmask16)__M); 
# 8771
} 
# 8774
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8775
_mm512_cmple_epu32_mask(__m512i __X, __m512i __Y) 
# 8776
{ 
# 8777
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 2, (__mmask16)(-1)); 
# 8780
} 
# 8783
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8784
_mm512_mask_cmple_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) 
# 8785
{ 
# 8786
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 2, (__mmask8)__M); 
# 8789
} 
# 8792
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8793
_mm512_cmple_epi64_mask(__m512i __X, __m512i __Y) 
# 8794
{ 
# 8795
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 2, (__mmask8)(-1)); 
# 8798
} 
# 8801
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8802
_mm512_mask_cmple_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) 
# 8803
{ 
# 8804
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 2, (__mmask8)__M); 
# 8807
} 
# 8810
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8811
_mm512_cmple_epu64_mask(__m512i __X, __m512i __Y) 
# 8812
{ 
# 8813
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 2, (__mmask8)(-1)); 
# 8816
} 
# 8819
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8820
_mm512_mask_cmplt_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8821
{ 
# 8822
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 1, (__mmask16)__M); 
# 8825
} 
# 8828
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8829
_mm512_cmplt_epi32_mask(__m512i __X, __m512i __Y) 
# 8830
{ 
# 8831
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 1, (__mmask16)(-1)); 
# 8834
} 
# 8837
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8838
_mm512_mask_cmplt_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8839
{ 
# 8840
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 1, (__mmask16)__M); 
# 8843
} 
# 8846
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8847
_mm512_cmplt_epu32_mask(__m512i __X, __m512i __Y) 
# 8848
{ 
# 8849
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 1, (__mmask16)(-1)); 
# 8852
} 
# 8855
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8856
_mm512_mask_cmplt_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) 
# 8857
{ 
# 8858
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 1, (__mmask8)__M); 
# 8861
} 
# 8864
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8865
_mm512_cmplt_epi64_mask(__m512i __X, __m512i __Y) 
# 8866
{ 
# 8867
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 1, (__mmask8)(-1)); 
# 8870
} 
# 8873
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8874
_mm512_mask_cmplt_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) 
# 8875
{ 
# 8876
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 1, (__mmask8)__M); 
# 8879
} 
# 8882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8883
_mm512_cmplt_epu64_mask(__m512i __X, __m512i __Y) 
# 8884
{ 
# 8885
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 1, (__mmask8)(-1)); 
# 8888
} 
# 8891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8892
_mm512_cmpneq_epi32_mask(__m512i __X, __m512i __Y) 
# 8893
{ 
# 8894
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 4, (__mmask16)(-1)); 
# 8897
} 
# 8900
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8901
_mm512_mask_cmpneq_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8902
{ 
# 8903
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 4, (__mmask16)__M); 
# 8906
} 
# 8909
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8910
_mm512_mask_cmpneq_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8911
{ 
# 8912
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 4, (__mmask16)__M); 
# 8915
} 
# 8918
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8919
_mm512_cmpneq_epu32_mask(__m512i __X, __m512i __Y) 
# 8920
{ 
# 8921
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 4, (__mmask16)(-1)); 
# 8924
} 
# 8927
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8928
_mm512_mask_cmpneq_epi64_mask(__mmask16 __M, __m512i __X, __m512i __Y) 
# 8929
{ 
# 8930
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 4, (__mmask8)__M); 
# 8933
} 
# 8936
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8937
_mm512_cmpneq_epi64_mask(__m512i __X, __m512i __Y) 
# 8938
{ 
# 8939
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 4, (__mmask8)(-1)); 
# 8942
} 
# 8945
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8946
_mm512_mask_cmpneq_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) 
# 8947
{ 
# 8948
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 4, (__mmask8)__M); 
# 8951
} 
# 8954
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8955
_mm512_cmpneq_epu64_mask(__m512i __X, __m512i __Y) 
# 8956
{ 
# 8957
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 4, (__mmask8)(-1)); 
# 8960
} 
# 8974
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8975
_mm512_cmp_epi64_mask(__m512i __X, __m512i __Y, const int __P) 
# 8976
{ 
# 8977
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, __P, (__mmask8)(-1)); 
# 8980
} 
# 8983
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 8984
_mm512_cmp_epi32_mask(__m512i __X, __m512i __Y, const int __P) 
# 8985
{ 
# 8986
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, __P, (__mmask16)(-1)); 
# 8989
} 
# 8992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 8993
_mm512_cmp_epu64_mask(__m512i __X, __m512i __Y, const int __P) 
# 8994
{ 
# 8995
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, __P, (__mmask8)(-1)); 
# 8998
} 
# 9001
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 9002
_mm512_cmp_epu32_mask(__m512i __X, __m512i __Y, const int __P) 
# 9003
{ 
# 9004
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, __P, (__mmask16)(-1)); 
# 9007
} 
# 9010
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 9011
_mm512_cmp_round_pd_mask(__m512d __X, __m512d __Y, const int __P, const int 
# 9012
__R) 
# 9013
{ 
# 9014
return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, __P, (__mmask8)(-1), __R); 
# 9017
} 
# 9020
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 9021
_mm512_cmp_round_ps_mask(__m512 __X, __m512 __Y, const int __P, const int __R) 
# 9022
{ 
# 9023
return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y, __P, (__mmask16)(-1), __R); 
# 9026
} 
# 9029
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 9030
_mm512_mask_cmp_epi64_mask(__mmask8 __U, __m512i __X, __m512i __Y, const int 
# 9031
__P) 
# 9032
{ 
# 9033
return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, __P, (__mmask8)__U); 
# 9036
} 
# 9039
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 9040
_mm512_mask_cmp_epi32_mask(__mmask16 __U, __m512i __X, __m512i __Y, const int 
# 9041
__P) 
# 9042
{ 
# 9043
return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, __P, (__mmask16)__U); 
# 9046
} 
# 9049
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 9050
_mm512_mask_cmp_epu64_mask(__mmask8 __U, __m512i __X, __m512i __Y, const int 
# 9051
__P) 
# 9052
{ 
# 9053
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, __P, (__mmask8)__U); 
# 9056
} 
# 9059
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 9060
_mm512_mask_cmp_epu32_mask(__mmask16 __U, __m512i __X, __m512i __Y, const int 
# 9061
__P) 
# 9062
{ 
# 9063
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, __P, (__mmask16)__U); 
# 9066
} 
# 9069
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 9070
_mm512_mask_cmp_round_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y, const int 
# 9071
__P, const int __R) 
# 9072
{ 
# 9073
return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, __P, (__mmask8)__U, __R); 
# 9076
} 
# 9079
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 9080
_mm512_mask_cmp_round_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y, const int 
# 9081
__P, const int __R) 
# 9082
{ 
# 9083
return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y, __P, (__mmask16)__U, __R); 
# 9086
} 
# 9089
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 9090
_mm_cmp_round_sd_mask(__m128d __X, __m128d __Y, const int __P, const int __R) 
# 9091
{ 
# 9092
return (__mmask8)__builtin_ia32_cmpsd_mask((__v2df)__X, (__v2df)__Y, __P, (__mmask8)(-1), __R); 
# 9095
} 
# 9098
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 9099
_mm_mask_cmp_round_sd_mask(__mmask8 __M, __m128d __X, __m128d __Y, const int 
# 9100
__P, const int __R) 
# 9101
{ 
# 9102
return (__mmask8)__builtin_ia32_cmpsd_mask((__v2df)__X, (__v2df)__Y, __P, (__mmask8)__M, __R); 
# 9105
} 
# 9108
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 9109
_mm_cmp_round_ss_mask(__m128 __X, __m128 __Y, const int __P, const int __R) 
# 9110
{ 
# 9111
return (__mmask8)__builtin_ia32_cmpss_mask((__v4sf)__X, (__v4sf)__Y, __P, (__mmask8)(-1), __R); 
# 9114
} 
# 9117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 9118
_mm_mask_cmp_round_ss_mask(__mmask8 __M, __m128 __X, __m128 __Y, const int 
# 9119
__P, const int __R) 
# 9120
{ 
# 9121
return (__mmask8)__builtin_ia32_cmpss_mask((__v4sf)__X, (__v4sf)__Y, __P, (__mmask8)__M, __R); 
# 9124
} 
# 9210
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 9211
_mm512_i32gather_ps(__m512i __index, const float *__addr, int __scale) 
# 9212
{ 
# 9213
__m512 v1_old = _mm512_undefined_ps(); 
# 9214
__mmask16 mask = (65535); 
# 9216
return (__m512)__builtin_ia32_gathersiv16sf((__v16sf)v1_old, __addr, (__v16si)__index, mask, __scale); 
# 9220
} 
# 9223
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 9224
_mm512_mask_i32gather_ps(__m512 v1_old, __mmask16 __mask, __m512i 
# 9225
__index, const float *__addr, int __scale) 
# 9226
{ 
# 9227
return (__m512)__builtin_ia32_gathersiv16sf((__v16sf)v1_old, __addr, (__v16si)__index, __mask, __scale); 
# 9231
} 
# 9234
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9235
_mm512_i32gather_pd(__m256i __index, const double *__addr, int __scale) 
# 9236
{ 
# 9237
__m512d v1_old = _mm512_undefined_pd(); 
# 9238
__mmask8 mask = (255); 
# 9240
return (__m512d)__builtin_ia32_gathersiv8df((__v8df)v1_old, __addr, (__v8si)__index, mask, __scale); 
# 9244
} 
# 9247
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9248
_mm512_mask_i32gather_pd(__m512d __v1_old, __mmask8 __mask, __m256i 
# 9249
__index, const double *__addr, int __scale) 
# 9250
{ 
# 9251
return (__m512d)__builtin_ia32_gathersiv8df((__v8df)__v1_old, __addr, (__v8si)__index, __mask, __scale); 
# 9255
} 
# 9258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9259
_mm512_i64gather_ps(__m512i __index, const float *__addr, int __scale) 
# 9260
{ 
# 9261
__m256 v1_old = _mm256_undefined_ps(); 
# 9262
__mmask8 mask = (255); 
# 9264
return (__m256)__builtin_ia32_gatherdiv16sf((__v8sf)v1_old, __addr, (__v8di)__index, mask, __scale); 
# 9268
} 
# 9271
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9272
_mm512_mask_i64gather_ps(__m256 __v1_old, __mmask8 __mask, __m512i 
# 9273
__index, const float *__addr, int __scale) 
# 9274
{ 
# 9275
return (__m256)__builtin_ia32_gatherdiv16sf((__v8sf)__v1_old, __addr, (__v8di)__index, __mask, __scale); 
# 9279
} 
# 9282
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9283
_mm512_i64gather_pd(__m512i __index, const double *__addr, int __scale) 
# 9284
{ 
# 9285
__m512d v1_old = _mm512_undefined_pd(); 
# 9286
__mmask8 mask = (255); 
# 9288
return (__m512d)__builtin_ia32_gatherdiv8df((__v8df)v1_old, __addr, (__v8di)__index, mask, __scale); 
# 9292
} 
# 9295
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9296
_mm512_mask_i64gather_pd(__m512d __v1_old, __mmask8 __mask, __m512i 
# 9297
__index, const double *__addr, int __scale) 
# 9298
{ 
# 9299
return (__m512d)__builtin_ia32_gatherdiv8df((__v8df)__v1_old, __addr, (__v8di)__index, __mask, __scale); 
# 9303
} 
# 9306
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9307
_mm512_i32gather_epi32(__m512i __index, const int *__addr, int __scale) 
# 9308
{ 
# 9309
__m512i v1_old = _mm512_undefined_si512(); 
# 9310
__mmask16 mask = (65535); 
# 9312
return (__m512i)__builtin_ia32_gathersiv16si((__v16si)v1_old, __addr, (__v16si)__index, mask, __scale); 
# 9316
} 
# 9319
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9320
_mm512_mask_i32gather_epi32(__m512i __v1_old, __mmask16 __mask, __m512i 
# 9321
__index, const int *__addr, int __scale) 
# 9322
{ 
# 9323
return (__m512i)__builtin_ia32_gathersiv16si((__v16si)__v1_old, __addr, (__v16si)__index, __mask, __scale); 
# 9327
} 
# 9330
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9331
_mm512_i32gather_epi64(__m256i __index, const long long *__addr, int __scale) 
# 9332
{ 
# 9333
__m512i v1_old = _mm512_undefined_si512(); 
# 9334
__mmask8 mask = (255); 
# 9336
return (__m512i)__builtin_ia32_gathersiv8di((__v8di)v1_old, __addr, (__v8si)__index, mask, __scale); 
# 9340
} 
# 9343
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9344
_mm512_mask_i32gather_epi64(__m512i __v1_old, __mmask8 __mask, __m256i 
# 9345
__index, const long long *__addr, int 
# 9346
__scale) 
# 9347
{ 
# 9348
return (__m512i)__builtin_ia32_gathersiv8di((__v8di)__v1_old, __addr, (__v8si)__index, __mask, __scale); 
# 9352
} 
# 9355
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9356
_mm512_i64gather_epi32(__m512i __index, const int *__addr, int __scale) 
# 9357
{ 
# 9358
__m256i v1_old = _mm256_undefined_si256(); 
# 9359
__mmask8 mask = (255); 
# 9361
return (__m256i)__builtin_ia32_gatherdiv16si((__v8si)v1_old, __addr, (__v8di)__index, mask, __scale); 
# 9365
} 
# 9368
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9369
_mm512_mask_i64gather_epi32(__m256i __v1_old, __mmask8 __mask, __m512i 
# 9370
__index, const int *__addr, int __scale) 
# 9371
{ 
# 9372
return (__m256i)__builtin_ia32_gatherdiv16si((__v8si)__v1_old, __addr, (__v8di)__index, __mask, __scale); 
# 9376
} 
# 9379
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9380
_mm512_i64gather_epi64(__m512i __index, const long long *__addr, int __scale) 
# 9381
{ 
# 9382
__m512i v1_old = _mm512_undefined_si512(); 
# 9383
__mmask8 mask = (255); 
# 9385
return (__m512i)__builtin_ia32_gatherdiv8di((__v8di)v1_old, __addr, (__v8di)__index, mask, __scale); 
# 9389
} 
# 9392
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9393
_mm512_mask_i64gather_epi64(__m512i __v1_old, __mmask8 __mask, __m512i 
# 9394
__index, const long long *__addr, int 
# 9395
__scale) 
# 9396
{ 
# 9397
return (__m512i)__builtin_ia32_gatherdiv8di((__v8di)__v1_old, __addr, (__v8di)__index, __mask, __scale); 
# 9401
} 
# 9404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9405
_mm512_i32scatter_ps(float *__addr, __m512i __index, __m512 __v1, int __scale) 
# 9406
{ 
# 9407
__builtin_ia32_scattersiv16sf(__addr, (__mmask16)65535, (__v16si)__index, (__v16sf)__v1, __scale); 
# 9409
} 
# 9412
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9413
_mm512_mask_i32scatter_ps(float *__addr, __mmask16 __mask, __m512i 
# 9414
__index, __m512 __v1, int __scale) 
# 9415
{ 
# 9416
__builtin_ia32_scattersiv16sf(__addr, __mask, (__v16si)__index, (__v16sf)__v1, __scale); 
# 9418
} 
# 9421
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9422
_mm512_i32scatter_pd(double *__addr, __m256i __index, __m512d __v1, int 
# 9423
__scale) 
# 9424
{ 
# 9425
__builtin_ia32_scattersiv8df(__addr, (__mmask8)255, (__v8si)__index, (__v8df)__v1, __scale); 
# 9427
} 
# 9430
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9431
_mm512_mask_i32scatter_pd(double *__addr, __mmask8 __mask, __m256i 
# 9432
__index, __m512d __v1, int __scale) 
# 9433
{ 
# 9434
__builtin_ia32_scattersiv8df(__addr, __mask, (__v8si)__index, (__v8df)__v1, __scale); 
# 9436
} 
# 9439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9440
_mm512_i64scatter_ps(float *__addr, __m512i __index, __m256 __v1, int __scale) 
# 9441
{ 
# 9442
__builtin_ia32_scatterdiv16sf(__addr, (__mmask8)255, (__v8di)__index, (__v8sf)__v1, __scale); 
# 9444
} 
# 9447
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9448
_mm512_mask_i64scatter_ps(float *__addr, __mmask8 __mask, __m512i 
# 9449
__index, __m256 __v1, int __scale) 
# 9450
{ 
# 9451
__builtin_ia32_scatterdiv16sf(__addr, __mask, (__v8di)__index, (__v8sf)__v1, __scale); 
# 9453
} 
# 9456
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9457
_mm512_i64scatter_pd(double *__addr, __m512i __index, __m512d __v1, int 
# 9458
__scale) 
# 9459
{ 
# 9460
__builtin_ia32_scatterdiv8df(__addr, (__mmask8)255, (__v8di)__index, (__v8df)__v1, __scale); 
# 9462
} 
# 9465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9466
_mm512_mask_i64scatter_pd(double *__addr, __mmask8 __mask, __m512i 
# 9467
__index, __m512d __v1, int __scale) 
# 9468
{ 
# 9469
__builtin_ia32_scatterdiv8df(__addr, __mask, (__v8di)__index, (__v8df)__v1, __scale); 
# 9471
} 
# 9474
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9475
_mm512_i32scatter_epi32(int *__addr, __m512i __index, __m512i 
# 9476
__v1, int __scale) 
# 9477
{ 
# 9478
__builtin_ia32_scattersiv16si(__addr, (__mmask16)65535, (__v16si)__index, (__v16si)__v1, __scale); 
# 9480
} 
# 9483
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9484
_mm512_mask_i32scatter_epi32(int *__addr, __mmask16 __mask, __m512i 
# 9485
__index, __m512i __v1, int __scale) 
# 9486
{ 
# 9487
__builtin_ia32_scattersiv16si(__addr, __mask, (__v16si)__index, (__v16si)__v1, __scale); 
# 9489
} 
# 9492
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9493
_mm512_i32scatter_epi64(long long *__addr, __m256i __index, __m512i 
# 9494
__v1, int __scale) 
# 9495
{ 
# 9496
__builtin_ia32_scattersiv8di(__addr, (__mmask8)255, (__v8si)__index, (__v8di)__v1, __scale); 
# 9498
} 
# 9501
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9502
_mm512_mask_i32scatter_epi64(long long *__addr, __mmask8 __mask, __m256i 
# 9503
__index, __m512i __v1, int __scale) 
# 9504
{ 
# 9505
__builtin_ia32_scattersiv8di(__addr, __mask, (__v8si)__index, (__v8di)__v1, __scale); 
# 9507
} 
# 9510
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9511
_mm512_i64scatter_epi32(int *__addr, __m512i __index, __m256i 
# 9512
__v1, int __scale) 
# 9513
{ 
# 9514
__builtin_ia32_scatterdiv16si(__addr, (__mmask8)255, (__v8di)__index, (__v8si)__v1, __scale); 
# 9516
} 
# 9519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9520
_mm512_mask_i64scatter_epi32(int *__addr, __mmask8 __mask, __m512i 
# 9521
__index, __m256i __v1, int __scale) 
# 9522
{ 
# 9523
__builtin_ia32_scatterdiv16si(__addr, __mask, (__v8di)__index, (__v8si)__v1, __scale); 
# 9525
} 
# 9528
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9529
_mm512_i64scatter_epi64(long long *__addr, __m512i __index, __m512i 
# 9530
__v1, int __scale) 
# 9531
{ 
# 9532
__builtin_ia32_scatterdiv8di(__addr, (__mmask8)255, (__v8di)__index, (__v8di)__v1, __scale); 
# 9534
} 
# 9537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9538
_mm512_mask_i64scatter_epi64(long long *__addr, __mmask8 __mask, __m512i 
# 9539
__index, __m512i __v1, int __scale) 
# 9540
{ 
# 9541
__builtin_ia32_scatterdiv8di(__addr, __mask, (__v8di)__index, (__v8di)__v1, __scale); 
# 9543
} 
# 9723
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9724
_mm512_mask_compress_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 9725
{ 
# 9726
return (__m512d)__builtin_ia32_compressdf512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U); 
# 9729
} 
# 9732
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9733
_mm512_maskz_compress_pd(__mmask8 __U, __m512d __A) 
# 9734
{ 
# 9735
return (__m512d)__builtin_ia32_compressdf512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 9739
} 
# 9742
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9743
_mm512_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m512d __A) 
# 9744
{ 
# 9745
__builtin_ia32_compressstoredf512_mask((__v8df *)__P, (__v8df)__A, (__mmask8)__U); 
# 9747
} 
# 9750
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 9751
_mm512_mask_compress_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 9752
{ 
# 9753
return (__m512)__builtin_ia32_compresssf512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U); 
# 9756
} 
# 9759
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 9760
_mm512_maskz_compress_ps(__mmask16 __U, __m512 __A) 
# 9761
{ 
# 9762
return (__m512)__builtin_ia32_compresssf512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 9766
} 
# 9769
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9770
_mm512_mask_compressstoreu_ps(void *__P, __mmask16 __U, __m512 __A) 
# 9771
{ 
# 9772
__builtin_ia32_compressstoresf512_mask((__v16sf *)__P, (__v16sf)__A, (__mmask16)__U); 
# 9774
} 
# 9777
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9778
_mm512_mask_compress_epi64(__m512i __W, __mmask8 __U, __m512i __A) 
# 9779
{ 
# 9780
return (__m512i)__builtin_ia32_compressdi512_mask((__v8di)__A, (__v8di)__W, (__mmask8)__U); 
# 9783
} 
# 9786
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9787
_mm512_maskz_compress_epi64(__mmask8 __U, __m512i __A) 
# 9788
{ 
# 9789
return (__m512i)__builtin_ia32_compressdi512_mask((__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 9793
} 
# 9796
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9797
_mm512_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m512i __A) 
# 9798
{ 
# 9799
__builtin_ia32_compressstoredi512_mask((__v8di *)__P, (__v8di)__A, (__mmask8)__U); 
# 9801
} 
# 9804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9805
_mm512_mask_compress_epi32(__m512i __W, __mmask16 __U, __m512i __A) 
# 9806
{ 
# 9807
return (__m512i)__builtin_ia32_compresssi512_mask((__v16si)__A, (__v16si)__W, (__mmask16)__U); 
# 9810
} 
# 9813
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9814
_mm512_maskz_compress_epi32(__mmask16 __U, __m512i __A) 
# 9815
{ 
# 9816
return (__m512i)__builtin_ia32_compresssi512_mask((__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 9820
} 
# 9823
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 9824
_mm512_mask_compressstoreu_epi32(void *__P, __mmask16 __U, __m512i __A) 
# 9825
{ 
# 9826
__builtin_ia32_compressstoresi512_mask((__v16si *)__P, (__v16si)__A, (__mmask16)__U); 
# 9828
} 
# 9831
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9832
_mm512_mask_expand_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 9833
{ 
# 9834
return (__m512d)__builtin_ia32_expanddf512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U); 
# 9837
} 
# 9840
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9841
_mm512_maskz_expand_pd(__mmask8 __U, __m512d __A) 
# 9842
{ 
# 9843
return (__m512d)__builtin_ia32_expanddf512_maskz((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 9847
} 
# 9850
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9851
_mm512_mask_expandloadu_pd(__m512d __W, __mmask8 __U, const void *__P) 
# 9852
{ 
# 9853
return (__m512d)__builtin_ia32_expandloaddf512_mask((const __v8df *)__P, (__v8df)__W, (__mmask8)__U); 
# 9856
} 
# 9859
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 9860
_mm512_maskz_expandloadu_pd(__mmask8 __U, const void *__P) 
# 9861
{ 
# 9862
return (__m512d)__builtin_ia32_expandloaddf512_maskz((const __v8df *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 9866
} 
# 9869
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 9870
_mm512_mask_expand_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 9871
{ 
# 9872
return (__m512)__builtin_ia32_expandsf512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U); 
# 9875
} 
# 9878
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 9879
_mm512_maskz_expand_ps(__mmask16 __U, __m512 __A) 
# 9880
{ 
# 9881
return (__m512)__builtin_ia32_expandsf512_maskz((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 9885
} 
# 9888
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 9889
_mm512_mask_expandloadu_ps(__m512 __W, __mmask16 __U, const void *__P) 
# 9890
{ 
# 9891
return (__m512)__builtin_ia32_expandloadsf512_mask((const __v16sf *)__P, (__v16sf)__W, (__mmask16)__U); 
# 9894
} 
# 9897
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 9898
_mm512_maskz_expandloadu_ps(__mmask16 __U, const void *__P) 
# 9899
{ 
# 9900
return (__m512)__builtin_ia32_expandloadsf512_maskz((const __v16sf *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 9904
} 
# 9907
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9908
_mm512_mask_expand_epi64(__m512i __W, __mmask8 __U, __m512i __A) 
# 9909
{ 
# 9910
return (__m512i)__builtin_ia32_expanddi512_mask((__v8di)__A, (__v8di)__W, (__mmask8)__U); 
# 9913
} 
# 9916
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9917
_mm512_maskz_expand_epi64(__mmask8 __U, __m512i __A) 
# 9918
{ 
# 9919
return (__m512i)__builtin_ia32_expanddi512_maskz((__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 9923
} 
# 9926
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9927
_mm512_mask_expandloadu_epi64(__m512i __W, __mmask8 __U, const void *__P) 
# 9928
{ 
# 9929
return (__m512i)__builtin_ia32_expandloaddi512_mask((const __v8di *)__P, (__v8di)__W, (__mmask8)__U); 
# 9932
} 
# 9935
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9936
_mm512_maskz_expandloadu_epi64(__mmask8 __U, const void *__P) 
# 9937
{ 
# 9938
return (__m512i)__builtin_ia32_expandloaddi512_maskz((const __v8di *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 9943
} 
# 9946
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9947
_mm512_mask_expand_epi32(__m512i __W, __mmask16 __U, __m512i __A) 
# 9948
{ 
# 9949
return (__m512i)__builtin_ia32_expandsi512_mask((__v16si)__A, (__v16si)__W, (__mmask16)__U); 
# 9952
} 
# 9955
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9956
_mm512_maskz_expand_epi32(__mmask16 __U, __m512i __A) 
# 9957
{ 
# 9958
return (__m512i)__builtin_ia32_expandsi512_maskz((__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 9962
} 
# 9965
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9966
_mm512_mask_expandloadu_epi32(__m512i __W, __mmask16 __U, const void *__P) 
# 9967
{ 
# 9968
return (__m512i)__builtin_ia32_expandloadsi512_mask((const __v16si *)__P, (__v16si)__W, (__mmask16)__U); 
# 9971
} 
# 9974
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 9975
_mm512_maskz_expandloadu_epi32(__mmask16 __U, const void *__P) 
# 9976
{ 
# 9977
return (__m512i)__builtin_ia32_expandloadsi512_maskz((const __v16si *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 9981
} 
# 9985
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 9986
_mm512_kand(__mmask16 __A, __mmask16 __B) 
# 9987
{ 
# 9988
return (__mmask16)__builtin_ia32_kandhi((__mmask16)__A, (__mmask16)__B); 
# 9989
} 
# 9992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 9993
_mm512_kandn(__mmask16 __A, __mmask16 __B) 
# 9994
{ 
# 9995
return (__mmask16)__builtin_ia32_kandnhi((__mmask16)__A, (__mmask16)__B); 
# 9996
} 
# 9999
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 10000
_mm512_kor(__mmask16 __A, __mmask16 __B) 
# 10001
{ 
# 10002
return (__mmask16)__builtin_ia32_korhi((__mmask16)__A, (__mmask16)__B); 
# 10003
} 
# 10006
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 10007
_mm512_kortestz(__mmask16 __A, __mmask16 __B) 
# 10008
{ 
# 10009
return (__mmask16)__builtin_ia32_kortestzhi((__mmask16)__A, (__mmask16)__B); 
# 10011
} 
# 10014
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 10015
_mm512_kortestc(__mmask16 __A, __mmask16 __B) 
# 10016
{ 
# 10017
return (__mmask16)__builtin_ia32_kortestchi((__mmask16)__A, (__mmask16)__B); 
# 10019
} 
# 10022
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 10023
_mm512_kxnor(__mmask16 __A, __mmask16 __B) 
# 10024
{ 
# 10025
return (__mmask16)__builtin_ia32_kxnorhi((__mmask16)__A, (__mmask16)__B); 
# 10026
} 
# 10029
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 10030
_mm512_kxor(__mmask16 __A, __mmask16 __B) 
# 10031
{ 
# 10032
return (__mmask16)__builtin_ia32_kxorhi((__mmask16)__A, (__mmask16)__B); 
# 10033
} 
# 10036
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 10037
_mm512_knot(__mmask16 __A) 
# 10038
{ 
# 10039
return (__mmask16)__builtin_ia32_knothi((__mmask16)__A); 
# 10040
} 
# 10043
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 10044
_mm512_kunpackb(__mmask16 __A, __mmask16 __B) 
# 10045
{ 
# 10046
return (__mmask16)__builtin_ia32_kunpckhi((__mmask16)__A, (__mmask16)__B); 
# 10047
} 
# 10051
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10052
_mm512_maskz_inserti32x4(__mmask16 __B, __m512i __C, __m128i __D, const int 
# 10053
__imm) 
# 10054
{ 
# 10055
return (__m512i)__builtin_ia32_inserti32x4_mask((__v16si)__C, (__v4si)__D, __imm, (__v16si)_mm512_setzero_si512(), __B); 
# 10061
} 
# 10064
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10065
_mm512_maskz_insertf32x4(__mmask16 __B, __m512 __C, __m128 __D, const int 
# 10066
__imm) 
# 10067
{ 
# 10068
return (__m512)__builtin_ia32_insertf32x4_mask((__v16sf)__C, (__v4sf)__D, __imm, (__v16sf)_mm512_setzero_ps(), __B); 
# 10073
} 
# 10076
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10077
_mm512_mask_inserti32x4(__m512i __A, __mmask16 __B, __m512i __C, __m128i 
# 10078
__D, const int __imm) 
# 10079
{ 
# 10080
return (__m512i)__builtin_ia32_inserti32x4_mask((__v16si)__C, (__v4si)__D, __imm, (__v16si)__A, __B); 
# 10085
} 
# 10088
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10089
_mm512_mask_insertf32x4(__m512 __A, __mmask16 __B, __m512 __C, __m128 
# 10090
__D, const int __imm) 
# 10091
{ 
# 10092
return (__m512)__builtin_ia32_insertf32x4_mask((__v16sf)__C, (__v4sf)__D, __imm, (__v16sf)__A, __B); 
# 10096
} 
# 10120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10121
_mm512_max_epi64(__m512i __A, __m512i __B) 
# 10122
{ 
# 10123
return (__m512i)__builtin_ia32_pmaxsq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 10128
} 
# 10131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10132
_mm512_maskz_max_epi64(__mmask8 __M, __m512i __A, __m512i __B) 
# 10133
{ 
# 10134
return (__m512i)__builtin_ia32_pmaxsq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M); 
# 10139
} 
# 10142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10143
_mm512_mask_max_epi64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) 
# 10144
{ 
# 10145
return (__m512i)__builtin_ia32_pmaxsq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, __M); 
# 10148
} 
# 10151
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10152
_mm512_min_epi64(__m512i __A, __m512i __B) 
# 10153
{ 
# 10154
return (__m512i)__builtin_ia32_pminsq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 10159
} 
# 10162
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10163
_mm512_mask_min_epi64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) 
# 10164
{ 
# 10165
return (__m512i)__builtin_ia32_pminsq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, __M); 
# 10168
} 
# 10171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10172
_mm512_maskz_min_epi64(__mmask8 __M, __m512i __A, __m512i __B) 
# 10173
{ 
# 10174
return (__m512i)__builtin_ia32_pminsq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M); 
# 10179
} 
# 10182
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10183
_mm512_max_epu64(__m512i __A, __m512i __B) 
# 10184
{ 
# 10185
return (__m512i)__builtin_ia32_pmaxuq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 10190
} 
# 10193
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10194
_mm512_maskz_max_epu64(__mmask8 __M, __m512i __A, __m512i __B) 
# 10195
{ 
# 10196
return (__m512i)__builtin_ia32_pmaxuq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M); 
# 10201
} 
# 10204
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10205
_mm512_mask_max_epu64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) 
# 10206
{ 
# 10207
return (__m512i)__builtin_ia32_pmaxuq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, __M); 
# 10210
} 
# 10213
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10214
_mm512_min_epu64(__m512i __A, __m512i __B) 
# 10215
{ 
# 10216
return (__m512i)__builtin_ia32_pminuq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_si512(), (__mmask8)(-1)); 
# 10221
} 
# 10224
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10225
_mm512_mask_min_epu64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) 
# 10226
{ 
# 10227
return (__m512i)__builtin_ia32_pminuq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, __M); 
# 10230
} 
# 10233
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10234
_mm512_maskz_min_epu64(__mmask8 __M, __m512i __A, __m512i __B) 
# 10235
{ 
# 10236
return (__m512i)__builtin_ia32_pminuq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M); 
# 10241
} 
# 10244
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10245
_mm512_max_epi32(__m512i __A, __m512i __B) 
# 10246
{ 
# 10247
return (__m512i)__builtin_ia32_pmaxsd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 10252
} 
# 10255
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10256
_mm512_maskz_max_epi32(__mmask16 __M, __m512i __A, __m512i __B) 
# 10257
{ 
# 10258
return (__m512i)__builtin_ia32_pmaxsd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M); 
# 10263
} 
# 10266
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10267
_mm512_mask_max_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) 
# 10268
{ 
# 10269
return (__m512i)__builtin_ia32_pmaxsd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, __M); 
# 10272
} 
# 10275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10276
_mm512_min_epi32(__m512i __A, __m512i __B) 
# 10277
{ 
# 10278
return (__m512i)__builtin_ia32_pminsd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 10283
} 
# 10286
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10287
_mm512_maskz_min_epi32(__mmask16 __M, __m512i __A, __m512i __B) 
# 10288
{ 
# 10289
return (__m512i)__builtin_ia32_pminsd512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M); 
# 10294
} 
# 10297
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10298
_mm512_mask_min_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) 
# 10299
{ 
# 10300
return (__m512i)__builtin_ia32_pminsd512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, __M); 
# 10303
} 
# 10306
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10307
_mm512_max_epu32(__m512i __A, __m512i __B) 
# 10308
{ 
# 10309
return (__m512i)__builtin_ia32_pmaxud512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 10314
} 
# 10317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10318
_mm512_maskz_max_epu32(__mmask16 __M, __m512i __A, __m512i __B) 
# 10319
{ 
# 10320
return (__m512i)__builtin_ia32_pmaxud512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M); 
# 10325
} 
# 10328
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10329
_mm512_mask_max_epu32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) 
# 10330
{ 
# 10331
return (__m512i)__builtin_ia32_pmaxud512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, __M); 
# 10334
} 
# 10337
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10338
_mm512_min_epu32(__m512i __A, __m512i __B) 
# 10339
{ 
# 10340
return (__m512i)__builtin_ia32_pminud512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 10345
} 
# 10348
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10349
_mm512_maskz_min_epu32(__mmask16 __M, __m512i __A, __m512i __B) 
# 10350
{ 
# 10351
return (__m512i)__builtin_ia32_pminud512_mask((__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M); 
# 10356
} 
# 10359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10360
_mm512_mask_min_epu32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) 
# 10361
{ 
# 10362
return (__m512i)__builtin_ia32_pminud512_mask((__v16si)__A, (__v16si)__B, (__v16si)__W, __M); 
# 10365
} 
# 10368
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10369
_mm512_unpacklo_ps(__m512 __A, __m512 __B) 
# 10370
{ 
# 10371
return (__m512)__builtin_ia32_unpcklps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 10376
} 
# 10379
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10380
_mm512_mask_unpacklo_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 10381
{ 
# 10382
return (__m512)__builtin_ia32_unpcklps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U); 
# 10386
} 
# 10389
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10390
_mm512_maskz_unpacklo_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 10391
{ 
# 10392
return (__m512)__builtin_ia32_unpcklps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 10397
} 
# 10401
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10402
_mm_max_round_sd(__m128d __A, __m128d __B, const int __R) 
# 10403
{ 
# 10404
return (__m128d)__builtin_ia32_maxsd_round((__v2df)__A, (__v2df)__B, __R); 
# 10407
} 
# 10410
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10411
_mm_max_round_ss(__m128 __A, __m128 __B, const int __R) 
# 10412
{ 
# 10413
return (__m128)__builtin_ia32_maxss_round((__v4sf)__A, (__v4sf)__B, __R); 
# 10416
} 
# 10419
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10420
_mm_min_round_sd(__m128d __A, __m128d __B, const int __R) 
# 10421
{ 
# 10422
return (__m128d)__builtin_ia32_minsd_round((__v2df)__A, (__v2df)__B, __R); 
# 10425
} 
# 10428
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10429
_mm_min_round_ss(__m128 __A, __m128 __B, const int __R) 
# 10430
{ 
# 10431
return (__m128)__builtin_ia32_minss_round((__v4sf)__A, (__v4sf)__B, __R); 
# 10434
} 
# 10451
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10452
_mm512_mask_blend_pd(__mmask8 __U, __m512d __A, __m512d __W) 
# 10453
{ 
# 10454
return (__m512d)__builtin_ia32_blendmpd_512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U); 
# 10457
} 
# 10460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10461
_mm512_mask_blend_ps(__mmask16 __U, __m512 __A, __m512 __W) 
# 10462
{ 
# 10463
return (__m512)__builtin_ia32_blendmps_512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U); 
# 10466
} 
# 10469
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10470
_mm512_mask_blend_epi64(__mmask8 __U, __m512i __A, __m512i __W) 
# 10471
{ 
# 10472
return (__m512i)__builtin_ia32_blendmq_512_mask((__v8di)__A, (__v8di)__W, (__mmask8)__U); 
# 10475
} 
# 10478
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 10479
_mm512_mask_blend_epi32(__mmask16 __U, __m512i __A, __m512i __W) 
# 10480
{ 
# 10481
return (__m512i)__builtin_ia32_blendmd_512_mask((__v16si)__A, (__v16si)__W, (__mmask16)__U); 
# 10484
} 
# 10488
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10489
_mm_fmadd_round_sd(__m128d __W, __m128d __A, __m128d __B, const int __R) 
# 10490
{ 
# 10491
return (__m128d)__builtin_ia32_vfmaddsd3_round((__v2df)__W, (__v2df)__A, (__v2df)__B, __R); 
# 10495
} 
# 10498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10499
_mm_fmadd_round_ss(__m128 __W, __m128 __A, __m128 __B, const int __R) 
# 10500
{ 
# 10501
return (__m128)__builtin_ia32_vfmaddss3_round((__v4sf)__W, (__v4sf)__A, (__v4sf)__B, __R); 
# 10505
} 
# 10508
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10509
_mm_fmsub_round_sd(__m128d __W, __m128d __A, __m128d __B, const int __R) 
# 10510
{ 
# 10511
return (__m128d)__builtin_ia32_vfmaddsd3_round((__v2df)__W, (__v2df)__A, -((__v2df)__B), __R); 
# 10515
} 
# 10518
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10519
_mm_fmsub_round_ss(__m128 __W, __m128 __A, __m128 __B, const int __R) 
# 10520
{ 
# 10521
return (__m128)__builtin_ia32_vfmaddss3_round((__v4sf)__W, (__v4sf)__A, -((__v4sf)__B), __R); 
# 10525
} 
# 10528
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10529
_mm_fnmadd_round_sd(__m128d __W, __m128d __A, __m128d __B, const int __R) 
# 10530
{ 
# 10531
return (__m128d)__builtin_ia32_vfmaddsd3_round((__v2df)__W, -((__v2df)__A), (__v2df)__B, __R); 
# 10535
} 
# 10538
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10539
_mm_fnmadd_round_ss(__m128 __W, __m128 __A, __m128 __B, const int __R) 
# 10540
{ 
# 10541
return (__m128)__builtin_ia32_vfmaddss3_round((__v4sf)__W, -((__v4sf)__A), (__v4sf)__B, __R); 
# 10545
} 
# 10548
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10549
_mm_fnmsub_round_sd(__m128d __W, __m128d __A, __m128d __B, const int __R) 
# 10550
{ 
# 10551
return (__m128d)__builtin_ia32_vfmaddsd3_round((__v2df)__W, -((__v2df)__A), -((__v2df)__B), __R); 
# 10555
} 
# 10558
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10559
_mm_fnmsub_round_ss(__m128 __W, __m128 __A, __m128 __B, const int __R) 
# 10560
{ 
# 10561
return (__m128)__builtin_ia32_vfmaddss3_round((__v4sf)__W, -((__v4sf)__A), -((__v4sf)__B), __R); 
# 10565
} 
# 10594
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 10595
_mm_comi_round_ss(__m128 __A, __m128 __B, const int __P, const int __R) 
# 10596
{ 
# 10597
return __builtin_ia32_vcomiss((__v4sf)__A, (__v4sf)__B, __P, __R); 
# 10598
} 
# 10601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 10602
_mm_comi_round_sd(__m128d __A, __m128d __B, const int __P, const int __R) 
# 10603
{ 
# 10604
return __builtin_ia32_vcomisd((__v2df)__A, (__v2df)__B, __P, __R); 
# 10605
} 
# 10614
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10615
_mm512_sqrt_pd(__m512d __A) 
# 10616
{ 
# 10617
return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), 4); 
# 10622
} 
# 10625
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10626
_mm512_mask_sqrt_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 10627
{ 
# 10628
return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U, 4); 
# 10632
} 
# 10635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10636
_mm512_maskz_sqrt_pd(__mmask8 __U, __m512d __A) 
# 10637
{ 
# 10638
return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 10643
} 
# 10646
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10647
_mm512_sqrt_ps(__m512 __A) 
# 10648
{ 
# 10649
return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 10654
} 
# 10657
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10658
_mm512_mask_sqrt_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 10659
{ 
# 10660
return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U, 4); 
# 10664
} 
# 10667
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10668
_mm512_maskz_sqrt_ps(__mmask16 __U, __m512 __A) 
# 10669
{ 
# 10670
return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 10675
} 
# 10678
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10679
_mm512_add_pd(__m512d __A, __m512d __B) 
# 10680
{ 
# 10681
return (__m512d)(((__v8df)__A) + ((__v8df)__B)); 
# 10682
} 
# 10685
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10686
_mm512_mask_add_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 10687
{ 
# 10688
return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 4); 
# 10693
} 
# 10696
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10697
_mm512_maskz_add_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 10698
{ 
# 10699
return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 10705
} 
# 10708
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10709
_mm512_add_ps(__m512 __A, __m512 __B) 
# 10710
{ 
# 10711
return (__m512)(((__v16sf)__A) + ((__v16sf)__B)); 
# 10712
} 
# 10715
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10716
_mm512_mask_add_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 10717
{ 
# 10718
return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 4); 
# 10723
} 
# 10726
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10727
_mm512_maskz_add_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 10728
{ 
# 10729
return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 10735
} 
# 10738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10739
_mm512_sub_pd(__m512d __A, __m512d __B) 
# 10740
{ 
# 10741
return (__m512d)(((__v8df)__A) - ((__v8df)__B)); 
# 10742
} 
# 10745
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10746
_mm512_mask_sub_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 10747
{ 
# 10748
return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 4); 
# 10753
} 
# 10756
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10757
_mm512_maskz_sub_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 10758
{ 
# 10759
return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 10765
} 
# 10768
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10769
_mm512_sub_ps(__m512 __A, __m512 __B) 
# 10770
{ 
# 10771
return (__m512)(((__v16sf)__A) - ((__v16sf)__B)); 
# 10772
} 
# 10775
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10776
_mm512_mask_sub_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 10777
{ 
# 10778
return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 4); 
# 10783
} 
# 10786
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10787
_mm512_maskz_sub_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 10788
{ 
# 10789
return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 10795
} 
# 10798
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10799
_mm512_mul_pd(__m512d __A, __m512d __B) 
# 10800
{ 
# 10801
return (__m512d)(((__v8df)__A) * ((__v8df)__B)); 
# 10802
} 
# 10805
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10806
_mm512_mask_mul_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 10807
{ 
# 10808
return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 4); 
# 10813
} 
# 10816
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10817
_mm512_maskz_mul_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 10818
{ 
# 10819
return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 10825
} 
# 10828
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10829
_mm512_mul_ps(__m512 __A, __m512 __B) 
# 10830
{ 
# 10831
return (__m512)(((__v16sf)__A) * ((__v16sf)__B)); 
# 10832
} 
# 10835
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10836
_mm512_mask_mul_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 10837
{ 
# 10838
return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 4); 
# 10843
} 
# 10846
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10847
_mm512_maskz_mul_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 10848
{ 
# 10849
return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 10855
} 
# 10858
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10859
_mm512_div_pd(__m512d __M, __m512d __V) 
# 10860
{ 
# 10861
return (__m512d)(((__v8df)__M) / ((__v8df)__V)); 
# 10862
} 
# 10865
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10866
_mm512_mask_div_pd(__m512d __W, __mmask8 __U, __m512d __M, __m512d __V) 
# 10867
{ 
# 10868
return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V, (__v8df)__W, (__mmask8)__U, 4); 
# 10873
} 
# 10876
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10877
_mm512_maskz_div_pd(__mmask8 __U, __m512d __M, __m512d __V) 
# 10878
{ 
# 10879
return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 10885
} 
# 10888
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10889
_mm512_div_ps(__m512 __A, __m512 __B) 
# 10890
{ 
# 10891
return (__m512)(((__v16sf)__A) / ((__v16sf)__B)); 
# 10892
} 
# 10895
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10896
_mm512_mask_div_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 10897
{ 
# 10898
return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 4); 
# 10903
} 
# 10906
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10907
_mm512_maskz_div_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 10908
{ 
# 10909
return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 10915
} 
# 10918
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10919
_mm512_max_pd(__m512d __A, __m512d __B) 
# 10920
{ 
# 10921
return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), 4); 
# 10927
} 
# 10930
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10931
_mm512_mask_max_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 10932
{ 
# 10933
return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 4); 
# 10938
} 
# 10941
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10942
_mm512_maskz_max_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 10943
{ 
# 10944
return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 10950
} 
# 10953
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10954
_mm512_max_ps(__m512 __A, __m512 __B) 
# 10955
{ 
# 10956
return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 10962
} 
# 10965
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10966
_mm512_mask_max_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 10967
{ 
# 10968
return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 4); 
# 10973
} 
# 10976
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 10977
_mm512_maskz_max_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 10978
{ 
# 10979
return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 10985
} 
# 10988
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 10989
_mm512_min_pd(__m512d __A, __m512d __B) 
# 10990
{ 
# 10991
return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), 4); 
# 10997
} 
# 11000
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11001
_mm512_mask_min_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 11002
{ 
# 11003
return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 4); 
# 11008
} 
# 11011
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11012
_mm512_maskz_min_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 11013
{ 
# 11014
return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 11020
} 
# 11023
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11024
_mm512_min_ps(__m512 __A, __m512 __B) 
# 11025
{ 
# 11026
return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 11032
} 
# 11035
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11036
_mm512_mask_min_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 11037
{ 
# 11038
return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 4); 
# 11043
} 
# 11046
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11047
_mm512_maskz_min_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 11048
{ 
# 11049
return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 11055
} 
# 11058
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11059
_mm512_scalef_pd(__m512d __A, __m512d __B) 
# 11060
{ 
# 11061
return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), 4); 
# 11067
} 
# 11070
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11071
_mm512_mask_scalef_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 11072
{ 
# 11073
return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 4); 
# 11078
} 
# 11081
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11082
_mm512_maskz_scalef_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 11083
{ 
# 11084
return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 11090
} 
# 11093
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11094
_mm512_scalef_ps(__m512 __A, __m512 __B) 
# 11095
{ 
# 11096
return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 11102
} 
# 11105
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11106
_mm512_mask_scalef_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 11107
{ 
# 11108
return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 4); 
# 11113
} 
# 11116
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11117
_mm512_maskz_scalef_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 11118
{ 
# 11119
return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 11125
} 
# 11128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 11129
_mm_scalef_sd(__m128d __A, __m128d __B) 
# 11130
{ 
# 11131
return (__m128d)__builtin_ia32_scalefsd_round((__v2df)__A, (__v2df)__B, 4); 
# 11134
} 
# 11137
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 11138
_mm_scalef_ss(__m128 __A, __m128 __B) 
# 11139
{ 
# 11140
return (__m128)__builtin_ia32_scalefss_round((__v4sf)__A, (__v4sf)__B, 4); 
# 11143
} 
# 11146
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11147
_mm512_fmadd_pd(__m512d __A, __m512d __B, __m512d __C) 
# 11148
{ 
# 11149
return (__m512d)__builtin_ia32_vfmaddpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)(-1), 4); 
# 11154
} 
# 11157
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11158
_mm512_mask_fmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) 
# 11159
{ 
# 11160
return (__m512d)__builtin_ia32_vfmaddpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11165
} 
# 11168
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11169
_mm512_mask3_fmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) 
# 11170
{ 
# 11171
return (__m512d)__builtin_ia32_vfmaddpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11176
} 
# 11179
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11180
_mm512_maskz_fmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) 
# 11181
{ 
# 11182
return (__m512d)__builtin_ia32_vfmaddpd512_maskz((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11187
} 
# 11190
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11191
_mm512_fmadd_ps(__m512 __A, __m512 __B, __m512 __C) 
# 11192
{ 
# 11193
return (__m512)__builtin_ia32_vfmaddps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)(-1), 4); 
# 11198
} 
# 11201
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11202
_mm512_mask_fmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) 
# 11203
{ 
# 11204
return (__m512)__builtin_ia32_vfmaddps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11209
} 
# 11212
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11213
_mm512_mask3_fmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) 
# 11214
{ 
# 11215
return (__m512)__builtin_ia32_vfmaddps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11220
} 
# 11223
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11224
_mm512_maskz_fmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) 
# 11225
{ 
# 11226
return (__m512)__builtin_ia32_vfmaddps512_maskz((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11231
} 
# 11234
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11235
_mm512_fmsub_pd(__m512d __A, __m512d __B, __m512d __C) 
# 11236
{ 
# 11237
return (__m512d)__builtin_ia32_vfmaddpd512_mask((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)(-1), 4); 
# 11242
} 
# 11245
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11246
_mm512_mask_fmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) 
# 11247
{ 
# 11248
return (__m512d)__builtin_ia32_vfmaddpd512_mask((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)__U, 4); 
# 11253
} 
# 11256
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11257
_mm512_mask3_fmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) 
# 11258
{ 
# 11259
return (__m512d)__builtin_ia32_vfmsubpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11264
} 
# 11267
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11268
_mm512_maskz_fmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) 
# 11269
{ 
# 11270
return (__m512d)__builtin_ia32_vfmaddpd512_maskz((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)__U, 4); 
# 11275
} 
# 11278
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11279
_mm512_fmsub_ps(__m512 __A, __m512 __B, __m512 __C) 
# 11280
{ 
# 11281
return (__m512)__builtin_ia32_vfmaddps512_mask((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)(-1), 4); 
# 11286
} 
# 11289
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11290
_mm512_mask_fmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) 
# 11291
{ 
# 11292
return (__m512)__builtin_ia32_vfmaddps512_mask((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, 4); 
# 11297
} 
# 11300
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11301
_mm512_mask3_fmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) 
# 11302
{ 
# 11303
return (__m512)__builtin_ia32_vfmsubps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11308
} 
# 11311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11312
_mm512_maskz_fmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) 
# 11313
{ 
# 11314
return (__m512)__builtin_ia32_vfmaddps512_maskz((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, 4); 
# 11319
} 
# 11322
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11323
_mm512_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C) 
# 11324
{ 
# 11325
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)(-1), 4); 
# 11330
} 
# 11333
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11334
_mm512_mask_fmaddsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) 
# 11335
{ 
# 11336
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11341
} 
# 11344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11345
_mm512_mask3_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) 
# 11346
{ 
# 11347
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11352
} 
# 11355
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11356
_mm512_maskz_fmaddsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) 
# 11357
{ 
# 11358
return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11363
} 
# 11366
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11367
_mm512_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C) 
# 11368
{ 
# 11369
return (__m512)__builtin_ia32_vfmaddsubps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)(-1), 4); 
# 11374
} 
# 11377
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11378
_mm512_mask_fmaddsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) 
# 11379
{ 
# 11380
return (__m512)__builtin_ia32_vfmaddsubps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11385
} 
# 11388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11389
_mm512_mask3_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) 
# 11390
{ 
# 11391
return (__m512)__builtin_ia32_vfmaddsubps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11396
} 
# 11399
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11400
_mm512_maskz_fmaddsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) 
# 11401
{ 
# 11402
return (__m512)__builtin_ia32_vfmaddsubps512_maskz((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11407
} 
# 11410
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11411
_mm512_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C) 
# 11412
{ 
# 11413
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)(-1), 4); 
# 11418
} 
# 11421
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11422
_mm512_mask_fmsubadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) 
# 11423
{ 
# 11424
return (__m512d)__builtin_ia32_vfmaddsubpd512_mask((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)__U, 4); 
# 11429
} 
# 11432
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11433
_mm512_mask3_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) 
# 11434
{ 
# 11435
return (__m512d)__builtin_ia32_vfmsubaddpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11440
} 
# 11443
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11444
_mm512_maskz_fmsubadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) 
# 11445
{ 
# 11446
return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz((__v8df)__A, (__v8df)__B, -((__v8df)__C), (__mmask8)__U, 4); 
# 11451
} 
# 11454
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11455
_mm512_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C) 
# 11456
{ 
# 11457
return (__m512)__builtin_ia32_vfmaddsubps512_mask((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)(-1), 4); 
# 11462
} 
# 11465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11466
_mm512_mask_fmsubadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) 
# 11467
{ 
# 11468
return (__m512)__builtin_ia32_vfmaddsubps512_mask((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, 4); 
# 11473
} 
# 11476
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11477
_mm512_mask3_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) 
# 11478
{ 
# 11479
return (__m512)__builtin_ia32_vfmsubaddps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11484
} 
# 11487
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11488
_mm512_maskz_fmsubadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) 
# 11489
{ 
# 11490
return (__m512)__builtin_ia32_vfmaddsubps512_maskz((__v16sf)__A, (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, 4); 
# 11495
} 
# 11498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11499
_mm512_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C) 
# 11500
{ 
# 11501
return (__m512d)__builtin_ia32_vfmaddpd512_mask(-((__v8df)__A), (__v8df)__B, (__v8df)__C, (__mmask8)(-1), 4); 
# 11506
} 
# 11509
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11510
_mm512_mask_fnmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) 
# 11511
{ 
# 11512
return (__m512d)__builtin_ia32_vfnmaddpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11517
} 
# 11520
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11521
_mm512_mask3_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) 
# 11522
{ 
# 11523
return (__m512d)__builtin_ia32_vfmaddpd512_mask3(-((__v8df)__A), (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11528
} 
# 11531
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11532
_mm512_maskz_fnmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) 
# 11533
{ 
# 11534
return (__m512d)__builtin_ia32_vfmaddpd512_maskz(-((__v8df)__A), (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11539
} 
# 11542
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11543
_mm512_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C) 
# 11544
{ 
# 11545
return (__m512)__builtin_ia32_vfmaddps512_mask(-((__v16sf)__A), (__v16sf)__B, (__v16sf)__C, (__mmask16)(-1), 4); 
# 11550
} 
# 11553
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11554
_mm512_mask_fnmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) 
# 11555
{ 
# 11556
return (__m512)__builtin_ia32_vfnmaddps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11561
} 
# 11564
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11565
_mm512_mask3_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) 
# 11566
{ 
# 11567
return (__m512)__builtin_ia32_vfmaddps512_mask3(-((__v16sf)__A), (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11572
} 
# 11575
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11576
_mm512_maskz_fnmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) 
# 11577
{ 
# 11578
return (__m512)__builtin_ia32_vfmaddps512_maskz(-((__v16sf)__A), (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11583
} 
# 11586
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11587
_mm512_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C) 
# 11588
{ 
# 11589
return (__m512d)__builtin_ia32_vfmaddpd512_mask(-((__v8df)__A), (__v8df)__B, -((__v8df)__C), (__mmask8)(-1), 4); 
# 11594
} 
# 11597
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11598
_mm512_mask_fnmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) 
# 11599
{ 
# 11600
return (__m512d)__builtin_ia32_vfnmsubpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11605
} 
# 11608
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11609
_mm512_mask3_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) 
# 11610
{ 
# 11611
return (__m512d)__builtin_ia32_vfnmsubpd512_mask3((__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 4); 
# 11616
} 
# 11619
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 11620
_mm512_maskz_fnmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) 
# 11621
{ 
# 11622
return (__m512d)__builtin_ia32_vfmaddpd512_maskz(-((__v8df)__A), (__v8df)__B, -((__v8df)__C), (__mmask8)__U, 4); 
# 11627
} 
# 11630
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11631
_mm512_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C) 
# 11632
{ 
# 11633
return (__m512)__builtin_ia32_vfmaddps512_mask(-((__v16sf)__A), (__v16sf)__B, -((__v16sf)__C), (__mmask16)(-1), 4); 
# 11638
} 
# 11641
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11642
_mm512_mask_fnmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) 
# 11643
{ 
# 11644
return (__m512)__builtin_ia32_vfnmsubps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11649
} 
# 11652
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11653
_mm512_mask3_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) 
# 11654
{ 
# 11655
return (__m512)__builtin_ia32_vfnmsubps512_mask3((__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 4); 
# 11660
} 
# 11663
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11664
_mm512_maskz_fnmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) 
# 11665
{ 
# 11666
return (__m512)__builtin_ia32_vfmaddps512_maskz(-((__v16sf)__A), (__v16sf)__B, -((__v16sf)__C), (__mmask16)__U, 4); 
# 11671
} 
# 11674
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11675
_mm512_cvttpd_epi32(__m512d __A) 
# 11676
{ 
# 11677
return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1), 4); 
# 11682
} 
# 11685
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11686
_mm512_mask_cvttpd_epi32(__m256i __W, __mmask8 __U, __m512d __A) 
# 11687
{ 
# 11688
return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)__W, (__mmask8)__U, 4); 
# 11692
} 
# 11695
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11696
_mm512_maskz_cvttpd_epi32(__mmask8 __U, __m512d __A) 
# 11697
{ 
# 11698
return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 4); 
# 11703
} 
# 11706
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11707
_mm512_cvttpd_epu32(__m512d __A) 
# 11708
{ 
# 11709
return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1), 4); 
# 11714
} 
# 11717
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11718
_mm512_mask_cvttpd_epu32(__m256i __W, __mmask8 __U, __m512d __A) 
# 11719
{ 
# 11720
return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)__W, (__mmask8)__U, 4); 
# 11724
} 
# 11727
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11728
_mm512_maskz_cvttpd_epu32(__mmask8 __U, __m512d __A) 
# 11729
{ 
# 11730
return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 4); 
# 11735
} 
# 11738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11739
_mm512_cvtpd_epi32(__m512d __A) 
# 11740
{ 
# 11741
return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1), 4); 
# 11746
} 
# 11749
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11750
_mm512_mask_cvtpd_epi32(__m256i __W, __mmask8 __U, __m512d __A) 
# 11751
{ 
# 11752
return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)__W, (__mmask8)__U, 4); 
# 11756
} 
# 11759
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11760
_mm512_maskz_cvtpd_epi32(__mmask8 __U, __m512d __A) 
# 11761
{ 
# 11762
return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 4); 
# 11767
} 
# 11770
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11771
_mm512_cvtpd_epu32(__m512d __A) 
# 11772
{ 
# 11773
return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1), 4); 
# 11778
} 
# 11781
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11782
_mm512_mask_cvtpd_epu32(__m256i __W, __mmask8 __U, __m512d __A) 
# 11783
{ 
# 11784
return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)__W, (__mmask8)__U, 4); 
# 11788
} 
# 11791
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11792
_mm512_maskz_cvtpd_epu32(__mmask8 __U, __m512d __A) 
# 11793
{ 
# 11794
return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 4); 
# 11799
} 
# 11802
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11803
_mm512_cvttps_epi32(__m512 __A) 
# 11804
{ 
# 11805
return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1), 4); 
# 11810
} 
# 11813
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11814
_mm512_mask_cvttps_epi32(__m512i __W, __mmask16 __U, __m512 __A) 
# 11815
{ 
# 11816
return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)__W, (__mmask16)__U, 4); 
# 11820
} 
# 11823
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11824
_mm512_maskz_cvttps_epi32(__mmask16 __U, __m512 __A) 
# 11825
{ 
# 11826
return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 4); 
# 11831
} 
# 11834
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11835
_mm512_cvttps_epu32(__m512 __A) 
# 11836
{ 
# 11837
return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1), 4); 
# 11842
} 
# 11845
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11846
_mm512_mask_cvttps_epu32(__m512i __W, __mmask16 __U, __m512 __A) 
# 11847
{ 
# 11848
return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)__W, (__mmask16)__U, 4); 
# 11852
} 
# 11855
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11856
_mm512_maskz_cvttps_epu32(__mmask16 __U, __m512 __A) 
# 11857
{ 
# 11858
return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 4); 
# 11863
} 
# 11866
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11867
_mm512_cvtps_epi32(__m512 __A) 
# 11868
{ 
# 11869
return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1), 4); 
# 11874
} 
# 11877
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11878
_mm512_mask_cvtps_epi32(__m512i __W, __mmask16 __U, __m512 __A) 
# 11879
{ 
# 11880
return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)__W, (__mmask16)__U, 4); 
# 11884
} 
# 11887
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11888
_mm512_maskz_cvtps_epi32(__mmask16 __U, __m512 __A) 
# 11889
{ 
# 11890
return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 4); 
# 11895
} 
# 11898
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11899
_mm512_cvtps_epu32(__m512 __A) 
# 11900
{ 
# 11901
return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1), 4); 
# 11906
} 
# 11909
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11910
_mm512_mask_cvtps_epu32(__m512i __W, __mmask16 __U, __m512 __A) 
# 11911
{ 
# 11912
return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)__W, (__mmask16)__U, 4); 
# 11916
} 
# 11919
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 11920
_mm512_maskz_cvtps_epu32(__mmask16 __U, __m512 __A) 
# 11921
{ 
# 11922
return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 4); 
# 11927
} 
# 11931
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 11932
_mm_cvtu64_ss(__m128 __A, unsigned long long __B) 
# 11933
{ 
# 11934
return (__m128)__builtin_ia32_cvtusi2ss64((__v4sf)__A, __B, 4); 
# 11936
} 
# 11939
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 11940
_mm_cvtu64_sd(__m128d __A, unsigned long long __B) 
# 11941
{ 
# 11942
return (__m128d)__builtin_ia32_cvtusi2sd64((__v2df)__A, __B, 4); 
# 11944
} 
# 11948
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 11949
_mm_cvtu32_ss(__m128 __A, unsigned __B) 
# 11950
{ 
# 11951
return (__m128)__builtin_ia32_cvtusi2ss32((__v4sf)__A, __B, 4); 
# 11953
} 
# 11956
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11957
_mm512_cvtepi32_ps(__m512i __A) 
# 11958
{ 
# 11959
return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 11964
} 
# 11967
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11968
_mm512_mask_cvtepi32_ps(__m512 __W, __mmask16 __U, __m512i __A) 
# 11969
{ 
# 11970
return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)__W, (__mmask16)__U, 4); 
# 11974
} 
# 11977
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11978
_mm512_maskz_cvtepi32_ps(__mmask16 __U, __m512i __A) 
# 11979
{ 
# 11980
return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 11985
} 
# 11988
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 11989
_mm512_cvtepu32_ps(__m512i __A) 
# 11990
{ 
# 11991
return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 11996
} 
# 11999
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12000
_mm512_mask_cvtepu32_ps(__m512 __W, __mmask16 __U, __m512i __A) 
# 12001
{ 
# 12002
return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)__W, (__mmask16)__U, 4); 
# 12006
} 
# 12009
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12010
_mm512_maskz_cvtepu32_ps(__mmask16 __U, __m512i __A) 
# 12011
{ 
# 12012
return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 12017
} 
# 12021
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12022
_mm512_fixupimm_pd(__m512d __A, __m512d __B, __m512i __C, const int __imm) 
# 12023
{ 
# 12024
return (__m512d)__builtin_ia32_fixupimmpd512_mask((__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)(-1), 4); 
# 12030
} 
# 12033
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12034
_mm512_mask_fixupimm_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512i 
# 12035
__C, const int __imm) 
# 12036
{ 
# 12037
return (__m512d)__builtin_ia32_fixupimmpd512_mask((__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)__U, 4); 
# 12043
} 
# 12046
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12047
_mm512_maskz_fixupimm_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512i 
# 12048
__C, const int __imm) 
# 12049
{ 
# 12050
return (__m512d)__builtin_ia32_fixupimmpd512_maskz((__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)__U, 4); 
# 12056
} 
# 12059
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12060
_mm512_fixupimm_ps(__m512 __A, __m512 __B, __m512i __C, const int __imm) 
# 12061
{ 
# 12062
return (__m512)__builtin_ia32_fixupimmps512_mask((__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)(-1), 4); 
# 12068
} 
# 12071
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12072
_mm512_mask_fixupimm_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512i 
# 12073
__C, const int __imm) 
# 12074
{ 
# 12075
return (__m512)__builtin_ia32_fixupimmps512_mask((__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)__U, 4); 
# 12081
} 
# 12084
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12085
_mm512_maskz_fixupimm_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512i 
# 12086
__C, const int __imm) 
# 12087
{ 
# 12088
return (__m512)__builtin_ia32_fixupimmps512_maskz((__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)__U, 4); 
# 12094
} 
# 12097
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 12098
_mm_fixupimm_sd(__m128d __A, __m128d __B, __m128i __C, const int __imm) 
# 12099
{ 
# 12100
return (__m128d)__builtin_ia32_fixupimmsd_mask((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)(-1), 4); 
# 12105
} 
# 12108
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 12109
_mm_mask_fixupimm_sd(__m128d __A, __mmask8 __U, __m128d __B, __m128i 
# 12110
__C, const int __imm) 
# 12111
{ 
# 12112
return (__m128d)__builtin_ia32_fixupimmsd_mask((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U, 4); 
# 12117
} 
# 12120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 12121
_mm_maskz_fixupimm_sd(__mmask8 __U, __m128d __A, __m128d __B, __m128i 
# 12122
__C, const int __imm) 
# 12123
{ 
# 12124
return (__m128d)__builtin_ia32_fixupimmsd_maskz((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U, 4); 
# 12130
} 
# 12133
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 12134
_mm_fixupimm_ss(__m128 __A, __m128 __B, __m128i __C, const int __imm) 
# 12135
{ 
# 12136
return (__m128)__builtin_ia32_fixupimmss_mask((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)(-1), 4); 
# 12141
} 
# 12144
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 12145
_mm_mask_fixupimm_ss(__m128 __A, __mmask8 __U, __m128 __B, __m128i 
# 12146
__C, const int __imm) 
# 12147
{ 
# 12148
return (__m128)__builtin_ia32_fixupimmss_mask((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U, 4); 
# 12153
} 
# 12156
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 12157
_mm_maskz_fixupimm_ss(__mmask8 __U, __m128 __A, __m128 __B, __m128i 
# 12158
__C, const int __imm) 
# 12159
{ 
# 12160
return (__m128)__builtin_ia32_fixupimmss_maskz((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U, 4); 
# 12165
} 
# 12230
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 12231
_mm_cvtss_u64(__m128 __A) 
# 12232
{ 
# 12233
return (unsigned long long)__builtin_ia32_vcvtss2usi64((__v4sf)__A, 4); 
# 12236
} 
# 12239
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 12240
_mm_cvttss_u64(__m128 __A) 
# 12241
{ 
# 12242
return (unsigned long long)__builtin_ia32_vcvttss2usi64((__v4sf)__A, 4); 
# 12245
} 
# 12248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 12249
_mm_cvttss_i64(__m128 __A) 
# 12250
{ 
# 12251
return (long long)__builtin_ia32_vcvttss2si64((__v4sf)__A, 4); 
# 12253
} 
# 12257
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 12258
_mm_cvtss_u32(__m128 __A) 
# 12259
{ 
# 12260
return (unsigned)__builtin_ia32_vcvtss2usi32((__v4sf)__A, 4); 
# 12262
} 
# 12265
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 12266
_mm_cvttss_u32(__m128 __A) 
# 12267
{ 
# 12268
return (unsigned)__builtin_ia32_vcvttss2usi32((__v4sf)__A, 4); 
# 12270
} 
# 12273
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 12274
_mm_cvttss_i32(__m128 __A) 
# 12275
{ 
# 12276
return (int)__builtin_ia32_vcvttss2si32((__v4sf)__A, 4); 
# 12278
} 
# 12282
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 12283
_mm_cvtsd_u64(__m128d __A) 
# 12284
{ 
# 12285
return (unsigned long long)__builtin_ia32_vcvtsd2usi64((__v2df)__A, 4); 
# 12288
} 
# 12291
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 12292
_mm_cvttsd_u64(__m128d __A) 
# 12293
{ 
# 12294
return (unsigned long long)__builtin_ia32_vcvttsd2usi64((__v2df)__A, 4); 
# 12297
} 
# 12300
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline long long 
# 12301
_mm_cvttsd_i64(__m128d __A) 
# 12302
{ 
# 12303
return (long long)__builtin_ia32_vcvttsd2si64((__v2df)__A, 4); 
# 12305
} 
# 12309
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 12310
_mm_cvtsd_u32(__m128d __A) 
# 12311
{ 
# 12312
return (unsigned)__builtin_ia32_vcvtsd2usi32((__v2df)__A, 4); 
# 12314
} 
# 12317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 12318
_mm_cvttsd_u32(__m128d __A) 
# 12319
{ 
# 12320
return (unsigned)__builtin_ia32_vcvttsd2usi32((__v2df)__A, 4); 
# 12322
} 
# 12325
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 12326
_mm_cvttsd_i32(__m128d __A) 
# 12327
{ 
# 12328
return (int)__builtin_ia32_vcvttsd2si32((__v2df)__A, 4); 
# 12330
} 
# 12333
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12334
_mm512_cvtps_pd(__m256 __A) 
# 12335
{ 
# 12336
return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), 4); 
# 12341
} 
# 12344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12345
_mm512_mask_cvtps_pd(__m512d __W, __mmask8 __U, __m256 __A) 
# 12346
{ 
# 12347
return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)__W, (__mmask8)__U, 4); 
# 12351
} 
# 12354
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12355
_mm512_maskz_cvtps_pd(__mmask8 __U, __m256 __A) 
# 12356
{ 
# 12357
return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 12362
} 
# 12365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12366
_mm512_cvtph_ps(__m256i __A) 
# 12367
{ 
# 12368
return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 12373
} 
# 12376
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12377
_mm512_mask_cvtph_ps(__m512 __W, __mmask16 __U, __m256i __A) 
# 12378
{ 
# 12379
return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)__W, (__mmask16)__U, 4); 
# 12383
} 
# 12386
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12387
_mm512_maskz_cvtph_ps(__mmask16 __U, __m256i __A) 
# 12388
{ 
# 12389
return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 12394
} 
# 12397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 12398
_mm512_cvtpd_ps(__m512d __A) 
# 12399
{ 
# 12400
return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)_mm256_undefined_ps(), (__mmask8)(-1), 4); 
# 12405
} 
# 12408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 12409
_mm512_mask_cvtpd_ps(__m256 __W, __mmask8 __U, __m512d __A) 
# 12410
{ 
# 12411
return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)__W, (__mmask8)__U, 4); 
# 12415
} 
# 12418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 12419
_mm512_maskz_cvtpd_ps(__mmask8 __U, __m512d __A) 
# 12420
{ 
# 12421
return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 4); 
# 12426
} 
# 12430
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12431
_mm512_getexp_ps(__m512 __A) 
# 12432
{ 
# 12433
return (__m512)__builtin_ia32_getexpps512_mask((__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 12438
} 
# 12441
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12442
_mm512_mask_getexp_ps(__m512 __W, __mmask16 __U, __m512 __A) 
# 12443
{ 
# 12444
return (__m512)__builtin_ia32_getexpps512_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U, 4); 
# 12448
} 
# 12451
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12452
_mm512_maskz_getexp_ps(__mmask16 __U, __m512 __A) 
# 12453
{ 
# 12454
return (__m512)__builtin_ia32_getexpps512_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 12459
} 
# 12462
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12463
_mm512_getexp_pd(__m512d __A) 
# 12464
{ 
# 12465
return (__m512d)__builtin_ia32_getexppd512_mask((__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)(-1), 4); 
# 12470
} 
# 12473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12474
_mm512_mask_getexp_pd(__m512d __W, __mmask8 __U, __m512d __A) 
# 12475
{ 
# 12476
return (__m512d)__builtin_ia32_getexppd512_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U, 4); 
# 12480
} 
# 12483
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12484
_mm512_maskz_getexp_pd(__mmask8 __U, __m512d __A) 
# 12485
{ 
# 12486
return (__m512d)__builtin_ia32_getexppd512_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 12491
} 
# 12494
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 12495
_mm_getexp_ss(__m128 __A, __m128 __B) 
# 12496
{ 
# 12497
return (__m128)__builtin_ia32_getexpss128_round((__v4sf)__A, (__v4sf)__B, 4); 
# 12500
} 
# 12503
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 12504
_mm_getexp_sd(__m128d __A, __m128d __B) 
# 12505
{ 
# 12506
return (__m128d)__builtin_ia32_getexpsd128_round((__v2df)__A, (__v2df)__B, 4); 
# 12509
} 
# 12512
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12513
_mm512_getmant_pd(__m512d __A, _MM_MANTISSA_NORM_ENUM __B, _MM_MANTISSA_SIGN_ENUM 
# 12514
__C) 
# 12515
{ 
# 12516
return (__m512d)__builtin_ia32_getmantpd512_mask((__v8df)__A, (__C << 2) | __B, _mm512_undefined_pd(), (__mmask8)(-1), 4); 
# 12521
} 
# 12524
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12525
_mm512_mask_getmant_pd(__m512d __W, __mmask8 __U, __m512d __A, _MM_MANTISSA_NORM_ENUM 
# 12526
__B, _MM_MANTISSA_SIGN_ENUM __C) 
# 12527
{ 
# 12528
return (__m512d)__builtin_ia32_getmantpd512_mask((__v8df)__A, (__C << 2) | __B, (__v8df)__W, __U, 4); 
# 12532
} 
# 12535
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12536
_mm512_maskz_getmant_pd(__mmask8 __U, __m512d __A, _MM_MANTISSA_NORM_ENUM 
# 12537
__B, _MM_MANTISSA_SIGN_ENUM __C) 
# 12538
{ 
# 12539
return (__m512d)__builtin_ia32_getmantpd512_mask((__v8df)__A, (__C << 2) | __B, (__v8df)_mm512_setzero_pd(), __U, 4); 
# 12545
} 
# 12548
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12549
_mm512_getmant_ps(__m512 __A, _MM_MANTISSA_NORM_ENUM __B, _MM_MANTISSA_SIGN_ENUM 
# 12550
__C) 
# 12551
{ 
# 12552
return (__m512)__builtin_ia32_getmantps512_mask((__v16sf)__A, (__C << 2) | __B, _mm512_undefined_ps(), (__mmask16)(-1), 4); 
# 12557
} 
# 12560
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12561
_mm512_mask_getmant_ps(__m512 __W, __mmask16 __U, __m512 __A, _MM_MANTISSA_NORM_ENUM 
# 12562
__B, _MM_MANTISSA_SIGN_ENUM __C) 
# 12563
{ 
# 12564
return (__m512)__builtin_ia32_getmantps512_mask((__v16sf)__A, (__C << 2) | __B, (__v16sf)__W, __U, 4); 
# 12568
} 
# 12571
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12572
_mm512_maskz_getmant_ps(__mmask16 __U, __m512 __A, _MM_MANTISSA_NORM_ENUM 
# 12573
__B, _MM_MANTISSA_SIGN_ENUM __C) 
# 12574
{ 
# 12575
return (__m512)__builtin_ia32_getmantps512_mask((__v16sf)__A, (__C << 2) | __B, (__v16sf)_mm512_setzero_ps(), __U, 4); 
# 12581
} 
# 12584
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 12585
_mm_getmant_sd(__m128d __A, __m128d __B, _MM_MANTISSA_NORM_ENUM __C, _MM_MANTISSA_SIGN_ENUM 
# 12586
__D) 
# 12587
{ 
# 12588
return (__m128d)__builtin_ia32_getmantsd_round((__v2df)__A, (__v2df)__B, (__D << 2) | __C, 4); 
# 12592
} 
# 12595
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 12596
_mm_getmant_ss(__m128 __A, __m128 __B, _MM_MANTISSA_NORM_ENUM __C, _MM_MANTISSA_SIGN_ENUM 
# 12597
__D) 
# 12598
{ 
# 12599
return (__m128)__builtin_ia32_getmantss_round((__v4sf)__A, (__v4sf)__B, (__D << 2) | __C, 4); 
# 12603
} 
# 12693
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12694
_mm512_roundscale_ps(__m512 __A, const int __imm) 
# 12695
{ 
# 12696
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, __imm, (__v16sf)_mm512_undefined_ps(), -1, 4); 
# 12701
} 
# 12704
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12705
_mm512_mask_roundscale_ps(__m512 __A, __mmask16 __B, __m512 __C, const int 
# 12706
__imm) 
# 12707
{ 
# 12708
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__C, __imm, (__v16sf)__A, (__mmask16)__B, 4); 
# 12712
} 
# 12715
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12716
_mm512_maskz_roundscale_ps(__mmask16 __A, __m512 __B, const int __imm) 
# 12717
{ 
# 12718
return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__B, __imm, (__v16sf)_mm512_setzero_ps(), (__mmask16)__A, 4); 
# 12724
} 
# 12727
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12728
_mm512_roundscale_pd(__m512d __A, const int __imm) 
# 12729
{ 
# 12730
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, __imm, (__v8df)_mm512_undefined_pd(), -1, 4); 
# 12735
} 
# 12738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12739
_mm512_mask_roundscale_pd(__m512d __A, __mmask8 __B, __m512d __C, const int 
# 12740
__imm) 
# 12741
{ 
# 12742
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__C, __imm, (__v8df)__A, (__mmask8)__B, 4); 
# 12746
} 
# 12749
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12750
_mm512_maskz_roundscale_pd(__mmask8 __A, __m512d __B, const int __imm) 
# 12751
{ 
# 12752
return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__B, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)__A, 4); 
# 12758
} 
# 12761
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 12762
_mm_roundscale_ss(__m128 __A, __m128 __B, const int __imm) 
# 12763
{ 
# 12764
return (__m128)__builtin_ia32_rndscaless_round((__v4sf)__A, (__v4sf)__B, __imm, 4); 
# 12767
} 
# 12770
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 12771
_mm_roundscale_sd(__m128d __A, __m128d __B, const int __imm) 
# 12772
{ 
# 12773
return (__m128d)__builtin_ia32_rndscalesd_round((__v2df)__A, (__v2df)__B, __imm, 4); 
# 12776
} 
# 12815
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12816
_mm512_cmp_pd_mask(__m512d __X, __m512d __Y, const int __P) 
# 12817
{ 
# 12818
return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, __P, (__mmask8)(-1), 4); 
# 12822
} 
# 12825
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 12826
_mm512_cmp_ps_mask(__m512 __X, __m512 __Y, const int __P) 
# 12827
{ 
# 12828
return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y, __P, (__mmask16)(-1), 4); 
# 12832
} 
# 12835
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 12836
_mm512_mask_cmp_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y, const int __P) 
# 12837
{ 
# 12838
return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y, __P, (__mmask16)__U, 4); 
# 12842
} 
# 12845
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12846
_mm512_mask_cmp_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y, const int __P) 
# 12847
{ 
# 12848
return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, __P, (__mmask8)__U, 4); 
# 12852
} 
# 12855
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12856
_mm_cmp_sd_mask(__m128d __X, __m128d __Y, const int __P) 
# 12857
{ 
# 12858
return (__mmask8)__builtin_ia32_cmpsd_mask((__v2df)__X, (__v2df)__Y, __P, (__mmask8)(-1), 4); 
# 12862
} 
# 12865
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12866
_mm_mask_cmp_sd_mask(__mmask8 __M, __m128d __X, __m128d __Y, const int __P) 
# 12867
{ 
# 12868
return (__mmask8)__builtin_ia32_cmpsd_mask((__v2df)__X, (__v2df)__Y, __P, (__mmask8)__M, 4); 
# 12872
} 
# 12875
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12876
_mm_cmp_ss_mask(__m128 __X, __m128 __Y, const int __P) 
# 12877
{ 
# 12878
return (__mmask8)__builtin_ia32_cmpss_mask((__v4sf)__X, (__v4sf)__Y, __P, (__mmask8)(-1), 4); 
# 12882
} 
# 12885
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12886
_mm_mask_cmp_ss_mask(__mmask8 __M, __m128 __X, __m128 __Y, const int __P) 
# 12887
{ 
# 12888
return (__mmask8)__builtin_ia32_cmpss_mask((__v4sf)__X, (__v4sf)__Y, __P, (__mmask8)__M, 4); 
# 12892
} 
# 12937
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 12938
_mm512_kmov(__mmask16 __A) 
# 12939
{ 
# 12940
return __builtin_ia32_kmov16(__A); 
# 12941
} 
# 12944
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12945
_mm512_castpd_ps(__m512d __A) 
# 12946
{ 
# 12947
return (__m512)__A; 
# 12948
} 
# 12951
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 12952
_mm512_castpd_si512(__m512d __A) 
# 12953
{ 
# 12954
return (__m512i)__A; 
# 12955
} 
# 12958
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12959
_mm512_castps_pd(__m512 __A) 
# 12960
{ 
# 12961
return (__m512d)__A; 
# 12962
} 
# 12965
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 12966
_mm512_castps_si512(__m512 __A) 
# 12967
{ 
# 12968
return (__m512i)__A; 
# 12969
} 
# 12972
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 12973
_mm512_castsi512_ps(__m512i __A) 
# 12974
{ 
# 12975
return (__m512)__A; 
# 12976
} 
# 12979
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 12980
_mm512_castsi512_pd(__m512i __A) 
# 12981
{ 
# 12982
return (__m512d)__A; 
# 12983
} 
# 12986
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 12987
_mm512_castpd512_pd128(__m512d __A) 
# 12988
{ 
# 12989
return (__m128d)_mm512_extractf32x4_ps((__m512)__A, 0); 
# 12990
} 
# 12993
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 12994
_mm512_castps512_ps128(__m512 __A) 
# 12995
{ 
# 12996
return _mm512_extractf32x4_ps(__A, 0); 
# 12997
} 
# 13000
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 13001
_mm512_castsi512_si128(__m512i __A) 
# 13002
{ 
# 13003
return (__m128i)_mm512_extracti32x4_epi32((__m512i)__A, 0); 
# 13004
} 
# 13007
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 13008
_mm512_castpd512_pd256(__m512d __A) 
# 13009
{ 
# 13010
return _mm512_extractf64x4_pd(__A, 0); 
# 13011
} 
# 13014
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 13015
_mm512_castps512_ps256(__m512 __A) 
# 13016
{ 
# 13017
return (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0); 
# 13018
} 
# 13021
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 13022
_mm512_castsi512_si256(__m512i __A) 
# 13023
{ 
# 13024
return (__m256i)_mm512_extractf64x4_pd((__m512d)__A, 0); 
# 13025
} 
# 13028
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 13029
_mm512_castpd128_pd512(__m128d __A) 
# 13030
{ 
# 13031
return (__m512d)__builtin_ia32_pd512_pd((__m128d)__A); 
# 13032
} 
# 13035
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 13036
_mm512_castps128_ps512(__m128 __A) 
# 13037
{ 
# 13038
return (__m512)__builtin_ia32_ps512_ps((__m128)__A); 
# 13039
} 
# 13042
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 13043
_mm512_castsi128_si512(__m128i __A) 
# 13044
{ 
# 13045
return (__m512i)__builtin_ia32_si512_si((__v4si)__A); 
# 13046
} 
# 13049
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 13050
_mm512_castpd256_pd512(__m256d __A) 
# 13051
{ 
# 13052
return __builtin_ia32_pd512_256pd(__A); 
# 13053
} 
# 13056
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 13057
_mm512_castps256_ps512(__m256 __A) 
# 13058
{ 
# 13059
return __builtin_ia32_ps512_256ps(__A); 
# 13060
} 
# 13063
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 13064
_mm512_castsi256_si512(__m256i __A) 
# 13065
{ 
# 13066
return (__m512i)__builtin_ia32_si512_256si((__v8si)__A); 
# 13067
} 
# 13070
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 13071
_mm512_cmpeq_epu32_mask(__m512i __A, __m512i __B) 
# 13072
{ 
# 13073
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 0, (__mmask16)(-1)); 
# 13076
} 
# 13079
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 13080
_mm512_mask_cmpeq_epu32_mask(__mmask16 __U, __m512i __A, __m512i __B) 
# 13081
{ 
# 13082
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 0, __U); 
# 13084
} 
# 13087
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 13088
_mm512_mask_cmpeq_epu64_mask(__mmask8 __U, __m512i __A, __m512i __B) 
# 13089
{ 
# 13090
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 0, __U); 
# 13092
} 
# 13095
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 13096
_mm512_cmpeq_epu64_mask(__m512i __A, __m512i __B) 
# 13097
{ 
# 13098
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 0, (__mmask8)(-1)); 
# 13101
} 
# 13104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 13105
_mm512_cmpgt_epu32_mask(__m512i __A, __m512i __B) 
# 13106
{ 
# 13107
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 6, (__mmask16)(-1)); 
# 13110
} 
# 13113
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 13114
_mm512_mask_cmpgt_epu32_mask(__mmask16 __U, __m512i __A, __m512i __B) 
# 13115
{ 
# 13116
return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 6, __U); 
# 13118
} 
# 13121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 13122
_mm512_mask_cmpgt_epu64_mask(__mmask8 __U, __m512i __A, __m512i __B) 
# 13123
{ 
# 13124
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 6, __U); 
# 13126
} 
# 13129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 13130
_mm512_cmpgt_epu64_mask(__m512i __A, __m512i __B) 
# 13131
{ 
# 13132
return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 6, (__mmask8)(-1)); 
# 13135
} 
# 13139
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512erintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512er" )
# 38
typedef double __v8df __attribute((__vector_size__(64))); 
# 39
typedef float __v16sf __attribute((__vector_size__(64))); 
# 43
typedef float __m512 __attribute((__vector_size__(64), __may_alias__)); 
# 44
typedef double __m512d __attribute((__vector_size__(64), __may_alias__)); 
# 46
typedef unsigned char __mmask8; 
# 47
typedef unsigned short __mmask16; 
# 51
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 52
_mm512_exp2a23_round_pd(__m512d __A, int __R) 
# 53
{ 
# 54
__m512d __W; 
# 55
return (__m512d)__builtin_ia32_exp2pd_mask((__v8df)__A, (__v8df)__W, (__mmask8)(-1), __R); 
# 58
} 
# 61
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 62
_mm512_mask_exp2a23_round_pd(__m512d __W, __mmask8 __U, __m512d __A, int __R) 
# 63
{ 
# 64
return (__m512d)__builtin_ia32_exp2pd_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U, __R); 
# 67
} 
# 70
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 71
_mm512_maskz_exp2a23_round_pd(__mmask8 __U, __m512d __A, int __R) 
# 72
{ 
# 73
return (__m512d)__builtin_ia32_exp2pd_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 76
} 
# 79
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 80
_mm512_exp2a23_round_ps(__m512 __A, int __R) 
# 81
{ 
# 82
__m512 __W; 
# 83
return (__m512)__builtin_ia32_exp2ps_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)(-1), __R); 
# 86
} 
# 89
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 90
_mm512_mask_exp2a23_round_ps(__m512 __W, __mmask16 __U, __m512 __A, int __R) 
# 91
{ 
# 92
return (__m512)__builtin_ia32_exp2ps_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U, __R); 
# 95
} 
# 98
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 99
_mm512_maskz_exp2a23_round_ps(__mmask16 __U, __m512 __A, int __R) 
# 100
{ 
# 101
return (__m512)__builtin_ia32_exp2ps_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 104
} 
# 107
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 108
_mm512_rcp28_round_pd(__m512d __A, int __R) 
# 109
{ 
# 110
__m512d __W; 
# 111
return (__m512d)__builtin_ia32_rcp28pd_mask((__v8df)__A, (__v8df)__W, (__mmask8)(-1), __R); 
# 114
} 
# 117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 118
_mm512_mask_rcp28_round_pd(__m512d __W, __mmask8 __U, __m512d __A, int __R) 
# 119
{ 
# 120
return (__m512d)__builtin_ia32_rcp28pd_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U, __R); 
# 123
} 
# 126
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 127
_mm512_maskz_rcp28_round_pd(__mmask8 __U, __m512d __A, int __R) 
# 128
{ 
# 129
return (__m512d)__builtin_ia32_rcp28pd_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 132
} 
# 135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 136
_mm512_rcp28_round_ps(__m512 __A, int __R) 
# 137
{ 
# 138
__m512 __W; 
# 139
return (__m512)__builtin_ia32_rcp28ps_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)(-1), __R); 
# 142
} 
# 145
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 146
_mm512_mask_rcp28_round_ps(__m512 __W, __mmask16 __U, __m512 __A, int __R) 
# 147
{ 
# 148
return (__m512)__builtin_ia32_rcp28ps_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U, __R); 
# 151
} 
# 154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 155
_mm512_maskz_rcp28_round_ps(__mmask16 __U, __m512 __A, int __R) 
# 156
{ 
# 157
return (__m512)__builtin_ia32_rcp28ps_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 160
} 
# 163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 164
_mm_rcp28_round_sd(__m128d __A, __m128d __B, int __R) 
# 165
{ 
# 166
return (__m128d)__builtin_ia32_rcp28sd_round((__v2df)__B, (__v2df)__A, __R); 
# 169
} 
# 172
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 173
_mm_rcp28_round_ss(__m128 __A, __m128 __B, int __R) 
# 174
{ 
# 175
return (__m128)__builtin_ia32_rcp28ss_round((__v4sf)__B, (__v4sf)__A, __R); 
# 178
} 
# 181
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 182
_mm512_rsqrt28_round_pd(__m512d __A, int __R) 
# 183
{ 
# 184
__m512d __W; 
# 185
return (__m512d)__builtin_ia32_rsqrt28pd_mask((__v8df)__A, (__v8df)__W, (__mmask8)(-1), __R); 
# 188
} 
# 191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 192
_mm512_mask_rsqrt28_round_pd(__m512d __W, __mmask8 __U, __m512d __A, int __R) 
# 193
{ 
# 194
return (__m512d)__builtin_ia32_rsqrt28pd_mask((__v8df)__A, (__v8df)__W, (__mmask8)__U, __R); 
# 197
} 
# 200
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 201
_mm512_maskz_rsqrt28_round_pd(__mmask8 __U, __m512d __A, int __R) 
# 202
{ 
# 203
return (__m512d)__builtin_ia32_rsqrt28pd_mask((__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 206
} 
# 209
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 210
_mm512_rsqrt28_round_ps(__m512 __A, int __R) 
# 211
{ 
# 212
__m512 __W; 
# 213
return (__m512)__builtin_ia32_rsqrt28ps_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)(-1), __R); 
# 216
} 
# 219
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 220
_mm512_mask_rsqrt28_round_ps(__m512 __W, __mmask16 __U, __m512 __A, int __R) 
# 221
{ 
# 222
return (__m512)__builtin_ia32_rsqrt28ps_mask((__v16sf)__A, (__v16sf)__W, (__mmask16)__U, __R); 
# 225
} 
# 228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 229
_mm512_maskz_rsqrt28_round_ps(__mmask16 __U, __m512 __A, int __R) 
# 230
{ 
# 231
return (__m512)__builtin_ia32_rsqrt28ps_mask((__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 234
} 
# 237
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 238
_mm_rsqrt28_round_sd(__m128d __A, __m128d __B, int __R) 
# 239
{ 
# 240
return (__m128d)__builtin_ia32_rsqrt28sd_round((__v2df)__B, (__v2df)__A, __R); 
# 243
} 
# 246
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 247
_mm_rsqrt28_round_ss(__m128 __A, __m128 __B, int __R) 
# 248
{ 
# 249
return (__m128)__builtin_ia32_rsqrt28ss_round((__v4sf)__B, (__v4sf)__A, __R); 
# 252
} 
# 391
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512pfintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512pf" )
# 38
typedef long long __v8di __attribute((__vector_size__(64))); 
# 39
typedef int __v16si __attribute((__vector_size__(64))); 
# 43
typedef long long __m512i __attribute((__vector_size__(64), __may_alias__)); 
# 45
typedef unsigned char __mmask8; 
# 46
typedef unsigned short __mmask16; 
# 50
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 51
_mm512_mask_prefetch_i32gather_pd(__m256i index, __mmask8 mask, void *
# 52
addr, int scale, int hint) 
# 53
{ 
# 54
__builtin_ia32_gatherpfdpd(mask, (__v8si)index, (const long long *)addr, scale, hint); 
# 56
} 
# 59
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 60
_mm512_mask_prefetch_i32gather_ps(__m512i index, __mmask16 mask, void *
# 61
addr, int scale, int hint) 
# 62
{ 
# 63
__builtin_ia32_gatherpfdps(mask, (__v16si)index, (const int *)addr, scale, hint); 
# 65
} 
# 68
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 69
_mm512_mask_prefetch_i64gather_pd(__m512i index, __mmask8 mask, void *
# 70
addr, int scale, int hint) 
# 71
{ 
# 72
__builtin_ia32_gatherpfqpd(mask, (__v8di)index, (const long long *)addr, scale, hint); 
# 74
} 
# 77
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 78
_mm512_mask_prefetch_i64gather_ps(__m512i index, __mmask8 mask, void *
# 79
addr, int scale, int hint) 
# 80
{ 
# 81
__builtin_ia32_gatherpfqps(mask, (__v8di)index, (const int *)addr, scale, hint); 
# 83
} 
# 86
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 87
_mm512_prefetch_i32scatter_pd(void *addr, __m256i index, int scale, int 
# 88
hint) 
# 89
{ 
# 90
__builtin_ia32_scatterpfdpd((__mmask8)255, (__v8si)index, (const long long *)addr, scale, hint); 
# 92
} 
# 95
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 96
_mm512_prefetch_i32scatter_ps(void *addr, __m512i index, int scale, int 
# 97
hint) 
# 98
{ 
# 99
__builtin_ia32_scatterpfdps((__mmask16)65535, (__v16si)index, (const int *)addr, scale, hint); 
# 101
} 
# 104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 105
_mm512_mask_prefetch_i32scatter_pd(void *addr, __mmask8 mask, __m256i 
# 106
index, int scale, int hint) 
# 107
{ 
# 108
__builtin_ia32_scatterpfdpd(mask, (__v8si)index, (const long long *)addr, scale, hint); 
# 110
} 
# 113
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 114
_mm512_mask_prefetch_i32scatter_ps(void *addr, __mmask16 mask, __m512i 
# 115
index, int scale, int hint) 
# 116
{ 
# 117
__builtin_ia32_scatterpfdps(mask, (__v16si)index, (const int *)addr, scale, hint); 
# 119
} 
# 122
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 123
_mm512_prefetch_i64scatter_pd(void *addr, __m512i index, int scale, int 
# 124
hint) 
# 125
{ 
# 126
__builtin_ia32_scatterpfqpd((__mmask8)255, (__v8di)index, (const long long *)addr, scale, hint); 
# 128
} 
# 131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 132
_mm512_prefetch_i64scatter_ps(void *addr, __m512i index, int scale, int 
# 133
hint) 
# 134
{ 
# 135
__builtin_ia32_scatterpfqps((__mmask8)255, (__v8di)index, (const int *)addr, scale, hint); 
# 137
} 
# 140
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 141
_mm512_mask_prefetch_i64scatter_pd(void *addr, __mmask16 mask, __m512i 
# 142
index, int scale, int hint) 
# 143
{ 
# 144
__builtin_ia32_scatterpfqpd(mask, (__v8di)index, (const long long *)addr, scale, hint); 
# 146
} 
# 149
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 150
_mm512_mask_prefetch_i64scatter_ps(void *addr, __mmask16 mask, __m512i 
# 151
index, int scale, int hint) 
# 152
{ 
# 153
__builtin_ia32_scatterpfqps(mask, (__v8di)index, (const int *)addr, scale, hint); 
# 155
} 
# 209
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512cdintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512cd" )
# 38
typedef long long __v8di __attribute((__vector_size__(64))); 
# 39
typedef int __v16si __attribute((__vector_size__(64))); 
# 43
typedef long long __m512i __attribute((__vector_size__(64), __may_alias__)); 
# 44
typedef double __m512d __attribute((__vector_size__(64), __may_alias__)); 
# 46
typedef unsigned char __mmask8; 
# 47
typedef unsigned short __mmask16; 
# 50
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 51
_mm512_conflict_epi32(__m512i __A) 
# 52
{ 
# 53
return (__m512i)__builtin_ia32_vpconflictsi_512_mask((__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)(-1)); 
# 57
} 
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 61
_mm512_mask_conflict_epi32(__m512i __W, __mmask16 __U, __m512i __A) 
# 62
{ 
# 63
return (__m512i)__builtin_ia32_vpconflictsi_512_mask((__v16si)__A, (__v16si)__W, (__mmask16)__U); 
# 66
} 
# 69
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 70
_mm512_maskz_conflict_epi32(__mmask16 __U, __m512i __A) 
# 71
{ 
# 72
return (__m512i)__builtin_ia32_vpconflictsi_512_mask((__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 76
} 
# 79
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 80
_mm512_conflict_epi64(__m512i __A) 
# 81
{ 
# 82
return (__m512i)__builtin_ia32_vpconflictdi_512_mask((__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1)); 
# 86
} 
# 89
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 90
_mm512_mask_conflict_epi64(__m512i __W, __mmask8 __U, __m512i __A) 
# 91
{ 
# 92
return (__m512i)__builtin_ia32_vpconflictdi_512_mask((__v8di)__A, (__v8di)__W, (__mmask8)__U); 
# 95
} 
# 98
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 99
_mm512_maskz_conflict_epi64(__mmask8 __U, __m512i __A) 
# 100
{ 
# 101
return (__m512i)__builtin_ia32_vpconflictdi_512_mask((__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 105
} 
# 108
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 109
_mm512_lzcnt_epi64(__m512i __A) 
# 110
{ 
# 111
return (__m512i)__builtin_ia32_vplzcntq_512_mask((__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1)); 
# 115
} 
# 118
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 119
_mm512_mask_lzcnt_epi64(__m512i __W, __mmask8 __U, __m512i __A) 
# 120
{ 
# 121
return (__m512i)__builtin_ia32_vplzcntq_512_mask((__v8di)__A, (__v8di)__W, (__mmask8)__U); 
# 124
} 
# 127
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 128
_mm512_maskz_lzcnt_epi64(__mmask8 __U, __m512i __A) 
# 129
{ 
# 130
return (__m512i)__builtin_ia32_vplzcntq_512_mask((__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 134
} 
# 137
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 138
_mm512_lzcnt_epi32(__m512i __A) 
# 139
{ 
# 140
return (__m512i)__builtin_ia32_vplzcntd_512_mask((__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)(-1)); 
# 144
} 
# 147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 148
_mm512_mask_lzcnt_epi32(__m512i __W, __mmask16 __U, __m512i __A) 
# 149
{ 
# 150
return (__m512i)__builtin_ia32_vplzcntd_512_mask((__v16si)__A, (__v16si)__W, (__mmask16)__U); 
# 153
} 
# 156
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 157
_mm512_maskz_lzcnt_epi32(__mmask16 __U, __m512i __A) 
# 158
{ 
# 159
return (__m512i)__builtin_ia32_vplzcntd_512_mask((__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 163
} 
# 166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 167
_mm512_broadcastmb_epi64(__mmask8 __A) 
# 168
{ 
# 169
return (__m512i)__builtin_ia32_broadcastmb512(__A); 
# 170
} 
# 173
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 174
_mm512_broadcastmw_epi32(__mmask16 __A) 
# 175
{ 
# 176
return (__m512i)__builtin_ia32_broadcastmw512(__A); 
# 177
} 
# 181
#pragma GCC pop_options
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512vlintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 34
_mm_setzero_di() 
# 35
{ 
# 36
return __extension__ (__m128i)(((__v2di){0LL, 0LL})); 
# 37
} 
# 40
#pragma GCC push_options
#pragma GCC target ( "avx512vl" )
# 46
typedef unsigned __mmask32; 
# 49
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 50
_mm256_mask_mov_pd(__m256d __W, __mmask8 __U, __m256d __A) 
# 51
{ 
# 52
return (__m256d)__builtin_ia32_movapd256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 55
} 
# 58
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 59
_mm256_maskz_mov_pd(__mmask8 __U, __m256d __A) 
# 60
{ 
# 61
return (__m256d)__builtin_ia32_movapd256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 65
} 
# 68
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 69
_mm_mask_mov_pd(__m128d __W, __mmask8 __U, __m128d __A) 
# 70
{ 
# 71
return (__m128d)__builtin_ia32_movapd128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 74
} 
# 77
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 78
_mm_maskz_mov_pd(__mmask8 __U, __m128d __A) 
# 79
{ 
# 80
return (__m128d)__builtin_ia32_movapd128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 84
} 
# 87
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 88
_mm256_mask_load_pd(__m256d __W, __mmask8 __U, const void *__P) 
# 89
{ 
# 90
return (__m256d)__builtin_ia32_loadapd256_mask((__v4df *)__P, (__v4df)__W, (__mmask8)__U); 
# 93
} 
# 96
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 97
_mm256_maskz_load_pd(__mmask8 __U, const void *__P) 
# 98
{ 
# 99
return (__m256d)__builtin_ia32_loadapd256_mask((__v4df *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 103
} 
# 106
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 107
_mm_mask_load_pd(__m128d __W, __mmask8 __U, const void *__P) 
# 108
{ 
# 109
return (__m128d)__builtin_ia32_loadapd128_mask((__v2df *)__P, (__v2df)__W, (__mmask8)__U); 
# 112
} 
# 115
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 116
_mm_maskz_load_pd(__mmask8 __U, const void *__P) 
# 117
{ 
# 118
return (__m128d)__builtin_ia32_loadapd128_mask((__v2df *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 122
} 
# 125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 126
_mm256_mask_store_pd(void *__P, __mmask8 __U, __m256d __A) 
# 127
{ 
# 128
__builtin_ia32_storeapd256_mask((__v4df *)__P, (__v4df)__A, (__mmask8)__U); 
# 131
} 
# 134
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 135
_mm_mask_store_pd(void *__P, __mmask8 __U, __m128d __A) 
# 136
{ 
# 137
__builtin_ia32_storeapd128_mask((__v2df *)__P, (__v2df)__A, (__mmask8)__U); 
# 140
} 
# 143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 144
_mm256_mask_mov_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 145
{ 
# 146
return (__m256)__builtin_ia32_movaps256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 149
} 
# 152
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 153
_mm256_maskz_mov_ps(__mmask8 __U, __m256 __A) 
# 154
{ 
# 155
return (__m256)__builtin_ia32_movaps256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 159
} 
# 162
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 163
_mm_mask_mov_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 164
{ 
# 165
return (__m128)__builtin_ia32_movaps128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 168
} 
# 171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 172
_mm_maskz_mov_ps(__mmask8 __U, __m128 __A) 
# 173
{ 
# 174
return (__m128)__builtin_ia32_movaps128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 178
} 
# 181
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 182
_mm256_mask_load_ps(__m256 __W, __mmask8 __U, const void *__P) 
# 183
{ 
# 184
return (__m256)__builtin_ia32_loadaps256_mask((__v8sf *)__P, (__v8sf)__W, (__mmask8)__U); 
# 187
} 
# 190
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 191
_mm256_maskz_load_ps(__mmask8 __U, const void *__P) 
# 192
{ 
# 193
return (__m256)__builtin_ia32_loadaps256_mask((__v8sf *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 197
} 
# 200
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 201
_mm_mask_load_ps(__m128 __W, __mmask8 __U, const void *__P) 
# 202
{ 
# 203
return (__m128)__builtin_ia32_loadaps128_mask((__v4sf *)__P, (__v4sf)__W, (__mmask8)__U); 
# 206
} 
# 209
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 210
_mm_maskz_load_ps(__mmask8 __U, const void *__P) 
# 211
{ 
# 212
return (__m128)__builtin_ia32_loadaps128_mask((__v4sf *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 216
} 
# 219
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 220
_mm256_mask_store_ps(void *__P, __mmask8 __U, __m256 __A) 
# 221
{ 
# 222
__builtin_ia32_storeaps256_mask((__v8sf *)__P, (__v8sf)__A, (__mmask8)__U); 
# 225
} 
# 228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 229
_mm_mask_store_ps(void *__P, __mmask8 __U, __m128 __A) 
# 230
{ 
# 231
__builtin_ia32_storeaps128_mask((__v4sf *)__P, (__v4sf)__A, (__mmask8)__U); 
# 234
} 
# 237
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 238
_mm256_mask_mov_epi64(__m256i __W, __mmask8 __U, __m256i __A) 
# 239
{ 
# 240
return (__m256i)__builtin_ia32_movdqa64_256_mask((__v4di)__A, (__v4di)__W, (__mmask8)__U); 
# 243
} 
# 246
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 247
_mm256_maskz_mov_epi64(__mmask8 __U, __m256i __A) 
# 248
{ 
# 249
return (__m256i)__builtin_ia32_movdqa64_256_mask((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 253
} 
# 256
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 257
_mm_mask_mov_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 258
{ 
# 259
return (__m128i)__builtin_ia32_movdqa64_128_mask((__v2di)__A, (__v2di)__W, (__mmask8)__U); 
# 262
} 
# 265
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 266
_mm_maskz_mov_epi64(__mmask8 __U, __m128i __A) 
# 267
{ 
# 268
return (__m128i)__builtin_ia32_movdqa64_128_mask((__v2di)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 272
} 
# 275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 276
_mm256_mask_load_epi64(__m256i __W, __mmask8 __U, const void *__P) 
# 277
{ 
# 278
return (__m256i)__builtin_ia32_movdqa64load256_mask((__v4di *)__P, (__v4di)__W, (__mmask8)__U); 
# 282
} 
# 285
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 286
_mm256_maskz_load_epi64(__mmask8 __U, const void *__P) 
# 287
{ 
# 288
return (__m256i)__builtin_ia32_movdqa64load256_mask((__v4di *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 293
} 
# 296
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 297
_mm_mask_load_epi64(__m128i __W, __mmask8 __U, const void *__P) 
# 298
{ 
# 299
return (__m128i)__builtin_ia32_movdqa64load128_mask((__v2di *)__P, (__v2di)__W, (__mmask8)__U); 
# 303
} 
# 306
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 307
_mm_maskz_load_epi64(__mmask8 __U, const void *__P) 
# 308
{ 
# 309
return (__m128i)__builtin_ia32_movdqa64load128_mask((__v2di *)__P, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 314
} 
# 317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 318
_mm256_mask_store_epi64(void *__P, __mmask8 __U, __m256i __A) 
# 319
{ 
# 320
__builtin_ia32_movdqa64store256_mask((__v4di *)__P, (__v4di)__A, (__mmask8)__U); 
# 323
} 
# 326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 327
_mm_mask_store_epi64(void *__P, __mmask8 __U, __m128i __A) 
# 328
{ 
# 329
__builtin_ia32_movdqa64store128_mask((__v2di *)__P, (__v2di)__A, (__mmask8)__U); 
# 332
} 
# 335
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 336
_mm256_mask_mov_epi32(__m256i __W, __mmask8 __U, __m256i __A) 
# 337
{ 
# 338
return (__m256i)__builtin_ia32_movdqa32_256_mask((__v8si)__A, (__v8si)__W, (__mmask8)__U); 
# 341
} 
# 344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 345
_mm256_maskz_mov_epi32(__mmask8 __U, __m256i __A) 
# 346
{ 
# 347
return (__m256i)__builtin_ia32_movdqa32_256_mask((__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 351
} 
# 354
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 355
_mm_mask_mov_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 356
{ 
# 357
return (__m128i)__builtin_ia32_movdqa32_128_mask((__v4si)__A, (__v4si)__W, (__mmask8)__U); 
# 360
} 
# 363
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 364
_mm_maskz_mov_epi32(__mmask8 __U, __m128i __A) 
# 365
{ 
# 366
return (__m128i)__builtin_ia32_movdqa32_128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 370
} 
# 373
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 374
_mm256_mask_load_epi32(__m256i __W, __mmask8 __U, const void *__P) 
# 375
{ 
# 376
return (__m256i)__builtin_ia32_movdqa32load256_mask((__v8si *)__P, (__v8si)__W, (__mmask8)__U); 
# 380
} 
# 383
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 384
_mm256_maskz_load_epi32(__mmask8 __U, const void *__P) 
# 385
{ 
# 386
return (__m256i)__builtin_ia32_movdqa32load256_mask((__v8si *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 391
} 
# 394
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 395
_mm_mask_load_epi32(__m128i __W, __mmask8 __U, const void *__P) 
# 396
{ 
# 397
return (__m128i)__builtin_ia32_movdqa32load128_mask((__v4si *)__P, (__v4si)__W, (__mmask8)__U); 
# 401
} 
# 404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 405
_mm_maskz_load_epi32(__mmask8 __U, const void *__P) 
# 406
{ 
# 407
return (__m128i)__builtin_ia32_movdqa32load128_mask((__v4si *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 412
} 
# 415
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 416
_mm256_mask_store_epi32(void *__P, __mmask8 __U, __m256i __A) 
# 417
{ 
# 418
__builtin_ia32_movdqa32store256_mask((__v8si *)__P, (__v8si)__A, (__mmask8)__U); 
# 421
} 
# 424
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 425
_mm_mask_store_epi32(void *__P, __mmask8 __U, __m128i __A) 
# 426
{ 
# 427
__builtin_ia32_movdqa32store128_mask((__v4si *)__P, (__v4si)__A, (__mmask8)__U); 
# 430
} 
# 433
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 434
_mm_setzero_hi() 
# 435
{ 
# 436
return __extension__ (__m128i)(((__v8hi){(0), (0), (0), (0), (0), (0), (0), (0)})); 
# 439
} 
# 442
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 443
_mm_mask_add_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 444
{ 
# 445
return (__m128d)__builtin_ia32_addpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 449
} 
# 452
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 453
_mm_maskz_add_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 454
{ 
# 455
return (__m128d)__builtin_ia32_addpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 460
} 
# 463
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 464
_mm256_mask_add_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 465
__B) 
# 466
{ 
# 467
return (__m256d)__builtin_ia32_addpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 471
} 
# 474
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 475
_mm256_maskz_add_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 476
{ 
# 477
return (__m256d)__builtin_ia32_addpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 482
} 
# 485
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 486
_mm_mask_add_ps(__m128 __W, __mmask16 __U, __m128 __A, __m128 __B) 
# 487
{ 
# 488
return (__m128)__builtin_ia32_addps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 492
} 
# 495
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 496
_mm_maskz_add_ps(__mmask16 __U, __m128 __A, __m128 __B) 
# 497
{ 
# 498
return (__m128)__builtin_ia32_addps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 503
} 
# 506
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 507
_mm256_mask_add_ps(__m256 __W, __mmask16 __U, __m256 __A, __m256 __B) 
# 508
{ 
# 509
return (__m256)__builtin_ia32_addps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 513
} 
# 516
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 517
_mm256_maskz_add_ps(__mmask16 __U, __m256 __A, __m256 __B) 
# 518
{ 
# 519
return (__m256)__builtin_ia32_addps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 524
} 
# 527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 528
_mm_mask_sub_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 529
{ 
# 530
return (__m128d)__builtin_ia32_subpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 534
} 
# 537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 538
_mm_maskz_sub_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 539
{ 
# 540
return (__m128d)__builtin_ia32_subpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 545
} 
# 548
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 549
_mm256_mask_sub_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 550
__B) 
# 551
{ 
# 552
return (__m256d)__builtin_ia32_subpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 556
} 
# 559
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 560
_mm256_maskz_sub_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 561
{ 
# 562
return (__m256d)__builtin_ia32_subpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 567
} 
# 570
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 571
_mm_mask_sub_ps(__m128 __W, __mmask16 __U, __m128 __A, __m128 __B) 
# 572
{ 
# 573
return (__m128)__builtin_ia32_subps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 577
} 
# 580
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 581
_mm_maskz_sub_ps(__mmask16 __U, __m128 __A, __m128 __B) 
# 582
{ 
# 583
return (__m128)__builtin_ia32_subps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 588
} 
# 591
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 592
_mm256_mask_sub_ps(__m256 __W, __mmask16 __U, __m256 __A, __m256 __B) 
# 593
{ 
# 594
return (__m256)__builtin_ia32_subps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 598
} 
# 601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 602
_mm256_maskz_sub_ps(__mmask16 __U, __m256 __A, __m256 __B) 
# 603
{ 
# 604
return (__m256)__builtin_ia32_subps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 609
} 
# 612
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 613
_mm256_store_epi64(void *__P, __m256i __A) 
# 614
{ 
# 615
(*((__m256i *)__P)) = __A; 
# 616
} 
# 619
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 620
_mm_store_epi64(void *__P, __m128i __A) 
# 621
{ 
# 622
(*((__m128i *)__P)) = __A; 
# 623
} 
# 626
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 627
_mm256_mask_loadu_pd(__m256d __W, __mmask8 __U, const void *__P) 
# 628
{ 
# 629
return (__m256d)__builtin_ia32_loadupd256_mask((__v4df *)__P, (__v4df)__W, (__mmask8)__U); 
# 632
} 
# 635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 636
_mm256_maskz_loadu_pd(__mmask8 __U, const void *__P) 
# 637
{ 
# 638
return (__m256d)__builtin_ia32_loadupd256_mask((__v4df *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 642
} 
# 645
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 646
_mm_mask_loadu_pd(__m128d __W, __mmask8 __U, const void *__P) 
# 647
{ 
# 648
return (__m128d)__builtin_ia32_loadupd128_mask((__v2df *)__P, (__v2df)__W, (__mmask8)__U); 
# 651
} 
# 654
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 655
_mm_maskz_loadu_pd(__mmask8 __U, const void *__P) 
# 656
{ 
# 657
return (__m128d)__builtin_ia32_loadupd128_mask((__v2df *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 661
} 
# 664
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 665
_mm256_mask_storeu_pd(void *__P, __mmask8 __U, __m256d __A) 
# 666
{ 
# 667
__builtin_ia32_storeupd256_mask((__v4df *)__P, (__v4df)__A, (__mmask8)__U); 
# 670
} 
# 673
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 674
_mm_mask_storeu_pd(void *__P, __mmask8 __U, __m128d __A) 
# 675
{ 
# 676
__builtin_ia32_storeupd128_mask((__v2df *)__P, (__v2df)__A, (__mmask8)__U); 
# 679
} 
# 682
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 683
_mm256_mask_loadu_ps(__m256 __W, __mmask8 __U, const void *__P) 
# 684
{ 
# 685
return (__m256)__builtin_ia32_loadups256_mask((__v8sf *)__P, (__v8sf)__W, (__mmask8)__U); 
# 688
} 
# 691
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 692
_mm256_maskz_loadu_ps(__mmask8 __U, const void *__P) 
# 693
{ 
# 694
return (__m256)__builtin_ia32_loadups256_mask((__v8sf *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 698
} 
# 701
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 702
_mm_mask_loadu_ps(__m128 __W, __mmask8 __U, const void *__P) 
# 703
{ 
# 704
return (__m128)__builtin_ia32_loadups128_mask((__v4sf *)__P, (__v4sf)__W, (__mmask8)__U); 
# 707
} 
# 710
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 711
_mm_maskz_loadu_ps(__mmask8 __U, const void *__P) 
# 712
{ 
# 713
return (__m128)__builtin_ia32_loadups128_mask((__v4sf *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 717
} 
# 720
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 721
_mm256_mask_storeu_ps(void *__P, __mmask8 __U, __m256 __A) 
# 722
{ 
# 723
__builtin_ia32_storeups256_mask((__v8sf *)__P, (__v8sf)__A, (__mmask8)__U); 
# 726
} 
# 729
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 730
_mm_mask_storeu_ps(void *__P, __mmask8 __U, __m128 __A) 
# 731
{ 
# 732
__builtin_ia32_storeups128_mask((__v4sf *)__P, (__v4sf)__A, (__mmask8)__U); 
# 735
} 
# 738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 739
_mm256_mask_loadu_epi64(__m256i __W, __mmask8 __U, const void *__P) 
# 740
{ 
# 741
return (__m256i)__builtin_ia32_loaddqudi256_mask((__v4di *)__P, (__v4di)__W, (__mmask8)__U); 
# 744
} 
# 747
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 748
_mm256_maskz_loadu_epi64(__mmask8 __U, const void *__P) 
# 749
{ 
# 750
return (__m256i)__builtin_ia32_loaddqudi256_mask((__v4di *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 754
} 
# 757
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 758
_mm_mask_loadu_epi64(__m128i __W, __mmask8 __U, const void *__P) 
# 759
{ 
# 760
return (__m128i)__builtin_ia32_loaddqudi128_mask((__v2di *)__P, (__v2di)__W, (__mmask8)__U); 
# 763
} 
# 766
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 767
_mm_maskz_loadu_epi64(__mmask8 __U, const void *__P) 
# 768
{ 
# 769
return (__m128i)__builtin_ia32_loaddqudi128_mask((__v2di *)__P, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 773
} 
# 776
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 777
_mm256_mask_storeu_epi64(void *__P, __mmask8 __U, __m256i __A) 
# 778
{ 
# 779
__builtin_ia32_storedqudi256_mask((__v4di *)__P, (__v4di)__A, (__mmask8)__U); 
# 782
} 
# 785
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 786
_mm_mask_storeu_epi64(void *__P, __mmask8 __U, __m128i __A) 
# 787
{ 
# 788
__builtin_ia32_storedqudi128_mask((__v2di *)__P, (__v2di)__A, (__mmask8)__U); 
# 791
} 
# 794
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 795
_mm256_mask_loadu_epi32(__m256i __W, __mmask8 __U, const void *__P) 
# 796
{ 
# 797
return (__m256i)__builtin_ia32_loaddqusi256_mask((__v8si *)__P, (__v8si)__W, (__mmask8)__U); 
# 800
} 
# 803
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 804
_mm256_maskz_loadu_epi32(__mmask8 __U, const void *__P) 
# 805
{ 
# 806
return (__m256i)__builtin_ia32_loaddqusi256_mask((__v8si *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 810
} 
# 813
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 814
_mm_mask_loadu_epi32(__m128i __W, __mmask8 __U, const void *__P) 
# 815
{ 
# 816
return (__m128i)__builtin_ia32_loaddqusi128_mask((__v4si *)__P, (__v4si)__W, (__mmask8)__U); 
# 819
} 
# 822
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 823
_mm_maskz_loadu_epi32(__mmask8 __U, const void *__P) 
# 824
{ 
# 825
return (__m128i)__builtin_ia32_loaddqusi128_mask((__v4si *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 829
} 
# 832
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 833
_mm256_mask_storeu_epi32(void *__P, __mmask8 __U, __m256i __A) 
# 834
{ 
# 835
__builtin_ia32_storedqusi256_mask((__v8si *)__P, (__v8si)__A, (__mmask8)__U); 
# 838
} 
# 841
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 842
_mm_mask_storeu_epi32(void *__P, __mmask8 __U, __m128i __A) 
# 843
{ 
# 844
__builtin_ia32_storedqusi128_mask((__v4si *)__P, (__v4si)__A, (__mmask8)__U); 
# 847
} 
# 850
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 851
_mm256_mask_abs_epi32(__m256i __W, __mmask8 __U, __m256i __A) 
# 852
{ 
# 853
return (__m256i)__builtin_ia32_pabsd256_mask((__v8si)__A, (__v8si)__W, (__mmask8)__U); 
# 856
} 
# 859
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 860
_mm256_maskz_abs_epi32(__mmask8 __U, __m256i __A) 
# 861
{ 
# 862
return (__m256i)__builtin_ia32_pabsd256_mask((__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 866
} 
# 869
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 870
_mm_mask_abs_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 871
{ 
# 872
return (__m128i)__builtin_ia32_pabsd128_mask((__v4si)__A, (__v4si)__W, (__mmask8)__U); 
# 875
} 
# 878
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 879
_mm_maskz_abs_epi32(__mmask8 __U, __m128i __A) 
# 880
{ 
# 881
return (__m128i)__builtin_ia32_pabsd128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 885
} 
# 888
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 889
_mm256_abs_epi64(__m256i __A) 
# 890
{ 
# 891
return (__m256i)__builtin_ia32_pabsq256_mask((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 895
} 
# 898
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 899
_mm256_mask_abs_epi64(__m256i __W, __mmask8 __U, __m256i __A) 
# 900
{ 
# 901
return (__m256i)__builtin_ia32_pabsq256_mask((__v4di)__A, (__v4di)__W, (__mmask8)__U); 
# 904
} 
# 907
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 908
_mm256_maskz_abs_epi64(__mmask8 __U, __m256i __A) 
# 909
{ 
# 910
return (__m256i)__builtin_ia32_pabsq256_mask((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 914
} 
# 917
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 918
_mm_abs_epi64(__m128i __A) 
# 919
{ 
# 920
return (__m128i)__builtin_ia32_pabsq128_mask((__v2di)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 924
} 
# 927
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 928
_mm_mask_abs_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 929
{ 
# 930
return (__m128i)__builtin_ia32_pabsq128_mask((__v2di)__A, (__v2di)__W, (__mmask8)__U); 
# 933
} 
# 936
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 937
_mm_maskz_abs_epi64(__mmask8 __U, __m128i __A) 
# 938
{ 
# 939
return (__m128i)__builtin_ia32_pabsq128_mask((__v2di)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 943
} 
# 946
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 947
_mm256_cvtpd_epu32(__m256d __A) 
# 948
{ 
# 949
return (__m128i)__builtin_ia32_cvtpd2udq256_mask((__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 953
} 
# 956
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 957
_mm256_mask_cvtpd_epu32(__m128i __W, __mmask8 __U, __m256d __A) 
# 958
{ 
# 959
return (__m128i)__builtin_ia32_cvtpd2udq256_mask((__v4df)__A, (__v4si)__W, (__mmask8)__U); 
# 962
} 
# 965
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 966
_mm256_maskz_cvtpd_epu32(__mmask8 __U, __m256d __A) 
# 967
{ 
# 968
return (__m128i)__builtin_ia32_cvtpd2udq256_mask((__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 972
} 
# 975
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 976
_mm_cvtpd_epu32(__m128d __A) 
# 977
{ 
# 978
return (__m128i)__builtin_ia32_cvtpd2udq128_mask((__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 982
} 
# 985
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 986
_mm_mask_cvtpd_epu32(__m128i __W, __mmask8 __U, __m128d __A) 
# 987
{ 
# 988
return (__m128i)__builtin_ia32_cvtpd2udq128_mask((__v2df)__A, (__v4si)__W, (__mmask8)__U); 
# 991
} 
# 994
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 995
_mm_maskz_cvtpd_epu32(__mmask8 __U, __m128d __A) 
# 996
{ 
# 997
return (__m128i)__builtin_ia32_cvtpd2udq128_mask((__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1001
} 
# 1004
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1005
_mm256_mask_cvttps_epi32(__m256i __W, __mmask8 __U, __m256 __A) 
# 1006
{ 
# 1007
return (__m256i)__builtin_ia32_cvttps2dq256_mask((__v8sf)__A, (__v8si)__W, (__mmask8)__U); 
# 1010
} 
# 1013
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1014
_mm256_maskz_cvttps_epi32(__mmask8 __U, __m256 __A) 
# 1015
{ 
# 1016
return (__m256i)__builtin_ia32_cvttps2dq256_mask((__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 1020
} 
# 1023
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1024
_mm_mask_cvttps_epi32(__m128i __W, __mmask8 __U, __m128 __A) 
# 1025
{ 
# 1026
return (__m128i)__builtin_ia32_cvttps2dq128_mask((__v4sf)__A, (__v4si)__W, (__mmask8)__U); 
# 1029
} 
# 1032
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1033
_mm_maskz_cvttps_epi32(__mmask8 __U, __m128 __A) 
# 1034
{ 
# 1035
return (__m128i)__builtin_ia32_cvttps2dq128_mask((__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1039
} 
# 1042
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1043
_mm256_cvttps_epu32(__m256 __A) 
# 1044
{ 
# 1045
return (__m256i)__builtin_ia32_cvttps2udq256_mask((__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 1049
} 
# 1052
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1053
_mm256_mask_cvttps_epu32(__m256i __W, __mmask8 __U, __m256 __A) 
# 1054
{ 
# 1055
return (__m256i)__builtin_ia32_cvttps2udq256_mask((__v8sf)__A, (__v8si)__W, (__mmask8)__U); 
# 1058
} 
# 1061
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1062
_mm256_maskz_cvttps_epu32(__mmask8 __U, __m256 __A) 
# 1063
{ 
# 1064
return (__m256i)__builtin_ia32_cvttps2udq256_mask((__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 1068
} 
# 1071
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1072
_mm_cvttps_epu32(__m128 __A) 
# 1073
{ 
# 1074
return (__m128i)__builtin_ia32_cvttps2udq128_mask((__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 1078
} 
# 1081
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1082
_mm_mask_cvttps_epu32(__m128i __W, __mmask8 __U, __m128 __A) 
# 1083
{ 
# 1084
return (__m128i)__builtin_ia32_cvttps2udq128_mask((__v4sf)__A, (__v4si)__W, (__mmask8)__U); 
# 1087
} 
# 1090
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1091
_mm_maskz_cvttps_epu32(__mmask8 __U, __m128 __A) 
# 1092
{ 
# 1093
return (__m128i)__builtin_ia32_cvttps2udq128_mask((__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1097
} 
# 1100
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1101
_mm256_mask_cvttpd_epi32(__m128i __W, __mmask8 __U, __m256d __A) 
# 1102
{ 
# 1103
return (__m128i)__builtin_ia32_cvttpd2dq256_mask((__v4df)__A, (__v4si)__W, (__mmask8)__U); 
# 1106
} 
# 1109
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1110
_mm256_maskz_cvttpd_epi32(__mmask8 __U, __m256d __A) 
# 1111
{ 
# 1112
return (__m128i)__builtin_ia32_cvttpd2dq256_mask((__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1116
} 
# 1119
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1120
_mm_mask_cvttpd_epi32(__m128i __W, __mmask8 __U, __m128d __A) 
# 1121
{ 
# 1122
return (__m128i)__builtin_ia32_cvttpd2dq128_mask((__v2df)__A, (__v4si)__W, (__mmask8)__U); 
# 1125
} 
# 1128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1129
_mm_maskz_cvttpd_epi32(__mmask8 __U, __m128d __A) 
# 1130
{ 
# 1131
return (__m128i)__builtin_ia32_cvttpd2dq128_mask((__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1135
} 
# 1138
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1139
_mm256_cvttpd_epu32(__m256d __A) 
# 1140
{ 
# 1141
return (__m128i)__builtin_ia32_cvttpd2udq256_mask((__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 1145
} 
# 1148
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1149
_mm256_mask_cvttpd_epu32(__m128i __W, __mmask8 __U, __m256d __A) 
# 1150
{ 
# 1151
return (__m128i)__builtin_ia32_cvttpd2udq256_mask((__v4df)__A, (__v4si)__W, (__mmask8)__U); 
# 1154
} 
# 1157
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1158
_mm256_maskz_cvttpd_epu32(__mmask8 __U, __m256d __A) 
# 1159
{ 
# 1160
return (__m128i)__builtin_ia32_cvttpd2udq256_mask((__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1164
} 
# 1167
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1168
_mm_cvttpd_epu32(__m128d __A) 
# 1169
{ 
# 1170
return (__m128i)__builtin_ia32_cvttpd2udq128_mask((__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 1174
} 
# 1177
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1178
_mm_mask_cvttpd_epu32(__m128i __W, __mmask8 __U, __m128d __A) 
# 1179
{ 
# 1180
return (__m128i)__builtin_ia32_cvttpd2udq128_mask((__v2df)__A, (__v4si)__W, (__mmask8)__U); 
# 1183
} 
# 1186
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1187
_mm_maskz_cvttpd_epu32(__mmask8 __U, __m128d __A) 
# 1188
{ 
# 1189
return (__m128i)__builtin_ia32_cvttpd2udq128_mask((__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1193
} 
# 1196
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1197
_mm256_mask_cvtpd_epi32(__m128i __W, __mmask8 __U, __m256d __A) 
# 1198
{ 
# 1199
return (__m128i)__builtin_ia32_cvtpd2dq256_mask((__v4df)__A, (__v4si)__W, (__mmask8)__U); 
# 1202
} 
# 1205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1206
_mm256_maskz_cvtpd_epi32(__mmask8 __U, __m256d __A) 
# 1207
{ 
# 1208
return (__m128i)__builtin_ia32_cvtpd2dq256_mask((__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1212
} 
# 1215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1216
_mm_mask_cvtpd_epi32(__m128i __W, __mmask8 __U, __m128d __A) 
# 1217
{ 
# 1218
return (__m128i)__builtin_ia32_cvtpd2dq128_mask((__v2df)__A, (__v4si)__W, (__mmask8)__U); 
# 1221
} 
# 1224
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1225
_mm_maskz_cvtpd_epi32(__mmask8 __U, __m128d __A) 
# 1226
{ 
# 1227
return (__m128i)__builtin_ia32_cvtpd2dq128_mask((__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 1231
} 
# 1234
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1235
_mm256_mask_cvtepi32_pd(__m256d __W, __mmask8 __U, __m128i __A) 
# 1236
{ 
# 1237
return (__m256d)__builtin_ia32_cvtdq2pd256_mask((__v4si)__A, (__v4df)__W, (__mmask8)__U); 
# 1240
} 
# 1243
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1244
_mm256_maskz_cvtepi32_pd(__mmask8 __U, __m128i __A) 
# 1245
{ 
# 1246
return (__m256d)__builtin_ia32_cvtdq2pd256_mask((__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1250
} 
# 1253
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1254
_mm_mask_cvtepi32_pd(__m128d __W, __mmask8 __U, __m128i __A) 
# 1255
{ 
# 1256
return (__m128d)__builtin_ia32_cvtdq2pd128_mask((__v4si)__A, (__v2df)__W, (__mmask8)__U); 
# 1259
} 
# 1262
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1263
_mm_maskz_cvtepi32_pd(__mmask8 __U, __m128i __A) 
# 1264
{ 
# 1265
return (__m128d)__builtin_ia32_cvtdq2pd128_mask((__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1269
} 
# 1272
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1273
_mm256_cvtepu32_pd(__m128i __A) 
# 1274
{ 
# 1275
return (__m256d)__builtin_ia32_cvtudq2pd256_mask((__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 1279
} 
# 1282
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1283
_mm256_mask_cvtepu32_pd(__m256d __W, __mmask8 __U, __m128i __A) 
# 1284
{ 
# 1285
return (__m256d)__builtin_ia32_cvtudq2pd256_mask((__v4si)__A, (__v4df)__W, (__mmask8)__U); 
# 1288
} 
# 1291
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1292
_mm256_maskz_cvtepu32_pd(__mmask8 __U, __m128i __A) 
# 1293
{ 
# 1294
return (__m256d)__builtin_ia32_cvtudq2pd256_mask((__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1298
} 
# 1301
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1302
_mm_cvtepu32_pd(__m128i __A) 
# 1303
{ 
# 1304
return (__m128d)__builtin_ia32_cvtudq2pd128_mask((__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 1308
} 
# 1311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1312
_mm_mask_cvtepu32_pd(__m128d __W, __mmask8 __U, __m128i __A) 
# 1313
{ 
# 1314
return (__m128d)__builtin_ia32_cvtudq2pd128_mask((__v4si)__A, (__v2df)__W, (__mmask8)__U); 
# 1317
} 
# 1320
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1321
_mm_maskz_cvtepu32_pd(__mmask8 __U, __m128i __A) 
# 1322
{ 
# 1323
return (__m128d)__builtin_ia32_cvtudq2pd128_mask((__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1327
} 
# 1330
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1331
_mm256_mask_cvtepi32_ps(__m256 __W, __mmask8 __U, __m256i __A) 
# 1332
{ 
# 1333
return (__m256)__builtin_ia32_cvtdq2ps256_mask((__v8si)__A, (__v8sf)__W, (__mmask8)__U); 
# 1336
} 
# 1339
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1340
_mm256_maskz_cvtepi32_ps(__mmask16 __U, __m256i __A) 
# 1341
{ 
# 1342
return (__m256)__builtin_ia32_cvtdq2ps256_mask((__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 1346
} 
# 1349
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1350
_mm_mask_cvtepi32_ps(__m128 __W, __mmask8 __U, __m128i __A) 
# 1351
{ 
# 1352
return (__m128)__builtin_ia32_cvtdq2ps128_mask((__v4si)__A, (__v4sf)__W, (__mmask8)__U); 
# 1355
} 
# 1358
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1359
_mm_maskz_cvtepi32_ps(__mmask16 __U, __m128i __A) 
# 1360
{ 
# 1361
return (__m128)__builtin_ia32_cvtdq2ps128_mask((__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 1365
} 
# 1368
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1369
_mm256_cvtepu32_ps(__m256i __A) 
# 1370
{ 
# 1371
return (__m256)__builtin_ia32_cvtudq2ps256_mask((__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 1375
} 
# 1378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1379
_mm256_mask_cvtepu32_ps(__m256 __W, __mmask8 __U, __m256i __A) 
# 1380
{ 
# 1381
return (__m256)__builtin_ia32_cvtudq2ps256_mask((__v8si)__A, (__v8sf)__W, (__mmask8)__U); 
# 1384
} 
# 1387
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1388
_mm256_maskz_cvtepu32_ps(__mmask8 __U, __m256i __A) 
# 1389
{ 
# 1390
return (__m256)__builtin_ia32_cvtudq2ps256_mask((__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 1394
} 
# 1397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1398
_mm_cvtepu32_ps(__m128i __A) 
# 1399
{ 
# 1400
return (__m128)__builtin_ia32_cvtudq2ps128_mask((__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 1404
} 
# 1407
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1408
_mm_mask_cvtepu32_ps(__m128 __W, __mmask8 __U, __m128i __A) 
# 1409
{ 
# 1410
return (__m128)__builtin_ia32_cvtudq2ps128_mask((__v4si)__A, (__v4sf)__W, (__mmask8)__U); 
# 1413
} 
# 1416
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1417
_mm_maskz_cvtepu32_ps(__mmask8 __U, __m128i __A) 
# 1418
{ 
# 1419
return (__m128)__builtin_ia32_cvtudq2ps128_mask((__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 1423
} 
# 1426
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1427
_mm256_mask_cvtps_pd(__m256d __W, __mmask8 __U, __m128 __A) 
# 1428
{ 
# 1429
return (__m256d)__builtin_ia32_cvtps2pd256_mask((__v4sf)__A, (__v4df)__W, (__mmask8)__U); 
# 1432
} 
# 1435
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1436
_mm256_maskz_cvtps_pd(__mmask8 __U, __m128 __A) 
# 1437
{ 
# 1438
return (__m256d)__builtin_ia32_cvtps2pd256_mask((__v4sf)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1442
} 
# 1445
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1446
_mm_mask_cvtps_pd(__m128d __W, __mmask8 __U, __m128 __A) 
# 1447
{ 
# 1448
return (__m128d)__builtin_ia32_cvtps2pd128_mask((__v4sf)__A, (__v2df)__W, (__mmask8)__U); 
# 1451
} 
# 1454
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1455
_mm_maskz_cvtps_pd(__mmask8 __U, __m128 __A) 
# 1456
{ 
# 1457
return (__m128d)__builtin_ia32_cvtps2pd128_mask((__v4sf)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1461
} 
# 1464
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1465
_mm_cvtepi32_epi8(__m128i __A) 
# 1466
{ 
# 1467
return (__m128i)__builtin_ia32_pmovdb128_mask((__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1470
} 
# 1473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1474
_mm_mask_cvtepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) 
# 1475
{ 
# 1476
__builtin_ia32_pmovdb128mem_mask((__v16qi *)__P, (__v4si)__A, __M); 
# 1477
} 
# 1480
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1481
_mm_mask_cvtepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 1482
{ 
# 1483
return (__m128i)__builtin_ia32_pmovdb128_mask((__v4si)__A, (__v16qi)__O, __M); 
# 1485
} 
# 1488
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1489
_mm_maskz_cvtepi32_epi8(__mmask8 __M, __m128i __A) 
# 1490
{ 
# 1491
return (__m128i)__builtin_ia32_pmovdb128_mask((__v4si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1495
} 
# 1498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1499
_mm256_cvtepi32_epi8(__m256i __A) 
# 1500
{ 
# 1501
return (__m128i)__builtin_ia32_pmovdb256_mask((__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1504
} 
# 1507
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1508
_mm256_mask_cvtepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) 
# 1509
{ 
# 1510
return (__m128i)__builtin_ia32_pmovdb256_mask((__v8si)__A, (__v16qi)__O, __M); 
# 1512
} 
# 1515
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1516
_mm256_mask_cvtepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) 
# 1517
{ 
# 1518
__builtin_ia32_pmovdb256mem_mask((__v16qi *)__P, (__v8si)__A, __M); 
# 1519
} 
# 1522
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1523
_mm256_maskz_cvtepi32_epi8(__mmask8 __M, __m256i __A) 
# 1524
{ 
# 1525
return (__m128i)__builtin_ia32_pmovdb256_mask((__v8si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1529
} 
# 1532
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1533
_mm_cvtsepi32_epi8(__m128i __A) 
# 1534
{ 
# 1535
return (__m128i)__builtin_ia32_pmovsdb128_mask((__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1538
} 
# 1541
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1542
_mm_mask_cvtsepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) 
# 1543
{ 
# 1544
__builtin_ia32_pmovsdb128mem_mask((__v16qi *)__P, (__v4si)__A, __M); 
# 1545
} 
# 1548
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1549
_mm_mask_cvtsepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 1550
{ 
# 1551
return (__m128i)__builtin_ia32_pmovsdb128_mask((__v4si)__A, (__v16qi)__O, __M); 
# 1553
} 
# 1556
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1557
_mm_maskz_cvtsepi32_epi8(__mmask8 __M, __m128i __A) 
# 1558
{ 
# 1559
return (__m128i)__builtin_ia32_pmovsdb128_mask((__v4si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1563
} 
# 1566
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1567
_mm256_cvtsepi32_epi8(__m256i __A) 
# 1568
{ 
# 1569
return (__m128i)__builtin_ia32_pmovsdb256_mask((__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1572
} 
# 1575
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1576
_mm256_mask_cvtsepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) 
# 1577
{ 
# 1578
__builtin_ia32_pmovsdb256mem_mask((__v16qi *)__P, (__v8si)__A, __M); 
# 1579
} 
# 1582
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1583
_mm256_mask_cvtsepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) 
# 1584
{ 
# 1585
return (__m128i)__builtin_ia32_pmovsdb256_mask((__v8si)__A, (__v16qi)__O, __M); 
# 1587
} 
# 1590
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1591
_mm256_maskz_cvtsepi32_epi8(__mmask8 __M, __m256i __A) 
# 1592
{ 
# 1593
return (__m128i)__builtin_ia32_pmovsdb256_mask((__v8si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1597
} 
# 1600
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1601
_mm_cvtusepi32_epi8(__m128i __A) 
# 1602
{ 
# 1603
return (__m128i)__builtin_ia32_pmovusdb128_mask((__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1606
} 
# 1609
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1610
_mm_mask_cvtusepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) 
# 1611
{ 
# 1612
__builtin_ia32_pmovusdb128mem_mask((__v16qi *)__P, (__v4si)__A, __M); 
# 1613
} 
# 1616
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1617
_mm_mask_cvtusepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 1618
{ 
# 1619
return (__m128i)__builtin_ia32_pmovusdb128_mask((__v4si)__A, (__v16qi)__O, __M); 
# 1622
} 
# 1625
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1626
_mm_maskz_cvtusepi32_epi8(__mmask8 __M, __m128i __A) 
# 1627
{ 
# 1628
return (__m128i)__builtin_ia32_pmovusdb128_mask((__v4si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1632
} 
# 1635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1636
_mm256_cvtusepi32_epi8(__m256i __A) 
# 1637
{ 
# 1638
return (__m128i)__builtin_ia32_pmovusdb256_mask((__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1641
} 
# 1644
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1645
_mm256_mask_cvtusepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) 
# 1646
{ 
# 1647
__builtin_ia32_pmovusdb256mem_mask((__v16qi *)__P, (__v8si)__A, __M); 
# 1648
} 
# 1651
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1652
_mm256_mask_cvtusepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) 
# 1653
{ 
# 1654
return (__m128i)__builtin_ia32_pmovusdb256_mask((__v8si)__A, (__v16qi)__O, __M); 
# 1657
} 
# 1660
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1661
_mm256_maskz_cvtusepi32_epi8(__mmask8 __M, __m256i __A) 
# 1662
{ 
# 1663
return (__m128i)__builtin_ia32_pmovusdb256_mask((__v8si)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1667
} 
# 1670
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1671
_mm_cvtepi32_epi16(__m128i __A) 
# 1672
{ 
# 1673
return (__m128i)__builtin_ia32_pmovdw128_mask((__v4si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)(-1)); 
# 1676
} 
# 1679
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1680
_mm_mask_cvtepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) 
# 1681
{ 
# 1682
__builtin_ia32_pmovdw128mem_mask((__v8hi *)__P, (__v4si)__A, __M); 
# 1683
} 
# 1686
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1687
_mm_mask_cvtepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) 
# 1688
{ 
# 1689
return (__m128i)__builtin_ia32_pmovdw128_mask((__v4si)__A, (__v8hi)__O, __M); 
# 1691
} 
# 1694
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1695
_mm_maskz_cvtepi32_epi16(__mmask8 __M, __m128i __A) 
# 1696
{ 
# 1697
return (__m128i)__builtin_ia32_pmovdw128_mask((__v4si)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 1701
} 
# 1704
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1705
_mm256_cvtepi32_epi16(__m256i __A) 
# 1706
{ 
# 1707
return (__m128i)__builtin_ia32_pmovdw256_mask((__v8si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)(-1)); 
# 1710
} 
# 1713
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1714
_mm256_mask_cvtepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) 
# 1715
{ 
# 1716
__builtin_ia32_pmovdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M); 
# 1717
} 
# 1720
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1721
_mm256_mask_cvtepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) 
# 1722
{ 
# 1723
return (__m128i)__builtin_ia32_pmovdw256_mask((__v8si)__A, (__v8hi)__O, __M); 
# 1725
} 
# 1728
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1729
_mm256_maskz_cvtepi32_epi16(__mmask8 __M, __m256i __A) 
# 1730
{ 
# 1731
return (__m128i)__builtin_ia32_pmovdw256_mask((__v8si)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 1735
} 
# 1738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1739
_mm_cvtsepi32_epi16(__m128i __A) 
# 1740
{ 
# 1741
return (__m128i)__builtin_ia32_pmovsdw128_mask((__v4si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)(-1)); 
# 1744
} 
# 1747
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1748
_mm_mask_cvtsepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) 
# 1749
{ 
# 1750
__builtin_ia32_pmovsdw128mem_mask((__v8hi *)__P, (__v4si)__A, __M); 
# 1751
} 
# 1754
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1755
_mm_mask_cvtsepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) 
# 1756
{ 
# 1757
return (__m128i)__builtin_ia32_pmovsdw128_mask((__v4si)__A, (__v8hi)__O, __M); 
# 1760
} 
# 1763
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1764
_mm_maskz_cvtsepi32_epi16(__mmask8 __M, __m128i __A) 
# 1765
{ 
# 1766
return (__m128i)__builtin_ia32_pmovsdw128_mask((__v4si)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 1770
} 
# 1773
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1774
_mm256_cvtsepi32_epi16(__m256i __A) 
# 1775
{ 
# 1776
return (__m128i)__builtin_ia32_pmovsdw256_mask((__v8si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1779
} 
# 1782
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1783
_mm256_mask_cvtsepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) 
# 1784
{ 
# 1785
__builtin_ia32_pmovsdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M); 
# 1786
} 
# 1789
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1790
_mm256_mask_cvtsepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) 
# 1791
{ 
# 1792
return (__m128i)__builtin_ia32_pmovsdw256_mask((__v8si)__A, (__v8hi)__O, __M); 
# 1794
} 
# 1797
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1798
_mm256_maskz_cvtsepi32_epi16(__mmask8 __M, __m256i __A) 
# 1799
{ 
# 1800
return (__m128i)__builtin_ia32_pmovsdw256_mask((__v8si)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 1804
} 
# 1807
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1808
_mm_cvtusepi32_epi16(__m128i __A) 
# 1809
{ 
# 1810
return (__m128i)__builtin_ia32_pmovusdw128_mask((__v4si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1813
} 
# 1816
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1817
_mm_mask_cvtusepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) 
# 1818
{ 
# 1819
__builtin_ia32_pmovusdw128mem_mask((__v8hi *)__P, (__v4si)__A, __M); 
# 1820
} 
# 1823
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1824
_mm_mask_cvtusepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) 
# 1825
{ 
# 1826
return (__m128i)__builtin_ia32_pmovusdw128_mask((__v4si)__A, (__v8hi)__O, __M); 
# 1828
} 
# 1831
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1832
_mm_maskz_cvtusepi32_epi16(__mmask8 __M, __m128i __A) 
# 1833
{ 
# 1834
return (__m128i)__builtin_ia32_pmovusdw128_mask((__v4si)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 1838
} 
# 1841
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1842
_mm256_cvtusepi32_epi16(__m256i __A) 
# 1843
{ 
# 1844
return (__m128i)__builtin_ia32_pmovusdw256_mask((__v8si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1847
} 
# 1850
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1851
_mm256_mask_cvtusepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) 
# 1852
{ 
# 1853
__builtin_ia32_pmovusdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M); 
# 1854
} 
# 1857
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1858
_mm256_mask_cvtusepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) 
# 1859
{ 
# 1860
return (__m128i)__builtin_ia32_pmovusdw256_mask((__v8si)__A, (__v8hi)__O, __M); 
# 1862
} 
# 1865
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1866
_mm256_maskz_cvtusepi32_epi16(__mmask8 __M, __m256i __A) 
# 1867
{ 
# 1868
return (__m128i)__builtin_ia32_pmovusdw256_mask((__v8si)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 1872
} 
# 1875
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1876
_mm_cvtepi64_epi8(__m128i __A) 
# 1877
{ 
# 1878
return (__m128i)__builtin_ia32_pmovqb128_mask((__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1881
} 
# 1884
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1885
_mm_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) 
# 1886
{ 
# 1887
__builtin_ia32_pmovqb128mem_mask((__v16qi *)__P, (__v2di)__A, __M); 
# 1888
} 
# 1891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1892
_mm_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 1893
{ 
# 1894
return (__m128i)__builtin_ia32_pmovqb128_mask((__v2di)__A, (__v16qi)__O, __M); 
# 1896
} 
# 1899
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1900
_mm_maskz_cvtepi64_epi8(__mmask8 __M, __m128i __A) 
# 1901
{ 
# 1902
return (__m128i)__builtin_ia32_pmovqb128_mask((__v2di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1906
} 
# 1909
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1910
_mm256_cvtepi64_epi8(__m256i __A) 
# 1911
{ 
# 1912
return (__m128i)__builtin_ia32_pmovqb256_mask((__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1915
} 
# 1918
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1919
_mm256_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) 
# 1920
{ 
# 1921
__builtin_ia32_pmovqb256mem_mask((__v16qi *)__P, (__v4di)__A, __M); 
# 1922
} 
# 1925
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1926
_mm256_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) 
# 1927
{ 
# 1928
return (__m128i)__builtin_ia32_pmovqb256_mask((__v4di)__A, (__v16qi)__O, __M); 
# 1930
} 
# 1933
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1934
_mm256_maskz_cvtepi64_epi8(__mmask8 __M, __m256i __A) 
# 1935
{ 
# 1936
return (__m128i)__builtin_ia32_pmovqb256_mask((__v4di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1940
} 
# 1943
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1944
_mm_cvtsepi64_epi8(__m128i __A) 
# 1945
{ 
# 1946
return (__m128i)__builtin_ia32_pmovsqb128_mask((__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1949
} 
# 1952
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1953
_mm_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) 
# 1954
{ 
# 1955
__builtin_ia32_pmovsqb128mem_mask((__v16qi *)__P, (__v2di)__A, __M); 
# 1956
} 
# 1959
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1960
_mm_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 1961
{ 
# 1962
return (__m128i)__builtin_ia32_pmovsqb128_mask((__v2di)__A, (__v16qi)__O, __M); 
# 1964
} 
# 1967
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1968
_mm_maskz_cvtsepi64_epi8(__mmask8 __M, __m128i __A) 
# 1969
{ 
# 1970
return (__m128i)__builtin_ia32_pmovsqb128_mask((__v2di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 1974
} 
# 1977
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1978
_mm256_cvtsepi64_epi8(__m256i __A) 
# 1979
{ 
# 1980
return (__m128i)__builtin_ia32_pmovsqb256_mask((__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 1983
} 
# 1986
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 1987
_mm256_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) 
# 1988
{ 
# 1989
__builtin_ia32_pmovsqb256mem_mask((__v16qi *)__P, (__v4di)__A, __M); 
# 1990
} 
# 1993
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1994
_mm256_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) 
# 1995
{ 
# 1996
return (__m128i)__builtin_ia32_pmovsqb256_mask((__v4di)__A, (__v16qi)__O, __M); 
# 1998
} 
# 2001
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2002
_mm256_maskz_cvtsepi64_epi8(__mmask8 __M, __m256i __A) 
# 2003
{ 
# 2004
return (__m128i)__builtin_ia32_pmovsqb256_mask((__v4di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 2008
} 
# 2011
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2012
_mm_cvtusepi64_epi8(__m128i __A) 
# 2013
{ 
# 2014
return (__m128i)__builtin_ia32_pmovusqb128_mask((__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2017
} 
# 2020
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2021
_mm_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) 
# 2022
{ 
# 2023
__builtin_ia32_pmovusqb128mem_mask((__v16qi *)__P, (__v2di)__A, __M); 
# 2024
} 
# 2027
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2028
_mm_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 2029
{ 
# 2030
return (__m128i)__builtin_ia32_pmovusqb128_mask((__v2di)__A, (__v16qi)__O, __M); 
# 2033
} 
# 2036
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2037
_mm_maskz_cvtusepi64_epi8(__mmask8 __M, __m128i __A) 
# 2038
{ 
# 2039
return (__m128i)__builtin_ia32_pmovusqb128_mask((__v2di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 2043
} 
# 2046
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2047
_mm256_cvtusepi64_epi8(__m256i __A) 
# 2048
{ 
# 2049
return (__m128i)__builtin_ia32_pmovusqb256_mask((__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2052
} 
# 2055
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2056
_mm256_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) 
# 2057
{ 
# 2058
__builtin_ia32_pmovusqb256mem_mask((__v16qi *)__P, (__v4di)__A, __M); 
# 2059
} 
# 2062
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2063
_mm256_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) 
# 2064
{ 
# 2065
return (__m128i)__builtin_ia32_pmovusqb256_mask((__v4di)__A, (__v16qi)__O, __M); 
# 2068
} 
# 2071
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2072
_mm256_maskz_cvtusepi64_epi8(__mmask8 __M, __m256i __A) 
# 2073
{ 
# 2074
return (__m128i)__builtin_ia32_pmovusqb256_mask((__v4di)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 2078
} 
# 2081
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2082
_mm_cvtepi64_epi16(__m128i __A) 
# 2083
{ 
# 2084
return (__m128i)__builtin_ia32_pmovqw128_mask((__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2087
} 
# 2090
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2091
_mm_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) 
# 2092
{ 
# 2093
__builtin_ia32_pmovqw128mem_mask((__v8hi *)__P, (__v2di)__A, __M); 
# 2094
} 
# 2097
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2098
_mm_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) 
# 2099
{ 
# 2100
return (__m128i)__builtin_ia32_pmovqw128_mask((__v2di)__A, (__v8hi)__O, __M); 
# 2103
} 
# 2106
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2107
_mm_maskz_cvtepi64_epi16(__mmask8 __M, __m128i __A) 
# 2108
{ 
# 2109
return (__m128i)__builtin_ia32_pmovqw128_mask((__v2di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 2113
} 
# 2116
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2117
_mm256_cvtepi64_epi16(__m256i __A) 
# 2118
{ 
# 2119
return (__m128i)__builtin_ia32_pmovqw256_mask((__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2122
} 
# 2125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2126
_mm256_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) 
# 2127
{ 
# 2128
__builtin_ia32_pmovqw256mem_mask((__v8hi *)__P, (__v4di)__A, __M); 
# 2129
} 
# 2132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2133
_mm256_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) 
# 2134
{ 
# 2135
return (__m128i)__builtin_ia32_pmovqw256_mask((__v4di)__A, (__v8hi)__O, __M); 
# 2137
} 
# 2140
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2141
_mm256_maskz_cvtepi64_epi16(__mmask8 __M, __m256i __A) 
# 2142
{ 
# 2143
return (__m128i)__builtin_ia32_pmovqw256_mask((__v4di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 2147
} 
# 2150
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2151
_mm_cvtsepi64_epi16(__m128i __A) 
# 2152
{ 
# 2153
return (__m128i)__builtin_ia32_pmovsqw128_mask((__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2156
} 
# 2159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2160
_mm_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) 
# 2161
{ 
# 2162
__builtin_ia32_pmovsqw128mem_mask((__v8hi *)__P, (__v2di)__A, __M); 
# 2163
} 
# 2166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2167
_mm_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) 
# 2168
{ 
# 2169
return (__m128i)__builtin_ia32_pmovsqw128_mask((__v2di)__A, (__v8hi)__O, __M); 
# 2171
} 
# 2174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2175
_mm_maskz_cvtsepi64_epi16(__mmask8 __M, __m128i __A) 
# 2176
{ 
# 2177
return (__m128i)__builtin_ia32_pmovsqw128_mask((__v2di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 2181
} 
# 2184
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2185
_mm256_cvtsepi64_epi16(__m256i __A) 
# 2186
{ 
# 2187
return (__m128i)__builtin_ia32_pmovsqw256_mask((__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2190
} 
# 2193
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2194
_mm256_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) 
# 2195
{ 
# 2196
__builtin_ia32_pmovsqw256mem_mask((__v8hi *)__P, (__v4di)__A, __M); 
# 2197
} 
# 2200
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2201
_mm256_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) 
# 2202
{ 
# 2203
return (__m128i)__builtin_ia32_pmovsqw256_mask((__v4di)__A, (__v8hi)__O, __M); 
# 2205
} 
# 2208
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2209
_mm256_maskz_cvtsepi64_epi16(__mmask8 __M, __m256i __A) 
# 2210
{ 
# 2211
return (__m128i)__builtin_ia32_pmovsqw256_mask((__v4di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 2215
} 
# 2218
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2219
_mm_cvtusepi64_epi16(__m128i __A) 
# 2220
{ 
# 2221
return (__m128i)__builtin_ia32_pmovusqw128_mask((__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2224
} 
# 2227
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2228
_mm_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) 
# 2229
{ 
# 2230
__builtin_ia32_pmovusqw128mem_mask((__v8hi *)__P, (__v2di)__A, __M); 
# 2231
} 
# 2234
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2235
_mm_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) 
# 2236
{ 
# 2237
return (__m128i)__builtin_ia32_pmovusqw128_mask((__v2di)__A, (__v8hi)__O, __M); 
# 2239
} 
# 2242
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2243
_mm_maskz_cvtusepi64_epi16(__mmask8 __M, __m128i __A) 
# 2244
{ 
# 2245
return (__m128i)__builtin_ia32_pmovusqw128_mask((__v2di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 2249
} 
# 2252
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2253
_mm256_cvtusepi64_epi16(__m256i __A) 
# 2254
{ 
# 2255
return (__m128i)__builtin_ia32_pmovusqw256_mask((__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2258
} 
# 2261
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2262
_mm256_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) 
# 2263
{ 
# 2264
__builtin_ia32_pmovusqw256mem_mask((__v8hi *)__P, (__v4di)__A, __M); 
# 2265
} 
# 2268
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2269
_mm256_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) 
# 2270
{ 
# 2271
return (__m128i)__builtin_ia32_pmovusqw256_mask((__v4di)__A, (__v8hi)__O, __M); 
# 2273
} 
# 2276
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2277
_mm256_maskz_cvtusepi64_epi16(__mmask8 __M, __m256i __A) 
# 2278
{ 
# 2279
return (__m128i)__builtin_ia32_pmovusqw256_mask((__v4di)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 2283
} 
# 2286
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2287
_mm_cvtepi64_epi32(__m128i __A) 
# 2288
{ 
# 2289
return (__m128i)__builtin_ia32_pmovqd128_mask((__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2292
} 
# 2295
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2296
_mm_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) 
# 2297
{ 
# 2298
__builtin_ia32_pmovqd128mem_mask((__v4si *)__P, (__v2di)__A, __M); 
# 2299
} 
# 2302
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2303
_mm_mask_cvtepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) 
# 2304
{ 
# 2305
return (__m128i)__builtin_ia32_pmovqd128_mask((__v2di)__A, (__v4si)__O, __M); 
# 2307
} 
# 2310
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2311
_mm_maskz_cvtepi64_epi32(__mmask8 __M, __m128i __A) 
# 2312
{ 
# 2313
return (__m128i)__builtin_ia32_pmovqd128_mask((__v2di)__A, (__v4si)_mm_setzero_si128(), __M); 
# 2317
} 
# 2320
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2321
_mm256_cvtepi64_epi32(__m256i __A) 
# 2322
{ 
# 2323
return (__m128i)__builtin_ia32_pmovqd256_mask((__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2326
} 
# 2329
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2330
_mm256_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) 
# 2331
{ 
# 2332
__builtin_ia32_pmovqd256mem_mask((__v4si *)__P, (__v4di)__A, __M); 
# 2333
} 
# 2336
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2337
_mm256_mask_cvtepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) 
# 2338
{ 
# 2339
return (__m128i)__builtin_ia32_pmovqd256_mask((__v4di)__A, (__v4si)__O, __M); 
# 2341
} 
# 2344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2345
_mm256_maskz_cvtepi64_epi32(__mmask8 __M, __m256i __A) 
# 2346
{ 
# 2347
return (__m128i)__builtin_ia32_pmovqd256_mask((__v4di)__A, (__v4si)_mm_setzero_si128(), __M); 
# 2351
} 
# 2354
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2355
_mm_cvtsepi64_epi32(__m128i __A) 
# 2356
{ 
# 2357
return (__m128i)__builtin_ia32_pmovsqd128_mask((__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2360
} 
# 2363
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2364
_mm_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) 
# 2365
{ 
# 2366
__builtin_ia32_pmovsqd128mem_mask((__v4si *)__P, (__v2di)__A, __M); 
# 2367
} 
# 2370
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2371
_mm_mask_cvtsepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) 
# 2372
{ 
# 2373
return (__m128i)__builtin_ia32_pmovsqd128_mask((__v2di)__A, (__v4si)__O, __M); 
# 2375
} 
# 2378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2379
_mm_maskz_cvtsepi64_epi32(__mmask8 __M, __m128i __A) 
# 2380
{ 
# 2381
return (__m128i)__builtin_ia32_pmovsqd128_mask((__v2di)__A, (__v4si)_mm_setzero_si128(), __M); 
# 2385
} 
# 2388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2389
_mm256_cvtsepi64_epi32(__m256i __A) 
# 2390
{ 
# 2391
return (__m128i)__builtin_ia32_pmovsqd256_mask((__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2394
} 
# 2397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2398
_mm256_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) 
# 2399
{ 
# 2400
__builtin_ia32_pmovsqd256mem_mask((__v4si *)__P, (__v4di)__A, __M); 
# 2401
} 
# 2404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2405
_mm256_mask_cvtsepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) 
# 2406
{ 
# 2407
return (__m128i)__builtin_ia32_pmovsqd256_mask((__v4di)__A, (__v4si)__O, __M); 
# 2410
} 
# 2413
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2414
_mm256_maskz_cvtsepi64_epi32(__mmask8 __M, __m256i __A) 
# 2415
{ 
# 2416
return (__m128i)__builtin_ia32_pmovsqd256_mask((__v4di)__A, (__v4si)_mm_setzero_si128(), __M); 
# 2420
} 
# 2423
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2424
_mm_cvtusepi64_epi32(__m128i __A) 
# 2425
{ 
# 2426
return (__m128i)__builtin_ia32_pmovusqd128_mask((__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2429
} 
# 2432
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2433
_mm_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) 
# 2434
{ 
# 2435
__builtin_ia32_pmovusqd128mem_mask((__v4si *)__P, (__v2di)__A, __M); 
# 2436
} 
# 2439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2440
_mm_mask_cvtusepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) 
# 2441
{ 
# 2442
return (__m128i)__builtin_ia32_pmovusqd128_mask((__v2di)__A, (__v4si)__O, __M); 
# 2444
} 
# 2447
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2448
_mm_maskz_cvtusepi64_epi32(__mmask8 __M, __m128i __A) 
# 2449
{ 
# 2450
return (__m128i)__builtin_ia32_pmovusqd128_mask((__v2di)__A, (__v4si)_mm_setzero_si128(), __M); 
# 2454
} 
# 2457
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2458
_mm256_cvtusepi64_epi32(__m256i __A) 
# 2459
{ 
# 2460
return (__m128i)__builtin_ia32_pmovusqd256_mask((__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)(-1)); 
# 2463
} 
# 2466
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 2467
_mm256_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) 
# 2468
{ 
# 2469
__builtin_ia32_pmovusqd256mem_mask((__v4si *)__P, (__v4di)__A, __M); 
# 2470
} 
# 2473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2474
_mm256_mask_cvtusepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) 
# 2475
{ 
# 2476
return (__m128i)__builtin_ia32_pmovusqd256_mask((__v4di)__A, (__v4si)__O, __M); 
# 2478
} 
# 2481
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2482
_mm256_maskz_cvtusepi64_epi32(__mmask8 __M, __m256i __A) 
# 2483
{ 
# 2484
return (__m128i)__builtin_ia32_pmovusqd256_mask((__v4di)__A, (__v4si)_mm_setzero_si128(), __M); 
# 2488
} 
# 2491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 2492
_mm256_mask_broadcastss_ps(__m256 __O, __mmask8 __M, __m128 __A) 
# 2493
{ 
# 2494
return (__m256)__builtin_ia32_broadcastss256_mask((__v4sf)__A, (__v8sf)__O, __M); 
# 2497
} 
# 2500
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 2501
_mm256_maskz_broadcastss_ps(__mmask8 __M, __m128 __A) 
# 2502
{ 
# 2503
return (__m256)__builtin_ia32_broadcastss256_mask((__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M); 
# 2507
} 
# 2510
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 2511
_mm_mask_broadcastss_ps(__m128 __O, __mmask8 __M, __m128 __A) 
# 2512
{ 
# 2513
return (__m128)__builtin_ia32_broadcastss128_mask((__v4sf)__A, (__v4sf)__O, __M); 
# 2516
} 
# 2519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 2520
_mm_maskz_broadcastss_ps(__mmask8 __M, __m128 __A) 
# 2521
{ 
# 2522
return (__m128)__builtin_ia32_broadcastss128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), __M); 
# 2526
} 
# 2529
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 2530
_mm256_mask_broadcastsd_pd(__m256d __O, __mmask8 __M, __m128d __A) 
# 2531
{ 
# 2532
return (__m256d)__builtin_ia32_broadcastsd256_mask((__v2df)__A, (__v4df)__O, __M); 
# 2535
} 
# 2538
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 2539
_mm256_maskz_broadcastsd_pd(__mmask8 __M, __m128d __A) 
# 2540
{ 
# 2541
return (__m256d)__builtin_ia32_broadcastsd256_mask((__v2df)__A, (__v4df)_mm256_setzero_pd(), __M); 
# 2545
} 
# 2548
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2549
_mm256_mask_broadcastd_epi32(__m256i __O, __mmask8 __M, __m128i __A) 
# 2550
{ 
# 2551
return (__m256i)__builtin_ia32_pbroadcastd256_mask((__v4si)__A, (__v8si)__O, __M); 
# 2554
} 
# 2557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2558
_mm256_maskz_broadcastd_epi32(__mmask8 __M, __m128i __A) 
# 2559
{ 
# 2560
return (__m256i)__builtin_ia32_pbroadcastd256_mask((__v4si)__A, (__v8si)_mm256_setzero_si256(), __M); 
# 2564
} 
# 2567
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2568
_mm256_mask_set1_epi32(__m256i __O, __mmask8 __M, int __A) 
# 2569
{ 
# 2570
return (__m256i)__builtin_ia32_pbroadcastd256_gpr_mask(__A, (__v8si)__O, __M); 
# 2572
} 
# 2575
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2576
_mm256_maskz_set1_epi32(__mmask8 __M, int __A) 
# 2577
{ 
# 2578
return (__m256i)__builtin_ia32_pbroadcastd256_gpr_mask(__A, (__v8si)_mm256_setzero_si256(), __M); 
# 2582
} 
# 2585
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2586
_mm_mask_broadcastd_epi32(__m128i __O, __mmask8 __M, __m128i __A) 
# 2587
{ 
# 2588
return (__m128i)__builtin_ia32_pbroadcastd128_mask((__v4si)__A, (__v4si)__O, __M); 
# 2591
} 
# 2594
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2595
_mm_maskz_broadcastd_epi32(__mmask8 __M, __m128i __A) 
# 2596
{ 
# 2597
return (__m128i)__builtin_ia32_pbroadcastd128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), __M); 
# 2601
} 
# 2604
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2605
_mm_mask_set1_epi32(__m128i __O, __mmask8 __M, int __A) 
# 2606
{ 
# 2607
return (__m128i)__builtin_ia32_pbroadcastd128_gpr_mask(__A, (__v4si)__O, __M); 
# 2609
} 
# 2612
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2613
_mm_maskz_set1_epi32(__mmask8 __M, int __A) 
# 2614
{ 
# 2615
return (__m128i)__builtin_ia32_pbroadcastd128_gpr_mask(__A, (__v4si)_mm_setzero_si128(), __M); 
# 2619
} 
# 2622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2623
_mm256_mask_broadcastq_epi64(__m256i __O, __mmask8 __M, __m128i __A) 
# 2624
{ 
# 2625
return (__m256i)__builtin_ia32_pbroadcastq256_mask((__v2di)__A, (__v4di)__O, __M); 
# 2628
} 
# 2631
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2632
_mm256_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) 
# 2633
{ 
# 2634
return (__m256i)__builtin_ia32_pbroadcastq256_mask((__v2di)__A, (__v4di)_mm256_setzero_si256(), __M); 
# 2638
} 
# 2641
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2642
_mm256_mask_set1_epi64(__m256i __O, __mmask8 __M, long long __A) 
# 2643
{ 
# 2644
return (__m256i)__builtin_ia32_pbroadcastq256_gpr_mask(__A, (__v4di)__O, __M); 
# 2646
} 
# 2649
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2650
_mm256_maskz_set1_epi64(__mmask8 __M, long long __A) 
# 2651
{ 
# 2652
return (__m256i)__builtin_ia32_pbroadcastq256_gpr_mask(__A, (__v4di)_mm256_setzero_si256(), __M); 
# 2656
} 
# 2659
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2660
_mm_mask_broadcastq_epi64(__m128i __O, __mmask8 __M, __m128i __A) 
# 2661
{ 
# 2662
return (__m128i)__builtin_ia32_pbroadcastq128_mask((__v2di)__A, (__v2di)__O, __M); 
# 2665
} 
# 2668
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2669
_mm_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) 
# 2670
{ 
# 2671
return (__m128i)__builtin_ia32_pbroadcastq128_mask((__v2di)__A, (__v2di)_mm_setzero_si128(), __M); 
# 2675
} 
# 2678
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2679
_mm_mask_set1_epi64(__m128i __O, __mmask8 __M, long long __A) 
# 2680
{ 
# 2681
return (__m128i)__builtin_ia32_pbroadcastq128_gpr_mask(__A, (__v2di)__O, __M); 
# 2683
} 
# 2686
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2687
_mm_maskz_set1_epi64(__mmask8 __M, long long __A) 
# 2688
{ 
# 2689
return (__m128i)__builtin_ia32_pbroadcastq128_gpr_mask(__A, (__v2di)_mm_setzero_si128(), __M); 
# 2693
} 
# 2696
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 2697
_mm256_broadcast_f32x4(__m128 __A) 
# 2698
{ 
# 2699
return (__m256)__builtin_ia32_broadcastf32x4_256_mask((__v4sf)__A, (__v8sf)_mm256_undefined_pd(), (__mmask8)(-1)); 
# 2703
} 
# 2706
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 2707
_mm256_mask_broadcast_f32x4(__m256 __O, __mmask8 __M, __m128 __A) 
# 2708
{ 
# 2709
return (__m256)__builtin_ia32_broadcastf32x4_256_mask((__v4sf)__A, (__v8sf)__O, __M); 
# 2712
} 
# 2715
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 2716
_mm256_maskz_broadcast_f32x4(__mmask8 __M, __m128 __A) 
# 2717
{ 
# 2718
return (__m256)__builtin_ia32_broadcastf32x4_256_mask((__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M); 
# 2722
} 
# 2725
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2726
_mm256_broadcast_i32x4(__m128i __A) 
# 2727
{ 
# 2728
return (__m256i)__builtin_ia32_broadcasti32x4_256_mask((__v4si)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1)); 
# 2733
} 
# 2736
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2737
_mm256_mask_broadcast_i32x4(__m256i __O, __mmask8 __M, __m128i __A) 
# 2738
{ 
# 2739
return (__m256i)__builtin_ia32_broadcasti32x4_256_mask((__v4si)__A, (__v8si)__O, __M); 
# 2743
} 
# 2746
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2747
_mm256_maskz_broadcast_i32x4(__mmask8 __M, __m128i __A) 
# 2748
{ 
# 2749
return (__m256i)__builtin_ia32_broadcasti32x4_256_mask((__v4si)__A, (__v8si)_mm256_setzero_si256(), __M); 
# 2754
} 
# 2757
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2758
_mm256_mask_cvtepi8_epi32(__m256i __W, __mmask8 __U, __m128i __A) 
# 2759
{ 
# 2760
return (__m256i)__builtin_ia32_pmovsxbd256_mask((__v16qi)__A, (__v8si)__W, (__mmask8)__U); 
# 2763
} 
# 2766
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2767
_mm256_maskz_cvtepi8_epi32(__mmask8 __U, __m128i __A) 
# 2768
{ 
# 2769
return (__m256i)__builtin_ia32_pmovsxbd256_mask((__v16qi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 2773
} 
# 2776
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2777
_mm_mask_cvtepi8_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 2778
{ 
# 2779
return (__m128i)__builtin_ia32_pmovsxbd128_mask((__v16qi)__A, (__v4si)__W, (__mmask8)__U); 
# 2782
} 
# 2785
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2786
_mm_maskz_cvtepi8_epi32(__mmask8 __U, __m128i __A) 
# 2787
{ 
# 2788
return (__m128i)__builtin_ia32_pmovsxbd128_mask((__v16qi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 2792
} 
# 2795
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2796
_mm256_mask_cvtepi8_epi64(__m256i __W, __mmask8 __U, __m128i __A) 
# 2797
{ 
# 2798
return (__m256i)__builtin_ia32_pmovsxbq256_mask((__v16qi)__A, (__v4di)__W, (__mmask8)__U); 
# 2801
} 
# 2804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2805
_mm256_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) 
# 2806
{ 
# 2807
return (__m256i)__builtin_ia32_pmovsxbq256_mask((__v16qi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 2811
} 
# 2814
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2815
_mm_mask_cvtepi8_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 2816
{ 
# 2817
return (__m128i)__builtin_ia32_pmovsxbq128_mask((__v16qi)__A, (__v2di)__W, (__mmask8)__U); 
# 2820
} 
# 2823
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2824
_mm_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) 
# 2825
{ 
# 2826
return (__m128i)__builtin_ia32_pmovsxbq128_mask((__v16qi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 2830
} 
# 2833
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2834
_mm256_mask_cvtepi16_epi32(__m256i __W, __mmask8 __U, __m128i __A) 
# 2835
{ 
# 2836
return (__m256i)__builtin_ia32_pmovsxwd256_mask((__v8hi)__A, (__v8si)__W, (__mmask8)__U); 
# 2839
} 
# 2842
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2843
_mm256_maskz_cvtepi16_epi32(__mmask8 __U, __m128i __A) 
# 2844
{ 
# 2845
return (__m256i)__builtin_ia32_pmovsxwd256_mask((__v8hi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 2849
} 
# 2852
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2853
_mm_mask_cvtepi16_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 2854
{ 
# 2855
return (__m128i)__builtin_ia32_pmovsxwd128_mask((__v8hi)__A, (__v4si)__W, (__mmask8)__U); 
# 2858
} 
# 2861
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2862
_mm_maskz_cvtepi16_epi32(__mmask8 __U, __m128i __A) 
# 2863
{ 
# 2864
return (__m128i)__builtin_ia32_pmovsxwd128_mask((__v8hi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 2868
} 
# 2871
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2872
_mm256_mask_cvtepi16_epi64(__m256i __W, __mmask8 __U, __m128i __A) 
# 2873
{ 
# 2874
return (__m256i)__builtin_ia32_pmovsxwq256_mask((__v8hi)__A, (__v4di)__W, (__mmask8)__U); 
# 2877
} 
# 2880
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2881
_mm256_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) 
# 2882
{ 
# 2883
return (__m256i)__builtin_ia32_pmovsxwq256_mask((__v8hi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 2887
} 
# 2890
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2891
_mm_mask_cvtepi16_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 2892
{ 
# 2893
return (__m128i)__builtin_ia32_pmovsxwq128_mask((__v8hi)__A, (__v2di)__W, (__mmask8)__U); 
# 2896
} 
# 2899
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2900
_mm_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) 
# 2901
{ 
# 2902
return (__m128i)__builtin_ia32_pmovsxwq128_mask((__v8hi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 2906
} 
# 2909
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2910
_mm256_mask_cvtepi32_epi64(__m256i __W, __mmask8 __U, __m128i __X) 
# 2911
{ 
# 2912
return (__m256i)__builtin_ia32_pmovsxdq256_mask((__v4si)__X, (__v4di)__W, (__mmask8)__U); 
# 2915
} 
# 2918
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2919
_mm256_maskz_cvtepi32_epi64(__mmask8 __U, __m128i __X) 
# 2920
{ 
# 2921
return (__m256i)__builtin_ia32_pmovsxdq256_mask((__v4si)__X, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 2925
} 
# 2928
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2929
_mm_mask_cvtepi32_epi64(__m128i __W, __mmask8 __U, __m128i __X) 
# 2930
{ 
# 2931
return (__m128i)__builtin_ia32_pmovsxdq128_mask((__v4si)__X, (__v2di)__W, (__mmask8)__U); 
# 2934
} 
# 2937
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2938
_mm_maskz_cvtepi32_epi64(__mmask8 __U, __m128i __X) 
# 2939
{ 
# 2940
return (__m128i)__builtin_ia32_pmovsxdq128_mask((__v4si)__X, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 2944
} 
# 2947
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2948
_mm256_mask_cvtepu8_epi32(__m256i __W, __mmask8 __U, __m128i __A) 
# 2949
{ 
# 2950
return (__m256i)__builtin_ia32_pmovzxbd256_mask((__v16qi)__A, (__v8si)__W, (__mmask8)__U); 
# 2953
} 
# 2956
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2957
_mm256_maskz_cvtepu8_epi32(__mmask8 __U, __m128i __A) 
# 2958
{ 
# 2959
return (__m256i)__builtin_ia32_pmovzxbd256_mask((__v16qi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 2963
} 
# 2966
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2967
_mm_mask_cvtepu8_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 2968
{ 
# 2969
return (__m128i)__builtin_ia32_pmovzxbd128_mask((__v16qi)__A, (__v4si)__W, (__mmask8)__U); 
# 2972
} 
# 2975
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2976
_mm_maskz_cvtepu8_epi32(__mmask8 __U, __m128i __A) 
# 2977
{ 
# 2978
return (__m128i)__builtin_ia32_pmovzxbd128_mask((__v16qi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 2982
} 
# 2985
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2986
_mm256_mask_cvtepu8_epi64(__m256i __W, __mmask8 __U, __m128i __A) 
# 2987
{ 
# 2988
return (__m256i)__builtin_ia32_pmovzxbq256_mask((__v16qi)__A, (__v4di)__W, (__mmask8)__U); 
# 2991
} 
# 2994
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2995
_mm256_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) 
# 2996
{ 
# 2997
return (__m256i)__builtin_ia32_pmovzxbq256_mask((__v16qi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 3001
} 
# 3004
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3005
_mm_mask_cvtepu8_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 3006
{ 
# 3007
return (__m128i)__builtin_ia32_pmovzxbq128_mask((__v16qi)__A, (__v2di)__W, (__mmask8)__U); 
# 3010
} 
# 3013
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3014
_mm_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) 
# 3015
{ 
# 3016
return (__m128i)__builtin_ia32_pmovzxbq128_mask((__v16qi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 3020
} 
# 3023
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3024
_mm256_mask_cvtepu16_epi32(__m256i __W, __mmask8 __U, __m128i __A) 
# 3025
{ 
# 3026
return (__m256i)__builtin_ia32_pmovzxwd256_mask((__v8hi)__A, (__v8si)__W, (__mmask8)__U); 
# 3029
} 
# 3032
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3033
_mm256_maskz_cvtepu16_epi32(__mmask8 __U, __m128i __A) 
# 3034
{ 
# 3035
return (__m256i)__builtin_ia32_pmovzxwd256_mask((__v8hi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 3039
} 
# 3042
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3043
_mm_mask_cvtepu16_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 3044
{ 
# 3045
return (__m128i)__builtin_ia32_pmovzxwd128_mask((__v8hi)__A, (__v4si)__W, (__mmask8)__U); 
# 3048
} 
# 3051
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3052
_mm_maskz_cvtepu16_epi32(__mmask8 __U, __m128i __A) 
# 3053
{ 
# 3054
return (__m128i)__builtin_ia32_pmovzxwd128_mask((__v8hi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 3058
} 
# 3061
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3062
_mm256_mask_cvtepu16_epi64(__m256i __W, __mmask8 __U, __m128i __A) 
# 3063
{ 
# 3064
return (__m256i)__builtin_ia32_pmovzxwq256_mask((__v8hi)__A, (__v4di)__W, (__mmask8)__U); 
# 3067
} 
# 3070
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3071
_mm256_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) 
# 3072
{ 
# 3073
return (__m256i)__builtin_ia32_pmovzxwq256_mask((__v8hi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 3077
} 
# 3080
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3081
_mm_mask_cvtepu16_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 3082
{ 
# 3083
return (__m128i)__builtin_ia32_pmovzxwq128_mask((__v8hi)__A, (__v2di)__W, (__mmask8)__U); 
# 3086
} 
# 3089
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3090
_mm_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) 
# 3091
{ 
# 3092
return (__m128i)__builtin_ia32_pmovzxwq128_mask((__v8hi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 3096
} 
# 3099
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3100
_mm256_mask_cvtepu32_epi64(__m256i __W, __mmask8 __U, __m128i __X) 
# 3101
{ 
# 3102
return (__m256i)__builtin_ia32_pmovzxdq256_mask((__v4si)__X, (__v4di)__W, (__mmask8)__U); 
# 3105
} 
# 3108
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3109
_mm256_maskz_cvtepu32_epi64(__mmask8 __U, __m128i __X) 
# 3110
{ 
# 3111
return (__m256i)__builtin_ia32_pmovzxdq256_mask((__v4si)__X, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 3115
} 
# 3118
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3119
_mm_mask_cvtepu32_epi64(__m128i __W, __mmask8 __U, __m128i __X) 
# 3120
{ 
# 3121
return (__m128i)__builtin_ia32_pmovzxdq128_mask((__v4si)__X, (__v2di)__W, (__mmask8)__U); 
# 3124
} 
# 3127
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3128
_mm_maskz_cvtepu32_epi64(__mmask8 __U, __m128i __X) 
# 3129
{ 
# 3130
return (__m128i)__builtin_ia32_pmovzxdq128_mask((__v4si)__X, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 3134
} 
# 3137
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3138
_mm256_rcp14_pd(__m256d __A) 
# 3139
{ 
# 3140
return (__m256d)__builtin_ia32_rcp14pd256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 3144
} 
# 3147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3148
_mm256_mask_rcp14_pd(__m256d __W, __mmask8 __U, __m256d __A) 
# 3149
{ 
# 3150
return (__m256d)__builtin_ia32_rcp14pd256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 3153
} 
# 3156
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3157
_mm256_maskz_rcp14_pd(__mmask8 __U, __m256d __A) 
# 3158
{ 
# 3159
return (__m256d)__builtin_ia32_rcp14pd256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 3163
} 
# 3166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3167
_mm_rcp14_pd(__m128d __A) 
# 3168
{ 
# 3169
return (__m128d)__builtin_ia32_rcp14pd128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 3173
} 
# 3176
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3177
_mm_mask_rcp14_pd(__m128d __W, __mmask8 __U, __m128d __A) 
# 3178
{ 
# 3179
return (__m128d)__builtin_ia32_rcp14pd128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 3182
} 
# 3185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3186
_mm_maskz_rcp14_pd(__mmask8 __U, __m128d __A) 
# 3187
{ 
# 3188
return (__m128d)__builtin_ia32_rcp14pd128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 3192
} 
# 3195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3196
_mm256_rcp14_ps(__m256 __A) 
# 3197
{ 
# 3198
return (__m256)__builtin_ia32_rcp14ps256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 3202
} 
# 3205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3206
_mm256_mask_rcp14_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 3207
{ 
# 3208
return (__m256)__builtin_ia32_rcp14ps256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 3211
} 
# 3214
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3215
_mm256_maskz_rcp14_ps(__mmask8 __U, __m256 __A) 
# 3216
{ 
# 3217
return (__m256)__builtin_ia32_rcp14ps256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 3221
} 
# 3224
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3225
_mm_rcp14_ps(__m128 __A) 
# 3226
{ 
# 3227
return (__m128)__builtin_ia32_rcp14ps128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 3231
} 
# 3234
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3235
_mm_mask_rcp14_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 3236
{ 
# 3237
return (__m128)__builtin_ia32_rcp14ps128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 3240
} 
# 3243
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3244
_mm_maskz_rcp14_ps(__mmask8 __U, __m128 __A) 
# 3245
{ 
# 3246
return (__m128)__builtin_ia32_rcp14ps128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 3250
} 
# 3253
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3254
_mm256_rsqrt14_pd(__m256d __A) 
# 3255
{ 
# 3256
return (__m256d)__builtin_ia32_rsqrt14pd256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 3260
} 
# 3263
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3264
_mm256_mask_rsqrt14_pd(__m256d __W, __mmask8 __U, __m256d __A) 
# 3265
{ 
# 3266
return (__m256d)__builtin_ia32_rsqrt14pd256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 3269
} 
# 3272
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3273
_mm256_maskz_rsqrt14_pd(__mmask8 __U, __m256d __A) 
# 3274
{ 
# 3275
return (__m256d)__builtin_ia32_rsqrt14pd256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 3279
} 
# 3282
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3283
_mm_rsqrt14_pd(__m128d __A) 
# 3284
{ 
# 3285
return (__m128d)__builtin_ia32_rsqrt14pd128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 3289
} 
# 3292
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3293
_mm_mask_rsqrt14_pd(__m128d __W, __mmask8 __U, __m128d __A) 
# 3294
{ 
# 3295
return (__m128d)__builtin_ia32_rsqrt14pd128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 3298
} 
# 3301
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3302
_mm_maskz_rsqrt14_pd(__mmask8 __U, __m128d __A) 
# 3303
{ 
# 3304
return (__m128d)__builtin_ia32_rsqrt14pd128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 3308
} 
# 3311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3312
_mm256_rsqrt14_ps(__m256 __A) 
# 3313
{ 
# 3314
return (__m256)__builtin_ia32_rsqrt14ps256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 3318
} 
# 3321
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3322
_mm256_mask_rsqrt14_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 3323
{ 
# 3324
return (__m256)__builtin_ia32_rsqrt14ps256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 3327
} 
# 3330
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3331
_mm256_maskz_rsqrt14_ps(__mmask8 __U, __m256 __A) 
# 3332
{ 
# 3333
return (__m256)__builtin_ia32_rsqrt14ps256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 3337
} 
# 3340
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3341
_mm_rsqrt14_ps(__m128 __A) 
# 3342
{ 
# 3343
return (__m128)__builtin_ia32_rsqrt14ps128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 3347
} 
# 3350
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3351
_mm_mask_rsqrt14_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 3352
{ 
# 3353
return (__m128)__builtin_ia32_rsqrt14ps128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 3356
} 
# 3359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3360
_mm_maskz_rsqrt14_ps(__mmask8 __U, __m128 __A) 
# 3361
{ 
# 3362
return (__m128)__builtin_ia32_rsqrt14ps128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 3366
} 
# 3369
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3370
_mm256_mask_sqrt_pd(__m256d __W, __mmask8 __U, __m256d __A) 
# 3371
{ 
# 3372
return (__m256d)__builtin_ia32_sqrtpd256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 3375
} 
# 3378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3379
_mm256_maskz_sqrt_pd(__mmask8 __U, __m256d __A) 
# 3380
{ 
# 3381
return (__m256d)__builtin_ia32_sqrtpd256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 3385
} 
# 3388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3389
_mm_mask_sqrt_pd(__m128d __W, __mmask8 __U, __m128d __A) 
# 3390
{ 
# 3391
return (__m128d)__builtin_ia32_sqrtpd128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 3394
} 
# 3397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3398
_mm_maskz_sqrt_pd(__mmask8 __U, __m128d __A) 
# 3399
{ 
# 3400
return (__m128d)__builtin_ia32_sqrtpd128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 3404
} 
# 3407
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3408
_mm256_mask_sqrt_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 3409
{ 
# 3410
return (__m256)__builtin_ia32_sqrtps256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 3413
} 
# 3416
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3417
_mm256_maskz_sqrt_ps(__mmask8 __U, __m256 __A) 
# 3418
{ 
# 3419
return (__m256)__builtin_ia32_sqrtps256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 3423
} 
# 3426
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3427
_mm_mask_sqrt_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 3428
{ 
# 3429
return (__m128)__builtin_ia32_sqrtps128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 3432
} 
# 3435
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3436
_mm_maskz_sqrt_ps(__mmask8 __U, __m128 __A) 
# 3437
{ 
# 3438
return (__m128)__builtin_ia32_sqrtps128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 3442
} 
# 3445
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3446
_mm256_mask_add_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 3447
__B) 
# 3448
{ 
# 3449
return (__m256i)__builtin_ia32_paddd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 3453
} 
# 3456
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3457
_mm256_maskz_add_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 3458
{ 
# 3459
return (__m256i)__builtin_ia32_paddd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 3464
} 
# 3467
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3468
_mm256_mask_add_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 3469
__B) 
# 3470
{ 
# 3471
return (__m256i)__builtin_ia32_paddq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 3475
} 
# 3478
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3479
_mm256_maskz_add_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 3480
{ 
# 3481
return (__m256i)__builtin_ia32_paddq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 3486
} 
# 3489
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3490
_mm256_mask_sub_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 3491
__B) 
# 3492
{ 
# 3493
return (__m256i)__builtin_ia32_psubd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 3497
} 
# 3500
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3501
_mm256_maskz_sub_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 3502
{ 
# 3503
return (__m256i)__builtin_ia32_psubd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 3508
} 
# 3511
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3512
_mm256_mask_sub_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 3513
__B) 
# 3514
{ 
# 3515
return (__m256i)__builtin_ia32_psubq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 3519
} 
# 3522
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3523
_mm256_maskz_sub_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 3524
{ 
# 3525
return (__m256i)__builtin_ia32_psubq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 3530
} 
# 3533
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3534
_mm_mask_add_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3535
__B) 
# 3536
{ 
# 3537
return (__m128i)__builtin_ia32_paddd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 3541
} 
# 3544
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3545
_mm_maskz_add_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 3546
{ 
# 3547
return (__m128i)__builtin_ia32_paddd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 3552
} 
# 3555
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3556
_mm_mask_add_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3557
__B) 
# 3558
{ 
# 3559
return (__m128i)__builtin_ia32_paddq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 3563
} 
# 3566
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3567
_mm_maskz_add_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 3568
{ 
# 3569
return (__m128i)__builtin_ia32_paddq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 3574
} 
# 3577
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3578
_mm_mask_sub_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3579
__B) 
# 3580
{ 
# 3581
return (__m128i)__builtin_ia32_psubd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 3585
} 
# 3588
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3589
_mm_maskz_sub_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 3590
{ 
# 3591
return (__m128i)__builtin_ia32_psubd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 3596
} 
# 3599
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3600
_mm_mask_sub_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3601
__B) 
# 3602
{ 
# 3603
return (__m128i)__builtin_ia32_psubq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 3607
} 
# 3610
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3611
_mm_maskz_sub_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 3612
{ 
# 3613
return (__m128i)__builtin_ia32_psubq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 3618
} 
# 3621
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3622
_mm256_getexp_ps(__m256 __A) 
# 3623
{ 
# 3624
return (__m256)__builtin_ia32_getexpps256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 3628
} 
# 3631
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3632
_mm256_mask_getexp_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 3633
{ 
# 3634
return (__m256)__builtin_ia32_getexpps256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 3637
} 
# 3640
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3641
_mm256_maskz_getexp_ps(__mmask8 __U, __m256 __A) 
# 3642
{ 
# 3643
return (__m256)__builtin_ia32_getexpps256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 3647
} 
# 3650
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3651
_mm256_getexp_pd(__m256d __A) 
# 3652
{ 
# 3653
return (__m256d)__builtin_ia32_getexppd256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 3657
} 
# 3660
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3661
_mm256_mask_getexp_pd(__m256d __W, __mmask8 __U, __m256d __A) 
# 3662
{ 
# 3663
return (__m256d)__builtin_ia32_getexppd256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 3666
} 
# 3669
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3670
_mm256_maskz_getexp_pd(__mmask8 __U, __m256d __A) 
# 3671
{ 
# 3672
return (__m256d)__builtin_ia32_getexppd256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 3676
} 
# 3679
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3680
_mm_getexp_ps(__m128 __A) 
# 3681
{ 
# 3682
return (__m128)__builtin_ia32_getexpps128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 3686
} 
# 3689
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3690
_mm_mask_getexp_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 3691
{ 
# 3692
return (__m128)__builtin_ia32_getexpps128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 3695
} 
# 3698
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3699
_mm_maskz_getexp_ps(__mmask8 __U, __m128 __A) 
# 3700
{ 
# 3701
return (__m128)__builtin_ia32_getexpps128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 3705
} 
# 3708
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3709
_mm_getexp_pd(__m128d __A) 
# 3710
{ 
# 3711
return (__m128d)__builtin_ia32_getexppd128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 3715
} 
# 3718
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3719
_mm_mask_getexp_pd(__m128d __W, __mmask8 __U, __m128d __A) 
# 3720
{ 
# 3721
return (__m128d)__builtin_ia32_getexppd128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 3724
} 
# 3727
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3728
_mm_maskz_getexp_pd(__mmask8 __U, __m128d __A) 
# 3729
{ 
# 3730
return (__m128d)__builtin_ia32_getexppd128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 3734
} 
# 3737
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3738
_mm256_mask_srl_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i 
# 3739
__B) 
# 3740
{ 
# 3741
return (__m256i)__builtin_ia32_psrld256_mask((__v8si)__A, (__v4si)__B, (__v8si)__W, (__mmask8)__U); 
# 3745
} 
# 3748
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3749
_mm256_maskz_srl_epi32(__mmask8 __U, __m256i __A, __m128i __B) 
# 3750
{ 
# 3751
return (__m256i)__builtin_ia32_psrld256_mask((__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 3756
} 
# 3759
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3760
_mm_mask_srl_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3761
__B) 
# 3762
{ 
# 3763
return (__m128i)__builtin_ia32_psrld128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 3767
} 
# 3770
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3771
_mm_maskz_srl_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 3772
{ 
# 3773
return (__m128i)__builtin_ia32_psrld128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 3778
} 
# 3781
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3782
_mm256_mask_srl_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i 
# 3783
__B) 
# 3784
{ 
# 3785
return (__m256i)__builtin_ia32_psrlq256_mask((__v4di)__A, (__v2di)__B, (__v4di)__W, (__mmask8)__U); 
# 3789
} 
# 3792
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3793
_mm256_maskz_srl_epi64(__mmask8 __U, __m256i __A, __m128i __B) 
# 3794
{ 
# 3795
return (__m256i)__builtin_ia32_psrlq256_mask((__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 3800
} 
# 3803
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3804
_mm_mask_srl_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3805
__B) 
# 3806
{ 
# 3807
return (__m128i)__builtin_ia32_psrlq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 3811
} 
# 3814
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3815
_mm_maskz_srl_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 3816
{ 
# 3817
return (__m128i)__builtin_ia32_psrlq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 3822
} 
# 3825
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3826
_mm256_mask_and_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 3827
__B) 
# 3828
{ 
# 3829
return (__m256i)__builtin_ia32_pandd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 3833
} 
# 3836
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3837
_mm256_maskz_and_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 3838
{ 
# 3839
return (__m256i)__builtin_ia32_pandd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 3844
} 
# 3847
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3848
_mm256_scalef_pd(__m256d __A, __m256d __B) 
# 3849
{ 
# 3850
return (__m256d)__builtin_ia32_scalefpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 3855
} 
# 3858
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3859
_mm256_mask_scalef_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 3860
__B) 
# 3861
{ 
# 3862
return (__m256d)__builtin_ia32_scalefpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 3866
} 
# 3869
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3870
_mm256_maskz_scalef_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 3871
{ 
# 3872
return (__m256d)__builtin_ia32_scalefpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 3877
} 
# 3880
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3881
_mm256_scalef_ps(__m256 __A, __m256 __B) 
# 3882
{ 
# 3883
return (__m256)__builtin_ia32_scalefps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 3888
} 
# 3891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3892
_mm256_mask_scalef_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 
# 3893
__B) 
# 3894
{ 
# 3895
return (__m256)__builtin_ia32_scalefps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 3899
} 
# 3902
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 3903
_mm256_maskz_scalef_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 3904
{ 
# 3905
return (__m256)__builtin_ia32_scalefps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 3910
} 
# 3913
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3914
_mm_scalef_pd(__m128d __A, __m128d __B) 
# 3915
{ 
# 3916
return (__m128d)__builtin_ia32_scalefpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 3921
} 
# 3924
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3925
_mm_mask_scalef_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d 
# 3926
__B) 
# 3927
{ 
# 3928
return (__m128d)__builtin_ia32_scalefpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 3932
} 
# 3935
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 3936
_mm_maskz_scalef_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 3937
{ 
# 3938
return (__m128d)__builtin_ia32_scalefpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 3943
} 
# 3946
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3947
_mm_scalef_ps(__m128 __A, __m128 __B) 
# 3948
{ 
# 3949
return (__m128)__builtin_ia32_scalefps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 3954
} 
# 3957
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3958
_mm_mask_scalef_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 3959
{ 
# 3960
return (__m128)__builtin_ia32_scalefps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 3964
} 
# 3967
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 3968
_mm_maskz_scalef_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 3969
{ 
# 3970
return (__m128)__builtin_ia32_scalefps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 3975
} 
# 3978
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3979
_mm256_mask_fmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d 
# 3980
__C) 
# 3981
{ 
# 3982
return (__m256d)__builtin_ia32_vfmaddpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 3986
} 
# 3989
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 3990
_mm256_mask3_fmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 
# 3991
__U) 
# 3992
{ 
# 3993
return (__m256d)__builtin_ia32_vfmaddpd256_mask3((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 3997
} 
# 4000
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4001
_mm256_maskz_fmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d 
# 4002
__C) 
# 4003
{ 
# 4004
return (__m256d)__builtin_ia32_vfmaddpd256_maskz((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4008
} 
# 4011
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4012
_mm_mask_fmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) 
# 4013
{ 
# 4014
return (__m128d)__builtin_ia32_vfmaddpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4018
} 
# 4021
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4022
_mm_mask3_fmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 
# 4023
__U) 
# 4024
{ 
# 4025
return (__m128d)__builtin_ia32_vfmaddpd128_mask3((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4029
} 
# 4032
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4033
_mm_maskz_fmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d 
# 4034
__C) 
# 4035
{ 
# 4036
return (__m128d)__builtin_ia32_vfmaddpd128_maskz((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4040
} 
# 4043
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4044
_mm256_mask_fmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) 
# 4045
{ 
# 4046
return (__m256)__builtin_ia32_vfmaddps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4050
} 
# 4053
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4054
_mm256_mask3_fmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 
# 4055
__U) 
# 4056
{ 
# 4057
return (__m256)__builtin_ia32_vfmaddps256_mask3((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4061
} 
# 4064
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4065
_mm256_maskz_fmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 
# 4066
__C) 
# 4067
{ 
# 4068
return (__m256)__builtin_ia32_vfmaddps256_maskz((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4072
} 
# 4075
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4076
_mm_mask_fmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) 
# 4077
{ 
# 4078
return (__m128)__builtin_ia32_vfmaddps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4082
} 
# 4085
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4086
_mm_mask3_fmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) 
# 4087
{ 
# 4088
return (__m128)__builtin_ia32_vfmaddps128_mask3((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4092
} 
# 4095
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4096
_mm_maskz_fmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) 
# 4097
{ 
# 4098
return (__m128)__builtin_ia32_vfmaddps128_maskz((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4102
} 
# 4105
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4106
_mm256_mask_fmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d 
# 4107
__C) 
# 4108
{ 
# 4109
return (__m256d)__builtin_ia32_vfmaddpd256_mask((__v4df)__A, (__v4df)__B, -((__v4df)__C), (__mmask8)__U); 
# 4113
} 
# 4116
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4117
_mm256_mask3_fmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 
# 4118
__U) 
# 4119
{ 
# 4120
return (__m256d)__builtin_ia32_vfmsubpd256_mask3((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4124
} 
# 4127
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4128
_mm256_maskz_fmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d 
# 4129
__C) 
# 4130
{ 
# 4131
return (__m256d)__builtin_ia32_vfmaddpd256_maskz((__v4df)__A, (__v4df)__B, -((__v4df)__C), (__mmask8)__U); 
# 4135
} 
# 4138
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4139
_mm_mask_fmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) 
# 4140
{ 
# 4141
return (__m128d)__builtin_ia32_vfmaddpd128_mask((__v2df)__A, (__v2df)__B, -((__v2df)__C), (__mmask8)__U); 
# 4145
} 
# 4148
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4149
_mm_mask3_fmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 
# 4150
__U) 
# 4151
{ 
# 4152
return (__m128d)__builtin_ia32_vfmsubpd128_mask3((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4156
} 
# 4159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4160
_mm_maskz_fmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d 
# 4161
__C) 
# 4162
{ 
# 4163
return (__m128d)__builtin_ia32_vfmaddpd128_maskz((__v2df)__A, (__v2df)__B, -((__v2df)__C), (__mmask8)__U); 
# 4167
} 
# 4170
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4171
_mm256_mask_fmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) 
# 4172
{ 
# 4173
return (__m256)__builtin_ia32_vfmaddps256_mask((__v8sf)__A, (__v8sf)__B, -((__v8sf)__C), (__mmask8)__U); 
# 4177
} 
# 4180
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4181
_mm256_mask3_fmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 
# 4182
__U) 
# 4183
{ 
# 4184
return (__m256)__builtin_ia32_vfmsubps256_mask3((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4188
} 
# 4191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4192
_mm256_maskz_fmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 
# 4193
__C) 
# 4194
{ 
# 4195
return (__m256)__builtin_ia32_vfmaddps256_maskz((__v8sf)__A, (__v8sf)__B, -((__v8sf)__C), (__mmask8)__U); 
# 4199
} 
# 4202
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4203
_mm_mask_fmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) 
# 4204
{ 
# 4205
return (__m128)__builtin_ia32_vfmaddps128_mask((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C), (__mmask8)__U); 
# 4209
} 
# 4212
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4213
_mm_mask3_fmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) 
# 4214
{ 
# 4215
return (__m128)__builtin_ia32_vfmsubps128_mask3((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4219
} 
# 4222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4223
_mm_maskz_fmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) 
# 4224
{ 
# 4225
return (__m128)__builtin_ia32_vfmaddps128_maskz((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C), (__mmask8)__U); 
# 4229
} 
# 4232
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4233
_mm256_mask_fmaddsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d 
# 4234
__C) 
# 4235
{ 
# 4236
return (__m256d)__builtin_ia32_vfmaddsubpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4240
} 
# 4243
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4244
_mm256_mask3_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 
# 4245
__U) 
# 4246
{ 
# 4247
return (__m256d)__builtin_ia32_vfmaddsubpd256_mask3((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4252
} 
# 4255
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4256
_mm256_maskz_fmaddsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d 
# 4257
__C) 
# 4258
{ 
# 4259
return (__m256d)__builtin_ia32_vfmaddsubpd256_maskz((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4264
} 
# 4267
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4268
_mm_mask_fmaddsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d 
# 4269
__C) 
# 4270
{ 
# 4271
return (__m128d)__builtin_ia32_vfmaddsubpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4275
} 
# 4278
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4279
_mm_mask3_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 
# 4280
__U) 
# 4281
{ 
# 4282
return (__m128d)__builtin_ia32_vfmaddsubpd128_mask3((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4287
} 
# 4290
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4291
_mm_maskz_fmaddsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d 
# 4292
__C) 
# 4293
{ 
# 4294
return (__m128d)__builtin_ia32_vfmaddsubpd128_maskz((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4299
} 
# 4302
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4303
_mm256_mask_fmaddsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 
# 4304
__C) 
# 4305
{ 
# 4306
return (__m256)__builtin_ia32_vfmaddsubps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4310
} 
# 4313
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4314
_mm256_mask3_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 
# 4315
__U) 
# 4316
{ 
# 4317
return (__m256)__builtin_ia32_vfmaddsubps256_mask3((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4321
} 
# 4324
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4325
_mm256_maskz_fmaddsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 
# 4326
__C) 
# 4327
{ 
# 4328
return (__m256)__builtin_ia32_vfmaddsubps256_maskz((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4332
} 
# 4335
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4336
_mm_mask_fmaddsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) 
# 4337
{ 
# 4338
return (__m128)__builtin_ia32_vfmaddsubps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4342
} 
# 4345
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4346
_mm_mask3_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 
# 4347
__U) 
# 4348
{ 
# 4349
return (__m128)__builtin_ia32_vfmaddsubps128_mask3((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4353
} 
# 4356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4357
_mm_maskz_fmaddsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 
# 4358
__C) 
# 4359
{ 
# 4360
return (__m128)__builtin_ia32_vfmaddsubps128_maskz((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4364
} 
# 4367
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4368
_mm256_mask_fmsubadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d 
# 4369
__C) 
# 4370
{ 
# 4371
return (__m256d)__builtin_ia32_vfmaddsubpd256_mask((__v4df)__A, (__v4df)__B, -((__v4df)__C), (__mmask8)__U); 
# 4375
} 
# 4378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4379
_mm256_mask3_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 
# 4380
__U) 
# 4381
{ 
# 4382
return (__m256d)__builtin_ia32_vfmsubaddpd256_mask3((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4387
} 
# 4390
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4391
_mm256_maskz_fmsubadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d 
# 4392
__C) 
# 4393
{ 
# 4394
return (__m256d)__builtin_ia32_vfmaddsubpd256_maskz((__v4df)__A, (__v4df)__B, -((__v4df)__C), (__mmask8)__U); 
# 4399
} 
# 4402
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4403
_mm_mask_fmsubadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d 
# 4404
__C) 
# 4405
{ 
# 4406
return (__m128d)__builtin_ia32_vfmaddsubpd128_mask((__v2df)__A, (__v2df)__B, -((__v2df)__C), (__mmask8)__U); 
# 4410
} 
# 4413
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4414
_mm_mask3_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 
# 4415
__U) 
# 4416
{ 
# 4417
return (__m128d)__builtin_ia32_vfmsubaddpd128_mask3((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4422
} 
# 4425
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4426
_mm_maskz_fmsubadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d 
# 4427
__C) 
# 4428
{ 
# 4429
return (__m128d)__builtin_ia32_vfmaddsubpd128_maskz((__v2df)__A, (__v2df)__B, -((__v2df)__C), (__mmask8)__U); 
# 4434
} 
# 4437
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4438
_mm256_mask_fmsubadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 
# 4439
__C) 
# 4440
{ 
# 4441
return (__m256)__builtin_ia32_vfmaddsubps256_mask((__v8sf)__A, (__v8sf)__B, -((__v8sf)__C), (__mmask8)__U); 
# 4445
} 
# 4448
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4449
_mm256_mask3_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 
# 4450
__U) 
# 4451
{ 
# 4452
return (__m256)__builtin_ia32_vfmsubaddps256_mask3((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4456
} 
# 4459
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4460
_mm256_maskz_fmsubadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 
# 4461
__C) 
# 4462
{ 
# 4463
return (__m256)__builtin_ia32_vfmaddsubps256_maskz((__v8sf)__A, (__v8sf)__B, -((__v8sf)__C), (__mmask8)__U); 
# 4467
} 
# 4470
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4471
_mm_mask_fmsubadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) 
# 4472
{ 
# 4473
return (__m128)__builtin_ia32_vfmaddsubps128_mask((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C), (__mmask8)__U); 
# 4477
} 
# 4480
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4481
_mm_mask3_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 
# 4482
__U) 
# 4483
{ 
# 4484
return (__m128)__builtin_ia32_vfmsubaddps128_mask3((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4488
} 
# 4491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4492
_mm_maskz_fmsubadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 
# 4493
__C) 
# 4494
{ 
# 4495
return (__m128)__builtin_ia32_vfmaddsubps128_maskz((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C), (__mmask8)__U); 
# 4499
} 
# 4502
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4503
_mm256_mask_fnmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d 
# 4504
__C) 
# 4505
{ 
# 4506
return (__m256d)__builtin_ia32_vfnmaddpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4510
} 
# 4513
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4514
_mm256_mask3_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 
# 4515
__U) 
# 4516
{ 
# 4517
return (__m256d)__builtin_ia32_vfmaddpd256_mask3(-((__v4df)__A), (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4521
} 
# 4524
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4525
_mm256_maskz_fnmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d 
# 4526
__C) 
# 4527
{ 
# 4528
return (__m256d)__builtin_ia32_vfmaddpd256_maskz(-((__v4df)__A), (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4532
} 
# 4535
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4536
_mm_mask_fnmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d 
# 4537
__C) 
# 4538
{ 
# 4539
return (__m128d)__builtin_ia32_vfnmaddpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4543
} 
# 4546
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4547
_mm_mask3_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 
# 4548
__U) 
# 4549
{ 
# 4550
return (__m128d)__builtin_ia32_vfmaddpd128_mask3(-((__v2df)__A), (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4554
} 
# 4557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4558
_mm_maskz_fnmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d 
# 4559
__C) 
# 4560
{ 
# 4561
return (__m128d)__builtin_ia32_vfmaddpd128_maskz(-((__v2df)__A), (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4565
} 
# 4568
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4569
_mm256_mask_fnmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 
# 4570
__C) 
# 4571
{ 
# 4572
return (__m256)__builtin_ia32_vfnmaddps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4576
} 
# 4579
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4580
_mm256_mask3_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 
# 4581
__U) 
# 4582
{ 
# 4583
return (__m256)__builtin_ia32_vfmaddps256_mask3(-((__v8sf)__A), (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4587
} 
# 4590
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4591
_mm256_maskz_fnmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 
# 4592
__C) 
# 4593
{ 
# 4594
return (__m256)__builtin_ia32_vfmaddps256_maskz(-((__v8sf)__A), (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4598
} 
# 4601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4602
_mm_mask_fnmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) 
# 4603
{ 
# 4604
return (__m128)__builtin_ia32_vfnmaddps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4608
} 
# 4611
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4612
_mm_mask3_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) 
# 4613
{ 
# 4614
return (__m128)__builtin_ia32_vfmaddps128_mask3(-((__v4sf)__A), (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4618
} 
# 4621
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4622
_mm_maskz_fnmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) 
# 4623
{ 
# 4624
return (__m128)__builtin_ia32_vfmaddps128_maskz(-((__v4sf)__A), (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4628
} 
# 4631
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4632
_mm256_mask_fnmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d 
# 4633
__C) 
# 4634
{ 
# 4635
return (__m256d)__builtin_ia32_vfnmsubpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4639
} 
# 4642
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4643
_mm256_mask3_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 
# 4644
__U) 
# 4645
{ 
# 4646
return (__m256d)__builtin_ia32_vfnmsubpd256_mask3((__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U); 
# 4650
} 
# 4653
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 4654
_mm256_maskz_fnmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d 
# 4655
__C) 
# 4656
{ 
# 4657
return (__m256d)__builtin_ia32_vfmaddpd256_maskz(-((__v4df)__A), (__v4df)__B, -((__v4df)__C), (__mmask8)__U); 
# 4661
} 
# 4664
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4665
_mm_mask_fnmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d 
# 4666
__C) 
# 4667
{ 
# 4668
return (__m128d)__builtin_ia32_vfnmsubpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4672
} 
# 4675
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4676
_mm_mask3_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 
# 4677
__U) 
# 4678
{ 
# 4679
return (__m128d)__builtin_ia32_vfnmsubpd128_mask3((__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U); 
# 4683
} 
# 4686
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 4687
_mm_maskz_fnmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d 
# 4688
__C) 
# 4689
{ 
# 4690
return (__m128d)__builtin_ia32_vfmaddpd128_maskz(-((__v2df)__A), (__v2df)__B, -((__v2df)__C), (__mmask8)__U); 
# 4694
} 
# 4697
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4698
_mm256_mask_fnmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 
# 4699
__C) 
# 4700
{ 
# 4701
return (__m256)__builtin_ia32_vfnmsubps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4705
} 
# 4708
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4709
_mm256_mask3_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 
# 4710
__U) 
# 4711
{ 
# 4712
return (__m256)__builtin_ia32_vfnmsubps256_mask3((__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U); 
# 4716
} 
# 4719
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 4720
_mm256_maskz_fnmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 
# 4721
__C) 
# 4722
{ 
# 4723
return (__m256)__builtin_ia32_vfmaddps256_maskz(-((__v8sf)__A), (__v8sf)__B, -((__v8sf)__C), (__mmask8)__U); 
# 4727
} 
# 4730
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4731
_mm_mask_fnmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) 
# 4732
{ 
# 4733
return (__m128)__builtin_ia32_vfnmsubps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4737
} 
# 4740
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4741
_mm_mask3_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) 
# 4742
{ 
# 4743
return (__m128)__builtin_ia32_vfnmsubps128_mask3((__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U); 
# 4747
} 
# 4750
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4751
_mm_maskz_fnmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) 
# 4752
{ 
# 4753
return (__m128)__builtin_ia32_vfmaddps128_maskz(-((__v4sf)__A), (__v4sf)__B, -((__v4sf)__C), (__mmask8)__U); 
# 4757
} 
# 4760
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4761
_mm_mask_and_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 4762
__B) 
# 4763
{ 
# 4764
return (__m128i)__builtin_ia32_pandd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 4768
} 
# 4771
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4772
_mm_maskz_and_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 4773
{ 
# 4774
return (__m128i)__builtin_ia32_pandd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 4779
} 
# 4782
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4783
_mm256_mask_andnot_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 4784
__B) 
# 4785
{ 
# 4786
return (__m256i)__builtin_ia32_pandnd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 4790
} 
# 4793
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4794
_mm256_maskz_andnot_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 4795
{ 
# 4796
return (__m256i)__builtin_ia32_pandnd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 4801
} 
# 4804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4805
_mm_mask_andnot_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 4806
__B) 
# 4807
{ 
# 4808
return (__m128i)__builtin_ia32_pandnd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 4812
} 
# 4815
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4816
_mm_maskz_andnot_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 4817
{ 
# 4818
return (__m128i)__builtin_ia32_pandnd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 4823
} 
# 4826
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4827
_mm256_mask_or_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 4828
__B) 
# 4829
{ 
# 4830
return (__m256i)__builtin_ia32_pord256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 4834
} 
# 4837
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4838
_mm256_maskz_or_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 4839
{ 
# 4840
return (__m256i)__builtin_ia32_pord256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 4845
} 
# 4848
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4849
_mm_mask_or_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) 
# 4850
{ 
# 4851
return (__m128i)__builtin_ia32_pord128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 4855
} 
# 4858
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4859
_mm_maskz_or_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 4860
{ 
# 4861
return (__m128i)__builtin_ia32_pord128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 4866
} 
# 4869
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4870
_mm256_mask_xor_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 4871
__B) 
# 4872
{ 
# 4873
return (__m256i)__builtin_ia32_pxord256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 4877
} 
# 4880
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4881
_mm256_maskz_xor_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 4882
{ 
# 4883
return (__m256i)__builtin_ia32_pxord256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 4888
} 
# 4891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4892
_mm_mask_xor_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 4893
__B) 
# 4894
{ 
# 4895
return (__m128i)__builtin_ia32_pxord128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 4899
} 
# 4902
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4903
_mm_maskz_xor_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 4904
{ 
# 4905
return (__m128i)__builtin_ia32_pxord128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 4910
} 
# 4913
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4914
_mm_mask_cvtpd_ps(__m128 __W, __mmask8 __U, __m128d __A) 
# 4915
{ 
# 4916
return (__m128)__builtin_ia32_cvtpd2ps_mask((__v2df)__A, (__v4sf)__W, (__mmask8)__U); 
# 4919
} 
# 4922
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4923
_mm_maskz_cvtpd_ps(__mmask8 __U, __m128d __A) 
# 4924
{ 
# 4925
return (__m128)__builtin_ia32_cvtpd2ps_mask((__v2df)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 4929
} 
# 4932
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4933
_mm256_mask_cvtpd_ps(__m128 __W, __mmask8 __U, __m256d __A) 
# 4934
{ 
# 4935
return (__m128)__builtin_ia32_cvtpd2ps256_mask((__v4df)__A, (__v4sf)__W, (__mmask8)__U); 
# 4938
} 
# 4941
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 4942
_mm256_maskz_cvtpd_ps(__mmask8 __U, __m256d __A) 
# 4943
{ 
# 4944
return (__m128)__builtin_ia32_cvtpd2ps256_mask((__v4df)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 4948
} 
# 4951
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4952
_mm256_mask_cvtps_epi32(__m256i __W, __mmask8 __U, __m256 __A) 
# 4953
{ 
# 4954
return (__m256i)__builtin_ia32_cvtps2dq256_mask((__v8sf)__A, (__v8si)__W, (__mmask8)__U); 
# 4957
} 
# 4960
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4961
_mm256_maskz_cvtps_epi32(__mmask8 __U, __m256 __A) 
# 4962
{ 
# 4963
return (__m256i)__builtin_ia32_cvtps2dq256_mask((__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 4967
} 
# 4970
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4971
_mm_mask_cvtps_epi32(__m128i __W, __mmask8 __U, __m128 __A) 
# 4972
{ 
# 4973
return (__m128i)__builtin_ia32_cvtps2dq128_mask((__v4sf)__A, (__v4si)__W, (__mmask8)__U); 
# 4976
} 
# 4979
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4980
_mm_maskz_cvtps_epi32(__mmask8 __U, __m128 __A) 
# 4981
{ 
# 4982
return (__m128i)__builtin_ia32_cvtps2dq128_mask((__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 4986
} 
# 4989
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4990
_mm256_cvtps_epu32(__m256 __A) 
# 4991
{ 
# 4992
return (__m256i)__builtin_ia32_cvtps2udq256_mask((__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 4996
} 
# 4999
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5000
_mm256_mask_cvtps_epu32(__m256i __W, __mmask8 __U, __m256 __A) 
# 5001
{ 
# 5002
return (__m256i)__builtin_ia32_cvtps2udq256_mask((__v8sf)__A, (__v8si)__W, (__mmask8)__U); 
# 5005
} 
# 5008
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5009
_mm256_maskz_cvtps_epu32(__mmask8 __U, __m256 __A) 
# 5010
{ 
# 5011
return (__m256i)__builtin_ia32_cvtps2udq256_mask((__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 5015
} 
# 5018
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5019
_mm_cvtps_epu32(__m128 __A) 
# 5020
{ 
# 5021
return (__m128i)__builtin_ia32_cvtps2udq128_mask((__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 5025
} 
# 5028
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5029
_mm_mask_cvtps_epu32(__m128i __W, __mmask8 __U, __m128 __A) 
# 5030
{ 
# 5031
return (__m128i)__builtin_ia32_cvtps2udq128_mask((__v4sf)__A, (__v4si)__W, (__mmask8)__U); 
# 5034
} 
# 5037
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5038
_mm_maskz_cvtps_epu32(__mmask8 __U, __m128 __A) 
# 5039
{ 
# 5040
return (__m128i)__builtin_ia32_cvtps2udq128_mask((__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 5044
} 
# 5047
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5048
_mm256_mask_movedup_pd(__m256d __W, __mmask8 __U, __m256d __A) 
# 5049
{ 
# 5050
return (__m256d)__builtin_ia32_movddup256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 5053
} 
# 5056
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5057
_mm256_maskz_movedup_pd(__mmask8 __U, __m256d __A) 
# 5058
{ 
# 5059
return (__m256d)__builtin_ia32_movddup256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 5063
} 
# 5066
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 5067
_mm_mask_movedup_pd(__m128d __W, __mmask8 __U, __m128d __A) 
# 5068
{ 
# 5069
return (__m128d)__builtin_ia32_movddup128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 5072
} 
# 5075
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 5076
_mm_maskz_movedup_pd(__mmask8 __U, __m128d __A) 
# 5077
{ 
# 5078
return (__m128d)__builtin_ia32_movddup128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 5082
} 
# 5085
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 5086
_mm256_mask_movehdup_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 5087
{ 
# 5088
return (__m256)__builtin_ia32_movshdup256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 5091
} 
# 5094
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 5095
_mm256_maskz_movehdup_ps(__mmask8 __U, __m256 __A) 
# 5096
{ 
# 5097
return (__m256)__builtin_ia32_movshdup256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 5101
} 
# 5104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5105
_mm_mask_movehdup_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 5106
{ 
# 5107
return (__m128)__builtin_ia32_movshdup128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 5110
} 
# 5113
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5114
_mm_maskz_movehdup_ps(__mmask8 __U, __m128 __A) 
# 5115
{ 
# 5116
return (__m128)__builtin_ia32_movshdup128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 5120
} 
# 5123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 5124
_mm256_mask_moveldup_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 5125
{ 
# 5126
return (__m256)__builtin_ia32_movsldup256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 5129
} 
# 5132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 5133
_mm256_maskz_moveldup_ps(__mmask8 __U, __m256 __A) 
# 5134
{ 
# 5135
return (__m256)__builtin_ia32_movsldup256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 5139
} 
# 5142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5143
_mm_mask_moveldup_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 5144
{ 
# 5145
return (__m128)__builtin_ia32_movsldup128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 5148
} 
# 5151
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5152
_mm_maskz_moveldup_ps(__mmask8 __U, __m128 __A) 
# 5153
{ 
# 5154
return (__m128)__builtin_ia32_movsldup128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 5158
} 
# 5161
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5162
_mm_mask_unpackhi_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 5163
__B) 
# 5164
{ 
# 5165
return (__m128i)__builtin_ia32_punpckhdq128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 5169
} 
# 5172
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5173
_mm_maskz_unpackhi_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 5174
{ 
# 5175
return (__m128i)__builtin_ia32_punpckhdq128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 5180
} 
# 5183
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5184
_mm256_mask_unpackhi_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 5185
__B) 
# 5186
{ 
# 5187
return (__m256i)__builtin_ia32_punpckhdq256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 5191
} 
# 5194
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5195
_mm256_maskz_unpackhi_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 5196
{ 
# 5197
return (__m256i)__builtin_ia32_punpckhdq256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 5202
} 
# 5205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5206
_mm_mask_unpackhi_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 5207
__B) 
# 5208
{ 
# 5209
return (__m128i)__builtin_ia32_punpckhqdq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 5213
} 
# 5216
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5217
_mm_maskz_unpackhi_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 5218
{ 
# 5219
return (__m128i)__builtin_ia32_punpckhqdq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 5224
} 
# 5227
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5228
_mm256_mask_unpackhi_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 5229
__B) 
# 5230
{ 
# 5231
return (__m256i)__builtin_ia32_punpckhqdq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 5235
} 
# 5238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5239
_mm256_maskz_unpackhi_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 5240
{ 
# 5241
return (__m256i)__builtin_ia32_punpckhqdq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 5246
} 
# 5249
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5250
_mm_mask_unpacklo_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 5251
__B) 
# 5252
{ 
# 5253
return (__m128i)__builtin_ia32_punpckldq128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 5257
} 
# 5260
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5261
_mm_maskz_unpacklo_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 5262
{ 
# 5263
return (__m128i)__builtin_ia32_punpckldq128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 5268
} 
# 5271
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5272
_mm256_mask_unpacklo_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 5273
__B) 
# 5274
{ 
# 5275
return (__m256i)__builtin_ia32_punpckldq256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 5279
} 
# 5282
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5283
_mm256_maskz_unpacklo_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 5284
{ 
# 5285
return (__m256i)__builtin_ia32_punpckldq256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 5290
} 
# 5293
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5294
_mm_mask_unpacklo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 5295
__B) 
# 5296
{ 
# 5297
return (__m128i)__builtin_ia32_punpcklqdq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 5301
} 
# 5304
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5305
_mm_maskz_unpacklo_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 5306
{ 
# 5307
return (__m128i)__builtin_ia32_punpcklqdq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 5312
} 
# 5315
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5316
_mm256_mask_unpacklo_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 5317
__B) 
# 5318
{ 
# 5319
return (__m256i)__builtin_ia32_punpcklqdq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 5323
} 
# 5326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5327
_mm256_maskz_unpacklo_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 5328
{ 
# 5329
return (__m256i)__builtin_ia32_punpcklqdq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 5334
} 
# 5337
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5338
_mm_cmpeq_epu32_mask(__m128i __A, __m128i __B) 
# 5339
{ 
# 5340
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 0, (__mmask8)(-1)); 
# 5343
} 
# 5346
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5347
_mm_cmpeq_epi32_mask(__m128i __A, __m128i __B) 
# 5348
{ 
# 5349
return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__A, (__v4si)__B, (__mmask8)(-1)); 
# 5352
} 
# 5355
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5356
_mm_mask_cmpeq_epu32_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5357
{ 
# 5358
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 0, __U); 
# 5360
} 
# 5363
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5364
_mm_mask_cmpeq_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5365
{ 
# 5366
return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__A, (__v4si)__B, __U); 
# 5368
} 
# 5371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5372
_mm256_cmpeq_epu32_mask(__m256i __A, __m256i __B) 
# 5373
{ 
# 5374
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 0, (__mmask8)(-1)); 
# 5377
} 
# 5380
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5381
_mm256_cmpeq_epi32_mask(__m256i __A, __m256i __B) 
# 5382
{ 
# 5383
return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__A, (__v8si)__B, (__mmask8)(-1)); 
# 5386
} 
# 5389
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5390
_mm256_mask_cmpeq_epu32_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5391
{ 
# 5392
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 0, __U); 
# 5394
} 
# 5397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5398
_mm256_mask_cmpeq_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5399
{ 
# 5400
return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__A, (__v8si)__B, __U); 
# 5402
} 
# 5405
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5406
_mm_cmpeq_epu64_mask(__m128i __A, __m128i __B) 
# 5407
{ 
# 5408
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 0, (__mmask8)(-1)); 
# 5411
} 
# 5414
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5415
_mm_cmpeq_epi64_mask(__m128i __A, __m128i __B) 
# 5416
{ 
# 5417
return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__A, (__v2di)__B, (__mmask8)(-1)); 
# 5420
} 
# 5423
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5424
_mm_mask_cmpeq_epu64_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5425
{ 
# 5426
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 0, __U); 
# 5428
} 
# 5431
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5432
_mm_mask_cmpeq_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5433
{ 
# 5434
return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__A, (__v2di)__B, __U); 
# 5436
} 
# 5439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5440
_mm256_cmpeq_epu64_mask(__m256i __A, __m256i __B) 
# 5441
{ 
# 5442
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 0, (__mmask8)(-1)); 
# 5445
} 
# 5448
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5449
_mm256_cmpeq_epi64_mask(__m256i __A, __m256i __B) 
# 5450
{ 
# 5451
return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__A, (__v4di)__B, (__mmask8)(-1)); 
# 5454
} 
# 5457
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5458
_mm256_mask_cmpeq_epu64_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5459
{ 
# 5460
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 0, __U); 
# 5462
} 
# 5465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5466
_mm256_mask_cmpeq_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5467
{ 
# 5468
return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__A, (__v4di)__B, __U); 
# 5470
} 
# 5473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5474
_mm_cmpgt_epu32_mask(__m128i __A, __m128i __B) 
# 5475
{ 
# 5476
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 6, (__mmask8)(-1)); 
# 5479
} 
# 5482
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5483
_mm_cmpgt_epi32_mask(__m128i __A, __m128i __B) 
# 5484
{ 
# 5485
return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__A, (__v4si)__B, (__mmask8)(-1)); 
# 5488
} 
# 5491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5492
_mm_mask_cmpgt_epu32_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5493
{ 
# 5494
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 6, __U); 
# 5496
} 
# 5499
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5500
_mm_mask_cmpgt_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5501
{ 
# 5502
return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__A, (__v4si)__B, __U); 
# 5504
} 
# 5507
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5508
_mm256_cmpgt_epu32_mask(__m256i __A, __m256i __B) 
# 5509
{ 
# 5510
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 6, (__mmask8)(-1)); 
# 5513
} 
# 5516
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5517
_mm256_cmpgt_epi32_mask(__m256i __A, __m256i __B) 
# 5518
{ 
# 5519
return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__A, (__v8si)__B, (__mmask8)(-1)); 
# 5522
} 
# 5525
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5526
_mm256_mask_cmpgt_epu32_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5527
{ 
# 5528
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 6, __U); 
# 5530
} 
# 5533
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5534
_mm256_mask_cmpgt_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5535
{ 
# 5536
return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__A, (__v8si)__B, __U); 
# 5538
} 
# 5541
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5542
_mm_cmpgt_epu64_mask(__m128i __A, __m128i __B) 
# 5543
{ 
# 5544
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 6, (__mmask8)(-1)); 
# 5547
} 
# 5550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5551
_mm_cmpgt_epi64_mask(__m128i __A, __m128i __B) 
# 5552
{ 
# 5553
return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__A, (__v2di)__B, (__mmask8)(-1)); 
# 5556
} 
# 5559
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5560
_mm_mask_cmpgt_epu64_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5561
{ 
# 5562
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 6, __U); 
# 5564
} 
# 5567
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5568
_mm_mask_cmpgt_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5569
{ 
# 5570
return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__A, (__v2di)__B, __U); 
# 5572
} 
# 5575
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5576
_mm256_cmpgt_epu64_mask(__m256i __A, __m256i __B) 
# 5577
{ 
# 5578
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 6, (__mmask8)(-1)); 
# 5581
} 
# 5584
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5585
_mm256_cmpgt_epi64_mask(__m256i __A, __m256i __B) 
# 5586
{ 
# 5587
return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__A, (__v4di)__B, (__mmask8)(-1)); 
# 5590
} 
# 5593
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5594
_mm256_mask_cmpgt_epu64_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5595
{ 
# 5596
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 6, __U); 
# 5598
} 
# 5601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5602
_mm256_mask_cmpgt_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5603
{ 
# 5604
return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__A, (__v4di)__B, __U); 
# 5606
} 
# 5609
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5610
_mm_test_epi32_mask(__m128i __A, __m128i __B) 
# 5611
{ 
# 5612
return (__mmask8)__builtin_ia32_ptestmd128((__v4si)__A, (__v4si)__B, (__mmask8)(-1)); 
# 5615
} 
# 5618
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5619
_mm_mask_test_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5620
{ 
# 5621
return (__mmask8)__builtin_ia32_ptestmd128((__v4si)__A, (__v4si)__B, __U); 
# 5623
} 
# 5626
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5627
_mm256_test_epi32_mask(__m256i __A, __m256i __B) 
# 5628
{ 
# 5629
return (__mmask8)__builtin_ia32_ptestmd256((__v8si)__A, (__v8si)__B, (__mmask8)(-1)); 
# 5632
} 
# 5635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5636
_mm256_mask_test_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5637
{ 
# 5638
return (__mmask8)__builtin_ia32_ptestmd256((__v8si)__A, (__v8si)__B, __U); 
# 5640
} 
# 5643
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5644
_mm_test_epi64_mask(__m128i __A, __m128i __B) 
# 5645
{ 
# 5646
return (__mmask8)__builtin_ia32_ptestmq128((__v2di)__A, (__v2di)__B, (__mmask8)(-1)); 
# 5649
} 
# 5652
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5653
_mm_mask_test_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5654
{ 
# 5655
return (__mmask8)__builtin_ia32_ptestmq128((__v2di)__A, (__v2di)__B, __U); 
# 5657
} 
# 5660
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5661
_mm256_test_epi64_mask(__m256i __A, __m256i __B) 
# 5662
{ 
# 5663
return (__mmask8)__builtin_ia32_ptestmq256((__v4di)__A, (__v4di)__B, (__mmask8)(-1)); 
# 5666
} 
# 5669
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5670
_mm256_mask_test_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5671
{ 
# 5672
return (__mmask8)__builtin_ia32_ptestmq256((__v4di)__A, (__v4di)__B, __U); 
# 5674
} 
# 5677
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5678
_mm_testn_epi32_mask(__m128i __A, __m128i __B) 
# 5679
{ 
# 5680
return (__mmask8)__builtin_ia32_ptestnmd128((__v4si)__A, (__v4si)__B, (__mmask8)(-1)); 
# 5683
} 
# 5686
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5687
_mm_mask_testn_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5688
{ 
# 5689
return (__mmask8)__builtin_ia32_ptestnmd128((__v4si)__A, (__v4si)__B, __U); 
# 5691
} 
# 5694
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5695
_mm256_testn_epi32_mask(__m256i __A, __m256i __B) 
# 5696
{ 
# 5697
return (__mmask8)__builtin_ia32_ptestnmd256((__v8si)__A, (__v8si)__B, (__mmask8)(-1)); 
# 5700
} 
# 5703
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5704
_mm256_mask_testn_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5705
{ 
# 5706
return (__mmask8)__builtin_ia32_ptestnmd256((__v8si)__A, (__v8si)__B, __U); 
# 5708
} 
# 5711
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5712
_mm_testn_epi64_mask(__m128i __A, __m128i __B) 
# 5713
{ 
# 5714
return (__mmask8)__builtin_ia32_ptestnmq128((__v2di)__A, (__v2di)__B, (__mmask8)(-1)); 
# 5717
} 
# 5720
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5721
_mm_mask_testn_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 5722
{ 
# 5723
return (__mmask8)__builtin_ia32_ptestnmq128((__v2di)__A, (__v2di)__B, __U); 
# 5725
} 
# 5728
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5729
_mm256_testn_epi64_mask(__m256i __A, __m256i __B) 
# 5730
{ 
# 5731
return (__mmask8)__builtin_ia32_ptestnmq256((__v4di)__A, (__v4di)__B, (__mmask8)(-1)); 
# 5734
} 
# 5737
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 5738
_mm256_mask_testn_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) 
# 5739
{ 
# 5740
return (__mmask8)__builtin_ia32_ptestnmq256((__v4di)__A, (__v4di)__B, __U); 
# 5742
} 
# 5745
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5746
_mm256_mask_compress_pd(__m256d __W, __mmask8 __U, __m256d __A) 
# 5747
{ 
# 5748
return (__m256d)__builtin_ia32_compressdf256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 5751
} 
# 5754
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5755
_mm256_maskz_compress_pd(__mmask8 __U, __m256d __A) 
# 5756
{ 
# 5757
return (__m256d)__builtin_ia32_compressdf256_mask((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 5761
} 
# 5764
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5765
_mm256_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m256d __A) 
# 5766
{ 
# 5767
__builtin_ia32_compressstoredf256_mask((__v4df *)__P, (__v4df)__A, (__mmask8)__U); 
# 5770
} 
# 5773
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 5774
_mm_mask_compress_pd(__m128d __W, __mmask8 __U, __m128d __A) 
# 5775
{ 
# 5776
return (__m128d)__builtin_ia32_compressdf128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 5779
} 
# 5782
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 5783
_mm_maskz_compress_pd(__mmask8 __U, __m128d __A) 
# 5784
{ 
# 5785
return (__m128d)__builtin_ia32_compressdf128_mask((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 5789
} 
# 5792
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5793
_mm_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m128d __A) 
# 5794
{ 
# 5795
__builtin_ia32_compressstoredf128_mask((__v2df *)__P, (__v2df)__A, (__mmask8)__U); 
# 5798
} 
# 5801
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 5802
_mm256_mask_compress_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 5803
{ 
# 5804
return (__m256)__builtin_ia32_compresssf256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 5807
} 
# 5810
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 5811
_mm256_maskz_compress_ps(__mmask8 __U, __m256 __A) 
# 5812
{ 
# 5813
return (__m256)__builtin_ia32_compresssf256_mask((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 5817
} 
# 5820
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5821
_mm256_mask_compressstoreu_ps(void *__P, __mmask8 __U, __m256 __A) 
# 5822
{ 
# 5823
__builtin_ia32_compressstoresf256_mask((__v8sf *)__P, (__v8sf)__A, (__mmask8)__U); 
# 5826
} 
# 5829
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5830
_mm_mask_compress_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 5831
{ 
# 5832
return (__m128)__builtin_ia32_compresssf128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 5835
} 
# 5838
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 5839
_mm_maskz_compress_ps(__mmask8 __U, __m128 __A) 
# 5840
{ 
# 5841
return (__m128)__builtin_ia32_compresssf128_mask((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 5845
} 
# 5848
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5849
_mm_mask_compressstoreu_ps(void *__P, __mmask8 __U, __m128 __A) 
# 5850
{ 
# 5851
__builtin_ia32_compressstoresf128_mask((__v4sf *)__P, (__v4sf)__A, (__mmask8)__U); 
# 5854
} 
# 5857
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5858
_mm256_mask_compress_epi64(__m256i __W, __mmask8 __U, __m256i __A) 
# 5859
{ 
# 5860
return (__m256i)__builtin_ia32_compressdi256_mask((__v4di)__A, (__v4di)__W, (__mmask8)__U); 
# 5863
} 
# 5866
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5867
_mm256_maskz_compress_epi64(__mmask8 __U, __m256i __A) 
# 5868
{ 
# 5869
return (__m256i)__builtin_ia32_compressdi256_mask((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 5873
} 
# 5876
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5877
_mm256_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m256i __A) 
# 5878
{ 
# 5879
__builtin_ia32_compressstoredi256_mask((__v4di *)__P, (__v4di)__A, (__mmask8)__U); 
# 5882
} 
# 5885
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5886
_mm_mask_compress_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 5887
{ 
# 5888
return (__m128i)__builtin_ia32_compressdi128_mask((__v2di)__A, (__v2di)__W, (__mmask8)__U); 
# 5891
} 
# 5894
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5895
_mm_maskz_compress_epi64(__mmask8 __U, __m128i __A) 
# 5896
{ 
# 5897
return (__m128i)__builtin_ia32_compressdi128_mask((__v2di)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 5901
} 
# 5904
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5905
_mm_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m128i __A) 
# 5906
{ 
# 5907
__builtin_ia32_compressstoredi128_mask((__v2di *)__P, (__v2di)__A, (__mmask8)__U); 
# 5910
} 
# 5913
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5914
_mm256_mask_compress_epi32(__m256i __W, __mmask8 __U, __m256i __A) 
# 5915
{ 
# 5916
return (__m256i)__builtin_ia32_compresssi256_mask((__v8si)__A, (__v8si)__W, (__mmask8)__U); 
# 5919
} 
# 5922
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 5923
_mm256_maskz_compress_epi32(__mmask8 __U, __m256i __A) 
# 5924
{ 
# 5925
return (__m256i)__builtin_ia32_compresssi256_mask((__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 5929
} 
# 5932
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5933
_mm256_mask_compressstoreu_epi32(void *__P, __mmask8 __U, __m256i __A) 
# 5934
{ 
# 5935
__builtin_ia32_compressstoresi256_mask((__v8si *)__P, (__v8si)__A, (__mmask8)__U); 
# 5938
} 
# 5941
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5942
_mm_mask_compress_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 5943
{ 
# 5944
return (__m128i)__builtin_ia32_compresssi128_mask((__v4si)__A, (__v4si)__W, (__mmask8)__U); 
# 5947
} 
# 5950
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 5951
_mm_maskz_compress_epi32(__mmask8 __U, __m128i __A) 
# 5952
{ 
# 5953
return (__m128i)__builtin_ia32_compresssi128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 5957
} 
# 5960
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 5961
_mm_mask_compressstoreu_epi32(void *__P, __mmask8 __U, __m128i __A) 
# 5962
{ 
# 5963
__builtin_ia32_compressstoresi128_mask((__v4si *)__P, (__v4si)__A, (__mmask8)__U); 
# 5966
} 
# 5969
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5970
_mm256_mask_expand_pd(__m256d __W, __mmask8 __U, __m256d __A) 
# 5971
{ 
# 5972
return (__m256d)__builtin_ia32_expanddf256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 5975
} 
# 5978
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5979
_mm256_maskz_expand_pd(__mmask8 __U, __m256d __A) 
# 5980
{ 
# 5981
return (__m256d)__builtin_ia32_expanddf256_maskz((__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 5985
} 
# 5988
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5989
_mm256_mask_expandloadu_pd(__m256d __W, __mmask8 __U, const void *__P) 
# 5990
{ 
# 5991
return (__m256d)__builtin_ia32_expandloaddf256_mask((__v4df *)__P, (__v4df)__W, (__mmask8)__U); 
# 5995
} 
# 5998
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 5999
_mm256_maskz_expandloadu_pd(__mmask8 __U, const void *__P) 
# 6000
{ 
# 6001
return (__m256d)__builtin_ia32_expandloaddf256_maskz((__v4df *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 6006
} 
# 6009
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6010
_mm_mask_expand_pd(__m128d __W, __mmask8 __U, __m128d __A) 
# 6011
{ 
# 6012
return (__m128d)__builtin_ia32_expanddf128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 6015
} 
# 6018
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6019
_mm_maskz_expand_pd(__mmask8 __U, __m128d __A) 
# 6020
{ 
# 6021
return (__m128d)__builtin_ia32_expanddf128_maskz((__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 6025
} 
# 6028
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6029
_mm_mask_expandloadu_pd(__m128d __W, __mmask8 __U, const void *__P) 
# 6030
{ 
# 6031
return (__m128d)__builtin_ia32_expandloaddf128_mask((__v2df *)__P, (__v2df)__W, (__mmask8)__U); 
# 6035
} 
# 6038
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6039
_mm_maskz_expandloadu_pd(__mmask8 __U, const void *__P) 
# 6040
{ 
# 6041
return (__m128d)__builtin_ia32_expandloaddf128_maskz((__v2df *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 6046
} 
# 6049
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 6050
_mm256_mask_expand_ps(__m256 __W, __mmask8 __U, __m256 __A) 
# 6051
{ 
# 6052
return (__m256)__builtin_ia32_expandsf256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 6055
} 
# 6058
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 6059
_mm256_maskz_expand_ps(__mmask8 __U, __m256 __A) 
# 6060
{ 
# 6061
return (__m256)__builtin_ia32_expandsf256_maskz((__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 6065
} 
# 6068
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 6069
_mm256_mask_expandloadu_ps(__m256 __W, __mmask8 __U, const void *__P) 
# 6070
{ 
# 6071
return (__m256)__builtin_ia32_expandloadsf256_mask((__v8sf *)__P, (__v8sf)__W, (__mmask8)__U); 
# 6074
} 
# 6077
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 6078
_mm256_maskz_expandloadu_ps(__mmask8 __U, const void *__P) 
# 6079
{ 
# 6080
return (__m256)__builtin_ia32_expandloadsf256_maskz((__v8sf *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 6085
} 
# 6088
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6089
_mm_mask_expand_ps(__m128 __W, __mmask8 __U, __m128 __A) 
# 6090
{ 
# 6091
return (__m128)__builtin_ia32_expandsf128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 6094
} 
# 6097
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6098
_mm_maskz_expand_ps(__mmask8 __U, __m128 __A) 
# 6099
{ 
# 6100
return (__m128)__builtin_ia32_expandsf128_maskz((__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 6104
} 
# 6107
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6108
_mm_mask_expandloadu_ps(__m128 __W, __mmask8 __U, const void *__P) 
# 6109
{ 
# 6110
return (__m128)__builtin_ia32_expandloadsf128_mask((__v4sf *)__P, (__v4sf)__W, (__mmask8)__U); 
# 6113
} 
# 6116
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6117
_mm_maskz_expandloadu_ps(__mmask8 __U, const void *__P) 
# 6118
{ 
# 6119
return (__m128)__builtin_ia32_expandloadsf128_maskz((__v4sf *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 6124
} 
# 6127
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6128
_mm256_mask_expand_epi64(__m256i __W, __mmask8 __U, __m256i __A) 
# 6129
{ 
# 6130
return (__m256i)__builtin_ia32_expanddi256_mask((__v4di)__A, (__v4di)__W, (__mmask8)__U); 
# 6133
} 
# 6136
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6137
_mm256_maskz_expand_epi64(__mmask8 __U, __m256i __A) 
# 6138
{ 
# 6139
return (__m256i)__builtin_ia32_expanddi256_maskz((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 6143
} 
# 6146
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6147
_mm256_mask_expandloadu_epi64(__m256i __W, __mmask8 __U, const void *
# 6148
__P) 
# 6149
{ 
# 6150
return (__m256i)__builtin_ia32_expandloaddi256_mask((__v4di *)__P, (__v4di)__W, (__mmask8)__U); 
# 6154
} 
# 6157
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6158
_mm256_maskz_expandloadu_epi64(__mmask8 __U, const void *__P) 
# 6159
{ 
# 6160
return (__m256i)__builtin_ia32_expandloaddi256_maskz((__v4di *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 6165
} 
# 6168
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6169
_mm_mask_expand_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 6170
{ 
# 6171
return (__m128i)__builtin_ia32_expanddi128_mask((__v2di)__A, (__v2di)__W, (__mmask8)__U); 
# 6174
} 
# 6177
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6178
_mm_maskz_expand_epi64(__mmask8 __U, __m128i __A) 
# 6179
{ 
# 6180
return (__m128i)__builtin_ia32_expanddi128_maskz((__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 6184
} 
# 6187
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6188
_mm_mask_expandloadu_epi64(__m128i __W, __mmask8 __U, const void *__P) 
# 6189
{ 
# 6190
return (__m128i)__builtin_ia32_expandloaddi128_mask((__v2di *)__P, (__v2di)__W, (__mmask8)__U); 
# 6194
} 
# 6197
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6198
_mm_maskz_expandloadu_epi64(__mmask8 __U, const void *__P) 
# 6199
{ 
# 6200
return (__m128i)__builtin_ia32_expandloaddi128_maskz((__v2di *)__P, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 6205
} 
# 6208
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6209
_mm256_mask_expand_epi32(__m256i __W, __mmask8 __U, __m256i __A) 
# 6210
{ 
# 6211
return (__m256i)__builtin_ia32_expandsi256_mask((__v8si)__A, (__v8si)__W, (__mmask8)__U); 
# 6214
} 
# 6217
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6218
_mm256_maskz_expand_epi32(__mmask8 __U, __m256i __A) 
# 6219
{ 
# 6220
return (__m256i)__builtin_ia32_expandsi256_maskz((__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 6224
} 
# 6227
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6228
_mm256_mask_expandloadu_epi32(__m256i __W, __mmask8 __U, const void *
# 6229
__P) 
# 6230
{ 
# 6231
return (__m256i)__builtin_ia32_expandloadsi256_mask((__v8si *)__P, (__v8si)__W, (__mmask8)__U); 
# 6235
} 
# 6238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6239
_mm256_maskz_expandloadu_epi32(__mmask8 __U, const void *__P) 
# 6240
{ 
# 6241
return (__m256i)__builtin_ia32_expandloadsi256_maskz((__v8si *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 6246
} 
# 6249
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6250
_mm_mask_expand_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 6251
{ 
# 6252
return (__m128i)__builtin_ia32_expandsi128_mask((__v4si)__A, (__v4si)__W, (__mmask8)__U); 
# 6255
} 
# 6258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6259
_mm_maskz_expand_epi32(__mmask8 __U, __m128i __A) 
# 6260
{ 
# 6261
return (__m128i)__builtin_ia32_expandsi128_maskz((__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 6265
} 
# 6268
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6269
_mm_mask_expandloadu_epi32(__m128i __W, __mmask8 __U, const void *__P) 
# 6270
{ 
# 6271
return (__m128i)__builtin_ia32_expandloadsi128_mask((__v4si *)__P, (__v4si)__W, (__mmask8)__U); 
# 6275
} 
# 6278
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6279
_mm_maskz_expandloadu_epi32(__mmask8 __U, const void *__P) 
# 6280
{ 
# 6281
return (__m128i)__builtin_ia32_expandloadsi128_maskz((__v4si *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 6286
} 
# 6289
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 6290
_mm256_permutex2var_pd(__m256d __A, __m256i __I, __m256d __B) 
# 6291
{ 
# 6292
return (__m256d)__builtin_ia32_vpermt2varpd256_mask((__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)(-1)); 
# 6298
} 
# 6301
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 6302
_mm256_mask_permutex2var_pd(__m256d __A, __mmask8 __U, __m256i __I, __m256d 
# 6303
__B) 
# 6304
{ 
# 6305
return (__m256d)__builtin_ia32_vpermt2varpd256_mask((__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)__U); 
# 6311
} 
# 6314
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 6315
_mm256_mask2_permutex2var_pd(__m256d __A, __m256i __I, __mmask8 __U, __m256d 
# 6316
__B) 
# 6317
{ 
# 6318
return (__m256d)__builtin_ia32_vpermi2varpd256_mask((__v4df)__A, (__v4di)__I, (__v4df)__B, (__mmask8)__U); 
# 6324
} 
# 6327
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 6328
_mm256_maskz_permutex2var_pd(__mmask8 __U, __m256d __A, __m256i __I, __m256d 
# 6329
__B) 
# 6330
{ 
# 6331
return (__m256d)__builtin_ia32_vpermt2varpd256_maskz((__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)__U); 
# 6337
} 
# 6340
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 6341
_mm256_permutex2var_ps(__m256 __A, __m256i __I, __m256 __B) 
# 6342
{ 
# 6343
return (__m256)__builtin_ia32_vpermt2varps256_mask((__v8si)__I, (__v8sf)__A, (__v8sf)__B, (__mmask8)(-1)); 
# 6348
} 
# 6351
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 6352
_mm256_mask_permutex2var_ps(__m256 __A, __mmask8 __U, __m256i __I, __m256 
# 6353
__B) 
# 6354
{ 
# 6355
return (__m256)__builtin_ia32_vpermt2varps256_mask((__v8si)__I, (__v8sf)__A, (__v8sf)__B, (__mmask8)__U); 
# 6360
} 
# 6363
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 6364
_mm256_mask2_permutex2var_ps(__m256 __A, __m256i __I, __mmask8 __U, __m256 
# 6365
__B) 
# 6366
{ 
# 6367
return (__m256)__builtin_ia32_vpermi2varps256_mask((__v8sf)__A, (__v8si)__I, (__v8sf)__B, (__mmask8)__U); 
# 6372
} 
# 6375
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 6376
_mm256_maskz_permutex2var_ps(__mmask8 __U, __m256 __A, __m256i __I, __m256 
# 6377
__B) 
# 6378
{ 
# 6379
return (__m256)__builtin_ia32_vpermt2varps256_maskz((__v8si)__I, (__v8sf)__A, (__v8sf)__B, (__mmask8)__U); 
# 6385
} 
# 6388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6389
_mm_permutex2var_epi64(__m128i __A, __m128i __I, __m128i __B) 
# 6390
{ 
# 6391
return (__m128i)__builtin_ia32_vpermt2varq128_mask((__v2di)__I, (__v2di)__A, (__v2di)__B, (__mmask8)(-1)); 
# 6396
} 
# 6399
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6400
_mm_mask_permutex2var_epi64(__m128i __A, __mmask8 __U, __m128i __I, __m128i 
# 6401
__B) 
# 6402
{ 
# 6403
return (__m128i)__builtin_ia32_vpermt2varq128_mask((__v2di)__I, (__v2di)__A, (__v2di)__B, (__mmask8)__U); 
# 6408
} 
# 6411
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6412
_mm_mask2_permutex2var_epi64(__m128i __A, __m128i __I, __mmask8 __U, __m128i 
# 6413
__B) 
# 6414
{ 
# 6415
return (__m128i)__builtin_ia32_vpermi2varq128_mask((__v2di)__A, (__v2di)__I, (__v2di)__B, (__mmask8)__U); 
# 6420
} 
# 6423
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6424
_mm_maskz_permutex2var_epi64(__mmask8 __U, __m128i __A, __m128i __I, __m128i 
# 6425
__B) 
# 6426
{ 
# 6427
return (__m128i)__builtin_ia32_vpermt2varq128_maskz((__v2di)__I, (__v2di)__A, (__v2di)__B, (__mmask8)__U); 
# 6433
} 
# 6436
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6437
_mm_permutex2var_epi32(__m128i __A, __m128i __I, __m128i __B) 
# 6438
{ 
# 6439
return (__m128i)__builtin_ia32_vpermt2vard128_mask((__v4si)__I, (__v4si)__A, (__v4si)__B, (__mmask8)(-1)); 
# 6444
} 
# 6447
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6448
_mm_mask_permutex2var_epi32(__m128i __A, __mmask8 __U, __m128i __I, __m128i 
# 6449
__B) 
# 6450
{ 
# 6451
return (__m128i)__builtin_ia32_vpermt2vard128_mask((__v4si)__I, (__v4si)__A, (__v4si)__B, (__mmask8)__U); 
# 6456
} 
# 6459
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6460
_mm_mask2_permutex2var_epi32(__m128i __A, __m128i __I, __mmask8 __U, __m128i 
# 6461
__B) 
# 6462
{ 
# 6463
return (__m128i)__builtin_ia32_vpermi2vard128_mask((__v4si)__A, (__v4si)__I, (__v4si)__B, (__mmask8)__U); 
# 6468
} 
# 6471
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6472
_mm_maskz_permutex2var_epi32(__mmask8 __U, __m128i __A, __m128i __I, __m128i 
# 6473
__B) 
# 6474
{ 
# 6475
return (__m128i)__builtin_ia32_vpermt2vard128_maskz((__v4si)__I, (__v4si)__A, (__v4si)__B, (__mmask8)__U); 
# 6481
} 
# 6484
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6485
_mm256_permutex2var_epi64(__m256i __A, __m256i __I, __m256i __B) 
# 6486
{ 
# 6487
return (__m256i)__builtin_ia32_vpermt2varq256_mask((__v4di)__I, (__v4di)__A, (__v4di)__B, (__mmask8)(-1)); 
# 6492
} 
# 6495
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6496
_mm256_mask_permutex2var_epi64(__m256i __A, __mmask8 __U, __m256i __I, __m256i 
# 6497
__B) 
# 6498
{ 
# 6499
return (__m256i)__builtin_ia32_vpermt2varq256_mask((__v4di)__I, (__v4di)__A, (__v4di)__B, (__mmask8)__U); 
# 6504
} 
# 6507
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6508
_mm256_mask2_permutex2var_epi64(__m256i __A, __m256i __I, __mmask8 
# 6509
__U, __m256i __B) 
# 6510
{ 
# 6511
return (__m256i)__builtin_ia32_vpermi2varq256_mask((__v4di)__A, (__v4di)__I, (__v4di)__B, (__mmask8)__U); 
# 6516
} 
# 6519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6520
_mm256_maskz_permutex2var_epi64(__mmask8 __U, __m256i __A, __m256i 
# 6521
__I, __m256i __B) 
# 6522
{ 
# 6523
return (__m256i)__builtin_ia32_vpermt2varq256_maskz((__v4di)__I, (__v4di)__A, (__v4di)__B, (__mmask8)__U); 
# 6529
} 
# 6532
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6533
_mm256_permutex2var_epi32(__m256i __A, __m256i __I, __m256i __B) 
# 6534
{ 
# 6535
return (__m256i)__builtin_ia32_vpermt2vard256_mask((__v8si)__I, (__v8si)__A, (__v8si)__B, (__mmask8)(-1)); 
# 6540
} 
# 6543
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6544
_mm256_mask_permutex2var_epi32(__m256i __A, __mmask8 __U, __m256i __I, __m256i 
# 6545
__B) 
# 6546
{ 
# 6547
return (__m256i)__builtin_ia32_vpermt2vard256_mask((__v8si)__I, (__v8si)__A, (__v8si)__B, (__mmask8)__U); 
# 6552
} 
# 6555
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6556
_mm256_mask2_permutex2var_epi32(__m256i __A, __m256i __I, __mmask8 
# 6557
__U, __m256i __B) 
# 6558
{ 
# 6559
return (__m256i)__builtin_ia32_vpermi2vard256_mask((__v8si)__A, (__v8si)__I, (__v8si)__B, (__mmask8)__U); 
# 6564
} 
# 6567
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6568
_mm256_maskz_permutex2var_epi32(__mmask8 __U, __m256i __A, __m256i 
# 6569
__I, __m256i __B) 
# 6570
{ 
# 6571
return (__m256i)__builtin_ia32_vpermt2vard256_maskz((__v8si)__I, (__v8si)__A, (__v8si)__B, (__mmask8)__U); 
# 6577
} 
# 6580
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6581
_mm_permutex2var_pd(__m128d __A, __m128i __I, __m128d __B) 
# 6582
{ 
# 6583
return (__m128d)__builtin_ia32_vpermt2varpd128_mask((__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)(-1)); 
# 6589
} 
# 6592
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6593
_mm_mask_permutex2var_pd(__m128d __A, __mmask8 __U, __m128i __I, __m128d 
# 6594
__B) 
# 6595
{ 
# 6596
return (__m128d)__builtin_ia32_vpermt2varpd128_mask((__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)__U); 
# 6602
} 
# 6605
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6606
_mm_mask2_permutex2var_pd(__m128d __A, __m128i __I, __mmask8 __U, __m128d 
# 6607
__B) 
# 6608
{ 
# 6609
return (__m128d)__builtin_ia32_vpermi2varpd128_mask((__v2df)__A, (__v2di)__I, (__v2df)__B, (__mmask8)__U); 
# 6615
} 
# 6618
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 6619
_mm_maskz_permutex2var_pd(__mmask8 __U, __m128d __A, __m128i __I, __m128d 
# 6620
__B) 
# 6621
{ 
# 6622
return (__m128d)__builtin_ia32_vpermt2varpd128_maskz((__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)__U); 
# 6628
} 
# 6631
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6632
_mm_permutex2var_ps(__m128 __A, __m128i __I, __m128 __B) 
# 6633
{ 
# 6634
return (__m128)__builtin_ia32_vpermt2varps128_mask((__v4si)__I, (__v4sf)__A, (__v4sf)__B, (__mmask8)(-1)); 
# 6639
} 
# 6642
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6643
_mm_mask_permutex2var_ps(__m128 __A, __mmask8 __U, __m128i __I, __m128 
# 6644
__B) 
# 6645
{ 
# 6646
return (__m128)__builtin_ia32_vpermt2varps128_mask((__v4si)__I, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U); 
# 6651
} 
# 6654
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6655
_mm_mask2_permutex2var_ps(__m128 __A, __m128i __I, __mmask8 __U, __m128 
# 6656
__B) 
# 6657
{ 
# 6658
return (__m128)__builtin_ia32_vpermi2varps128_mask((__v4sf)__A, (__v4si)__I, (__v4sf)__B, (__mmask8)__U); 
# 6663
} 
# 6666
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 6667
_mm_maskz_permutex2var_ps(__mmask8 __U, __m128 __A, __m128i __I, __m128 
# 6668
__B) 
# 6669
{ 
# 6670
return (__m128)__builtin_ia32_vpermt2varps128_maskz((__v4si)__I, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U); 
# 6676
} 
# 6679
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6680
_mm_srav_epi64(__m128i __X, __m128i __Y) 
# 6681
{ 
# 6682
return (__m128i)__builtin_ia32_psravq128_mask((__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 6687
} 
# 6690
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6691
_mm_mask_srav_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i 
# 6692
__Y) 
# 6693
{ 
# 6694
return (__m128i)__builtin_ia32_psravq128_mask((__v2di)__X, (__v2di)__Y, (__v2di)__W, (__mmask8)__U); 
# 6698
} 
# 6701
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6702
_mm_maskz_srav_epi64(__mmask8 __U, __m128i __X, __m128i __Y) 
# 6703
{ 
# 6704
return (__m128i)__builtin_ia32_psravq128_mask((__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 6709
} 
# 6712
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6713
_mm256_mask_sllv_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i 
# 6714
__Y) 
# 6715
{ 
# 6716
return (__m256i)__builtin_ia32_psllv8si_mask((__v8si)__X, (__v8si)__Y, (__v8si)__W, (__mmask8)__U); 
# 6720
} 
# 6723
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6724
_mm256_maskz_sllv_epi32(__mmask8 __U, __m256i __X, __m256i __Y) 
# 6725
{ 
# 6726
return (__m256i)__builtin_ia32_psllv8si_mask((__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 6731
} 
# 6734
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6735
_mm_mask_sllv_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i 
# 6736
__Y) 
# 6737
{ 
# 6738
return (__m128i)__builtin_ia32_psllv4si_mask((__v4si)__X, (__v4si)__Y, (__v4si)__W, (__mmask8)__U); 
# 6742
} 
# 6745
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6746
_mm_maskz_sllv_epi32(__mmask8 __U, __m128i __X, __m128i __Y) 
# 6747
{ 
# 6748
return (__m128i)__builtin_ia32_psllv4si_mask((__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 6753
} 
# 6756
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6757
_mm256_mask_sllv_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i 
# 6758
__Y) 
# 6759
{ 
# 6760
return (__m256i)__builtin_ia32_psllv4di_mask((__v4di)__X, (__v4di)__Y, (__v4di)__W, (__mmask8)__U); 
# 6764
} 
# 6767
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6768
_mm256_maskz_sllv_epi64(__mmask8 __U, __m256i __X, __m256i __Y) 
# 6769
{ 
# 6770
return (__m256i)__builtin_ia32_psllv4di_mask((__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 6775
} 
# 6778
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6779
_mm_mask_sllv_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i 
# 6780
__Y) 
# 6781
{ 
# 6782
return (__m128i)__builtin_ia32_psllv2di_mask((__v2di)__X, (__v2di)__Y, (__v2di)__W, (__mmask8)__U); 
# 6786
} 
# 6789
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6790
_mm_maskz_sllv_epi64(__mmask8 __U, __m128i __X, __m128i __Y) 
# 6791
{ 
# 6792
return (__m128i)__builtin_ia32_psllv2di_mask((__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 6797
} 
# 6800
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6801
_mm256_mask_srav_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i 
# 6802
__Y) 
# 6803
{ 
# 6804
return (__m256i)__builtin_ia32_psrav8si_mask((__v8si)__X, (__v8si)__Y, (__v8si)__W, (__mmask8)__U); 
# 6808
} 
# 6811
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6812
_mm256_maskz_srav_epi32(__mmask8 __U, __m256i __X, __m256i __Y) 
# 6813
{ 
# 6814
return (__m256i)__builtin_ia32_psrav8si_mask((__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 6819
} 
# 6822
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6823
_mm_mask_srav_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i 
# 6824
__Y) 
# 6825
{ 
# 6826
return (__m128i)__builtin_ia32_psrav4si_mask((__v4si)__X, (__v4si)__Y, (__v4si)__W, (__mmask8)__U); 
# 6830
} 
# 6833
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6834
_mm_maskz_srav_epi32(__mmask8 __U, __m128i __X, __m128i __Y) 
# 6835
{ 
# 6836
return (__m128i)__builtin_ia32_psrav4si_mask((__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 6841
} 
# 6844
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6845
_mm256_mask_srlv_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i 
# 6846
__Y) 
# 6847
{ 
# 6848
return (__m256i)__builtin_ia32_psrlv8si_mask((__v8si)__X, (__v8si)__Y, (__v8si)__W, (__mmask8)__U); 
# 6852
} 
# 6855
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6856
_mm256_maskz_srlv_epi32(__mmask8 __U, __m256i __X, __m256i __Y) 
# 6857
{ 
# 6858
return (__m256i)__builtin_ia32_psrlv8si_mask((__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 6863
} 
# 6866
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6867
_mm_mask_srlv_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i 
# 6868
__Y) 
# 6869
{ 
# 6870
return (__m128i)__builtin_ia32_psrlv4si_mask((__v4si)__X, (__v4si)__Y, (__v4si)__W, (__mmask8)__U); 
# 6874
} 
# 6877
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6878
_mm_maskz_srlv_epi32(__mmask8 __U, __m128i __X, __m128i __Y) 
# 6879
{ 
# 6880
return (__m128i)__builtin_ia32_psrlv4si_mask((__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 6885
} 
# 6888
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6889
_mm256_mask_srlv_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i 
# 6890
__Y) 
# 6891
{ 
# 6892
return (__m256i)__builtin_ia32_psrlv4di_mask((__v4di)__X, (__v4di)__Y, (__v4di)__W, (__mmask8)__U); 
# 6896
} 
# 6899
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6900
_mm256_maskz_srlv_epi64(__mmask8 __U, __m256i __X, __m256i __Y) 
# 6901
{ 
# 6902
return (__m256i)__builtin_ia32_psrlv4di_mask((__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 6907
} 
# 6910
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6911
_mm_mask_srlv_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i 
# 6912
__Y) 
# 6913
{ 
# 6914
return (__m128i)__builtin_ia32_psrlv2di_mask((__v2di)__X, (__v2di)__Y, (__v2di)__W, (__mmask8)__U); 
# 6918
} 
# 6921
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6922
_mm_maskz_srlv_epi64(__mmask8 __U, __m128i __X, __m128i __Y) 
# 6923
{ 
# 6924
return (__m128i)__builtin_ia32_psrlv2di_mask((__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 6929
} 
# 6932
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6933
_mm256_rolv_epi32(__m256i __A, __m256i __B) 
# 6934
{ 
# 6935
return (__m256i)__builtin_ia32_prolvd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 6940
} 
# 6943
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6944
_mm256_mask_rolv_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 6945
__B) 
# 6946
{ 
# 6947
return (__m256i)__builtin_ia32_prolvd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 6951
} 
# 6954
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6955
_mm256_maskz_rolv_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 6956
{ 
# 6957
return (__m256i)__builtin_ia32_prolvd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 6962
} 
# 6965
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6966
_mm_rolv_epi32(__m128i __A, __m128i __B) 
# 6967
{ 
# 6968
return (__m128i)__builtin_ia32_prolvd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 6973
} 
# 6976
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6977
_mm_mask_rolv_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 6978
__B) 
# 6979
{ 
# 6980
return (__m128i)__builtin_ia32_prolvd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 6984
} 
# 6987
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 6988
_mm_maskz_rolv_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 6989
{ 
# 6990
return (__m128i)__builtin_ia32_prolvd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 6995
} 
# 6998
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 6999
_mm256_rorv_epi32(__m256i __A, __m256i __B) 
# 7000
{ 
# 7001
return (__m256i)__builtin_ia32_prorvd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 7006
} 
# 7009
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7010
_mm256_mask_rorv_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 7011
__B) 
# 7012
{ 
# 7013
return (__m256i)__builtin_ia32_prorvd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, (__mmask8)__U); 
# 7017
} 
# 7020
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7021
_mm256_maskz_rorv_epi32(__mmask8 __U, __m256i __A, __m256i __B) 
# 7022
{ 
# 7023
return (__m256i)__builtin_ia32_prorvd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 7028
} 
# 7031
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7032
_mm_rorv_epi32(__m128i __A, __m128i __B) 
# 7033
{ 
# 7034
return (__m128i)__builtin_ia32_prorvd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 7039
} 
# 7042
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7043
_mm_mask_rorv_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 7044
__B) 
# 7045
{ 
# 7046
return (__m128i)__builtin_ia32_prorvd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 7050
} 
# 7053
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7054
_mm_maskz_rorv_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 7055
{ 
# 7056
return (__m128i)__builtin_ia32_prorvd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 7061
} 
# 7064
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7065
_mm256_rolv_epi64(__m256i __A, __m256i __B) 
# 7066
{ 
# 7067
return (__m256i)__builtin_ia32_prolvq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 7072
} 
# 7075
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7076
_mm256_mask_rolv_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 7077
__B) 
# 7078
{ 
# 7079
return (__m256i)__builtin_ia32_prolvq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 7083
} 
# 7086
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7087
_mm256_maskz_rolv_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 7088
{ 
# 7089
return (__m256i)__builtin_ia32_prolvq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 7094
} 
# 7097
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7098
_mm_rolv_epi64(__m128i __A, __m128i __B) 
# 7099
{ 
# 7100
return (__m128i)__builtin_ia32_prolvq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 7105
} 
# 7108
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7109
_mm_mask_rolv_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 7110
__B) 
# 7111
{ 
# 7112
return (__m128i)__builtin_ia32_prolvq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 7116
} 
# 7119
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7120
_mm_maskz_rolv_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 7121
{ 
# 7122
return (__m128i)__builtin_ia32_prolvq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 7127
} 
# 7130
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7131
_mm256_rorv_epi64(__m256i __A, __m256i __B) 
# 7132
{ 
# 7133
return (__m256i)__builtin_ia32_prorvq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 7138
} 
# 7141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7142
_mm256_mask_rorv_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 7143
__B) 
# 7144
{ 
# 7145
return (__m256i)__builtin_ia32_prorvq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 7149
} 
# 7152
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7153
_mm256_maskz_rorv_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 7154
{ 
# 7155
return (__m256i)__builtin_ia32_prorvq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 7160
} 
# 7163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7164
_mm_rorv_epi64(__m128i __A, __m128i __B) 
# 7165
{ 
# 7166
return (__m128i)__builtin_ia32_prorvq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 7171
} 
# 7174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7175
_mm_mask_rorv_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 7176
__B) 
# 7177
{ 
# 7178
return (__m128i)__builtin_ia32_prorvq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 7182
} 
# 7185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7186
_mm_maskz_rorv_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 7187
{ 
# 7188
return (__m128i)__builtin_ia32_prorvq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 7193
} 
# 7196
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7197
_mm256_srav_epi64(__m256i __X, __m256i __Y) 
# 7198
{ 
# 7199
return (__m256i)__builtin_ia32_psravq256_mask((__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 7204
} 
# 7207
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7208
_mm256_mask_srav_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i 
# 7209
__Y) 
# 7210
{ 
# 7211
return (__m256i)__builtin_ia32_psravq256_mask((__v4di)__X, (__v4di)__Y, (__v4di)__W, (__mmask8)__U); 
# 7215
} 
# 7218
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7219
_mm256_maskz_srav_epi64(__mmask8 __U, __m256i __X, __m256i __Y) 
# 7220
{ 
# 7221
return (__m256i)__builtin_ia32_psravq256_mask((__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 7226
} 
# 7229
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7230
_mm256_mask_and_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 7231
__B) 
# 7232
{ 
# 7233
return (__m256i)__builtin_ia32_pandq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, __U); 
# 7236
} 
# 7239
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7240
_mm256_maskz_and_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 7241
{ 
# 7242
return (__m256i)__builtin_ia32_pandq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_pd(), __U); 
# 7247
} 
# 7250
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7251
_mm_mask_and_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 7252
__B) 
# 7253
{ 
# 7254
return (__m128i)__builtin_ia32_pandq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, __U); 
# 7257
} 
# 7260
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7261
_mm_maskz_and_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 7262
{ 
# 7263
return (__m128i)__builtin_ia32_pandq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_pd(), __U); 
# 7268
} 
# 7271
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7272
_mm256_mask_andnot_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 7273
__B) 
# 7274
{ 
# 7275
return (__m256i)__builtin_ia32_pandnq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, __U); 
# 7278
} 
# 7281
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7282
_mm256_maskz_andnot_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 7283
{ 
# 7284
return (__m256i)__builtin_ia32_pandnq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_pd(), __U); 
# 7289
} 
# 7292
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7293
_mm_mask_andnot_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 7294
__B) 
# 7295
{ 
# 7296
return (__m128i)__builtin_ia32_pandnq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, __U); 
# 7299
} 
# 7302
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7303
_mm_maskz_andnot_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 7304
{ 
# 7305
return (__m128i)__builtin_ia32_pandnq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_pd(), __U); 
# 7310
} 
# 7313
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7314
_mm256_mask_or_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 7315
__B) 
# 7316
{ 
# 7317
return (__m256i)__builtin_ia32_porq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 7321
} 
# 7324
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7325
_mm256_maskz_or_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 7326
{ 
# 7327
return (__m256i)__builtin_ia32_porq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 7332
} 
# 7335
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7336
_mm_mask_or_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) 
# 7337
{ 
# 7338
return (__m128i)__builtin_ia32_porq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 7342
} 
# 7345
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7346
_mm_maskz_or_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 7347
{ 
# 7348
return (__m128i)__builtin_ia32_porq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 7353
} 
# 7356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7357
_mm256_mask_xor_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 7358
__B) 
# 7359
{ 
# 7360
return (__m256i)__builtin_ia32_pxorq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 7364
} 
# 7367
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7368
_mm256_maskz_xor_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 7369
{ 
# 7370
return (__m256i)__builtin_ia32_pxorq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 7375
} 
# 7378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7379
_mm_mask_xor_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 7380
__B) 
# 7381
{ 
# 7382
return (__m128i)__builtin_ia32_pxorq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 7386
} 
# 7389
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7390
_mm_maskz_xor_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 7391
{ 
# 7392
return (__m128i)__builtin_ia32_pxorq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 7397
} 
# 7400
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 7401
_mm256_mask_max_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 7402
__B) 
# 7403
{ 
# 7404
return (__m256d)__builtin_ia32_maxpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 7408
} 
# 7411
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 7412
_mm256_maskz_max_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 7413
{ 
# 7414
return (__m256d)__builtin_ia32_maxpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 7419
} 
# 7422
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7423
_mm256_mask_max_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) 
# 7424
{ 
# 7425
return (__m256)__builtin_ia32_maxps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 7429
} 
# 7432
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7433
_mm256_maskz_max_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 7434
{ 
# 7435
return (__m256)__builtin_ia32_maxps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 7440
} 
# 7443
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7444
_mm_mask_div_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 7445
{ 
# 7446
return (__m128)__builtin_ia32_divps_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 7450
} 
# 7453
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7454
_mm_maskz_div_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 7455
{ 
# 7456
return (__m128)__builtin_ia32_divps_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 7461
} 
# 7464
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7465
_mm_mask_div_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 7466
{ 
# 7467
return (__m128d)__builtin_ia32_divpd_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 7471
} 
# 7474
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7475
_mm_maskz_div_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 7476
{ 
# 7477
return (__m128d)__builtin_ia32_divpd_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 7482
} 
# 7485
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 7486
_mm256_mask_min_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 7487
__B) 
# 7488
{ 
# 7489
return (__m256d)__builtin_ia32_minpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 7493
} 
# 7496
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 7497
_mm256_mask_div_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 7498
__B) 
# 7499
{ 
# 7500
return (__m256d)__builtin_ia32_divpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 7504
} 
# 7507
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 7508
_mm256_maskz_min_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 7509
{ 
# 7510
return (__m256d)__builtin_ia32_minpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 7515
} 
# 7518
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7519
_mm256_mask_min_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) 
# 7520
{ 
# 7521
return (__m256)__builtin_ia32_minps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 7525
} 
# 7528
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 7529
_mm256_maskz_div_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 7530
{ 
# 7531
return (__m256d)__builtin_ia32_divpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 7536
} 
# 7539
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7540
_mm256_mask_div_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) 
# 7541
{ 
# 7542
return (__m256)__builtin_ia32_divps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 7546
} 
# 7549
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7550
_mm256_maskz_min_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 7551
{ 
# 7552
return (__m256)__builtin_ia32_minps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 7557
} 
# 7560
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7561
_mm256_maskz_div_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 7562
{ 
# 7563
return (__m256)__builtin_ia32_divps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 7568
} 
# 7571
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7572
_mm_mask_min_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 7573
{ 
# 7574
return (__m128)__builtin_ia32_minps_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 7578
} 
# 7581
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7582
_mm_mask_mul_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 7583
{ 
# 7584
return (__m128)__builtin_ia32_mulps_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 7588
} 
# 7591
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7592
_mm_maskz_min_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 7593
{ 
# 7594
return (__m128)__builtin_ia32_minps_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 7599
} 
# 7602
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7603
_mm_maskz_mul_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 7604
{ 
# 7605
return (__m128)__builtin_ia32_mulps_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 7610
} 
# 7613
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7614
_mm_mask_max_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 7615
{ 
# 7616
return (__m128)__builtin_ia32_maxps_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 7620
} 
# 7623
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 7624
_mm_maskz_max_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 7625
{ 
# 7626
return (__m128)__builtin_ia32_maxps_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 7631
} 
# 7634
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7635
_mm_mask_min_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 7636
{ 
# 7637
return (__m128d)__builtin_ia32_minpd_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 7641
} 
# 7644
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7645
_mm_maskz_min_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 7646
{ 
# 7647
return (__m128d)__builtin_ia32_minpd_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 7652
} 
# 7655
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7656
_mm_mask_max_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 7657
{ 
# 7658
return (__m128d)__builtin_ia32_maxpd_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 7662
} 
# 7665
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7666
_mm_maskz_max_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 7667
{ 
# 7668
return (__m128d)__builtin_ia32_maxpd_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 7673
} 
# 7676
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7677
_mm_mask_mul_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 7678
{ 
# 7679
return (__m128d)__builtin_ia32_mulpd_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 7683
} 
# 7686
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 7687
_mm_maskz_mul_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 7688
{ 
# 7689
return (__m128d)__builtin_ia32_mulpd_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 7694
} 
# 7697
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7698
_mm256_mask_mul_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) 
# 7699
{ 
# 7700
return (__m256)__builtin_ia32_mulps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 7704
} 
# 7707
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 7708
_mm256_maskz_mul_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 7709
{ 
# 7710
return (__m256)__builtin_ia32_mulps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 7715
} 
# 7718
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 7719
_mm256_mask_mul_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 7720
__B) 
# 7721
{ 
# 7722
return (__m256d)__builtin_ia32_mulpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 7726
} 
# 7729
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 7730
_mm256_maskz_mul_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 7731
{ 
# 7732
return (__m256d)__builtin_ia32_mulpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 7737
} 
# 7740
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7741
_mm256_maskz_max_epi64(__mmask8 __M, __m256i __A, __m256i __B) 
# 7742
{ 
# 7743
return (__m256i)__builtin_ia32_pmaxsq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M); 
# 7748
} 
# 7751
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7752
_mm256_mask_max_epi64(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 7753
__B) 
# 7754
{ 
# 7755
return (__m256i)__builtin_ia32_pmaxsq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, __M); 
# 7758
} 
# 7761
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7762
_mm256_min_epi64(__m256i __A, __m256i __B) 
# 7763
{ 
# 7764
return (__m256i)__builtin_ia32_pminsq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 7769
} 
# 7772
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7773
_mm256_mask_min_epi64(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 7774
__B) 
# 7775
{ 
# 7776
return (__m256i)__builtin_ia32_pminsq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, __M); 
# 7779
} 
# 7782
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7783
_mm256_maskz_min_epi64(__mmask8 __M, __m256i __A, __m256i __B) 
# 7784
{ 
# 7785
return (__m256i)__builtin_ia32_pminsq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M); 
# 7790
} 
# 7793
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7794
_mm256_maskz_max_epu64(__mmask8 __M, __m256i __A, __m256i __B) 
# 7795
{ 
# 7796
return (__m256i)__builtin_ia32_pmaxuq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M); 
# 7801
} 
# 7804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7805
_mm256_max_epi64(__m256i __A, __m256i __B) 
# 7806
{ 
# 7807
return (__m256i)__builtin_ia32_pmaxsq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 7812
} 
# 7815
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7816
_mm256_max_epu64(__m256i __A, __m256i __B) 
# 7817
{ 
# 7818
return (__m256i)__builtin_ia32_pmaxuq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 7823
} 
# 7826
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7827
_mm256_mask_max_epu64(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 7828
__B) 
# 7829
{ 
# 7830
return (__m256i)__builtin_ia32_pmaxuq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, __M); 
# 7833
} 
# 7836
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7837
_mm256_min_epu64(__m256i __A, __m256i __B) 
# 7838
{ 
# 7839
return (__m256i)__builtin_ia32_pminuq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 7844
} 
# 7847
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7848
_mm256_mask_min_epu64(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 7849
__B) 
# 7850
{ 
# 7851
return (__m256i)__builtin_ia32_pminuq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, __M); 
# 7854
} 
# 7857
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7858
_mm256_maskz_min_epu64(__mmask8 __M, __m256i __A, __m256i __B) 
# 7859
{ 
# 7860
return (__m256i)__builtin_ia32_pminuq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M); 
# 7865
} 
# 7868
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7869
_mm256_maskz_max_epi32(__mmask8 __M, __m256i __A, __m256i __B) 
# 7870
{ 
# 7871
return (__m256i)__builtin_ia32_pmaxsd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M); 
# 7876
} 
# 7879
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7880
_mm256_mask_max_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 7881
__B) 
# 7882
{ 
# 7883
return (__m256i)__builtin_ia32_pmaxsd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, __M); 
# 7886
} 
# 7889
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7890
_mm256_maskz_min_epi32(__mmask8 __M, __m256i __A, __m256i __B) 
# 7891
{ 
# 7892
return (__m256i)__builtin_ia32_pminsd256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M); 
# 7897
} 
# 7900
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7901
_mm256_mask_min_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 7902
__B) 
# 7903
{ 
# 7904
return (__m256i)__builtin_ia32_pminsd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, __M); 
# 7907
} 
# 7910
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7911
_mm256_maskz_max_epu32(__mmask8 __M, __m256i __A, __m256i __B) 
# 7912
{ 
# 7913
return (__m256i)__builtin_ia32_pmaxud256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M); 
# 7918
} 
# 7921
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7922
_mm256_mask_max_epu32(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 7923
__B) 
# 7924
{ 
# 7925
return (__m256i)__builtin_ia32_pmaxud256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, __M); 
# 7928
} 
# 7931
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7932
_mm256_maskz_min_epu32(__mmask8 __M, __m256i __A, __m256i __B) 
# 7933
{ 
# 7934
return (__m256i)__builtin_ia32_pminud256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M); 
# 7939
} 
# 7942
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 7943
_mm256_mask_min_epu32(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 7944
__B) 
# 7945
{ 
# 7946
return (__m256i)__builtin_ia32_pminud256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, __M); 
# 7949
} 
# 7952
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7953
_mm_maskz_max_epi64(__mmask8 __M, __m128i __A, __m128i __B) 
# 7954
{ 
# 7955
return (__m128i)__builtin_ia32_pmaxsq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M); 
# 7960
} 
# 7963
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7964
_mm_mask_max_epi64(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 7965
__B) 
# 7966
{ 
# 7967
return (__m128i)__builtin_ia32_pmaxsq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, __M); 
# 7970
} 
# 7973
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7974
_mm_min_epi64(__m128i __A, __m128i __B) 
# 7975
{ 
# 7976
return (__m128i)__builtin_ia32_pminsq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 7981
} 
# 7984
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7985
_mm_mask_min_epi64(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 7986
__B) 
# 7987
{ 
# 7988
return (__m128i)__builtin_ia32_pminsq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, __M); 
# 7991
} 
# 7994
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 7995
_mm_maskz_min_epi64(__mmask8 __M, __m128i __A, __m128i __B) 
# 7996
{ 
# 7997
return (__m128i)__builtin_ia32_pminsq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M); 
# 8002
} 
# 8005
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8006
_mm_maskz_max_epu64(__mmask8 __M, __m128i __A, __m128i __B) 
# 8007
{ 
# 8008
return (__m128i)__builtin_ia32_pmaxuq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M); 
# 8013
} 
# 8016
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8017
_mm_max_epi64(__m128i __A, __m128i __B) 
# 8018
{ 
# 8019
return (__m128i)__builtin_ia32_pmaxsq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 8024
} 
# 8027
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8028
_mm_max_epu64(__m128i __A, __m128i __B) 
# 8029
{ 
# 8030
return (__m128i)__builtin_ia32_pmaxuq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 8035
} 
# 8038
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8039
_mm_mask_max_epu64(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 8040
__B) 
# 8041
{ 
# 8042
return (__m128i)__builtin_ia32_pmaxuq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, __M); 
# 8045
} 
# 8048
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8049
_mm_min_epu64(__m128i __A, __m128i __B) 
# 8050
{ 
# 8051
return (__m128i)__builtin_ia32_pminuq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 8056
} 
# 8059
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8060
_mm_mask_min_epu64(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 8061
__B) 
# 8062
{ 
# 8063
return (__m128i)__builtin_ia32_pminuq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, __M); 
# 8066
} 
# 8069
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8070
_mm_maskz_min_epu64(__mmask8 __M, __m128i __A, __m128i __B) 
# 8071
{ 
# 8072
return (__m128i)__builtin_ia32_pminuq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M); 
# 8077
} 
# 8080
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8081
_mm_maskz_max_epi32(__mmask8 __M, __m128i __A, __m128i __B) 
# 8082
{ 
# 8083
return (__m128i)__builtin_ia32_pmaxsd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M); 
# 8088
} 
# 8091
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8092
_mm_mask_max_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 8093
__B) 
# 8094
{ 
# 8095
return (__m128i)__builtin_ia32_pmaxsd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, __M); 
# 8098
} 
# 8101
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8102
_mm_maskz_min_epi32(__mmask8 __M, __m128i __A, __m128i __B) 
# 8103
{ 
# 8104
return (__m128i)__builtin_ia32_pminsd128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M); 
# 8109
} 
# 8112
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8113
_mm_mask_min_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 8114
__B) 
# 8115
{ 
# 8116
return (__m128i)__builtin_ia32_pminsd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, __M); 
# 8119
} 
# 8122
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8123
_mm_maskz_max_epu32(__mmask8 __M, __m128i __A, __m128i __B) 
# 8124
{ 
# 8125
return (__m128i)__builtin_ia32_pmaxud128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M); 
# 8130
} 
# 8133
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8134
_mm_mask_max_epu32(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 8135
__B) 
# 8136
{ 
# 8137
return (__m128i)__builtin_ia32_pmaxud128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, __M); 
# 8140
} 
# 8143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8144
_mm_maskz_min_epu32(__mmask8 __M, __m128i __A, __m128i __B) 
# 8145
{ 
# 8146
return (__m128i)__builtin_ia32_pminud128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M); 
# 8151
} 
# 8154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8155
_mm_mask_min_epu32(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 8156
__B) 
# 8157
{ 
# 8158
return (__m128i)__builtin_ia32_pminud128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, __M); 
# 8161
} 
# 8164
#pragma GCC push_options
#pragma GCC target ( "avx512vl,avx512cd" )
# 8170
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8171
_mm_broadcastmb_epi64(__mmask8 __A) 
# 8172
{ 
# 8173
return (__m128i)__builtin_ia32_broadcastmb128(__A); 
# 8174
} 
# 8177
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8178
_mm256_broadcastmb_epi64(__mmask8 __A) 
# 8179
{ 
# 8180
return (__m256i)__builtin_ia32_broadcastmb256(__A); 
# 8181
} 
# 8184
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8185
_mm_broadcastmw_epi32(__mmask16 __A) 
# 8186
{ 
# 8187
return (__m128i)__builtin_ia32_broadcastmw128(__A); 
# 8188
} 
# 8191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8192
_mm256_broadcastmw_epi32(__mmask16 __A) 
# 8193
{ 
# 8194
return (__m256i)__builtin_ia32_broadcastmw256(__A); 
# 8195
} 
# 8198
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8199
_mm256_lzcnt_epi32(__m256i __A) 
# 8200
{ 
# 8201
return (__m256i)__builtin_ia32_vplzcntd_256_mask((__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 8205
} 
# 8208
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8209
_mm256_mask_lzcnt_epi32(__m256i __W, __mmask8 __U, __m256i __A) 
# 8210
{ 
# 8211
return (__m256i)__builtin_ia32_vplzcntd_256_mask((__v8si)__A, (__v8si)__W, (__mmask8)__U); 
# 8214
} 
# 8217
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8218
_mm256_maskz_lzcnt_epi32(__mmask8 __U, __m256i __A) 
# 8219
{ 
# 8220
return (__m256i)__builtin_ia32_vplzcntd_256_mask((__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 8224
} 
# 8227
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8228
_mm256_lzcnt_epi64(__m256i __A) 
# 8229
{ 
# 8230
return (__m256i)__builtin_ia32_vplzcntq_256_mask((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 8234
} 
# 8237
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8238
_mm256_mask_lzcnt_epi64(__m256i __W, __mmask8 __U, __m256i __A) 
# 8239
{ 
# 8240
return (__m256i)__builtin_ia32_vplzcntq_256_mask((__v4di)__A, (__v4di)__W, (__mmask8)__U); 
# 8243
} 
# 8246
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8247
_mm256_maskz_lzcnt_epi64(__mmask8 __U, __m256i __A) 
# 8248
{ 
# 8249
return (__m256i)__builtin_ia32_vplzcntq_256_mask((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 8253
} 
# 8256
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8257
_mm256_conflict_epi64(__m256i __A) 
# 8258
{ 
# 8259
return (__m256i)__builtin_ia32_vpconflictdi_256_mask((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 8264
} 
# 8267
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8268
_mm256_mask_conflict_epi64(__m256i __W, __mmask8 __U, __m256i __A) 
# 8269
{ 
# 8270
return (__m256i)__builtin_ia32_vpconflictdi_256_mask((__v4di)__A, (__v4di)__W, (__mmask8)__U); 
# 8274
} 
# 8277
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8278
_mm256_maskz_conflict_epi64(__mmask8 __U, __m256i __A) 
# 8279
{ 
# 8280
return (__m256i)__builtin_ia32_vpconflictdi_256_mask((__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 8285
} 
# 8288
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8289
_mm256_conflict_epi32(__m256i __A) 
# 8290
{ 
# 8291
return (__m256i)__builtin_ia32_vpconflictsi_256_mask((__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 8296
} 
# 8299
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8300
_mm256_mask_conflict_epi32(__m256i __W, __mmask8 __U, __m256i __A) 
# 8301
{ 
# 8302
return (__m256i)__builtin_ia32_vpconflictsi_256_mask((__v8si)__A, (__v8si)__W, (__mmask8)__U); 
# 8306
} 
# 8309
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8310
_mm256_maskz_conflict_epi32(__mmask8 __U, __m256i __A) 
# 8311
{ 
# 8312
return (__m256i)__builtin_ia32_vpconflictsi_256_mask((__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 8317
} 
# 8320
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8321
_mm_lzcnt_epi32(__m128i __A) 
# 8322
{ 
# 8323
return (__m128i)__builtin_ia32_vplzcntd_128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 8327
} 
# 8330
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8331
_mm_mask_lzcnt_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 8332
{ 
# 8333
return (__m128i)__builtin_ia32_vplzcntd_128_mask((__v4si)__A, (__v4si)__W, (__mmask8)__U); 
# 8336
} 
# 8339
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8340
_mm_maskz_lzcnt_epi32(__mmask8 __U, __m128i __A) 
# 8341
{ 
# 8342
return (__m128i)__builtin_ia32_vplzcntd_128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 8346
} 
# 8349
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8350
_mm_lzcnt_epi64(__m128i __A) 
# 8351
{ 
# 8352
return (__m128i)__builtin_ia32_vplzcntq_128_mask((__v2di)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 8356
} 
# 8359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8360
_mm_mask_lzcnt_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 8361
{ 
# 8362
return (__m128i)__builtin_ia32_vplzcntq_128_mask((__v2di)__A, (__v2di)__W, (__mmask8)__U); 
# 8365
} 
# 8368
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8369
_mm_maskz_lzcnt_epi64(__mmask8 __U, __m128i __A) 
# 8370
{ 
# 8371
return (__m128i)__builtin_ia32_vplzcntq_128_mask((__v2di)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 8375
} 
# 8378
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8379
_mm_conflict_epi64(__m128i __A) 
# 8380
{ 
# 8381
return (__m128i)__builtin_ia32_vpconflictdi_128_mask((__v2di)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 8386
} 
# 8389
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8390
_mm_mask_conflict_epi64(__m128i __W, __mmask8 __U, __m128i __A) 
# 8391
{ 
# 8392
return (__m128i)__builtin_ia32_vpconflictdi_128_mask((__v2di)__A, (__v2di)__W, (__mmask8)__U); 
# 8396
} 
# 8399
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8400
_mm_maskz_conflict_epi64(__mmask8 __U, __m128i __A) 
# 8401
{ 
# 8402
return (__m128i)__builtin_ia32_vpconflictdi_128_mask((__v2di)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 8407
} 
# 8410
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8411
_mm_conflict_epi32(__m128i __A) 
# 8412
{ 
# 8413
return (__m128i)__builtin_ia32_vpconflictsi_128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 8418
} 
# 8421
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8422
_mm_mask_conflict_epi32(__m128i __W, __mmask8 __U, __m128i __A) 
# 8423
{ 
# 8424
return (__m128i)__builtin_ia32_vpconflictsi_128_mask((__v4si)__A, (__v4si)__W, (__mmask8)__U); 
# 8428
} 
# 8431
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8432
_mm_maskz_conflict_epi32(__mmask8 __U, __m128i __A) 
# 8433
{ 
# 8434
return (__m128i)__builtin_ia32_vpconflictsi_128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 8439
} 
# 8442
#pragma GCC pop_options
# 8446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8447
_mm256_mask_unpacklo_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 8448
__B) 
# 8449
{ 
# 8450
return (__m256d)__builtin_ia32_unpcklpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 8454
} 
# 8457
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8458
_mm256_maskz_unpacklo_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 8459
{ 
# 8460
return (__m256d)__builtin_ia32_unpcklpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 8465
} 
# 8468
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8469
_mm_mask_unpacklo_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d 
# 8470
__B) 
# 8471
{ 
# 8472
return (__m128d)__builtin_ia32_unpcklpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 8476
} 
# 8479
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8480
_mm_maskz_unpacklo_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 8481
{ 
# 8482
return (__m128d)__builtin_ia32_unpcklpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 8487
} 
# 8490
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8491
_mm256_mask_unpacklo_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 
# 8492
__B) 
# 8493
{ 
# 8494
return (__m256)__builtin_ia32_unpcklps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 8498
} 
# 8501
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8502
_mm256_mask_unpackhi_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 8503
__B) 
# 8504
{ 
# 8505
return (__m256d)__builtin_ia32_unpckhpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 8509
} 
# 8512
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8513
_mm256_maskz_unpackhi_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 8514
{ 
# 8515
return (__m256d)__builtin_ia32_unpckhpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 8520
} 
# 8523
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8524
_mm_mask_unpackhi_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d 
# 8525
__B) 
# 8526
{ 
# 8527
return (__m128d)__builtin_ia32_unpckhpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 8531
} 
# 8534
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8535
_mm_maskz_unpackhi_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 8536
{ 
# 8537
return (__m128d)__builtin_ia32_unpckhpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 8542
} 
# 8545
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8546
_mm256_mask_unpackhi_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 
# 8547
__B) 
# 8548
{ 
# 8549
return (__m256)__builtin_ia32_unpckhps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 8553
} 
# 8556
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8557
_mm256_maskz_unpackhi_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 8558
{ 
# 8559
return (__m256)__builtin_ia32_unpckhps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 8564
} 
# 8567
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8568
_mm_mask_unpackhi_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 8569
{ 
# 8570
return (__m128)__builtin_ia32_unpckhps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 8574
} 
# 8577
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8578
_mm_maskz_unpackhi_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 8579
{ 
# 8580
return (__m128)__builtin_ia32_unpckhps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 8585
} 
# 8588
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8589
_mm_mask_cvtph_ps(__m128 __W, __mmask8 __U, __m128i __A) 
# 8590
{ 
# 8591
return (__m128)__builtin_ia32_vcvtph2ps_mask((__v8hi)__A, (__v4sf)__W, (__mmask8)__U); 
# 8594
} 
# 8597
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8598
_mm_maskz_cvtph_ps(__mmask8 __U, __m128i __A) 
# 8599
{ 
# 8600
return (__m128)__builtin_ia32_vcvtph2ps_mask((__v8hi)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 8604
} 
# 8607
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8608
_mm256_maskz_unpacklo_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 8609
{ 
# 8610
return (__m256)__builtin_ia32_unpcklps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 8615
} 
# 8618
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8619
_mm256_mask_cvtph_ps(__m256 __W, __mmask8 __U, __m128i __A) 
# 8620
{ 
# 8621
return (__m256)__builtin_ia32_vcvtph2ps256_mask((__v8hi)__A, (__v8sf)__W, (__mmask8)__U); 
# 8624
} 
# 8627
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8628
_mm256_maskz_cvtph_ps(__mmask8 __U, __m128i __A) 
# 8629
{ 
# 8630
return (__m256)__builtin_ia32_vcvtph2ps256_mask((__v8hi)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 8634
} 
# 8637
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8638
_mm_mask_unpacklo_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 8639
{ 
# 8640
return (__m128)__builtin_ia32_unpcklps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 8644
} 
# 8647
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8648
_mm_maskz_unpacklo_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 8649
{ 
# 8650
return (__m128)__builtin_ia32_unpcklps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 8655
} 
# 8658
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8659
_mm256_mask_sra_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i 
# 8660
__B) 
# 8661
{ 
# 8662
return (__m256i)__builtin_ia32_psrad256_mask((__v8si)__A, (__v4si)__B, (__v8si)__W, (__mmask8)__U); 
# 8666
} 
# 8669
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8670
_mm256_maskz_sra_epi32(__mmask8 __U, __m256i __A, __m128i __B) 
# 8671
{ 
# 8672
return (__m256i)__builtin_ia32_psrad256_mask((__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 8677
} 
# 8680
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8681
_mm_mask_sra_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 8682
__B) 
# 8683
{ 
# 8684
return (__m128i)__builtin_ia32_psrad128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 8688
} 
# 8691
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8692
_mm_maskz_sra_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 8693
{ 
# 8694
return (__m128i)__builtin_ia32_psrad128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 8699
} 
# 8702
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8703
_mm256_sra_epi64(__m256i __A, __m128i __B) 
# 8704
{ 
# 8705
return (__m256i)__builtin_ia32_psraq256_mask((__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 8710
} 
# 8713
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8714
_mm256_mask_sra_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i 
# 8715
__B) 
# 8716
{ 
# 8717
return (__m256i)__builtin_ia32_psraq256_mask((__v4di)__A, (__v2di)__B, (__v4di)__W, (__mmask8)__U); 
# 8721
} 
# 8724
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8725
_mm256_maskz_sra_epi64(__mmask8 __U, __m256i __A, __m128i __B) 
# 8726
{ 
# 8727
return (__m256i)__builtin_ia32_psraq256_mask((__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 8732
} 
# 8735
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8736
_mm_sra_epi64(__m128i __A, __m128i __B) 
# 8737
{ 
# 8738
return (__m128i)__builtin_ia32_psraq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 8743
} 
# 8746
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8747
_mm_mask_sra_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 8748
__B) 
# 8749
{ 
# 8750
return (__m128i)__builtin_ia32_psraq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 8754
} 
# 8757
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8758
_mm_maskz_sra_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 8759
{ 
# 8760
return (__m128i)__builtin_ia32_psraq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 8765
} 
# 8768
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8769
_mm_mask_sll_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 8770
__B) 
# 8771
{ 
# 8772
return (__m128i)__builtin_ia32_pslld128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, (__mmask8)__U); 
# 8776
} 
# 8779
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8780
_mm_maskz_sll_epi32(__mmask8 __U, __m128i __A, __m128i __B) 
# 8781
{ 
# 8782
return (__m128i)__builtin_ia32_pslld128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 8787
} 
# 8790
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8791
_mm_mask_sll_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 8792
__B) 
# 8793
{ 
# 8794
return (__m128i)__builtin_ia32_psllq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 8798
} 
# 8801
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 8802
_mm_maskz_sll_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 8803
{ 
# 8804
return (__m128i)__builtin_ia32_psllq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 8809
} 
# 8812
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8813
_mm256_mask_sll_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i 
# 8814
__B) 
# 8815
{ 
# 8816
return (__m256i)__builtin_ia32_pslld256_mask((__v8si)__A, (__v4si)__B, (__v8si)__W, (__mmask8)__U); 
# 8820
} 
# 8823
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8824
_mm256_maskz_sll_epi32(__mmask8 __U, __m256i __A, __m128i __B) 
# 8825
{ 
# 8826
return (__m256i)__builtin_ia32_pslld256_mask((__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 8831
} 
# 8834
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8835
_mm256_mask_sll_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i 
# 8836
__B) 
# 8837
{ 
# 8838
return (__m256i)__builtin_ia32_psllq256_mask((__v4di)__A, (__v2di)__B, (__v4di)__W, (__mmask8)__U); 
# 8842
} 
# 8845
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 8846
_mm256_maskz_sll_epi64(__mmask8 __U, __m256i __A, __m128i __B) 
# 8847
{ 
# 8848
return (__m256i)__builtin_ia32_psllq256_mask((__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 8853
} 
# 8856
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8857
_mm256_mask_permutexvar_ps(__m256 __W, __mmask8 __U, __m256i __X, __m256 
# 8858
__Y) 
# 8859
{ 
# 8860
return (__m256)__builtin_ia32_permvarsf256_mask((__v8sf)__Y, (__v8si)__X, (__v8sf)__W, (__mmask8)__U); 
# 8864
} 
# 8867
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8868
_mm256_maskz_permutexvar_ps(__mmask8 __U, __m256i __X, __m256 __Y) 
# 8869
{ 
# 8870
return (__m256)__builtin_ia32_permvarsf256_mask((__v8sf)__Y, (__v8si)__X, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 8875
} 
# 8878
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8879
_mm256_permutexvar_pd(__m256i __X, __m256d __Y) 
# 8880
{ 
# 8881
return (__m256d)__builtin_ia32_permvardf256_mask((__v4df)__Y, (__v4di)__X, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 8886
} 
# 8889
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8890
_mm256_mask_permutexvar_pd(__m256d __W, __mmask8 __U, __m256i __X, __m256d 
# 8891
__Y) 
# 8892
{ 
# 8893
return (__m256d)__builtin_ia32_permvardf256_mask((__v4df)__Y, (__v4di)__X, (__v4df)__W, (__mmask8)__U); 
# 8897
} 
# 8900
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8901
_mm256_maskz_permutexvar_pd(__mmask8 __U, __m256i __X, __m256d __Y) 
# 8902
{ 
# 8903
return (__m256d)__builtin_ia32_permvardf256_mask((__v4df)__Y, (__v4di)__X, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 8908
} 
# 8911
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8912
_mm256_mask_permutevar_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256i 
# 8913
__C) 
# 8914
{ 
# 8915
return (__m256d)__builtin_ia32_vpermilvarpd256_mask((__v4df)__A, (__v4di)__C, (__v4df)__W, (__mmask8)__U); 
# 8920
} 
# 8923
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 8924
_mm256_maskz_permutevar_pd(__mmask8 __U, __m256d __A, __m256i __C) 
# 8925
{ 
# 8926
return (__m256d)__builtin_ia32_vpermilvarpd256_mask((__v4df)__A, (__v4di)__C, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 8932
} 
# 8935
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8936
_mm256_mask_permutevar_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256i 
# 8937
__C) 
# 8938
{ 
# 8939
return (__m256)__builtin_ia32_vpermilvarps256_mask((__v8sf)__A, (__v8si)__C, (__v8sf)__W, (__mmask8)__U); 
# 8943
} 
# 8946
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 8947
_mm256_maskz_permutevar_ps(__mmask8 __U, __m256 __A, __m256i __C) 
# 8948
{ 
# 8949
return (__m256)__builtin_ia32_vpermilvarps256_mask((__v8sf)__A, (__v8si)__C, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 8954
} 
# 8957
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8958
_mm_mask_permutevar_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128i 
# 8959
__C) 
# 8960
{ 
# 8961
return (__m128d)__builtin_ia32_vpermilvarpd_mask((__v2df)__A, (__v2di)__C, (__v2df)__W, (__mmask8)__U); 
# 8965
} 
# 8968
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 8969
_mm_maskz_permutevar_pd(__mmask8 __U, __m128d __A, __m128i __C) 
# 8970
{ 
# 8971
return (__m128d)__builtin_ia32_vpermilvarpd_mask((__v2df)__A, (__v2di)__C, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 8976
} 
# 8979
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8980
_mm_mask_permutevar_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128i 
# 8981
__C) 
# 8982
{ 
# 8983
return (__m128)__builtin_ia32_vpermilvarps_mask((__v4sf)__A, (__v4si)__C, (__v4sf)__W, (__mmask8)__U); 
# 8987
} 
# 8990
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 8991
_mm_maskz_permutevar_ps(__mmask8 __U, __m128 __A, __m128i __C) 
# 8992
{ 
# 8993
return (__m128)__builtin_ia32_vpermilvarps_mask((__v4sf)__A, (__v4si)__C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 8998
} 
# 9001
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9002
_mm256_maskz_mullo_epi32(__mmask8 __M, __m256i __A, __m256i __B) 
# 9003
{ 
# 9004
return (__m256i)__builtin_ia32_pmulld256_mask((__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M); 
# 9009
} 
# 9012
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9013
_mm256_maskz_permutexvar_epi64(__mmask8 __M, __m256i __X, __m256i __Y) 
# 9014
{ 
# 9015
return (__m256i)__builtin_ia32_permvardi256_mask((__v4di)__Y, (__v4di)__X, (__v4di)_mm256_setzero_si256(), __M); 
# 9020
} 
# 9023
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9024
_mm256_mask_mullo_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i 
# 9025
__B) 
# 9026
{ 
# 9027
return (__m256i)__builtin_ia32_pmulld256_mask((__v8si)__A, (__v8si)__B, (__v8si)__W, __M); 
# 9030
} 
# 9033
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9034
_mm_maskz_mullo_epi32(__mmask8 __M, __m128i __A, __m128i __B) 
# 9035
{ 
# 9036
return (__m128i)__builtin_ia32_pmulld128_mask((__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M); 
# 9041
} 
# 9044
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9045
_mm_mask_mullo_epi32(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 9046
__B) 
# 9047
{ 
# 9048
return (__m128i)__builtin_ia32_pmulld128_mask((__v4si)__A, (__v4si)__B, (__v4si)__W, __M); 
# 9051
} 
# 9054
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9055
_mm256_mask_mul_epi32(__m256i __W, __mmask8 __M, __m256i __X, __m256i 
# 9056
__Y) 
# 9057
{ 
# 9058
return (__m256i)__builtin_ia32_pmuldq256_mask((__v8si)__X, (__v8si)__Y, (__v4di)__W, __M); 
# 9061
} 
# 9064
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9065
_mm256_maskz_mul_epi32(__mmask8 __M, __m256i __X, __m256i __Y) 
# 9066
{ 
# 9067
return (__m256i)__builtin_ia32_pmuldq256_mask((__v8si)__X, (__v8si)__Y, (__v4di)_mm256_setzero_si256(), __M); 
# 9072
} 
# 9075
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9076
_mm_mask_mul_epi32(__m128i __W, __mmask8 __M, __m128i __X, __m128i 
# 9077
__Y) 
# 9078
{ 
# 9079
return (__m128i)__builtin_ia32_pmuldq128_mask((__v4si)__X, (__v4si)__Y, (__v2di)__W, __M); 
# 9082
} 
# 9085
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9086
_mm_maskz_mul_epi32(__mmask8 __M, __m128i __X, __m128i __Y) 
# 9087
{ 
# 9088
return (__m128i)__builtin_ia32_pmuldq128_mask((__v4si)__X, (__v4si)__Y, (__v2di)_mm_setzero_si128(), __M); 
# 9093
} 
# 9096
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9097
_mm256_mask_permutexvar_epi64(__m256i __W, __mmask8 __M, __m256i __X, __m256i 
# 9098
__Y) 
# 9099
{ 
# 9100
return (__m256i)__builtin_ia32_permvardi256_mask((__v4di)__Y, (__v4di)__X, (__v4di)__W, __M); 
# 9104
} 
# 9107
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9108
_mm256_mask_mul_epu32(__m256i __W, __mmask8 __M, __m256i __X, __m256i 
# 9109
__Y) 
# 9110
{ 
# 9111
return (__m256i)__builtin_ia32_pmuludq256_mask((__v8si)__X, (__v8si)__Y, (__v4di)__W, __M); 
# 9114
} 
# 9117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9118
_mm256_maskz_permutexvar_epi32(__mmask8 __M, __m256i __X, __m256i __Y) 
# 9119
{ 
# 9120
return (__m256i)__builtin_ia32_permvarsi256_mask((__v8si)__Y, (__v8si)__X, (__v8si)_mm256_setzero_si256(), __M); 
# 9125
} 
# 9128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9129
_mm256_maskz_mul_epu32(__mmask8 __M, __m256i __X, __m256i __Y) 
# 9130
{ 
# 9131
return (__m256i)__builtin_ia32_pmuludq256_mask((__v8si)__X, (__v8si)__Y, (__v4di)_mm256_setzero_si256(), __M); 
# 9136
} 
# 9139
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9140
_mm_mask_mul_epu32(__m128i __W, __mmask8 __M, __m128i __X, __m128i 
# 9141
__Y) 
# 9142
{ 
# 9143
return (__m128i)__builtin_ia32_pmuludq128_mask((__v4si)__X, (__v4si)__Y, (__v2di)__W, __M); 
# 9146
} 
# 9149
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9150
_mm_maskz_mul_epu32(__mmask8 __M, __m128i __X, __m128i __Y) 
# 9151
{ 
# 9152
return (__m128i)__builtin_ia32_pmuludq128_mask((__v4si)__X, (__v4si)__Y, (__v2di)_mm_setzero_si128(), __M); 
# 9157
} 
# 9160
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9161
_mm256_mask_permutexvar_epi32(__m256i __W, __mmask8 __M, __m256i __X, __m256i 
# 9162
__Y) 
# 9163
{ 
# 9164
return (__m256i)__builtin_ia32_permvarsi256_mask((__v8si)__Y, (__v8si)__X, (__v8si)__W, __M); 
# 9168
} 
# 9172
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9173
_mm256_mask_permutex_epi64(__m256i __W, __mmask8 __M, __m256i 
# 9174
__X, const int __I) 
# 9175
{ 
# 9176
return (__m256i)__builtin_ia32_permdi256_mask((__v4di)__X, __I, (__v4di)__W, (__mmask8)__M); 
# 9180
} 
# 9183
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9184
_mm256_maskz_permutex_epi64(__mmask8 __M, __m256i __X, const int __I) 
# 9185
{ 
# 9186
return (__m256i)__builtin_ia32_permdi256_mask((__v4di)__X, __I, (__v4di)_mm256_setzero_si256(), (__mmask8)__M); 
# 9191
} 
# 9194
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9195
_mm256_mask_shuffle_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 9196
__B, const int __imm) 
# 9197
{ 
# 9198
return (__m256d)__builtin_ia32_shufpd256_mask((__v4df)__A, (__v4df)__B, __imm, (__v4df)__W, (__mmask8)__U); 
# 9202
} 
# 9205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9206
_mm256_maskz_shuffle_pd(__mmask8 __U, __m256d __A, __m256d __B, const int 
# 9207
__imm) 
# 9208
{ 
# 9209
return (__m256d)__builtin_ia32_shufpd256_mask((__v4df)__A, (__v4df)__B, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 9214
} 
# 9217
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 9218
_mm_mask_shuffle_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d 
# 9219
__B, const int __imm) 
# 9220
{ 
# 9221
return (__m128d)__builtin_ia32_shufpd128_mask((__v2df)__A, (__v2df)__B, __imm, (__v2df)__W, (__mmask8)__U); 
# 9225
} 
# 9228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 9229
_mm_maskz_shuffle_pd(__mmask8 __U, __m128d __A, __m128d __B, const int 
# 9230
__imm) 
# 9231
{ 
# 9232
return (__m128d)__builtin_ia32_shufpd128_mask((__v2df)__A, (__v2df)__B, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 9237
} 
# 9240
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9241
_mm256_mask_shuffle_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 
# 9242
__B, const int __imm) 
# 9243
{ 
# 9244
return (__m256)__builtin_ia32_shufps256_mask((__v8sf)__A, (__v8sf)__B, __imm, (__v8sf)__W, (__mmask8)__U); 
# 9248
} 
# 9251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9252
_mm256_maskz_shuffle_ps(__mmask8 __U, __m256 __A, __m256 __B, const int 
# 9253
__imm) 
# 9254
{ 
# 9255
return (__m256)__builtin_ia32_shufps256_mask((__v8sf)__A, (__v8sf)__B, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 9260
} 
# 9263
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 9264
_mm_mask_shuffle_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B, const int 
# 9265
__imm) 
# 9266
{ 
# 9267
return (__m128)__builtin_ia32_shufps128_mask((__v4sf)__A, (__v4sf)__B, __imm, (__v4sf)__W, (__mmask8)__U); 
# 9271
} 
# 9274
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 9275
_mm_maskz_shuffle_ps(__mmask8 __U, __m128 __A, __m128 __B, const int 
# 9276
__imm) 
# 9277
{ 
# 9278
return (__m128)__builtin_ia32_shufps128_mask((__v4sf)__A, (__v4sf)__B, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 9283
} 
# 9286
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9287
_mm256_inserti32x4(__m256i __A, __m128i __B, const int __imm) 
# 9288
{ 
# 9289
return (__m256i)__builtin_ia32_inserti32x4_256_mask((__v8si)__A, (__v4si)__B, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 9296
} 
# 9299
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9300
_mm256_mask_inserti32x4(__m256i __W, __mmask8 __U, __m256i __A, __m128i 
# 9301
__B, const int __imm) 
# 9302
{ 
# 9303
return (__m256i)__builtin_ia32_inserti32x4_256_mask((__v8si)__A, (__v4si)__B, __imm, (__v8si)__W, (__mmask8)__U); 
# 9309
} 
# 9312
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9313
_mm256_maskz_inserti32x4(__mmask8 __U, __m256i __A, __m128i __B, const int 
# 9314
__imm) 
# 9315
{ 
# 9316
return (__m256i)__builtin_ia32_inserti32x4_256_mask((__v8si)__A, (__v4si)__B, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 9323
} 
# 9326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9327
_mm256_insertf32x4(__m256 __A, __m128 __B, const int __imm) 
# 9328
{ 
# 9329
return (__m256)__builtin_ia32_insertf32x4_256_mask((__v8sf)__A, (__v4sf)__B, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 9335
} 
# 9338
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9339
_mm256_mask_insertf32x4(__m256 __W, __mmask8 __U, __m256 __A, __m128 
# 9340
__B, const int __imm) 
# 9341
{ 
# 9342
return (__m256)__builtin_ia32_insertf32x4_256_mask((__v8sf)__A, (__v4sf)__B, __imm, (__v8sf)__W, (__mmask8)__U); 
# 9347
} 
# 9350
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9351
_mm256_maskz_insertf32x4(__mmask8 __U, __m256 __A, __m128 __B, const int 
# 9352
__imm) 
# 9353
{ 
# 9354
return (__m256)__builtin_ia32_insertf32x4_256_mask((__v8sf)__A, (__v4sf)__B, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 9360
} 
# 9363
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9364
_mm256_extracti32x4_epi32(__m256i __A, const int __imm) 
# 9365
{ 
# 9366
return (__m128i)__builtin_ia32_extracti32x4_256_mask((__v8si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 9372
} 
# 9375
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9376
_mm256_mask_extracti32x4_epi32(__m128i __W, __mmask8 __U, __m256i __A, const int 
# 9377
__imm) 
# 9378
{ 
# 9379
return (__m128i)__builtin_ia32_extracti32x4_256_mask((__v8si)__A, __imm, (__v4si)__W, (__mmask8)__U); 
# 9384
} 
# 9387
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9388
_mm256_maskz_extracti32x4_epi32(__mmask8 __U, __m256i __A, const int 
# 9389
__imm) 
# 9390
{ 
# 9391
return (__m128i)__builtin_ia32_extracti32x4_256_mask((__v8si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 9397
} 
# 9400
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 9401
_mm256_extractf32x4_ps(__m256 __A, const int __imm) 
# 9402
{ 
# 9403
return (__m128)__builtin_ia32_extractf32x4_256_mask((__v8sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 9409
} 
# 9412
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 9413
_mm256_mask_extractf32x4_ps(__m128 __W, __mmask8 __U, __m256 __A, const int 
# 9414
__imm) 
# 9415
{ 
# 9416
return (__m128)__builtin_ia32_extractf32x4_256_mask((__v8sf)__A, __imm, (__v4sf)__W, (__mmask8)__U); 
# 9421
} 
# 9424
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 9425
_mm256_maskz_extractf32x4_ps(__mmask8 __U, __m256 __A, const int 
# 9426
__imm) 
# 9427
{ 
# 9428
return (__m128)__builtin_ia32_extractf32x4_256_mask((__v8sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 9434
} 
# 9437
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9438
_mm256_shuffle_i64x2(__m256i __A, __m256i __B, const int __imm) 
# 9439
{ 
# 9440
return (__m256i)__builtin_ia32_shuf_i64x2_256_mask((__v4di)__A, (__v4di)__B, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 9446
} 
# 9449
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9450
_mm256_mask_shuffle_i64x2(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 9451
__B, const int __imm) 
# 9452
{ 
# 9453
return (__m256i)__builtin_ia32_shuf_i64x2_256_mask((__v4di)__A, (__v4di)__B, __imm, (__v4di)__W, (__mmask8)__U); 
# 9458
} 
# 9461
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9462
_mm256_maskz_shuffle_i64x2(__mmask8 __U, __m256i __A, __m256i __B, const int 
# 9463
__imm) 
# 9464
{ 
# 9465
return (__m256i)__builtin_ia32_shuf_i64x2_256_mask((__v4di)__A, (__v4di)__B, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 9471
} 
# 9474
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9475
_mm256_shuffle_i32x4(__m256i __A, __m256i __B, const int __imm) 
# 9476
{ 
# 9477
return (__m256i)__builtin_ia32_shuf_i32x4_256_mask((__v8si)__A, (__v8si)__B, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 9483
} 
# 9486
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9487
_mm256_mask_shuffle_i32x4(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 9488
__B, const int __imm) 
# 9489
{ 
# 9490
return (__m256i)__builtin_ia32_shuf_i32x4_256_mask((__v8si)__A, (__v8si)__B, __imm, (__v8si)__W, (__mmask8)__U); 
# 9495
} 
# 9498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9499
_mm256_maskz_shuffle_i32x4(__mmask8 __U, __m256i __A, __m256i __B, const int 
# 9500
__imm) 
# 9501
{ 
# 9502
return (__m256i)__builtin_ia32_shuf_i32x4_256_mask((__v8si)__A, (__v8si)__B, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 9508
} 
# 9511
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9512
_mm256_shuffle_f64x2(__m256d __A, __m256d __B, const int __imm) 
# 9513
{ 
# 9514
return (__m256d)__builtin_ia32_shuf_f64x2_256_mask((__v4df)__A, (__v4df)__B, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 9520
} 
# 9523
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9524
_mm256_mask_shuffle_f64x2(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 9525
__B, const int __imm) 
# 9526
{ 
# 9527
return (__m256d)__builtin_ia32_shuf_f64x2_256_mask((__v4df)__A, (__v4df)__B, __imm, (__v4df)__W, (__mmask8)__U); 
# 9532
} 
# 9535
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9536
_mm256_maskz_shuffle_f64x2(__mmask8 __U, __m256d __A, __m256d __B, const int 
# 9537
__imm) 
# 9538
{ 
# 9539
return (__m256d)__builtin_ia32_shuf_f64x2_256_mask((__v4df)__A, (__v4df)__B, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 9545
} 
# 9548
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9549
_mm256_shuffle_f32x4(__m256 __A, __m256 __B, const int __imm) 
# 9550
{ 
# 9551
return (__m256)__builtin_ia32_shuf_f32x4_256_mask((__v8sf)__A, (__v8sf)__B, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 9557
} 
# 9560
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9561
_mm256_mask_shuffle_f32x4(__m256 __W, __mmask8 __U, __m256 __A, __m256 
# 9562
__B, const int __imm) 
# 9563
{ 
# 9564
return (__m256)__builtin_ia32_shuf_f32x4_256_mask((__v8sf)__A, (__v8sf)__B, __imm, (__v8sf)__W, (__mmask8)__U); 
# 9569
} 
# 9572
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9573
_mm256_maskz_shuffle_f32x4(__mmask8 __U, __m256 __A, __m256 __B, const int 
# 9574
__imm) 
# 9575
{ 
# 9576
return (__m256)__builtin_ia32_shuf_f32x4_256_mask((__v8sf)__A, (__v8sf)__B, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 9582
} 
# 9585
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9586
_mm256_fixupimm_pd(__m256d __A, __m256d __B, __m256i __C, const int 
# 9587
__imm) 
# 9588
{ 
# 9589
return (__m256d)__builtin_ia32_fixupimmpd256_mask((__v4df)__A, (__v4df)__B, (__v4di)__C, __imm, (__mmask8)(-1)); 
# 9594
} 
# 9597
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9598
_mm256_mask_fixupimm_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256i 
# 9599
__C, const int __imm) 
# 9600
{ 
# 9601
return (__m256d)__builtin_ia32_fixupimmpd256_mask((__v4df)__A, (__v4df)__B, (__v4di)__C, __imm, (__mmask8)__U); 
# 9606
} 
# 9609
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9610
_mm256_maskz_fixupimm_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256i 
# 9611
__C, const int __imm) 
# 9612
{ 
# 9613
return (__m256d)__builtin_ia32_fixupimmpd256_maskz((__v4df)__A, (__v4df)__B, (__v4di)__C, __imm, (__mmask8)__U); 
# 9618
} 
# 9621
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9622
_mm256_fixupimm_ps(__m256 __A, __m256 __B, __m256i __C, const int 
# 9623
__imm) 
# 9624
{ 
# 9625
return (__m256)__builtin_ia32_fixupimmps256_mask((__v8sf)__A, (__v8sf)__B, (__v8si)__C, __imm, (__mmask8)(-1)); 
# 9630
} 
# 9633
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9634
_mm256_mask_fixupimm_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256i 
# 9635
__C, const int __imm) 
# 9636
{ 
# 9637
return (__m256)__builtin_ia32_fixupimmps256_mask((__v8sf)__A, (__v8sf)__B, (__v8si)__C, __imm, (__mmask8)__U); 
# 9642
} 
# 9645
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9646
_mm256_maskz_fixupimm_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256i 
# 9647
__C, const int __imm) 
# 9648
{ 
# 9649
return (__m256)__builtin_ia32_fixupimmps256_maskz((__v8sf)__A, (__v8sf)__B, (__v8si)__C, __imm, (__mmask8)__U); 
# 9654
} 
# 9657
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 9658
_mm_fixupimm_pd(__m128d __A, __m128d __B, __m128i __C, const int 
# 9659
__imm) 
# 9660
{ 
# 9661
return (__m128d)__builtin_ia32_fixupimmpd128_mask((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)(-1)); 
# 9666
} 
# 9669
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 9670
_mm_mask_fixupimm_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128i 
# 9671
__C, const int __imm) 
# 9672
{ 
# 9673
return (__m128d)__builtin_ia32_fixupimmpd128_mask((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U); 
# 9678
} 
# 9681
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 9682
_mm_maskz_fixupimm_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128i 
# 9683
__C, const int __imm) 
# 9684
{ 
# 9685
return (__m128d)__builtin_ia32_fixupimmpd128_maskz((__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U); 
# 9690
} 
# 9693
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 9694
_mm_fixupimm_ps(__m128 __A, __m128 __B, __m128i __C, const int __imm) 
# 9695
{ 
# 9696
return (__m128)__builtin_ia32_fixupimmps128_mask((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)(-1)); 
# 9701
} 
# 9704
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 9705
_mm_mask_fixupimm_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128i 
# 9706
__C, const int __imm) 
# 9707
{ 
# 9708
return (__m128)__builtin_ia32_fixupimmps128_mask((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U); 
# 9713
} 
# 9716
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 9717
_mm_maskz_fixupimm_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128i 
# 9718
__C, const int __imm) 
# 9719
{ 
# 9720
return (__m128)__builtin_ia32_fixupimmps128_maskz((__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U); 
# 9725
} 
# 9728
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9729
_mm256_mask_srli_epi32(__m256i __W, __mmask8 __U, __m256i __A, const int 
# 9730
__imm) 
# 9731
{ 
# 9732
return (__m256i)__builtin_ia32_psrldi256_mask((__v8si)__A, __imm, (__v8si)__W, (__mmask8)__U); 
# 9735
} 
# 9738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9739
_mm256_maskz_srli_epi32(__mmask8 __U, __m256i __A, const int __imm) 
# 9740
{ 
# 9741
return (__m256i)__builtin_ia32_psrldi256_mask((__v8si)__A, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 9745
} 
# 9748
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9749
_mm_mask_srli_epi32(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 9750
__imm) 
# 9751
{ 
# 9752
return (__m128i)__builtin_ia32_psrldi128_mask((__v4si)__A, __imm, (__v4si)__W, (__mmask8)__U); 
# 9755
} 
# 9758
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9759
_mm_maskz_srli_epi32(__mmask8 __U, __m128i __A, const int __imm) 
# 9760
{ 
# 9761
return (__m128i)__builtin_ia32_psrldi128_mask((__v4si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 9765
} 
# 9768
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9769
_mm256_mask_srli_epi64(__m256i __W, __mmask8 __U, __m256i __A, const int 
# 9770
__imm) 
# 9771
{ 
# 9772
return (__m256i)__builtin_ia32_psrlqi256_mask((__v4di)__A, __imm, (__v4di)__W, (__mmask8)__U); 
# 9775
} 
# 9778
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9779
_mm256_maskz_srli_epi64(__mmask8 __U, __m256i __A, const int __imm) 
# 9780
{ 
# 9781
return (__m256i)__builtin_ia32_psrlqi256_mask((__v4di)__A, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 9785
} 
# 9788
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9789
_mm_mask_srli_epi64(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 9790
__imm) 
# 9791
{ 
# 9792
return (__m128i)__builtin_ia32_psrlqi128_mask((__v2di)__A, __imm, (__v2di)__W, (__mmask8)__U); 
# 9795
} 
# 9798
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9799
_mm_maskz_srli_epi64(__mmask8 __U, __m128i __A, const int __imm) 
# 9800
{ 
# 9801
return (__m128i)__builtin_ia32_psrlqi128_mask((__v2di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 9805
} 
# 9808
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9809
_mm256_ternarylogic_epi64(__m256i __A, __m256i __B, __m256i __C, const int 
# 9810
imm) 
# 9811
{ 
# 9812
return (__m256i)__builtin_ia32_pternlogq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__C, imm, (__mmask8)(-1)); 
# 9816
} 
# 9819
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9820
_mm256_mask_ternarylogic_epi64(__m256i __A, __mmask8 __U, __m256i 
# 9821
__B, __m256i __C, const int 
# 9822
imm) 
# 9823
{ 
# 9824
return (__m256i)__builtin_ia32_pternlogq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__C, imm, (__mmask8)__U); 
# 9828
} 
# 9831
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9832
_mm256_maskz_ternarylogic_epi64(__mmask8 __U, __m256i __A, __m256i 
# 9833
__B, __m256i __C, const int 
# 9834
imm) 
# 9835
{ 
# 9836
return (__m256i)__builtin_ia32_pternlogq256_maskz((__v4di)__A, (__v4di)__B, (__v4di)__C, imm, (__mmask8)__U); 
# 9841
} 
# 9844
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9845
_mm256_ternarylogic_epi32(__m256i __A, __m256i __B, __m256i __C, const int 
# 9846
imm) 
# 9847
{ 
# 9848
return (__m256i)__builtin_ia32_pternlogd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__C, imm, (__mmask8)(-1)); 
# 9852
} 
# 9855
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9856
_mm256_mask_ternarylogic_epi32(__m256i __A, __mmask8 __U, __m256i 
# 9857
__B, __m256i __C, const int 
# 9858
imm) 
# 9859
{ 
# 9860
return (__m256i)__builtin_ia32_pternlogd256_mask((__v8si)__A, (__v8si)__B, (__v8si)__C, imm, (__mmask8)__U); 
# 9864
} 
# 9867
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 9868
_mm256_maskz_ternarylogic_epi32(__mmask8 __U, __m256i __A, __m256i 
# 9869
__B, __m256i __C, const int 
# 9870
imm) 
# 9871
{ 
# 9872
return (__m256i)__builtin_ia32_pternlogd256_maskz((__v8si)__A, (__v8si)__B, (__v8si)__C, imm, (__mmask8)__U); 
# 9877
} 
# 9880
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9881
_mm_ternarylogic_epi64(__m128i __A, __m128i __B, __m128i __C, const int 
# 9882
imm) 
# 9883
{ 
# 9884
return (__m128i)__builtin_ia32_pternlogq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__C, imm, (__mmask8)(-1)); 
# 9888
} 
# 9891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9892
_mm_mask_ternarylogic_epi64(__m128i __A, __mmask8 __U, __m128i 
# 9893
__B, __m128i __C, const int imm) 
# 9894
{ 
# 9895
return (__m128i)__builtin_ia32_pternlogq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__C, imm, (__mmask8)__U); 
# 9899
} 
# 9902
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9903
_mm_maskz_ternarylogic_epi64(__mmask8 __U, __m128i __A, __m128i 
# 9904
__B, __m128i __C, const int imm) 
# 9905
{ 
# 9906
return (__m128i)__builtin_ia32_pternlogq128_maskz((__v2di)__A, (__v2di)__B, (__v2di)__C, imm, (__mmask8)__U); 
# 9911
} 
# 9914
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9915
_mm_ternarylogic_epi32(__m128i __A, __m128i __B, __m128i __C, const int 
# 9916
imm) 
# 9917
{ 
# 9918
return (__m128i)__builtin_ia32_pternlogd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__C, imm, (__mmask8)(-1)); 
# 9922
} 
# 9925
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9926
_mm_mask_ternarylogic_epi32(__m128i __A, __mmask8 __U, __m128i 
# 9927
__B, __m128i __C, const int imm) 
# 9928
{ 
# 9929
return (__m128i)__builtin_ia32_pternlogd128_mask((__v4si)__A, (__v4si)__B, (__v4si)__C, imm, (__mmask8)__U); 
# 9933
} 
# 9936
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 9937
_mm_maskz_ternarylogic_epi32(__mmask8 __U, __m128i __A, __m128i 
# 9938
__B, __m128i __C, const int imm) 
# 9939
{ 
# 9940
return (__m128i)__builtin_ia32_pternlogd128_maskz((__v4si)__A, (__v4si)__B, (__v4si)__C, imm, (__mmask8)__U); 
# 9945
} 
# 9948
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9949
_mm256_roundscale_ps(__m256 __A, const int __imm) 
# 9950
{ 
# 9951
return (__m256)__builtin_ia32_rndscaleps_256_mask((__v8sf)__A, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 9956
} 
# 9959
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9960
_mm256_mask_roundscale_ps(__m256 __W, __mmask8 __U, __m256 __A, const int 
# 9961
__imm) 
# 9962
{ 
# 9963
return (__m256)__builtin_ia32_rndscaleps_256_mask((__v8sf)__A, __imm, (__v8sf)__W, (__mmask8)__U); 
# 9967
} 
# 9970
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 9971
_mm256_maskz_roundscale_ps(__mmask8 __U, __m256 __A, const int __imm) 
# 9972
{ 
# 9973
return (__m256)__builtin_ia32_rndscaleps_256_mask((__v8sf)__A, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 9978
} 
# 9981
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9982
_mm256_roundscale_pd(__m256d __A, const int __imm) 
# 9983
{ 
# 9984
return (__m256d)__builtin_ia32_rndscalepd_256_mask((__v4df)__A, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 9989
} 
# 9992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 9993
_mm256_mask_roundscale_pd(__m256d __W, __mmask8 __U, __m256d __A, const int 
# 9994
__imm) 
# 9995
{ 
# 9996
return (__m256d)__builtin_ia32_rndscalepd_256_mask((__v4df)__A, __imm, (__v4df)__W, (__mmask8)__U); 
# 10000
} 
# 10003
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 10004
_mm256_maskz_roundscale_pd(__mmask8 __U, __m256d __A, const int __imm) 
# 10005
{ 
# 10006
return (__m256d)__builtin_ia32_rndscalepd_256_mask((__v4df)__A, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 10011
} 
# 10014
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10015
_mm_roundscale_ps(__m128 __A, const int __imm) 
# 10016
{ 
# 10017
return (__m128)__builtin_ia32_rndscaleps_128_mask((__v4sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 10022
} 
# 10025
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10026
_mm_mask_roundscale_ps(__m128 __W, __mmask8 __U, __m128 __A, const int 
# 10027
__imm) 
# 10028
{ 
# 10029
return (__m128)__builtin_ia32_rndscaleps_128_mask((__v4sf)__A, __imm, (__v4sf)__W, (__mmask8)__U); 
# 10033
} 
# 10036
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10037
_mm_maskz_roundscale_ps(__mmask8 __U, __m128 __A, const int __imm) 
# 10038
{ 
# 10039
return (__m128)__builtin_ia32_rndscaleps_128_mask((__v4sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 10044
} 
# 10047
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10048
_mm_roundscale_pd(__m128d __A, const int __imm) 
# 10049
{ 
# 10050
return (__m128d)__builtin_ia32_rndscalepd_128_mask((__v2df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 10055
} 
# 10058
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10059
_mm_mask_roundscale_pd(__m128d __W, __mmask8 __U, __m128d __A, const int 
# 10060
__imm) 
# 10061
{ 
# 10062
return (__m128d)__builtin_ia32_rndscalepd_128_mask((__v2df)__A, __imm, (__v2df)__W, (__mmask8)__U); 
# 10066
} 
# 10069
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10070
_mm_maskz_roundscale_pd(__mmask8 __U, __m128d __A, const int __imm) 
# 10071
{ 
# 10072
return (__m128d)__builtin_ia32_rndscalepd_128_mask((__v2df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 10077
} 
# 10080
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 10081
_mm256_getmant_ps(__m256 __A, _MM_MANTISSA_NORM_ENUM __B, _MM_MANTISSA_SIGN_ENUM 
# 10082
__C) 
# 10083
{ 
# 10084
return (__m256)__builtin_ia32_getmantps256_mask((__v8sf)__A, (__C << 2) | __B, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 10089
} 
# 10092
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 10093
_mm256_mask_getmant_ps(__m256 __W, __mmask8 __U, __m256 __A, _MM_MANTISSA_NORM_ENUM 
# 10094
__B, _MM_MANTISSA_SIGN_ENUM 
# 10095
__C) 
# 10096
{ 
# 10097
return (__m256)__builtin_ia32_getmantps256_mask((__v8sf)__A, (__C << 2) | __B, (__v8sf)__W, (__mmask8)__U); 
# 10101
} 
# 10104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 10105
_mm256_maskz_getmant_ps(__mmask8 __U, __m256 __A, _MM_MANTISSA_NORM_ENUM 
# 10106
__B, _MM_MANTISSA_SIGN_ENUM 
# 10107
__C) 
# 10108
{ 
# 10109
return (__m256)__builtin_ia32_getmantps256_mask((__v8sf)__A, (__C << 2) | __B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 10114
} 
# 10117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10118
_mm_getmant_ps(__m128 __A, _MM_MANTISSA_NORM_ENUM __B, _MM_MANTISSA_SIGN_ENUM 
# 10119
__C) 
# 10120
{ 
# 10121
return (__m128)__builtin_ia32_getmantps128_mask((__v4sf)__A, (__C << 2) | __B, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 10126
} 
# 10129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10130
_mm_mask_getmant_ps(__m128 __W, __mmask8 __U, __m128 __A, _MM_MANTISSA_NORM_ENUM 
# 10131
__B, _MM_MANTISSA_SIGN_ENUM 
# 10132
__C) 
# 10133
{ 
# 10134
return (__m128)__builtin_ia32_getmantps128_mask((__v4sf)__A, (__C << 2) | __B, (__v4sf)__W, (__mmask8)__U); 
# 10138
} 
# 10141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10142
_mm_maskz_getmant_ps(__mmask8 __U, __m128 __A, _MM_MANTISSA_NORM_ENUM 
# 10143
__B, _MM_MANTISSA_SIGN_ENUM 
# 10144
__C) 
# 10145
{ 
# 10146
return (__m128)__builtin_ia32_getmantps128_mask((__v4sf)__A, (__C << 2) | __B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 10151
} 
# 10154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 10155
_mm256_getmant_pd(__m256d __A, _MM_MANTISSA_NORM_ENUM __B, _MM_MANTISSA_SIGN_ENUM 
# 10156
__C) 
# 10157
{ 
# 10158
return (__m256d)__builtin_ia32_getmantpd256_mask((__v4df)__A, (__C << 2) | __B, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 10163
} 
# 10166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 10167
_mm256_mask_getmant_pd(__m256d __W, __mmask8 __U, __m256d __A, _MM_MANTISSA_NORM_ENUM 
# 10168
__B, _MM_MANTISSA_SIGN_ENUM 
# 10169
__C) 
# 10170
{ 
# 10171
return (__m256d)__builtin_ia32_getmantpd256_mask((__v4df)__A, (__C << 2) | __B, (__v4df)__W, (__mmask8)__U); 
# 10175
} 
# 10178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 10179
_mm256_maskz_getmant_pd(__mmask8 __U, __m256d __A, _MM_MANTISSA_NORM_ENUM 
# 10180
__B, _MM_MANTISSA_SIGN_ENUM 
# 10181
__C) 
# 10182
{ 
# 10183
return (__m256d)__builtin_ia32_getmantpd256_mask((__v4df)__A, (__C << 2) | __B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 10188
} 
# 10191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10192
_mm_getmant_pd(__m128d __A, _MM_MANTISSA_NORM_ENUM __B, _MM_MANTISSA_SIGN_ENUM 
# 10193
__C) 
# 10194
{ 
# 10195
return (__m128d)__builtin_ia32_getmantpd128_mask((__v2df)__A, (__C << 2) | __B, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 10200
} 
# 10203
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10204
_mm_mask_getmant_pd(__m128d __W, __mmask8 __U, __m128d __A, _MM_MANTISSA_NORM_ENUM 
# 10205
__B, _MM_MANTISSA_SIGN_ENUM 
# 10206
__C) 
# 10207
{ 
# 10208
return (__m128d)__builtin_ia32_getmantpd128_mask((__v2df)__A, (__C << 2) | __B, (__v2df)__W, (__mmask8)__U); 
# 10212
} 
# 10215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10216
_mm_maskz_getmant_pd(__mmask8 __U, __m128d __A, _MM_MANTISSA_NORM_ENUM 
# 10217
__B, _MM_MANTISSA_SIGN_ENUM 
# 10218
__C) 
# 10219
{ 
# 10220
return (__m128d)__builtin_ia32_getmantpd128_mask((__v2df)__A, (__C << 2) | __B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 10225
} 
# 10228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 10229
_mm256_mmask_i32gather_ps(__m256 __v1_old, __mmask8 __mask, __m256i 
# 10230
__index, const float *__addr, int 
# 10231
__scale) 
# 10232
{ 
# 10233
return (__m256)__builtin_ia32_gather3siv8sf((__v8sf)__v1_old, __addr, (__v8si)__index, __mask, __scale); 
# 10237
} 
# 10240
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10241
_mm_mmask_i32gather_ps(__m128 __v1_old, __mmask8 __mask, __m128i 
# 10242
__index, const float *__addr, int 
# 10243
__scale) 
# 10244
{ 
# 10245
return (__m128)__builtin_ia32_gather3siv4sf((__v4sf)__v1_old, __addr, (__v4si)__index, __mask, __scale); 
# 10249
} 
# 10252
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 10253
_mm256_mmask_i32gather_pd(__m256d __v1_old, __mmask8 __mask, __m128i 
# 10254
__index, const double *__addr, int 
# 10255
__scale) 
# 10256
{ 
# 10257
return (__m256d)__builtin_ia32_gather3siv4df((__v4df)__v1_old, __addr, (__v4si)__index, __mask, __scale); 
# 10261
} 
# 10264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10265
_mm_mmask_i32gather_pd(__m128d __v1_old, __mmask8 __mask, __m128i 
# 10266
__index, const double *__addr, int 
# 10267
__scale) 
# 10268
{ 
# 10269
return (__m128d)__builtin_ia32_gather3siv2df((__v2df)__v1_old, __addr, (__v4si)__index, __mask, __scale); 
# 10273
} 
# 10276
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10277
_mm256_mmask_i64gather_ps(__m128 __v1_old, __mmask8 __mask, __m256i 
# 10278
__index, const float *__addr, int 
# 10279
__scale) 
# 10280
{ 
# 10281
return (__m128)__builtin_ia32_gather3div8sf((__v4sf)__v1_old, __addr, (__v4di)__index, __mask, __scale); 
# 10285
} 
# 10288
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 10289
_mm_mmask_i64gather_ps(__m128 __v1_old, __mmask8 __mask, __m128i 
# 10290
__index, const float *__addr, int 
# 10291
__scale) 
# 10292
{ 
# 10293
return (__m128)__builtin_ia32_gather3div4sf((__v4sf)__v1_old, __addr, (__v2di)__index, __mask, __scale); 
# 10297
} 
# 10300
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 10301
_mm256_mmask_i64gather_pd(__m256d __v1_old, __mmask8 __mask, __m256i 
# 10302
__index, const double *__addr, int 
# 10303
__scale) 
# 10304
{ 
# 10305
return (__m256d)__builtin_ia32_gather3div4df((__v4df)__v1_old, __addr, (__v4di)__index, __mask, __scale); 
# 10309
} 
# 10312
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 10313
_mm_mmask_i64gather_pd(__m128d __v1_old, __mmask8 __mask, __m128i 
# 10314
__index, const double *__addr, int 
# 10315
__scale) 
# 10316
{ 
# 10317
return (__m128d)__builtin_ia32_gather3div2df((__v2df)__v1_old, __addr, (__v2di)__index, __mask, __scale); 
# 10321
} 
# 10324
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10325
_mm256_mmask_i32gather_epi32(__m256i __v1_old, __mmask8 __mask, __m256i 
# 10326
__index, const int *__addr, int 
# 10327
__scale) 
# 10328
{ 
# 10329
return (__m256i)__builtin_ia32_gather3siv8si((__v8si)__v1_old, __addr, (__v8si)__index, __mask, __scale); 
# 10333
} 
# 10336
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10337
_mm_mmask_i32gather_epi32(__m128i __v1_old, __mmask8 __mask, __m128i 
# 10338
__index, const int *__addr, int 
# 10339
__scale) 
# 10340
{ 
# 10341
return (__m128i)__builtin_ia32_gather3siv4si((__v4si)__v1_old, __addr, (__v4si)__index, __mask, __scale); 
# 10345
} 
# 10348
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10349
_mm256_mmask_i32gather_epi64(__m256i __v1_old, __mmask8 __mask, __m128i 
# 10350
__index, const long long *__addr, int 
# 10351
__scale) 
# 10352
{ 
# 10353
return (__m256i)__builtin_ia32_gather3siv4di((__v4di)__v1_old, __addr, (__v4si)__index, __mask, __scale); 
# 10357
} 
# 10360
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10361
_mm_mmask_i32gather_epi64(__m128i __v1_old, __mmask8 __mask, __m128i 
# 10362
__index, const long long *__addr, int 
# 10363
__scale) 
# 10364
{ 
# 10365
return (__m128i)__builtin_ia32_gather3siv2di((__v2di)__v1_old, __addr, (__v4si)__index, __mask, __scale); 
# 10369
} 
# 10372
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10373
_mm256_mmask_i64gather_epi32(__m128i __v1_old, __mmask8 __mask, __m256i 
# 10374
__index, const int *__addr, int 
# 10375
__scale) 
# 10376
{ 
# 10377
return (__m128i)__builtin_ia32_gather3div8si((__v4si)__v1_old, __addr, (__v4di)__index, __mask, __scale); 
# 10381
} 
# 10384
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10385
_mm_mmask_i64gather_epi32(__m128i __v1_old, __mmask8 __mask, __m128i 
# 10386
__index, const int *__addr, int 
# 10387
__scale) 
# 10388
{ 
# 10389
return (__m128i)__builtin_ia32_gather3div4si((__v4si)__v1_old, __addr, (__v2di)__index, __mask, __scale); 
# 10393
} 
# 10396
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10397
_mm256_mmask_i64gather_epi64(__m256i __v1_old, __mmask8 __mask, __m256i 
# 10398
__index, const long long *__addr, int 
# 10399
__scale) 
# 10400
{ 
# 10401
return (__m256i)__builtin_ia32_gather3div4di((__v4di)__v1_old, __addr, (__v4di)__index, __mask, __scale); 
# 10405
} 
# 10408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10409
_mm_mmask_i64gather_epi64(__m128i __v1_old, __mmask8 __mask, __m128i 
# 10410
__index, const long long *__addr, int 
# 10411
__scale) 
# 10412
{ 
# 10413
return (__m128i)__builtin_ia32_gather3div2di((__v2di)__v1_old, __addr, (__v2di)__index, __mask, __scale); 
# 10417
} 
# 10420
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10421
_mm256_i32scatter_ps(float *__addr, __m256i __index, __m256 
# 10422
__v1, const int __scale) 
# 10423
{ 
# 10424
__builtin_ia32_scattersiv8sf(__addr, (__mmask8)255, (__v8si)__index, (__v8sf)__v1, __scale); 
# 10427
} 
# 10430
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10431
_mm256_mask_i32scatter_ps(float *__addr, __mmask8 __mask, __m256i 
# 10432
__index, __m256 __v1, const int 
# 10433
__scale) 
# 10434
{ 
# 10435
__builtin_ia32_scattersiv8sf(__addr, __mask, (__v8si)__index, (__v8sf)__v1, __scale); 
# 10437
} 
# 10440
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10441
_mm_i32scatter_ps(float *__addr, __m128i __index, __m128 __v1, const int 
# 10442
__scale) 
# 10443
{ 
# 10444
__builtin_ia32_scattersiv4sf(__addr, (__mmask8)255, (__v4si)__index, (__v4sf)__v1, __scale); 
# 10447
} 
# 10450
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10451
_mm_mask_i32scatter_ps(float *__addr, __mmask8 __mask, __m128i 
# 10452
__index, __m128 __v1, const int 
# 10453
__scale) 
# 10454
{ 
# 10455
__builtin_ia32_scattersiv4sf(__addr, __mask, (__v4si)__index, (__v4sf)__v1, __scale); 
# 10457
} 
# 10460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10461
_mm256_i32scatter_pd(double *__addr, __m128i __index, __m256d 
# 10462
__v1, const int __scale) 
# 10463
{ 
# 10464
__builtin_ia32_scattersiv4df(__addr, (__mmask8)255, (__v4si)__index, (__v4df)__v1, __scale); 
# 10467
} 
# 10470
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10471
_mm256_mask_i32scatter_pd(double *__addr, __mmask8 __mask, __m128i 
# 10472
__index, __m256d __v1, const int 
# 10473
__scale) 
# 10474
{ 
# 10475
__builtin_ia32_scattersiv4df(__addr, __mask, (__v4si)__index, (__v4df)__v1, __scale); 
# 10477
} 
# 10480
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10481
_mm_i32scatter_pd(double *__addr, __m128i __index, __m128d 
# 10482
__v1, const int __scale) 
# 10483
{ 
# 10484
__builtin_ia32_scattersiv2df(__addr, (__mmask8)255, (__v4si)__index, (__v2df)__v1, __scale); 
# 10487
} 
# 10490
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10491
_mm_mask_i32scatter_pd(double *__addr, __mmask8 __mask, __m128i 
# 10492
__index, __m128d __v1, const int 
# 10493
__scale) 
# 10494
{ 
# 10495
__builtin_ia32_scattersiv2df(__addr, __mask, (__v4si)__index, (__v2df)__v1, __scale); 
# 10497
} 
# 10500
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10501
_mm256_i64scatter_ps(float *__addr, __m256i __index, __m128 
# 10502
__v1, const int __scale) 
# 10503
{ 
# 10504
__builtin_ia32_scatterdiv8sf(__addr, (__mmask8)255, (__v4di)__index, (__v4sf)__v1, __scale); 
# 10507
} 
# 10510
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10511
_mm256_mask_i64scatter_ps(float *__addr, __mmask8 __mask, __m256i 
# 10512
__index, __m128 __v1, const int 
# 10513
__scale) 
# 10514
{ 
# 10515
__builtin_ia32_scatterdiv8sf(__addr, __mask, (__v4di)__index, (__v4sf)__v1, __scale); 
# 10517
} 
# 10520
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10521
_mm_i64scatter_ps(float *__addr, __m128i __index, __m128 __v1, const int 
# 10522
__scale) 
# 10523
{ 
# 10524
__builtin_ia32_scatterdiv4sf(__addr, (__mmask8)255, (__v2di)__index, (__v4sf)__v1, __scale); 
# 10527
} 
# 10530
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10531
_mm_mask_i64scatter_ps(float *__addr, __mmask8 __mask, __m128i 
# 10532
__index, __m128 __v1, const int 
# 10533
__scale) 
# 10534
{ 
# 10535
__builtin_ia32_scatterdiv4sf(__addr, __mask, (__v2di)__index, (__v4sf)__v1, __scale); 
# 10537
} 
# 10540
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10541
_mm256_i64scatter_pd(double *__addr, __m256i __index, __m256d 
# 10542
__v1, const int __scale) 
# 10543
{ 
# 10544
__builtin_ia32_scatterdiv4df(__addr, (__mmask8)255, (__v4di)__index, (__v4df)__v1, __scale); 
# 10547
} 
# 10550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10551
_mm256_mask_i64scatter_pd(double *__addr, __mmask8 __mask, __m256i 
# 10552
__index, __m256d __v1, const int 
# 10553
__scale) 
# 10554
{ 
# 10555
__builtin_ia32_scatterdiv4df(__addr, __mask, (__v4di)__index, (__v4df)__v1, __scale); 
# 10557
} 
# 10560
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10561
_mm_i64scatter_pd(double *__addr, __m128i __index, __m128d 
# 10562
__v1, const int __scale) 
# 10563
{ 
# 10564
__builtin_ia32_scatterdiv2df(__addr, (__mmask8)255, (__v2di)__index, (__v2df)__v1, __scale); 
# 10567
} 
# 10570
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10571
_mm_mask_i64scatter_pd(double *__addr, __mmask8 __mask, __m128i 
# 10572
__index, __m128d __v1, const int 
# 10573
__scale) 
# 10574
{ 
# 10575
__builtin_ia32_scatterdiv2df(__addr, __mask, (__v2di)__index, (__v2df)__v1, __scale); 
# 10577
} 
# 10580
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10581
_mm256_i32scatter_epi32(int *__addr, __m256i __index, __m256i 
# 10582
__v1, const int __scale) 
# 10583
{ 
# 10584
__builtin_ia32_scattersiv8si(__addr, (__mmask8)255, (__v8si)__index, (__v8si)__v1, __scale); 
# 10587
} 
# 10590
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10591
_mm256_mask_i32scatter_epi32(int *__addr, __mmask8 __mask, __m256i 
# 10592
__index, __m256i __v1, const int 
# 10593
__scale) 
# 10594
{ 
# 10595
__builtin_ia32_scattersiv8si(__addr, __mask, (__v8si)__index, (__v8si)__v1, __scale); 
# 10597
} 
# 10600
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10601
_mm_i32scatter_epi32(int *__addr, __m128i __index, __m128i 
# 10602
__v1, const int __scale) 
# 10603
{ 
# 10604
__builtin_ia32_scattersiv4si(__addr, (__mmask8)255, (__v4si)__index, (__v4si)__v1, __scale); 
# 10607
} 
# 10610
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10611
_mm_mask_i32scatter_epi32(int *__addr, __mmask8 __mask, __m128i 
# 10612
__index, __m128i __v1, const int 
# 10613
__scale) 
# 10614
{ 
# 10615
__builtin_ia32_scattersiv4si(__addr, __mask, (__v4si)__index, (__v4si)__v1, __scale); 
# 10617
} 
# 10620
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10621
_mm256_i32scatter_epi64(long long *__addr, __m128i __index, __m256i 
# 10622
__v1, const int __scale) 
# 10623
{ 
# 10624
__builtin_ia32_scattersiv4di(__addr, (__mmask8)255, (__v4si)__index, (__v4di)__v1, __scale); 
# 10627
} 
# 10630
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10631
_mm256_mask_i32scatter_epi64(long long *__addr, __mmask8 __mask, __m128i 
# 10632
__index, __m256i __v1, const int 
# 10633
__scale) 
# 10634
{ 
# 10635
__builtin_ia32_scattersiv4di(__addr, __mask, (__v4si)__index, (__v4di)__v1, __scale); 
# 10637
} 
# 10640
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10641
_mm_i32scatter_epi64(long long *__addr, __m128i __index, __m128i 
# 10642
__v1, const int __scale) 
# 10643
{ 
# 10644
__builtin_ia32_scattersiv2di(__addr, (__mmask8)255, (__v4si)__index, (__v2di)__v1, __scale); 
# 10647
} 
# 10650
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10651
_mm_mask_i32scatter_epi64(long long *__addr, __mmask8 __mask, __m128i 
# 10652
__index, __m128i __v1, const int 
# 10653
__scale) 
# 10654
{ 
# 10655
__builtin_ia32_scattersiv2di(__addr, __mask, (__v4si)__index, (__v2di)__v1, __scale); 
# 10657
} 
# 10660
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10661
_mm256_i64scatter_epi32(int *__addr, __m256i __index, __m128i 
# 10662
__v1, const int __scale) 
# 10663
{ 
# 10664
__builtin_ia32_scatterdiv8si(__addr, (__mmask8)255, (__v4di)__index, (__v4si)__v1, __scale); 
# 10667
} 
# 10670
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10671
_mm256_mask_i64scatter_epi32(int *__addr, __mmask8 __mask, __m256i 
# 10672
__index, __m128i __v1, const int 
# 10673
__scale) 
# 10674
{ 
# 10675
__builtin_ia32_scatterdiv8si(__addr, __mask, (__v4di)__index, (__v4si)__v1, __scale); 
# 10677
} 
# 10680
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10681
_mm_i64scatter_epi32(int *__addr, __m128i __index, __m128i 
# 10682
__v1, const int __scale) 
# 10683
{ 
# 10684
__builtin_ia32_scatterdiv4si(__addr, (__mmask8)255, (__v2di)__index, (__v4si)__v1, __scale); 
# 10687
} 
# 10690
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10691
_mm_mask_i64scatter_epi32(int *__addr, __mmask8 __mask, __m128i 
# 10692
__index, __m128i __v1, const int 
# 10693
__scale) 
# 10694
{ 
# 10695
__builtin_ia32_scatterdiv4si(__addr, __mask, (__v2di)__index, (__v4si)__v1, __scale); 
# 10697
} 
# 10700
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10701
_mm256_i64scatter_epi64(long long *__addr, __m256i __index, __m256i 
# 10702
__v1, const int __scale) 
# 10703
{ 
# 10704
__builtin_ia32_scatterdiv4di(__addr, (__mmask8)255, (__v4di)__index, (__v4di)__v1, __scale); 
# 10707
} 
# 10710
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10711
_mm256_mask_i64scatter_epi64(long long *__addr, __mmask8 __mask, __m256i 
# 10712
__index, __m256i __v1, const int 
# 10713
__scale) 
# 10714
{ 
# 10715
__builtin_ia32_scatterdiv4di(__addr, __mask, (__v4di)__index, (__v4di)__v1, __scale); 
# 10717
} 
# 10720
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10721
_mm_i64scatter_epi64(long long *__addr, __m128i __index, __m128i 
# 10722
__v1, const int __scale) 
# 10723
{ 
# 10724
__builtin_ia32_scatterdiv2di(__addr, (__mmask8)255, (__v2di)__index, (__v2di)__v1, __scale); 
# 10727
} 
# 10730
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 10731
_mm_mask_i64scatter_epi64(long long *__addr, __mmask8 __mask, __m128i 
# 10732
__index, __m128i __v1, const int 
# 10733
__scale) 
# 10734
{ 
# 10735
__builtin_ia32_scatterdiv2di(__addr, __mask, (__v2di)__index, (__v2di)__v1, __scale); 
# 10737
} 
# 10740
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10741
_mm256_mask_shuffle_epi32(__m256i __W, __mmask8 __U, __m256i __A, _MM_PERM_ENUM 
# 10742
__mask) 
# 10743
{ 
# 10744
return (__m256i)__builtin_ia32_pshufd256_mask((__v8si)__A, __mask, (__v8si)__W, (__mmask8)__U); 
# 10747
} 
# 10750
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10751
_mm256_maskz_shuffle_epi32(__mmask8 __U, __m256i __A, _MM_PERM_ENUM 
# 10752
__mask) 
# 10753
{ 
# 10754
return (__m256i)__builtin_ia32_pshufd256_mask((__v8si)__A, __mask, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 10758
} 
# 10761
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10762
_mm_mask_shuffle_epi32(__m128i __W, __mmask8 __U, __m128i __A, _MM_PERM_ENUM 
# 10763
__mask) 
# 10764
{ 
# 10765
return (__m128i)__builtin_ia32_pshufd128_mask((__v4si)__A, __mask, (__v4si)__W, (__mmask8)__U); 
# 10768
} 
# 10771
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10772
_mm_maskz_shuffle_epi32(__mmask8 __U, __m128i __A, _MM_PERM_ENUM 
# 10773
__mask) 
# 10774
{ 
# 10775
return (__m128i)__builtin_ia32_pshufd128_mask((__v4si)__A, __mask, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 10779
} 
# 10782
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10783
_mm256_rol_epi32(__m256i __A, const int __B) 
# 10784
{ 
# 10785
return (__m256i)__builtin_ia32_prold256_mask((__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 10789
} 
# 10792
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10793
_mm256_mask_rol_epi32(__m256i __W, __mmask8 __U, __m256i __A, const int 
# 10794
__B) 
# 10795
{ 
# 10796
return (__m256i)__builtin_ia32_prold256_mask((__v8si)__A, __B, (__v8si)__W, (__mmask8)__U); 
# 10799
} 
# 10802
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10803
_mm256_maskz_rol_epi32(__mmask8 __U, __m256i __A, const int __B) 
# 10804
{ 
# 10805
return (__m256i)__builtin_ia32_prold256_mask((__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 10809
} 
# 10812
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10813
_mm_rol_epi32(__m128i __A, const int __B) 
# 10814
{ 
# 10815
return (__m128i)__builtin_ia32_prold128_mask((__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 10819
} 
# 10822
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10823
_mm_mask_rol_epi32(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 10824
__B) 
# 10825
{ 
# 10826
return (__m128i)__builtin_ia32_prold128_mask((__v4si)__A, __B, (__v4si)__W, (__mmask8)__U); 
# 10829
} 
# 10832
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10833
_mm_maskz_rol_epi32(__mmask8 __U, __m128i __A, const int __B) 
# 10834
{ 
# 10835
return (__m128i)__builtin_ia32_prold128_mask((__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 10839
} 
# 10842
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10843
_mm256_ror_epi32(__m256i __A, const int __B) 
# 10844
{ 
# 10845
return (__m256i)__builtin_ia32_prord256_mask((__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 10849
} 
# 10852
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10853
_mm256_mask_ror_epi32(__m256i __W, __mmask8 __U, __m256i __A, const int 
# 10854
__B) 
# 10855
{ 
# 10856
return (__m256i)__builtin_ia32_prord256_mask((__v8si)__A, __B, (__v8si)__W, (__mmask8)__U); 
# 10859
} 
# 10862
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10863
_mm256_maskz_ror_epi32(__mmask8 __U, __m256i __A, const int __B) 
# 10864
{ 
# 10865
return (__m256i)__builtin_ia32_prord256_mask((__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 10869
} 
# 10872
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10873
_mm_ror_epi32(__m128i __A, const int __B) 
# 10874
{ 
# 10875
return (__m128i)__builtin_ia32_prord128_mask((__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 10879
} 
# 10882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10883
_mm_mask_ror_epi32(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 10884
__B) 
# 10885
{ 
# 10886
return (__m128i)__builtin_ia32_prord128_mask((__v4si)__A, __B, (__v4si)__W, (__mmask8)__U); 
# 10889
} 
# 10892
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10893
_mm_maskz_ror_epi32(__mmask8 __U, __m128i __A, const int __B) 
# 10894
{ 
# 10895
return (__m128i)__builtin_ia32_prord128_mask((__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 10899
} 
# 10902
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10903
_mm256_rol_epi64(__m256i __A, const int __B) 
# 10904
{ 
# 10905
return (__m256i)__builtin_ia32_prolq256_mask((__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 10909
} 
# 10912
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10913
_mm256_mask_rol_epi64(__m256i __W, __mmask8 __U, __m256i __A, const int 
# 10914
__B) 
# 10915
{ 
# 10916
return (__m256i)__builtin_ia32_prolq256_mask((__v4di)__A, __B, (__v4di)__W, (__mmask8)__U); 
# 10919
} 
# 10922
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10923
_mm256_maskz_rol_epi64(__mmask8 __U, __m256i __A, const int __B) 
# 10924
{ 
# 10925
return (__m256i)__builtin_ia32_prolq256_mask((__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 10929
} 
# 10932
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10933
_mm_rol_epi64(__m128i __A, const int __B) 
# 10934
{ 
# 10935
return (__m128i)__builtin_ia32_prolq128_mask((__v2di)__A, __B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 10939
} 
# 10942
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10943
_mm_mask_rol_epi64(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 10944
__B) 
# 10945
{ 
# 10946
return (__m128i)__builtin_ia32_prolq128_mask((__v2di)__A, __B, (__v2di)__W, (__mmask8)__U); 
# 10949
} 
# 10952
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10953
_mm_maskz_rol_epi64(__mmask8 __U, __m128i __A, const int __B) 
# 10954
{ 
# 10955
return (__m128i)__builtin_ia32_prolq128_mask((__v2di)__A, __B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 10959
} 
# 10962
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10963
_mm256_ror_epi64(__m256i __A, const int __B) 
# 10964
{ 
# 10965
return (__m256i)__builtin_ia32_prorq256_mask((__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 10969
} 
# 10972
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10973
_mm256_mask_ror_epi64(__m256i __W, __mmask8 __U, __m256i __A, const int 
# 10974
__B) 
# 10975
{ 
# 10976
return (__m256i)__builtin_ia32_prorq256_mask((__v4di)__A, __B, (__v4di)__W, (__mmask8)__U); 
# 10979
} 
# 10982
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 10983
_mm256_maskz_ror_epi64(__mmask8 __U, __m256i __A, const int __B) 
# 10984
{ 
# 10985
return (__m256i)__builtin_ia32_prorq256_mask((__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 10989
} 
# 10992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 10993
_mm_ror_epi64(__m128i __A, const int __B) 
# 10994
{ 
# 10995
return (__m128i)__builtin_ia32_prorq128_mask((__v2di)__A, __B, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 10999
} 
# 11002
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11003
_mm_mask_ror_epi64(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 11004
__B) 
# 11005
{ 
# 11006
return (__m128i)__builtin_ia32_prorq128_mask((__v2di)__A, __B, (__v2di)__W, (__mmask8)__U); 
# 11009
} 
# 11012
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11013
_mm_maskz_ror_epi64(__mmask8 __U, __m128i __A, const int __B) 
# 11014
{ 
# 11015
return (__m128i)__builtin_ia32_prorq128_mask((__v2di)__A, __B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 11019
} 
# 11022
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11023
_mm_alignr_epi32(__m128i __A, __m128i __B, const int __imm) 
# 11024
{ 
# 11025
return (__m128i)__builtin_ia32_alignd128_mask((__v4si)__A, (__v4si)__B, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)(-1)); 
# 11030
} 
# 11033
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11034
_mm_mask_alignr_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 11035
__B, const int __imm) 
# 11036
{ 
# 11037
return (__m128i)__builtin_ia32_alignd128_mask((__v4si)__A, (__v4si)__B, __imm, (__v4si)__W, (__mmask8)__U); 
# 11041
} 
# 11044
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11045
_mm_maskz_alignr_epi32(__mmask8 __U, __m128i __A, __m128i __B, const int 
# 11046
__imm) 
# 11047
{ 
# 11048
return (__m128i)__builtin_ia32_alignd128_mask((__v4si)__A, (__v4si)__B, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 11053
} 
# 11056
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11057
_mm_alignr_epi64(__m128i __A, __m128i __B, const int __imm) 
# 11058
{ 
# 11059
return (__m128i)__builtin_ia32_alignq128_mask((__v2di)__A, (__v2di)__B, __imm, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 11064
} 
# 11067
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11068
_mm_mask_alignr_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 11069
__B, const int __imm) 
# 11070
{ 
# 11071
return (__m128i)__builtin_ia32_alignq128_mask((__v2di)__A, (__v2di)__B, __imm, (__v2di)__W, (__mmask8)__U); 
# 11075
} 
# 11078
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11079
_mm_maskz_alignr_epi64(__mmask8 __U, __m128i __A, __m128i __B, const int 
# 11080
__imm) 
# 11081
{ 
# 11082
return (__m128i)__builtin_ia32_alignq128_mask((__v2di)__A, (__v2di)__B, __imm, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 11087
} 
# 11090
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11091
_mm256_alignr_epi32(__m256i __A, __m256i __B, const int __imm) 
# 11092
{ 
# 11093
return (__m256i)__builtin_ia32_alignd256_mask((__v8si)__A, (__v8si)__B, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 11098
} 
# 11101
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11102
_mm256_mask_alignr_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 11103
__B, const int __imm) 
# 11104
{ 
# 11105
return (__m256i)__builtin_ia32_alignd256_mask((__v8si)__A, (__v8si)__B, __imm, (__v8si)__W, (__mmask8)__U); 
# 11109
} 
# 11112
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11113
_mm256_maskz_alignr_epi32(__mmask8 __U, __m256i __A, __m256i __B, const int 
# 11114
__imm) 
# 11115
{ 
# 11116
return (__m256i)__builtin_ia32_alignd256_mask((__v8si)__A, (__v8si)__B, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 11121
} 
# 11124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11125
_mm256_alignr_epi64(__m256i __A, __m256i __B, const int __imm) 
# 11126
{ 
# 11127
return (__m256i)__builtin_ia32_alignq256_mask((__v4di)__A, (__v4di)__B, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 11132
} 
# 11135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11136
_mm256_mask_alignr_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 11137
__B, const int __imm) 
# 11138
{ 
# 11139
return (__m256i)__builtin_ia32_alignq256_mask((__v4di)__A, (__v4di)__B, __imm, (__v4di)__W, (__mmask8)__U); 
# 11143
} 
# 11146
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11147
_mm256_maskz_alignr_epi64(__mmask8 __U, __m256i __A, __m256i __B, const int 
# 11148
__imm) 
# 11149
{ 
# 11150
return (__m256i)__builtin_ia32_alignq256_mask((__v4di)__A, (__v4di)__B, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 11155
} 
# 11158
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11159
_mm_mask_cvtps_ph(__m128i __W, __mmask8 __U, __m128 __A, const int 
# 11160
__I) 
# 11161
{ 
# 11162
return (__m128i)__builtin_ia32_vcvtps2ph_mask((__v4sf)__A, __I, (__v8hi)__W, (__mmask8)__U); 
# 11165
} 
# 11168
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11169
_mm_maskz_cvtps_ph(__mmask8 __U, __m128 __A, const int __I) 
# 11170
{ 
# 11171
return (__m128i)__builtin_ia32_vcvtps2ph_mask((__v4sf)__A, __I, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 11175
} 
# 11178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11179
_mm256_mask_cvtps_ph(__m128i __W, __mmask8 __U, __m256 __A, const int 
# 11180
__I) 
# 11181
{ 
# 11182
return (__m128i)__builtin_ia32_vcvtps2ph256_mask((__v8sf)__A, __I, (__v8hi)__W, (__mmask8)__U); 
# 11185
} 
# 11188
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11189
_mm256_maskz_cvtps_ph(__mmask8 __U, __m256 __A, const int __I) 
# 11190
{ 
# 11191
return (__m128i)__builtin_ia32_vcvtps2ph256_mask((__v8sf)__A, __I, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 11195
} 
# 11198
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11199
_mm256_mask_srai_epi32(__m256i __W, __mmask8 __U, __m256i __A, const int 
# 11200
__imm) 
# 11201
{ 
# 11202
return (__m256i)__builtin_ia32_psradi256_mask((__v8si)__A, __imm, (__v8si)__W, (__mmask8)__U); 
# 11205
} 
# 11208
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11209
_mm256_maskz_srai_epi32(__mmask8 __U, __m256i __A, const int __imm) 
# 11210
{ 
# 11211
return (__m256i)__builtin_ia32_psradi256_mask((__v8si)__A, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 11215
} 
# 11218
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11219
_mm_mask_srai_epi32(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 11220
__imm) 
# 11221
{ 
# 11222
return (__m128i)__builtin_ia32_psradi128_mask((__v4si)__A, __imm, (__v4si)__W, (__mmask8)__U); 
# 11225
} 
# 11228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11229
_mm_maskz_srai_epi32(__mmask8 __U, __m128i __A, const int __imm) 
# 11230
{ 
# 11231
return (__m128i)__builtin_ia32_psradi128_mask((__v4si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 11235
} 
# 11238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11239
_mm256_srai_epi64(__m256i __A, const int __imm) 
# 11240
{ 
# 11241
return (__m256i)__builtin_ia32_psraqi256_mask((__v4di)__A, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 11245
} 
# 11248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11249
_mm256_mask_srai_epi64(__m256i __W, __mmask8 __U, __m256i __A, const int 
# 11250
__imm) 
# 11251
{ 
# 11252
return (__m256i)__builtin_ia32_psraqi256_mask((__v4di)__A, __imm, (__v4di)__W, (__mmask8)__U); 
# 11255
} 
# 11258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11259
_mm256_maskz_srai_epi64(__mmask8 __U, __m256i __A, const int __imm) 
# 11260
{ 
# 11261
return (__m256i)__builtin_ia32_psraqi256_mask((__v4di)__A, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 11265
} 
# 11268
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11269
_mm_srai_epi64(__m128i __A, const int __imm) 
# 11270
{ 
# 11271
return (__m128i)__builtin_ia32_psraqi128_mask((__v2di)__A, __imm, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 11275
} 
# 11278
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11279
_mm_mask_srai_epi64(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 11280
__imm) 
# 11281
{ 
# 11282
return (__m128i)__builtin_ia32_psraqi128_mask((__v2di)__A, __imm, (__v2di)__W, (__mmask8)__U); 
# 11285
} 
# 11288
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11289
_mm_maskz_srai_epi64(__mmask8 __U, __m128i __A, const int __imm) 
# 11290
{ 
# 11291
return (__m128i)__builtin_ia32_psraqi128_mask((__v2di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 11295
} 
# 11298
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11299
_mm_mask_slli_epi32(__m128i __W, __mmask8 __U, __m128i __A, int __B) 
# 11300
{ 
# 11301
return (__m128i)__builtin_ia32_pslldi128_mask((__v4si)__A, __B, (__v4si)__W, (__mmask8)__U); 
# 11304
} 
# 11307
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11308
_mm_maskz_slli_epi32(__mmask8 __U, __m128i __A, int __B) 
# 11309
{ 
# 11310
return (__m128i)__builtin_ia32_pslldi128_mask((__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 11314
} 
# 11317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11318
_mm_mask_slli_epi64(__m128i __W, __mmask8 __U, __m128i __A, int __B) 
# 11319
{ 
# 11320
return (__m128i)__builtin_ia32_psllqi128_mask((__v2di)__A, __B, (__v2di)__W, (__mmask8)__U); 
# 11323
} 
# 11326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11327
_mm_maskz_slli_epi64(__mmask8 __U, __m128i __A, int __B) 
# 11328
{ 
# 11329
return (__m128i)__builtin_ia32_psllqi128_mask((__v2di)__A, __B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 11333
} 
# 11336
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11337
_mm256_mask_slli_epi32(__m256i __W, __mmask8 __U, __m256i __A, int 
# 11338
__B) 
# 11339
{ 
# 11340
return (__m256i)__builtin_ia32_pslldi256_mask((__v8si)__A, __B, (__v8si)__W, (__mmask8)__U); 
# 11343
} 
# 11346
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11347
_mm256_maskz_slli_epi32(__mmask8 __U, __m256i __A, int __B) 
# 11348
{ 
# 11349
return (__m256i)__builtin_ia32_pslldi256_mask((__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 11353
} 
# 11356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11357
_mm256_mask_slli_epi64(__m256i __W, __mmask8 __U, __m256i __A, int 
# 11358
__B) 
# 11359
{ 
# 11360
return (__m256i)__builtin_ia32_psllqi256_mask((__v4di)__A, __B, (__v4di)__W, (__mmask8)__U); 
# 11363
} 
# 11366
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11367
_mm256_maskz_slli_epi64(__mmask8 __U, __m256i __A, int __B) 
# 11368
{ 
# 11369
return (__m256i)__builtin_ia32_psllqi256_mask((__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 11373
} 
# 11376
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 11377
_mm256_mask_permutex_pd(__m256d __W, __mmask8 __U, __m256d __X, const int 
# 11378
__imm) 
# 11379
{ 
# 11380
return (__m256d)__builtin_ia32_permdf256_mask((__v4df)__X, __imm, (__v4df)__W, (__mmask8)__U); 
# 11383
} 
# 11386
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 11387
_mm256_maskz_permutex_pd(__mmask8 __U, __m256d __X, const int __imm) 
# 11388
{ 
# 11389
return (__m256d)__builtin_ia32_permdf256_mask((__v4df)__X, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 11393
} 
# 11396
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 11397
_mm256_mask_permute_pd(__m256d __W, __mmask8 __U, __m256d __X, const int 
# 11398
__C) 
# 11399
{ 
# 11400
return (__m256d)__builtin_ia32_vpermilpd256_mask((__v4df)__X, __C, (__v4df)__W, (__mmask8)__U); 
# 11403
} 
# 11406
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 11407
_mm256_maskz_permute_pd(__mmask8 __U, __m256d __X, const int __C) 
# 11408
{ 
# 11409
return (__m256d)__builtin_ia32_vpermilpd256_mask((__v4df)__X, __C, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 11413
} 
# 11416
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 11417
_mm_mask_permute_pd(__m128d __W, __mmask8 __U, __m128d __X, const int 
# 11418
__C) 
# 11419
{ 
# 11420
return (__m128d)__builtin_ia32_vpermilpd_mask((__v2df)__X, __C, (__v2df)__W, (__mmask8)__U); 
# 11423
} 
# 11426
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 11427
_mm_maskz_permute_pd(__mmask8 __U, __m128d __X, const int __C) 
# 11428
{ 
# 11429
return (__m128d)__builtin_ia32_vpermilpd_mask((__v2df)__X, __C, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 11433
} 
# 11436
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 11437
_mm256_mask_permute_ps(__m256 __W, __mmask8 __U, __m256 __X, const int 
# 11438
__C) 
# 11439
{ 
# 11440
return (__m256)__builtin_ia32_vpermilps256_mask((__v8sf)__X, __C, (__v8sf)__W, (__mmask8)__U); 
# 11443
} 
# 11446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 11447
_mm256_maskz_permute_ps(__mmask8 __U, __m256 __X, const int __C) 
# 11448
{ 
# 11449
return (__m256)__builtin_ia32_vpermilps256_mask((__v8sf)__X, __C, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 11453
} 
# 11456
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 11457
_mm_mask_permute_ps(__m128 __W, __mmask8 __U, __m128 __X, const int 
# 11458
__C) 
# 11459
{ 
# 11460
return (__m128)__builtin_ia32_vpermilps_mask((__v4sf)__X, __C, (__v4sf)__W, (__mmask8)__U); 
# 11463
} 
# 11466
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 11467
_mm_maskz_permute_ps(__mmask8 __U, __m128 __X, const int __C) 
# 11468
{ 
# 11469
return (__m128)__builtin_ia32_vpermilps_mask((__v4sf)__X, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 11473
} 
# 11476
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 11477
_mm256_mask_blend_pd(__mmask8 __U, __m256d __A, __m256d __W) 
# 11478
{ 
# 11479
return (__m256d)__builtin_ia32_blendmpd_256_mask((__v4df)__A, (__v4df)__W, (__mmask8)__U); 
# 11482
} 
# 11485
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 11486
_mm256_mask_blend_ps(__mmask8 __U, __m256 __A, __m256 __W) 
# 11487
{ 
# 11488
return (__m256)__builtin_ia32_blendmps_256_mask((__v8sf)__A, (__v8sf)__W, (__mmask8)__U); 
# 11491
} 
# 11494
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11495
_mm256_mask_blend_epi64(__mmask8 __U, __m256i __A, __m256i __W) 
# 11496
{ 
# 11497
return (__m256i)__builtin_ia32_blendmq_256_mask((__v4di)__A, (__v4di)__W, (__mmask8)__U); 
# 11500
} 
# 11503
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 11504
_mm256_mask_blend_epi32(__mmask8 __U, __m256i __A, __m256i __W) 
# 11505
{ 
# 11506
return (__m256i)__builtin_ia32_blendmd_256_mask((__v8si)__A, (__v8si)__W, (__mmask8)__U); 
# 11509
} 
# 11512
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 11513
_mm_mask_blend_pd(__mmask8 __U, __m128d __A, __m128d __W) 
# 11514
{ 
# 11515
return (__m128d)__builtin_ia32_blendmpd_128_mask((__v2df)__A, (__v2df)__W, (__mmask8)__U); 
# 11518
} 
# 11521
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 11522
_mm_mask_blend_ps(__mmask8 __U, __m128 __A, __m128 __W) 
# 11523
{ 
# 11524
return (__m128)__builtin_ia32_blendmps_128_mask((__v4sf)__A, (__v4sf)__W, (__mmask8)__U); 
# 11527
} 
# 11530
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11531
_mm_mask_blend_epi64(__mmask8 __U, __m128i __A, __m128i __W) 
# 11532
{ 
# 11533
return (__m128i)__builtin_ia32_blendmq_128_mask((__v2di)__A, (__v2di)__W, (__mmask8)__U); 
# 11536
} 
# 11539
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 11540
_mm_mask_blend_epi32(__mmask8 __U, __m128i __A, __m128i __W) 
# 11541
{ 
# 11542
return (__m128i)__builtin_ia32_blendmd_128_mask((__v4si)__A, (__v4si)__W, (__mmask8)__U); 
# 11545
} 
# 11548
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11549
_mm256_cmp_epi64_mask(__m256i __X, __m256i __Y, const int __P) 
# 11550
{ 
# 11551
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, __P, (__mmask8)(-1)); 
# 11554
} 
# 11557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11558
_mm256_cmp_epi32_mask(__m256i __X, __m256i __Y, const int __P) 
# 11559
{ 
# 11560
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, __P, (__mmask8)(-1)); 
# 11563
} 
# 11566
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11567
_mm256_cmp_epu64_mask(__m256i __X, __m256i __Y, const int __P) 
# 11568
{ 
# 11569
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, __P, (__mmask8)(-1)); 
# 11572
} 
# 11575
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11576
_mm256_cmp_epu32_mask(__m256i __X, __m256i __Y, const int __P) 
# 11577
{ 
# 11578
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, __P, (__mmask8)(-1)); 
# 11581
} 
# 11584
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11585
_mm256_cmp_pd_mask(__m256d __X, __m256d __Y, const int __P) 
# 11586
{ 
# 11587
return (__mmask8)__builtin_ia32_cmppd256_mask((__v4df)__X, (__v4df)__Y, __P, (__mmask8)(-1)); 
# 11590
} 
# 11593
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11594
_mm256_cmp_ps_mask(__m256 __X, __m256 __Y, const int __P) 
# 11595
{ 
# 11596
return (__mmask8)__builtin_ia32_cmpps256_mask((__v8sf)__X, (__v8sf)__Y, __P, (__mmask8)(-1)); 
# 11599
} 
# 11602
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11603
_mm256_mask_cmp_epi64_mask(__mmask8 __U, __m256i __X, __m256i __Y, const int 
# 11604
__P) 
# 11605
{ 
# 11606
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, __P, (__mmask8)__U); 
# 11609
} 
# 11612
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11613
_mm256_mask_cmp_epi32_mask(__mmask8 __U, __m256i __X, __m256i __Y, const int 
# 11614
__P) 
# 11615
{ 
# 11616
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, __P, (__mmask8)__U); 
# 11619
} 
# 11622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11623
_mm256_mask_cmp_epu64_mask(__mmask8 __U, __m256i __X, __m256i __Y, const int 
# 11624
__P) 
# 11625
{ 
# 11626
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, __P, (__mmask8)__U); 
# 11629
} 
# 11632
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11633
_mm256_mask_cmp_epu32_mask(__mmask8 __U, __m256i __X, __m256i __Y, const int 
# 11634
__P) 
# 11635
{ 
# 11636
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, __P, (__mmask8)__U); 
# 11639
} 
# 11642
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11643
_mm256_mask_cmp_pd_mask(__mmask8 __U, __m256d __X, __m256d __Y, const int 
# 11644
__P) 
# 11645
{ 
# 11646
return (__mmask8)__builtin_ia32_cmppd256_mask((__v4df)__X, (__v4df)__Y, __P, (__mmask8)__U); 
# 11649
} 
# 11652
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11653
_mm256_mask_cmp_ps_mask(__mmask8 __U, __m256 __X, __m256 __Y, const int 
# 11654
__P) 
# 11655
{ 
# 11656
return (__mmask8)__builtin_ia32_cmpps256_mask((__v8sf)__X, (__v8sf)__Y, __P, (__mmask8)__U); 
# 11659
} 
# 11662
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11663
_mm_cmp_epi64_mask(__m128i __X, __m128i __Y, const int __P) 
# 11664
{ 
# 11665
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, __P, (__mmask8)(-1)); 
# 11668
} 
# 11671
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11672
_mm_cmp_epi32_mask(__m128i __X, __m128i __Y, const int __P) 
# 11673
{ 
# 11674
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, __P, (__mmask8)(-1)); 
# 11677
} 
# 11680
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11681
_mm_cmp_epu64_mask(__m128i __X, __m128i __Y, const int __P) 
# 11682
{ 
# 11683
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, __P, (__mmask8)(-1)); 
# 11686
} 
# 11689
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11690
_mm_cmp_epu32_mask(__m128i __X, __m128i __Y, const int __P) 
# 11691
{ 
# 11692
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, __P, (__mmask8)(-1)); 
# 11695
} 
# 11698
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11699
_mm_cmp_pd_mask(__m128d __X, __m128d __Y, const int __P) 
# 11700
{ 
# 11701
return (__mmask8)__builtin_ia32_cmppd128_mask((__v2df)__X, (__v2df)__Y, __P, (__mmask8)(-1)); 
# 11704
} 
# 11707
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11708
_mm_cmp_ps_mask(__m128 __X, __m128 __Y, const int __P) 
# 11709
{ 
# 11710
return (__mmask8)__builtin_ia32_cmpps128_mask((__v4sf)__X, (__v4sf)__Y, __P, (__mmask8)(-1)); 
# 11713
} 
# 11716
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11717
_mm_mask_cmp_epi64_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int 
# 11718
__P) 
# 11719
{ 
# 11720
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, __P, (__mmask8)__U); 
# 11723
} 
# 11726
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11727
_mm_mask_cmp_epi32_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int 
# 11728
__P) 
# 11729
{ 
# 11730
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, __P, (__mmask8)__U); 
# 11733
} 
# 11736
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11737
_mm_mask_cmp_epu64_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int 
# 11738
__P) 
# 11739
{ 
# 11740
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, __P, (__mmask8)__U); 
# 11743
} 
# 11746
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11747
_mm_mask_cmp_epu32_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int 
# 11748
__P) 
# 11749
{ 
# 11750
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, __P, (__mmask8)__U); 
# 11753
} 
# 11756
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11757
_mm_mask_cmp_pd_mask(__mmask8 __U, __m128d __X, __m128d __Y, const int 
# 11758
__P) 
# 11759
{ 
# 11760
return (__mmask8)__builtin_ia32_cmppd128_mask((__v2df)__X, (__v2df)__Y, __P, (__mmask8)__U); 
# 11763
} 
# 11766
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11767
_mm_mask_cmp_ps_mask(__mmask8 __U, __m128 __X, __m128 __Y, const int 
# 11768
__P) 
# 11769
{ 
# 11770
return (__mmask8)__builtin_ia32_cmpps128_mask((__v4sf)__X, (__v4sf)__Y, __P, (__mmask8)__U); 
# 11773
} 
# 11776
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 11777
_mm256_permutex_pd(__m256d __X, const int __M) 
# 11778
{ 
# 11779
return (__m256d)__builtin_ia32_permdf256_mask((__v4df)__X, __M, (__v4df)_mm256_undefined_pd(), (__mmask8)(-1)); 
# 11783
} 
# 11786
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11787
_mm256_mask_cmpneq_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11788
{ 
# 11789
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 4, (__mmask8)__M); 
# 11792
} 
# 11795
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11796
_mm256_cmpneq_epu32_mask(__m256i __X, __m256i __Y) 
# 11797
{ 
# 11798
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 4, (__mmask8)(-1)); 
# 11801
} 
# 11804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11805
_mm256_mask_cmplt_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11806
{ 
# 11807
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 1, (__mmask8)__M); 
# 11810
} 
# 11813
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11814
_mm256_cmplt_epu32_mask(__m256i __X, __m256i __Y) 
# 11815
{ 
# 11816
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 1, (__mmask8)(-1)); 
# 11819
} 
# 11822
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11823
_mm256_mask_cmpge_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11824
{ 
# 11825
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 5, (__mmask8)__M); 
# 11828
} 
# 11831
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11832
_mm256_cmpge_epu32_mask(__m256i __X, __m256i __Y) 
# 11833
{ 
# 11834
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 5, (__mmask8)(-1)); 
# 11837
} 
# 11840
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11841
_mm256_mask_cmple_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11842
{ 
# 11843
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 2, (__mmask8)__M); 
# 11846
} 
# 11849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11850
_mm256_cmple_epu32_mask(__m256i __X, __m256i __Y) 
# 11851
{ 
# 11852
return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 2, (__mmask8)(-1)); 
# 11855
} 
# 11858
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11859
_mm256_mask_cmpneq_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11860
{ 
# 11861
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 4, (__mmask8)__M); 
# 11864
} 
# 11867
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11868
_mm256_cmpneq_epu64_mask(__m256i __X, __m256i __Y) 
# 11869
{ 
# 11870
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 4, (__mmask8)(-1)); 
# 11873
} 
# 11876
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11877
_mm256_mask_cmplt_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11878
{ 
# 11879
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 1, (__mmask8)__M); 
# 11882
} 
# 11885
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11886
_mm256_cmplt_epu64_mask(__m256i __X, __m256i __Y) 
# 11887
{ 
# 11888
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 1, (__mmask8)(-1)); 
# 11891
} 
# 11894
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11895
_mm256_mask_cmpge_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11896
{ 
# 11897
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 5, (__mmask8)__M); 
# 11900
} 
# 11903
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11904
_mm256_cmpge_epu64_mask(__m256i __X, __m256i __Y) 
# 11905
{ 
# 11906
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 5, (__mmask8)(-1)); 
# 11909
} 
# 11912
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11913
_mm256_mask_cmple_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11914
{ 
# 11915
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 2, (__mmask8)__M); 
# 11918
} 
# 11921
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11922
_mm256_cmple_epu64_mask(__m256i __X, __m256i __Y) 
# 11923
{ 
# 11924
return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 2, (__mmask8)(-1)); 
# 11927
} 
# 11930
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11931
_mm256_mask_cmpneq_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11932
{ 
# 11933
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 4, (__mmask8)__M); 
# 11936
} 
# 11939
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11940
_mm256_cmpneq_epi32_mask(__m256i __X, __m256i __Y) 
# 11941
{ 
# 11942
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 4, (__mmask8)(-1)); 
# 11945
} 
# 11948
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11949
_mm256_mask_cmplt_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11950
{ 
# 11951
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 1, (__mmask8)__M); 
# 11954
} 
# 11957
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11958
_mm256_cmplt_epi32_mask(__m256i __X, __m256i __Y) 
# 11959
{ 
# 11960
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 1, (__mmask8)(-1)); 
# 11963
} 
# 11966
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11967
_mm256_mask_cmpge_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11968
{ 
# 11969
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 5, (__mmask8)__M); 
# 11972
} 
# 11975
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11976
_mm256_cmpge_epi32_mask(__m256i __X, __m256i __Y) 
# 11977
{ 
# 11978
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 5, (__mmask8)(-1)); 
# 11981
} 
# 11984
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11985
_mm256_mask_cmple_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 11986
{ 
# 11987
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 2, (__mmask8)__M); 
# 11990
} 
# 11993
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 11994
_mm256_cmple_epi32_mask(__m256i __X, __m256i __Y) 
# 11995
{ 
# 11996
return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 2, (__mmask8)(-1)); 
# 11999
} 
# 12002
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12003
_mm256_mask_cmpneq_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 12004
{ 
# 12005
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 4, (__mmask8)__M); 
# 12008
} 
# 12011
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12012
_mm256_cmpneq_epi64_mask(__m256i __X, __m256i __Y) 
# 12013
{ 
# 12014
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 4, (__mmask8)(-1)); 
# 12017
} 
# 12020
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12021
_mm256_mask_cmplt_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 12022
{ 
# 12023
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 1, (__mmask8)__M); 
# 12026
} 
# 12029
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12030
_mm256_cmplt_epi64_mask(__m256i __X, __m256i __Y) 
# 12031
{ 
# 12032
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 1, (__mmask8)(-1)); 
# 12035
} 
# 12038
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12039
_mm256_mask_cmpge_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 12040
{ 
# 12041
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 5, (__mmask8)__M); 
# 12044
} 
# 12047
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12048
_mm256_cmpge_epi64_mask(__m256i __X, __m256i __Y) 
# 12049
{ 
# 12050
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 5, (__mmask8)(-1)); 
# 12053
} 
# 12056
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12057
_mm256_mask_cmple_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 12058
{ 
# 12059
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 2, (__mmask8)__M); 
# 12062
} 
# 12065
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12066
_mm256_cmple_epi64_mask(__m256i __X, __m256i __Y) 
# 12067
{ 
# 12068
return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 2, (__mmask8)(-1)); 
# 12071
} 
# 12074
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12075
_mm_mask_cmpneq_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12076
{ 
# 12077
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 4, (__mmask8)__M); 
# 12080
} 
# 12083
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12084
_mm_cmpneq_epu32_mask(__m128i __X, __m128i __Y) 
# 12085
{ 
# 12086
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 4, (__mmask8)(-1)); 
# 12089
} 
# 12092
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12093
_mm_mask_cmplt_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12094
{ 
# 12095
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 1, (__mmask8)__M); 
# 12098
} 
# 12101
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12102
_mm_cmplt_epu32_mask(__m128i __X, __m128i __Y) 
# 12103
{ 
# 12104
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 1, (__mmask8)(-1)); 
# 12107
} 
# 12110
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12111
_mm_mask_cmpge_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12112
{ 
# 12113
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 5, (__mmask8)__M); 
# 12116
} 
# 12119
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12120
_mm_cmpge_epu32_mask(__m128i __X, __m128i __Y) 
# 12121
{ 
# 12122
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 5, (__mmask8)(-1)); 
# 12125
} 
# 12128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12129
_mm_mask_cmple_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12130
{ 
# 12131
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 2, (__mmask8)__M); 
# 12134
} 
# 12137
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12138
_mm_cmple_epu32_mask(__m128i __X, __m128i __Y) 
# 12139
{ 
# 12140
return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 2, (__mmask8)(-1)); 
# 12143
} 
# 12146
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12147
_mm_mask_cmpneq_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12148
{ 
# 12149
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 4, (__mmask8)__M); 
# 12152
} 
# 12155
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12156
_mm_cmpneq_epu64_mask(__m128i __X, __m128i __Y) 
# 12157
{ 
# 12158
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 4, (__mmask8)(-1)); 
# 12161
} 
# 12164
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12165
_mm_mask_cmplt_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12166
{ 
# 12167
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 1, (__mmask8)__M); 
# 12170
} 
# 12173
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12174
_mm_cmplt_epu64_mask(__m128i __X, __m128i __Y) 
# 12175
{ 
# 12176
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 1, (__mmask8)(-1)); 
# 12179
} 
# 12182
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12183
_mm_mask_cmpge_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12184
{ 
# 12185
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 5, (__mmask8)__M); 
# 12188
} 
# 12191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12192
_mm_cmpge_epu64_mask(__m128i __X, __m128i __Y) 
# 12193
{ 
# 12194
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 5, (__mmask8)(-1)); 
# 12197
} 
# 12200
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12201
_mm_mask_cmple_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12202
{ 
# 12203
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 2, (__mmask8)__M); 
# 12206
} 
# 12209
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12210
_mm_cmple_epu64_mask(__m128i __X, __m128i __Y) 
# 12211
{ 
# 12212
return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 2, (__mmask8)(-1)); 
# 12215
} 
# 12218
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12219
_mm_mask_cmpneq_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12220
{ 
# 12221
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 4, (__mmask8)__M); 
# 12224
} 
# 12227
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12228
_mm_cmpneq_epi32_mask(__m128i __X, __m128i __Y) 
# 12229
{ 
# 12230
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 4, (__mmask8)(-1)); 
# 12233
} 
# 12236
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12237
_mm_mask_cmplt_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12238
{ 
# 12239
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 1, (__mmask8)__M); 
# 12242
} 
# 12245
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12246
_mm_cmplt_epi32_mask(__m128i __X, __m128i __Y) 
# 12247
{ 
# 12248
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 1, (__mmask8)(-1)); 
# 12251
} 
# 12254
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12255
_mm_mask_cmpge_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12256
{ 
# 12257
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 5, (__mmask8)__M); 
# 12260
} 
# 12263
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12264
_mm_cmpge_epi32_mask(__m128i __X, __m128i __Y) 
# 12265
{ 
# 12266
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 5, (__mmask8)(-1)); 
# 12269
} 
# 12272
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12273
_mm_mask_cmple_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12274
{ 
# 12275
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 2, (__mmask8)__M); 
# 12278
} 
# 12281
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12282
_mm_cmple_epi32_mask(__m128i __X, __m128i __Y) 
# 12283
{ 
# 12284
return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 2, (__mmask8)(-1)); 
# 12287
} 
# 12290
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12291
_mm_mask_cmpneq_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12292
{ 
# 12293
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 4, (__mmask8)__M); 
# 12296
} 
# 12299
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12300
_mm_cmpneq_epi64_mask(__m128i __X, __m128i __Y) 
# 12301
{ 
# 12302
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 4, (__mmask8)(-1)); 
# 12305
} 
# 12308
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12309
_mm_mask_cmplt_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12310
{ 
# 12311
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 1, (__mmask8)__M); 
# 12314
} 
# 12317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12318
_mm_cmplt_epi64_mask(__m128i __X, __m128i __Y) 
# 12319
{ 
# 12320
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 1, (__mmask8)(-1)); 
# 12323
} 
# 12326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12327
_mm_mask_cmpge_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12328
{ 
# 12329
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 5, (__mmask8)__M); 
# 12332
} 
# 12335
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12336
_mm_cmpge_epi64_mask(__m128i __X, __m128i __Y) 
# 12337
{ 
# 12338
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 5, (__mmask8)(-1)); 
# 12341
} 
# 12344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12345
_mm_mask_cmple_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 12346
{ 
# 12347
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 2, (__mmask8)__M); 
# 12350
} 
# 12353
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 12354
_mm_cmple_epi64_mask(__m128i __X, __m128i __Y) 
# 12355
{ 
# 12356
return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 2, (__mmask8)(-1)); 
# 12359
} 
# 13595
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512bwintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512bw" )
# 38
typedef short __v32hi __attribute((__vector_size__(64))); 
# 39
typedef char __v64qi __attribute((__vector_size__(64))); 
# 41
typedef unsigned long long __mmask64; 
# 44
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 45
_mm512_setzero_qi() 
# 46
{ 
# 47
return __extension__ (__m512i)(((__v64qi){(0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0)})); 
# 55
} 
# 58
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 59
_mm512_setzero_hi() 
# 60
{ 
# 61
return __extension__ (__m512i)(((__v32hi){(0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0)})); 
# 65
} 
# 68
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 69
_mm512_mask_mov_epi16(__m512i __W, __mmask32 __U, __m512i __A) 
# 70
{ 
# 71
return (__m512i)__builtin_ia32_movdquhi512_mask((__v32hi)__A, (__v32hi)__W, (__mmask32)__U); 
# 74
} 
# 77
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 78
_mm512_maskz_mov_epi16(__mmask32 __U, __m512i __A) 
# 79
{ 
# 80
return (__m512i)__builtin_ia32_movdquhi512_mask((__v32hi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 84
} 
# 87
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 88
_mm512_mask_loadu_epi16(__m512i __W, __mmask32 __U, const void *__P) 
# 89
{ 
# 90
return (__m512i)__builtin_ia32_loaddquhi512_mask((__v32hi *)__P, (__v32hi)__W, (__mmask32)__U); 
# 93
} 
# 96
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 97
_mm512_maskz_loadu_epi16(__mmask32 __U, const void *__P) 
# 98
{ 
# 99
return (__m512i)__builtin_ia32_loaddquhi512_mask((__v32hi *)__P, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 103
} 
# 106
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 107
_mm512_mask_storeu_epi16(void *__P, __mmask32 __U, __m512i __A) 
# 108
{ 
# 109
__builtin_ia32_storedquhi512_mask((__v32hi *)__P, (__v32hi)__A, (__mmask32)__U); 
# 112
} 
# 115
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 116
_mm512_mask_mov_epi8(__m512i __W, __mmask64 __U, __m512i __A) 
# 117
{ 
# 118
return (__m512i)__builtin_ia32_movdquqi512_mask((__v64qi)__A, (__v64qi)__W, (__mmask64)__U); 
# 121
} 
# 124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 125
_mm512_maskz_mov_epi8(__mmask64 __U, __m512i __A) 
# 126
{ 
# 127
return (__m512i)__builtin_ia32_movdquqi512_mask((__v64qi)__A, (__v64qi)_mm512_setzero_hi(), (__mmask64)__U); 
# 131
} 
# 134
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 135
_mm512_kunpackw(__mmask32 __A, __mmask32 __B) 
# 136
{ 
# 137
return (__mmask32)__builtin_ia32_kunpcksi((__mmask32)__A, (__mmask32)__B); 
# 139
} 
# 142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 143
_mm512_kunpackd(__mmask64 __A, __mmask64 __B) 
# 144
{ 
# 145
return (__mmask64)__builtin_ia32_kunpckdi((__mmask64)__A, (__mmask64)__B); 
# 147
} 
# 150
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 151
_mm512_mask_loadu_epi8(__m512i __W, __mmask64 __U, const void *__P) 
# 152
{ 
# 153
return (__m512i)__builtin_ia32_loaddquqi512_mask((__v64qi *)__P, (__v64qi)__W, (__mmask64)__U); 
# 156
} 
# 159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 160
_mm512_maskz_loadu_epi8(__mmask64 __U, const void *__P) 
# 161
{ 
# 162
return (__m512i)__builtin_ia32_loaddquqi512_mask((__v64qi *)__P, (__v64qi)_mm512_setzero_hi(), (__mmask64)__U); 
# 166
} 
# 169
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 170
_mm512_mask_storeu_epi8(void *__P, __mmask64 __U, __m512i __A) 
# 171
{ 
# 172
__builtin_ia32_storedquqi512_mask((__v64qi *)__P, (__v64qi)__A, (__mmask64)__U); 
# 175
} 
# 178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 179
_mm512_sad_epu8(__m512i __A, __m512i __B) 
# 180
{ 
# 181
return (__m512i)__builtin_ia32_psadbw512((__v64qi)__A, (__v64qi)__B); 
# 183
} 
# 186
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 187
_mm512_cvtepi16_epi8(__m512i __A) 
# 188
{ 
# 189
return (__m256i)__builtin_ia32_pmovwb512_mask((__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)(-1)); 
# 192
} 
# 195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 196
_mm512_mask_cvtepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) 
# 197
{ 
# 198
return (__m256i)__builtin_ia32_pmovwb512_mask((__v32hi)__A, (__v32qi)__O, __M); 
# 200
} 
# 203
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 204
_mm512_maskz_cvtepi16_epi8(__mmask32 __M, __m512i __A) 
# 205
{ 
# 206
return (__m256i)__builtin_ia32_pmovwb512_mask((__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M); 
# 210
} 
# 213
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 214
_mm512_cvtsepi16_epi8(__m512i __A) 
# 215
{ 
# 216
return (__m256i)__builtin_ia32_pmovswb512_mask((__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)(-1)); 
# 219
} 
# 222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 223
_mm512_mask_cvtsepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) 
# 224
{ 
# 225
return (__m256i)__builtin_ia32_pmovswb512_mask((__v32hi)__A, (__v32qi)__O, __M); 
# 228
} 
# 231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 232
_mm512_maskz_cvtsepi16_epi8(__mmask32 __M, __m512i __A) 
# 233
{ 
# 234
return (__m256i)__builtin_ia32_pmovswb512_mask((__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M); 
# 238
} 
# 241
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 242
_mm512_cvtusepi16_epi8(__m512i __A) 
# 243
{ 
# 244
return (__m256i)__builtin_ia32_pmovuswb512_mask((__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)(-1)); 
# 247
} 
# 250
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 251
_mm512_mask_cvtusepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) 
# 252
{ 
# 253
return (__m256i)__builtin_ia32_pmovuswb512_mask((__v32hi)__A, (__v32qi)__O, __M); 
# 256
} 
# 259
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 260
_mm512_maskz_cvtusepi16_epi8(__mmask32 __M, __m512i __A) 
# 261
{ 
# 262
return (__m256i)__builtin_ia32_pmovuswb512_mask((__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M); 
# 266
} 
# 269
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 270
_mm512_broadcastb_epi8(__m128i __A) 
# 271
{ 
# 272
return (__m512i)__builtin_ia32_pbroadcastb512_mask((__v16qi)__A, (__v64qi)_mm512_undefined_si512(), (__mmask64)(-1)); 
# 276
} 
# 279
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 280
_mm512_mask_broadcastb_epi8(__m512i __O, __mmask64 __M, __m128i __A) 
# 281
{ 
# 282
return (__m512i)__builtin_ia32_pbroadcastb512_mask((__v16qi)__A, (__v64qi)__O, __M); 
# 285
} 
# 288
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 289
_mm512_maskz_broadcastb_epi8(__mmask64 __M, __m128i __A) 
# 290
{ 
# 291
return (__m512i)__builtin_ia32_pbroadcastb512_mask((__v16qi)__A, (__v64qi)_mm512_setzero_qi(), __M); 
# 295
} 
# 298
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 299
_mm512_mask_set1_epi8(__m512i __O, __mmask64 __M, char __A) 
# 300
{ 
# 301
return (__m512i)__builtin_ia32_pbroadcastb512_gpr_mask(__A, (__v64qi)__O, __M); 
# 304
} 
# 307
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 308
_mm512_maskz_set1_epi8(__mmask64 __M, char __A) 
# 309
{ 
# 310
return (__m512i)__builtin_ia32_pbroadcastb512_gpr_mask(__A, (__v64qi)_mm512_setzero_qi(), __M); 
# 314
} 
# 317
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 318
_mm512_broadcastw_epi16(__m128i __A) 
# 319
{ 
# 320
return (__m512i)__builtin_ia32_pbroadcastw512_mask((__v8hi)__A, (__v32hi)_mm512_undefined_si512(), (__mmask32)(-1)); 
# 323
} 
# 326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 327
_mm512_mask_broadcastw_epi16(__m512i __O, __mmask32 __M, __m128i __A) 
# 328
{ 
# 329
return (__m512i)__builtin_ia32_pbroadcastw512_mask((__v8hi)__A, (__v32hi)__O, __M); 
# 332
} 
# 335
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 336
_mm512_maskz_broadcastw_epi16(__mmask32 __M, __m128i __A) 
# 337
{ 
# 338
return (__m512i)__builtin_ia32_pbroadcastw512_mask((__v8hi)__A, (__v32hi)_mm512_setzero_hi(), __M); 
# 342
} 
# 345
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 346
_mm512_mask_set1_epi16(__m512i __O, __mmask32 __M, short __A) 
# 347
{ 
# 348
return (__m512i)__builtin_ia32_pbroadcastw512_gpr_mask(__A, (__v32hi)__O, __M); 
# 351
} 
# 354
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 355
_mm512_maskz_set1_epi16(__mmask32 __M, short __A) 
# 356
{ 
# 357
return (__m512i)__builtin_ia32_pbroadcastw512_gpr_mask(__A, (__v32hi)_mm512_setzero_hi(), __M); 
# 361
} 
# 364
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 365
_mm512_mulhrs_epi16(__m512i __A, __m512i __B) 
# 366
{ 
# 367
return (__m512i)__builtin_ia32_pmulhrsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 372
} 
# 375
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 376
_mm512_mask_mulhrs_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 377
__B) 
# 378
{ 
# 379
return (__m512i)__builtin_ia32_pmulhrsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 383
} 
# 386
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 387
_mm512_maskz_mulhrs_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 388
{ 
# 389
return (__m512i)__builtin_ia32_pmulhrsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 394
} 
# 397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 398
_mm512_mulhi_epi16(__m512i __A, __m512i __B) 
# 399
{ 
# 400
return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 405
} 
# 408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 409
_mm512_mask_mulhi_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 410
__B) 
# 411
{ 
# 412
return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 416
} 
# 419
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 420
_mm512_maskz_mulhi_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 421
{ 
# 422
return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 427
} 
# 430
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 431
_mm512_mulhi_epu16(__m512i __A, __m512i __B) 
# 432
{ 
# 433
return (__m512i)__builtin_ia32_pmulhuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 438
} 
# 441
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 442
_mm512_mask_mulhi_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 443
__B) 
# 444
{ 
# 445
return (__m512i)__builtin_ia32_pmulhuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 449
} 
# 452
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 453
_mm512_maskz_mulhi_epu16(__mmask32 __U, __m512i __A, __m512i __B) 
# 454
{ 
# 455
return (__m512i)__builtin_ia32_pmulhuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 460
} 
# 463
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 464
_mm512_mullo_epi16(__m512i __A, __m512i __B) 
# 465
{ 
# 466
return (__m512i)(((__v32hu)__A) * ((__v32hu)__B)); 
# 467
} 
# 470
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 471
_mm512_mask_mullo_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 472
__B) 
# 473
{ 
# 474
return (__m512i)__builtin_ia32_pmullw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 478
} 
# 481
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 482
_mm512_maskz_mullo_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 483
{ 
# 484
return (__m512i)__builtin_ia32_pmullw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 489
} 
# 492
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 493
_mm512_cvtepi8_epi16(__m256i __A) 
# 494
{ 
# 495
return (__m512i)__builtin_ia32_pmovsxbw512_mask((__v32qi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 499
} 
# 502
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 503
_mm512_mask_cvtepi8_epi16(__m512i __W, __mmask32 __U, __m256i __A) 
# 504
{ 
# 505
return (__m512i)__builtin_ia32_pmovsxbw512_mask((__v32qi)__A, (__v32hi)__W, (__mmask32)__U); 
# 508
} 
# 511
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 512
_mm512_maskz_cvtepi8_epi16(__mmask32 __U, __m256i __A) 
# 513
{ 
# 514
return (__m512i)__builtin_ia32_pmovsxbw512_mask((__v32qi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 518
} 
# 521
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 522
_mm512_cvtepu8_epi16(__m256i __A) 
# 523
{ 
# 524
return (__m512i)__builtin_ia32_pmovzxbw512_mask((__v32qi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 528
} 
# 531
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 532
_mm512_mask_cvtepu8_epi16(__m512i __W, __mmask32 __U, __m256i __A) 
# 533
{ 
# 534
return (__m512i)__builtin_ia32_pmovzxbw512_mask((__v32qi)__A, (__v32hi)__W, (__mmask32)__U); 
# 537
} 
# 540
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 541
_mm512_maskz_cvtepu8_epi16(__mmask32 __U, __m256i __A) 
# 542
{ 
# 543
return (__m512i)__builtin_ia32_pmovzxbw512_mask((__v32qi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 547
} 
# 550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 551
_mm512_permutexvar_epi16(__m512i __A, __m512i __B) 
# 552
{ 
# 553
return (__m512i)__builtin_ia32_permvarhi512_mask((__v32hi)__B, (__v32hi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 558
} 
# 561
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 562
_mm512_maskz_permutexvar_epi16(__mmask32 __M, __m512i __A, __m512i 
# 563
__B) 
# 564
{ 
# 565
return (__m512i)__builtin_ia32_permvarhi512_mask((__v32hi)__B, (__v32hi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)__M); 
# 570
} 
# 573
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 574
_mm512_mask_permutexvar_epi16(__m512i __W, __mmask32 __M, __m512i __A, __m512i 
# 575
__B) 
# 576
{ 
# 577
return (__m512i)__builtin_ia32_permvarhi512_mask((__v32hi)__B, (__v32hi)__A, (__v32hi)__W, (__mmask32)__M); 
# 581
} 
# 584
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 585
_mm512_permutex2var_epi16(__m512i __A, __m512i __I, __m512i __B) 
# 586
{ 
# 587
return (__m512i)__builtin_ia32_vpermt2varhi512_mask((__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)(-1)); 
# 593
} 
# 596
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 597
_mm512_mask_permutex2var_epi16(__m512i __A, __mmask32 __U, __m512i 
# 598
__I, __m512i __B) 
# 599
{ 
# 600
return (__m512i)__builtin_ia32_vpermt2varhi512_mask((__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)__U); 
# 606
} 
# 609
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 610
_mm512_mask2_permutex2var_epi16(__m512i __A, __m512i __I, __mmask32 
# 611
__U, __m512i __B) 
# 612
{ 
# 613
return (__m512i)__builtin_ia32_vpermi2varhi512_mask((__v32hi)__A, (__v32hi)__I, (__v32hi)__B, (__mmask32)__U); 
# 619
} 
# 622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 623
_mm512_maskz_permutex2var_epi16(__mmask32 __U, __m512i __A, __m512i 
# 624
__I, __m512i __B) 
# 625
{ 
# 626
return (__m512i)__builtin_ia32_vpermt2varhi512_maskz((__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)__U); 
# 632
} 
# 635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 636
_mm512_avg_epu8(__m512i __A, __m512i __B) 
# 637
{ 
# 638
return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 643
} 
# 646
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 647
_mm512_mask_avg_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 648
__B) 
# 649
{ 
# 650
return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 654
} 
# 657
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 658
_mm512_maskz_avg_epu8(__mmask64 __U, __m512i __A, __m512i __B) 
# 659
{ 
# 660
return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 665
} 
# 668
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 669
_mm512_add_epi8(__m512i __A, __m512i __B) 
# 670
{ 
# 671
return (__m512i)(((__v64qu)__A) + ((__v64qu)__B)); 
# 672
} 
# 675
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 676
_mm512_mask_add_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 677
__B) 
# 678
{ 
# 679
return (__m512i)__builtin_ia32_paddb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 683
} 
# 686
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 687
_mm512_maskz_add_epi8(__mmask64 __U, __m512i __A, __m512i __B) 
# 688
{ 
# 689
return (__m512i)__builtin_ia32_paddb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 694
} 
# 697
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 698
_mm512_sub_epi8(__m512i __A, __m512i __B) 
# 699
{ 
# 700
return (__m512i)(((__v64qu)__A) - ((__v64qu)__B)); 
# 701
} 
# 704
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 705
_mm512_mask_sub_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 706
__B) 
# 707
{ 
# 708
return (__m512i)__builtin_ia32_psubb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 712
} 
# 715
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 716
_mm512_maskz_sub_epi8(__mmask64 __U, __m512i __A, __m512i __B) 
# 717
{ 
# 718
return (__m512i)__builtin_ia32_psubb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 723
} 
# 726
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 727
_mm512_avg_epu16(__m512i __A, __m512i __B) 
# 728
{ 
# 729
return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 734
} 
# 737
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 738
_mm512_mask_avg_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 739
__B) 
# 740
{ 
# 741
return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 745
} 
# 748
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 749
_mm512_maskz_avg_epu16(__mmask32 __U, __m512i __A, __m512i __B) 
# 750
{ 
# 751
return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 756
} 
# 759
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 760
_mm512_subs_epi8(__m512i __A, __m512i __B) 
# 761
{ 
# 762
return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 767
} 
# 770
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 771
_mm512_mask_subs_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 772
__B) 
# 773
{ 
# 774
return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 778
} 
# 781
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 782
_mm512_maskz_subs_epi8(__mmask64 __U, __m512i __A, __m512i __B) 
# 783
{ 
# 784
return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 789
} 
# 792
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 793
_mm512_subs_epu8(__m512i __A, __m512i __B) 
# 794
{ 
# 795
return (__m512i)__builtin_ia32_psubusb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 800
} 
# 803
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 804
_mm512_mask_subs_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 805
__B) 
# 806
{ 
# 807
return (__m512i)__builtin_ia32_psubusb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 811
} 
# 814
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 815
_mm512_maskz_subs_epu8(__mmask64 __U, __m512i __A, __m512i __B) 
# 816
{ 
# 817
return (__m512i)__builtin_ia32_psubusb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 822
} 
# 825
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 826
_mm512_adds_epi8(__m512i __A, __m512i __B) 
# 827
{ 
# 828
return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 833
} 
# 836
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 837
_mm512_mask_adds_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 838
__B) 
# 839
{ 
# 840
return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 844
} 
# 847
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 848
_mm512_maskz_adds_epi8(__mmask64 __U, __m512i __A, __m512i __B) 
# 849
{ 
# 850
return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 855
} 
# 858
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 859
_mm512_adds_epu8(__m512i __A, __m512i __B) 
# 860
{ 
# 861
return (__m512i)__builtin_ia32_paddusb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 866
} 
# 869
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 870
_mm512_mask_adds_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 871
__B) 
# 872
{ 
# 873
return (__m512i)__builtin_ia32_paddusb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 877
} 
# 880
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 881
_mm512_maskz_adds_epu8(__mmask64 __U, __m512i __A, __m512i __B) 
# 882
{ 
# 883
return (__m512i)__builtin_ia32_paddusb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 888
} 
# 891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 892
_mm512_sub_epi16(__m512i __A, __m512i __B) 
# 893
{ 
# 894
return (__m512i)(((__v32hu)__A) - ((__v32hu)__B)); 
# 895
} 
# 898
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 899
_mm512_mask_sub_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 900
__B) 
# 901
{ 
# 902
return (__m512i)__builtin_ia32_psubw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 906
} 
# 909
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 910
_mm512_maskz_sub_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 911
{ 
# 912
return (__m512i)__builtin_ia32_psubw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 917
} 
# 920
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 921
_mm512_subs_epi16(__m512i __A, __m512i __B) 
# 922
{ 
# 923
return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 928
} 
# 931
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 932
_mm512_mask_subs_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 933
__B) 
# 934
{ 
# 935
return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 939
} 
# 942
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 943
_mm512_maskz_subs_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 944
{ 
# 945
return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 950
} 
# 953
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 954
_mm512_subs_epu16(__m512i __A, __m512i __B) 
# 955
{ 
# 956
return (__m512i)__builtin_ia32_psubusw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 961
} 
# 964
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 965
_mm512_mask_subs_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 966
__B) 
# 967
{ 
# 968
return (__m512i)__builtin_ia32_psubusw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 972
} 
# 975
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 976
_mm512_maskz_subs_epu16(__mmask32 __U, __m512i __A, __m512i __B) 
# 977
{ 
# 978
return (__m512i)__builtin_ia32_psubusw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 983
} 
# 986
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 987
_mm512_add_epi16(__m512i __A, __m512i __B) 
# 988
{ 
# 989
return (__m512i)(((__v32hu)__A) + ((__v32hu)__B)); 
# 990
} 
# 993
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 994
_mm512_mask_add_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 995
__B) 
# 996
{ 
# 997
return (__m512i)__builtin_ia32_paddw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1001
} 
# 1004
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1005
_mm512_maskz_add_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 1006
{ 
# 1007
return (__m512i)__builtin_ia32_paddw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1012
} 
# 1015
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1016
_mm512_adds_epi16(__m512i __A, __m512i __B) 
# 1017
{ 
# 1018
return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1023
} 
# 1026
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1027
_mm512_mask_adds_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 1028
__B) 
# 1029
{ 
# 1030
return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1034
} 
# 1037
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1038
_mm512_maskz_adds_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 1039
{ 
# 1040
return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1045
} 
# 1048
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1049
_mm512_adds_epu16(__m512i __A, __m512i __B) 
# 1050
{ 
# 1051
return (__m512i)__builtin_ia32_paddusw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1056
} 
# 1059
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1060
_mm512_mask_adds_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 1061
__B) 
# 1062
{ 
# 1063
return (__m512i)__builtin_ia32_paddusw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1067
} 
# 1070
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1071
_mm512_maskz_adds_epu16(__mmask32 __U, __m512i __A, __m512i __B) 
# 1072
{ 
# 1073
return (__m512i)__builtin_ia32_paddusw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1078
} 
# 1081
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1082
_mm512_srl_epi16(__m512i __A, __m128i __B) 
# 1083
{ 
# 1084
return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1089
} 
# 1092
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1093
_mm512_mask_srl_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i 
# 1094
__B) 
# 1095
{ 
# 1096
return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1100
} 
# 1103
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1104
_mm512_maskz_srl_epi16(__mmask32 __U, __m512i __A, __m128i __B) 
# 1105
{ 
# 1106
return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1111
} 
# 1114
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1115
_mm512_packs_epi16(__m512i __A, __m512i __B) 
# 1116
{ 
# 1117
return (__m512i)__builtin_ia32_packsswb512_mask((__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 1122
} 
# 1125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1126
_mm512_sll_epi16(__m512i __A, __m128i __B) 
# 1127
{ 
# 1128
return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1133
} 
# 1136
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1137
_mm512_mask_sll_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i 
# 1138
__B) 
# 1139
{ 
# 1140
return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1144
} 
# 1147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1148
_mm512_maskz_sll_epi16(__mmask32 __U, __m512i __A, __m128i __B) 
# 1149
{ 
# 1150
return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1155
} 
# 1158
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1159
_mm512_maddubs_epi16(__m512i __X, __m512i __Y) 
# 1160
{ 
# 1161
return (__m512i)__builtin_ia32_pmaddubsw512_mask((__v64qi)__X, (__v64qi)__Y, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1166
} 
# 1169
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1170
_mm512_mask_maddubs_epi16(__m512i __W, __mmask32 __U, __m512i __X, __m512i 
# 1171
__Y) 
# 1172
{ 
# 1173
return (__m512i)__builtin_ia32_pmaddubsw512_mask((__v64qi)__X, (__v64qi)__Y, (__v32hi)__W, (__mmask32)__U); 
# 1177
} 
# 1180
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1181
_mm512_maskz_maddubs_epi16(__mmask32 __U, __m512i __X, __m512i __Y) 
# 1182
{ 
# 1183
return (__m512i)__builtin_ia32_pmaddubsw512_mask((__v64qi)__X, (__v64qi)__Y, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1188
} 
# 1191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1192
_mm512_madd_epi16(__m512i __A, __m512i __B) 
# 1193
{ 
# 1194
return (__m512i)__builtin_ia32_pmaddwd512_mask((__v32hi)__A, (__v32hi)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)(-1)); 
# 1199
} 
# 1202
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1203
_mm512_mask_madd_epi16(__m512i __W, __mmask16 __U, __m512i __A, __m512i 
# 1204
__B) 
# 1205
{ 
# 1206
return (__m512i)__builtin_ia32_pmaddwd512_mask((__v32hi)__A, (__v32hi)__B, (__v16si)__W, (__mmask16)__U); 
# 1210
} 
# 1213
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1214
_mm512_maskz_madd_epi16(__mmask16 __U, __m512i __A, __m512i __B) 
# 1215
{ 
# 1216
return (__m512i)__builtin_ia32_pmaddwd512_mask((__v32hi)__A, (__v32hi)__B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1221
} 
# 1224
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1225
_mm512_unpackhi_epi8(__m512i __A, __m512i __B) 
# 1226
{ 
# 1227
return (__m512i)__builtin_ia32_punpckhbw512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 1232
} 
# 1235
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1236
_mm512_mask_unpackhi_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 1237
__B) 
# 1238
{ 
# 1239
return (__m512i)__builtin_ia32_punpckhbw512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 1243
} 
# 1246
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1247
_mm512_maskz_unpackhi_epi8(__mmask64 __U, __m512i __A, __m512i __B) 
# 1248
{ 
# 1249
return (__m512i)__builtin_ia32_punpckhbw512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 1254
} 
# 1257
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1258
_mm512_unpackhi_epi16(__m512i __A, __m512i __B) 
# 1259
{ 
# 1260
return (__m512i)__builtin_ia32_punpckhwd512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1265
} 
# 1268
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1269
_mm512_mask_unpackhi_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 1270
__B) 
# 1271
{ 
# 1272
return (__m512i)__builtin_ia32_punpckhwd512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1276
} 
# 1279
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1280
_mm512_maskz_unpackhi_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 1281
{ 
# 1282
return (__m512i)__builtin_ia32_punpckhwd512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1287
} 
# 1290
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1291
_mm512_unpacklo_epi8(__m512i __A, __m512i __B) 
# 1292
{ 
# 1293
return (__m512i)__builtin_ia32_punpcklbw512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 1298
} 
# 1301
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1302
_mm512_mask_unpacklo_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 1303
__B) 
# 1304
{ 
# 1305
return (__m512i)__builtin_ia32_punpcklbw512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 1309
} 
# 1312
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1313
_mm512_maskz_unpacklo_epi8(__mmask64 __U, __m512i __A, __m512i __B) 
# 1314
{ 
# 1315
return (__m512i)__builtin_ia32_punpcklbw512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 1320
} 
# 1323
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1324
_mm512_unpacklo_epi16(__m512i __A, __m512i __B) 
# 1325
{ 
# 1326
return (__m512i)__builtin_ia32_punpcklwd512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1331
} 
# 1334
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1335
_mm512_mask_unpacklo_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 1336
__B) 
# 1337
{ 
# 1338
return (__m512i)__builtin_ia32_punpcklwd512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1342
} 
# 1345
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1346
_mm512_maskz_unpacklo_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 1347
{ 
# 1348
return (__m512i)__builtin_ia32_punpcklwd512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1353
} 
# 1356
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1357
_mm512_cmpeq_epu8_mask(__m512i __A, __m512i __B) 
# 1358
{ 
# 1359
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 0, (__mmask64)(-1)); 
# 1362
} 
# 1365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1366
_mm512_cmpeq_epi8_mask(__m512i __A, __m512i __B) 
# 1367
{ 
# 1368
return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__A, (__v64qi)__B, (__mmask64)(-1)); 
# 1371
} 
# 1374
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1375
_mm512_mask_cmpeq_epu8_mask(__mmask64 __U, __m512i __A, __m512i __B) 
# 1376
{ 
# 1377
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 0, __U); 
# 1380
} 
# 1383
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1384
_mm512_mask_cmpeq_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) 
# 1385
{ 
# 1386
return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__A, (__v64qi)__B, __U); 
# 1389
} 
# 1392
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1393
_mm512_cmpeq_epu16_mask(__m512i __A, __m512i __B) 
# 1394
{ 
# 1395
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 0, (__mmask32)(-1)); 
# 1398
} 
# 1401
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1402
_mm512_cmpeq_epi16_mask(__m512i __A, __m512i __B) 
# 1403
{ 
# 1404
return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__A, (__v32hi)__B, (__mmask32)(-1)); 
# 1407
} 
# 1410
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1411
_mm512_mask_cmpeq_epu16_mask(__mmask32 __U, __m512i __A, __m512i __B) 
# 1412
{ 
# 1413
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 0, __U); 
# 1416
} 
# 1419
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1420
_mm512_mask_cmpeq_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) 
# 1421
{ 
# 1422
return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__A, (__v32hi)__B, __U); 
# 1425
} 
# 1428
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1429
_mm512_cmpgt_epu8_mask(__m512i __A, __m512i __B) 
# 1430
{ 
# 1431
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 6, (__mmask64)(-1)); 
# 1434
} 
# 1437
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1438
_mm512_cmpgt_epi8_mask(__m512i __A, __m512i __B) 
# 1439
{ 
# 1440
return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__A, (__v64qi)__B, (__mmask64)(-1)); 
# 1443
} 
# 1446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1447
_mm512_mask_cmpgt_epu8_mask(__mmask64 __U, __m512i __A, __m512i __B) 
# 1448
{ 
# 1449
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 6, __U); 
# 1452
} 
# 1455
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1456
_mm512_mask_cmpgt_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) 
# 1457
{ 
# 1458
return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__A, (__v64qi)__B, __U); 
# 1461
} 
# 1464
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1465
_mm512_cmpgt_epu16_mask(__m512i __A, __m512i __B) 
# 1466
{ 
# 1467
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 6, (__mmask32)(-1)); 
# 1470
} 
# 1473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1474
_mm512_cmpgt_epi16_mask(__m512i __A, __m512i __B) 
# 1475
{ 
# 1476
return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__A, (__v32hi)__B, (__mmask32)(-1)); 
# 1479
} 
# 1482
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1483
_mm512_mask_cmpgt_epu16_mask(__mmask32 __U, __m512i __A, __m512i __B) 
# 1484
{ 
# 1485
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 6, __U); 
# 1488
} 
# 1491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1492
_mm512_mask_cmpgt_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) 
# 1493
{ 
# 1494
return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__A, (__v32hi)__B, __U); 
# 1497
} 
# 1500
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1501
_mm512_movepi8_mask(__m512i __A) 
# 1502
{ 
# 1503
return (__mmask64)__builtin_ia32_cvtb2mask512((__v64qi)__A); 
# 1504
} 
# 1507
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1508
_mm512_movepi16_mask(__m512i __A) 
# 1509
{ 
# 1510
return (__mmask32)__builtin_ia32_cvtw2mask512((__v32hi)__A); 
# 1511
} 
# 1514
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1515
_mm512_movm_epi8(__mmask64 __A) 
# 1516
{ 
# 1517
return (__m512i)__builtin_ia32_cvtmask2b512(__A); 
# 1518
} 
# 1521
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1522
_mm512_movm_epi16(__mmask32 __A) 
# 1523
{ 
# 1524
return (__m512i)__builtin_ia32_cvtmask2w512(__A); 
# 1525
} 
# 1528
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1529
_mm512_test_epi8_mask(__m512i __A, __m512i __B) 
# 1530
{ 
# 1531
return (__mmask64)__builtin_ia32_ptestmb512((__v64qi)__A, (__v64qi)__B, (__mmask64)(-1)); 
# 1534
} 
# 1537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1538
_mm512_mask_test_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) 
# 1539
{ 
# 1540
return (__mmask64)__builtin_ia32_ptestmb512((__v64qi)__A, (__v64qi)__B, __U); 
# 1542
} 
# 1545
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1546
_mm512_test_epi16_mask(__m512i __A, __m512i __B) 
# 1547
{ 
# 1548
return (__mmask32)__builtin_ia32_ptestmw512((__v32hi)__A, (__v32hi)__B, (__mmask32)(-1)); 
# 1551
} 
# 1554
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1555
_mm512_mask_test_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) 
# 1556
{ 
# 1557
return (__mmask32)__builtin_ia32_ptestmw512((__v32hi)__A, (__v32hi)__B, __U); 
# 1559
} 
# 1562
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1563
_mm512_testn_epi8_mask(__m512i __A, __m512i __B) 
# 1564
{ 
# 1565
return (__mmask64)__builtin_ia32_ptestnmb512((__v64qi)__A, (__v64qi)__B, (__mmask64)(-1)); 
# 1568
} 
# 1571
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 1572
_mm512_mask_testn_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) 
# 1573
{ 
# 1574
return (__mmask64)__builtin_ia32_ptestnmb512((__v64qi)__A, (__v64qi)__B, __U); 
# 1576
} 
# 1579
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1580
_mm512_testn_epi16_mask(__m512i __A, __m512i __B) 
# 1581
{ 
# 1582
return (__mmask32)__builtin_ia32_ptestnmw512((__v32hi)__A, (__v32hi)__B, (__mmask32)(-1)); 
# 1585
} 
# 1588
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1589
_mm512_mask_testn_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) 
# 1590
{ 
# 1591
return (__mmask32)__builtin_ia32_ptestnmw512((__v32hi)__A, (__v32hi)__B, __U); 
# 1593
} 
# 1596
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1597
_mm512_shuffle_epi8(__m512i __A, __m512i __B) 
# 1598
{ 
# 1599
return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 1604
} 
# 1607
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1608
_mm512_mask_shuffle_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 1609
__B) 
# 1610
{ 
# 1611
return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U); 
# 1615
} 
# 1618
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1619
_mm512_maskz_shuffle_epi8(__mmask64 __U, __m512i __A, __m512i __B) 
# 1620
{ 
# 1621
return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 1626
} 
# 1629
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1630
_mm512_min_epu16(__m512i __A, __m512i __B) 
# 1631
{ 
# 1632
return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1637
} 
# 1640
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1641
_mm512_maskz_min_epu16(__mmask32 __M, __m512i __A, __m512i __B) 
# 1642
{ 
# 1643
return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__M); 
# 1648
} 
# 1651
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1652
_mm512_mask_min_epu16(__m512i __W, __mmask32 __M, __m512i __A, __m512i 
# 1653
__B) 
# 1654
{ 
# 1655
return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__M); 
# 1659
} 
# 1662
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1663
_mm512_min_epi16(__m512i __A, __m512i __B) 
# 1664
{ 
# 1665
return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1670
} 
# 1673
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1674
_mm512_maskz_min_epi16(__mmask32 __M, __m512i __A, __m512i __B) 
# 1675
{ 
# 1676
return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__M); 
# 1681
} 
# 1684
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1685
_mm512_mask_min_epi16(__m512i __W, __mmask32 __M, __m512i __A, __m512i 
# 1686
__B) 
# 1687
{ 
# 1688
return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__M); 
# 1692
} 
# 1695
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1696
_mm512_max_epu8(__m512i __A, __m512i __B) 
# 1697
{ 
# 1698
return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 1703
} 
# 1706
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1707
_mm512_maskz_max_epu8(__mmask64 __M, __m512i __A, __m512i __B) 
# 1708
{ 
# 1709
return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__M); 
# 1714
} 
# 1717
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1718
_mm512_mask_max_epu8(__m512i __W, __mmask64 __M, __m512i __A, __m512i 
# 1719
__B) 
# 1720
{ 
# 1721
return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__M); 
# 1725
} 
# 1728
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1729
_mm512_max_epi8(__m512i __A, __m512i __B) 
# 1730
{ 
# 1731
return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 1736
} 
# 1739
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1740
_mm512_maskz_max_epi8(__mmask64 __M, __m512i __A, __m512i __B) 
# 1741
{ 
# 1742
return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__M); 
# 1747
} 
# 1750
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1751
_mm512_mask_max_epi8(__m512i __W, __mmask64 __M, __m512i __A, __m512i 
# 1752
__B) 
# 1753
{ 
# 1754
return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__M); 
# 1758
} 
# 1761
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1762
_mm512_min_epu8(__m512i __A, __m512i __B) 
# 1763
{ 
# 1764
return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 1769
} 
# 1772
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1773
_mm512_maskz_min_epu8(__mmask64 __M, __m512i __A, __m512i __B) 
# 1774
{ 
# 1775
return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__M); 
# 1780
} 
# 1783
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1784
_mm512_mask_min_epu8(__m512i __W, __mmask64 __M, __m512i __A, __m512i 
# 1785
__B) 
# 1786
{ 
# 1787
return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__M); 
# 1791
} 
# 1794
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1795
_mm512_min_epi8(__m512i __A, __m512i __B) 
# 1796
{ 
# 1797
return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 1802
} 
# 1805
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1806
_mm512_maskz_min_epi8(__mmask64 __M, __m512i __A, __m512i __B) 
# 1807
{ 
# 1808
return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__M); 
# 1813
} 
# 1816
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1817
_mm512_mask_min_epi8(__m512i __W, __mmask64 __M, __m512i __A, __m512i 
# 1818
__B) 
# 1819
{ 
# 1820
return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__M); 
# 1824
} 
# 1827
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1828
_mm512_max_epi16(__m512i __A, __m512i __B) 
# 1829
{ 
# 1830
return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1835
} 
# 1838
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1839
_mm512_maskz_max_epi16(__mmask32 __M, __m512i __A, __m512i __B) 
# 1840
{ 
# 1841
return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__M); 
# 1846
} 
# 1849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1850
_mm512_mask_max_epi16(__m512i __W, __mmask32 __M, __m512i __A, __m512i 
# 1851
__B) 
# 1852
{ 
# 1853
return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__M); 
# 1857
} 
# 1860
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1861
_mm512_max_epu16(__m512i __A, __m512i __B) 
# 1862
{ 
# 1863
return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1868
} 
# 1871
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1872
_mm512_maskz_max_epu16(__mmask32 __M, __m512i __A, __m512i __B) 
# 1873
{ 
# 1874
return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__M); 
# 1879
} 
# 1882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1883
_mm512_mask_max_epu16(__m512i __W, __mmask32 __M, __m512i __A, __m512i 
# 1884
__B) 
# 1885
{ 
# 1886
return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__M); 
# 1890
} 
# 1893
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1894
_mm512_sra_epi16(__m512i __A, __m128i __B) 
# 1895
{ 
# 1896
return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1901
} 
# 1904
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1905
_mm512_mask_sra_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i 
# 1906
__B) 
# 1907
{ 
# 1908
return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1912
} 
# 1915
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1916
_mm512_maskz_sra_epi16(__mmask32 __U, __m512i __A, __m128i __B) 
# 1917
{ 
# 1918
return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1923
} 
# 1926
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1927
_mm512_srav_epi16(__m512i __A, __m512i __B) 
# 1928
{ 
# 1929
return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1934
} 
# 1937
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1938
_mm512_mask_srav_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 1939
__B) 
# 1940
{ 
# 1941
return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1945
} 
# 1948
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1949
_mm512_maskz_srav_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 1950
{ 
# 1951
return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1956
} 
# 1959
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1960
_mm512_srlv_epi16(__m512i __A, __m512i __B) 
# 1961
{ 
# 1962
return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 1967
} 
# 1970
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1971
_mm512_mask_srlv_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 1972
__B) 
# 1973
{ 
# 1974
return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 1978
} 
# 1981
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1982
_mm512_maskz_srlv_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 1983
{ 
# 1984
return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 1989
} 
# 1992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1993
_mm512_sllv_epi16(__m512i __A, __m512i __B) 
# 1994
{ 
# 1995
return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2000
} 
# 2003
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2004
_mm512_mask_sllv_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 2005
__B) 
# 2006
{ 
# 2007
return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U); 
# 2011
} 
# 2014
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2015
_mm512_maskz_sllv_epi16(__mmask32 __U, __m512i __A, __m512i __B) 
# 2016
{ 
# 2017
return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 2022
} 
# 2025
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2026
_mm512_mask_packs_epi16(__m512i __W, __mmask64 __M, __m512i __A, __m512i 
# 2027
__B) 
# 2028
{ 
# 2029
return (__m512i)__builtin_ia32_packsswb512_mask((__v32hi)__A, (__v32hi)__B, (__v64qi)__W, (__mmask64)__M); 
# 2033
} 
# 2036
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2037
_mm512_maskz_packs_epi16(__mmask64 __M, __m512i __A, __m512i __B) 
# 2038
{ 
# 2039
return (__m512i)__builtin_ia32_packsswb512_mask((__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_qi(), __M); 
# 2044
} 
# 2047
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2048
_mm512_packus_epi16(__m512i __A, __m512i __B) 
# 2049
{ 
# 2050
return (__m512i)__builtin_ia32_packuswb512_mask((__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 2055
} 
# 2058
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2059
_mm512_mask_packus_epi16(__m512i __W, __mmask64 __M, __m512i __A, __m512i 
# 2060
__B) 
# 2061
{ 
# 2062
return (__m512i)__builtin_ia32_packuswb512_mask((__v32hi)__A, (__v32hi)__B, (__v64qi)__W, (__mmask64)__M); 
# 2066
} 
# 2069
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2070
_mm512_maskz_packus_epi16(__mmask64 __M, __m512i __A, __m512i __B) 
# 2071
{ 
# 2072
return (__m512i)__builtin_ia32_packuswb512_mask((__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_qi(), (__mmask64)__M); 
# 2077
} 
# 2080
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2081
_mm512_abs_epi8(__m512i __A) 
# 2082
{ 
# 2083
return (__m512i)__builtin_ia32_pabsb512_mask((__v64qi)__A, (__v64qi)_mm512_setzero_qi(), (__mmask64)(-1)); 
# 2087
} 
# 2090
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2091
_mm512_mask_abs_epi8(__m512i __W, __mmask64 __U, __m512i __A) 
# 2092
{ 
# 2093
return (__m512i)__builtin_ia32_pabsb512_mask((__v64qi)__A, (__v64qi)__W, (__mmask64)__U); 
# 2096
} 
# 2099
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2100
_mm512_maskz_abs_epi8(__mmask64 __U, __m512i __A) 
# 2101
{ 
# 2102
return (__m512i)__builtin_ia32_pabsb512_mask((__v64qi)__A, (__v64qi)_mm512_setzero_qi(), (__mmask64)__U); 
# 2106
} 
# 2109
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2110
_mm512_abs_epi16(__m512i __A) 
# 2111
{ 
# 2112
return (__m512i)__builtin_ia32_pabsw512_mask((__v32hi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2116
} 
# 2119
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2120
_mm512_mask_abs_epi16(__m512i __W, __mmask32 __U, __m512i __A) 
# 2121
{ 
# 2122
return (__m512i)__builtin_ia32_pabsw512_mask((__v32hi)__A, (__v32hi)__W, (__mmask32)__U); 
# 2125
} 
# 2128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2129
_mm512_maskz_abs_epi16(__mmask32 __U, __m512i __A) 
# 2130
{ 
# 2131
return (__m512i)__builtin_ia32_pabsw512_mask((__v32hi)__A, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 2135
} 
# 2138
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2139
_mm512_mask_cmpneq_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) 
# 2140
{ 
# 2141
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4, (__mmask64)__M); 
# 2144
} 
# 2147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2148
_mm512_mask_cmplt_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) 
# 2149
{ 
# 2150
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1, (__mmask64)__M); 
# 2153
} 
# 2156
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2157
_mm512_mask_cmpge_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) 
# 2158
{ 
# 2159
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5, (__mmask64)__M); 
# 2162
} 
# 2165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2166
_mm512_mask_cmple_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) 
# 2167
{ 
# 2168
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2, (__mmask64)__M); 
# 2171
} 
# 2174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2175
_mm512_mask_cmpneq_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) 
# 2176
{ 
# 2177
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4, (__mmask32)__M); 
# 2180
} 
# 2183
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2184
_mm512_mask_cmplt_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) 
# 2185
{ 
# 2186
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1, (__mmask32)__M); 
# 2189
} 
# 2192
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2193
_mm512_mask_cmpge_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) 
# 2194
{ 
# 2195
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5, (__mmask32)__M); 
# 2198
} 
# 2201
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2202
_mm512_mask_cmple_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) 
# 2203
{ 
# 2204
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2, (__mmask32)__M); 
# 2207
} 
# 2210
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2211
_mm512_mask_cmpneq_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) 
# 2212
{ 
# 2213
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4, (__mmask64)__M); 
# 2216
} 
# 2219
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2220
_mm512_mask_cmplt_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) 
# 2221
{ 
# 2222
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1, (__mmask64)__M); 
# 2225
} 
# 2228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2229
_mm512_mask_cmpge_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) 
# 2230
{ 
# 2231
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5, (__mmask64)__M); 
# 2234
} 
# 2237
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2238
_mm512_mask_cmple_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) 
# 2239
{ 
# 2240
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2, (__mmask64)__M); 
# 2243
} 
# 2246
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2247
_mm512_mask_cmpneq_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) 
# 2248
{ 
# 2249
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4, (__mmask32)__M); 
# 2252
} 
# 2255
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2256
_mm512_mask_cmplt_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) 
# 2257
{ 
# 2258
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1, (__mmask32)__M); 
# 2261
} 
# 2264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2265
_mm512_mask_cmpge_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) 
# 2266
{ 
# 2267
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5, (__mmask32)__M); 
# 2270
} 
# 2273
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2274
_mm512_mask_cmple_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) 
# 2275
{ 
# 2276
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2, (__mmask32)__M); 
# 2279
} 
# 2282
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2283
_mm512_cmpneq_epu8_mask(__m512i __X, __m512i __Y) 
# 2284
{ 
# 2285
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4, (__mmask64)(-1)); 
# 2288
} 
# 2291
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2292
_mm512_cmplt_epu8_mask(__m512i __X, __m512i __Y) 
# 2293
{ 
# 2294
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1, (__mmask64)(-1)); 
# 2297
} 
# 2300
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2301
_mm512_cmpge_epu8_mask(__m512i __X, __m512i __Y) 
# 2302
{ 
# 2303
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5, (__mmask64)(-1)); 
# 2306
} 
# 2309
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2310
_mm512_cmple_epu8_mask(__m512i __X, __m512i __Y) 
# 2311
{ 
# 2312
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2, (__mmask64)(-1)); 
# 2315
} 
# 2318
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2319
_mm512_cmpneq_epu16_mask(__m512i __X, __m512i __Y) 
# 2320
{ 
# 2321
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4, (__mmask32)(-1)); 
# 2324
} 
# 2327
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2328
_mm512_cmplt_epu16_mask(__m512i __X, __m512i __Y) 
# 2329
{ 
# 2330
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1, (__mmask32)(-1)); 
# 2333
} 
# 2336
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2337
_mm512_cmpge_epu16_mask(__m512i __X, __m512i __Y) 
# 2338
{ 
# 2339
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5, (__mmask32)(-1)); 
# 2342
} 
# 2345
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2346
_mm512_cmple_epu16_mask(__m512i __X, __m512i __Y) 
# 2347
{ 
# 2348
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2, (__mmask32)(-1)); 
# 2351
} 
# 2354
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2355
_mm512_cmpneq_epi8_mask(__m512i __X, __m512i __Y) 
# 2356
{ 
# 2357
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4, (__mmask64)(-1)); 
# 2360
} 
# 2363
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2364
_mm512_cmplt_epi8_mask(__m512i __X, __m512i __Y) 
# 2365
{ 
# 2366
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1, (__mmask64)(-1)); 
# 2369
} 
# 2372
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2373
_mm512_cmpge_epi8_mask(__m512i __X, __m512i __Y) 
# 2374
{ 
# 2375
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5, (__mmask64)(-1)); 
# 2378
} 
# 2381
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2382
_mm512_cmple_epi8_mask(__m512i __X, __m512i __Y) 
# 2383
{ 
# 2384
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2, (__mmask64)(-1)); 
# 2387
} 
# 2390
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2391
_mm512_cmpneq_epi16_mask(__m512i __X, __m512i __Y) 
# 2392
{ 
# 2393
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4, (__mmask32)(-1)); 
# 2396
} 
# 2399
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2400
_mm512_cmplt_epi16_mask(__m512i __X, __m512i __Y) 
# 2401
{ 
# 2402
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1, (__mmask32)(-1)); 
# 2405
} 
# 2408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2409
_mm512_cmpge_epi16_mask(__m512i __X, __m512i __Y) 
# 2410
{ 
# 2411
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5, (__mmask32)(-1)); 
# 2414
} 
# 2417
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2418
_mm512_cmple_epi16_mask(__m512i __X, __m512i __Y) 
# 2419
{ 
# 2420
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2, (__mmask32)(-1)); 
# 2423
} 
# 2427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2428
_mm512_alignr_epi8(__m512i __A, __m512i __B, const int __N) 
# 2429
{ 
# 2430
return (__m512i)__builtin_ia32_palignr512((__v8di)__A, (__v8di)__B, __N * 8); 
# 2432
} 
# 2435
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2436
_mm512_mask_alignr_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i 
# 2437
__B, const int __N) 
# 2438
{ 
# 2439
return (__m512i)__builtin_ia32_palignr512_mask((__v8di)__A, (__v8di)__B, __N * 8, (__v8di)__W, (__mmask64)__U); 
# 2444
} 
# 2447
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2448
_mm512_maskz_alignr_epi8(__mmask64 __U, __m512i __A, __m512i __B, const int 
# 2449
__N) 
# 2450
{ 
# 2451
return (__m512i)__builtin_ia32_palignr512_mask((__v8di)__A, (__v8di)__B, __N * 8, (__v8di)_mm512_setzero_si512(), (__mmask64)__U); 
# 2457
} 
# 2460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2461
_mm512_dbsad_epu8(__m512i __A, __m512i __B, const int __imm) 
# 2462
{ 
# 2463
return (__m512i)__builtin_ia32_dbpsadbw512_mask((__v64qi)__A, (__v64qi)__B, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2469
} 
# 2472
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2473
_mm512_mask_dbsad_epu8(__m512i __W, __mmask32 __U, __m512i __A, __m512i 
# 2474
__B, const int __imm) 
# 2475
{ 
# 2476
return (__m512i)__builtin_ia32_dbpsadbw512_mask((__v64qi)__A, (__v64qi)__B, __imm, (__v32hi)__W, (__mmask32)__U); 
# 2481
} 
# 2484
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2485
_mm512_maskz_dbsad_epu8(__mmask32 __U, __m512i __A, __m512i __B, const int 
# 2486
__imm) 
# 2487
{ 
# 2488
return (__m512i)__builtin_ia32_dbpsadbw512_mask((__v64qi)__A, (__v64qi)__B, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 2494
} 
# 2497
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2498
_mm512_srli_epi16(__m512i __A, const int __imm) 
# 2499
{ 
# 2500
return (__m512i)__builtin_ia32_psrlwi512_mask((__v32hi)__A, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2504
} 
# 2507
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2508
_mm512_mask_srli_epi16(__m512i __W, __mmask32 __U, __m512i __A, const int 
# 2509
__imm) 
# 2510
{ 
# 2511
return (__m512i)__builtin_ia32_psrlwi512_mask((__v32hi)__A, __imm, (__v32hi)__W, (__mmask32)__U); 
# 2514
} 
# 2517
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2518
_mm512_maskz_srli_epi16(__mmask32 __U, __m512i __A, const int __imm) 
# 2519
{ 
# 2520
return (__m512i)__builtin_ia32_psrlwi512_mask((__v32hi)__A, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 2524
} 
# 2527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2528
_mm512_slli_epi16(__m512i __A, const int __B) 
# 2529
{ 
# 2530
return (__m512i)__builtin_ia32_psllwi512_mask((__v32hi)__A, __B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2534
} 
# 2537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2538
_mm512_mask_slli_epi16(__m512i __W, __mmask32 __U, __m512i __A, const int 
# 2539
__B) 
# 2540
{ 
# 2541
return (__m512i)__builtin_ia32_psllwi512_mask((__v32hi)__A, __B, (__v32hi)__W, (__mmask32)__U); 
# 2544
} 
# 2547
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2548
_mm512_maskz_slli_epi16(__mmask32 __U, __m512i __A, const int __B) 
# 2549
{ 
# 2550
return (__m512i)__builtin_ia32_psllwi512_mask((__v32hi)__A, __B, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 2554
} 
# 2557
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2558
_mm512_shufflehi_epi16(__m512i __A, const int __imm) 
# 2559
{ 
# 2560
return (__m512i)__builtin_ia32_pshufhw512_mask((__v32hi)__A, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2565
} 
# 2568
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2569
_mm512_mask_shufflehi_epi16(__m512i __W, __mmask32 __U, __m512i __A, const int 
# 2570
__imm) 
# 2571
{ 
# 2572
return (__m512i)__builtin_ia32_pshufhw512_mask((__v32hi)__A, __imm, (__v32hi)__W, (__mmask32)__U); 
# 2576
} 
# 2579
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2580
_mm512_maskz_shufflehi_epi16(__mmask32 __U, __m512i __A, const int 
# 2581
__imm) 
# 2582
{ 
# 2583
return (__m512i)__builtin_ia32_pshufhw512_mask((__v32hi)__A, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 2588
} 
# 2591
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2592
_mm512_shufflelo_epi16(__m512i __A, const int __imm) 
# 2593
{ 
# 2594
return (__m512i)__builtin_ia32_pshuflw512_mask((__v32hi)__A, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2599
} 
# 2602
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2603
_mm512_mask_shufflelo_epi16(__m512i __W, __mmask32 __U, __m512i __A, const int 
# 2604
__imm) 
# 2605
{ 
# 2606
return (__m512i)__builtin_ia32_pshuflw512_mask((__v32hi)__A, __imm, (__v32hi)__W, (__mmask32)__U); 
# 2610
} 
# 2613
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2614
_mm512_maskz_shufflelo_epi16(__mmask32 __U, __m512i __A, const int 
# 2615
__imm) 
# 2616
{ 
# 2617
return (__m512i)__builtin_ia32_pshuflw512_mask((__v32hi)__A, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 2622
} 
# 2625
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2626
_mm512_srai_epi16(__m512i __A, const int __imm) 
# 2627
{ 
# 2628
return (__m512i)__builtin_ia32_psrawi512_mask((__v32hi)__A, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2632
} 
# 2635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2636
_mm512_mask_srai_epi16(__m512i __W, __mmask32 __U, __m512i __A, const int 
# 2637
__imm) 
# 2638
{ 
# 2639
return (__m512i)__builtin_ia32_psrawi512_mask((__v32hi)__A, __imm, (__v32hi)__W, (__mmask32)__U); 
# 2642
} 
# 2645
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2646
_mm512_maskz_srai_epi16(__mmask32 __U, __m512i __A, const int __imm) 
# 2647
{ 
# 2648
return (__m512i)__builtin_ia32_psrawi512_mask((__v32hi)__A, __imm, (__v32hi)_mm512_setzero_hi(), (__mmask32)__U); 
# 2652
} 
# 2655
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2656
_mm512_mask_blend_epi16(__mmask32 __U, __m512i __A, __m512i __W) 
# 2657
{ 
# 2658
return (__m512i)__builtin_ia32_blendmw_512_mask((__v32hi)__A, (__v32hi)__W, (__mmask32)__U); 
# 2661
} 
# 2664
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2665
_mm512_mask_blend_epi8(__mmask64 __U, __m512i __A, __m512i __W) 
# 2666
{ 
# 2667
return (__m512i)__builtin_ia32_blendmb_512_mask((__v64qi)__A, (__v64qi)__W, (__mmask64)__U); 
# 2670
} 
# 2673
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2674
_mm512_mask_cmp_epi16_mask(__mmask32 __U, __m512i __X, __m512i __Y, const int 
# 2675
__P) 
# 2676
{ 
# 2677
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, __P, (__mmask32)__U); 
# 2680
} 
# 2683
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2684
_mm512_cmp_epi16_mask(__m512i __X, __m512i __Y, const int __P) 
# 2685
{ 
# 2686
return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, __P, (__mmask32)(-1)); 
# 2689
} 
# 2692
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2693
_mm512_mask_cmp_epi8_mask(__mmask32 __U, __m512i __X, __m512i __Y, const int 
# 2694
__P) 
# 2695
{ 
# 2696
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, __P, (__mmask64)__U); 
# 2699
} 
# 2702
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2703
_mm512_cmp_epi8_mask(__m512i __X, __m512i __Y, const int __P) 
# 2704
{ 
# 2705
return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, __P, (__mmask64)(-1)); 
# 2708
} 
# 2711
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2712
_mm512_mask_cmp_epu16_mask(__mmask32 __U, __m512i __X, __m512i __Y, const int 
# 2713
__P) 
# 2714
{ 
# 2715
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, __P, (__mmask32)__U); 
# 2718
} 
# 2721
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2722
_mm512_cmp_epu16_mask(__m512i __X, __m512i __Y, const int __P) 
# 2723
{ 
# 2724
return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, __P, (__mmask32)(-1)); 
# 2727
} 
# 2730
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2731
_mm512_mask_cmp_epu8_mask(__mmask32 __U, __m512i __X, __m512i __Y, const int 
# 2732
__P) 
# 2733
{ 
# 2734
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, __P, (__mmask64)__U); 
# 2737
} 
# 2740
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask64 
# 2741
_mm512_cmp_epu8_mask(__m512i __X, __m512i __Y, const int __P) 
# 2742
{ 
# 2743
return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, __P, (__mmask64)(-1)); 
# 2746
} 
# 2749
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2750
_mm512_packs_epi32(__m512i __A, __m512i __B) 
# 2751
{ 
# 2752
return (__m512i)__builtin_ia32_packssdw512_mask((__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2757
} 
# 2760
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2761
_mm512_maskz_packs_epi32(__mmask32 __M, __m512i __A, __m512i __B) 
# 2762
{ 
# 2763
return (__m512i)__builtin_ia32_packssdw512_mask((__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_hi(), __M); 
# 2768
} 
# 2771
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2772
_mm512_mask_packs_epi32(__m512i __W, __mmask32 __M, __m512i __A, __m512i 
# 2773
__B) 
# 2774
{ 
# 2775
return (__m512i)__builtin_ia32_packssdw512_mask((__v16si)__A, (__v16si)__B, (__v32hi)__W, __M); 
# 2779
} 
# 2782
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2783
_mm512_packus_epi32(__m512i __A, __m512i __B) 
# 2784
{ 
# 2785
return (__m512i)__builtin_ia32_packusdw512_mask((__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_hi(), (__mmask32)(-1)); 
# 2790
} 
# 2793
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2794
_mm512_maskz_packus_epi32(__mmask32 __M, __m512i __A, __m512i __B) 
# 2795
{ 
# 2796
return (__m512i)__builtin_ia32_packusdw512_mask((__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_hi(), __M); 
# 2801
} 
# 2804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2805
_mm512_mask_packus_epi32(__m512i __W, __mmask32 __M, __m512i __A, __m512i 
# 2806
__B) 
# 2807
{ 
# 2808
return (__m512i)__builtin_ia32_packusdw512_mask((__v16si)__A, (__v16si)__B, (__v32hi)__W, __M); 
# 2812
} 
# 2815
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2816
_mm512_bslli_epi128(__m512i __A, const int __N) 
# 2817
{ 
# 2818
return (__m512i)__builtin_ia32_pslldq512(__A, __N * 8); 
# 2819
} 
# 2822
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 2823
_mm512_bsrli_epi128(__m512i __A, const int __N) 
# 2824
{ 
# 2825
return (__m512i)__builtin_ia32_psrldq512(__A, __N * 8); 
# 2826
} 
# 2992
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512dqintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512dq" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 39
_mm512_broadcast_f64x2(__m128d __A) 
# 40
{ 
# 41
return (__m512d)__builtin_ia32_broadcastf64x2_512_mask((__v2df)__A, _mm512_undefined_pd(), (__mmask8)(-1)); 
# 46
} 
# 49
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 50
_mm512_mask_broadcast_f64x2(__m512d __O, __mmask8 __M, __m128d __A) 
# 51
{ 
# 52
return (__m512d)__builtin_ia32_broadcastf64x2_512_mask((__v2df)__A, (__v8df)__O, __M); 
# 56
} 
# 59
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 60
_mm512_maskz_broadcast_f64x2(__mmask8 __M, __m128d __A) 
# 61
{ 
# 62
return (__m512d)__builtin_ia32_broadcastf64x2_512_mask((__v2df)__A, (__v8df)_mm512_setzero_ps(), __M); 
# 67
} 
# 70
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 71
_mm512_broadcast_i64x2(__m128i __A) 
# 72
{ 
# 73
return (__m512i)__builtin_ia32_broadcasti64x2_512_mask((__v2di)__A, _mm512_undefined_si512(), (__mmask8)(-1)); 
# 78
} 
# 81
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 82
_mm512_mask_broadcast_i64x2(__m512i __O, __mmask8 __M, __m128i __A) 
# 83
{ 
# 84
return (__m512i)__builtin_ia32_broadcasti64x2_512_mask((__v2di)__A, (__v8di)__O, __M); 
# 88
} 
# 91
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 92
_mm512_maskz_broadcast_i64x2(__mmask8 __M, __m128i __A) 
# 93
{ 
# 94
return (__m512i)__builtin_ia32_broadcasti64x2_512_mask((__v2di)__A, (__v8di)_mm512_setzero_si512(), __M); 
# 99
} 
# 102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 103
_mm512_broadcast_f32x2(__m128 __A) 
# 104
{ 
# 105
return (__m512)__builtin_ia32_broadcastf32x2_512_mask((__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)(-1)); 
# 109
} 
# 112
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 113
_mm512_mask_broadcast_f32x2(__m512 __O, __mmask16 __M, __m128 __A) 
# 114
{ 
# 115
return (__m512)__builtin_ia32_broadcastf32x2_512_mask((__v4sf)__A, (__v16sf)__O, __M); 
# 118
} 
# 121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 122
_mm512_maskz_broadcast_f32x2(__mmask16 __M, __m128 __A) 
# 123
{ 
# 124
return (__m512)__builtin_ia32_broadcastf32x2_512_mask((__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M); 
# 128
} 
# 131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 132
_mm512_broadcast_i32x2(__m128i __A) 
# 133
{ 
# 134
return (__m512i)__builtin_ia32_broadcasti32x2_512_mask((__v4si)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 139
} 
# 142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 143
_mm512_mask_broadcast_i32x2(__m512i __O, __mmask16 __M, __m128i __A) 
# 144
{ 
# 145
return (__m512i)__builtin_ia32_broadcasti32x2_512_mask((__v4si)__A, (__v16si)__O, __M); 
# 149
} 
# 152
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 153
_mm512_maskz_broadcast_i32x2(__mmask16 __M, __m128i __A) 
# 154
{ 
# 155
return (__m512i)__builtin_ia32_broadcasti32x2_512_mask((__v4si)__A, (__v16si)_mm512_setzero_si512(), __M); 
# 160
} 
# 163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 164
_mm512_broadcast_f32x8(__m256 __A) 
# 165
{ 
# 166
return (__m512)__builtin_ia32_broadcastf32x8_512_mask((__v8sf)__A, _mm512_undefined_ps(), (__mmask16)(-1)); 
# 170
} 
# 173
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 174
_mm512_mask_broadcast_f32x8(__m512 __O, __mmask16 __M, __m256 __A) 
# 175
{ 
# 176
return (__m512)__builtin_ia32_broadcastf32x8_512_mask((__v8sf)__A, (__v16sf)__O, __M); 
# 179
} 
# 182
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 183
_mm512_maskz_broadcast_f32x8(__mmask16 __M, __m256 __A) 
# 184
{ 
# 185
return (__m512)__builtin_ia32_broadcastf32x8_512_mask((__v8sf)__A, (__v16sf)_mm512_setzero_ps(), __M); 
# 189
} 
# 192
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 193
_mm512_broadcast_i32x8(__m256i __A) 
# 194
{ 
# 195
return (__m512i)__builtin_ia32_broadcasti32x8_512_mask((__v8si)__A, (__v16si)_mm512_undefined_si512(), (__mmask16)(-1)); 
# 200
} 
# 203
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 204
_mm512_mask_broadcast_i32x8(__m512i __O, __mmask16 __M, __m256i __A) 
# 205
{ 
# 206
return (__m512i)__builtin_ia32_broadcasti32x8_512_mask((__v8si)__A, (__v16si)__O, __M); 
# 210
} 
# 213
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 214
_mm512_maskz_broadcast_i32x8(__mmask16 __M, __m256i __A) 
# 215
{ 
# 216
return (__m512i)__builtin_ia32_broadcasti32x8_512_mask((__v8si)__A, (__v16si)_mm512_setzero_si512(), __M); 
# 221
} 
# 224
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 225
_mm512_mullo_epi64(__m512i __A, __m512i __B) 
# 226
{ 
# 227
return (__m512i)(((__v8du)__A) * ((__v8du)__B)); 
# 228
} 
# 231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 232
_mm512_mask_mullo_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i 
# 233
__B) 
# 234
{ 
# 235
return (__m512i)__builtin_ia32_pmullq512_mask((__v8di)__A, (__v8di)__B, (__v8di)__W, (__mmask8)__U); 
# 239
} 
# 242
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 243
_mm512_maskz_mullo_epi64(__mmask8 __U, __m512i __A, __m512i __B) 
# 244
{ 
# 245
return (__m512i)__builtin_ia32_pmullq512_mask((__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 250
} 
# 253
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 254
_mm512_xor_pd(__m512d __A, __m512d __B) 
# 255
{ 
# 256
return (__m512d)__builtin_ia32_xorpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1)); 
# 261
} 
# 264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 265
_mm512_mask_xor_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 266
__B) 
# 267
{ 
# 268
return (__m512d)__builtin_ia32_xorpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U); 
# 272
} 
# 275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 276
_mm512_maskz_xor_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 277
{ 
# 278
return (__m512d)__builtin_ia32_xorpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 283
} 
# 286
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 287
_mm512_xor_ps(__m512 __A, __m512 __B) 
# 288
{ 
# 289
return (__m512)__builtin_ia32_xorps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)(-1)); 
# 294
} 
# 297
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 298
_mm512_mask_xor_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 299
{ 
# 300
return (__m512)__builtin_ia32_xorps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U); 
# 304
} 
# 307
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 308
_mm512_maskz_xor_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 309
{ 
# 310
return (__m512)__builtin_ia32_xorps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 315
} 
# 318
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 319
_mm512_or_pd(__m512d __A, __m512d __B) 
# 320
{ 
# 321
return (__m512d)__builtin_ia32_orpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1)); 
# 326
} 
# 329
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 330
_mm512_mask_or_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) 
# 331
{ 
# 332
return (__m512d)__builtin_ia32_orpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U); 
# 336
} 
# 339
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 340
_mm512_maskz_or_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 341
{ 
# 342
return (__m512d)__builtin_ia32_orpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 347
} 
# 350
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 351
_mm512_or_ps(__m512 __A, __m512 __B) 
# 352
{ 
# 353
return (__m512)__builtin_ia32_orps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)(-1)); 
# 358
} 
# 361
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 362
_mm512_mask_or_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 363
{ 
# 364
return (__m512)__builtin_ia32_orps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U); 
# 368
} 
# 371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 372
_mm512_maskz_or_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 373
{ 
# 374
return (__m512)__builtin_ia32_orps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 379
} 
# 382
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 383
_mm512_and_pd(__m512d __A, __m512d __B) 
# 384
{ 
# 385
return (__m512d)__builtin_ia32_andpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1)); 
# 390
} 
# 393
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 394
_mm512_mask_and_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 395
__B) 
# 396
{ 
# 397
return (__m512d)__builtin_ia32_andpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U); 
# 401
} 
# 404
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 405
_mm512_maskz_and_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 406
{ 
# 407
return (__m512d)__builtin_ia32_andpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 412
} 
# 415
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 416
_mm512_and_ps(__m512 __A, __m512 __B) 
# 417
{ 
# 418
return (__m512)__builtin_ia32_andps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)(-1)); 
# 423
} 
# 426
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 427
_mm512_mask_and_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) 
# 428
{ 
# 429
return (__m512)__builtin_ia32_andps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U); 
# 433
} 
# 436
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 437
_mm512_maskz_and_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 438
{ 
# 439
return (__m512)__builtin_ia32_andps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 444
} 
# 447
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 448
_mm512_andnot_pd(__m512d __A, __m512d __B) 
# 449
{ 
# 450
return (__m512d)__builtin_ia32_andnpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1)); 
# 455
} 
# 458
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 459
_mm512_mask_andnot_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d 
# 460
__B) 
# 461
{ 
# 462
return (__m512d)__builtin_ia32_andnpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U); 
# 466
} 
# 469
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 470
_mm512_maskz_andnot_pd(__mmask8 __U, __m512d __A, __m512d __B) 
# 471
{ 
# 472
return (__m512d)__builtin_ia32_andnpd512_mask((__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 477
} 
# 480
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 481
_mm512_andnot_ps(__m512 __A, __m512 __B) 
# 482
{ 
# 483
return (__m512)__builtin_ia32_andnps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)(-1)); 
# 488
} 
# 491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 492
_mm512_mask_andnot_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 
# 493
__B) 
# 494
{ 
# 495
return (__m512)__builtin_ia32_andnps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U); 
# 499
} 
# 502
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 503
_mm512_maskz_andnot_ps(__mmask16 __U, __m512 __A, __m512 __B) 
# 504
{ 
# 505
return (__m512)__builtin_ia32_andnps512_mask((__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 510
} 
# 513
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 514
_mm512_movepi32_mask(__m512i __A) 
# 515
{ 
# 516
return (__mmask16)__builtin_ia32_cvtd2mask512((__v16si)__A); 
# 517
} 
# 520
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 521
_mm512_movepi64_mask(__m512i __A) 
# 522
{ 
# 523
return (__mmask8)__builtin_ia32_cvtq2mask512((__v8di)__A); 
# 524
} 
# 527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 528
_mm512_movm_epi32(__mmask16 __A) 
# 529
{ 
# 530
return (__m512i)__builtin_ia32_cvtmask2d512(__A); 
# 531
} 
# 534
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 535
_mm512_movm_epi64(__mmask8 __A) 
# 536
{ 
# 537
return (__m512i)__builtin_ia32_cvtmask2q512(__A); 
# 538
} 
# 541
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 542
_mm512_cvttpd_epi64(__m512d __A) 
# 543
{ 
# 544
return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), 4); 
# 549
} 
# 552
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 553
_mm512_mask_cvttpd_epi64(__m512i __W, __mmask8 __U, __m512d __A) 
# 554
{ 
# 555
return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)__W, (__mmask8)__U, 4); 
# 559
} 
# 562
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 563
_mm512_maskz_cvttpd_epi64(__mmask8 __U, __m512d __A) 
# 564
{ 
# 565
return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 4); 
# 570
} 
# 573
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 574
_mm512_cvttpd_epu64(__m512d __A) 
# 575
{ 
# 576
return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), 4); 
# 581
} 
# 584
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 585
_mm512_mask_cvttpd_epu64(__m512i __W, __mmask8 __U, __m512d __A) 
# 586
{ 
# 587
return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)__W, (__mmask8)__U, 4); 
# 591
} 
# 594
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 595
_mm512_maskz_cvttpd_epu64(__mmask8 __U, __m512d __A) 
# 596
{ 
# 597
return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 4); 
# 602
} 
# 605
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 606
_mm512_cvttps_epi64(__m256 __A) 
# 607
{ 
# 608
return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), 4); 
# 613
} 
# 616
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 617
_mm512_mask_cvttps_epi64(__m512i __W, __mmask8 __U, __m256 __A) 
# 618
{ 
# 619
return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)__W, (__mmask8)__U, 4); 
# 623
} 
# 626
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 627
_mm512_maskz_cvttps_epi64(__mmask8 __U, __m256 __A) 
# 628
{ 
# 629
return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 4); 
# 634
} 
# 637
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 638
_mm512_cvttps_epu64(__m256 __A) 
# 639
{ 
# 640
return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), 4); 
# 645
} 
# 648
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 649
_mm512_mask_cvttps_epu64(__m512i __W, __mmask8 __U, __m256 __A) 
# 650
{ 
# 651
return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)__W, (__mmask8)__U, 4); 
# 655
} 
# 658
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 659
_mm512_maskz_cvttps_epu64(__mmask8 __U, __m256 __A) 
# 660
{ 
# 661
return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 4); 
# 666
} 
# 669
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 670
_mm512_cvtpd_epi64(__m512d __A) 
# 671
{ 
# 672
return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), 4); 
# 677
} 
# 680
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 681
_mm512_mask_cvtpd_epi64(__m512i __W, __mmask8 __U, __m512d __A) 
# 682
{ 
# 683
return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)__W, (__mmask8)__U, 4); 
# 687
} 
# 690
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 691
_mm512_maskz_cvtpd_epi64(__mmask8 __U, __m512d __A) 
# 692
{ 
# 693
return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 4); 
# 698
} 
# 701
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 702
_mm512_cvtpd_epu64(__m512d __A) 
# 703
{ 
# 704
return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), 4); 
# 709
} 
# 712
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 713
_mm512_mask_cvtpd_epu64(__m512i __W, __mmask8 __U, __m512d __A) 
# 714
{ 
# 715
return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)__W, (__mmask8)__U, 4); 
# 719
} 
# 722
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 723
_mm512_maskz_cvtpd_epu64(__mmask8 __U, __m512d __A) 
# 724
{ 
# 725
return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 4); 
# 730
} 
# 733
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 734
_mm512_cvtps_epi64(__m256 __A) 
# 735
{ 
# 736
return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), 4); 
# 741
} 
# 744
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 745
_mm512_mask_cvtps_epi64(__m512i __W, __mmask8 __U, __m256 __A) 
# 746
{ 
# 747
return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)__W, (__mmask8)__U, 4); 
# 751
} 
# 754
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 755
_mm512_maskz_cvtps_epi64(__mmask8 __U, __m256 __A) 
# 756
{ 
# 757
return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 4); 
# 762
} 
# 765
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 766
_mm512_cvtps_epu64(__m256 __A) 
# 767
{ 
# 768
return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), 4); 
# 773
} 
# 776
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 777
_mm512_mask_cvtps_epu64(__m512i __W, __mmask8 __U, __m256 __A) 
# 778
{ 
# 779
return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)__W, (__mmask8)__U, 4); 
# 783
} 
# 786
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 787
_mm512_maskz_cvtps_epu64(__mmask8 __U, __m256 __A) 
# 788
{ 
# 789
return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 4); 
# 794
} 
# 797
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 798
_mm512_cvtepi64_ps(__m512i __A) 
# 799
{ 
# 800
return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1), 4); 
# 805
} 
# 808
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 809
_mm512_mask_cvtepi64_ps(__m256 __W, __mmask8 __U, __m512i __A) 
# 810
{ 
# 811
return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)__W, (__mmask8)__U, 4); 
# 815
} 
# 818
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 819
_mm512_maskz_cvtepi64_ps(__mmask8 __U, __m512i __A) 
# 820
{ 
# 821
return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 4); 
# 826
} 
# 829
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 830
_mm512_cvtepu64_ps(__m512i __A) 
# 831
{ 
# 832
return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1), 4); 
# 837
} 
# 840
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 841
_mm512_mask_cvtepu64_ps(__m256 __W, __mmask8 __U, __m512i __A) 
# 842
{ 
# 843
return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)__W, (__mmask8)__U, 4); 
# 847
} 
# 850
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 851
_mm512_maskz_cvtepu64_ps(__mmask8 __U, __m512i __A) 
# 852
{ 
# 853
return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 4); 
# 858
} 
# 861
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 862
_mm512_cvtepi64_pd(__m512i __A) 
# 863
{ 
# 864
return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1), 4); 
# 869
} 
# 872
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 873
_mm512_mask_cvtepi64_pd(__m512d __W, __mmask8 __U, __m512i __A) 
# 874
{ 
# 875
return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)__W, (__mmask8)__U, 4); 
# 879
} 
# 882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 883
_mm512_maskz_cvtepi64_pd(__mmask8 __U, __m512i __A) 
# 884
{ 
# 885
return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 890
} 
# 893
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 894
_mm512_cvtepu64_pd(__m512i __A) 
# 895
{ 
# 896
return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1), 4); 
# 901
} 
# 904
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 905
_mm512_mask_cvtepu64_pd(__m512d __W, __mmask8 __U, __m512i __A) 
# 906
{ 
# 907
return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)__W, (__mmask8)__U, 4); 
# 911
} 
# 914
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 915
_mm512_maskz_cvtepu64_pd(__mmask8 __U, __m512i __A) 
# 916
{ 
# 917
return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 922
} 
# 926
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 927
_mm512_range_pd(__m512d __A, __m512d __B, int __C) 
# 928
{ 
# 929
return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1), 4); 
# 935
} 
# 938
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 939
_mm512_mask_range_pd(__m512d __W, __mmask8 __U, __m512d 
# 940
__A, __m512d __B, int __C) 
# 941
{ 
# 942
return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C, (__v8df)__W, (__mmask8)__U, 4); 
# 947
} 
# 950
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 951
_mm512_maskz_range_pd(__mmask8 __U, __m512d __A, __m512d __B, int __C) 
# 952
{ 
# 953
return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 4); 
# 959
} 
# 962
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 963
_mm512_range_ps(__m512 __A, __m512 __B, int __C) 
# 964
{ 
# 965
return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C, (__v16sf)_mm512_setzero_ps(), (__mmask16)(-1), 4); 
# 971
} 
# 974
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 975
_mm512_mask_range_ps(__m512 __W, __mmask16 __U, __m512 
# 976
__A, __m512 __B, int __C) 
# 977
{ 
# 978
return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C, (__v16sf)__W, (__mmask16)__U, 4); 
# 983
} 
# 986
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 987
_mm512_maskz_range_ps(__mmask16 __U, __m512 __A, __m512 __B, int __C) 
# 988
{ 
# 989
return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 4); 
# 995
} 
# 998
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 999
_mm_reduce_sd(__m128d __A, __m128d __B, int __C) 
# 1000
{ 
# 1001
return (__m128d)__builtin_ia32_reducesd((__v2df)__A, (__v2df)__B, __C); 
# 1003
} 
# 1006
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1007
_mm_reduce_ss(__m128 __A, __m128 __B, int __C) 
# 1008
{ 
# 1009
return (__m128)__builtin_ia32_reducess((__v4sf)__A, (__v4sf)__B, __C); 
# 1011
} 
# 1014
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1015
_mm_range_sd(__m128d __A, __m128d __B, int __C) 
# 1016
{ 
# 1017
return (__m128d)__builtin_ia32_rangesd128_round((__v2df)__A, (__v2df)__B, __C, 4); 
# 1020
} 
# 1024
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1025
_mm_range_ss(__m128 __A, __m128 __B, int __C) 
# 1026
{ 
# 1027
return (__m128)__builtin_ia32_rangess128_round((__v4sf)__A, (__v4sf)__B, __C, 4); 
# 1030
} 
# 1033
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1034
_mm_range_round_sd(__m128d __A, __m128d __B, int __C, const int __R) 
# 1035
{ 
# 1036
return (__m128d)__builtin_ia32_rangesd128_round((__v2df)__A, (__v2df)__B, __C, __R); 
# 1039
} 
# 1042
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1043
_mm_range_round_ss(__m128 __A, __m128 __B, int __C, const int __R) 
# 1044
{ 
# 1045
return (__m128)__builtin_ia32_rangess128_round((__v4sf)__A, (__v4sf)__B, __C, __R); 
# 1048
} 
# 1051
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1052
_mm_fpclass_ss_mask(__m128 __A, const int __imm) 
# 1053
{ 
# 1054
return (__mmask8)__builtin_ia32_fpclassss((__v4sf)__A, __imm); 
# 1055
} 
# 1058
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1059
_mm_fpclass_sd_mask(__m128d __A, const int __imm) 
# 1060
{ 
# 1061
return (__mmask8)__builtin_ia32_fpclasssd((__v2df)__A, __imm); 
# 1062
} 
# 1065
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1066
_mm512_cvtt_roundpd_epi64(__m512d __A, const int __R) 
# 1067
{ 
# 1068
return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), __R); 
# 1073
} 
# 1076
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1077
_mm512_mask_cvtt_roundpd_epi64(__m512i __W, __mmask8 __U, __m512d __A, const int 
# 1078
__R) 
# 1079
{ 
# 1080
return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)__W, (__mmask8)__U, __R); 
# 1084
} 
# 1087
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1088
_mm512_maskz_cvtt_roundpd_epi64(__mmask8 __U, __m512d __A, const int 
# 1089
__R) 
# 1090
{ 
# 1091
return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R); 
# 1096
} 
# 1099
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1100
_mm512_cvtt_roundpd_epu64(__m512d __A, const int __R) 
# 1101
{ 
# 1102
return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), __R); 
# 1107
} 
# 1110
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1111
_mm512_mask_cvtt_roundpd_epu64(__m512i __W, __mmask8 __U, __m512d __A, const int 
# 1112
__R) 
# 1113
{ 
# 1114
return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)__W, (__mmask8)__U, __R); 
# 1118
} 
# 1121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1122
_mm512_maskz_cvtt_roundpd_epu64(__mmask8 __U, __m512d __A, const int 
# 1123
__R) 
# 1124
{ 
# 1125
return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R); 
# 1130
} 
# 1133
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1134
_mm512_cvtt_roundps_epi64(__m256 __A, const int __R) 
# 1135
{ 
# 1136
return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), __R); 
# 1141
} 
# 1144
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1145
_mm512_mask_cvtt_roundps_epi64(__m512i __W, __mmask8 __U, __m256 __A, const int 
# 1146
__R) 
# 1147
{ 
# 1148
return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)__W, (__mmask8)__U, __R); 
# 1152
} 
# 1155
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1156
_mm512_maskz_cvtt_roundps_epi64(__mmask8 __U, __m256 __A, const int 
# 1157
__R) 
# 1158
{ 
# 1159
return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R); 
# 1164
} 
# 1167
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1168
_mm512_cvtt_roundps_epu64(__m256 __A, const int __R) 
# 1169
{ 
# 1170
return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), __R); 
# 1175
} 
# 1178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1179
_mm512_mask_cvtt_roundps_epu64(__m512i __W, __mmask8 __U, __m256 __A, const int 
# 1180
__R) 
# 1181
{ 
# 1182
return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)__W, (__mmask8)__U, __R); 
# 1186
} 
# 1189
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1190
_mm512_maskz_cvtt_roundps_epu64(__mmask8 __U, __m256 __A, const int 
# 1191
__R) 
# 1192
{ 
# 1193
return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R); 
# 1198
} 
# 1201
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1202
_mm512_cvt_roundpd_epi64(__m512d __A, const int __R) 
# 1203
{ 
# 1204
return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), __R); 
# 1209
} 
# 1212
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1213
_mm512_mask_cvt_roundpd_epi64(__m512i __W, __mmask8 __U, __m512d __A, const int 
# 1214
__R) 
# 1215
{ 
# 1216
return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)__W, (__mmask8)__U, __R); 
# 1220
} 
# 1223
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1224
_mm512_maskz_cvt_roundpd_epi64(__mmask8 __U, __m512d __A, const int 
# 1225
__R) 
# 1226
{ 
# 1227
return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R); 
# 1232
} 
# 1235
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1236
_mm512_cvt_roundpd_epu64(__m512d __A, const int __R) 
# 1237
{ 
# 1238
return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), __R); 
# 1243
} 
# 1246
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1247
_mm512_mask_cvt_roundpd_epu64(__m512i __W, __mmask8 __U, __m512d __A, const int 
# 1248
__R) 
# 1249
{ 
# 1250
return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)__W, (__mmask8)__U, __R); 
# 1254
} 
# 1257
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1258
_mm512_maskz_cvt_roundpd_epu64(__mmask8 __U, __m512d __A, const int 
# 1259
__R) 
# 1260
{ 
# 1261
return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R); 
# 1266
} 
# 1269
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1270
_mm512_cvt_roundps_epi64(__m256 __A, const int __R) 
# 1271
{ 
# 1272
return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), __R); 
# 1277
} 
# 1280
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1281
_mm512_mask_cvt_roundps_epi64(__m512i __W, __mmask8 __U, __m256 __A, const int 
# 1282
__R) 
# 1283
{ 
# 1284
return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)__W, (__mmask8)__U, __R); 
# 1288
} 
# 1291
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1292
_mm512_maskz_cvt_roundps_epi64(__mmask8 __U, __m256 __A, const int 
# 1293
__R) 
# 1294
{ 
# 1295
return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R); 
# 1300
} 
# 1303
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1304
_mm512_cvt_roundps_epu64(__m256 __A, const int __R) 
# 1305
{ 
# 1306
return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1), __R); 
# 1311
} 
# 1314
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1315
_mm512_mask_cvt_roundps_epu64(__m512i __W, __mmask8 __U, __m256 __A, const int 
# 1316
__R) 
# 1317
{ 
# 1318
return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)__W, (__mmask8)__U, __R); 
# 1322
} 
# 1325
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1326
_mm512_maskz_cvt_roundps_epu64(__mmask8 __U, __m256 __A, const int 
# 1327
__R) 
# 1328
{ 
# 1329
return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R); 
# 1334
} 
# 1337
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1338
_mm512_cvt_roundepi64_ps(__m512i __A, const int __R) 
# 1339
{ 
# 1340
return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1), __R); 
# 1345
} 
# 1348
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1349
_mm512_mask_cvt_roundepi64_ps(__m256 __W, __mmask8 __U, __m512i __A, const int 
# 1350
__R) 
# 1351
{ 
# 1352
return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)__W, (__mmask8)__U, __R); 
# 1356
} 
# 1359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1360
_mm512_maskz_cvt_roundepi64_ps(__mmask8 __U, __m512i __A, const int 
# 1361
__R) 
# 1362
{ 
# 1363
return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, __R); 
# 1368
} 
# 1371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1372
_mm512_cvt_roundepu64_ps(__m512i __A, const int __R) 
# 1373
{ 
# 1374
return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1), __R); 
# 1379
} 
# 1382
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1383
_mm512_mask_cvt_roundepu64_ps(__m256 __W, __mmask8 __U, __m512i __A, const int 
# 1384
__R) 
# 1385
{ 
# 1386
return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)__W, (__mmask8)__U, __R); 
# 1390
} 
# 1393
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1394
_mm512_maskz_cvt_roundepu64_ps(__mmask8 __U, __m512i __A, const int 
# 1395
__R) 
# 1396
{ 
# 1397
return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, __R); 
# 1402
} 
# 1405
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1406
_mm512_cvt_roundepi64_pd(__m512i __A, const int __R) 
# 1407
{ 
# 1408
return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1), __R); 
# 1413
} 
# 1416
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1417
_mm512_mask_cvt_roundepi64_pd(__m512d __W, __mmask8 __U, __m512i __A, const int 
# 1418
__R) 
# 1419
{ 
# 1420
return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)__W, (__mmask8)__U, __R); 
# 1424
} 
# 1427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1428
_mm512_maskz_cvt_roundepi64_pd(__mmask8 __U, __m512i __A, const int 
# 1429
__R) 
# 1430
{ 
# 1431
return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 1436
} 
# 1439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1440
_mm512_cvt_roundepu64_pd(__m512i __A, const int __R) 
# 1441
{ 
# 1442
return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1), __R); 
# 1447
} 
# 1450
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1451
_mm512_mask_cvt_roundepu64_pd(__m512d __W, __mmask8 __U, __m512i __A, const int 
# 1452
__R) 
# 1453
{ 
# 1454
return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)__W, (__mmask8)__U, __R); 
# 1458
} 
# 1461
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1462
_mm512_maskz_cvt_roundepu64_pd(__mmask8 __U, __m512i __A, const int 
# 1463
__R) 
# 1464
{ 
# 1465
return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 1470
} 
# 1473
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1474
_mm512_reduce_pd(__m512d __A, int __B) 
# 1475
{ 
# 1476
return (__m512d)__builtin_ia32_reducepd512_mask((__v8df)__A, __B, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1)); 
# 1480
} 
# 1483
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1484
_mm512_mask_reduce_pd(__m512d __W, __mmask8 __U, __m512d __A, int __B) 
# 1485
{ 
# 1486
return (__m512d)__builtin_ia32_reducepd512_mask((__v8df)__A, __B, (__v8df)__W, (__mmask8)__U); 
# 1489
} 
# 1492
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1493
_mm512_maskz_reduce_pd(__mmask8 __U, __m512d __A, int __B) 
# 1494
{ 
# 1495
return (__m512d)__builtin_ia32_reducepd512_mask((__v8df)__A, __B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 1499
} 
# 1502
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1503
_mm512_reduce_ps(__m512 __A, int __B) 
# 1504
{ 
# 1505
return (__m512)__builtin_ia32_reduceps512_mask((__v16sf)__A, __B, (__v16sf)_mm512_setzero_ps(), (__mmask16)(-1)); 
# 1509
} 
# 1512
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1513
_mm512_mask_reduce_ps(__m512 __W, __mmask16 __U, __m512 __A, int __B) 
# 1514
{ 
# 1515
return (__m512)__builtin_ia32_reduceps512_mask((__v16sf)__A, __B, (__v16sf)__W, (__mmask16)__U); 
# 1518
} 
# 1521
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1522
_mm512_maskz_reduce_ps(__mmask16 __U, __m512 __A, int __B) 
# 1523
{ 
# 1524
return (__m512)__builtin_ia32_reduceps512_mask((__v16sf)__A, __B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 1528
} 
# 1531
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1532
_mm512_extractf32x8_ps(__m512 __A, const int __imm) 
# 1533
{ 
# 1534
return (__m256)__builtin_ia32_extractf32x8_mask((__v16sf)__A, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 1539
} 
# 1542
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1543
_mm512_mask_extractf32x8_ps(__m256 __W, __mmask8 __U, __m512 __A, const int 
# 1544
__imm) 
# 1545
{ 
# 1546
return (__m256)__builtin_ia32_extractf32x8_mask((__v16sf)__A, __imm, (__v8sf)__W, (__mmask8)__U); 
# 1550
} 
# 1553
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1554
_mm512_maskz_extractf32x8_ps(__mmask8 __U, __m512 __A, const int 
# 1555
__imm) 
# 1556
{ 
# 1557
return (__m256)__builtin_ia32_extractf32x8_mask((__v16sf)__A, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 1562
} 
# 1565
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1566
_mm512_extractf64x2_pd(__m512d __A, const int __imm) 
# 1567
{ 
# 1568
return (__m128d)__builtin_ia32_extractf64x2_512_mask((__v8df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 1574
} 
# 1577
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1578
_mm512_mask_extractf64x2_pd(__m128d __W, __mmask8 __U, __m512d __A, const int 
# 1579
__imm) 
# 1580
{ 
# 1581
return (__m128d)__builtin_ia32_extractf64x2_512_mask((__v8df)__A, __imm, (__v2df)__W, (__mmask8)__U); 
# 1586
} 
# 1589
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1590
_mm512_maskz_extractf64x2_pd(__mmask8 __U, __m512d __A, const int 
# 1591
__imm) 
# 1592
{ 
# 1593
return (__m128d)__builtin_ia32_extractf64x2_512_mask((__v8df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1599
} 
# 1602
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1603
_mm512_extracti32x8_epi32(__m512i __A, const int __imm) 
# 1604
{ 
# 1605
return (__m256i)__builtin_ia32_extracti32x8_mask((__v16si)__A, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 1610
} 
# 1613
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1614
_mm512_mask_extracti32x8_epi32(__m256i __W, __mmask8 __U, __m512i __A, const int 
# 1615
__imm) 
# 1616
{ 
# 1617
return (__m256i)__builtin_ia32_extracti32x8_mask((__v16si)__A, __imm, (__v8si)__W, (__mmask8)__U); 
# 1621
} 
# 1624
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1625
_mm512_maskz_extracti32x8_epi32(__mmask8 __U, __m512i __A, const int 
# 1626
__imm) 
# 1627
{ 
# 1628
return (__m256i)__builtin_ia32_extracti32x8_mask((__v16si)__A, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 1633
} 
# 1636
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1637
_mm512_extracti64x2_epi64(__m512i __A, const int __imm) 
# 1638
{ 
# 1639
return (__m128i)__builtin_ia32_extracti64x2_512_mask((__v8di)__A, __imm, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 1645
} 
# 1648
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1649
_mm512_mask_extracti64x2_epi64(__m128i __W, __mmask8 __U, __m512i __A, const int 
# 1650
__imm) 
# 1651
{ 
# 1652
return (__m128i)__builtin_ia32_extracti64x2_512_mask((__v8di)__A, __imm, (__v2di)__W, (__mmask8)__U); 
# 1657
} 
# 1660
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1661
_mm512_maskz_extracti64x2_epi64(__mmask8 __U, __m512i __A, const int 
# 1662
__imm) 
# 1663
{ 
# 1664
return (__m128i)__builtin_ia32_extracti64x2_512_mask((__v8di)__A, __imm, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 1670
} 
# 1673
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1674
_mm512_range_round_pd(__m512d __A, __m512d __B, int __C, const int 
# 1675
__R) 
# 1676
{ 
# 1677
return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1), __R); 
# 1683
} 
# 1686
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1687
_mm512_mask_range_round_pd(__m512d __W, __mmask8 __U, __m512d 
# 1688
__A, __m512d __B, int __C, const int 
# 1689
__R) 
# 1690
{ 
# 1691
return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C, (__v8df)__W, (__mmask8)__U, __R); 
# 1696
} 
# 1699
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1700
_mm512_maskz_range_round_pd(__mmask8 __U, __m512d __A, __m512d __B, int 
# 1701
__C, const int __R) 
# 1702
{ 
# 1703
return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R); 
# 1709
} 
# 1712
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1713
_mm512_range_round_ps(__m512 __A, __m512 __B, int __C, const int __R) 
# 1714
{ 
# 1715
return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C, (__v16sf)_mm512_setzero_ps(), (__mmask16)(-1), __R); 
# 1721
} 
# 1724
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1725
_mm512_mask_range_round_ps(__m512 __W, __mmask16 __U, __m512 
# 1726
__A, __m512 __B, int __C, const int 
# 1727
__R) 
# 1728
{ 
# 1729
return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C, (__v16sf)__W, (__mmask16)__U, __R); 
# 1734
} 
# 1737
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1738
_mm512_maskz_range_round_ps(__mmask16 __U, __m512 __A, __m512 __B, int 
# 1739
__C, const int __R) 
# 1740
{ 
# 1741
return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R); 
# 1747
} 
# 1750
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1751
_mm512_inserti32x8(__m512i __A, __m256i __B, const int __imm) 
# 1752
{ 
# 1753
return (__m512i)__builtin_ia32_inserti32x8_mask((__v16si)__A, (__v8si)__B, __imm, (__v16si)_mm512_setzero_si512(), (__mmask16)(-1)); 
# 1759
} 
# 1762
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1763
_mm512_mask_inserti32x8(__m512i __W, __mmask16 __U, __m512i __A, __m256i 
# 1764
__B, const int __imm) 
# 1765
{ 
# 1766
return (__m512i)__builtin_ia32_inserti32x8_mask((__v16si)__A, (__v8si)__B, __imm, (__v16si)__W, (__mmask16)__U); 
# 1771
} 
# 1774
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1775
_mm512_maskz_inserti32x8(__mmask16 __U, __m512i __A, __m256i __B, const int 
# 1776
__imm) 
# 1777
{ 
# 1778
return (__m512i)__builtin_ia32_inserti32x8_mask((__v16si)__A, (__v8si)__B, __imm, (__v16si)_mm512_setzero_si512(), (__mmask16)__U); 
# 1784
} 
# 1787
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1788
_mm512_insertf32x8(__m512 __A, __m256 __B, const int __imm) 
# 1789
{ 
# 1790
return (__m512)__builtin_ia32_insertf32x8_mask((__v16sf)__A, (__v8sf)__B, __imm, (__v16sf)_mm512_setzero_ps(), (__mmask16)(-1)); 
# 1796
} 
# 1799
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1800
_mm512_mask_insertf32x8(__m512 __W, __mmask16 __U, __m512 __A, __m256 
# 1801
__B, const int __imm) 
# 1802
{ 
# 1803
return (__m512)__builtin_ia32_insertf32x8_mask((__v16sf)__A, (__v8sf)__B, __imm, (__v16sf)__W, (__mmask16)__U); 
# 1808
} 
# 1811
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512 
# 1812
_mm512_maskz_insertf32x8(__mmask16 __U, __m512 __A, __m256 __B, const int 
# 1813
__imm) 
# 1814
{ 
# 1815
return (__m512)__builtin_ia32_insertf32x8_mask((__v16sf)__A, (__v8sf)__B, __imm, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U); 
# 1821
} 
# 1824
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1825
_mm512_inserti64x2(__m512i __A, __m128i __B, const int __imm) 
# 1826
{ 
# 1827
return (__m512i)__builtin_ia32_inserti64x2_512_mask((__v8di)__A, (__v2di)__B, __imm, (__v8di)_mm512_setzero_si512(), (__mmask8)(-1)); 
# 1834
} 
# 1837
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1838
_mm512_mask_inserti64x2(__m512i __W, __mmask8 __U, __m512i __A, __m128i 
# 1839
__B, const int __imm) 
# 1840
{ 
# 1841
return (__m512i)__builtin_ia32_inserti64x2_512_mask((__v8di)__A, (__v2di)__B, __imm, (__v8di)__W, (__mmask8)__U); 
# 1847
} 
# 1850
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 1851
_mm512_maskz_inserti64x2(__mmask8 __U, __m512i __A, __m128i __B, const int 
# 1852
__imm) 
# 1853
{ 
# 1854
return (__m512i)__builtin_ia32_inserti64x2_512_mask((__v8di)__A, (__v2di)__B, __imm, (__v8di)_mm512_setzero_si512(), (__mmask8)__U); 
# 1861
} 
# 1864
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1865
_mm512_insertf64x2(__m512d __A, __m128d __B, const int __imm) 
# 1866
{ 
# 1867
return (__m512d)__builtin_ia32_insertf64x2_512_mask((__v8df)__A, (__v2df)__B, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)(-1)); 
# 1874
} 
# 1877
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1878
_mm512_mask_insertf64x2(__m512d __W, __mmask8 __U, __m512d __A, __m128d 
# 1879
__B, const int __imm) 
# 1880
{ 
# 1881
return (__m512d)__builtin_ia32_insertf64x2_512_mask((__v8df)__A, (__v2df)__B, __imm, (__v8df)__W, (__mmask8)__U); 
# 1887
} 
# 1890
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512d 
# 1891
_mm512_maskz_insertf64x2(__mmask8 __U, __m512d __A, __m128d __B, const int 
# 1892
__imm) 
# 1893
{ 
# 1894
return (__m512d)__builtin_ia32_insertf64x2_512_mask((__v8df)__A, (__v2df)__B, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)__U); 
# 1901
} 
# 1904
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1905
_mm512_mask_fpclass_pd_mask(__mmask8 __U, __m512d __A, const int 
# 1906
__imm) 
# 1907
{ 
# 1908
return (__mmask8)__builtin_ia32_fpclasspd512_mask((__v8df)__A, __imm, __U); 
# 1910
} 
# 1913
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1914
_mm512_fpclass_pd_mask(__m512d __A, const int __imm) 
# 1915
{ 
# 1916
return (__mmask8)__builtin_ia32_fpclasspd512_mask((__v8df)__A, __imm, (__mmask8)(-1)); 
# 1919
} 
# 1922
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1923
_mm512_mask_fpclass_ps_mask(__mmask16 __U, __m512 __A, const int 
# 1924
__imm) 
# 1925
{ 
# 1926
return (__mmask16)__builtin_ia32_fpclassps512_mask((__v16sf)__A, __imm, __U); 
# 1928
} 
# 1931
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1932
_mm512_fpclass_ps_mask(__m512 __A, const int __imm) 
# 1933
{ 
# 1934
return (__mmask16)__builtin_ia32_fpclassps512_mask((__v16sf)__A, __imm, (__mmask16)(-1)); 
# 1938
} 
# 2298
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512vlbwintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512vl,avx512bw" )
# 39
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 40
_mm256_mask_mov_epi8(__m256i __W, __mmask32 __U, __m256i __A) 
# 41
{ 
# 42
return (__m256i)__builtin_ia32_movdquqi256_mask((__v32qi)__A, (__v32qi)__W, (__mmask32)__U); 
# 45
} 
# 48
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 49
_mm256_maskz_mov_epi8(__mmask32 __U, __m256i __A) 
# 50
{ 
# 51
return (__m256i)__builtin_ia32_movdquqi256_mask((__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 55
} 
# 58
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 59
_mm_mask_mov_epi8(__m128i __W, __mmask16 __U, __m128i __A) 
# 60
{ 
# 61
return (__m128i)__builtin_ia32_movdquqi128_mask((__v16qi)__A, (__v16qi)__W, (__mmask16)__U); 
# 64
} 
# 67
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 68
_mm_maskz_mov_epi8(__mmask16 __U, __m128i __A) 
# 69
{ 
# 70
return (__m128i)__builtin_ia32_movdquqi128_mask((__v16qi)__A, (__v16qi)_mm_setzero_hi(), (__mmask16)__U); 
# 74
} 
# 77
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 78
_mm256_mask_storeu_epi8(void *__P, __mmask32 __U, __m256i __A) 
# 79
{ 
# 80
__builtin_ia32_storedquqi256_mask((__v32qi *)__P, (__v32qi)__A, (__mmask32)__U); 
# 83
} 
# 86
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 87
_mm_mask_storeu_epi8(void *__P, __mmask16 __U, __m128i __A) 
# 88
{ 
# 89
__builtin_ia32_storedquqi128_mask((__v16qi *)__P, (__v16qi)__A, (__mmask16)__U); 
# 92
} 
# 95
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 96
_mm256_mask_loadu_epi16(__m256i __W, __mmask16 __U, const void *__P) 
# 97
{ 
# 98
return (__m256i)__builtin_ia32_loaddquhi256_mask((__v16hi *)__P, (__v16hi)__W, (__mmask16)__U); 
# 101
} 
# 104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 105
_mm256_maskz_loadu_epi16(__mmask16 __U, const void *__P) 
# 106
{ 
# 107
return (__m256i)__builtin_ia32_loaddquhi256_mask((__v16hi *)__P, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 111
} 
# 114
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 115
_mm_mask_loadu_epi16(__m128i __W, __mmask8 __U, const void *__P) 
# 116
{ 
# 117
return (__m128i)__builtin_ia32_loaddquhi128_mask((__v8hi *)__P, (__v8hi)__W, (__mmask8)__U); 
# 120
} 
# 123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 124
_mm_maskz_loadu_epi16(__mmask8 __U, const void *__P) 
# 125
{ 
# 126
return (__m128i)__builtin_ia32_loaddquhi128_mask((__v8hi *)__P, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 130
} 
# 134
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 135
_mm256_mask_mov_epi16(__m256i __W, __mmask16 __U, __m256i __A) 
# 136
{ 
# 137
return (__m256i)__builtin_ia32_movdquhi256_mask((__v16hi)__A, (__v16hi)__W, (__mmask16)__U); 
# 140
} 
# 143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 144
_mm256_maskz_mov_epi16(__mmask16 __U, __m256i __A) 
# 145
{ 
# 146
return (__m256i)__builtin_ia32_movdquhi256_mask((__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 150
} 
# 153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 154
_mm_mask_mov_epi16(__m128i __W, __mmask8 __U, __m128i __A) 
# 155
{ 
# 156
return (__m128i)__builtin_ia32_movdquhi128_mask((__v8hi)__A, (__v8hi)__W, (__mmask8)__U); 
# 159
} 
# 162
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 163
_mm_maskz_mov_epi16(__mmask8 __U, __m128i __A) 
# 164
{ 
# 165
return (__m128i)__builtin_ia32_movdquhi128_mask((__v8hi)__A, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 169
} 
# 172
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 173
_mm256_mask_loadu_epi8(__m256i __W, __mmask32 __U, const void *__P) 
# 174
{ 
# 175
return (__m256i)__builtin_ia32_loaddquqi256_mask((__v32qi *)__P, (__v32qi)__W, (__mmask32)__U); 
# 178
} 
# 181
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 182
_mm256_maskz_loadu_epi8(__mmask32 __U, const void *__P) 
# 183
{ 
# 184
return (__m256i)__builtin_ia32_loaddquqi256_mask((__v32qi *)__P, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 188
} 
# 191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 192
_mm_mask_loadu_epi8(__m128i __W, __mmask16 __U, const void *__P) 
# 193
{ 
# 194
return (__m128i)__builtin_ia32_loaddquqi128_mask((__v16qi *)__P, (__v16qi)__W, (__mmask16)__U); 
# 197
} 
# 200
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 201
_mm_maskz_loadu_epi8(__mmask16 __U, const void *__P) 
# 202
{ 
# 203
return (__m128i)__builtin_ia32_loaddquqi128_mask((__v16qi *)__P, (__v16qi)_mm_setzero_hi(), (__mmask16)__U); 
# 207
} 
# 210
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 211
_mm256_cvtepi16_epi8(__m256i __A) 
# 212
{ 
# 214
return (__m128i)__builtin_ia32_pmovwb256_mask((__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)(-1)); 
# 217
} 
# 220
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 221
_mm256_mask_cvtepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) 
# 222
{ 
# 223
return (__m128i)__builtin_ia32_pmovwb256_mask((__v16hi)__A, (__v16qi)__O, __M); 
# 225
} 
# 228
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 229
_mm256_maskz_cvtepi16_epi8(__mmask16 __M, __m256i __A) 
# 230
{ 
# 231
return (__m128i)__builtin_ia32_pmovwb256_mask((__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 235
} 
# 238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 239
_mm_cvtsepi16_epi8(__m128i __A) 
# 240
{ 
# 242
return (__m128i)__builtin_ia32_pmovswb128_mask((__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 245
} 
# 248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 249
_mm_mask_cvtsepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 250
{ 
# 251
return (__m128i)__builtin_ia32_pmovswb128_mask((__v8hi)__A, (__v16qi)__O, __M); 
# 253
} 
# 256
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 257
_mm_maskz_cvtsepi16_epi8(__mmask8 __M, __m128i __A) 
# 258
{ 
# 259
return (__m128i)__builtin_ia32_pmovswb128_mask((__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 263
} 
# 266
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 267
_mm256_cvtsepi16_epi8(__m256i __A) 
# 268
{ 
# 270
return (__m128i)__builtin_ia32_pmovswb256_mask((__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)(-1)); 
# 273
} 
# 276
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 277
_mm256_mask_cvtsepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) 
# 278
{ 
# 279
return (__m128i)__builtin_ia32_pmovswb256_mask((__v16hi)__A, (__v16qi)__O, __M); 
# 281
} 
# 284
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 285
_mm256_maskz_cvtsepi16_epi8(__mmask16 __M, __m256i __A) 
# 286
{ 
# 287
return (__m128i)__builtin_ia32_pmovswb256_mask((__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 291
} 
# 294
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 295
_mm_cvtusepi16_epi8(__m128i __A) 
# 296
{ 
# 298
return (__m128i)__builtin_ia32_pmovuswb128_mask((__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 301
} 
# 304
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 305
_mm_mask_cvtusepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 306
{ 
# 307
return (__m128i)__builtin_ia32_pmovuswb128_mask((__v8hi)__A, (__v16qi)__O, __M); 
# 310
} 
# 313
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 314
_mm_maskz_cvtusepi16_epi8(__mmask8 __M, __m128i __A) 
# 315
{ 
# 316
return (__m128i)__builtin_ia32_pmovuswb128_mask((__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 320
} 
# 323
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 324
_mm256_cvtusepi16_epi8(__m256i __A) 
# 325
{ 
# 327
return (__m128i)__builtin_ia32_pmovuswb256_mask((__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)(-1)); 
# 330
} 
# 333
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 334
_mm256_mask_cvtusepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) 
# 335
{ 
# 336
return (__m128i)__builtin_ia32_pmovuswb256_mask((__v16hi)__A, (__v16qi)__O, __M); 
# 339
} 
# 342
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 343
_mm256_maskz_cvtusepi16_epi8(__mmask16 __M, __m256i __A) 
# 344
{ 
# 345
return (__m128i)__builtin_ia32_pmovuswb256_mask((__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 349
} 
# 352
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 353
_mm256_mask_broadcastb_epi8(__m256i __O, __mmask32 __M, __m128i __A) 
# 354
{ 
# 355
return (__m256i)__builtin_ia32_pbroadcastb256_mask((__v16qi)__A, (__v32qi)__O, __M); 
# 358
} 
# 361
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 362
_mm256_maskz_broadcastb_epi8(__mmask32 __M, __m128i __A) 
# 363
{ 
# 364
return (__m256i)__builtin_ia32_pbroadcastb256_mask((__v16qi)__A, (__v32qi)_mm256_setzero_si256(), __M); 
# 368
} 
# 371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 372
_mm256_mask_set1_epi8(__m256i __O, __mmask32 __M, char __A) 
# 373
{ 
# 374
return (__m256i)__builtin_ia32_pbroadcastb256_gpr_mask(__A, (__v32qi)__O, __M); 
# 377
} 
# 380
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 381
_mm256_maskz_set1_epi8(__mmask32 __M, char __A) 
# 382
{ 
# 383
return (__m256i)__builtin_ia32_pbroadcastb256_gpr_mask(__A, (__v32qi)_mm256_setzero_si256(), __M); 
# 387
} 
# 390
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 391
_mm_mask_broadcastb_epi8(__m128i __O, __mmask16 __M, __m128i __A) 
# 392
{ 
# 393
return (__m128i)__builtin_ia32_pbroadcastb128_mask((__v16qi)__A, (__v16qi)__O, __M); 
# 396
} 
# 399
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 400
_mm_maskz_broadcastb_epi8(__mmask16 __M, __m128i __A) 
# 401
{ 
# 402
return (__m128i)__builtin_ia32_pbroadcastb128_mask((__v16qi)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 406
} 
# 409
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 410
_mm_mask_set1_epi8(__m128i __O, __mmask16 __M, char __A) 
# 411
{ 
# 412
return (__m128i)__builtin_ia32_pbroadcastb128_gpr_mask(__A, (__v16qi)__O, __M); 
# 415
} 
# 418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 419
_mm_maskz_set1_epi8(__mmask16 __M, char __A) 
# 420
{ 
# 421
return (__m128i)__builtin_ia32_pbroadcastb128_gpr_mask(__A, (__v16qi)_mm_setzero_si128(), __M); 
# 425
} 
# 428
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 429
_mm256_mask_broadcastw_epi16(__m256i __O, __mmask16 __M, __m128i __A) 
# 430
{ 
# 431
return (__m256i)__builtin_ia32_pbroadcastw256_mask((__v8hi)__A, (__v16hi)__O, __M); 
# 434
} 
# 437
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 438
_mm256_maskz_broadcastw_epi16(__mmask16 __M, __m128i __A) 
# 439
{ 
# 440
return (__m256i)__builtin_ia32_pbroadcastw256_mask((__v8hi)__A, (__v16hi)_mm256_setzero_si256(), __M); 
# 444
} 
# 447
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 448
_mm256_mask_set1_epi16(__m256i __O, __mmask16 __M, short __A) 
# 449
{ 
# 450
return (__m256i)__builtin_ia32_pbroadcastw256_gpr_mask(__A, (__v16hi)__O, __M); 
# 453
} 
# 456
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 457
_mm256_maskz_set1_epi16(__mmask16 __M, short __A) 
# 458
{ 
# 459
return (__m256i)__builtin_ia32_pbroadcastw256_gpr_mask(__A, (__v16hi)_mm256_setzero_si256(), __M); 
# 463
} 
# 466
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 467
_mm_mask_broadcastw_epi16(__m128i __O, __mmask8 __M, __m128i __A) 
# 468
{ 
# 469
return (__m128i)__builtin_ia32_pbroadcastw128_mask((__v8hi)__A, (__v8hi)__O, __M); 
# 472
} 
# 475
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 476
_mm_maskz_broadcastw_epi16(__mmask8 __M, __m128i __A) 
# 477
{ 
# 478
return (__m128i)__builtin_ia32_pbroadcastw128_mask((__v8hi)__A, (__v8hi)_mm_setzero_si128(), __M); 
# 482
} 
# 485
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 486
_mm_mask_set1_epi16(__m128i __O, __mmask8 __M, short __A) 
# 487
{ 
# 488
return (__m128i)__builtin_ia32_pbroadcastw128_gpr_mask(__A, (__v8hi)__O, __M); 
# 491
} 
# 494
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 495
_mm_maskz_set1_epi16(__mmask8 __M, short __A) 
# 496
{ 
# 497
return (__m128i)__builtin_ia32_pbroadcastw128_gpr_mask(__A, (__v8hi)_mm_setzero_si128(), __M); 
# 501
} 
# 504
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 505
_mm256_permutexvar_epi16(__m256i __A, __m256i __B) 
# 506
{ 
# 507
return (__m256i)__builtin_ia32_permvarhi256_mask((__v16hi)__B, (__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)(-1)); 
# 512
} 
# 515
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 516
_mm256_maskz_permutexvar_epi16(__mmask16 __M, __m256i __A, __m256i 
# 517
__B) 
# 518
{ 
# 519
return (__m256i)__builtin_ia32_permvarhi256_mask((__v16hi)__B, (__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__M); 
# 524
} 
# 527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 528
_mm256_mask_permutexvar_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i 
# 529
__B) 
# 530
{ 
# 531
return (__m256i)__builtin_ia32_permvarhi256_mask((__v16hi)__B, (__v16hi)__A, (__v16hi)__W, (__mmask16)__M); 
# 535
} 
# 538
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 539
_mm_permutexvar_epi16(__m128i __A, __m128i __B) 
# 540
{ 
# 541
return (__m128i)__builtin_ia32_permvarhi128_mask((__v8hi)__B, (__v8hi)__A, (__v8hi)_mm_setzero_hi(), (__mmask8)(-1)); 
# 546
} 
# 549
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 550
_mm_maskz_permutexvar_epi16(__mmask8 __M, __m128i __A, __m128i __B) 
# 551
{ 
# 552
return (__m128i)__builtin_ia32_permvarhi128_mask((__v8hi)__B, (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__M); 
# 557
} 
# 560
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 561
_mm_mask_permutexvar_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 562
__B) 
# 563
{ 
# 564
return (__m128i)__builtin_ia32_permvarhi128_mask((__v8hi)__B, (__v8hi)__A, (__v8hi)__W, (__mmask8)__M); 
# 568
} 
# 571
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 572
_mm256_permutex2var_epi16(__m256i __A, __m256i __I, __m256i __B) 
# 573
{ 
# 574
return (__m256i)__builtin_ia32_vpermt2varhi256_mask((__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)(-1)); 
# 580
} 
# 583
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 584
_mm256_mask_permutex2var_epi16(__m256i __A, __mmask16 __U, __m256i 
# 585
__I, __m256i __B) 
# 586
{ 
# 587
return (__m256i)__builtin_ia32_vpermt2varhi256_mask((__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)__U); 
# 593
} 
# 596
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 597
_mm256_mask2_permutex2var_epi16(__m256i __A, __m256i __I, __mmask16 
# 598
__U, __m256i __B) 
# 599
{ 
# 600
return (__m256i)__builtin_ia32_vpermi2varhi256_mask((__v16hi)__A, (__v16hi)__I, (__v16hi)__B, (__mmask16)__U); 
# 606
} 
# 609
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 610
_mm256_maskz_permutex2var_epi16(__mmask16 __U, __m256i __A, __m256i 
# 611
__I, __m256i __B) 
# 612
{ 
# 613
return (__m256i)__builtin_ia32_vpermt2varhi256_maskz((__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)__U); 
# 619
} 
# 622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 623
_mm_permutex2var_epi16(__m128i __A, __m128i __I, __m128i __B) 
# 624
{ 
# 625
return (__m128i)__builtin_ia32_vpermt2varhi128_mask((__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)(-1)); 
# 631
} 
# 634
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 635
_mm_mask_permutex2var_epi16(__m128i __A, __mmask8 __U, __m128i __I, __m128i 
# 636
__B) 
# 637
{ 
# 638
return (__m128i)__builtin_ia32_vpermt2varhi128_mask((__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)__U); 
# 644
} 
# 647
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 648
_mm_mask2_permutex2var_epi16(__m128i __A, __m128i __I, __mmask8 __U, __m128i 
# 649
__B) 
# 650
{ 
# 651
return (__m128i)__builtin_ia32_vpermi2varhi128_mask((__v8hi)__A, (__v8hi)__I, (__v8hi)__B, (__mmask8)__U); 
# 657
} 
# 660
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 661
_mm_maskz_permutex2var_epi16(__mmask8 __U, __m128i __A, __m128i __I, __m128i 
# 662
__B) 
# 663
{ 
# 664
return (__m128i)__builtin_ia32_vpermt2varhi128_maskz((__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)__U); 
# 670
} 
# 673
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 674
_mm256_mask_maddubs_epi16(__m256i __W, __mmask16 __U, __m256i __X, __m256i 
# 675
__Y) 
# 676
{ 
# 677
return (__m256i)__builtin_ia32_pmaddubsw256_mask((__v32qi)__X, (__v32qi)__Y, (__v16hi)__W, (__mmask16)__U); 
# 681
} 
# 684
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 685
_mm256_maskz_maddubs_epi16(__mmask16 __U, __m256i __X, __m256i __Y) 
# 686
{ 
# 687
return (__m256i)__builtin_ia32_pmaddubsw256_mask((__v32qi)__X, (__v32qi)__Y, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 692
} 
# 695
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 696
_mm_mask_maddubs_epi16(__m128i __W, __mmask8 __U, __m128i __X, __m128i 
# 697
__Y) 
# 698
{ 
# 699
return (__m128i)__builtin_ia32_pmaddubsw128_mask((__v16qi)__X, (__v16qi)__Y, (__v8hi)__W, (__mmask8)__U); 
# 703
} 
# 706
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 707
_mm_maskz_maddubs_epi16(__mmask8 __U, __m128i __X, __m128i __Y) 
# 708
{ 
# 709
return (__m128i)__builtin_ia32_pmaddubsw128_mask((__v16qi)__X, (__v16qi)__Y, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 714
} 
# 717
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 718
_mm256_mask_madd_epi16(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 719
__B) 
# 720
{ 
# 721
return (__m256i)__builtin_ia32_pmaddwd256_mask((__v16hi)__A, (__v16hi)__B, (__v8si)__W, (__mmask8)__U); 
# 725
} 
# 728
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 729
_mm256_maskz_madd_epi16(__mmask8 __U, __m256i __A, __m256i __B) 
# 730
{ 
# 731
return (__m256i)__builtin_ia32_pmaddwd256_mask((__v16hi)__A, (__v16hi)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U); 
# 736
} 
# 739
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 740
_mm_mask_madd_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 741
__B) 
# 742
{ 
# 743
return (__m128i)__builtin_ia32_pmaddwd128_mask((__v8hi)__A, (__v8hi)__B, (__v4si)__W, (__mmask8)__U); 
# 747
} 
# 750
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 751
_mm_maskz_madd_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 752
{ 
# 753
return (__m128i)__builtin_ia32_pmaddwd128_mask((__v8hi)__A, (__v8hi)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U); 
# 758
} 
# 761
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 762
_mm_movepi8_mask(__m128i __A) 
# 763
{ 
# 764
return (__mmask16)__builtin_ia32_cvtb2mask128((__v16qi)__A); 
# 765
} 
# 768
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 769
_mm256_movepi8_mask(__m256i __A) 
# 770
{ 
# 771
return (__mmask32)__builtin_ia32_cvtb2mask256((__v32qi)__A); 
# 772
} 
# 775
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 776
_mm_movepi16_mask(__m128i __A) 
# 777
{ 
# 778
return (__mmask8)__builtin_ia32_cvtw2mask128((__v8hi)__A); 
# 779
} 
# 782
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 783
_mm256_movepi16_mask(__m256i __A) 
# 784
{ 
# 785
return (__mmask16)__builtin_ia32_cvtw2mask256((__v16hi)__A); 
# 786
} 
# 789
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 790
_mm_movm_epi8(__mmask16 __A) 
# 791
{ 
# 792
return (__m128i)__builtin_ia32_cvtmask2b128(__A); 
# 793
} 
# 796
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 797
_mm256_movm_epi8(__mmask32 __A) 
# 798
{ 
# 799
return (__m256i)__builtin_ia32_cvtmask2b256(__A); 
# 800
} 
# 803
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 804
_mm_movm_epi16(__mmask8 __A) 
# 805
{ 
# 806
return (__m128i)__builtin_ia32_cvtmask2w128(__A); 
# 807
} 
# 810
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 811
_mm256_movm_epi16(__mmask16 __A) 
# 812
{ 
# 813
return (__m256i)__builtin_ia32_cvtmask2w256(__A); 
# 814
} 
# 817
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 818
_mm_test_epi8_mask(__m128i __A, __m128i __B) 
# 819
{ 
# 820
return (__mmask16)__builtin_ia32_ptestmb128((__v16qi)__A, (__v16qi)__B, (__mmask16)(-1)); 
# 823
} 
# 826
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 827
_mm_mask_test_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) 
# 828
{ 
# 829
return (__mmask16)__builtin_ia32_ptestmb128((__v16qi)__A, (__v16qi)__B, __U); 
# 831
} 
# 834
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 835
_mm256_test_epi8_mask(__m256i __A, __m256i __B) 
# 836
{ 
# 837
return (__mmask32)__builtin_ia32_ptestmb256((__v32qi)__A, (__v32qi)__B, (__mmask32)(-1)); 
# 840
} 
# 843
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 844
_mm256_mask_test_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) 
# 845
{ 
# 846
return (__mmask32)__builtin_ia32_ptestmb256((__v32qi)__A, (__v32qi)__B, __U); 
# 848
} 
# 851
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 852
_mm_test_epi16_mask(__m128i __A, __m128i __B) 
# 853
{ 
# 854
return (__mmask8)__builtin_ia32_ptestmw128((__v8hi)__A, (__v8hi)__B, (__mmask8)(-1)); 
# 857
} 
# 860
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 861
_mm_mask_test_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 862
{ 
# 863
return (__mmask8)__builtin_ia32_ptestmw128((__v8hi)__A, (__v8hi)__B, __U); 
# 865
} 
# 868
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 869
_mm256_test_epi16_mask(__m256i __A, __m256i __B) 
# 870
{ 
# 871
return (__mmask16)__builtin_ia32_ptestmw256((__v16hi)__A, (__v16hi)__B, (__mmask16)(-1)); 
# 874
} 
# 877
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 878
_mm256_mask_test_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) 
# 879
{ 
# 880
return (__mmask16)__builtin_ia32_ptestmw256((__v16hi)__A, (__v16hi)__B, __U); 
# 882
} 
# 885
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 886
_mm256_maskz_min_epu16(__mmask16 __M, __m256i __A, __m256i __B) 
# 887
{ 
# 888
return (__m256i)__builtin_ia32_pminuw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__M); 
# 893
} 
# 896
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 897
_mm256_mask_min_epu16(__m256i __W, __mmask16 __M, __m256i __A, __m256i 
# 898
__B) 
# 899
{ 
# 900
return (__m256i)__builtin_ia32_pminuw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__M); 
# 904
} 
# 907
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 908
_mm_maskz_min_epu16(__mmask8 __M, __m128i __A, __m128i __B) 
# 909
{ 
# 910
return (__m128i)__builtin_ia32_pminuw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_di(), (__mmask8)__M); 
# 915
} 
# 918
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 919
_mm_mask_min_epu16(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 920
__B) 
# 921
{ 
# 922
return (__m128i)__builtin_ia32_pminuw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__M); 
# 926
} 
# 929
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 930
_mm256_maskz_min_epi16(__mmask16 __M, __m256i __A, __m256i __B) 
# 931
{ 
# 932
return (__m256i)__builtin_ia32_pminsw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__M); 
# 937
} 
# 940
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 941
_mm256_mask_min_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i 
# 942
__B) 
# 943
{ 
# 944
return (__m256i)__builtin_ia32_pminsw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__M); 
# 948
} 
# 951
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 952
_mm256_maskz_max_epu8(__mmask32 __M, __m256i __A, __m256i __B) 
# 953
{ 
# 954
return (__m256i)__builtin_ia32_pmaxub256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__M); 
# 959
} 
# 962
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 963
_mm256_mask_max_epu8(__m256i __W, __mmask32 __M, __m256i __A, __m256i 
# 964
__B) 
# 965
{ 
# 966
return (__m256i)__builtin_ia32_pmaxub256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__M); 
# 970
} 
# 973
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 974
_mm_maskz_max_epu8(__mmask16 __M, __m128i __A, __m128i __B) 
# 975
{ 
# 976
return (__m128i)__builtin_ia32_pmaxub128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_di(), (__mmask16)__M); 
# 981
} 
# 984
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 985
_mm_mask_max_epu8(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 986
__B) 
# 987
{ 
# 988
return (__m128i)__builtin_ia32_pmaxub128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__M); 
# 992
} 
# 995
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 996
_mm256_maskz_max_epi8(__mmask32 __M, __m256i __A, __m256i __B) 
# 997
{ 
# 998
return (__m256i)__builtin_ia32_pmaxsb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__M); 
# 1003
} 
# 1006
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1007
_mm256_mask_max_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i 
# 1008
__B) 
# 1009
{ 
# 1010
return (__m256i)__builtin_ia32_pmaxsb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__M); 
# 1014
} 
# 1017
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1018
_mm_maskz_max_epi8(__mmask16 __M, __m128i __A, __m128i __B) 
# 1019
{ 
# 1020
return (__m128i)__builtin_ia32_pmaxsb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_di(), (__mmask16)__M); 
# 1025
} 
# 1028
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1029
_mm_mask_max_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 1030
__B) 
# 1031
{ 
# 1032
return (__m128i)__builtin_ia32_pmaxsb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__M); 
# 1036
} 
# 1039
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1040
_mm256_maskz_min_epu8(__mmask32 __M, __m256i __A, __m256i __B) 
# 1041
{ 
# 1042
return (__m256i)__builtin_ia32_pminub256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__M); 
# 1047
} 
# 1050
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1051
_mm256_mask_min_epu8(__m256i __W, __mmask32 __M, __m256i __A, __m256i 
# 1052
__B) 
# 1053
{ 
# 1054
return (__m256i)__builtin_ia32_pminub256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__M); 
# 1058
} 
# 1061
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1062
_mm_maskz_min_epu8(__mmask16 __M, __m128i __A, __m128i __B) 
# 1063
{ 
# 1064
return (__m128i)__builtin_ia32_pminub128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_di(), (__mmask16)__M); 
# 1069
} 
# 1072
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1073
_mm_mask_min_epu8(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 1074
__B) 
# 1075
{ 
# 1076
return (__m128i)__builtin_ia32_pminub128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__M); 
# 1080
} 
# 1083
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1084
_mm256_maskz_min_epi8(__mmask32 __M, __m256i __A, __m256i __B) 
# 1085
{ 
# 1086
return (__m256i)__builtin_ia32_pminsb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__M); 
# 1091
} 
# 1094
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1095
_mm256_mask_min_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i 
# 1096
__B) 
# 1097
{ 
# 1098
return (__m256i)__builtin_ia32_pminsb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__M); 
# 1102
} 
# 1105
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1106
_mm_maskz_min_epi8(__mmask16 __M, __m128i __A, __m128i __B) 
# 1107
{ 
# 1108
return (__m128i)__builtin_ia32_pminsb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_di(), (__mmask16)__M); 
# 1113
} 
# 1116
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1117
_mm_mask_min_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 1118
__B) 
# 1119
{ 
# 1120
return (__m128i)__builtin_ia32_pminsb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__M); 
# 1124
} 
# 1127
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1128
_mm256_maskz_max_epi16(__mmask16 __M, __m256i __A, __m256i __B) 
# 1129
{ 
# 1130
return (__m256i)__builtin_ia32_pmaxsw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__M); 
# 1135
} 
# 1138
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1139
_mm256_mask_max_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i 
# 1140
__B) 
# 1141
{ 
# 1142
return (__m256i)__builtin_ia32_pmaxsw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__M); 
# 1146
} 
# 1149
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1150
_mm_maskz_max_epi16(__mmask8 __M, __m128i __A, __m128i __B) 
# 1151
{ 
# 1152
return (__m128i)__builtin_ia32_pmaxsw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_di(), (__mmask8)__M); 
# 1157
} 
# 1160
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1161
_mm_mask_max_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 1162
__B) 
# 1163
{ 
# 1164
return (__m128i)__builtin_ia32_pmaxsw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__M); 
# 1168
} 
# 1171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1172
_mm256_maskz_max_epu16(__mmask16 __M, __m256i __A, __m256i __B) 
# 1173
{ 
# 1174
return (__m256i)__builtin_ia32_pmaxuw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__M); 
# 1179
} 
# 1182
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1183
_mm256_mask_max_epu16(__m256i __W, __mmask16 __M, __m256i __A, __m256i 
# 1184
__B) 
# 1185
{ 
# 1186
return (__m256i)__builtin_ia32_pmaxuw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__M); 
# 1190
} 
# 1193
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1194
_mm_maskz_max_epu16(__mmask8 __M, __m128i __A, __m128i __B) 
# 1195
{ 
# 1196
return (__m128i)__builtin_ia32_pmaxuw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_di(), (__mmask8)__M); 
# 1201
} 
# 1204
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1205
_mm_mask_max_epu16(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 1206
__B) 
# 1207
{ 
# 1208
return (__m128i)__builtin_ia32_pmaxuw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__M); 
# 1212
} 
# 1215
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1216
_mm_maskz_min_epi16(__mmask8 __M, __m128i __A, __m128i __B) 
# 1217
{ 
# 1218
return (__m128i)__builtin_ia32_pminsw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_di(), (__mmask8)__M); 
# 1223
} 
# 1226
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1227
_mm_mask_min_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i 
# 1228
__B) 
# 1229
{ 
# 1230
return (__m128i)__builtin_ia32_pminsw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__M); 
# 1234
} 
# 1238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1239
_mm256_mask_alignr_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 1240
__B, const int __N) 
# 1241
{ 
# 1242
return (__m256i)__builtin_ia32_palignr256_mask((__v4di)__A, (__v4di)__B, __N * 8, (__v4di)__W, (__mmask32)__U); 
# 1247
} 
# 1250
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1251
_mm256_maskz_alignr_epi8(__mmask32 __U, __m256i __A, __m256i __B, const int 
# 1252
__N) 
# 1253
{ 
# 1254
return (__m256i)__builtin_ia32_palignr256_mask((__v4di)__A, (__v4di)__B, __N * 8, (__v4di)_mm256_setzero_si256(), (__mmask32)__U); 
# 1260
} 
# 1263
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1264
_mm_mask_alignr_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 1265
__B, const int __N) 
# 1266
{ 
# 1267
return (__m128i)__builtin_ia32_palignr128_mask((__v2di)__A, (__v2di)__B, __N * 8, (__v2di)__W, (__mmask16)__U); 
# 1272
} 
# 1275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1276
_mm_maskz_alignr_epi8(__mmask16 __U, __m128i __A, __m128i __B, const int 
# 1277
__N) 
# 1278
{ 
# 1279
return (__m128i)__builtin_ia32_palignr128_mask((__v2di)__A, (__v2di)__B, __N * 8, (__v2di)_mm_setzero_si128(), (__mmask16)__U); 
# 1285
} 
# 1288
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1289
_mm256_dbsad_epu8(__m256i __A, __m256i __B, const int __imm) 
# 1290
{ 
# 1291
return (__m256i)__builtin_ia32_dbpsadbw256_mask((__v32qi)__A, (__v32qi)__B, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)(-1)); 
# 1297
} 
# 1300
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1301
_mm256_mask_dbsad_epu8(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 1302
__B, const int __imm) 
# 1303
{ 
# 1304
return (__m256i)__builtin_ia32_dbpsadbw256_mask((__v32qi)__A, (__v32qi)__B, __imm, (__v16hi)__W, (__mmask16)__U); 
# 1309
} 
# 1312
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1313
_mm256_maskz_dbsad_epu8(__mmask16 __U, __m256i __A, __m256i __B, const int 
# 1314
__imm) 
# 1315
{ 
# 1316
return (__m256i)__builtin_ia32_dbpsadbw256_mask((__v32qi)__A, (__v32qi)__B, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 1322
} 
# 1325
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1326
_mm_dbsad_epu8(__m128i __A, __m128i __B, const int __imm) 
# 1327
{ 
# 1328
return (__m128i)__builtin_ia32_dbpsadbw128_mask((__v16qi)__A, (__v16qi)__B, __imm, (__v8hi)_mm_setzero_hi(), (__mmask8)(-1)); 
# 1334
} 
# 1337
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1338
_mm_mask_dbsad_epu8(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 1339
__B, const int __imm) 
# 1340
{ 
# 1341
return (__m128i)__builtin_ia32_dbpsadbw128_mask((__v16qi)__A, (__v16qi)__B, __imm, (__v8hi)__W, (__mmask8)__U); 
# 1346
} 
# 1349
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1350
_mm_maskz_dbsad_epu8(__mmask8 __U, __m128i __A, __m128i __B, const int 
# 1351
__imm) 
# 1352
{ 
# 1353
return (__m128i)__builtin_ia32_dbpsadbw128_mask((__v16qi)__A, (__v16qi)__B, __imm, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 1359
} 
# 1362
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1363
_mm_mask_blend_epi16(__mmask8 __U, __m128i __A, __m128i __W) 
# 1364
{ 
# 1365
return (__m128i)__builtin_ia32_blendmw_128_mask((__v8hi)__A, (__v8hi)__W, (__mmask8)__U); 
# 1368
} 
# 1371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1372
_mm_mask_blend_epi8(__mmask16 __U, __m128i __A, __m128i __W) 
# 1373
{ 
# 1374
return (__m128i)__builtin_ia32_blendmb_128_mask((__v16qi)__A, (__v16qi)__W, (__mmask16)__U); 
# 1377
} 
# 1380
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1381
_mm256_mask_blend_epi16(__mmask16 __U, __m256i __A, __m256i __W) 
# 1382
{ 
# 1383
return (__m256i)__builtin_ia32_blendmw_256_mask((__v16hi)__A, (__v16hi)__W, (__mmask16)__U); 
# 1386
} 
# 1389
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1390
_mm256_mask_blend_epi8(__mmask32 __U, __m256i __A, __m256i __W) 
# 1391
{ 
# 1392
return (__m256i)__builtin_ia32_blendmb_256_mask((__v32qi)__A, (__v32qi)__W, (__mmask32)__U); 
# 1395
} 
# 1398
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1399
_mm_mask_cmp_epi16_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int 
# 1400
__P) 
# 1401
{ 
# 1402
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, __P, (__mmask8)__U); 
# 1405
} 
# 1408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1409
_mm_cmp_epi16_mask(__m128i __X, __m128i __Y, const int __P) 
# 1410
{ 
# 1411
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, __P, (__mmask8)(-1)); 
# 1414
} 
# 1417
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1418
_mm256_mask_cmp_epi16_mask(__mmask16 __U, __m256i __X, __m256i __Y, const int 
# 1419
__P) 
# 1420
{ 
# 1421
return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, __P, (__mmask16)__U); 
# 1424
} 
# 1427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1428
_mm256_cmp_epi16_mask(__m256i __X, __m256i __Y, const int __P) 
# 1429
{ 
# 1430
return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, __P, (__mmask16)(-1)); 
# 1433
} 
# 1436
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1437
_mm_mask_cmp_epi8_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int 
# 1438
__P) 
# 1439
{ 
# 1440
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, __P, (__mmask16)__U); 
# 1443
} 
# 1446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1447
_mm_cmp_epi8_mask(__m128i __X, __m128i __Y, const int __P) 
# 1448
{ 
# 1449
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, __P, (__mmask16)(-1)); 
# 1452
} 
# 1455
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1456
_mm256_mask_cmp_epi8_mask(__mmask16 __U, __m256i __X, __m256i __Y, const int 
# 1457
__P) 
# 1458
{ 
# 1459
return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, __P, (__mmask32)__U); 
# 1462
} 
# 1465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1466
_mm256_cmp_epi8_mask(__m256i __X, __m256i __Y, const int __P) 
# 1467
{ 
# 1468
return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, __P, (__mmask32)(-1)); 
# 1471
} 
# 1474
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1475
_mm_mask_cmp_epu16_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int 
# 1476
__P) 
# 1477
{ 
# 1478
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, __P, (__mmask8)__U); 
# 1481
} 
# 1484
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1485
_mm_cmp_epu16_mask(__m128i __X, __m128i __Y, const int __P) 
# 1486
{ 
# 1487
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, __P, (__mmask8)(-1)); 
# 1490
} 
# 1493
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1494
_mm256_mask_cmp_epu16_mask(__mmask16 __U, __m256i __X, __m256i __Y, const int 
# 1495
__P) 
# 1496
{ 
# 1497
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, __P, (__mmask16)__U); 
# 1500
} 
# 1503
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1504
_mm256_cmp_epu16_mask(__m256i __X, __m256i __Y, const int __P) 
# 1505
{ 
# 1506
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, __P, (__mmask16)(-1)); 
# 1509
} 
# 1512
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1513
_mm_mask_cmp_epu8_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int 
# 1514
__P) 
# 1515
{ 
# 1516
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, __P, (__mmask16)__U); 
# 1519
} 
# 1522
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1523
_mm_cmp_epu8_mask(__m128i __X, __m128i __Y, const int __P) 
# 1524
{ 
# 1525
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, __P, (__mmask16)(-1)); 
# 1528
} 
# 1531
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 1532
_mm256_mask_cmp_epu8_mask(__mmask16 __U, __m256i __X, __m256i __Y, const int 
# 1533
__P) 
# 1534
{ 
# 1535
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, __P, (__mmask32)__U); 
# 1538
} 
# 1541
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 1542
_mm256_cmp_epu8_mask(__m256i __X, __m256i __Y, const int __P) 
# 1543
{ 
# 1544
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, __P, (__mmask32)(-1)); 
# 1547
} 
# 1550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1551
_mm256_mask_srli_epi16(__m256i __W, __mmask16 __U, __m256i __A, const int 
# 1552
__imm) 
# 1553
{ 
# 1554
return (__m256i)__builtin_ia32_psrlwi256_mask((__v16hi)__A, __imm, (__v16hi)__W, (__mmask16)__U); 
# 1557
} 
# 1560
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1561
_mm256_maskz_srli_epi16(__mmask16 __U, __m256i __A, const int __imm) 
# 1562
{ 
# 1563
return (__m256i)__builtin_ia32_psrlwi256_mask((__v16hi)__A, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 1567
} 
# 1570
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1571
_mm_mask_srli_epi16(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 1572
__imm) 
# 1573
{ 
# 1574
return (__m128i)__builtin_ia32_psrlwi128_mask((__v8hi)__A, __imm, (__v8hi)__W, (__mmask8)__U); 
# 1577
} 
# 1580
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1581
_mm_maskz_srli_epi16(__mmask8 __U, __m128i __A, const int __imm) 
# 1582
{ 
# 1583
return (__m128i)__builtin_ia32_psrlwi128_mask((__v8hi)__A, __imm, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 1587
} 
# 1590
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1591
_mm256_mask_shufflehi_epi16(__m256i __W, __mmask16 __U, __m256i __A, const int 
# 1592
__imm) 
# 1593
{ 
# 1594
return (__m256i)__builtin_ia32_pshufhw256_mask((__v16hi)__A, __imm, (__v16hi)__W, (__mmask16)__U); 
# 1598
} 
# 1601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1602
_mm256_maskz_shufflehi_epi16(__mmask16 __U, __m256i __A, const int 
# 1603
__imm) 
# 1604
{ 
# 1605
return (__m256i)__builtin_ia32_pshufhw256_mask((__v16hi)__A, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 1610
} 
# 1613
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1614
_mm_mask_shufflehi_epi16(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 1615
__imm) 
# 1616
{ 
# 1617
return (__m128i)__builtin_ia32_pshufhw128_mask((__v8hi)__A, __imm, (__v8hi)__W, (__mmask8)__U); 
# 1620
} 
# 1623
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1624
_mm_maskz_shufflehi_epi16(__mmask8 __U, __m128i __A, const int __imm) 
# 1625
{ 
# 1626
return (__m128i)__builtin_ia32_pshufhw128_mask((__v8hi)__A, __imm, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 1630
} 
# 1633
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1634
_mm256_mask_shufflelo_epi16(__m256i __W, __mmask16 __U, __m256i __A, const int 
# 1635
__imm) 
# 1636
{ 
# 1637
return (__m256i)__builtin_ia32_pshuflw256_mask((__v16hi)__A, __imm, (__v16hi)__W, (__mmask16)__U); 
# 1641
} 
# 1644
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1645
_mm256_maskz_shufflelo_epi16(__mmask16 __U, __m256i __A, const int 
# 1646
__imm) 
# 1647
{ 
# 1648
return (__m256i)__builtin_ia32_pshuflw256_mask((__v16hi)__A, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 1653
} 
# 1656
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1657
_mm_mask_shufflelo_epi16(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 1658
__imm) 
# 1659
{ 
# 1660
return (__m128i)__builtin_ia32_pshuflw128_mask((__v8hi)__A, __imm, (__v8hi)__W, (__mmask8)__U); 
# 1663
} 
# 1666
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1667
_mm_maskz_shufflelo_epi16(__mmask8 __U, __m128i __A, const int __imm) 
# 1668
{ 
# 1669
return (__m128i)__builtin_ia32_pshuflw128_mask((__v8hi)__A, __imm, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 1673
} 
# 1676
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1677
_mm256_mask_srai_epi16(__m256i __W, __mmask16 __U, __m256i __A, const int 
# 1678
__imm) 
# 1679
{ 
# 1680
return (__m256i)__builtin_ia32_psrawi256_mask((__v16hi)__A, __imm, (__v16hi)__W, (__mmask16)__U); 
# 1683
} 
# 1686
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1687
_mm256_maskz_srai_epi16(__mmask16 __U, __m256i __A, const int __imm) 
# 1688
{ 
# 1689
return (__m256i)__builtin_ia32_psrawi256_mask((__v16hi)__A, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 1693
} 
# 1696
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1697
_mm_mask_srai_epi16(__m128i __W, __mmask8 __U, __m128i __A, const int 
# 1698
__imm) 
# 1699
{ 
# 1700
return (__m128i)__builtin_ia32_psrawi128_mask((__v8hi)__A, __imm, (__v8hi)__W, (__mmask8)__U); 
# 1703
} 
# 1706
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1707
_mm_maskz_srai_epi16(__mmask8 __U, __m128i __A, const int __imm) 
# 1708
{ 
# 1709
return (__m128i)__builtin_ia32_psrawi128_mask((__v8hi)__A, __imm, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 1713
} 
# 1716
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1717
_mm256_mask_slli_epi16(__m256i __W, __mmask16 __U, __m256i __A, int 
# 1718
__B) 
# 1719
{ 
# 1720
return (__m256i)__builtin_ia32_psllwi256_mask((__v16hi)__A, __B, (__v16hi)__W, (__mmask16)__U); 
# 1723
} 
# 1726
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1727
_mm256_maskz_slli_epi16(__mmask16 __U, __m256i __A, int __B) 
# 1728
{ 
# 1729
return (__m256i)__builtin_ia32_psllwi256_mask((__v16hi)__A, __B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 1733
} 
# 1736
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1737
_mm_mask_slli_epi16(__m128i __W, __mmask8 __U, __m128i __A, int __B) 
# 1738
{ 
# 1739
return (__m128i)__builtin_ia32_psllwi128_mask((__v8hi)__A, __B, (__v8hi)__W, (__mmask8)__U); 
# 1742
} 
# 1745
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1746
_mm_maskz_slli_epi16(__mmask8 __U, __m128i __A, int __B) 
# 1747
{ 
# 1748
return (__m128i)__builtin_ia32_psllwi128_mask((__v8hi)__A, __B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 1752
} 
# 2007
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2008
_mm256_cmpneq_epi8_mask(__m256i __X, __m256i __Y) 
# 2009
{ 
# 2010
return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4, (__mmask32)(-1)); 
# 2013
} 
# 2016
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2017
_mm256_cmplt_epi8_mask(__m256i __X, __m256i __Y) 
# 2018
{ 
# 2019
return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1, (__mmask32)(-1)); 
# 2022
} 
# 2025
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2026
_mm256_cmpge_epi8_mask(__m256i __X, __m256i __Y) 
# 2027
{ 
# 2028
return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5, (__mmask32)(-1)); 
# 2031
} 
# 2034
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 2035
_mm256_cmple_epi8_mask(__m256i __X, __m256i __Y) 
# 2036
{ 
# 2037
return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2, (__mmask32)(-1)); 
# 2040
} 
# 2043
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2044
_mm256_cmpneq_epi16_mask(__m256i __X, __m256i __Y) 
# 2045
{ 
# 2046
return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4, (__mmask16)(-1)); 
# 2049
} 
# 2052
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2053
_mm256_cmplt_epi16_mask(__m256i __X, __m256i __Y) 
# 2054
{ 
# 2055
return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1, (__mmask16)(-1)); 
# 2058
} 
# 2061
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2062
_mm256_cmpge_epi16_mask(__m256i __X, __m256i __Y) 
# 2063
{ 
# 2064
return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5, (__mmask16)(-1)); 
# 2067
} 
# 2070
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2071
_mm256_cmple_epi16_mask(__m256i __X, __m256i __Y) 
# 2072
{ 
# 2073
return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2, (__mmask16)(-1)); 
# 2076
} 
# 2079
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2080
_mm_cmpneq_epu8_mask(__m128i __X, __m128i __Y) 
# 2081
{ 
# 2082
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4, (__mmask16)(-1)); 
# 2085
} 
# 2088
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2089
_mm_cmplt_epu8_mask(__m128i __X, __m128i __Y) 
# 2090
{ 
# 2091
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1, (__mmask16)(-1)); 
# 2094
} 
# 2097
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2098
_mm_cmpge_epu8_mask(__m128i __X, __m128i __Y) 
# 2099
{ 
# 2100
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5, (__mmask16)(-1)); 
# 2103
} 
# 2106
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2107
_mm_cmple_epu8_mask(__m128i __X, __m128i __Y) 
# 2108
{ 
# 2109
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2, (__mmask16)(-1)); 
# 2112
} 
# 2115
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 2116
_mm_cmpneq_epu16_mask(__m128i __X, __m128i __Y) 
# 2117
{ 
# 2118
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4, (__mmask8)(-1)); 
# 2121
} 
# 2124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 2125
_mm_cmplt_epu16_mask(__m128i __X, __m128i __Y) 
# 2126
{ 
# 2127
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1, (__mmask8)(-1)); 
# 2130
} 
# 2133
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 2134
_mm_cmpge_epu16_mask(__m128i __X, __m128i __Y) 
# 2135
{ 
# 2136
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5, (__mmask8)(-1)); 
# 2139
} 
# 2142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 2143
_mm_cmple_epu16_mask(__m128i __X, __m128i __Y) 
# 2144
{ 
# 2145
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2, (__mmask8)(-1)); 
# 2148
} 
# 2151
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2152
_mm_cmpneq_epi8_mask(__m128i __X, __m128i __Y) 
# 2153
{ 
# 2154
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4, (__mmask16)(-1)); 
# 2157
} 
# 2160
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2161
_mm_cmplt_epi8_mask(__m128i __X, __m128i __Y) 
# 2162
{ 
# 2163
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1, (__mmask16)(-1)); 
# 2166
} 
# 2169
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2170
_mm_cmpge_epi8_mask(__m128i __X, __m128i __Y) 
# 2171
{ 
# 2172
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5, (__mmask16)(-1)); 
# 2175
} 
# 2178
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 2179
_mm_cmple_epi8_mask(__m128i __X, __m128i __Y) 
# 2180
{ 
# 2181
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2, (__mmask16)(-1)); 
# 2184
} 
# 2187
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 2188
_mm_cmpneq_epi16_mask(__m128i __X, __m128i __Y) 
# 2189
{ 
# 2190
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4, (__mmask8)(-1)); 
# 2193
} 
# 2196
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 2197
_mm_cmplt_epi16_mask(__m128i __X, __m128i __Y) 
# 2198
{ 
# 2199
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1, (__mmask8)(-1)); 
# 2202
} 
# 2205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 2206
_mm_cmpge_epi16_mask(__m128i __X, __m128i __Y) 
# 2207
{ 
# 2208
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5, (__mmask8)(-1)); 
# 2211
} 
# 2214
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 2215
_mm_cmple_epi16_mask(__m128i __X, __m128i __Y) 
# 2216
{ 
# 2217
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2, (__mmask8)(-1)); 
# 2220
} 
# 2223
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2224
_mm256_mask_mulhrs_epi16(__m256i __W, __mmask16 __U, __m256i __X, __m256i 
# 2225
__Y) 
# 2226
{ 
# 2227
return (__m256i)__builtin_ia32_pmulhrsw256_mask((__v16hi)__X, (__v16hi)__Y, (__v16hi)__W, (__mmask16)__U); 
# 2231
} 
# 2234
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2235
_mm256_maskz_mulhrs_epi16(__mmask16 __U, __m256i __X, __m256i __Y) 
# 2236
{ 
# 2237
return (__m256i)__builtin_ia32_pmulhrsw256_mask((__v16hi)__X, (__v16hi)__Y, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2242
} 
# 2245
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2246
_mm256_mask_mulhi_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2247
__B) 
# 2248
{ 
# 2249
return (__m256i)__builtin_ia32_pmulhuw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2253
} 
# 2256
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2257
_mm256_maskz_mulhi_epu16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2258
{ 
# 2259
return (__m256i)__builtin_ia32_pmulhuw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2264
} 
# 2267
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2268
_mm256_mask_mulhi_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2269
__B) 
# 2270
{ 
# 2271
return (__m256i)__builtin_ia32_pmulhw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2275
} 
# 2278
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2279
_mm256_maskz_mulhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2280
{ 
# 2281
return (__m256i)__builtin_ia32_pmulhw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2286
} 
# 2289
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2290
_mm_mask_mulhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 2291
__B) 
# 2292
{ 
# 2293
return (__m128i)__builtin_ia32_pmulhw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 2297
} 
# 2300
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2301
_mm_maskz_mulhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 2302
{ 
# 2303
return (__m128i)__builtin_ia32_pmulhw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 2308
} 
# 2311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2312
_mm_mask_mulhi_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 2313
__B) 
# 2314
{ 
# 2315
return (__m128i)__builtin_ia32_pmulhuw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 2319
} 
# 2322
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2323
_mm_maskz_mulhi_epu16(__mmask8 __U, __m128i __A, __m128i __B) 
# 2324
{ 
# 2325
return (__m128i)__builtin_ia32_pmulhuw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 2330
} 
# 2333
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2334
_mm_mask_mulhrs_epi16(__m128i __W, __mmask8 __U, __m128i __X, __m128i 
# 2335
__Y) 
# 2336
{ 
# 2337
return (__m128i)__builtin_ia32_pmulhrsw128_mask((__v8hi)__X, (__v8hi)__Y, (__v8hi)__W, (__mmask8)__U); 
# 2341
} 
# 2344
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2345
_mm_maskz_mulhrs_epi16(__mmask8 __U, __m128i __X, __m128i __Y) 
# 2346
{ 
# 2347
return (__m128i)__builtin_ia32_pmulhrsw128_mask((__v8hi)__X, (__v8hi)__Y, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 2352
} 
# 2355
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2356
_mm256_mask_mullo_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2357
__B) 
# 2358
{ 
# 2359
return (__m256i)__builtin_ia32_pmullw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2363
} 
# 2366
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2367
_mm256_maskz_mullo_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2368
{ 
# 2369
return (__m256i)__builtin_ia32_pmullw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2374
} 
# 2377
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2378
_mm_mask_mullo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 2379
__B) 
# 2380
{ 
# 2381
return (__m128i)__builtin_ia32_pmullw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 2385
} 
# 2388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2389
_mm_maskz_mullo_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 2390
{ 
# 2391
return (__m128i)__builtin_ia32_pmullw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_hi(), (__mmask8)__U); 
# 2396
} 
# 2399
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2400
_mm256_mask_cvtepi8_epi16(__m256i __W, __mmask32 __U, __m128i __A) 
# 2401
{ 
# 2402
return (__m256i)__builtin_ia32_pmovsxbw256_mask((__v16qi)__A, (__v16hi)__W, (__mmask16)__U); 
# 2405
} 
# 2408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2409
_mm256_maskz_cvtepi8_epi16(__mmask16 __U, __m128i __A) 
# 2410
{ 
# 2411
return (__m256i)__builtin_ia32_pmovsxbw256_mask((__v16qi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2415
} 
# 2418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2419
_mm_mask_cvtepi8_epi16(__m128i __W, __mmask32 __U, __m128i __A) 
# 2420
{ 
# 2421
return (__m128i)__builtin_ia32_pmovsxbw128_mask((__v16qi)__A, (__v8hi)__W, (__mmask8)__U); 
# 2424
} 
# 2427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2428
_mm_maskz_cvtepi8_epi16(__mmask8 __U, __m128i __A) 
# 2429
{ 
# 2430
return (__m128i)__builtin_ia32_pmovsxbw128_mask((__v16qi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 2434
} 
# 2437
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2438
_mm256_mask_cvtepu8_epi16(__m256i __W, __mmask32 __U, __m128i __A) 
# 2439
{ 
# 2440
return (__m256i)__builtin_ia32_pmovzxbw256_mask((__v16qi)__A, (__v16hi)__W, (__mmask16)__U); 
# 2443
} 
# 2446
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2447
_mm256_maskz_cvtepu8_epi16(__mmask16 __U, __m128i __A) 
# 2448
{ 
# 2449
return (__m256i)__builtin_ia32_pmovzxbw256_mask((__v16qi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2453
} 
# 2456
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2457
_mm_mask_cvtepu8_epi16(__m128i __W, __mmask32 __U, __m128i __A) 
# 2458
{ 
# 2459
return (__m128i)__builtin_ia32_pmovzxbw128_mask((__v16qi)__A, (__v8hi)__W, (__mmask8)__U); 
# 2462
} 
# 2465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2466
_mm_maskz_cvtepu8_epi16(__mmask8 __U, __m128i __A) 
# 2467
{ 
# 2468
return (__m128i)__builtin_ia32_pmovzxbw128_mask((__v16qi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 2472
} 
# 2475
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2476
_mm256_mask_avg_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2477
__B) 
# 2478
{ 
# 2479
return (__m256i)__builtin_ia32_pavgb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2483
} 
# 2486
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2487
_mm256_maskz_avg_epu8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2488
{ 
# 2489
return (__m256i)__builtin_ia32_pavgb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2494
} 
# 2497
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2498
_mm_mask_avg_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 2499
__B) 
# 2500
{ 
# 2501
return (__m128i)__builtin_ia32_pavgb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 2505
} 
# 2508
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2509
_mm_maskz_avg_epu8(__mmask16 __U, __m128i __A, __m128i __B) 
# 2510
{ 
# 2511
return (__m128i)__builtin_ia32_pavgb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 2516
} 
# 2519
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2520
_mm256_mask_avg_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2521
__B) 
# 2522
{ 
# 2523
return (__m256i)__builtin_ia32_pavgw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2527
} 
# 2530
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2531
_mm256_maskz_avg_epu16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2532
{ 
# 2533
return (__m256i)__builtin_ia32_pavgw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2538
} 
# 2541
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2542
_mm_mask_avg_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 2543
__B) 
# 2544
{ 
# 2545
return (__m128i)__builtin_ia32_pavgw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 2549
} 
# 2552
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2553
_mm_maskz_avg_epu16(__mmask8 __U, __m128i __A, __m128i __B) 
# 2554
{ 
# 2555
return (__m128i)__builtin_ia32_pavgw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 2560
} 
# 2563
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2564
_mm256_mask_add_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2565
__B) 
# 2566
{ 
# 2567
return (__m256i)__builtin_ia32_paddb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2571
} 
# 2574
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2575
_mm256_maskz_add_epi8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2576
{ 
# 2577
return (__m256i)__builtin_ia32_paddb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2582
} 
# 2585
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2586
_mm256_mask_add_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2587
__B) 
# 2588
{ 
# 2589
return (__m256i)__builtin_ia32_paddw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2593
} 
# 2596
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2597
_mm256_maskz_add_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2598
{ 
# 2599
return (__m256i)__builtin_ia32_paddw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2604
} 
# 2607
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2608
_mm256_mask_adds_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2609
__B) 
# 2610
{ 
# 2611
return (__m256i)__builtin_ia32_paddsb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2615
} 
# 2618
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2619
_mm256_maskz_adds_epi8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2620
{ 
# 2621
return (__m256i)__builtin_ia32_paddsb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2626
} 
# 2629
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2630
_mm256_mask_adds_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2631
__B) 
# 2632
{ 
# 2633
return (__m256i)__builtin_ia32_paddsw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2637
} 
# 2640
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2641
_mm256_maskz_adds_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2642
{ 
# 2643
return (__m256i)__builtin_ia32_paddsw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2648
} 
# 2651
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2652
_mm256_mask_adds_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2653
__B) 
# 2654
{ 
# 2655
return (__m256i)__builtin_ia32_paddusb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2659
} 
# 2662
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2663
_mm256_maskz_adds_epu8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2664
{ 
# 2665
return (__m256i)__builtin_ia32_paddusb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2670
} 
# 2673
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2674
_mm256_mask_adds_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2675
__B) 
# 2676
{ 
# 2677
return (__m256i)__builtin_ia32_paddusw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2681
} 
# 2684
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2685
_mm256_maskz_adds_epu16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2686
{ 
# 2687
return (__m256i)__builtin_ia32_paddusw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2692
} 
# 2695
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2696
_mm256_mask_sub_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2697
__B) 
# 2698
{ 
# 2699
return (__m256i)__builtin_ia32_psubb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2703
} 
# 2706
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2707
_mm256_maskz_sub_epi8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2708
{ 
# 2709
return (__m256i)__builtin_ia32_psubb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2714
} 
# 2717
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2718
_mm256_mask_sub_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2719
__B) 
# 2720
{ 
# 2721
return (__m256i)__builtin_ia32_psubw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2725
} 
# 2728
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2729
_mm256_maskz_sub_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2730
{ 
# 2731
return (__m256i)__builtin_ia32_psubw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2736
} 
# 2739
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2740
_mm256_mask_subs_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2741
__B) 
# 2742
{ 
# 2743
return (__m256i)__builtin_ia32_psubsb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2747
} 
# 2750
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2751
_mm256_maskz_subs_epi8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2752
{ 
# 2753
return (__m256i)__builtin_ia32_psubsb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2758
} 
# 2761
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2762
_mm256_mask_subs_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2763
__B) 
# 2764
{ 
# 2765
return (__m256i)__builtin_ia32_psubsw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2769
} 
# 2772
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2773
_mm256_maskz_subs_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2774
{ 
# 2775
return (__m256i)__builtin_ia32_psubsw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2780
} 
# 2783
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2784
_mm256_mask_subs_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2785
__B) 
# 2786
{ 
# 2787
return (__m256i)__builtin_ia32_psubusb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2791
} 
# 2794
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2795
_mm256_maskz_subs_epu8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2796
{ 
# 2797
return (__m256i)__builtin_ia32_psubusb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2802
} 
# 2805
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2806
_mm256_mask_subs_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2807
__B) 
# 2808
{ 
# 2809
return (__m256i)__builtin_ia32_psubusw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2813
} 
# 2816
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2817
_mm256_maskz_subs_epu16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2818
{ 
# 2819
return (__m256i)__builtin_ia32_psubusw256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2824
} 
# 2827
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2828
_mm_mask_add_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 2829
__B) 
# 2830
{ 
# 2831
return (__m128i)__builtin_ia32_paddb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 2835
} 
# 2838
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2839
_mm_maskz_add_epi8(__mmask16 __U, __m128i __A, __m128i __B) 
# 2840
{ 
# 2841
return (__m128i)__builtin_ia32_paddb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 2846
} 
# 2849
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2850
_mm_mask_add_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 2851
__B) 
# 2852
{ 
# 2853
return (__m128i)__builtin_ia32_paddw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 2857
} 
# 2860
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2861
_mm_maskz_add_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 2862
{ 
# 2863
return (__m128i)__builtin_ia32_paddw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 2868
} 
# 2871
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2872
_mm256_mask_unpackhi_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2873
__B) 
# 2874
{ 
# 2875
return (__m256i)__builtin_ia32_punpckhbw256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2879
} 
# 2882
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2883
_mm256_maskz_unpackhi_epi8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2884
{ 
# 2885
return (__m256i)__builtin_ia32_punpckhbw256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2890
} 
# 2893
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2894
_mm_mask_unpackhi_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 2895
__B) 
# 2896
{ 
# 2897
return (__m128i)__builtin_ia32_punpckhbw128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 2901
} 
# 2904
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2905
_mm_maskz_unpackhi_epi8(__mmask16 __U, __m128i __A, __m128i __B) 
# 2906
{ 
# 2907
return (__m128i)__builtin_ia32_punpckhbw128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 2912
} 
# 2915
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2916
_mm256_mask_unpackhi_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 2917
__B) 
# 2918
{ 
# 2919
return (__m256i)__builtin_ia32_punpckhwd256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 2923
} 
# 2926
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2927
_mm256_maskz_unpackhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 2928
{ 
# 2929
return (__m256i)__builtin_ia32_punpckhwd256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 2934
} 
# 2937
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2938
_mm_mask_unpackhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 2939
__B) 
# 2940
{ 
# 2941
return (__m128i)__builtin_ia32_punpckhwd128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 2945
} 
# 2948
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2949
_mm_maskz_unpackhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 2950
{ 
# 2951
return (__m128i)__builtin_ia32_punpckhwd128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 2956
} 
# 2959
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2960
_mm256_mask_unpacklo_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 2961
__B) 
# 2962
{ 
# 2963
return (__m256i)__builtin_ia32_punpcklbw256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 2967
} 
# 2970
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 2971
_mm256_maskz_unpacklo_epi8(__mmask32 __U, __m256i __A, __m256i __B) 
# 2972
{ 
# 2973
return (__m256i)__builtin_ia32_punpcklbw256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 2978
} 
# 2981
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2982
_mm_mask_unpacklo_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 2983
__B) 
# 2984
{ 
# 2985
return (__m128i)__builtin_ia32_punpcklbw128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 2989
} 
# 2992
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 2993
_mm_maskz_unpacklo_epi8(__mmask16 __U, __m128i __A, __m128i __B) 
# 2994
{ 
# 2995
return (__m128i)__builtin_ia32_punpcklbw128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 3000
} 
# 3003
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3004
_mm256_mask_unpacklo_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 3005
__B) 
# 3006
{ 
# 3007
return (__m256i)__builtin_ia32_punpcklwd256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 3011
} 
# 3014
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3015
_mm256_maskz_unpacklo_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 3016
{ 
# 3017
return (__m256i)__builtin_ia32_punpcklwd256_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 3022
} 
# 3025
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3026
_mm_mask_unpacklo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3027
__B) 
# 3028
{ 
# 3029
return (__m128i)__builtin_ia32_punpcklwd128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 3033
} 
# 3036
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3037
_mm_maskz_unpacklo_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 3038
{ 
# 3039
return (__m128i)__builtin_ia32_punpcklwd128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3044
} 
# 3047
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3048
_mm_cmpeq_epi8_mask(__m128i __A, __m128i __B) 
# 3049
{ 
# 3050
return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__A, (__v16qi)__B, (__mmask16)(-1)); 
# 3053
} 
# 3056
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3057
_mm_cmpeq_epu8_mask(__m128i __A, __m128i __B) 
# 3058
{ 
# 3059
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 0, (__mmask16)(-1)); 
# 3062
} 
# 3065
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3066
_mm_mask_cmpeq_epu8_mask(__mmask16 __U, __m128i __A, __m128i __B) 
# 3067
{ 
# 3068
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 0, __U); 
# 3071
} 
# 3074
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3075
_mm_mask_cmpeq_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) 
# 3076
{ 
# 3077
return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__A, (__v16qi)__B, __U); 
# 3080
} 
# 3083
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3084
_mm256_cmpeq_epu8_mask(__m256i __A, __m256i __B) 
# 3085
{ 
# 3086
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 0, (__mmask32)(-1)); 
# 3089
} 
# 3092
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3093
_mm256_cmpeq_epi8_mask(__m256i __A, __m256i __B) 
# 3094
{ 
# 3095
return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__A, (__v32qi)__B, (__mmask32)(-1)); 
# 3098
} 
# 3101
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3102
_mm256_mask_cmpeq_epu8_mask(__mmask32 __U, __m256i __A, __m256i __B) 
# 3103
{ 
# 3104
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 0, __U); 
# 3107
} 
# 3110
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3111
_mm256_mask_cmpeq_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) 
# 3112
{ 
# 3113
return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__A, (__v32qi)__B, __U); 
# 3116
} 
# 3119
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3120
_mm_cmpeq_epu16_mask(__m128i __A, __m128i __B) 
# 3121
{ 
# 3122
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 0, (__mmask8)(-1)); 
# 3125
} 
# 3128
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3129
_mm_cmpeq_epi16_mask(__m128i __A, __m128i __B) 
# 3130
{ 
# 3131
return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__A, (__v8hi)__B, (__mmask8)(-1)); 
# 3134
} 
# 3137
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3138
_mm_mask_cmpeq_epu16_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 3139
{ 
# 3140
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 0, __U); 
# 3142
} 
# 3145
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3146
_mm_mask_cmpeq_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 3147
{ 
# 3148
return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__A, (__v8hi)__B, __U); 
# 3150
} 
# 3153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3154
_mm256_cmpeq_epu16_mask(__m256i __A, __m256i __B) 
# 3155
{ 
# 3156
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 0, (__mmask16)(-1)); 
# 3159
} 
# 3162
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3163
_mm256_cmpeq_epi16_mask(__m256i __A, __m256i __B) 
# 3164
{ 
# 3165
return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__A, (__v16hi)__B, (__mmask16)(-1)); 
# 3168
} 
# 3171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3172
_mm256_mask_cmpeq_epu16_mask(__mmask16 __U, __m256i __A, __m256i __B) 
# 3173
{ 
# 3174
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 0, __U); 
# 3177
} 
# 3180
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3181
_mm256_mask_cmpeq_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) 
# 3182
{ 
# 3183
return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__A, (__v16hi)__B, __U); 
# 3186
} 
# 3189
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3190
_mm_cmpgt_epu8_mask(__m128i __A, __m128i __B) 
# 3191
{ 
# 3192
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 6, (__mmask16)(-1)); 
# 3195
} 
# 3198
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3199
_mm_cmpgt_epi8_mask(__m128i __A, __m128i __B) 
# 3200
{ 
# 3201
return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__A, (__v16qi)__B, (__mmask16)(-1)); 
# 3204
} 
# 3207
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3208
_mm_mask_cmpgt_epu8_mask(__mmask16 __U, __m128i __A, __m128i __B) 
# 3209
{ 
# 3210
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 6, __U); 
# 3213
} 
# 3216
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3217
_mm_mask_cmpgt_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) 
# 3218
{ 
# 3219
return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__A, (__v16qi)__B, __U); 
# 3222
} 
# 3225
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3226
_mm256_cmpgt_epu8_mask(__m256i __A, __m256i __B) 
# 3227
{ 
# 3228
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 6, (__mmask32)(-1)); 
# 3231
} 
# 3234
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3235
_mm256_cmpgt_epi8_mask(__m256i __A, __m256i __B) 
# 3236
{ 
# 3237
return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__A, (__v32qi)__B, (__mmask32)(-1)); 
# 3240
} 
# 3243
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3244
_mm256_mask_cmpgt_epu8_mask(__mmask32 __U, __m256i __A, __m256i __B) 
# 3245
{ 
# 3246
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 6, __U); 
# 3249
} 
# 3252
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3253
_mm256_mask_cmpgt_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) 
# 3254
{ 
# 3255
return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__A, (__v32qi)__B, __U); 
# 3258
} 
# 3261
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3262
_mm_cmpgt_epu16_mask(__m128i __A, __m128i __B) 
# 3263
{ 
# 3264
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 6, (__mmask8)(-1)); 
# 3267
} 
# 3270
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3271
_mm_cmpgt_epi16_mask(__m128i __A, __m128i __B) 
# 3272
{ 
# 3273
return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__A, (__v8hi)__B, (__mmask8)(-1)); 
# 3276
} 
# 3279
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3280
_mm_mask_cmpgt_epu16_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 3281
{ 
# 3282
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 6, __U); 
# 3284
} 
# 3287
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3288
_mm_mask_cmpgt_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 3289
{ 
# 3290
return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__A, (__v8hi)__B, __U); 
# 3292
} 
# 3295
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3296
_mm256_cmpgt_epu16_mask(__m256i __A, __m256i __B) 
# 3297
{ 
# 3298
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 6, (__mmask16)(-1)); 
# 3301
} 
# 3304
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3305
_mm256_cmpgt_epi16_mask(__m256i __A, __m256i __B) 
# 3306
{ 
# 3307
return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__A, (__v16hi)__B, (__mmask16)(-1)); 
# 3310
} 
# 3313
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3314
_mm256_mask_cmpgt_epu16_mask(__mmask16 __U, __m256i __A, __m256i __B) 
# 3315
{ 
# 3316
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 6, __U); 
# 3319
} 
# 3322
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3323
_mm256_mask_cmpgt_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) 
# 3324
{ 
# 3325
return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__A, (__v16hi)__B, __U); 
# 3328
} 
# 3331
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3332
_mm_testn_epi8_mask(__m128i __A, __m128i __B) 
# 3333
{ 
# 3334
return (__mmask16)__builtin_ia32_ptestnmb128((__v16qi)__A, (__v16qi)__B, (__mmask16)(-1)); 
# 3337
} 
# 3340
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3341
_mm_mask_testn_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) 
# 3342
{ 
# 3343
return (__mmask16)__builtin_ia32_ptestnmb128((__v16qi)__A, (__v16qi)__B, __U); 
# 3345
} 
# 3348
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3349
_mm256_testn_epi8_mask(__m256i __A, __m256i __B) 
# 3350
{ 
# 3351
return (__mmask32)__builtin_ia32_ptestnmb256((__v32qi)__A, (__v32qi)__B, (__mmask32)(-1)); 
# 3354
} 
# 3357
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3358
_mm256_mask_testn_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) 
# 3359
{ 
# 3360
return (__mmask32)__builtin_ia32_ptestnmb256((__v32qi)__A, (__v32qi)__B, __U); 
# 3362
} 
# 3365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3366
_mm_testn_epi16_mask(__m128i __A, __m128i __B) 
# 3367
{ 
# 3368
return (__mmask8)__builtin_ia32_ptestnmw128((__v8hi)__A, (__v8hi)__B, (__mmask8)(-1)); 
# 3371
} 
# 3374
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 3375
_mm_mask_testn_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) 
# 3376
{ 
# 3377
return (__mmask8)__builtin_ia32_ptestnmw128((__v8hi)__A, (__v8hi)__B, __U); 
# 3379
} 
# 3382
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3383
_mm256_testn_epi16_mask(__m256i __A, __m256i __B) 
# 3384
{ 
# 3385
return (__mmask16)__builtin_ia32_ptestnmw256((__v16hi)__A, (__v16hi)__B, (__mmask16)(-1)); 
# 3388
} 
# 3391
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3392
_mm256_mask_testn_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) 
# 3393
{ 
# 3394
return (__mmask16)__builtin_ia32_ptestnmw256((__v16hi)__A, (__v16hi)__B, __U); 
# 3396
} 
# 3399
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3400
_mm256_mask_shuffle_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i 
# 3401
__B) 
# 3402
{ 
# 3403
return (__m256i)__builtin_ia32_pshufb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U); 
# 3407
} 
# 3410
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3411
_mm256_maskz_shuffle_epi8(__mmask32 __U, __m256i __A, __m256i __B) 
# 3412
{ 
# 3413
return (__m256i)__builtin_ia32_pshufb256_mask((__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 3418
} 
# 3421
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3422
_mm_mask_shuffle_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 3423
__B) 
# 3424
{ 
# 3425
return (__m128i)__builtin_ia32_pshufb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 3429
} 
# 3432
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3433
_mm_maskz_shuffle_epi8(__mmask16 __U, __m128i __A, __m128i __B) 
# 3434
{ 
# 3435
return (__m128i)__builtin_ia32_pshufb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 3440
} 
# 3443
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3444
_mm256_maskz_packs_epi16(__mmask32 __M, __m256i __A, __m256i __B) 
# 3445
{ 
# 3446
return (__m256i)__builtin_ia32_packsswb256_mask((__v16hi)__A, (__v16hi)__B, (__v32qi)_mm256_setzero_si256(), __M); 
# 3451
} 
# 3454
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3455
_mm256_mask_packs_epi16(__m256i __W, __mmask32 __M, __m256i __A, __m256i 
# 3456
__B) 
# 3457
{ 
# 3458
return (__m256i)__builtin_ia32_packsswb256_mask((__v16hi)__A, (__v16hi)__B, (__v32qi)__W, __M); 
# 3462
} 
# 3465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3466
_mm_maskz_packs_epi16(__mmask16 __M, __m128i __A, __m128i __B) 
# 3467
{ 
# 3468
return (__m128i)__builtin_ia32_packsswb128_mask((__v8hi)__A, (__v8hi)__B, (__v16qi)_mm_setzero_si128(), __M); 
# 3473
} 
# 3476
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3477
_mm_mask_packs_epi16(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 3478
__B) 
# 3479
{ 
# 3480
return (__m128i)__builtin_ia32_packsswb128_mask((__v8hi)__A, (__v8hi)__B, (__v16qi)__W, __M); 
# 3484
} 
# 3487
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3488
_mm256_maskz_packus_epi16(__mmask32 __M, __m256i __A, __m256i __B) 
# 3489
{ 
# 3490
return (__m256i)__builtin_ia32_packuswb256_mask((__v16hi)__A, (__v16hi)__B, (__v32qi)_mm256_setzero_si256(), __M); 
# 3495
} 
# 3498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3499
_mm256_mask_packus_epi16(__m256i __W, __mmask32 __M, __m256i __A, __m256i 
# 3500
__B) 
# 3501
{ 
# 3502
return (__m256i)__builtin_ia32_packuswb256_mask((__v16hi)__A, (__v16hi)__B, (__v32qi)__W, __M); 
# 3506
} 
# 3509
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3510
_mm_maskz_packus_epi16(__mmask16 __M, __m128i __A, __m128i __B) 
# 3511
{ 
# 3512
return (__m128i)__builtin_ia32_packuswb128_mask((__v8hi)__A, (__v8hi)__B, (__v16qi)_mm_setzero_si128(), __M); 
# 3517
} 
# 3520
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3521
_mm_mask_packus_epi16(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 3522
__B) 
# 3523
{ 
# 3524
return (__m128i)__builtin_ia32_packuswb128_mask((__v8hi)__A, (__v8hi)__B, (__v16qi)__W, __M); 
# 3528
} 
# 3531
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3532
_mm256_mask_abs_epi8(__m256i __W, __mmask32 __U, __m256i __A) 
# 3533
{ 
# 3534
return (__m256i)__builtin_ia32_pabsb256_mask((__v32qi)__A, (__v32qi)__W, (__mmask32)__U); 
# 3537
} 
# 3540
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3541
_mm256_maskz_abs_epi8(__mmask32 __U, __m256i __A) 
# 3542
{ 
# 3543
return (__m256i)__builtin_ia32_pabsb256_mask((__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U); 
# 3547
} 
# 3550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3551
_mm_mask_abs_epi8(__m128i __W, __mmask16 __U, __m128i __A) 
# 3552
{ 
# 3553
return (__m128i)__builtin_ia32_pabsb128_mask((__v16qi)__A, (__v16qi)__W, (__mmask16)__U); 
# 3556
} 
# 3559
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3560
_mm_maskz_abs_epi8(__mmask16 __U, __m128i __A) 
# 3561
{ 
# 3562
return (__m128i)__builtin_ia32_pabsb128_mask((__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 3566
} 
# 3569
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3570
_mm256_mask_abs_epi16(__m256i __W, __mmask16 __U, __m256i __A) 
# 3571
{ 
# 3572
return (__m256i)__builtin_ia32_pabsw256_mask((__v16hi)__A, (__v16hi)__W, (__mmask16)__U); 
# 3575
} 
# 3578
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3579
_mm256_maskz_abs_epi16(__mmask16 __U, __m256i __A) 
# 3580
{ 
# 3581
return (__m256i)__builtin_ia32_pabsw256_mask((__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 3585
} 
# 3588
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3589
_mm_mask_abs_epi16(__m128i __W, __mmask8 __U, __m128i __A) 
# 3590
{ 
# 3591
return (__m128i)__builtin_ia32_pabsw128_mask((__v8hi)__A, (__v8hi)__W, (__mmask8)__U); 
# 3594
} 
# 3597
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3598
_mm_maskz_abs_epi16(__mmask8 __U, __m128i __A) 
# 3599
{ 
# 3600
return (__m128i)__builtin_ia32_pabsw128_mask((__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3604
} 
# 3607
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3608
_mm256_cmpneq_epu8_mask(__m256i __X, __m256i __Y) 
# 3609
{ 
# 3610
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4, (__mmask32)(-1)); 
# 3613
} 
# 3616
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3617
_mm256_cmplt_epu8_mask(__m256i __X, __m256i __Y) 
# 3618
{ 
# 3619
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1, (__mmask32)(-1)); 
# 3622
} 
# 3625
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3626
_mm256_cmpge_epu8_mask(__m256i __X, __m256i __Y) 
# 3627
{ 
# 3628
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5, (__mmask32)(-1)); 
# 3631
} 
# 3634
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask32 
# 3635
_mm256_cmple_epu8_mask(__m256i __X, __m256i __Y) 
# 3636
{ 
# 3637
return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2, (__mmask32)(-1)); 
# 3640
} 
# 3643
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3644
_mm256_cmpneq_epu16_mask(__m256i __X, __m256i __Y) 
# 3645
{ 
# 3646
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4, (__mmask16)(-1)); 
# 3649
} 
# 3652
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3653
_mm256_cmplt_epu16_mask(__m256i __X, __m256i __Y) 
# 3654
{ 
# 3655
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1, (__mmask16)(-1)); 
# 3658
} 
# 3661
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3662
_mm256_cmpge_epu16_mask(__m256i __X, __m256i __Y) 
# 3663
{ 
# 3664
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5, (__mmask16)(-1)); 
# 3667
} 
# 3670
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 3671
_mm256_cmple_epu16_mask(__m256i __X, __m256i __Y) 
# 3672
{ 
# 3673
return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2, (__mmask16)(-1)); 
# 3676
} 
# 3679
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 3680
_mm256_mask_storeu_epi16(void *__P, __mmask16 __U, __m256i __A) 
# 3681
{ 
# 3682
__builtin_ia32_storedquhi256_mask((__v16hi *)__P, (__v16hi)__A, (__mmask16)__U); 
# 3685
} 
# 3688
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 3689
_mm_mask_storeu_epi16(void *__P, __mmask8 __U, __m128i __A) 
# 3690
{ 
# 3691
__builtin_ia32_storedquhi128_mask((__v8hi *)__P, (__v8hi)__A, (__mmask8)__U); 
# 3694
} 
# 3697
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3698
_mm_mask_adds_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3699
__B) 
# 3700
{ 
# 3701
return (__m128i)__builtin_ia32_paddsw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 3705
} 
# 3708
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3709
_mm_mask_subs_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 3710
__B) 
# 3711
{ 
# 3712
return (__m128i)__builtin_ia32_psubsb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 3716
} 
# 3719
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3720
_mm_maskz_subs_epi8(__mmask16 __U, __m128i __A, __m128i __B) 
# 3721
{ 
# 3722
return (__m128i)__builtin_ia32_psubsb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 3727
} 
# 3730
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3731
_mm_mask_subs_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3732
__B) 
# 3733
{ 
# 3734
return (__m128i)__builtin_ia32_psubsw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 3738
} 
# 3741
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3742
_mm_maskz_subs_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 3743
{ 
# 3744
return (__m128i)__builtin_ia32_psubsw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3749
} 
# 3752
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3753
_mm_mask_subs_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 3754
__B) 
# 3755
{ 
# 3756
return (__m128i)__builtin_ia32_psubusb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 3760
} 
# 3763
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3764
_mm_maskz_subs_epu8(__mmask16 __U, __m128i __A, __m128i __B) 
# 3765
{ 
# 3766
return (__m128i)__builtin_ia32_psubusb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 3771
} 
# 3774
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3775
_mm_mask_subs_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3776
__B) 
# 3777
{ 
# 3778
return (__m128i)__builtin_ia32_psubusw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 3782
} 
# 3785
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3786
_mm_maskz_subs_epu16(__mmask8 __U, __m128i __A, __m128i __B) 
# 3787
{ 
# 3788
return (__m128i)__builtin_ia32_psubusw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3793
} 
# 3796
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3797
_mm256_mask_srl_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i 
# 3798
__B) 
# 3799
{ 
# 3800
return (__m256i)__builtin_ia32_psrlw256_mask((__v16hi)__A, (__v8hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 3804
} 
# 3807
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3808
_mm256_maskz_srl_epi16(__mmask16 __U, __m256i __A, __m128i __B) 
# 3809
{ 
# 3810
return (__m256i)__builtin_ia32_psrlw256_mask((__v16hi)__A, (__v8hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 3815
} 
# 3818
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3819
_mm_mask_srl_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3820
__B) 
# 3821
{ 
# 3822
return (__m128i)__builtin_ia32_psrlw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 3826
} 
# 3829
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3830
_mm_maskz_srl_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 3831
{ 
# 3832
return (__m128i)__builtin_ia32_psrlw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3837
} 
# 3840
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3841
_mm256_mask_sra_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i 
# 3842
__B) 
# 3843
{ 
# 3844
return (__m256i)__builtin_ia32_psraw256_mask((__v16hi)__A, (__v8hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 3848
} 
# 3851
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 3852
_mm256_maskz_sra_epi16(__mmask16 __U, __m256i __A, __m128i __B) 
# 3853
{ 
# 3854
return (__m256i)__builtin_ia32_psraw256_mask((__v16hi)__A, (__v8hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 3859
} 
# 3862
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3863
_mm_mask_sra_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3864
__B) 
# 3865
{ 
# 3866
return (__m128i)__builtin_ia32_psraw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 3870
} 
# 3873
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3874
_mm_maskz_sra_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 3875
{ 
# 3876
return (__m128i)__builtin_ia32_psraw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3881
} 
# 3884
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3885
_mm_maskz_adds_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 3886
{ 
# 3887
return (__m128i)__builtin_ia32_paddsw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3892
} 
# 3895
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3896
_mm_mask_adds_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 3897
__B) 
# 3898
{ 
# 3899
return (__m128i)__builtin_ia32_paddusb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 3903
} 
# 3906
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3907
_mm_maskz_adds_epu8(__mmask16 __U, __m128i __A, __m128i __B) 
# 3908
{ 
# 3909
return (__m128i)__builtin_ia32_paddusb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 3914
} 
# 3917
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3918
_mm_mask_adds_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3919
__B) 
# 3920
{ 
# 3921
return (__m128i)__builtin_ia32_paddusw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 3925
} 
# 3928
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3929
_mm_maskz_adds_epu16(__mmask8 __U, __m128i __A, __m128i __B) 
# 3930
{ 
# 3931
return (__m128i)__builtin_ia32_paddusw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3936
} 
# 3939
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3940
_mm_mask_sub_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 3941
__B) 
# 3942
{ 
# 3943
return (__m128i)__builtin_ia32_psubb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 3947
} 
# 3950
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3951
_mm_maskz_sub_epi8(__mmask16 __U, __m128i __A, __m128i __B) 
# 3952
{ 
# 3953
return (__m128i)__builtin_ia32_psubb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 3958
} 
# 3961
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3962
_mm_mask_sub_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 3963
__B) 
# 3964
{ 
# 3965
return (__m128i)__builtin_ia32_psubw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 3969
} 
# 3972
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3973
_mm_maskz_sub_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 3974
{ 
# 3975
return (__m128i)__builtin_ia32_psubw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 3980
} 
# 3983
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3984
_mm_mask_adds_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i 
# 3985
__B) 
# 3986
{ 
# 3987
return (__m128i)__builtin_ia32_paddsb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U); 
# 3991
} 
# 3994
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 3995
_mm_maskz_adds_epi8(__mmask16 __U, __m128i __A, __m128i __B) 
# 3996
{ 
# 3997
return (__m128i)__builtin_ia32_paddsb128_mask((__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U); 
# 4002
} 
# 4005
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4006
_mm_cvtepi16_epi8(__m128i __A) 
# 4007
{ 
# 4009
return (__m128i)__builtin_ia32_pmovwb128_mask((__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)(-1)); 
# 4012
} 
# 4015
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4016
_mm_mask_cvtepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) 
# 4017
{ 
# 4018
return (__m128i)__builtin_ia32_pmovwb128_mask((__v8hi)__A, (__v16qi)__O, __M); 
# 4020
} 
# 4023
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4024
_mm_maskz_cvtepi16_epi8(__mmask8 __M, __m128i __A) 
# 4025
{ 
# 4026
return (__m128i)__builtin_ia32_pmovwb128_mask((__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M); 
# 4030
} 
# 4033
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4034
_mm256_srav_epi16(__m256i __A, __m256i __B) 
# 4035
{ 
# 4036
return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)(-1)); 
# 4041
} 
# 4044
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4045
_mm256_mask_srav_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 4046
__B) 
# 4047
{ 
# 4048
return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 4052
} 
# 4055
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4056
_mm256_maskz_srav_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 4057
{ 
# 4058
return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 4063
} 
# 4066
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4067
_mm_srav_epi16(__m128i __A, __m128i __B) 
# 4068
{ 
# 4069
return (__m128i)__builtin_ia32_psrav8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_hi(), (__mmask8)(-1)); 
# 4074
} 
# 4077
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4078
_mm_mask_srav_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 4079
__B) 
# 4080
{ 
# 4081
return (__m128i)__builtin_ia32_psrav8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 4085
} 
# 4088
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4089
_mm_maskz_srav_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 4090
{ 
# 4091
return (__m128i)__builtin_ia32_psrav8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 4096
} 
# 4099
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4100
_mm256_srlv_epi16(__m256i __A, __m256i __B) 
# 4101
{ 
# 4102
return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)(-1)); 
# 4107
} 
# 4110
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4111
_mm256_mask_srlv_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 4112
__B) 
# 4113
{ 
# 4114
return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 4118
} 
# 4121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4122
_mm256_maskz_srlv_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 4123
{ 
# 4124
return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 4129
} 
# 4132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4133
_mm_srlv_epi16(__m128i __A, __m128i __B) 
# 4134
{ 
# 4135
return (__m128i)__builtin_ia32_psrlv8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_hi(), (__mmask8)(-1)); 
# 4140
} 
# 4143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4144
_mm_mask_srlv_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 4145
__B) 
# 4146
{ 
# 4147
return (__m128i)__builtin_ia32_psrlv8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 4151
} 
# 4154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4155
_mm_maskz_srlv_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 4156
{ 
# 4157
return (__m128i)__builtin_ia32_psrlv8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 4162
} 
# 4165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4166
_mm256_sllv_epi16(__m256i __A, __m256i __B) 
# 4167
{ 
# 4168
return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)(-1)); 
# 4173
} 
# 4176
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4177
_mm256_mask_sllv_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i 
# 4178
__B) 
# 4179
{ 
# 4180
return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 4184
} 
# 4187
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4188
_mm256_maskz_sllv_epi16(__mmask16 __U, __m256i __A, __m256i __B) 
# 4189
{ 
# 4190
return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 4195
} 
# 4198
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4199
_mm_sllv_epi16(__m128i __A, __m128i __B) 
# 4200
{ 
# 4201
return (__m128i)__builtin_ia32_psllv8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_hi(), (__mmask8)(-1)); 
# 4206
} 
# 4209
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4210
_mm_mask_sllv_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 4211
__B) 
# 4212
{ 
# 4213
return (__m128i)__builtin_ia32_psllv8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 4217
} 
# 4220
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4221
_mm_maskz_sllv_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 4222
{ 
# 4223
return (__m128i)__builtin_ia32_psllv8hi_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 4228
} 
# 4231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4232
_mm_mask_sll_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 4233
__B) 
# 4234
{ 
# 4235
return (__m128i)__builtin_ia32_psllw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)__W, (__mmask8)__U); 
# 4239
} 
# 4242
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4243
_mm_maskz_sll_epi16(__mmask8 __U, __m128i __A, __m128i __B) 
# 4244
{ 
# 4245
return (__m128i)__builtin_ia32_psllw128_mask((__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U); 
# 4250
} 
# 4253
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4254
_mm256_mask_sll_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i 
# 4255
__B) 
# 4256
{ 
# 4257
return (__m256i)__builtin_ia32_psllw256_mask((__v16hi)__A, (__v8hi)__B, (__v16hi)__W, (__mmask16)__U); 
# 4261
} 
# 4264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4265
_mm256_maskz_sll_epi16(__mmask16 __U, __m256i __A, __m128i __B) 
# 4266
{ 
# 4267
return (__m256i)__builtin_ia32_psllw256_mask((__v16hi)__A, (__v8hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U); 
# 4272
} 
# 4275
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4276
_mm256_maskz_packus_epi32(__mmask16 __M, __m256i __A, __m256i __B) 
# 4277
{ 
# 4278
return (__m256i)__builtin_ia32_packusdw256_mask((__v8si)__A, (__v8si)__B, (__v16hi)_mm256_setzero_si256(), __M); 
# 4283
} 
# 4286
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4287
_mm256_mask_packus_epi32(__m256i __W, __mmask16 __M, __m256i __A, __m256i 
# 4288
__B) 
# 4289
{ 
# 4290
return (__m256i)__builtin_ia32_packusdw256_mask((__v8si)__A, (__v8si)__B, (__v16hi)__W, __M); 
# 4294
} 
# 4297
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4298
_mm_maskz_packus_epi32(__mmask8 __M, __m128i __A, __m128i __B) 
# 4299
{ 
# 4300
return (__m128i)__builtin_ia32_packusdw128_mask((__v4si)__A, (__v4si)__B, (__v8hi)_mm_setzero_si128(), __M); 
# 4305
} 
# 4308
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4309
_mm_mask_packus_epi32(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 4310
__B) 
# 4311
{ 
# 4312
return (__m128i)__builtin_ia32_packusdw128_mask((__v4si)__A, (__v4si)__B, (__v8hi)__W, __M); 
# 4315
} 
# 4318
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4319
_mm256_maskz_packs_epi32(__mmask16 __M, __m256i __A, __m256i __B) 
# 4320
{ 
# 4321
return (__m256i)__builtin_ia32_packssdw256_mask((__v8si)__A, (__v8si)__B, (__v16hi)_mm256_setzero_si256(), __M); 
# 4326
} 
# 4329
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 4330
_mm256_mask_packs_epi32(__m256i __W, __mmask16 __M, __m256i __A, __m256i 
# 4331
__B) 
# 4332
{ 
# 4333
return (__m256i)__builtin_ia32_packssdw256_mask((__v8si)__A, (__v8si)__B, (__v16hi)__W, __M); 
# 4337
} 
# 4340
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4341
_mm_maskz_packs_epi32(__mmask8 __M, __m128i __A, __m128i __B) 
# 4342
{ 
# 4343
return (__m128i)__builtin_ia32_packssdw128_mask((__v4si)__A, (__v4si)__B, (__v8hi)_mm_setzero_si128(), __M); 
# 4348
} 
# 4351
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 4352
_mm_mask_packs_epi32(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 4353
__B) 
# 4354
{ 
# 4355
return (__m128i)__builtin_ia32_packssdw128_mask((__v4si)__A, (__v4si)__B, (__v8hi)__W, __M); 
# 4358
} 
# 4361
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 4362
_mm_mask_cmpneq_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) 
# 4363
{ 
# 4364
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4, (__mmask16)__M); 
# 4367
} 
# 4370
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 4371
_mm_mask_cmplt_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) 
# 4372
{ 
# 4373
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1, (__mmask16)__M); 
# 4376
} 
# 4379
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 4380
_mm_mask_cmpge_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) 
# 4381
{ 
# 4382
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5, (__mmask16)__M); 
# 4385
} 
# 4388
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 4389
_mm_mask_cmple_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) 
# 4390
{ 
# 4391
return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2, (__mmask16)__M); 
# 4394
} 
# 4397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4398
_mm_mask_cmpneq_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 4399
{ 
# 4400
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4, (__mmask8)__M); 
# 4403
} 
# 4406
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4407
_mm_mask_cmplt_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 4408
{ 
# 4409
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1, (__mmask8)__M); 
# 4412
} 
# 4415
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4416
_mm_mask_cmpge_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 4417
{ 
# 4418
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5, (__mmask8)__M); 
# 4421
} 
# 4424
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4425
_mm_mask_cmple_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 4426
{ 
# 4427
return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2, (__mmask8)__M); 
# 4430
} 
# 4433
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 4434
_mm_mask_cmpneq_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) 
# 4435
{ 
# 4436
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4, (__mmask16)__M); 
# 4439
} 
# 4442
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 4443
_mm_mask_cmplt_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) 
# 4444
{ 
# 4445
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1, (__mmask16)__M); 
# 4448
} 
# 4451
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 4452
_mm_mask_cmpge_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) 
# 4453
{ 
# 4454
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5, (__mmask16)__M); 
# 4457
} 
# 4460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask16 
# 4461
_mm_mask_cmple_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) 
# 4462
{ 
# 4463
return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2, (__mmask16)__M); 
# 4466
} 
# 4469
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4470
_mm_mask_cmpneq_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 4471
{ 
# 4472
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4, (__mmask8)__M); 
# 4475
} 
# 4478
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4479
_mm_mask_cmplt_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 4480
{ 
# 4481
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1, (__mmask8)__M); 
# 4484
} 
# 4487
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4488
_mm_mask_cmpge_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 4489
{ 
# 4490
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5, (__mmask8)__M); 
# 4493
} 
# 4496
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4497
_mm_mask_cmple_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) 
# 4498
{ 
# 4499
return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2, (__mmask8)__M); 
# 4502
} 
# 4505
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4506
_mm256_mask_cmpneq_epu8_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4507
{ 
# 4508
return (__mmask8)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4, (__mmask8)__M); 
# 4511
} 
# 4514
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4515
_mm256_mask_cmplt_epu8_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4516
{ 
# 4517
return (__mmask8)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1, (__mmask8)__M); 
# 4520
} 
# 4523
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4524
_mm256_mask_cmpge_epu8_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4525
{ 
# 4526
return (__mmask8)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5, (__mmask8)__M); 
# 4529
} 
# 4532
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4533
_mm256_mask_cmple_epu8_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4534
{ 
# 4535
return (__mmask8)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2, (__mmask8)__M); 
# 4538
} 
# 4541
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4542
_mm256_mask_cmpneq_epu16_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4543
{ 
# 4544
return (__mmask8)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4, (__mmask8)__M); 
# 4547
} 
# 4550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4551
_mm256_mask_cmplt_epu16_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4552
{ 
# 4553
return (__mmask8)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1, (__mmask8)__M); 
# 4556
} 
# 4559
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4560
_mm256_mask_cmpge_epu16_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4561
{ 
# 4562
return (__mmask8)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5, (__mmask8)__M); 
# 4565
} 
# 4568
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4569
_mm256_mask_cmple_epu16_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4570
{ 
# 4571
return (__mmask8)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2, (__mmask8)__M); 
# 4574
} 
# 4577
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4578
_mm256_mask_cmpneq_epi8_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4579
{ 
# 4580
return (__mmask8)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4, (__mmask8)__M); 
# 4583
} 
# 4586
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4587
_mm256_mask_cmplt_epi8_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4588
{ 
# 4589
return (__mmask8)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1, (__mmask8)__M); 
# 4592
} 
# 4595
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4596
_mm256_mask_cmpge_epi8_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4597
{ 
# 4598
return (__mmask8)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5, (__mmask8)__M); 
# 4601
} 
# 4604
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4605
_mm256_mask_cmple_epi8_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4606
{ 
# 4607
return (__mmask8)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2, (__mmask8)__M); 
# 4610
} 
# 4613
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4614
_mm256_mask_cmpneq_epi16_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4615
{ 
# 4616
return (__mmask8)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4, (__mmask8)__M); 
# 4619
} 
# 4622
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4623
_mm256_mask_cmplt_epi16_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4624
{ 
# 4625
return (__mmask8)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1, (__mmask8)__M); 
# 4628
} 
# 4631
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4632
_mm256_mask_cmpge_epi16_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4633
{ 
# 4634
return (__mmask8)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5, (__mmask8)__M); 
# 4637
} 
# 4640
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 4641
_mm256_mask_cmple_epi16_mask(__mmask8 __M, __m256i __X, __m256i __Y) 
# 4642
{ 
# 4643
return (__mmask8)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2, (__mmask8)__M); 
# 4646
} 
# 4650
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512vldqintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512vl,avx512dq" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 39
_mm256_cvttpd_epi64(__m256d __A) 
# 40
{ 
# 41
return (__m256i)__builtin_ia32_cvttpd2qq256_mask((__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 45
} 
# 48
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 49
_mm256_mask_cvttpd_epi64(__m256i __W, __mmask8 __U, __m256d __A) 
# 50
{ 
# 51
return (__m256i)__builtin_ia32_cvttpd2qq256_mask((__v4df)__A, (__v4di)__W, (__mmask8)__U); 
# 54
} 
# 57
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 58
_mm256_maskz_cvttpd_epi64(__mmask8 __U, __m256d __A) 
# 59
{ 
# 60
return (__m256i)__builtin_ia32_cvttpd2qq256_mask((__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 64
} 
# 67
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 68
_mm_cvttpd_epi64(__m128d __A) 
# 69
{ 
# 70
return (__m128i)__builtin_ia32_cvttpd2qq128_mask((__v2df)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 74
} 
# 77
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 78
_mm_mask_cvttpd_epi64(__m128i __W, __mmask8 __U, __m128d __A) 
# 79
{ 
# 80
return (__m128i)__builtin_ia32_cvttpd2qq128_mask((__v2df)__A, (__v2di)__W, (__mmask8)__U); 
# 83
} 
# 86
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 87
_mm_maskz_cvttpd_epi64(__mmask8 __U, __m128d __A) 
# 88
{ 
# 89
return (__m128i)__builtin_ia32_cvttpd2qq128_mask((__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 93
} 
# 96
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 97
_mm256_cvttpd_epu64(__m256d __A) 
# 98
{ 
# 99
return (__m256i)__builtin_ia32_cvttpd2uqq256_mask((__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 103
} 
# 106
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 107
_mm256_mask_cvttpd_epu64(__m256i __W, __mmask8 __U, __m256d __A) 
# 108
{ 
# 109
return (__m256i)__builtin_ia32_cvttpd2uqq256_mask((__v4df)__A, (__v4di)__W, (__mmask8)__U); 
# 112
} 
# 115
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 116
_mm256_maskz_cvttpd_epu64(__mmask8 __U, __m256d __A) 
# 117
{ 
# 118
return (__m256i)__builtin_ia32_cvttpd2uqq256_mask((__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 122
} 
# 125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 126
_mm_cvttpd_epu64(__m128d __A) 
# 127
{ 
# 128
return (__m128i)__builtin_ia32_cvttpd2uqq128_mask((__v2df)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 132
} 
# 135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 136
_mm_mask_cvttpd_epu64(__m128i __W, __mmask8 __U, __m128d __A) 
# 137
{ 
# 138
return (__m128i)__builtin_ia32_cvttpd2uqq128_mask((__v2df)__A, (__v2di)__W, (__mmask8)__U); 
# 141
} 
# 144
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 145
_mm_maskz_cvttpd_epu64(__mmask8 __U, __m128d __A) 
# 146
{ 
# 147
return (__m128i)__builtin_ia32_cvttpd2uqq128_mask((__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 151
} 
# 154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 155
_mm256_cvtpd_epi64(__m256d __A) 
# 156
{ 
# 157
return (__m256i)__builtin_ia32_cvtpd2qq256_mask((__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 161
} 
# 164
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 165
_mm256_mask_cvtpd_epi64(__m256i __W, __mmask8 __U, __m256d __A) 
# 166
{ 
# 167
return (__m256i)__builtin_ia32_cvtpd2qq256_mask((__v4df)__A, (__v4di)__W, (__mmask8)__U); 
# 170
} 
# 173
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 174
_mm256_maskz_cvtpd_epi64(__mmask8 __U, __m256d __A) 
# 175
{ 
# 176
return (__m256i)__builtin_ia32_cvtpd2qq256_mask((__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 180
} 
# 183
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 184
_mm_cvtpd_epi64(__m128d __A) 
# 185
{ 
# 186
return (__m128i)__builtin_ia32_cvtpd2qq128_mask((__v2df)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 190
} 
# 193
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 194
_mm_mask_cvtpd_epi64(__m128i __W, __mmask8 __U, __m128d __A) 
# 195
{ 
# 196
return (__m128i)__builtin_ia32_cvtpd2qq128_mask((__v2df)__A, (__v2di)__W, (__mmask8)__U); 
# 199
} 
# 202
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 203
_mm_maskz_cvtpd_epi64(__mmask8 __U, __m128d __A) 
# 204
{ 
# 205
return (__m128i)__builtin_ia32_cvtpd2qq128_mask((__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 209
} 
# 212
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 213
_mm256_cvtpd_epu64(__m256d __A) 
# 214
{ 
# 215
return (__m256i)__builtin_ia32_cvtpd2uqq256_mask((__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 219
} 
# 222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 223
_mm256_mask_cvtpd_epu64(__m256i __W, __mmask8 __U, __m256d __A) 
# 224
{ 
# 225
return (__m256i)__builtin_ia32_cvtpd2uqq256_mask((__v4df)__A, (__v4di)__W, (__mmask8)__U); 
# 228
} 
# 231
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 232
_mm256_maskz_cvtpd_epu64(__mmask8 __U, __m256d __A) 
# 233
{ 
# 234
return (__m256i)__builtin_ia32_cvtpd2uqq256_mask((__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 238
} 
# 241
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 242
_mm_cvtpd_epu64(__m128d __A) 
# 243
{ 
# 244
return (__m128i)__builtin_ia32_cvtpd2uqq128_mask((__v2df)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 248
} 
# 251
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 252
_mm_mask_cvtpd_epu64(__m128i __W, __mmask8 __U, __m128d __A) 
# 253
{ 
# 254
return (__m128i)__builtin_ia32_cvtpd2uqq128_mask((__v2df)__A, (__v2di)__W, (__mmask8)__U); 
# 257
} 
# 260
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 261
_mm_maskz_cvtpd_epu64(__mmask8 __U, __m128d __A) 
# 262
{ 
# 263
return (__m128i)__builtin_ia32_cvtpd2uqq128_mask((__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U); 
# 267
} 
# 270
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 271
_mm256_cvttps_epi64(__m128 __A) 
# 272
{ 
# 273
return (__m256i)__builtin_ia32_cvttps2qq256_mask((__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 277
} 
# 280
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 281
_mm256_mask_cvttps_epi64(__m256i __W, __mmask8 __U, __m128 __A) 
# 282
{ 
# 283
return (__m256i)__builtin_ia32_cvttps2qq256_mask((__v4sf)__A, (__v4di)__W, (__mmask8)__U); 
# 286
} 
# 289
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 290
_mm256_maskz_cvttps_epi64(__mmask8 __U, __m128 __A) 
# 291
{ 
# 292
return (__m256i)__builtin_ia32_cvttps2qq256_mask((__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 296
} 
# 299
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 300
_mm_cvttps_epi64(__m128 __A) 
# 301
{ 
# 302
return (__m128i)__builtin_ia32_cvttps2qq128_mask((__v4sf)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 306
} 
# 309
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 310
_mm_mask_cvttps_epi64(__m128i __W, __mmask8 __U, __m128 __A) 
# 311
{ 
# 312
return (__m128i)__builtin_ia32_cvttps2qq128_mask((__v4sf)__A, (__v2di)__W, (__mmask8)__U); 
# 315
} 
# 318
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 319
_mm_maskz_cvttps_epi64(__mmask8 __U, __m128 __A) 
# 320
{ 
# 321
return (__m128i)__builtin_ia32_cvttps2qq128_mask((__v4sf)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 325
} 
# 328
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 329
_mm256_cvttps_epu64(__m128 __A) 
# 330
{ 
# 331
return (__m256i)__builtin_ia32_cvttps2uqq256_mask((__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 335
} 
# 338
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 339
_mm256_mask_cvttps_epu64(__m256i __W, __mmask8 __U, __m128 __A) 
# 340
{ 
# 341
return (__m256i)__builtin_ia32_cvttps2uqq256_mask((__v4sf)__A, (__v4di)__W, (__mmask8)__U); 
# 344
} 
# 347
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 348
_mm256_maskz_cvttps_epu64(__mmask8 __U, __m128 __A) 
# 349
{ 
# 350
return (__m256i)__builtin_ia32_cvttps2uqq256_mask((__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 354
} 
# 357
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 358
_mm_cvttps_epu64(__m128 __A) 
# 359
{ 
# 360
return (__m128i)__builtin_ia32_cvttps2uqq128_mask((__v4sf)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 364
} 
# 367
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 368
_mm_mask_cvttps_epu64(__m128i __W, __mmask8 __U, __m128 __A) 
# 369
{ 
# 370
return (__m128i)__builtin_ia32_cvttps2uqq128_mask((__v4sf)__A, (__v2di)__W, (__mmask8)__U); 
# 373
} 
# 376
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 377
_mm_maskz_cvttps_epu64(__mmask8 __U, __m128 __A) 
# 378
{ 
# 379
return (__m128i)__builtin_ia32_cvttps2uqq128_mask((__v4sf)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 383
} 
# 386
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 387
_mm256_broadcast_f64x2(__m128d __A) 
# 388
{ 
# 389
return (__m256d)__builtin_ia32_broadcastf64x2_256_mask((__v2df)__A, (__v4df)_mm256_undefined_pd(), (__mmask8)(-1)); 
# 394
} 
# 397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 398
_mm256_mask_broadcast_f64x2(__m256d __O, __mmask8 __M, __m128d __A) 
# 399
{ 
# 400
return (__m256d)__builtin_ia32_broadcastf64x2_256_mask((__v2df)__A, (__v4df)__O, __M); 
# 404
} 
# 407
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 408
_mm256_maskz_broadcast_f64x2(__mmask8 __M, __m128d __A) 
# 409
{ 
# 410
return (__m256d)__builtin_ia32_broadcastf64x2_256_mask((__v2df)__A, (__v4df)_mm256_setzero_ps(), __M); 
# 415
} 
# 418
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 419
_mm256_broadcast_i64x2(__m128i __A) 
# 420
{ 
# 421
return (__m256i)__builtin_ia32_broadcasti64x2_256_mask((__v2di)__A, (__v4di)_mm256_undefined_si256(), (__mmask8)(-1)); 
# 426
} 
# 429
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 430
_mm256_mask_broadcast_i64x2(__m256i __O, __mmask8 __M, __m128i __A) 
# 431
{ 
# 432
return (__m256i)__builtin_ia32_broadcasti64x2_256_mask((__v2di)__A, (__v4di)__O, __M); 
# 436
} 
# 439
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 440
_mm256_maskz_broadcast_i64x2(__mmask8 __M, __m128i __A) 
# 441
{ 
# 442
return (__m256i)__builtin_ia32_broadcasti64x2_256_mask((__v2di)__A, (__v4di)_mm256_setzero_si256(), __M); 
# 447
} 
# 450
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 451
_mm256_broadcast_f32x2(__m128 __A) 
# 452
{ 
# 453
return (__m256)__builtin_ia32_broadcastf32x2_256_mask((__v4sf)__A, (__v8sf)_mm256_undefined_ps(), (__mmask8)(-1)); 
# 457
} 
# 460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 461
_mm256_mask_broadcast_f32x2(__m256 __O, __mmask8 __M, __m128 __A) 
# 462
{ 
# 463
return (__m256)__builtin_ia32_broadcastf32x2_256_mask((__v4sf)__A, (__v8sf)__O, __M); 
# 466
} 
# 469
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 470
_mm256_maskz_broadcast_f32x2(__mmask8 __M, __m128 __A) 
# 471
{ 
# 472
return (__m256)__builtin_ia32_broadcastf32x2_256_mask((__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M); 
# 476
} 
# 479
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 480
_mm256_broadcast_i32x2(__m128i __A) 
# 481
{ 
# 482
return (__m256i)__builtin_ia32_broadcasti32x2_256_mask((__v4si)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)(-1)); 
# 487
} 
# 490
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 491
_mm256_mask_broadcast_i32x2(__m256i __O, __mmask8 __M, __m128i __A) 
# 492
{ 
# 493
return (__m256i)__builtin_ia32_broadcasti32x2_256_mask((__v4si)__A, (__v8si)__O, __M); 
# 497
} 
# 500
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 501
_mm256_maskz_broadcast_i32x2(__mmask8 __M, __m128i __A) 
# 502
{ 
# 503
return (__m256i)__builtin_ia32_broadcasti32x2_256_mask((__v4si)__A, (__v8si)_mm256_setzero_si256(), __M); 
# 508
} 
# 511
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 512
_mm_broadcast_i32x2(__m128i __A) 
# 513
{ 
# 514
return (__m128i)__builtin_ia32_broadcasti32x2_128_mask((__v4si)__A, (__v4si)_mm_undefined_si128(), (__mmask8)(-1)); 
# 519
} 
# 522
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 523
_mm_mask_broadcast_i32x2(__m128i __O, __mmask8 __M, __m128i __A) 
# 524
{ 
# 525
return (__m128i)__builtin_ia32_broadcasti32x2_128_mask((__v4si)__A, (__v4si)__O, __M); 
# 529
} 
# 532
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 533
_mm_maskz_broadcast_i32x2(__mmask8 __M, __m128i __A) 
# 534
{ 
# 535
return (__m128i)__builtin_ia32_broadcasti32x2_128_mask((__v4si)__A, (__v4si)_mm_setzero_si128(), __M); 
# 540
} 
# 543
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 544
_mm256_mullo_epi64(__m256i __A, __m256i __B) 
# 545
{ 
# 546
return (__m256i)(((__v4du)__A) * ((__v4du)__B)); 
# 547
} 
# 550
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 551
_mm256_mask_mullo_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i 
# 552
__B) 
# 553
{ 
# 554
return (__m256i)__builtin_ia32_pmullq256_mask((__v4di)__A, (__v4di)__B, (__v4di)__W, (__mmask8)__U); 
# 558
} 
# 561
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 562
_mm256_maskz_mullo_epi64(__mmask8 __U, __m256i __A, __m256i __B) 
# 563
{ 
# 564
return (__m256i)__builtin_ia32_pmullq256_mask((__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 569
} 
# 572
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 573
_mm_mullo_epi64(__m128i __A, __m128i __B) 
# 574
{ 
# 575
return (__m128i)(((__v2du)__A) * ((__v2du)__B)); 
# 576
} 
# 579
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 580
_mm_mask_mullo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i 
# 581
__B) 
# 582
{ 
# 583
return (__m128i)__builtin_ia32_pmullq128_mask((__v2di)__A, (__v2di)__B, (__v2di)__W, (__mmask8)__U); 
# 587
} 
# 590
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 591
_mm_maskz_mullo_epi64(__mmask8 __U, __m128i __A, __m128i __B) 
# 592
{ 
# 593
return (__m128i)__builtin_ia32_pmullq128_mask((__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 598
} 
# 601
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 602
_mm256_mask_andnot_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 603
__B) 
# 604
{ 
# 605
return (__m256d)__builtin_ia32_andnpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 609
} 
# 612
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 613
_mm256_maskz_andnot_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 614
{ 
# 615
return (__m256d)__builtin_ia32_andnpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 620
} 
# 623
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 624
_mm_mask_andnot_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d 
# 625
__B) 
# 626
{ 
# 627
return (__m128d)__builtin_ia32_andnpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 631
} 
# 634
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 635
_mm_maskz_andnot_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 636
{ 
# 637
return (__m128d)__builtin_ia32_andnpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 642
} 
# 645
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 646
_mm256_mask_andnot_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 
# 647
__B) 
# 648
{ 
# 649
return (__m256)__builtin_ia32_andnps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 653
} 
# 656
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 657
_mm256_maskz_andnot_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 658
{ 
# 659
return (__m256)__builtin_ia32_andnps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 664
} 
# 667
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 668
_mm_mask_andnot_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 669
{ 
# 670
return (__m128)__builtin_ia32_andnps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 674
} 
# 677
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 678
_mm_maskz_andnot_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 679
{ 
# 680
return (__m128)__builtin_ia32_andnps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 685
} 
# 688
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 689
_mm256_cvtps_epi64(__m128 __A) 
# 690
{ 
# 691
return (__m256i)__builtin_ia32_cvtps2qq256_mask((__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 695
} 
# 698
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 699
_mm256_mask_cvtps_epi64(__m256i __W, __mmask8 __U, __m128 __A) 
# 700
{ 
# 701
return (__m256i)__builtin_ia32_cvtps2qq256_mask((__v4sf)__A, (__v4di)__W, (__mmask8)__U); 
# 704
} 
# 707
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 708
_mm256_maskz_cvtps_epi64(__mmask8 __U, __m128 __A) 
# 709
{ 
# 710
return (__m256i)__builtin_ia32_cvtps2qq256_mask((__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 714
} 
# 717
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 718
_mm_cvtps_epi64(__m128 __A) 
# 719
{ 
# 720
return (__m128i)__builtin_ia32_cvtps2qq128_mask((__v4sf)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 724
} 
# 727
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 728
_mm_mask_cvtps_epi64(__m128i __W, __mmask8 __U, __m128 __A) 
# 729
{ 
# 730
return (__m128i)__builtin_ia32_cvtps2qq128_mask((__v4sf)__A, (__v2di)__W, (__mmask8)__U); 
# 733
} 
# 736
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 737
_mm_maskz_cvtps_epi64(__mmask8 __U, __m128 __A) 
# 738
{ 
# 739
return (__m128i)__builtin_ia32_cvtps2qq128_mask((__v4sf)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 743
} 
# 746
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 747
_mm256_cvtps_epu64(__m128 __A) 
# 748
{ 
# 749
return (__m256i)__builtin_ia32_cvtps2uqq256_mask((__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 753
} 
# 756
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 757
_mm256_mask_cvtps_epu64(__m256i __W, __mmask8 __U, __m128 __A) 
# 758
{ 
# 759
return (__m256i)__builtin_ia32_cvtps2uqq256_mask((__v4sf)__A, (__v4di)__W, (__mmask8)__U); 
# 762
} 
# 765
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 766
_mm256_maskz_cvtps_epu64(__mmask8 __U, __m128 __A) 
# 767
{ 
# 768
return (__m256i)__builtin_ia32_cvtps2uqq256_mask((__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 772
} 
# 775
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 776
_mm_cvtps_epu64(__m128 __A) 
# 777
{ 
# 778
return (__m128i)__builtin_ia32_cvtps2uqq128_mask((__v4sf)__A, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 782
} 
# 785
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 786
_mm_mask_cvtps_epu64(__m128i __W, __mmask8 __U, __m128 __A) 
# 787
{ 
# 788
return (__m128i)__builtin_ia32_cvtps2uqq128_mask((__v4sf)__A, (__v2di)__W, (__mmask8)__U); 
# 791
} 
# 794
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 795
_mm_maskz_cvtps_epu64(__mmask8 __U, __m128 __A) 
# 796
{ 
# 797
return (__m128i)__builtin_ia32_cvtps2uqq128_mask((__v4sf)__A, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 801
} 
# 804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 805
_mm256_cvtepi64_ps(__m256i __A) 
# 806
{ 
# 807
return (__m128)__builtin_ia32_cvtqq2ps256_mask((__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 811
} 
# 814
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 815
_mm256_mask_cvtepi64_ps(__m128 __W, __mmask8 __U, __m256i __A) 
# 816
{ 
# 817
return (__m128)__builtin_ia32_cvtqq2ps256_mask((__v4di)__A, (__v4sf)__W, (__mmask8)__U); 
# 820
} 
# 823
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 824
_mm256_maskz_cvtepi64_ps(__mmask8 __U, __m256i __A) 
# 825
{ 
# 826
return (__m128)__builtin_ia32_cvtqq2ps256_mask((__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 830
} 
# 833
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 834
_mm_cvtepi64_ps(__m128i __A) 
# 835
{ 
# 836
return (__m128)__builtin_ia32_cvtqq2ps128_mask((__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 840
} 
# 843
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 844
_mm_mask_cvtepi64_ps(__m128 __W, __mmask8 __U, __m128i __A) 
# 845
{ 
# 846
return (__m128)__builtin_ia32_cvtqq2ps128_mask((__v2di)__A, (__v4sf)__W, (__mmask8)__U); 
# 849
} 
# 852
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 853
_mm_maskz_cvtepi64_ps(__mmask8 __U, __m128i __A) 
# 854
{ 
# 855
return (__m128)__builtin_ia32_cvtqq2ps128_mask((__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 859
} 
# 862
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 863
_mm256_cvtepu64_ps(__m256i __A) 
# 864
{ 
# 865
return (__m128)__builtin_ia32_cvtuqq2ps256_mask((__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 869
} 
# 872
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 873
_mm256_mask_cvtepu64_ps(__m128 __W, __mmask8 __U, __m256i __A) 
# 874
{ 
# 875
return (__m128)__builtin_ia32_cvtuqq2ps256_mask((__v4di)__A, (__v4sf)__W, (__mmask8)__U); 
# 878
} 
# 881
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 882
_mm256_maskz_cvtepu64_ps(__mmask8 __U, __m256i __A) 
# 883
{ 
# 884
return (__m128)__builtin_ia32_cvtuqq2ps256_mask((__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 888
} 
# 891
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 892
_mm_cvtepu64_ps(__m128i __A) 
# 893
{ 
# 894
return (__m128)__builtin_ia32_cvtuqq2ps128_mask((__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 898
} 
# 901
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 902
_mm_mask_cvtepu64_ps(__m128 __W, __mmask8 __U, __m128i __A) 
# 903
{ 
# 904
return (__m128)__builtin_ia32_cvtuqq2ps128_mask((__v2di)__A, (__v4sf)__W, (__mmask8)__U); 
# 907
} 
# 910
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 911
_mm_maskz_cvtepu64_ps(__mmask8 __U, __m128i __A) 
# 912
{ 
# 913
return (__m128)__builtin_ia32_cvtuqq2ps128_mask((__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 917
} 
# 920
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 921
_mm256_cvtepi64_pd(__m256i __A) 
# 922
{ 
# 923
return (__m256d)__builtin_ia32_cvtqq2pd256_mask((__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 927
} 
# 930
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 931
_mm256_mask_cvtepi64_pd(__m256d __W, __mmask8 __U, __m256i __A) 
# 932
{ 
# 933
return (__m256d)__builtin_ia32_cvtqq2pd256_mask((__v4di)__A, (__v4df)__W, (__mmask8)__U); 
# 936
} 
# 939
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 940
_mm256_maskz_cvtepi64_pd(__mmask8 __U, __m256i __A) 
# 941
{ 
# 942
return (__m256d)__builtin_ia32_cvtqq2pd256_mask((__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 946
} 
# 949
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 950
_mm_cvtepi64_pd(__m128i __A) 
# 951
{ 
# 952
return (__m128d)__builtin_ia32_cvtqq2pd128_mask((__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 956
} 
# 959
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 960
_mm_mask_cvtepi64_pd(__m128d __W, __mmask8 __U, __m128i __A) 
# 961
{ 
# 962
return (__m128d)__builtin_ia32_cvtqq2pd128_mask((__v2di)__A, (__v2df)__W, (__mmask8)__U); 
# 965
} 
# 968
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 969
_mm_maskz_cvtepi64_pd(__mmask8 __U, __m128i __A) 
# 970
{ 
# 971
return (__m128d)__builtin_ia32_cvtqq2pd128_mask((__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 975
} 
# 978
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 979
_mm256_cvtepu64_pd(__m256i __A) 
# 980
{ 
# 981
return (__m256d)__builtin_ia32_cvtuqq2pd256_mask((__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 985
} 
# 988
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 989
_mm256_mask_cvtepu64_pd(__m256d __W, __mmask8 __U, __m256i __A) 
# 990
{ 
# 991
return (__m256d)__builtin_ia32_cvtuqq2pd256_mask((__v4di)__A, (__v4df)__W, (__mmask8)__U); 
# 994
} 
# 997
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 998
_mm256_maskz_cvtepu64_pd(__mmask8 __U, __m256i __A) 
# 999
{ 
# 1000
return (__m256d)__builtin_ia32_cvtuqq2pd256_mask((__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1004
} 
# 1007
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1008
_mm256_mask_and_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 1009
__B) 
# 1010
{ 
# 1011
return (__m256d)__builtin_ia32_andpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 1015
} 
# 1018
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1019
_mm256_maskz_and_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 1020
{ 
# 1021
return (__m256d)__builtin_ia32_andpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1026
} 
# 1029
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1030
_mm_mask_and_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 1031
{ 
# 1032
return (__m128d)__builtin_ia32_andpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 1036
} 
# 1039
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1040
_mm_maskz_and_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 1041
{ 
# 1042
return (__m128d)__builtin_ia32_andpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1047
} 
# 1050
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1051
_mm256_mask_and_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) 
# 1052
{ 
# 1053
return (__m256)__builtin_ia32_andps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 1057
} 
# 1060
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1061
_mm256_maskz_and_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 1062
{ 
# 1063
return (__m256)__builtin_ia32_andps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 1068
} 
# 1071
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1072
_mm_mask_and_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 1073
{ 
# 1074
return (__m128)__builtin_ia32_andps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 1078
} 
# 1081
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1082
_mm_maskz_and_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 1083
{ 
# 1084
return (__m128)__builtin_ia32_andps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 1089
} 
# 1092
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1093
_mm_cvtepu64_pd(__m128i __A) 
# 1094
{ 
# 1095
return (__m128d)__builtin_ia32_cvtuqq2pd128_mask((__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 1099
} 
# 1102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1103
_mm_mask_cvtepu64_pd(__m128d __W, __mmask8 __U, __m128i __A) 
# 1104
{ 
# 1105
return (__m128d)__builtin_ia32_cvtuqq2pd128_mask((__v2di)__A, (__v2df)__W, (__mmask8)__U); 
# 1108
} 
# 1111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1112
_mm_maskz_cvtepu64_pd(__mmask8 __U, __m128i __A) 
# 1113
{ 
# 1114
return (__m128d)__builtin_ia32_cvtuqq2pd128_mask((__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1118
} 
# 1121
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1122
_mm256_mask_xor_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d 
# 1123
__B) 
# 1124
{ 
# 1125
return (__m256d)__builtin_ia32_xorpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 1129
} 
# 1132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1133
_mm256_maskz_xor_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 1134
{ 
# 1135
return (__m256d)__builtin_ia32_xorpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1140
} 
# 1143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1144
_mm_mask_xor_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 1145
{ 
# 1146
return (__m128d)__builtin_ia32_xorpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 1150
} 
# 1153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1154
_mm_maskz_xor_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 1155
{ 
# 1156
return (__m128d)__builtin_ia32_xorpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1161
} 
# 1164
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1165
_mm256_mask_xor_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) 
# 1166
{ 
# 1167
return (__m256)__builtin_ia32_xorps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 1171
} 
# 1174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1175
_mm256_maskz_xor_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 1176
{ 
# 1177
return (__m256)__builtin_ia32_xorps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 1182
} 
# 1185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1186
_mm_mask_xor_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 1187
{ 
# 1188
return (__m128)__builtin_ia32_xorps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 1192
} 
# 1195
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1196
_mm_maskz_xor_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 1197
{ 
# 1198
return (__m128)__builtin_ia32_xorps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 1203
} 
# 1206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1207
_mm256_mask_or_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) 
# 1208
{ 
# 1209
return (__m256d)__builtin_ia32_orpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)__W, (__mmask8)__U); 
# 1213
} 
# 1216
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1217
_mm256_maskz_or_pd(__mmask8 __U, __m256d __A, __m256d __B) 
# 1218
{ 
# 1219
return (__m256d)__builtin_ia32_orpd256_mask((__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1224
} 
# 1227
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1228
_mm_mask_or_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) 
# 1229
{ 
# 1230
return (__m128d)__builtin_ia32_orpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U); 
# 1234
} 
# 1237
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1238
_mm_maskz_or_pd(__mmask8 __U, __m128d __A, __m128d __B) 
# 1239
{ 
# 1240
return (__m128d)__builtin_ia32_orpd128_mask((__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1245
} 
# 1248
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1249
_mm256_mask_or_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) 
# 1250
{ 
# 1251
return (__m256)__builtin_ia32_orps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)__W, (__mmask8)__U); 
# 1255
} 
# 1258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1259
_mm256_maskz_or_ps(__mmask8 __U, __m256 __A, __m256 __B) 
# 1260
{ 
# 1261
return (__m256)__builtin_ia32_orps256_mask((__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 1266
} 
# 1269
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1270
_mm_mask_or_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) 
# 1271
{ 
# 1272
return (__m128)__builtin_ia32_orps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U); 
# 1276
} 
# 1279
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1280
_mm_maskz_or_ps(__mmask8 __U, __m128 __A, __m128 __B) 
# 1281
{ 
# 1282
return (__m128)__builtin_ia32_orps128_mask((__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 1287
} 
# 1290
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1291
_mm_movm_epi32(__mmask8 __A) 
# 1292
{ 
# 1293
return (__m128i)__builtin_ia32_cvtmask2d128(__A); 
# 1294
} 
# 1297
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1298
_mm256_movm_epi32(__mmask8 __A) 
# 1299
{ 
# 1300
return (__m256i)__builtin_ia32_cvtmask2d256(__A); 
# 1301
} 
# 1304
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1305
_mm_movm_epi64(__mmask8 __A) 
# 1306
{ 
# 1307
return (__m128i)__builtin_ia32_cvtmask2q128(__A); 
# 1308
} 
# 1311
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1312
_mm256_movm_epi64(__mmask8 __A) 
# 1313
{ 
# 1314
return (__m256i)__builtin_ia32_cvtmask2q256(__A); 
# 1315
} 
# 1318
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1319
_mm_movepi32_mask(__m128i __A) 
# 1320
{ 
# 1321
return (__mmask8)__builtin_ia32_cvtd2mask128((__v4si)__A); 
# 1322
} 
# 1325
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1326
_mm256_movepi32_mask(__m256i __A) 
# 1327
{ 
# 1328
return (__mmask8)__builtin_ia32_cvtd2mask256((__v8si)__A); 
# 1329
} 
# 1332
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1333
_mm_movepi64_mask(__m128i __A) 
# 1334
{ 
# 1335
return (__mmask8)__builtin_ia32_cvtq2mask128((__v2di)__A); 
# 1336
} 
# 1339
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1340
_mm256_movepi64_mask(__m256i __A) 
# 1341
{ 
# 1342
return (__mmask8)__builtin_ia32_cvtq2mask256((__v4di)__A); 
# 1343
} 
# 1347
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1348
_mm256_extractf64x2_pd(__m256d __A, const int __imm) 
# 1349
{ 
# 1350
return (__m128d)__builtin_ia32_extractf64x2_256_mask((__v4df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 1356
} 
# 1359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1360
_mm256_mask_extractf64x2_pd(__m128d __W, __mmask8 __U, __m256d __A, const int 
# 1361
__imm) 
# 1362
{ 
# 1363
return (__m128d)__builtin_ia32_extractf64x2_256_mask((__v4df)__A, __imm, (__v2df)__W, (__mmask8)__U); 
# 1368
} 
# 1371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1372
_mm256_maskz_extractf64x2_pd(__mmask8 __U, __m256d __A, const int 
# 1373
__imm) 
# 1374
{ 
# 1375
return (__m128d)__builtin_ia32_extractf64x2_256_mask((__v4df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1381
} 
# 1384
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1385
_mm256_extracti64x2_epi64(__m256i __A, const int __imm) 
# 1386
{ 
# 1387
return (__m128i)__builtin_ia32_extracti64x2_256_mask((__v4di)__A, __imm, (__v2di)_mm_setzero_di(), (__mmask8)(-1)); 
# 1393
} 
# 1396
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1397
_mm256_mask_extracti64x2_epi64(__m128i __W, __mmask8 __U, __m256i __A, const int 
# 1398
__imm) 
# 1399
{ 
# 1400
return (__m128i)__builtin_ia32_extracti64x2_256_mask((__v4di)__A, __imm, (__v2di)__W, (__mmask8)__U); 
# 1405
} 
# 1408
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 1409
_mm256_maskz_extracti64x2_epi64(__mmask8 __U, __m256i __A, const int 
# 1410
__imm) 
# 1411
{ 
# 1412
return (__m128i)__builtin_ia32_extracti64x2_256_mask((__v4di)__A, __imm, (__v2di)_mm_setzero_di(), (__mmask8)__U); 
# 1418
} 
# 1421
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1422
_mm256_reduce_pd(__m256d __A, int __B) 
# 1423
{ 
# 1424
return (__m256d)__builtin_ia32_reducepd256_mask((__v4df)__A, __B, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 1428
} 
# 1431
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1432
_mm256_mask_reduce_pd(__m256d __W, __mmask8 __U, __m256d __A, int __B) 
# 1433
{ 
# 1434
return (__m256d)__builtin_ia32_reducepd256_mask((__v4df)__A, __B, (__v4df)__W, (__mmask8)__U); 
# 1437
} 
# 1440
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1441
_mm256_maskz_reduce_pd(__mmask8 __U, __m256d __A, int __B) 
# 1442
{ 
# 1443
return (__m256d)__builtin_ia32_reducepd256_mask((__v4df)__A, __B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1447
} 
# 1450
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1451
_mm_reduce_pd(__m128d __A, int __B) 
# 1452
{ 
# 1453
return (__m128d)__builtin_ia32_reducepd128_mask((__v2df)__A, __B, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 1457
} 
# 1460
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1461
_mm_mask_reduce_pd(__m128d __W, __mmask8 __U, __m128d __A, int __B) 
# 1462
{ 
# 1463
return (__m128d)__builtin_ia32_reducepd128_mask((__v2df)__A, __B, (__v2df)__W, (__mmask8)__U); 
# 1466
} 
# 1469
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1470
_mm_maskz_reduce_pd(__mmask8 __U, __m128d __A, int __B) 
# 1471
{ 
# 1472
return (__m128d)__builtin_ia32_reducepd128_mask((__v2df)__A, __B, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1476
} 
# 1479
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1480
_mm256_reduce_ps(__m256 __A, int __B) 
# 1481
{ 
# 1482
return (__m256)__builtin_ia32_reduceps256_mask((__v8sf)__A, __B, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 1486
} 
# 1489
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1490
_mm256_mask_reduce_ps(__m256 __W, __mmask8 __U, __m256 __A, int __B) 
# 1491
{ 
# 1492
return (__m256)__builtin_ia32_reduceps256_mask((__v8sf)__A, __B, (__v8sf)__W, (__mmask8)__U); 
# 1495
} 
# 1498
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1499
_mm256_maskz_reduce_ps(__mmask8 __U, __m256 __A, int __B) 
# 1500
{ 
# 1501
return (__m256)__builtin_ia32_reduceps256_mask((__v8sf)__A, __B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 1505
} 
# 1508
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1509
_mm_reduce_ps(__m128 __A, int __B) 
# 1510
{ 
# 1511
return (__m128)__builtin_ia32_reduceps128_mask((__v4sf)__A, __B, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 1515
} 
# 1518
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1519
_mm_mask_reduce_ps(__m128 __W, __mmask8 __U, __m128 __A, int __B) 
# 1520
{ 
# 1521
return (__m128)__builtin_ia32_reduceps128_mask((__v4sf)__A, __B, (__v4sf)__W, (__mmask8)__U); 
# 1524
} 
# 1527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1528
_mm_maskz_reduce_ps(__mmask8 __U, __m128 __A, int __B) 
# 1529
{ 
# 1530
return (__m128)__builtin_ia32_reduceps128_mask((__v4sf)__A, __B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 1534
} 
# 1537
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1538
_mm256_range_pd(__m256d __A, __m256d __B, int __C) 
# 1539
{ 
# 1540
return (__m256d)__builtin_ia32_rangepd256_mask((__v4df)__A, (__v4df)__B, __C, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 1545
} 
# 1548
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1549
_mm256_mask_range_pd(__m256d __W, __mmask8 __U, __m256d 
# 1550
__A, __m256d __B, int __C) 
# 1551
{ 
# 1552
return (__m256d)__builtin_ia32_rangepd256_mask((__v4df)__A, (__v4df)__B, __C, (__v4df)__W, (__mmask8)__U); 
# 1556
} 
# 1559
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1560
_mm256_maskz_range_pd(__mmask8 __U, __m256d __A, __m256d __B, int __C) 
# 1561
{ 
# 1562
return (__m256d)__builtin_ia32_rangepd256_mask((__v4df)__A, (__v4df)__B, __C, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1567
} 
# 1570
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1571
_mm_range_pd(__m128d __A, __m128d __B, int __C) 
# 1572
{ 
# 1573
return (__m128d)__builtin_ia32_rangepd128_mask((__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)(-1)); 
# 1578
} 
# 1581
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1582
_mm_mask_range_pd(__m128d __W, __mmask8 __U, __m128d 
# 1583
__A, __m128d __B, int __C) 
# 1584
{ 
# 1585
return (__m128d)__builtin_ia32_rangepd128_mask((__v2df)__A, (__v2df)__B, __C, (__v2df)__W, (__mmask8)__U); 
# 1589
} 
# 1592
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 1593
_mm_maskz_range_pd(__mmask8 __U, __m128d __A, __m128d __B, int __C) 
# 1594
{ 
# 1595
return (__m128d)__builtin_ia32_rangepd128_mask((__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)__U); 
# 1600
} 
# 1603
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1604
_mm256_range_ps(__m256 __A, __m256 __B, int __C) 
# 1605
{ 
# 1606
return (__m256)__builtin_ia32_rangeps256_mask((__v8sf)__A, (__v8sf)__B, __C, (__v8sf)_mm256_setzero_ps(), (__mmask8)(-1)); 
# 1611
} 
# 1614
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1615
_mm256_mask_range_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B, int 
# 1616
__C) 
# 1617
{ 
# 1618
return (__m256)__builtin_ia32_rangeps256_mask((__v8sf)__A, (__v8sf)__B, __C, (__v8sf)__W, (__mmask8)__U); 
# 1622
} 
# 1625
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 1626
_mm256_maskz_range_ps(__mmask8 __U, __m256 __A, __m256 __B, int __C) 
# 1627
{ 
# 1628
return (__m256)__builtin_ia32_rangeps256_mask((__v8sf)__A, (__v8sf)__B, __C, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U); 
# 1633
} 
# 1636
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1637
_mm_range_ps(__m128 __A, __m128 __B, int __C) 
# 1638
{ 
# 1639
return (__m128)__builtin_ia32_rangeps128_mask((__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)(-1)); 
# 1644
} 
# 1647
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1648
_mm_mask_range_ps(__m128 __W, __mmask8 __U, __m128 
# 1649
__A, __m128 __B, int __C) 
# 1650
{ 
# 1651
return (__m128)__builtin_ia32_rangeps128_mask((__v4sf)__A, (__v4sf)__B, __C, (__v4sf)__W, (__mmask8)__U); 
# 1655
} 
# 1658
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 1659
_mm_maskz_range_ps(__mmask8 __U, __m128 __A, __m128 __B, int __C) 
# 1660
{ 
# 1661
return (__m128)__builtin_ia32_rangeps128_mask((__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U); 
# 1666
} 
# 1669
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1670
_mm256_mask_fpclass_pd_mask(__mmask8 __U, __m256d __A, const int 
# 1671
__imm) 
# 1672
{ 
# 1673
return (__mmask8)__builtin_ia32_fpclasspd256_mask((__v4df)__A, __imm, __U); 
# 1675
} 
# 1678
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1679
_mm256_fpclass_pd_mask(__m256d __A, const int __imm) 
# 1680
{ 
# 1681
return (__mmask8)__builtin_ia32_fpclasspd256_mask((__v4df)__A, __imm, (__mmask8)(-1)); 
# 1684
} 
# 1687
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1688
_mm256_mask_fpclass_ps_mask(__mmask8 __U, __m256 __A, const int __imm) 
# 1689
{ 
# 1690
return (__mmask8)__builtin_ia32_fpclassps256_mask((__v8sf)__A, __imm, __U); 
# 1692
} 
# 1695
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1696
_mm256_fpclass_ps_mask(__m256 __A, const int __imm) 
# 1697
{ 
# 1698
return (__mmask8)__builtin_ia32_fpclassps256_mask((__v8sf)__A, __imm, (__mmask8)(-1)); 
# 1701
} 
# 1704
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1705
_mm_mask_fpclass_pd_mask(__mmask8 __U, __m128d __A, const int __imm) 
# 1706
{ 
# 1707
return (__mmask8)__builtin_ia32_fpclasspd128_mask((__v2df)__A, __imm, __U); 
# 1709
} 
# 1712
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1713
_mm_fpclass_pd_mask(__m128d __A, const int __imm) 
# 1714
{ 
# 1715
return (__mmask8)__builtin_ia32_fpclasspd128_mask((__v2df)__A, __imm, (__mmask8)(-1)); 
# 1718
} 
# 1721
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1722
_mm_mask_fpclass_ps_mask(__mmask8 __U, __m128 __A, const int __imm) 
# 1723
{ 
# 1724
return (__mmask8)__builtin_ia32_fpclassps128_mask((__v4sf)__A, __imm, __U); 
# 1726
} 
# 1729
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __mmask8 
# 1730
_mm_fpclass_ps_mask(__m128 __A, const int __imm) 
# 1731
{ 
# 1732
return (__mmask8)__builtin_ia32_fpclassps128_mask((__v4sf)__A, __imm, (__mmask8)(-1)); 
# 1735
} 
# 1738
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1739
_mm256_inserti64x2(__m256i __A, __m128i __B, const int __imm) 
# 1740
{ 
# 1741
return (__m256i)__builtin_ia32_inserti64x2_256_mask((__v4di)__A, (__v2di)__B, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)(-1)); 
# 1748
} 
# 1751
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1752
_mm256_mask_inserti64x2(__m256i __W, __mmask8 __U, __m256i __A, __m128i 
# 1753
__B, const int __imm) 
# 1754
{ 
# 1755
return (__m256i)__builtin_ia32_inserti64x2_256_mask((__v4di)__A, (__v2di)__B, __imm, (__v4di)__W, (__mmask8)__U); 
# 1761
} 
# 1764
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 1765
_mm256_maskz_inserti64x2(__mmask8 __U, __m256i __A, __m128i __B, const int 
# 1766
__imm) 
# 1767
{ 
# 1768
return (__m256i)__builtin_ia32_inserti64x2_256_mask((__v4di)__A, (__v2di)__B, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U); 
# 1775
} 
# 1778
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1779
_mm256_insertf64x2(__m256d __A, __m128d __B, const int __imm) 
# 1780
{ 
# 1781
return (__m256d)__builtin_ia32_insertf64x2_256_mask((__v4df)__A, (__v2df)__B, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)(-1)); 
# 1788
} 
# 1791
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1792
_mm256_mask_insertf64x2(__m256d __W, __mmask8 __U, __m256d __A, __m128d 
# 1793
__B, const int __imm) 
# 1794
{ 
# 1795
return (__m256d)__builtin_ia32_insertf64x2_256_mask((__v4df)__A, (__v2df)__B, __imm, (__v4df)__W, (__mmask8)__U); 
# 1801
} 
# 1804
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 1805
_mm256_maskz_insertf64x2(__mmask8 __U, __m256d __A, __m128d __B, const int 
# 1806
__imm) 
# 1807
{ 
# 1808
return (__m256d)__builtin_ia32_insertf64x2_256_mask((__v4df)__A, (__v2df)__B, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U); 
# 1815
} 
# 2022
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512ifmaintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512ifma" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 39
_mm512_madd52lo_epu64(__m512i __X, __m512i __Y, __m512i __Z) 
# 40
{ 
# 41
return (__m512i)__builtin_ia32_vpmadd52luq512_mask((__v8di)__X, (__v8di)__Y, (__v8di)__Z, (__mmask8)(-1)); 
# 45
} 
# 48
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 49
_mm512_madd52hi_epu64(__m512i __X, __m512i __Y, __m512i __Z) 
# 50
{ 
# 51
return (__m512i)__builtin_ia32_vpmadd52huq512_mask((__v8di)__X, (__v8di)__Y, (__v8di)__Z, (__mmask8)(-1)); 
# 55
} 
# 58
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 59
_mm512_mask_madd52lo_epu64(__m512i __W, __mmask8 __M, __m512i __X, __m512i 
# 60
__Y) 
# 61
{ 
# 62
return (__m512i)__builtin_ia32_vpmadd52luq512_mask((__v8di)__W, (__v8di)__X, (__v8di)__Y, (__mmask8)__M); 
# 66
} 
# 69
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 70
_mm512_mask_madd52hi_epu64(__m512i __W, __mmask8 __M, __m512i __X, __m512i 
# 71
__Y) 
# 72
{ 
# 73
return (__m512i)__builtin_ia32_vpmadd52huq512_mask((__v8di)__W, (__v8di)__X, (__v8di)__Y, (__mmask8)__M); 
# 77
} 
# 80
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 81
_mm512_maskz_madd52lo_epu64(__mmask8 __M, __m512i __X, __m512i __Y, __m512i __Z) 
# 82
{ 
# 83
return (__m512i)__builtin_ia32_vpmadd52luq512_maskz((__v8di)__X, (__v8di)__Y, (__v8di)__Z, (__mmask8)__M); 
# 87
} 
# 90
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 91
_mm512_maskz_madd52hi_epu64(__mmask8 __M, __m512i __X, __m512i __Y, __m512i __Z) 
# 92
{ 
# 93
return (__m512i)__builtin_ia32_vpmadd52huq512_maskz((__v8di)__X, (__v8di)__Y, (__v8di)__Z, (__mmask8)__M); 
# 97
} 
# 101
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512ifmavlintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512ifma,avx512vl" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 39
_mm_madd52lo_epu64(__m128i __X, __m128i __Y, __m128i __Z) 
# 40
{ 
# 41
return (__m128i)__builtin_ia32_vpmadd52luq128_mask((__v2di)__X, (__v2di)__Y, (__v2di)__Z, (__mmask8)(-1)); 
# 45
} 
# 48
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 49
_mm_madd52hi_epu64(__m128i __X, __m128i __Y, __m128i __Z) 
# 50
{ 
# 51
return (__m128i)__builtin_ia32_vpmadd52huq128_mask((__v2di)__X, (__v2di)__Y, (__v2di)__Z, (__mmask8)(-1)); 
# 55
} 
# 58
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 59
_mm256_madd52lo_epu64(__m256i __X, __m256i __Y, __m256i __Z) 
# 60
{ 
# 61
return (__m256i)__builtin_ia32_vpmadd52luq256_mask((__v4di)__X, (__v4di)__Y, (__v4di)__Z, (__mmask8)(-1)); 
# 65
} 
# 68
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 69
_mm256_madd52hi_epu64(__m256i __X, __m256i __Y, __m256i __Z) 
# 70
{ 
# 71
return (__m256i)__builtin_ia32_vpmadd52huq256_mask((__v4di)__X, (__v4di)__Y, (__v4di)__Z, (__mmask8)(-1)); 
# 75
} 
# 78
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 79
_mm_mask_madd52lo_epu64(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) 
# 80
{ 
# 81
return (__m128i)__builtin_ia32_vpmadd52luq128_mask((__v2di)__W, (__v2di)__X, (__v2di)__Y, (__mmask8)__M); 
# 85
} 
# 88
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 89
_mm_mask_madd52hi_epu64(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) 
# 90
{ 
# 91
return (__m128i)__builtin_ia32_vpmadd52huq128_mask((__v2di)__W, (__v2di)__X, (__v2di)__Y, (__mmask8)__M); 
# 95
} 
# 98
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 99
_mm256_mask_madd52lo_epu64(__m256i __W, __mmask8 __M, __m256i __X, __m256i 
# 100
__Y) 
# 101
{ 
# 102
return (__m256i)__builtin_ia32_vpmadd52luq256_mask((__v4di)__W, (__v4di)__X, (__v4di)__Y, (__mmask8)__M); 
# 106
} 
# 109
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 110
_mm256_mask_madd52hi_epu64(__m256i __W, __mmask8 __M, __m256i __X, __m256i 
# 111
__Y) 
# 112
{ 
# 113
return (__m256i)__builtin_ia32_vpmadd52huq256_mask((__v4di)__W, (__v4di)__X, (__v4di)__Y, (__mmask8)__M); 
# 117
} 
# 120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 121
_mm_maskz_madd52lo_epu64(__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z) 
# 122
{ 
# 123
return (__m128i)__builtin_ia32_vpmadd52luq128_maskz((__v2di)__X, (__v2di)__Y, (__v2di)__Z, (__mmask8)__M); 
# 127
} 
# 130
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 131
_mm_maskz_madd52hi_epu64(__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z) 
# 132
{ 
# 133
return (__m128i)__builtin_ia32_vpmadd52huq128_maskz((__v2di)__X, (__v2di)__Y, (__v2di)__Z, (__mmask8)__M); 
# 137
} 
# 140
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 141
_mm256_maskz_madd52lo_epu64(__mmask8 __M, __m256i __X, __m256i __Y, __m256i __Z) 
# 142
{ 
# 143
return (__m256i)__builtin_ia32_vpmadd52luq256_maskz((__v4di)__X, (__v4di)__Y, (__v4di)__Z, (__mmask8)__M); 
# 147
} 
# 150
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 151
_mm256_maskz_madd52hi_epu64(__mmask8 __M, __m256i __X, __m256i __Y, __m256i __Z) 
# 152
{ 
# 153
return (__m256i)__builtin_ia32_vpmadd52huq256_maskz((__v4di)__X, (__v4di)__Y, (__v4di)__Z, (__mmask8)__M); 
# 157
} 
# 161
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512vbmiintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512vbmi" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 39
_mm512_mask_multishift_epi64_epi8(__m512i __W, __mmask64 __M, __m512i __X, __m512i __Y) 
# 40
{ 
# 41
return (__m512i)__builtin_ia32_vpmultishiftqb512_mask((__v64qi)__X, (__v64qi)__Y, (__v64qi)__W, (__mmask64)__M); 
# 45
} 
# 48
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 49
_mm512_maskz_multishift_epi64_epi8(__mmask64 __M, __m512i __X, __m512i __Y) 
# 50
{ 
# 51
return (__m512i)__builtin_ia32_vpmultishiftqb512_mask((__v64qi)__X, (__v64qi)__Y, (__v64qi)_mm512_setzero_si512(), (__mmask64)__M); 
# 56
} 
# 59
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 60
_mm512_multishift_epi64_epi8(__m512i __X, __m512i __Y) 
# 61
{ 
# 62
return (__m512i)__builtin_ia32_vpmultishiftqb512_mask((__v64qi)__X, (__v64qi)__Y, (__v64qi)_mm512_undefined_si512(), (__mmask64)(-1)); 
# 67
} 
# 70
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 71
_mm512_permutexvar_epi8(__m512i __A, __m512i __B) 
# 72
{ 
# 73
return (__m512i)__builtin_ia32_permvarqi512_mask((__v64qi)__B, (__v64qi)__A, (__v64qi)_mm512_undefined_si512(), (__mmask64)(-1)); 
# 78
} 
# 81
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 82
_mm512_maskz_permutexvar_epi8(__mmask64 __M, __m512i __A, __m512i 
# 83
__B) 
# 84
{ 
# 85
return (__m512i)__builtin_ia32_permvarqi512_mask((__v64qi)__B, (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)__M); 
# 90
} 
# 93
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 94
_mm512_mask_permutexvar_epi8(__m512i __W, __mmask64 __M, __m512i __A, __m512i 
# 95
__B) 
# 96
{ 
# 97
return (__m512i)__builtin_ia32_permvarqi512_mask((__v64qi)__B, (__v64qi)__A, (__v64qi)__W, (__mmask64)__M); 
# 101
} 
# 104
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 105
_mm512_permutex2var_epi8(__m512i __A, __m512i __I, __m512i __B) 
# 106
{ 
# 107
return (__m512i)__builtin_ia32_vpermt2varqi512_mask((__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)(-1)); 
# 113
} 
# 116
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 117
_mm512_mask_permutex2var_epi8(__m512i __A, __mmask64 __U, __m512i 
# 118
__I, __m512i __B) 
# 119
{ 
# 120
return (__m512i)__builtin_ia32_vpermt2varqi512_mask((__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)__U); 
# 126
} 
# 129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 130
_mm512_mask2_permutex2var_epi8(__m512i __A, __m512i __I, __mmask64 
# 131
__U, __m512i __B) 
# 132
{ 
# 133
return (__m512i)__builtin_ia32_vpermi2varqi512_mask((__v64qi)__A, (__v64qi)__I, (__v64qi)__B, (__mmask64)__U); 
# 139
} 
# 142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m512i 
# 143
_mm512_maskz_permutex2var_epi8(__mmask64 __U, __m512i __A, __m512i 
# 144
__I, __m512i __B) 
# 145
{ 
# 146
return (__m512i)__builtin_ia32_vpermt2varqi512_maskz((__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)__U); 
# 152
} 
# 156
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/avx512vbmivlintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "avx512vbmi,avx512vl" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 39
_mm256_mask_multishift_epi64_epi8(__m256i __W, __mmask32 __M, __m256i __X, __m256i __Y) 
# 40
{ 
# 41
return (__m256i)__builtin_ia32_vpmultishiftqb256_mask((__v32qi)__X, (__v32qi)__Y, (__v32qi)__W, (__mmask32)__M); 
# 45
} 
# 48
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 49
_mm256_maskz_multishift_epi64_epi8(__mmask32 __M, __m256i __X, __m256i __Y) 
# 50
{ 
# 51
return (__m256i)__builtin_ia32_vpmultishiftqb256_mask((__v32qi)__X, (__v32qi)__Y, (__v32qi)_mm256_setzero_si256(), (__mmask32)__M); 
# 56
} 
# 59
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 60
_mm256_multishift_epi64_epi8(__m256i __X, __m256i __Y) 
# 61
{ 
# 62
return (__m256i)__builtin_ia32_vpmultishiftqb256_mask((__v32qi)__X, (__v32qi)__Y, (__v32qi)_mm256_undefined_si256(), (__mmask32)(-1)); 
# 67
} 
# 70
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 71
_mm_mask_multishift_epi64_epi8(__m128i __W, __mmask16 __M, __m128i __X, __m128i __Y) 
# 72
{ 
# 73
return (__m128i)__builtin_ia32_vpmultishiftqb128_mask((__v16qi)__X, (__v16qi)__Y, (__v16qi)__W, (__mmask16)__M); 
# 77
} 
# 80
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 81
_mm_maskz_multishift_epi64_epi8(__mmask16 __M, __m128i __X, __m128i __Y) 
# 82
{ 
# 83
return (__m128i)__builtin_ia32_vpmultishiftqb128_mask((__v16qi)__X, (__v16qi)__Y, (__v16qi)_mm_setzero_si128(), (__mmask16)__M); 
# 88
} 
# 91
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 92
_mm_multishift_epi64_epi8(__m128i __X, __m128i __Y) 
# 93
{ 
# 94
return (__m128i)__builtin_ia32_vpmultishiftqb128_mask((__v16qi)__X, (__v16qi)__Y, (__v16qi)_mm_undefined_si128(), (__mmask16)(-1)); 
# 99
} 
# 102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 103
_mm256_permutexvar_epi8(__m256i __A, __m256i __B) 
# 104
{ 
# 105
return (__m256i)__builtin_ia32_permvarqi256_mask((__v32qi)__B, (__v32qi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)(-1)); 
# 110
} 
# 113
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 114
_mm256_maskz_permutexvar_epi8(__mmask32 __M, __m256i __A, __m256i 
# 115
__B) 
# 116
{ 
# 117
return (__m256i)__builtin_ia32_permvarqi256_mask((__v32qi)__B, (__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__M); 
# 122
} 
# 125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 126
_mm256_mask_permutexvar_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i 
# 127
__B) 
# 128
{ 
# 129
return (__m256i)__builtin_ia32_permvarqi256_mask((__v32qi)__B, (__v32qi)__A, (__v32qi)__W, (__mmask32)__M); 
# 133
} 
# 136
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 137
_mm_permutexvar_epi8(__m128i __A, __m128i __B) 
# 138
{ 
# 139
return (__m128i)__builtin_ia32_permvarqi128_mask((__v16qi)__B, (__v16qi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)(-1)); 
# 144
} 
# 147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 148
_mm_maskz_permutexvar_epi8(__mmask16 __M, __m128i __A, __m128i __B) 
# 149
{ 
# 150
return (__m128i)__builtin_ia32_permvarqi128_mask((__v16qi)__B, (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__M); 
# 155
} 
# 158
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 159
_mm_mask_permutexvar_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i 
# 160
__B) 
# 161
{ 
# 162
return (__m128i)__builtin_ia32_permvarqi128_mask((__v16qi)__B, (__v16qi)__A, (__v16qi)__W, (__mmask16)__M); 
# 166
} 
# 169
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 170
_mm256_permutex2var_epi8(__m256i __A, __m256i __I, __m256i __B) 
# 171
{ 
# 172
return (__m256i)__builtin_ia32_vpermt2varqi256_mask((__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)(-1)); 
# 178
} 
# 181
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 182
_mm256_mask_permutex2var_epi8(__m256i __A, __mmask32 __U, __m256i 
# 183
__I, __m256i __B) 
# 184
{ 
# 185
return (__m256i)__builtin_ia32_vpermt2varqi256_mask((__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)__U); 
# 191
} 
# 194
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 195
_mm256_mask2_permutex2var_epi8(__m256i __A, __m256i __I, __mmask32 
# 196
__U, __m256i __B) 
# 197
{ 
# 198
return (__m256i)__builtin_ia32_vpermi2varqi256_mask((__v32qi)__A, (__v32qi)__I, (__v32qi)__B, (__mmask32)__U); 
# 204
} 
# 207
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256i 
# 208
_mm256_maskz_permutex2var_epi8(__mmask32 __U, __m256i __A, __m256i 
# 209
__I, __m256i __B) 
# 210
{ 
# 211
return (__m256i)__builtin_ia32_vpermt2varqi256_maskz((__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)__U); 
# 217
} 
# 220
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 221
_mm_permutex2var_epi8(__m128i __A, __m128i __I, __m128i __B) 
# 222
{ 
# 223
return (__m128i)__builtin_ia32_vpermt2varqi128_mask((__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)(-1)); 
# 229
} 
# 232
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 233
_mm_mask_permutex2var_epi8(__m128i __A, __mmask16 __U, __m128i __I, __m128i 
# 234
__B) 
# 235
{ 
# 236
return (__m128i)__builtin_ia32_vpermt2varqi128_mask((__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)__U); 
# 242
} 
# 245
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 246
_mm_mask2_permutex2var_epi8(__m128i __A, __m128i __I, __mmask16 __U, __m128i 
# 247
__B) 
# 248
{ 
# 249
return (__m128i)__builtin_ia32_vpermi2varqi128_mask((__v16qi)__A, (__v16qi)__I, (__v16qi)__B, (__mmask16)__U); 
# 255
} 
# 258
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 259
_mm_maskz_permutex2var_epi8(__mmask16 __U, __m128i __A, __m128i __I, __m128i 
# 260
__B) 
# 261
{ 
# 262
return (__m128i)__builtin_ia32_vpermt2varqi128_maskz((__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)__U); 
# 268
} 
# 272
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/shaintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "sha" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 39
_mm_sha1msg1_epu32(__m128i __A, __m128i __B) 
# 40
{ 
# 41
return (__m128i)__builtin_ia32_sha1msg1((__v4si)__A, (__v4si)__B); 
# 42
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 46
_mm_sha1msg2_epu32(__m128i __A, __m128i __B) 
# 47
{ 
# 48
return (__m128i)__builtin_ia32_sha1msg2((__v4si)__A, (__v4si)__B); 
# 49
} 
# 52
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 53
_mm_sha1nexte_epu32(__m128i __A, __m128i __B) 
# 54
{ 
# 55
return (__m128i)__builtin_ia32_sha1nexte((__v4si)__A, (__v4si)__B); 
# 56
} 
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 61
_mm_sha1rnds4_epu32(__m128i __A, __m128i __B, const int __I) 
# 62
{ 
# 63
return (__m128i)__builtin_ia32_sha1rnds4((__v4si)__A, (__v4si)__B, __I); 
# 64
} 
# 72
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 73
_mm_sha256msg1_epu32(__m128i __A, __m128i __B) 
# 74
{ 
# 75
return (__m128i)__builtin_ia32_sha256msg1((__v4si)__A, (__v4si)__B); 
# 76
} 
# 79
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 80
_mm_sha256msg2_epu32(__m128i __A, __m128i __B) 
# 81
{ 
# 82
return (__m128i)__builtin_ia32_sha256msg2((__v4si)__A, (__v4si)__B); 
# 83
} 
# 86
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 87
_mm_sha256rnds2_epu32(__m128i __A, __m128i __B, __m128i __C) 
# 88
{ 
# 89
return (__m128i)__builtin_ia32_sha256rnds2((__v4si)__A, (__v4si)__B, (__v4si)__C); 
# 91
} 
# 95
#pragma GCC pop_options
# 33 "/usr/lib/gcc/x86_64-linux-gnu/5/include/lzcntintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "lzcnt" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned short 
# 39
__lzcnt16(unsigned short __X) 
# 40
{ 
# 41
return __builtin_clzs(__X); 
# 42
} 
# 44
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 45
__lzcnt32(unsigned __X) 
# 46
{ 
# 47
return __builtin_clz(__X); 
# 48
} 
# 50
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 51
_lzcnt_u32(unsigned __X) 
# 52
{ 
# 53
return __builtin_clz(__X); 
# 54
} 
# 57
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 58
__lzcnt64(unsigned long long __X) 
# 59
{ 
# 60
return __builtin_clzll(__X); 
# 61
} 
# 63
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 64
_lzcnt_u64(unsigned long long __X) 
# 65
{ 
# 66
return __builtin_clzll(__X); 
# 67
} 
# 72
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/bmiintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "bmi" )
# 37
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned short 
# 38
__tzcnt_u16(unsigned short __X) 
# 39
{ 
# 40
return __builtin_ctzs(__X); 
# 41
} 
# 43
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 44
__andn_u32(unsigned __X, unsigned __Y) 
# 45
{ 
# 46
return (~__X) & __Y; 
# 47
} 
# 49
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 50
__bextr_u32(unsigned __X, unsigned __Y) 
# 51
{ 
# 52
return __builtin_ia32_bextr_u32(__X, __Y); 
# 53
} 
# 55
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 56
_bextr_u32(unsigned __X, unsigned __Y, unsigned __Z) 
# 57
{ 
# 58
return __builtin_ia32_bextr_u32(__X, (__Y & (255)) | ((__Z & (255)) << 8)); 
# 59
} 
# 61
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 62
__blsi_u32(unsigned __X) 
# 63
{ 
# 64
return __X & (-__X); 
# 65
} 
# 67
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 68
_blsi_u32(unsigned __X) 
# 69
{ 
# 70
return __blsi_u32(__X); 
# 71
} 
# 73
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 74
__blsmsk_u32(unsigned __X) 
# 75
{ 
# 76
return __X ^ (__X - (1)); 
# 77
} 
# 79
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 80
_blsmsk_u32(unsigned __X) 
# 81
{ 
# 82
return __blsmsk_u32(__X); 
# 83
} 
# 85
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 86
__blsr_u32(unsigned __X) 
# 87
{ 
# 88
return __X & (__X - (1)); 
# 89
} 
# 91
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 92
_blsr_u32(unsigned __X) 
# 93
{ 
# 94
return __blsr_u32(__X); 
# 95
} 
# 97
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 98
__tzcnt_u32(unsigned __X) 
# 99
{ 
# 100
return __builtin_ctz(__X); 
# 101
} 
# 103
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 104
_tzcnt_u32(unsigned __X) 
# 105
{ 
# 106
return __builtin_ctz(__X); 
# 107
} 
# 111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 112
__andn_u64(unsigned long long __X, unsigned long long __Y) 
# 113
{ 
# 114
return (~__X) & __Y; 
# 115
} 
# 117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 118
__bextr_u64(unsigned long long __X, unsigned long long __Y) 
# 119
{ 
# 120
return __builtin_ia32_bextr_u64(__X, __Y); 
# 121
} 
# 123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 124
_bextr_u64(unsigned long long __X, unsigned __Y, unsigned __Z) 
# 125
{ 
# 126
return __builtin_ia32_bextr_u64(__X, (__Y & (255)) | ((__Z & (255)) << 8)); 
# 127
} 
# 129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 130
__blsi_u64(unsigned long long __X) 
# 131
{ 
# 132
return __X & (-__X); 
# 133
} 
# 135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 136
_blsi_u64(unsigned long long __X) 
# 137
{ 
# 138
return __blsi_u64(__X); 
# 139
} 
# 141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 142
__blsmsk_u64(unsigned long long __X) 
# 143
{ 
# 144
return __X ^ (__X - (1)); 
# 145
} 
# 147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 148
_blsmsk_u64(unsigned long long __X) 
# 149
{ 
# 150
return __blsmsk_u64(__X); 
# 151
} 
# 153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 154
__blsr_u64(unsigned long long __X) 
# 155
{ 
# 156
return __X & (__X - (1)); 
# 157
} 
# 159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 160
_blsr_u64(unsigned long long __X) 
# 161
{ 
# 162
return __blsr_u64(__X); 
# 163
} 
# 165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 166
__tzcnt_u64(unsigned long long __X) 
# 167
{ 
# 168
return __builtin_ctzll(__X); 
# 169
} 
# 171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 172
_tzcnt_u64(unsigned long long __X) 
# 173
{ 
# 174
return __builtin_ctzll(__X); 
# 175
} 
# 181
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/bmi2intrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "bmi2" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 39
_bzhi_u32(unsigned __X, unsigned __Y) 
# 40
{ 
# 41
return __builtin_ia32_bzhi_si(__X, __Y); 
# 42
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 46
_pdep_u32(unsigned __X, unsigned __Y) 
# 47
{ 
# 48
return __builtin_ia32_pdep_si(__X, __Y); 
# 49
} 
# 52
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 53
_pext_u32(unsigned __X, unsigned __Y) 
# 54
{ 
# 55
return __builtin_ia32_pext_si(__X, __Y); 
# 56
} 
# 61
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 62
_bzhi_u64(unsigned long long __X, unsigned long long __Y) 
# 63
{ 
# 64
return __builtin_ia32_bzhi_di(__X, __Y); 
# 65
} 
# 68
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 69
_pdep_u64(unsigned long long __X, unsigned long long __Y) 
# 70
{ 
# 71
return __builtin_ia32_pdep_di(__X, __Y); 
# 72
} 
# 75
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 76
_pext_u64(unsigned long long __X, unsigned long long __Y) 
# 77
{ 
# 78
return __builtin_ia32_pext_di(__X, __Y); 
# 79
} 
# 82
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 83
_mulx_u64(unsigned long long __X, unsigned long long __Y, unsigned long long *
# 84
__P) 
# 85
{ 
# 86
__uint128_t __res = ((__uint128_t)__X) * __Y; 
# 87
(*__P) = ((unsigned long long)(__res >> 64)); 
# 88
return (unsigned long long)__res; 
# 89
} 
# 106
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/fmaintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "fma" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 39
_mm_fmadd_pd(__m128d __A, __m128d __B, __m128d __C) 
# 40
{ 
# 41
return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C); 
# 43
} 
# 46
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 47
_mm256_fmadd_pd(__m256d __A, __m256d __B, __m256d __C) 
# 48
{ 
# 49
return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C); 
# 51
} 
# 54
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 55
_mm_fmadd_ps(__m128 __A, __m128 __B, __m128 __C) 
# 56
{ 
# 57
return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C); 
# 59
} 
# 62
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 63
_mm256_fmadd_ps(__m256 __A, __m256 __B, __m256 __C) 
# 64
{ 
# 65
return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C); 
# 67
} 
# 70
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 71
_mm_fmadd_sd(__m128d __A, __m128d __B, __m128d __C) 
# 72
{ 
# 73
return (__m128d)__builtin_ia32_vfmaddsd3((__v2df)__A, (__v2df)__B, (__v2df)__C); 
# 75
} 
# 78
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 79
_mm_fmadd_ss(__m128 __A, __m128 __B, __m128 __C) 
# 80
{ 
# 81
return (__m128)__builtin_ia32_vfmaddss3((__v4sf)__A, (__v4sf)__B, (__v4sf)__C); 
# 83
} 
# 86
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 87
_mm_fmsub_pd(__m128d __A, __m128d __B, __m128d __C) 
# 88
{ 
# 89
return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B, -((__v2df)__C)); 
# 91
} 
# 94
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 95
_mm256_fmsub_pd(__m256d __A, __m256d __B, __m256d __C) 
# 96
{ 
# 97
return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B, -((__v4df)__C)); 
# 99
} 
# 102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 103
_mm_fmsub_ps(__m128 __A, __m128 __B, __m128 __C) 
# 104
{ 
# 105
return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C)); 
# 107
} 
# 110
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 111
_mm256_fmsub_ps(__m256 __A, __m256 __B, __m256 __C) 
# 112
{ 
# 113
return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B, -((__v8sf)__C)); 
# 115
} 
# 118
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 119
_mm_fmsub_sd(__m128d __A, __m128d __B, __m128d __C) 
# 120
{ 
# 121
return (__m128d)__builtin_ia32_vfmaddsd3((__v2df)__A, (__v2df)__B, -((__v2df)__C)); 
# 123
} 
# 126
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 127
_mm_fmsub_ss(__m128 __A, __m128 __B, __m128 __C) 
# 128
{ 
# 129
return (__m128)__builtin_ia32_vfmaddss3((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C)); 
# 131
} 
# 134
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 135
_mm_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C) 
# 136
{ 
# 137
return (__m128d)__builtin_ia32_vfmaddpd(-((__v2df)__A), (__v2df)__B, (__v2df)__C); 
# 139
} 
# 142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 143
_mm256_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C) 
# 144
{ 
# 145
return (__m256d)__builtin_ia32_vfmaddpd256(-((__v4df)__A), (__v4df)__B, (__v4df)__C); 
# 147
} 
# 150
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 151
_mm_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C) 
# 152
{ 
# 153
return (__m128)__builtin_ia32_vfmaddps(-((__v4sf)__A), (__v4sf)__B, (__v4sf)__C); 
# 155
} 
# 158
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 159
_mm256_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C) 
# 160
{ 
# 161
return (__m256)__builtin_ia32_vfmaddps256(-((__v8sf)__A), (__v8sf)__B, (__v8sf)__C); 
# 163
} 
# 166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 167
_mm_fnmadd_sd(__m128d __A, __m128d __B, __m128d __C) 
# 168
{ 
# 169
return (__m128d)__builtin_ia32_vfmaddsd3((__v2df)__A, -((__v2df)__B), (__v2df)__C); 
# 171
} 
# 174
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 175
_mm_fnmadd_ss(__m128 __A, __m128 __B, __m128 __C) 
# 176
{ 
# 177
return (__m128)__builtin_ia32_vfmaddss3((__v4sf)__A, -((__v4sf)__B), (__v4sf)__C); 
# 179
} 
# 182
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 183
_mm_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C) 
# 184
{ 
# 185
return (__m128d)__builtin_ia32_vfmaddpd(-((__v2df)__A), (__v2df)__B, -((__v2df)__C)); 
# 187
} 
# 190
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 191
_mm256_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C) 
# 192
{ 
# 193
return (__m256d)__builtin_ia32_vfmaddpd256(-((__v4df)__A), (__v4df)__B, -((__v4df)__C)); 
# 195
} 
# 198
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 199
_mm_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C) 
# 200
{ 
# 201
return (__m128)__builtin_ia32_vfmaddps(-((__v4sf)__A), (__v4sf)__B, -((__v4sf)__C)); 
# 203
} 
# 206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 207
_mm256_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C) 
# 208
{ 
# 209
return (__m256)__builtin_ia32_vfmaddps256(-((__v8sf)__A), (__v8sf)__B, -((__v8sf)__C)); 
# 211
} 
# 214
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 215
_mm_fnmsub_sd(__m128d __A, __m128d __B, __m128d __C) 
# 216
{ 
# 217
return (__m128d)__builtin_ia32_vfmaddsd3((__v2df)__A, -((__v2df)__B), -((__v2df)__C)); 
# 219
} 
# 222
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 223
_mm_fnmsub_ss(__m128 __A, __m128 __B, __m128 __C) 
# 224
{ 
# 225
return (__m128)__builtin_ia32_vfmaddss3((__v4sf)__A, -((__v4sf)__B), -((__v4sf)__C)); 
# 227
} 
# 230
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 231
_mm_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C) 
# 232
{ 
# 233
return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C); 
# 235
} 
# 238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 239
_mm256_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C) 
# 240
{ 
# 241
return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C); 
# 244
} 
# 247
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 248
_mm_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C) 
# 249
{ 
# 250
return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C); 
# 252
} 
# 255
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 256
_mm256_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C) 
# 257
{ 
# 258
return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C); 
# 261
} 
# 264
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 265
_mm_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C) 
# 266
{ 
# 267
return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B, -((__v2df)__C)); 
# 269
} 
# 272
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 273
_mm256_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C) 
# 274
{ 
# 275
return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B, -((__v4df)__C)); 
# 278
} 
# 281
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 282
_mm_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C) 
# 283
{ 
# 284
return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C)); 
# 286
} 
# 289
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 290
_mm256_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C) 
# 291
{ 
# 292
return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B, -((__v8sf)__C)); 
# 295
} 
# 299
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/f16cintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "f16c" )
# 37
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline float 
# 38
_cvtsh_ss(unsigned short __S) 
# 39
{ 
# 40
__v8hi __H = ((__v8hi){(short)__S, (0), (0), (0), (0), (0), (0), (0)}); 
# 41
__v4sf __A = __builtin_ia32_vcvtph2ps(__H); 
# 42
return __builtin_ia32_vec_ext_v4sf(__A, 0); 
# 43
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 46
_mm_cvtph_ps(__m128i __A) 
# 47
{ 
# 48
return (__m128)__builtin_ia32_vcvtph2ps((__v8hi)__A); 
# 49
} 
# 51
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 52
_mm256_cvtph_ps(__m128i __A) 
# 53
{ 
# 54
return (__m256)__builtin_ia32_vcvtph2ps256((__v8hi)__A); 
# 55
} 
# 58
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned short 
# 59
_cvtss_sh(float __F, const int __I) 
# 60
{ 
# 61
__v4sf __A = ((__v4sf){__F, (0), (0), (0)}); 
# 62
__v8hi __H = __builtin_ia32_vcvtps2ph(__A, __I); 
# 63
return (unsigned short)__builtin_ia32_vec_ext_v8hi(__H, 0); 
# 64
} 
# 66
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 67
_mm_cvtps_ph(__m128 __A, const int __I) 
# 68
{ 
# 69
return (__m128i)__builtin_ia32_vcvtps2ph((__v4sf)__A, __I); 
# 70
} 
# 72
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 73
_mm256_cvtps_ph(__m256 __A, const int __I) 
# 74
{ 
# 75
return (__m128i)__builtin_ia32_vcvtps2ph256((__v8sf)__A, __I); 
# 76
} 
# 95
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/rtmintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "rtm" )
# 49
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 50
_xbegin() 
# 51
{ 
# 52
return __builtin_ia32_xbegin(); 
# 53
} 
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 61
_xend() 
# 62
{ 
# 63
__builtin_ia32_xend(); 
# 64
} 
# 70
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 71
_xabort(const unsigned imm) 
# 72
{ 
# 73
__builtin_ia32_xabort(imm); 
# 74
} 
# 81
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/xtestintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "rtm" )
# 40
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 41
_xtest() 
# 42
{ 
# 43
return __builtin_ia32_xtest(); 
# 44
} 
# 48
#pragma GCC pop_options
# 88 "/usr/lib/gcc/x86_64-linux-gnu/5/include/immintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "rdrnd" )
# 93
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 94
_rdrand16_step(unsigned short *__P) 
# 95
{ 
# 96
return __builtin_ia32_rdrand16_step(__P); 
# 97
} 
# 100
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 101
_rdrand32_step(unsigned *__P) 
# 102
{ 
# 103
return __builtin_ia32_rdrand32_step(__P); 
# 104
} 
# 107
#pragma GCC pop_options
# 113
#pragma GCC push_options
#pragma GCC target ( "fsgsbase" )
# 118
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 119
_readfsbase_u32() 
# 120
{ 
# 121
return __builtin_ia32_rdfsbase32(); 
# 122
} 
# 125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 126
_readfsbase_u64() 
# 127
{ 
# 128
return __builtin_ia32_rdfsbase64(); 
# 129
} 
# 132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 133
_readgsbase_u32() 
# 134
{ 
# 135
return __builtin_ia32_rdgsbase32(); 
# 136
} 
# 139
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 140
_readgsbase_u64() 
# 141
{ 
# 142
return __builtin_ia32_rdgsbase64(); 
# 143
} 
# 146
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 147
_writefsbase_u32(unsigned __B) 
# 148
{ 
# 149
__builtin_ia32_wrfsbase32(__B); 
# 150
} 
# 153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 154
_writefsbase_u64(unsigned long long __B) 
# 155
{ 
# 156
__builtin_ia32_wrfsbase64(__B); 
# 157
} 
# 160
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 161
_writegsbase_u32(unsigned __B) 
# 162
{ 
# 163
__builtin_ia32_wrgsbase32(__B); 
# 164
} 
# 167
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 168
_writegsbase_u64(unsigned long long __B) 
# 169
{ 
# 170
__builtin_ia32_wrgsbase64(__B); 
# 171
} 
# 174
#pragma GCC pop_options
# 178
#pragma GCC push_options
#pragma GCC target ( "rdrnd" )
# 183
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 184
_rdrand64_step(unsigned long long *__P) 
# 185
{ 
# 186
return __builtin_ia32_rdrand64_step(__P); 
# 187
} 
# 190
#pragma GCC pop_options
# 31 "/usr/lib/gcc/x86_64-linux-gnu/5/include/prfchwintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 32
_m_prefetchw(void *__P) 
# 33
{ 
# 34
__builtin_prefetch(__P, 1, 3); 
# 35
} 
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include/mm3dnow.h" 3
#pragma GCC push_options
#pragma GCC target ( "3dnow" )
# 39
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 40
_m_femms() 
# 41
{ 
# 42
__builtin_ia32_femms(); 
# 43
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 46
_m_pavgusb(__m64 __A, __m64 __B) 
# 47
{ 
# 48
return (__m64)__builtin_ia32_pavgusb((__v8qi)__A, (__v8qi)__B); 
# 49
} 
# 51
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 52
_m_pf2id(__m64 __A) 
# 53
{ 
# 54
return (__m64)__builtin_ia32_pf2id((__v2sf)__A); 
# 55
} 
# 57
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 58
_m_pfacc(__m64 __A, __m64 __B) 
# 59
{ 
# 60
return (__m64)__builtin_ia32_pfacc((__v2sf)__A, (__v2sf)__B); 
# 61
} 
# 63
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 64
_m_pfadd(__m64 __A, __m64 __B) 
# 65
{ 
# 66
return (__m64)__builtin_ia32_pfadd((__v2sf)__A, (__v2sf)__B); 
# 67
} 
# 69
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 70
_m_pfcmpeq(__m64 __A, __m64 __B) 
# 71
{ 
# 72
return (__m64)__builtin_ia32_pfcmpeq((__v2sf)__A, (__v2sf)__B); 
# 73
} 
# 75
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 76
_m_pfcmpge(__m64 __A, __m64 __B) 
# 77
{ 
# 78
return (__m64)__builtin_ia32_pfcmpge((__v2sf)__A, (__v2sf)__B); 
# 79
} 
# 81
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 82
_m_pfcmpgt(__m64 __A, __m64 __B) 
# 83
{ 
# 84
return (__m64)__builtin_ia32_pfcmpgt((__v2sf)__A, (__v2sf)__B); 
# 85
} 
# 87
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 88
_m_pfmax(__m64 __A, __m64 __B) 
# 89
{ 
# 90
return (__m64)__builtin_ia32_pfmax((__v2sf)__A, (__v2sf)__B); 
# 91
} 
# 93
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 94
_m_pfmin(__m64 __A, __m64 __B) 
# 95
{ 
# 96
return (__m64)__builtin_ia32_pfmin((__v2sf)__A, (__v2sf)__B); 
# 97
} 
# 99
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 100
_m_pfmul(__m64 __A, __m64 __B) 
# 101
{ 
# 102
return (__m64)__builtin_ia32_pfmul((__v2sf)__A, (__v2sf)__B); 
# 103
} 
# 105
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 106
_m_pfrcp(__m64 __A) 
# 107
{ 
# 108
return (__m64)__builtin_ia32_pfrcp((__v2sf)__A); 
# 109
} 
# 111
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 112
_m_pfrcpit1(__m64 __A, __m64 __B) 
# 113
{ 
# 114
return (__m64)__builtin_ia32_pfrcpit1((__v2sf)__A, (__v2sf)__B); 
# 115
} 
# 117
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 118
_m_pfrcpit2(__m64 __A, __m64 __B) 
# 119
{ 
# 120
return (__m64)__builtin_ia32_pfrcpit2((__v2sf)__A, (__v2sf)__B); 
# 121
} 
# 123
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 124
_m_pfrsqrt(__m64 __A) 
# 125
{ 
# 126
return (__m64)__builtin_ia32_pfrsqrt((__v2sf)__A); 
# 127
} 
# 129
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 130
_m_pfrsqit1(__m64 __A, __m64 __B) 
# 131
{ 
# 132
return (__m64)__builtin_ia32_pfrsqit1((__v2sf)__A, (__v2sf)__B); 
# 133
} 
# 135
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 136
_m_pfsub(__m64 __A, __m64 __B) 
# 137
{ 
# 138
return (__m64)__builtin_ia32_pfsub((__v2sf)__A, (__v2sf)__B); 
# 139
} 
# 141
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 142
_m_pfsubr(__m64 __A, __m64 __B) 
# 143
{ 
# 144
return (__m64)__builtin_ia32_pfsubr((__v2sf)__A, (__v2sf)__B); 
# 145
} 
# 147
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 148
_m_pi2fd(__m64 __A) 
# 149
{ 
# 150
return (__m64)__builtin_ia32_pi2fd((__v2si)__A); 
# 151
} 
# 153
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 154
_m_pmulhrw(__m64 __A, __m64 __B) 
# 155
{ 
# 156
return (__m64)__builtin_ia32_pmulhrw((__v4hi)__A, (__v4hi)__B); 
# 157
} 
# 159
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 160
_m_prefetch(void *__P) 
# 161
{ 
# 162
__builtin_prefetch(__P, 0, 3); 
# 163
} 
# 165
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m64 
# 166
_m_from_float(float __A) 
# 167
{ 
# 168
return __extension__ (__m64)(((__v2sf){__A, (0.0F)})); 
# 169
} 
# 171
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline float 
# 172
_m_to_float(__m64 __A) 
# 173
{ 
# 174
union { __v2sf v; float a[2]; } __tmp; 
# 175
(__tmp.v) = ((__v2sf)__A); 
# 176
return (__tmp.a)[0]; 
# 177
} 
# 215
#pragma GCC pop_options
# 35 "/usr/lib/gcc/x86_64-linux-gnu/5/include/fma4intrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "fma4" )
# 41
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 42
_mm_macc_ps(__m128 __A, __m128 __B, __m128 __C) 
# 43
{ 
# 44
return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C); 
# 45
} 
# 47
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 48
_mm_macc_pd(__m128d __A, __m128d __B, __m128d __C) 
# 49
{ 
# 50
return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B, (__v2df)__C); 
# 51
} 
# 53
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 54
_mm_macc_ss(__m128 __A, __m128 __B, __m128 __C) 
# 55
{ 
# 56
return (__m128)__builtin_ia32_vfmaddss((__v4sf)__A, (__v4sf)__B, (__v4sf)__C); 
# 57
} 
# 59
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 60
_mm_macc_sd(__m128d __A, __m128d __B, __m128d __C) 
# 61
{ 
# 62
return (__m128d)__builtin_ia32_vfmaddsd((__v2df)__A, (__v2df)__B, (__v2df)__C); 
# 63
} 
# 65
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 66
_mm_msub_ps(__m128 __A, __m128 __B, __m128 __C) 
# 68
{ 
# 69
return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C)); 
# 70
} 
# 72
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 73
_mm_msub_pd(__m128d __A, __m128d __B, __m128d __C) 
# 74
{ 
# 75
return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B, -((__v2df)__C)); 
# 76
} 
# 78
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 79
_mm_msub_ss(__m128 __A, __m128 __B, __m128 __C) 
# 80
{ 
# 81
return (__m128)__builtin_ia32_vfmaddss((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C)); 
# 82
} 
# 84
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 85
_mm_msub_sd(__m128d __A, __m128d __B, __m128d __C) 
# 86
{ 
# 87
return (__m128d)__builtin_ia32_vfmaddsd((__v2df)__A, (__v2df)__B, -((__v2df)__C)); 
# 88
} 
# 90
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 91
_mm_nmacc_ps(__m128 __A, __m128 __B, __m128 __C) 
# 92
{ 
# 93
return (__m128)__builtin_ia32_vfmaddps(-((__v4sf)__A), (__v4sf)__B, (__v4sf)__C); 
# 94
} 
# 96
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 97
_mm_nmacc_pd(__m128d __A, __m128d __B, __m128d __C) 
# 98
{ 
# 99
return (__m128d)__builtin_ia32_vfmaddpd(-((__v2df)__A), (__v2df)__B, (__v2df)__C); 
# 100
} 
# 102
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 103
_mm_nmacc_ss(__m128 __A, __m128 __B, __m128 __C) 
# 104
{ 
# 105
return (__m128)__builtin_ia32_vfmaddss(-((__v4sf)__A), (__v4sf)__B, (__v4sf)__C); 
# 106
} 
# 108
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 109
_mm_nmacc_sd(__m128d __A, __m128d __B, __m128d __C) 
# 110
{ 
# 111
return (__m128d)__builtin_ia32_vfmaddsd(-((__v2df)__A), (__v2df)__B, (__v2df)__C); 
# 112
} 
# 114
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 115
_mm_nmsub_ps(__m128 __A, __m128 __B, __m128 __C) 
# 116
{ 
# 117
return (__m128)__builtin_ia32_vfmaddps(-((__v4sf)__A), (__v4sf)__B, -((__v4sf)__C)); 
# 118
} 
# 120
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 121
_mm_nmsub_pd(__m128d __A, __m128d __B, __m128d __C) 
# 122
{ 
# 123
return (__m128d)__builtin_ia32_vfmaddpd(-((__v2df)__A), (__v2df)__B, -((__v2df)__C)); 
# 124
} 
# 126
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 127
_mm_nmsub_ss(__m128 __A, __m128 __B, __m128 __C) 
# 128
{ 
# 129
return (__m128)__builtin_ia32_vfmaddss(-((__v4sf)__A), (__v4sf)__B, -((__v4sf)__C)); 
# 130
} 
# 132
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 133
_mm_nmsub_sd(__m128d __A, __m128d __B, __m128d __C) 
# 134
{ 
# 135
return (__m128d)__builtin_ia32_vfmaddsd(-((__v2df)__A), (__v2df)__B, -((__v2df)__C)); 
# 136
} 
# 138
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 139
_mm_maddsub_ps(__m128 __A, __m128 __B, __m128 __C) 
# 140
{ 
# 141
return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C); 
# 142
} 
# 144
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 145
_mm_maddsub_pd(__m128d __A, __m128d __B, __m128d __C) 
# 146
{ 
# 147
return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B, (__v2df)__C); 
# 148
} 
# 150
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 151
_mm_msubadd_ps(__m128 __A, __m128 __B, __m128 __C) 
# 152
{ 
# 153
return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B, -((__v4sf)__C)); 
# 154
} 
# 156
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 157
_mm_msubadd_pd(__m128d __A, __m128d __B, __m128d __C) 
# 158
{ 
# 159
return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B, -((__v2df)__C)); 
# 160
} 
# 163
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 164
_mm256_macc_ps(__m256 __A, __m256 __B, __m256 __C) 
# 165
{ 
# 166
return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C); 
# 167
} 
# 169
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 170
_mm256_macc_pd(__m256d __A, __m256d __B, __m256d __C) 
# 171
{ 
# 172
return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B, (__v4df)__C); 
# 173
} 
# 175
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 176
_mm256_msub_ps(__m256 __A, __m256 __B, __m256 __C) 
# 178
{ 
# 179
return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B, -((__v8sf)__C)); 
# 180
} 
# 182
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 183
_mm256_msub_pd(__m256d __A, __m256d __B, __m256d __C) 
# 184
{ 
# 185
return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B, -((__v4df)__C)); 
# 186
} 
# 188
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 189
_mm256_nmacc_ps(__m256 __A, __m256 __B, __m256 __C) 
# 190
{ 
# 191
return (__m256)__builtin_ia32_vfmaddps256(-((__v8sf)__A), (__v8sf)__B, (__v8sf)__C); 
# 192
} 
# 194
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 195
_mm256_nmacc_pd(__m256d __A, __m256d __B, __m256d __C) 
# 196
{ 
# 197
return (__m256d)__builtin_ia32_vfmaddpd256(-((__v4df)__A), (__v4df)__B, (__v4df)__C); 
# 198
} 
# 200
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 201
_mm256_nmsub_ps(__m256 __A, __m256 __B, __m256 __C) 
# 202
{ 
# 203
return (__m256)__builtin_ia32_vfmaddps256(-((__v8sf)__A), (__v8sf)__B, -((__v8sf)__C)); 
# 204
} 
# 206
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 207
_mm256_nmsub_pd(__m256d __A, __m256d __B, __m256d __C) 
# 208
{ 
# 209
return (__m256d)__builtin_ia32_vfmaddpd256(-((__v4df)__A), (__v4df)__B, -((__v4df)__C)); 
# 210
} 
# 212
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 213
_mm256_maddsub_ps(__m256 __A, __m256 __B, __m256 __C) 
# 214
{ 
# 215
return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B, (__v8sf)__C); 
# 216
} 
# 218
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 219
_mm256_maddsub_pd(__m256d __A, __m256d __B, __m256d __C) 
# 220
{ 
# 221
return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B, (__v4df)__C); 
# 222
} 
# 224
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 225
_mm256_msubadd_ps(__m256 __A, __m256 __B, __m256 __C) 
# 226
{ 
# 227
return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B, -((__v8sf)__C)); 
# 228
} 
# 230
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 231
_mm256_msubadd_pd(__m256d __A, __m256d __B, __m256d __C) 
# 232
{ 
# 233
return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B, -((__v4df)__C)); 
# 234
} 
# 238
#pragma GCC pop_options
# 34 "/usr/lib/gcc/x86_64-linux-gnu/5/include/xopintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "xop" )
# 40
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 41
_mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C) 
# 42
{ 
# 43
return (__m128i)__builtin_ia32_vpmacssww((__v8hi)__A, (__v8hi)__B, (__v8hi)__C); 
# 44
} 
# 46
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 47
_mm_macc_epi16(__m128i __A, __m128i __B, __m128i __C) 
# 48
{ 
# 49
return (__m128i)__builtin_ia32_vpmacsww((__v8hi)__A, (__v8hi)__B, (__v8hi)__C); 
# 50
} 
# 52
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 53
_mm_maccsd_epi16(__m128i __A, __m128i __B, __m128i __C) 
# 54
{ 
# 55
return (__m128i)__builtin_ia32_vpmacsswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C); 
# 56
} 
# 58
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 59
_mm_maccd_epi16(__m128i __A, __m128i __B, __m128i __C) 
# 60
{ 
# 61
return (__m128i)__builtin_ia32_vpmacswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C); 
# 62
} 
# 64
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 65
_mm_maccs_epi32(__m128i __A, __m128i __B, __m128i __C) 
# 66
{ 
# 67
return (__m128i)__builtin_ia32_vpmacssdd((__v4si)__A, (__v4si)__B, (__v4si)__C); 
# 68
} 
# 70
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 71
_mm_macc_epi32(__m128i __A, __m128i __B, __m128i __C) 
# 72
{ 
# 73
return (__m128i)__builtin_ia32_vpmacsdd((__v4si)__A, (__v4si)__B, (__v4si)__C); 
# 74
} 
# 76
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 77
_mm_maccslo_epi32(__m128i __A, __m128i __B, __m128i __C) 
# 78
{ 
# 79
return (__m128i)__builtin_ia32_vpmacssdql((__v4si)__A, (__v4si)__B, (__v2di)__C); 
# 80
} 
# 82
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 83
_mm_macclo_epi32(__m128i __A, __m128i __B, __m128i __C) 
# 84
{ 
# 85
return (__m128i)__builtin_ia32_vpmacsdql((__v4si)__A, (__v4si)__B, (__v2di)__C); 
# 86
} 
# 88
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 89
_mm_maccshi_epi32(__m128i __A, __m128i __B, __m128i __C) 
# 90
{ 
# 91
return (__m128i)__builtin_ia32_vpmacssdqh((__v4si)__A, (__v4si)__B, (__v2di)__C); 
# 92
} 
# 94
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 95
_mm_macchi_epi32(__m128i __A, __m128i __B, __m128i __C) 
# 96
{ 
# 97
return (__m128i)__builtin_ia32_vpmacsdqh((__v4si)__A, (__v4si)__B, (__v2di)__C); 
# 98
} 
# 100
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 101
_mm_maddsd_epi16(__m128i __A, __m128i __B, __m128i __C) 
# 102
{ 
# 103
return (__m128i)__builtin_ia32_vpmadcsswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C); 
# 104
} 
# 106
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 107
_mm_maddd_epi16(__m128i __A, __m128i __B, __m128i __C) 
# 108
{ 
# 109
return (__m128i)__builtin_ia32_vpmadcswd((__v8hi)__A, (__v8hi)__B, (__v4si)__C); 
# 110
} 
# 113
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 114
_mm_haddw_epi8(__m128i __A) 
# 115
{ 
# 116
return (__m128i)__builtin_ia32_vphaddbw((__v16qi)__A); 
# 117
} 
# 119
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 120
_mm_haddd_epi8(__m128i __A) 
# 121
{ 
# 122
return (__m128i)__builtin_ia32_vphaddbd((__v16qi)__A); 
# 123
} 
# 125
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 126
_mm_haddq_epi8(__m128i __A) 
# 127
{ 
# 128
return (__m128i)__builtin_ia32_vphaddbq((__v16qi)__A); 
# 129
} 
# 131
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 132
_mm_haddd_epi16(__m128i __A) 
# 133
{ 
# 134
return (__m128i)__builtin_ia32_vphaddwd((__v8hi)__A); 
# 135
} 
# 137
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 138
_mm_haddq_epi16(__m128i __A) 
# 139
{ 
# 140
return (__m128i)__builtin_ia32_vphaddwq((__v8hi)__A); 
# 141
} 
# 143
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 144
_mm_haddq_epi32(__m128i __A) 
# 145
{ 
# 146
return (__m128i)__builtin_ia32_vphadddq((__v4si)__A); 
# 147
} 
# 149
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 150
_mm_haddw_epu8(__m128i __A) 
# 151
{ 
# 152
return (__m128i)__builtin_ia32_vphaddubw((__v16qi)__A); 
# 153
} 
# 155
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 156
_mm_haddd_epu8(__m128i __A) 
# 157
{ 
# 158
return (__m128i)__builtin_ia32_vphaddubd((__v16qi)__A); 
# 159
} 
# 161
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 162
_mm_haddq_epu8(__m128i __A) 
# 163
{ 
# 164
return (__m128i)__builtin_ia32_vphaddubq((__v16qi)__A); 
# 165
} 
# 167
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 168
_mm_haddd_epu16(__m128i __A) 
# 169
{ 
# 170
return (__m128i)__builtin_ia32_vphadduwd((__v8hi)__A); 
# 171
} 
# 173
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 174
_mm_haddq_epu16(__m128i __A) 
# 175
{ 
# 176
return (__m128i)__builtin_ia32_vphadduwq((__v8hi)__A); 
# 177
} 
# 179
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 180
_mm_haddq_epu32(__m128i __A) 
# 181
{ 
# 182
return (__m128i)__builtin_ia32_vphaddudq((__v4si)__A); 
# 183
} 
# 185
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 186
_mm_hsubw_epi8(__m128i __A) 
# 187
{ 
# 188
return (__m128i)__builtin_ia32_vphsubbw((__v16qi)__A); 
# 189
} 
# 191
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 192
_mm_hsubd_epi16(__m128i __A) 
# 193
{ 
# 194
return (__m128i)__builtin_ia32_vphsubwd((__v8hi)__A); 
# 195
} 
# 197
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 198
_mm_hsubq_epi32(__m128i __A) 
# 199
{ 
# 200
return (__m128i)__builtin_ia32_vphsubdq((__v4si)__A); 
# 201
} 
# 205
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 206
_mm_cmov_si128(__m128i __A, __m128i __B, __m128i __C) 
# 207
{ 
# 208
return (__m128i)__builtin_ia32_vpcmov(__A, __B, __C); 
# 209
} 
# 211
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 212
_mm_perm_epi8(__m128i __A, __m128i __B, __m128i __C) 
# 213
{ 
# 214
return (__m128i)__builtin_ia32_vpperm((__v16qi)__A, (__v16qi)__B, (__v16qi)__C); 
# 215
} 
# 220
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 221
_mm_rot_epi8(__m128i __A, __m128i __B) 
# 222
{ 
# 223
return (__m128i)__builtin_ia32_vprotb((__v16qi)__A, (__v16qi)__B); 
# 224
} 
# 226
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 227
_mm_rot_epi16(__m128i __A, __m128i __B) 
# 228
{ 
# 229
return (__m128i)__builtin_ia32_vprotw((__v8hi)__A, (__v8hi)__B); 
# 230
} 
# 232
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 233
_mm_rot_epi32(__m128i __A, __m128i __B) 
# 234
{ 
# 235
return (__m128i)__builtin_ia32_vprotd((__v4si)__A, (__v4si)__B); 
# 236
} 
# 238
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 239
_mm_rot_epi64(__m128i __A, __m128i __B) 
# 240
{ 
# 241
return (__m128i)__builtin_ia32_vprotq((__v2di)__A, (__v2di)__B); 
# 242
} 
# 247
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 248
_mm_roti_epi8(__m128i __A, const int __B) 
# 249
{ 
# 250
return (__m128i)__builtin_ia32_vprotbi((__v16qi)__A, __B); 
# 251
} 
# 253
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 254
_mm_roti_epi16(__m128i __A, const int __B) 
# 255
{ 
# 256
return (__m128i)__builtin_ia32_vprotwi((__v8hi)__A, __B); 
# 257
} 
# 259
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 260
_mm_roti_epi32(__m128i __A, const int __B) 
# 261
{ 
# 262
return (__m128i)__builtin_ia32_vprotdi((__v4si)__A, __B); 
# 263
} 
# 265
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 266
_mm_roti_epi64(__m128i __A, const int __B) 
# 267
{ 
# 268
return (__m128i)__builtin_ia32_vprotqi((__v2di)__A, __B); 
# 269
} 
# 283
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 284
_mm_shl_epi8(__m128i __A, __m128i __B) 
# 285
{ 
# 286
return (__m128i)__builtin_ia32_vpshlb((__v16qi)__A, (__v16qi)__B); 
# 287
} 
# 289
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 290
_mm_shl_epi16(__m128i __A, __m128i __B) 
# 291
{ 
# 292
return (__m128i)__builtin_ia32_vpshlw((__v8hi)__A, (__v8hi)__B); 
# 293
} 
# 295
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 296
_mm_shl_epi32(__m128i __A, __m128i __B) 
# 297
{ 
# 298
return (__m128i)__builtin_ia32_vpshld((__v4si)__A, (__v4si)__B); 
# 299
} 
# 301
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 302
_mm_shl_epi64(__m128i __A, __m128i __B) 
# 303
{ 
# 304
return (__m128i)__builtin_ia32_vpshlq((__v2di)__A, (__v2di)__B); 
# 305
} 
# 308
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 309
_mm_sha_epi8(__m128i __A, __m128i __B) 
# 310
{ 
# 311
return (__m128i)__builtin_ia32_vpshab((__v16qi)__A, (__v16qi)__B); 
# 312
} 
# 314
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 315
_mm_sha_epi16(__m128i __A, __m128i __B) 
# 316
{ 
# 317
return (__m128i)__builtin_ia32_vpshaw((__v8hi)__A, (__v8hi)__B); 
# 318
} 
# 320
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 321
_mm_sha_epi32(__m128i __A, __m128i __B) 
# 322
{ 
# 323
return (__m128i)__builtin_ia32_vpshad((__v4si)__A, (__v4si)__B); 
# 324
} 
# 326
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 327
_mm_sha_epi64(__m128i __A, __m128i __B) 
# 328
{ 
# 329
return (__m128i)__builtin_ia32_vpshaq((__v2di)__A, (__v2di)__B); 
# 330
} 
# 335
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 336
_mm_comlt_epu8(__m128i __A, __m128i __B) 
# 337
{ 
# 338
return (__m128i)__builtin_ia32_vpcomltub((__v16qi)__A, (__v16qi)__B); 
# 339
} 
# 341
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 342
_mm_comle_epu8(__m128i __A, __m128i __B) 
# 343
{ 
# 344
return (__m128i)__builtin_ia32_vpcomleub((__v16qi)__A, (__v16qi)__B); 
# 345
} 
# 347
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 348
_mm_comgt_epu8(__m128i __A, __m128i __B) 
# 349
{ 
# 350
return (__m128i)__builtin_ia32_vpcomgtub((__v16qi)__A, (__v16qi)__B); 
# 351
} 
# 353
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 354
_mm_comge_epu8(__m128i __A, __m128i __B) 
# 355
{ 
# 356
return (__m128i)__builtin_ia32_vpcomgeub((__v16qi)__A, (__v16qi)__B); 
# 357
} 
# 359
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 360
_mm_comeq_epu8(__m128i __A, __m128i __B) 
# 361
{ 
# 362
return (__m128i)__builtin_ia32_vpcomequb((__v16qi)__A, (__v16qi)__B); 
# 363
} 
# 365
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 366
_mm_comneq_epu8(__m128i __A, __m128i __B) 
# 367
{ 
# 368
return (__m128i)__builtin_ia32_vpcomnequb((__v16qi)__A, (__v16qi)__B); 
# 369
} 
# 371
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 372
_mm_comfalse_epu8(__m128i __A, __m128i __B) 
# 373
{ 
# 374
return (__m128i)__builtin_ia32_vpcomfalseub((__v16qi)__A, (__v16qi)__B); 
# 375
} 
# 377
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 378
_mm_comtrue_epu8(__m128i __A, __m128i __B) 
# 379
{ 
# 380
return (__m128i)__builtin_ia32_vpcomtrueub((__v16qi)__A, (__v16qi)__B); 
# 381
} 
# 385
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 386
_mm_comlt_epu16(__m128i __A, __m128i __B) 
# 387
{ 
# 388
return (__m128i)__builtin_ia32_vpcomltuw((__v8hi)__A, (__v8hi)__B); 
# 389
} 
# 391
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 392
_mm_comle_epu16(__m128i __A, __m128i __B) 
# 393
{ 
# 394
return (__m128i)__builtin_ia32_vpcomleuw((__v8hi)__A, (__v8hi)__B); 
# 395
} 
# 397
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 398
_mm_comgt_epu16(__m128i __A, __m128i __B) 
# 399
{ 
# 400
return (__m128i)__builtin_ia32_vpcomgtuw((__v8hi)__A, (__v8hi)__B); 
# 401
} 
# 403
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 404
_mm_comge_epu16(__m128i __A, __m128i __B) 
# 405
{ 
# 406
return (__m128i)__builtin_ia32_vpcomgeuw((__v8hi)__A, (__v8hi)__B); 
# 407
} 
# 409
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 410
_mm_comeq_epu16(__m128i __A, __m128i __B) 
# 411
{ 
# 412
return (__m128i)__builtin_ia32_vpcomequw((__v8hi)__A, (__v8hi)__B); 
# 413
} 
# 415
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 416
_mm_comneq_epu16(__m128i __A, __m128i __B) 
# 417
{ 
# 418
return (__m128i)__builtin_ia32_vpcomnequw((__v8hi)__A, (__v8hi)__B); 
# 419
} 
# 421
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 422
_mm_comfalse_epu16(__m128i __A, __m128i __B) 
# 423
{ 
# 424
return (__m128i)__builtin_ia32_vpcomfalseuw((__v8hi)__A, (__v8hi)__B); 
# 425
} 
# 427
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 428
_mm_comtrue_epu16(__m128i __A, __m128i __B) 
# 429
{ 
# 430
return (__m128i)__builtin_ia32_vpcomtrueuw((__v8hi)__A, (__v8hi)__B); 
# 431
} 
# 435
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 436
_mm_comlt_epu32(__m128i __A, __m128i __B) 
# 437
{ 
# 438
return (__m128i)__builtin_ia32_vpcomltud((__v4si)__A, (__v4si)__B); 
# 439
} 
# 441
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 442
_mm_comle_epu32(__m128i __A, __m128i __B) 
# 443
{ 
# 444
return (__m128i)__builtin_ia32_vpcomleud((__v4si)__A, (__v4si)__B); 
# 445
} 
# 447
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 448
_mm_comgt_epu32(__m128i __A, __m128i __B) 
# 449
{ 
# 450
return (__m128i)__builtin_ia32_vpcomgtud((__v4si)__A, (__v4si)__B); 
# 451
} 
# 453
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 454
_mm_comge_epu32(__m128i __A, __m128i __B) 
# 455
{ 
# 456
return (__m128i)__builtin_ia32_vpcomgeud((__v4si)__A, (__v4si)__B); 
# 457
} 
# 459
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 460
_mm_comeq_epu32(__m128i __A, __m128i __B) 
# 461
{ 
# 462
return (__m128i)__builtin_ia32_vpcomequd((__v4si)__A, (__v4si)__B); 
# 463
} 
# 465
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 466
_mm_comneq_epu32(__m128i __A, __m128i __B) 
# 467
{ 
# 468
return (__m128i)__builtin_ia32_vpcomnequd((__v4si)__A, (__v4si)__B); 
# 469
} 
# 471
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 472
_mm_comfalse_epu32(__m128i __A, __m128i __B) 
# 473
{ 
# 474
return (__m128i)__builtin_ia32_vpcomfalseud((__v4si)__A, (__v4si)__B); 
# 475
} 
# 477
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 478
_mm_comtrue_epu32(__m128i __A, __m128i __B) 
# 479
{ 
# 480
return (__m128i)__builtin_ia32_vpcomtrueud((__v4si)__A, (__v4si)__B); 
# 481
} 
# 485
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 486
_mm_comlt_epu64(__m128i __A, __m128i __B) 
# 487
{ 
# 488
return (__m128i)__builtin_ia32_vpcomltuq((__v2di)__A, (__v2di)__B); 
# 489
} 
# 491
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 492
_mm_comle_epu64(__m128i __A, __m128i __B) 
# 493
{ 
# 494
return (__m128i)__builtin_ia32_vpcomleuq((__v2di)__A, (__v2di)__B); 
# 495
} 
# 497
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 498
_mm_comgt_epu64(__m128i __A, __m128i __B) 
# 499
{ 
# 500
return (__m128i)__builtin_ia32_vpcomgtuq((__v2di)__A, (__v2di)__B); 
# 501
} 
# 503
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 504
_mm_comge_epu64(__m128i __A, __m128i __B) 
# 505
{ 
# 506
return (__m128i)__builtin_ia32_vpcomgeuq((__v2di)__A, (__v2di)__B); 
# 507
} 
# 509
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 510
_mm_comeq_epu64(__m128i __A, __m128i __B) 
# 511
{ 
# 512
return (__m128i)__builtin_ia32_vpcomequq((__v2di)__A, (__v2di)__B); 
# 513
} 
# 515
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 516
_mm_comneq_epu64(__m128i __A, __m128i __B) 
# 517
{ 
# 518
return (__m128i)__builtin_ia32_vpcomnequq((__v2di)__A, (__v2di)__B); 
# 519
} 
# 521
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 522
_mm_comfalse_epu64(__m128i __A, __m128i __B) 
# 523
{ 
# 524
return (__m128i)__builtin_ia32_vpcomfalseuq((__v2di)__A, (__v2di)__B); 
# 525
} 
# 527
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 528
_mm_comtrue_epu64(__m128i __A, __m128i __B) 
# 529
{ 
# 530
return (__m128i)__builtin_ia32_vpcomtrueuq((__v2di)__A, (__v2di)__B); 
# 531
} 
# 535
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 536
_mm_comlt_epi8(__m128i __A, __m128i __B) 
# 537
{ 
# 538
return (__m128i)__builtin_ia32_vpcomltb((__v16qi)__A, (__v16qi)__B); 
# 539
} 
# 541
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 542
_mm_comle_epi8(__m128i __A, __m128i __B) 
# 543
{ 
# 544
return (__m128i)__builtin_ia32_vpcomleb((__v16qi)__A, (__v16qi)__B); 
# 545
} 
# 547
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 548
_mm_comgt_epi8(__m128i __A, __m128i __B) 
# 549
{ 
# 550
return (__m128i)__builtin_ia32_vpcomgtb((__v16qi)__A, (__v16qi)__B); 
# 551
} 
# 553
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 554
_mm_comge_epi8(__m128i __A, __m128i __B) 
# 555
{ 
# 556
return (__m128i)__builtin_ia32_vpcomgeb((__v16qi)__A, (__v16qi)__B); 
# 557
} 
# 559
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 560
_mm_comeq_epi8(__m128i __A, __m128i __B) 
# 561
{ 
# 562
return (__m128i)__builtin_ia32_vpcomeqb((__v16qi)__A, (__v16qi)__B); 
# 563
} 
# 565
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 566
_mm_comneq_epi8(__m128i __A, __m128i __B) 
# 567
{ 
# 568
return (__m128i)__builtin_ia32_vpcomneqb((__v16qi)__A, (__v16qi)__B); 
# 569
} 
# 571
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 572
_mm_comfalse_epi8(__m128i __A, __m128i __B) 
# 573
{ 
# 574
return (__m128i)__builtin_ia32_vpcomfalseb((__v16qi)__A, (__v16qi)__B); 
# 575
} 
# 577
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 578
_mm_comtrue_epi8(__m128i __A, __m128i __B) 
# 579
{ 
# 580
return (__m128i)__builtin_ia32_vpcomtrueb((__v16qi)__A, (__v16qi)__B); 
# 581
} 
# 585
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 586
_mm_comlt_epi16(__m128i __A, __m128i __B) 
# 587
{ 
# 588
return (__m128i)__builtin_ia32_vpcomltw((__v8hi)__A, (__v8hi)__B); 
# 589
} 
# 591
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 592
_mm_comle_epi16(__m128i __A, __m128i __B) 
# 593
{ 
# 594
return (__m128i)__builtin_ia32_vpcomlew((__v8hi)__A, (__v8hi)__B); 
# 595
} 
# 597
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 598
_mm_comgt_epi16(__m128i __A, __m128i __B) 
# 599
{ 
# 600
return (__m128i)__builtin_ia32_vpcomgtw((__v8hi)__A, (__v8hi)__B); 
# 601
} 
# 603
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 604
_mm_comge_epi16(__m128i __A, __m128i __B) 
# 605
{ 
# 606
return (__m128i)__builtin_ia32_vpcomgew((__v8hi)__A, (__v8hi)__B); 
# 607
} 
# 609
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 610
_mm_comeq_epi16(__m128i __A, __m128i __B) 
# 611
{ 
# 612
return (__m128i)__builtin_ia32_vpcomeqw((__v8hi)__A, (__v8hi)__B); 
# 613
} 
# 615
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 616
_mm_comneq_epi16(__m128i __A, __m128i __B) 
# 617
{ 
# 618
return (__m128i)__builtin_ia32_vpcomneqw((__v8hi)__A, (__v8hi)__B); 
# 619
} 
# 621
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 622
_mm_comfalse_epi16(__m128i __A, __m128i __B) 
# 623
{ 
# 624
return (__m128i)__builtin_ia32_vpcomfalsew((__v8hi)__A, (__v8hi)__B); 
# 625
} 
# 627
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 628
_mm_comtrue_epi16(__m128i __A, __m128i __B) 
# 629
{ 
# 630
return (__m128i)__builtin_ia32_vpcomtruew((__v8hi)__A, (__v8hi)__B); 
# 631
} 
# 635
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 636
_mm_comlt_epi32(__m128i __A, __m128i __B) 
# 637
{ 
# 638
return (__m128i)__builtin_ia32_vpcomltd((__v4si)__A, (__v4si)__B); 
# 639
} 
# 641
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 642
_mm_comle_epi32(__m128i __A, __m128i __B) 
# 643
{ 
# 644
return (__m128i)__builtin_ia32_vpcomled((__v4si)__A, (__v4si)__B); 
# 645
} 
# 647
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 648
_mm_comgt_epi32(__m128i __A, __m128i __B) 
# 649
{ 
# 650
return (__m128i)__builtin_ia32_vpcomgtd((__v4si)__A, (__v4si)__B); 
# 651
} 
# 653
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 654
_mm_comge_epi32(__m128i __A, __m128i __B) 
# 655
{ 
# 656
return (__m128i)__builtin_ia32_vpcomged((__v4si)__A, (__v4si)__B); 
# 657
} 
# 659
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 660
_mm_comeq_epi32(__m128i __A, __m128i __B) 
# 661
{ 
# 662
return (__m128i)__builtin_ia32_vpcomeqd((__v4si)__A, (__v4si)__B); 
# 663
} 
# 665
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 666
_mm_comneq_epi32(__m128i __A, __m128i __B) 
# 667
{ 
# 668
return (__m128i)__builtin_ia32_vpcomneqd((__v4si)__A, (__v4si)__B); 
# 669
} 
# 671
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 672
_mm_comfalse_epi32(__m128i __A, __m128i __B) 
# 673
{ 
# 674
return (__m128i)__builtin_ia32_vpcomfalsed((__v4si)__A, (__v4si)__B); 
# 675
} 
# 677
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 678
_mm_comtrue_epi32(__m128i __A, __m128i __B) 
# 679
{ 
# 680
return (__m128i)__builtin_ia32_vpcomtrued((__v4si)__A, (__v4si)__B); 
# 681
} 
# 685
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 686
_mm_comlt_epi64(__m128i __A, __m128i __B) 
# 687
{ 
# 688
return (__m128i)__builtin_ia32_vpcomltq((__v2di)__A, (__v2di)__B); 
# 689
} 
# 691
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 692
_mm_comle_epi64(__m128i __A, __m128i __B) 
# 693
{ 
# 694
return (__m128i)__builtin_ia32_vpcomleq((__v2di)__A, (__v2di)__B); 
# 695
} 
# 697
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 698
_mm_comgt_epi64(__m128i __A, __m128i __B) 
# 699
{ 
# 700
return (__m128i)__builtin_ia32_vpcomgtq((__v2di)__A, (__v2di)__B); 
# 701
} 
# 703
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 704
_mm_comge_epi64(__m128i __A, __m128i __B) 
# 705
{ 
# 706
return (__m128i)__builtin_ia32_vpcomgeq((__v2di)__A, (__v2di)__B); 
# 707
} 
# 709
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 710
_mm_comeq_epi64(__m128i __A, __m128i __B) 
# 711
{ 
# 712
return (__m128i)__builtin_ia32_vpcomeqq((__v2di)__A, (__v2di)__B); 
# 713
} 
# 715
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 716
_mm_comneq_epi64(__m128i __A, __m128i __B) 
# 717
{ 
# 718
return (__m128i)__builtin_ia32_vpcomneqq((__v2di)__A, (__v2di)__B); 
# 719
} 
# 721
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 722
_mm_comfalse_epi64(__m128i __A, __m128i __B) 
# 723
{ 
# 724
return (__m128i)__builtin_ia32_vpcomfalseq((__v2di)__A, (__v2di)__B); 
# 725
} 
# 727
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128i 
# 728
_mm_comtrue_epi64(__m128i __A, __m128i __B) 
# 729
{ 
# 730
return (__m128i)__builtin_ia32_vpcomtrueq((__v2di)__A, (__v2di)__B); 
# 731
} 
# 735
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 736
_mm_frcz_ps(__m128 __A) 
# 737
{ 
# 738
return (__m128)__builtin_ia32_vfrczps((__v4sf)__A); 
# 739
} 
# 741
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 742
_mm_frcz_pd(__m128d __A) 
# 743
{ 
# 744
return (__m128d)__builtin_ia32_vfrczpd((__v2df)__A); 
# 745
} 
# 747
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 748
_mm_frcz_ss(__m128 __A, __m128 __B) 
# 749
{ 
# 750
return (__m128)__builtin_ia32_movss((__v4sf)__A, (__v4sf)__builtin_ia32_vfrczss((__v4sf)__B)); 
# 753
} 
# 755
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 756
_mm_frcz_sd(__m128d __A, __m128d __B) 
# 757
{ 
# 758
return (__m128d)__builtin_ia32_movsd((__v2df)__A, (__v2df)__builtin_ia32_vfrczsd((__v2df)__B)); 
# 761
} 
# 763
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 764
_mm256_frcz_ps(__m256 __A) 
# 765
{ 
# 766
return (__m256)__builtin_ia32_vfrczps256((__v8sf)__A); 
# 767
} 
# 769
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 770
_mm256_frcz_pd(__m256d __A) 
# 771
{ 
# 772
return (__m256d)__builtin_ia32_vfrczpd256((__v4df)__A); 
# 773
} 
# 778
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128d 
# 779
_mm_permute2_pd(__m128d __X, __m128d __Y, __m128i __C, const int __I) 
# 780
{ 
# 781
return (__m128d)__builtin_ia32_vpermil2pd((__v2df)__X, (__v2df)__Y, (__v2di)__C, __I); 
# 785
} 
# 787
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256d 
# 788
_mm256_permute2_pd(__m256d __X, __m256d __Y, __m256i __C, const int __I) 
# 789
{ 
# 790
return (__m256d)__builtin_ia32_vpermil2pd256((__v4df)__X, (__v4df)__Y, (__v4di)__C, __I); 
# 794
} 
# 796
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m128 
# 797
_mm_permute2_ps(__m128 __X, __m128 __Y, __m128i __C, const int __I) 
# 798
{ 
# 799
return (__m128)__builtin_ia32_vpermil2ps((__v4sf)__X, (__v4sf)__Y, (__v4si)__C, __I); 
# 803
} 
# 805
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline __m256 
# 806
_mm256_permute2_ps(__m256 __X, __m256 __Y, __m256i __C, const int __I) 
# 807
{ 
# 808
return (__m256)__builtin_ia32_vpermil2ps256((__v8sf)__X, (__v8sf)__Y, (__v8si)__C, __I); 
# 812
} 
# 841
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/lwpintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "lwp" )
# 37
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 38
__llwpcb(void *pcbAddress) 
# 39
{ 
# 40
__builtin_ia32_llwpcb(pcbAddress); 
# 41
} 
# 43
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void *
# 44
__slwpcb() 
# 45
{ 
# 46
return __builtin_ia32_slwpcb(); 
# 47
} 
# 50
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 51
__lwpval32(unsigned data2, unsigned data1, unsigned flags) 
# 52
{ 
# 53
__builtin_ia32_lwpval32(data2, data1, flags); 
# 54
} 
# 57
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 58
__lwpval64(unsigned long long data2, unsigned data1, unsigned flags) 
# 59
{ 
# 60
__builtin_ia32_lwpval64(data2, data1, flags); 
# 61
} 
# 76
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 77
__lwpins32(unsigned data2, unsigned data1, unsigned flags) 
# 78
{ 
# 79
return __builtin_ia32_lwpins32(data2, data1, flags); 
# 80
} 
# 83
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 84
__lwpins64(unsigned long long data2, unsigned data1, unsigned flags) 
# 85
{ 
# 86
return __builtin_ia32_lwpins64(data2, data1, flags); 
# 87
} 
# 102
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/tbmintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "tbm" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 39
__bextri_u32(unsigned __X, const unsigned __I) 
# 40
{ 
# 41
return __builtin_ia32_bextri_u32(__X, __I); 
# 42
} 
# 49
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 50
__blcfill_u32(unsigned __X) 
# 51
{ 
# 52
return __X & (__X + (1)); 
# 53
} 
# 55
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 56
__blci_u32(unsigned __X) 
# 57
{ 
# 58
return __X | (~(__X + (1))); 
# 59
} 
# 61
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 62
__blcic_u32(unsigned __X) 
# 63
{ 
# 64
return (~__X) & (__X + (1)); 
# 65
} 
# 67
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 68
__blcmsk_u32(unsigned __X) 
# 69
{ 
# 70
return __X ^ (__X + (1)); 
# 71
} 
# 73
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 74
__blcs_u32(unsigned __X) 
# 75
{ 
# 76
return __X | (__X + (1)); 
# 77
} 
# 79
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 80
__blsfill_u32(unsigned __X) 
# 81
{ 
# 82
return __X | (__X - (1)); 
# 83
} 
# 85
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 86
__blsic_u32(unsigned __X) 
# 87
{ 
# 88
return (~__X) | (__X - (1)); 
# 89
} 
# 91
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 92
__t1mskc_u32(unsigned __X) 
# 93
{ 
# 94
return (~__X) | (__X + (1)); 
# 95
} 
# 97
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned 
# 98
__tzmsk_u32(unsigned __X) 
# 99
{ 
# 100
return (~__X) & (__X - (1)); 
# 101
} 
# 107
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 108
__bextri_u64(unsigned long long __X, const unsigned __I) 
# 109
{ 
# 110
return __builtin_ia32_bextri_u64(__X, __I); 
# 111
} 
# 118
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 119
__blcfill_u64(unsigned long long __X) 
# 120
{ 
# 121
return __X & (__X + (1)); 
# 122
} 
# 124
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 125
__blci_u64(unsigned long long __X) 
# 126
{ 
# 127
return __X | (~(__X + (1))); 
# 128
} 
# 130
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 131
__blcic_u64(unsigned long long __X) 
# 132
{ 
# 133
return (~__X) & (__X + (1)); 
# 134
} 
# 136
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 137
__blcmsk_u64(unsigned long long __X) 
# 138
{ 
# 139
return __X ^ (__X + (1)); 
# 140
} 
# 142
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 143
__blcs_u64(unsigned long long __X) 
# 144
{ 
# 145
return __X | (__X + (1)); 
# 146
} 
# 148
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 149
__blsfill_u64(unsigned long long __X) 
# 150
{ 
# 151
return __X | (__X - (1)); 
# 152
} 
# 154
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 155
__blsic_u64(unsigned long long __X) 
# 156
{ 
# 157
return (~__X) | (__X - (1)); 
# 158
} 
# 160
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 161
__t1mskc_u64(unsigned long long __X) 
# 162
{ 
# 163
return (~__X) | (__X + (1)); 
# 164
} 
# 166
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned long long 
# 167
__tzmsk_u64(unsigned long long __X) 
# 168
{ 
# 169
return (~__X) & (__X - (1)); 
# 170
} 
# 177
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/rdseedintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "rdseed" )
# 39
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 40
_rdseed16_step(unsigned short *p) 
# 41
{ 
# 42
return __builtin_ia32_rdseed_hi_step(p); 
# 43
} 
# 46
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 47
_rdseed32_step(unsigned *p) 
# 48
{ 
# 49
return __builtin_ia32_rdseed_si_step(p); 
# 50
} 
# 54
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline int 
# 55
_rdseed64_step(unsigned long long *p) 
# 56
{ 
# 57
return __builtin_ia32_rdseed_di_step(p); 
# 58
} 
# 63
#pragma GCC pop_options
# 38 "/usr/lib/gcc/x86_64-linux-gnu/5/include/fxsrintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 39
_fxsave(void *__P) 
# 40
{ 
# 41
return __builtin_ia32_fxsave(__P); 
# 42
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 46
_fxrstor(void *__P) 
# 47
{ 
# 48
return __builtin_ia32_fxrstor(__P); 
# 49
} 
# 53
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 54
_fxsave64(void *__P) 
# 55
{ 
# 56
return __builtin_ia32_fxsave64(__P); 
# 57
} 
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 61
_fxrstor64(void *__P) 
# 62
{ 
# 63
return __builtin_ia32_fxrstor64(__P); 
# 64
} 
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/xsaveintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "xsave" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 39
_xsave(void *__P, long long __M) 
# 40
{ 
# 41
return __builtin_ia32_xsave(__P, __M); 
# 42
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 46
_xrstor(void *__P, long long __M) 
# 47
{ 
# 48
return __builtin_ia32_xrstor(__P, __M); 
# 49
} 
# 53
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 54
_xsave64(void *__P, long long __M) 
# 55
{ 
# 56
return __builtin_ia32_xsave64(__P, __M); 
# 57
} 
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 61
_xrstor64(void *__P, long long __M) 
# 62
{ 
# 63
return __builtin_ia32_xrstor64(__P, __M); 
# 64
} 
# 69
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/xsaveoptintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "xsaveopt" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 39
_xsaveopt(void *__P, long long __M) 
# 40
{ 
# 41
return __builtin_ia32_xsaveopt(__P, __M); 
# 42
} 
# 46
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 47
_xsaveopt64(void *__P, long long __M) 
# 48
{ 
# 49
return __builtin_ia32_xsaveopt64(__P, __M); 
# 50
} 
# 55
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/adxintrin.h" 3
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 33
_subborrow_u32(unsigned char __CF, unsigned __X, unsigned 
# 34
__Y, unsigned *__P) 
# 35
{ 
# 36
return __builtin_ia32_sbb_u32(__CF, __Y, __X, __P); 
# 37
} 
# 40
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 41
_addcarry_u32(unsigned char __CF, unsigned __X, unsigned 
# 42
__Y, unsigned *__P) 
# 43
{ 
# 44
return __builtin_ia32_addcarryx_u32(__CF, __X, __Y, __P); 
# 45
} 
# 48
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 49
_addcarryx_u32(unsigned char __CF, unsigned __X, unsigned 
# 50
__Y, unsigned *__P) 
# 51
{ 
# 52
return __builtin_ia32_addcarryx_u32(__CF, __X, __Y, __P); 
# 53
} 
# 57
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 58
_subborrow_u64(unsigned char __CF, unsigned long long __X, unsigned long long 
# 59
__Y, unsigned long long *__P) 
# 60
{ 
# 61
return __builtin_ia32_sbb_u64(__CF, __Y, __X, __P); 
# 62
} 
# 65
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 66
_addcarry_u64(unsigned char __CF, unsigned long long __X, unsigned long long 
# 67
__Y, unsigned long long *__P) 
# 68
{ 
# 69
return __builtin_ia32_addcarryx_u64(__CF, __X, __Y, __P); 
# 70
} 
# 73
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline unsigned char 
# 74
_addcarryx_u64(unsigned char __CF, unsigned long long __X, unsigned long long 
# 75
__Y, unsigned long long *__P) 
# 76
{ 
# 77
return __builtin_ia32_addcarryx_u64(__CF, __X, __Y, __P); 
# 78
} 
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/clwbintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "clwb" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 39
_mm_clwb(void *__A) 
# 40
{ 
# 41
__builtin_ia32_clwb(__A); 
# 42
} 
# 46
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/pcommitintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "pcommit" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 39
_mm_pcommit() 
# 40
{ 
# 41
__builtin_ia32_pcommit(); 
# 42
} 
# 46
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/clflushoptintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "clflushopt" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 39
_mm_clflushopt(void *__A) 
# 40
{ 
# 41
__builtin_ia32_clflushopt(__A); 
# 42
} 
# 46
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/xsavesintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "xsaves" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 39
_xsaves(void *__P, long long __M) 
# 40
{ 
# 41
__builtin_ia32_xsaves(__P, __M); 
# 42
} 
# 45
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 46
_xrstors(void *__P, long long __M) 
# 47
{ 
# 48
__builtin_ia32_xrstors(__P, __M); 
# 49
} 
# 53
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 54
_xrstors64(void *__P, long long __M) 
# 55
{ 
# 56
__builtin_ia32_xrstors64(__P, __M); 
# 57
} 
# 60
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 61
_xsaves64(void *__P, long long __M) 
# 62
{ 
# 63
__builtin_ia32_xsaves64(__P, __M); 
# 64
} 
# 69
#pragma GCC pop_options
# 32 "/usr/lib/gcc/x86_64-linux-gnu/5/include/xsavecintrin.h" 3
#pragma GCC push_options
#pragma GCC target ( "xsavec" )
# 38
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 39
_xsavec(void *__P, long long __M) 
# 40
{ 
# 41
__builtin_ia32_xsavec(__P, __M); 
# 42
} 
# 46
__attribute((__gnu_inline__, __always_inline__, __artificial__)) extern inline void 
# 47
_xsavec64(void *__P, long long __M) 
# 48
{ 
# 49
__builtin_ia32_xsavec64(__P, __M); 
# 50
} 
# 55
#pragma GCC pop_options
# 39 "/usr/include/x86_64-linux-gnu/c++/5/bits/opt_random.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 216
}
# 65 "/usr/include/c++/5/bits/stl_numeric.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80
template< class _ForwardIterator, class _Tp> void 
# 82
iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value) 
# 83
{ 
# 89
; 
# 91
for (; __first != __last; ++__first) 
# 92
{ 
# 93
(*__first) = __value; 
# 94
++__value; 
# 95
}  
# 96
} 
# 99
}
# 103
namespace std __attribute((__visibility__("default"))) { 
# 118
template< class _InputIterator, class _Tp> inline _Tp 
# 120
accumulate(_InputIterator __first, _InputIterator __last, _Tp __init) 
# 121
{ 
# 124
; 
# 126
for (; __first != __last; ++__first) { 
# 127
__init = (__init + (*__first)); }  
# 128
return __init; 
# 129
} 
# 144
template< class _InputIterator, class _Tp, class _BinaryOperation> inline _Tp 
# 146
accumulate(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation 
# 147
__binary_op) 
# 148
{ 
# 151
; 
# 153
for (; __first != __last; ++__first) { 
# 154
__init = __binary_op(__init, *__first); }  
# 155
return __init; 
# 156
} 
# 172
template< class _InputIterator1, class _InputIterator2, class _Tp> inline _Tp 
# 174
inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 175
__first2, _Tp __init) 
# 176
{ 
# 180
; 
# 182
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 183
__init = (__init + ((*__first1) * (*__first2))); }  
# 184
return __init; 
# 185
} 
# 203
template< class _InputIterator1, class _InputIterator2, class _Tp, class 
# 204
_BinaryOperation1, class _BinaryOperation2> inline _Tp 
# 206
inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 207
__first2, _Tp __init, _BinaryOperation1 
# 208
__binary_op1, _BinaryOperation2 
# 209
__binary_op2) 
# 210
{ 
# 214
; 
# 216
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 217
__init = __binary_op1(__init, __binary_op2(*__first1, *__first2)); }  
# 218
return __init; 
# 219
} 
# 235
template< class _InputIterator, class _OutputIterator> _OutputIterator 
# 237
partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 238
__result) 
# 239
{ 
# 240
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 246
; 
# 248
if (__first == __last) { 
# 249
return __result; }  
# 250
_ValueType __value = *__first; 
# 251
(*__result) = __value; 
# 252
while ((++__first) != __last) 
# 253
{ 
# 254
__value = (__value + (*__first)); 
# 255
(*(++__result)) = __value; 
# 256
}  
# 257
return ++__result; 
# 258
} 
# 275
template< class _InputIterator, class _OutputIterator, class 
# 276
_BinaryOperation> _OutputIterator 
# 278
partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 279
__result, _BinaryOperation __binary_op) 
# 280
{ 
# 281
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 287
; 
# 289
if (__first == __last) { 
# 290
return __result; }  
# 291
_ValueType __value = *__first; 
# 292
(*__result) = __value; 
# 293
while ((++__first) != __last) 
# 294
{ 
# 295
__value = __binary_op(__value, *__first); 
# 296
(*(++__result)) = __value; 
# 297
}  
# 298
return ++__result; 
# 299
} 
# 315
template< class _InputIterator, class _OutputIterator> _OutputIterator 
# 317
adjacent_difference(_InputIterator __first, _InputIterator 
# 318
__last, _OutputIterator __result) 
# 319
{ 
# 320
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 326
; 
# 328
if (__first == __last) { 
# 329
return __result; }  
# 330
_ValueType __value = *__first; 
# 331
(*__result) = __value; 
# 332
while ((++__first) != __last) 
# 333
{ 
# 334
_ValueType __tmp = *__first; 
# 335
(*(++__result)) = (__tmp - __value); 
# 336
__value = std::move(__tmp); 
# 337
}  
# 338
return ++__result; 
# 339
} 
# 357
template< class _InputIterator, class _OutputIterator, class 
# 358
_BinaryOperation> _OutputIterator 
# 360
adjacent_difference(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 361
__result, _BinaryOperation __binary_op) 
# 362
{ 
# 363
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 369
; 
# 371
if (__first == __last) { 
# 372
return __result; }  
# 373
_ValueType __value = *__first; 
# 374
(*__result) = __value; 
# 375
while ((++__first) != __last) 
# 376
{ 
# 377
_ValueType __tmp = *__first; 
# 378
(*(++__result)) = __binary_op(__tmp, __value); 
# 379
__value = std::move(__tmp); 
# 380
}  
# 381
return ++__result; 
# 382
} 
# 385
}
# 35 "/usr/include/c++/5/bits/random.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
namespace __detail { 
# 50
template< class _Tp, _Tp __m, _Tp __a, _Tp __c> _Tp 
# 53
_Mod< _Tp, __m, __a, __c, false, true> ::__calc(_Tp __x) 
# 54
{ 
# 55
if (__a == 1) { 
# 56
__x %= __m; } else 
# 58
{ 
# 59
static const _Tp __q = (__m / __a); 
# 60
static const _Tp __r = (__m % __a); 
# 62
_Tp __t1 = __a * (__x % __q); 
# 63
_Tp __t2 = __r * (__x / __q); 
# 64
if (__t1 >= __t2) { 
# 65
__x = (__t1 - __t2); } else { 
# 67
__x = ((__m - __t2) + __t1); }  
# 68
}  
# 70
if (__c != 0) 
# 71
{ 
# 72
const _Tp __d = __m - __x; 
# 73
if (__d > __c) { 
# 74
__x += __c; } else { 
# 76
__x = (__c - __d); }  
# 77
}  
# 78
return __x; 
# 79
} 
# 81
template< class _InputIterator, class _OutputIterator, class 
# 82
_Tp> _OutputIterator 
# 84
__normalize(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 85
__result, const _Tp &__factor) 
# 86
{ 
# 87
for (; __first != __last; (++__first), (++__result)) { 
# 88
(*__result) = ((*__first) / __factor); }  
# 89
return __result; 
# 90
} 
# 93
}
# 97
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType 
# 99
linear_congruential_engine< _UIntType, __a, __c, __m> ::multiplier; 
# 101
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType 
# 103
linear_congruential_engine< _UIntType, __a, __c, __m> ::increment; 
# 105
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType 
# 107
linear_congruential_engine< _UIntType, __a, __c, __m> ::modulus; 
# 109
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr _UIntType 
# 111
linear_congruential_engine< _UIntType, __a, __c, __m> ::default_seed; 
# 117
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> void 
# 120
linear_congruential_engine< _UIntType, __a, __c, __m> ::seed(result_type __s) 
# 121
{ 
# 122
if ((__detail::__mod< _UIntType, __m> (__c) == 0) && (__detail::__mod< _UIntType, __m> (__s) == 0)) { 
# 124
(_M_x) = 1; } else { 
# 126
(_M_x) = __detail::__mod< _UIntType, __m> (__s); }  
# 127
} 
# 132
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> 
# 133
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type 
# 136
linear_congruential_engine< _UIntType, __a, __c, __m> ::seed(_Sseq &__q) 
# 137
{ 
# 138
const _UIntType __k0 = (__m == 0) ? std::numeric_limits< _UIntType> ::digits : std::__lg(__m); 
# 140
const _UIntType __k = (__k0 + 31) / 32; 
# 141
uint_least32_t __arr[(__k + 3)];   
# 142
(__q.generate((__arr) + 0, (__arr + __k) + 3)); 
# 143
_UIntType __factor = (1U); 
# 144
_UIntType __sum = (0U); 
# 145
for (size_t __j = (0); __j < __k; ++__j) 
# 146
{ 
# 147
__sum += (((__arr)[__j + (3)]) * __factor); 
# 148
__factor *= __detail::_Shift< _UIntType, 32UL> ::__value; 
# 149
}  
# 150
seed(__sum); 
# 151
} 
# 153
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class 
# 154
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 156
operator<<(basic_ostream< _CharT, _Traits>  &__os, const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 158
__lcr) 
# 159
{ 
# 160
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 161
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 163
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 164
const _CharT __fill = (__os.fill()); 
# 165
(__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left)); 
# 166
(__os.fill((__os.widen(' ')))); 
# 168
__os << (__lcr._M_x); 
# 170
(__os.flags(__flags)); 
# 171
(__os.fill(__fill)); 
# 172
return __os; 
# 173
} 
# 175
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class 
# 176
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 178
operator>>(basic_istream< _CharT, _Traits>  &__is, linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 179
__lcr) 
# 180
{ 
# 181
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 182
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 184
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 185
(__is.flags(__ios_base::dec)); 
# 187
__is >> (__lcr._M_x); 
# 189
(__is.flags(__flags)); 
# 190
return __is; 
# 191
} 
# 194
template< class _UIntType, size_t 
# 195
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 196
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 197
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 198
__f> constexpr size_t 
# 201
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::word_size; 
# 203
template< class _UIntType, size_t 
# 204
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 205
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 206
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 207
__f> constexpr size_t 
# 210
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::state_size; 
# 212
template< class _UIntType, size_t 
# 213
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 214
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 215
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 216
__f> constexpr size_t 
# 219
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::shift_size; 
# 221
template< class _UIntType, size_t 
# 222
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 223
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 224
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 225
__f> constexpr size_t 
# 228
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::mask_bits; 
# 230
template< class _UIntType, size_t 
# 231
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 232
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 233
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 234
__f> constexpr _UIntType 
# 237
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::xor_mask; 
# 239
template< class _UIntType, size_t 
# 240
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 241
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 242
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 243
__f> constexpr size_t 
# 246
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_u; 
# 248
template< class _UIntType, size_t 
# 249
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 250
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 251
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 252
__f> constexpr _UIntType 
# 255
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_d; 
# 257
template< class _UIntType, size_t 
# 258
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 259
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 260
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 261
__f> constexpr size_t 
# 264
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_s; 
# 266
template< class _UIntType, size_t 
# 267
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 268
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 269
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 270
__f> constexpr _UIntType 
# 273
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_b; 
# 275
template< class _UIntType, size_t 
# 276
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 277
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 278
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 279
__f> constexpr size_t 
# 282
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_t; 
# 284
template< class _UIntType, size_t 
# 285
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 286
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 287
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 288
__f> constexpr _UIntType 
# 291
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_c; 
# 293
template< class _UIntType, size_t 
# 294
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 295
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 296
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 297
__f> constexpr size_t 
# 300
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_l; 
# 302
template< class _UIntType, size_t 
# 303
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 304
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 305
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 306
__f> constexpr _UIntType 
# 310
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::initialization_multiplier; 
# 312
template< class _UIntType, size_t 
# 313
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 314
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 315
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 316
__f> constexpr _UIntType 
# 319
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::default_seed; 
# 321
template< class _UIntType, size_t 
# 322
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 323
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 324
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 325
__f> void 
# 329
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::seed(result_type __sd) 
# 330
{ 
# 331
((_M_x)[0]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sd); 
# 334
for (size_t __i = (1); __i < state_size; ++__i) 
# 335
{ 
# 336
_UIntType __x = (_M_x)[__i - (1)]; 
# 337
__x ^= (__x >> (__w - (2))); 
# 338
__x *= __f; 
# 339
__x += __detail::__mod< _UIntType, __n> (__i); 
# 340
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__x); 
# 342
}  
# 343
(_M_p) = state_size; 
# 344
} 
# 346
template< class _UIntType, size_t 
# 347
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 348
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 349
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 350
__f> 
# 351
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type 
# 355
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::seed(_Sseq &__q) 
# 356
{ 
# 357
const _UIntType __upper_mask = ((~_UIntType()) << __r); 
# 358
const size_t __k = ((__w + (31)) / (32)); 
# 359
uint_least32_t __arr[__n * __k]; 
# 360
(__q.generate((__arr) + 0, (__arr) + (__n * __k))); 
# 362
bool __zero = true; 
# 363
for (size_t __i = (0); __i < state_size; ++__i) 
# 364
{ 
# 365
_UIntType __factor = (1U); 
# 366
_UIntType __sum = (0U); 
# 367
for (size_t __j = (0); __j < __k; ++__j) 
# 368
{ 
# 369
__sum += (((__arr)[(__k * __i) + __j]) * __factor); 
# 370
__factor *= __detail::_Shift< _UIntType, 32UL> ::__value; 
# 371
}  
# 372
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 375
if (__zero) 
# 376
{ 
# 377
if (__i == (0)) 
# 378
{ 
# 379
if ((((_M_x)[0]) & __upper_mask) != 0U) { 
# 380
__zero = false; }  
# 381
} else { 
# 382
if (((_M_x)[__i]) != 0U) { 
# 383
__zero = false; }  }  
# 384
}  
# 385
}  
# 386
if (__zero) { 
# 387
((_M_x)[0]) = __detail::_Shift< _UIntType, __w - (1)> ::__value; }  
# 388
(_M_p) = state_size; 
# 389
} 
# 391
template< class _UIntType, size_t __w, size_t 
# 392
__n, size_t __m, size_t __r, _UIntType 
# 393
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 394
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 395
__f> void 
# 399
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::_M_gen_rand() 
# 400
{ 
# 401
const _UIntType __upper_mask = ((~_UIntType()) << __r); 
# 402
const _UIntType __lower_mask = ~__upper_mask; 
# 404
for (size_t __k = (0); __k < (__n - __m); ++__k) 
# 405
{ 
# 406
_UIntType __y = (((_M_x)[__k]) & __upper_mask) | (((_M_x)[__k + (1)]) & __lower_mask); 
# 408
((_M_x)[__k]) = ((((_M_x)[__k + __m]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 410
}  
# 412
for (size_t __k = (__n - __m); __k < (__n - (1)); ++__k) 
# 413
{ 
# 414
_UIntType __y = (((_M_x)[__k]) & __upper_mask) | (((_M_x)[__k + (1)]) & __lower_mask); 
# 416
((_M_x)[__k]) = ((((_M_x)[__k + (__m - __n)]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 418
}  
# 420
_UIntType __y = (((_M_x)[__n - (1)]) & __upper_mask) | (((_M_x)[0]) & __lower_mask); 
# 422
((_M_x)[__n - (1)]) = ((((_M_x)[__m - (1)]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 424
(_M_p) = (0); 
# 425
} 
# 427
template< class _UIntType, size_t __w, size_t 
# 428
__n, size_t __m, size_t __r, _UIntType 
# 429
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 430
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 431
__f> void 
# 435
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::discard(unsigned long long __z) 
# 436
{ 
# 437
while (__z > (state_size - (_M_p))) 
# 438
{ 
# 439
__z -= (state_size - (_M_p)); 
# 440
_M_gen_rand(); 
# 441
}  
# 442
(_M_p) += __z; 
# 443
} 
# 445
template< class _UIntType, size_t __w, size_t 
# 446
__n, size_t __m, size_t __r, _UIntType 
# 447
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 448
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 449
__f> typename mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::result_type 
# 455
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::operator()() 
# 456
{ 
# 458
if ((_M_p) >= state_size) { 
# 459
_M_gen_rand(); }  
# 462
result_type __z = (_M_x)[(_M_p)++]; 
# 463
__z ^= ((__z >> __u) & __d); 
# 464
__z ^= ((__z << __s) & __b); 
# 465
__z ^= ((__z << __t) & __c); 
# 466
__z ^= (__z >> __l); 
# 468
return __z; 
# 469
} 
# 471
template< class _UIntType, size_t __w, size_t 
# 472
__n, size_t __m, size_t __r, _UIntType 
# 473
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 474
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 475
__f, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 477
operator<<(basic_ostream< _CharT, _Traits>  &__os, const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 479
__x) 
# 480
{ 
# 481
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 482
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 484
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 485
const _CharT __fill = (__os.fill()); 
# 486
const _CharT __space = (__os.widen(' ')); 
# 487
(__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left)); 
# 488
(__os.fill(__space)); 
# 490
for (size_t __i = (0); __i < __n; ++__i) { 
# 491
(__os << ((__x._M_x)[__i])) << __space; }  
# 492
__os << (__x._M_p); 
# 494
(__os.flags(__flags)); 
# 495
(__os.fill(__fill)); 
# 496
return __os; 
# 497
} 
# 499
template< class _UIntType, size_t __w, size_t 
# 500
__n, size_t __m, size_t __r, _UIntType 
# 501
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 502
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 503
__f, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 505
operator>>(basic_istream< _CharT, _Traits>  &__is, mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 507
__x) 
# 508
{ 
# 509
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 510
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 512
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 513
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 515
for (size_t __i = (0); __i < __n; ++__i) { 
# 516
__is >> ((__x._M_x)[__i]); }  
# 517
__is >> (__x._M_p); 
# 519
(__is.flags(__flags)); 
# 520
return __is; 
# 521
} 
# 524
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr size_t 
# 526
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::word_size; 
# 528
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr size_t 
# 530
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::short_lag; 
# 532
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr size_t 
# 534
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::long_lag; 
# 536
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr _UIntType 
# 538
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::default_seed; 
# 540
template< class _UIntType, size_t __w, size_t __s, size_t __r> void 
# 543
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::seed(result_type __value) 
# 544
{ 
# 546
linear_congruential_engine< _UIntType, 40014U, 0U, 2147483563U>  __lcg((__value == 0U) ? default_seed : __value); 
# 548
const size_t __n = ((__w + (31)) / (32)); 
# 550
for (size_t __i = (0); __i < long_lag; ++__i) 
# 551
{ 
# 552
_UIntType __sum = (0U); 
# 553
_UIntType __factor = (1U); 
# 554
for (size_t __j = (0); __j < __n; ++__j) 
# 555
{ 
# 556
__sum += (__detail::__mod< uint_least32_t, __detail::_Shift< unsigned, 32UL> ::__value> (__lcg()) * __factor); 
# 559
__factor *= __detail::_Shift< _UIntType, 32UL> ::__value; 
# 560
}  
# 561
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 563
}  
# 564
(_M_carry) = ((((_M_x)[long_lag - (1)]) == 0) ? 1 : 0); 
# 565
(_M_p) = (0); 
# 566
} 
# 568
template< class _UIntType, size_t __w, size_t __s, size_t __r> 
# 569
template< class _Sseq> typename enable_if< is_class< _Sseq> ::value> ::type 
# 572
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::seed(_Sseq &__q) 
# 573
{ 
# 574
const size_t __k = ((__w + (31)) / (32)); 
# 575
uint_least32_t __arr[__r * __k]; 
# 576
(__q.generate((__arr) + 0, (__arr) + (__r * __k))); 
# 578
for (size_t __i = (0); __i < long_lag; ++__i) 
# 579
{ 
# 580
_UIntType __sum = (0U); 
# 581
_UIntType __factor = (1U); 
# 582
for (size_t __j = (0); __j < __k; ++__j) 
# 583
{ 
# 584
__sum += (((__arr)[(__k * __i) + __j]) * __factor); 
# 585
__factor *= __detail::_Shift< _UIntType, 32UL> ::__value; 
# 586
}  
# 587
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 589
}  
# 590
(_M_carry) = ((((_M_x)[long_lag - (1)]) == 0) ? 1 : 0); 
# 591
(_M_p) = (0); 
# 592
} 
# 594
template< class _UIntType, size_t __w, size_t __s, size_t __r> typename subtract_with_carry_engine< _UIntType, __w, __s, __r> ::result_type 
# 598
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::operator()() 
# 599
{ 
# 601
long __ps = (_M_p) - short_lag; 
# 602
if (__ps < (0)) { 
# 603
__ps += long_lag; }  
# 608
_UIntType __xi; 
# 609
if (((_M_x)[__ps]) >= (((_M_x)[_M_p]) + (_M_carry))) 
# 610
{ 
# 611
__xi = ((((_M_x)[__ps]) - ((_M_x)[_M_p])) - (_M_carry)); 
# 612
(_M_carry) = 0; 
# 613
} else 
# 615
{ 
# 616
__xi = (((__detail::_Shift< _UIntType, __w> ::__value - ((_M_x)[_M_p])) - (_M_carry)) + ((_M_x)[__ps])); 
# 618
(_M_carry) = 1; 
# 619
}  
# 620
((_M_x)[_M_p]) = __xi; 
# 623
if ((++(_M_p)) >= long_lag) { 
# 624
(_M_p) = (0); }  
# 626
return __xi; 
# 627
} 
# 629
template< class _UIntType, size_t __w, size_t __s, size_t __r, class 
# 630
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 632
operator<<(basic_ostream< _CharT, _Traits>  &__os, const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 634
__x) 
# 635
{ 
# 636
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 637
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 639
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 640
const _CharT __fill = (__os.fill()); 
# 641
const _CharT __space = (__os.widen(' ')); 
# 642
(__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left)); 
# 643
(__os.fill(__space)); 
# 645
for (size_t __i = (0); __i < __r; ++__i) { 
# 646
(__os << ((__x._M_x)[__i])) << __space; }  
# 647
((__os << (__x._M_carry)) << __space) << (__x._M_p); 
# 649
(__os.flags(__flags)); 
# 650
(__os.fill(__fill)); 
# 651
return __os; 
# 652
} 
# 654
template< class _UIntType, size_t __w, size_t __s, size_t __r, class 
# 655
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 657
operator>>(basic_istream< _CharT, _Traits>  &__is, subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 658
__x) 
# 659
{ 
# 660
typedef basic_ostream< _CharT, _Traits>  __istream_type; 
# 661
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 663
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 664
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 666
for (size_t __i = (0); __i < __r; ++__i) { 
# 667
__is >> ((__x._M_x)[__i]); }  
# 668
__is >> (__x._M_carry); 
# 669
__is >> (__x._M_p); 
# 671
(__is.flags(__flags)); 
# 672
return __is; 
# 673
} 
# 676
template< class _RandomNumberEngine, size_t __p, size_t __r> constexpr size_t 
# 678
discard_block_engine< _RandomNumberEngine, __p, __r> ::block_size; 
# 680
template< class _RandomNumberEngine, size_t __p, size_t __r> constexpr size_t 
# 682
discard_block_engine< _RandomNumberEngine, __p, __r> ::used_block; 
# 684
template< class _RandomNumberEngine, size_t __p, size_t __r> typename discard_block_engine< _RandomNumberEngine, __p, __r> ::result_type 
# 688
discard_block_engine< _RandomNumberEngine, __p, __r> ::operator()() 
# 689
{ 
# 690
if ((_M_n) >= used_block) 
# 691
{ 
# 692
((_M_b).discard(block_size - (_M_n))); 
# 693
(_M_n) = (0); 
# 694
}  
# 695
++(_M_n); 
# 696
return (_M_b)(); 
# 697
} 
# 699
template< class _RandomNumberEngine, size_t __p, size_t __r, class 
# 700
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 702
operator<<(basic_ostream< _CharT, _Traits>  &__os, const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 704
__x) 
# 705
{ 
# 706
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 707
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 709
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 710
const _CharT __fill = (__os.fill()); 
# 711
const _CharT __space = (__os.widen(' ')); 
# 712
(__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left)); 
# 713
(__os.fill(__space)); 
# 715
((__os << (__x.base())) << __space) << (__x._M_n); 
# 717
(__os.flags(__flags)); 
# 718
(__os.fill(__fill)); 
# 719
return __os; 
# 720
} 
# 722
template< class _RandomNumberEngine, size_t __p, size_t __r, class 
# 723
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 725
operator>>(basic_istream< _CharT, _Traits>  &__is, discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 726
__x) 
# 727
{ 
# 728
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 729
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 731
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 732
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 734
(__is >> (__x._M_b)) >> (__x._M_n); 
# 736
(__is.flags(__flags)); 
# 737
return __is; 
# 738
} 
# 741
template< class _RandomNumberEngine, size_t __w, class _UIntType> typename independent_bits_engine< _RandomNumberEngine, __w, _UIntType> ::result_type 
# 745
independent_bits_engine< _RandomNumberEngine, __w, _UIntType> ::operator()() 
# 746
{ 
# 747
typedef typename _RandomNumberEngine::result_type _Eresult_type; 
# 748
const _Eresult_type __r = ((((_M_b).max()) - ((_M_b).min())) < std::numeric_limits< typename _RandomNumberEngine::result_type> ::max()) ? (((_M_b).max()) - ((_M_b).min())) + 1 : 0; 
# 751
const unsigned __edig = (std::numeric_limits< typename _RandomNumberEngine::result_type> ::digits); 
# 752
const unsigned __m = (__r) ? std::__lg(__r) : __edig; 
# 755
typedef typename common_type< typename _RandomNumberEngine::result_type, _UIntType> ::type __ctype; 
# 756
const unsigned __cdig = (std::numeric_limits< typename common_type< typename _RandomNumberEngine::result_type, _UIntType> ::type> ::digits); 
# 758
unsigned __n, __n0; 
# 759
__ctype __s0, __s1, __y0, __y1; 
# 761
for (size_t __i = (0); __i < (2); ++__i) 
# 762
{ 
# 763
__n = ((((__w + __m) - (1)) / __m) + __i); 
# 764
__n0 = (__n - (__w % __n)); 
# 765
const unsigned __w0 = __w / __n; 
# 767
__s0 = 0; 
# 768
__s1 = 0; 
# 769
if (__w0 < __cdig) 
# 770
{ 
# 771
__s0 = (((__ctype)1) << __w0); 
# 772
__s1 = (__s0 << 1); 
# 773
}  
# 775
__y0 = 0; 
# 776
__y1 = 0; 
# 777
if (__r) 
# 778
{ 
# 779
__y0 = (__s0 * (__r / __s0)); 
# 780
if (__s1) { 
# 781
__y1 = (__s1 * (__r / __s1)); }  
# 783
if ((__r - __y0) <= (__y0 / __n)) { 
# 784
break; }  
# 785
} else { 
# 787
break; }  
# 788
}  
# 790
result_type __sum = (0); 
# 791
for (size_t __k = (0); __k < __n0; ++__k) 
# 792
{ 
# 793
__ctype __u; 
# 794
do { 
# 795
__u = ((_M_b)() - ((_M_b).min())); } 
# 796
while (__y0 && (__u >= __y0)); 
# 797
__sum = ((__s0 * __sum) + ((__s0) ? __u % __s0 : __u)); 
# 798
}  
# 799
for (size_t __k = __n0; __k < __n; ++__k) 
# 800
{ 
# 801
__ctype __u; 
# 802
do { 
# 803
__u = ((_M_b)() - ((_M_b).min())); } 
# 804
while (__y1 && (__u >= __y1)); 
# 805
__sum = ((__s1 * __sum) + ((__s1) ? __u % __s1 : __u)); 
# 806
}  
# 807
return __sum; 
# 808
} 
# 811
template< class _RandomNumberEngine, size_t __k> constexpr size_t 
# 813
shuffle_order_engine< _RandomNumberEngine, __k> ::table_size; 
# 815
template< class _RandomNumberEngine, size_t __k> typename shuffle_order_engine< _RandomNumberEngine, __k> ::result_type 
# 818
shuffle_order_engine< _RandomNumberEngine, __k> ::operator()() 
# 819
{ 
# 820
size_t __j = __k * (((_M_y) - ((_M_b).min())) / ((((_M_b).max()) - ((_M_b).min())) + (1.0L))); 
# 822
(_M_y) = ((_M_v)[__j]); 
# 823
((_M_v)[__j]) = (_M_b)(); 
# 825
return _M_y; 
# 826
} 
# 828
template< class _RandomNumberEngine, size_t __k, class 
# 829
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 831
operator<<(basic_ostream< _CharT, _Traits>  &__os, const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 832
__x) 
# 833
{ 
# 834
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 835
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 837
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 838
const _CharT __fill = (__os.fill()); 
# 839
const _CharT __space = (__os.widen(' ')); 
# 840
(__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left)); 
# 841
(__os.fill(__space)); 
# 843
__os << (__x.base()); 
# 844
for (size_t __i = (0); __i < __k; ++__i) { 
# 845
(__os << __space) << ((__x._M_v)[__i]); }  
# 846
(__os << __space) << (__x._M_y); 
# 848
(__os.flags(__flags)); 
# 849
(__os.fill(__fill)); 
# 850
return __os; 
# 851
} 
# 853
template< class _RandomNumberEngine, size_t __k, class 
# 854
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 856
operator>>(basic_istream< _CharT, _Traits>  &__is, shuffle_order_engine< _RandomNumberEngine, __k>  &
# 857
__x) 
# 858
{ 
# 859
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 860
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 862
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 863
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 865
__is >> (__x._M_b); 
# 866
for (size_t __i = (0); __i < __k; ++__i) { 
# 867
__is >> ((__x._M_v)[__i]); }  
# 868
__is >> (__x._M_y); 
# 870
(__is.flags(__flags)); 
# 871
return __is; 
# 872
} 
# 875
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 877
operator<<(basic_ostream< _CharT, _Traits>  &__os, const uniform_int_distribution< _IntType>  &
# 878
__x) 
# 879
{ 
# 880
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 881
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 883
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 884
const _CharT __fill = (__os.fill()); 
# 885
const _CharT __space = (__os.widen(' ')); 
# 886
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 887
(__os.fill(__space)); 
# 889
((__os << (__x.a())) << __space) << (__x.b()); 
# 891
(__os.flags(__flags)); 
# 892
(__os.fill(__fill)); 
# 893
return __os; 
# 894
} 
# 896
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 898
operator>>(basic_istream< _CharT, _Traits>  &__is, uniform_int_distribution< _IntType>  &
# 899
__x) 
# 900
{ 
# 901
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 902
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 904
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 905
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 907
_IntType __a, __b; 
# 908
(__is >> __a) >> __b; 
# 909
(__x.param(typename uniform_int_distribution< _IntType> ::param_type(__a, __b))); 
# 912
(__is.flags(__flags)); 
# 913
return __is; 
# 914
} 
# 917
template< class _RealType> 
# 918
template< class _ForwardIterator, class 
# 919
_UniformRandomNumberGenerator> void 
# 922
uniform_real_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 923
__urng, const param_type &
# 924
__p) 
# 925
{ 
# 928
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 929
auto __range = (__p.b()) - (__p.a()); 
# 930
while (__f != __t) { 
# 931
(*(__f++)) = ((__aurng() * __range) + (__p.a())); }  
# 932
} 
# 934
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 936
operator<<(basic_ostream< _CharT, _Traits>  &__os, const uniform_real_distribution< _RealType>  &
# 937
__x) 
# 938
{ 
# 939
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 940
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 942
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 943
const _CharT __fill = (__os.fill()); 
# 944
const streamsize __precision = (__os.precision()); 
# 945
const _CharT __space = (__os.widen(' ')); 
# 946
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 947
(__os.fill(__space)); 
# 948
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 950
((__os << (__x.a())) << __space) << (__x.b()); 
# 952
(__os.flags(__flags)); 
# 953
(__os.fill(__fill)); 
# 954
(__os.precision(__precision)); 
# 955
return __os; 
# 956
} 
# 958
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 960
operator>>(basic_istream< _CharT, _Traits>  &__is, uniform_real_distribution< _RealType>  &
# 961
__x) 
# 962
{ 
# 963
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 964
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 966
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 967
(__is.flags(__ios_base::skipws)); 
# 969
_RealType __a, __b; 
# 970
(__is >> __a) >> __b; 
# 971
(__x.param(typename uniform_real_distribution< _RealType> ::param_type(__a, __b))); 
# 974
(__is.flags(__flags)); 
# 975
return __is; 
# 976
} 
# 979
template< class _ForwardIterator, class 
# 980
_UniformRandomNumberGenerator> void 
# 983
bernoulli_distribution::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 984
__urng, const param_type &
# 985
__p) 
# 986
{ 
# 989
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 990
auto __limit = __p.p() * ((__aurng.max()) - (__aurng.min())); 
# 992
while (__f != __t) { 
# 993
(*(__f++)) = ((__aurng() - (__aurng.min())) < __limit); }  
# 994
} 
# 996
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 998
operator<<(basic_ostream< _CharT, _Traits>  &__os, const bernoulli_distribution &
# 999
__x) 
# 1000
{ 
# 1001
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1002
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1004
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 1005
const _CharT __fill = (__os.fill()); 
# 1006
const streamsize __precision = (__os.precision()); 
# 1007
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 1008
(__os.fill((__os.widen(' ')))); 
# 1009
(__os.precision(std::numeric_limits< double> ::max_digits10)); 
# 1011
__os << __x.p(); 
# 1013
(__os.flags(__flags)); 
# 1014
(__os.fill(__fill)); 
# 1015
(__os.precision(__precision)); 
# 1016
return __os; 
# 1017
} 
# 1020
template< class _IntType> 
# 1021
template< class _UniformRandomNumberGenerator> typename geometric_distribution< _IntType> ::result_type 
# 1024
geometric_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1025
__param) 
# 1026
{ 
# 1029
const double __naf = ((1) - std::numeric_limits< double> ::epsilon()) / (2); 
# 1032
const double __thr = std::numeric_limits< _IntType> ::max() + __naf; 
# 1035
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1037
double __cand; 
# 1038
do { 
# 1039
__cand = std::floor(std::log((1.0) - __aurng()) / (__param._M_log_1_p)); } 
# 1040
while (__cand >= __thr); 
# 1042
return (result_type)(__cand + __naf); 
# 1043
} 
# 1045
template< class _IntType> 
# 1046
template< class _ForwardIterator, class 
# 1047
_UniformRandomNumberGenerator> void 
# 1050
geometric_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1051
__urng, const param_type &
# 1052
__param) 
# 1053
{ 
# 1057
const double __naf = ((1) - std::numeric_limits< double> ::epsilon()) / (2); 
# 1060
const double __thr = std::numeric_limits< _IntType> ::max() + __naf; 
# 1063
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1065
while (__f != __t) 
# 1066
{ 
# 1067
double __cand; 
# 1068
do { 
# 1069
__cand = std::floor(std::log((1.0) - __aurng()) / (__param._M_log_1_p)); } 
# 1071
while (__cand >= __thr); 
# 1073
(*(__f++)) = (__cand + __naf); 
# 1074
}  
# 1075
} 
# 1077
template< class _IntType, class 
# 1078
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1080
operator<<(basic_ostream< _CharT, _Traits>  &__os, const geometric_distribution< _IntType>  &
# 1081
__x) 
# 1082
{ 
# 1083
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1084
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1086
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 1087
const _CharT __fill = (__os.fill()); 
# 1088
const streamsize __precision = (__os.precision()); 
# 1089
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 1090
(__os.fill((__os.widen(' ')))); 
# 1091
(__os.precision(std::numeric_limits< double> ::max_digits10)); 
# 1093
__os << (__x.p()); 
# 1095
(__os.flags(__flags)); 
# 1096
(__os.fill(__fill)); 
# 1097
(__os.precision(__precision)); 
# 1098
return __os; 
# 1099
} 
# 1101
template< class _IntType, class 
# 1102
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1104
operator>>(basic_istream< _CharT, _Traits>  &__is, geometric_distribution< _IntType>  &
# 1105
__x) 
# 1106
{ 
# 1107
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1108
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1110
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 1111
(__is.flags(__ios_base::skipws)); 
# 1113
double __p; 
# 1114
__is >> __p; 
# 1115
(__x.param((typename geometric_distribution< _IntType> ::param_type)__p)); 
# 1117
(__is.flags(__flags)); 
# 1118
return __is; 
# 1119
} 
# 1122
template< class _IntType> 
# 1123
template< class _UniformRandomNumberGenerator> typename negative_binomial_distribution< _IntType> ::result_type 
# 1126
negative_binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng) 
# 1127
{ 
# 1128
const double __y = (_M_gd)(__urng); 
# 1131
poisson_distribution< _IntType>  __poisson(__y); 
# 1132
return __poisson(__urng); 
# 1133
} 
# 1135
template< class _IntType> 
# 1136
template< class _UniformRandomNumberGenerator> typename negative_binomial_distribution< _IntType> ::result_type 
# 1139
negative_binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1140
__p) 
# 1141
{ 
# 1143
typedef gamma_distribution< double> ::param_type param_type; 
# 1145
const double __y = (_M_gd)(__urng, param_type((__p.k()), ((1.0) - (__p.p())) / (__p.p()))); 
# 1148
poisson_distribution< _IntType>  __poisson(__y); 
# 1149
return __poisson(__urng); 
# 1150
} 
# 1152
template< class _IntType> 
# 1153
template< class _ForwardIterator, class 
# 1154
_UniformRandomNumberGenerator> void 
# 1157
negative_binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1158
__urng) 
# 1159
{ 
# 1161
while (__f != __t) 
# 1162
{ 
# 1163
const double __y = (_M_gd)(__urng); 
# 1166
poisson_distribution< _IntType>  __poisson(__y); 
# 1167
(*(__f++)) = __poisson(__urng); 
# 1168
}  
# 1169
} 
# 1171
template< class _IntType> 
# 1172
template< class _ForwardIterator, class 
# 1173
_UniformRandomNumberGenerator> void 
# 1176
negative_binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1177
__urng, const param_type &
# 1178
__p) 
# 1179
{ 
# 1182
typename gamma_distribution< _IntType> ::param_type __p2((__p.k()), ((1.0) - (__p.p())) / (__p.p())); 
# 1184
while (__f != __t) 
# 1185
{ 
# 1186
const double __y = (_M_gd)(__urng, __p2); 
# 1188
poisson_distribution< _IntType>  __poisson(__y); 
# 1189
(*(__f++)) = __poisson(__urng); 
# 1190
}  
# 1191
} 
# 1193
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1195
operator<<(basic_ostream< _CharT, _Traits>  &__os, const negative_binomial_distribution< _IntType>  &
# 1196
__x) 
# 1197
{ 
# 1198
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1199
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1201
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 1202
const _CharT __fill = (__os.fill()); 
# 1203
const streamsize __precision = (__os.precision()); 
# 1204
const _CharT __space = (__os.widen(' ')); 
# 1205
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 1206
(__os.fill((__os.widen(' ')))); 
# 1207
(__os.precision(std::numeric_limits< double> ::max_digits10)); 
# 1209
((((__os << (__x.k())) << __space) << (__x.p())) << __space) << (__x._M_gd); 
# 1212
(__os.flags(__flags)); 
# 1213
(__os.fill(__fill)); 
# 1214
(__os.precision(__precision)); 
# 1215
return __os; 
# 1216
} 
# 1218
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1220
operator>>(basic_istream< _CharT, _Traits>  &__is, negative_binomial_distribution< _IntType>  &
# 1221
__x) 
# 1222
{ 
# 1223
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1224
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1226
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 1227
(__is.flags(__ios_base::skipws)); 
# 1229
_IntType __k; 
# 1230
double __p; 
# 1231
((__is >> __k) >> __p) >> (__x._M_gd); 
# 1232
(__x.param(typename negative_binomial_distribution< _IntType> ::param_type(__k, __p))); 
# 1235
(__is.flags(__flags)); 
# 1236
return __is; 
# 1237
} 
# 1240
template< class _IntType> void 
# 1243
poisson_distribution< _IntType> ::param_type::_M_initialize() 
# 1244
{ 
# 1246
if ((_M_mean) >= (12)) 
# 1247
{ 
# 1248
const double __m = std::floor(_M_mean); 
# 1249
(_M_lm_thr) = std::log(_M_mean); 
# 1250
(_M_lfm) = std::lgamma(__m + (1)); 
# 1251
(_M_sm) = std::sqrt(__m); 
# 1253
const double __pi_4 = ((0.785398163397448279L)); 
# 1254
const double __dx = std::sqrt(((2) * __m) * std::log(((32) * __m) / __pi_4)); 
# 1256
(_M_d) = std::round(std::max((6.0), std::min(__m, __dx))); 
# 1257
const double __cx = ((2) * __m) + (_M_d); 
# 1258
(_M_scx) = std::sqrt(__cx / (2)); 
# 1259
(_M_1cx) = ((1) / __cx); 
# 1261
(_M_c2b) = (std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx)); 
# 1262
(_M_cb) = ((((2) * __cx) * std::exp(((-(_M_d)) * (_M_1cx)) * ((1) + ((_M_d) / (2))))) / (_M_d)); 
# 1264
} else { 
# 1267
(_M_lm_thr) = std::exp(-(_M_mean)); }  
# 1268
} 
# 1280
template< class _IntType> 
# 1281
template< class _UniformRandomNumberGenerator> typename poisson_distribution< _IntType> ::result_type 
# 1284
poisson_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1285
__param) 
# 1286
{ 
# 1288
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1290
if ((__param.mean()) >= 12) 
# 1291
{ 
# 1292
double __x; 
# 1295
const double __naf = ((1) - std::numeric_limits< double> ::epsilon()) / (2); 
# 1297
const double __thr = std::numeric_limits< _IntType> ::max() + __naf; 
# 1300
const double __m = std::floor((__param.mean())); 
# 1302
const double __spi_2 = ((1.253314137315500343L)); 
# 1303
const double __c1 = (__param._M_sm) * __spi_2; 
# 1304
const double __c2 = (__param._M_c2b) + __c1; 
# 1305
const double __c3 = (__c2 + (1)); 
# 1306
const double __c4 = (__c3 + (1)); 
# 1308
const double __e178 = ((1.01290304793200181L)); 
# 1309
const double __c5 = (__c4 + __e178); 
# 1310
const double __c = (__param._M_cb) + __c5; 
# 1311
const double __2cx = 2 * (((2) * __m) + (__param._M_d)); 
# 1313
bool __reject = true; 
# 1314
do { 
# 1315
{ 
# 1316
const double __u = __c * __aurng(); 
# 1317
const double __e = -std::log((1.0) - __aurng()); 
# 1319
double __w = (0.0); 
# 1321
if (__u <= __c1) 
# 1322
{ 
# 1323
const double __n = (_M_nd)(__urng); 
# 1324
const double __y = ((-std::abs(__n)) * (__param._M_sm)) - 1; 
# 1325
__x = std::floor(__y); 
# 1326
__w = (((-__n) * __n) / (2)); 
# 1327
if (__x < (-__m)) { 
# 1328
continue; }  
# 1329
} else { 
# 1330
if (__u <= __c2) 
# 1331
{ 
# 1332
const double __n = (_M_nd)(__urng); 
# 1333
const double __y = 1 + (std::abs(__n) * (__param._M_scx)); 
# 1334
__x = std::ceil(__y); 
# 1335
__w = ((__y * ((2) - __y)) * (__param._M_1cx)); 
# 1336
if (__x > (__param._M_d)) { 
# 1337
continue; }  
# 1338
} else { 
# 1339
if (__u <= __c3) { 
# 1342
__x = (-1); } else { 
# 1343
if (__u <= __c4) { 
# 1344
__x = (0); } else { 
# 1345
if (__u <= __c5) { 
# 1346
__x = (1); } else 
# 1348
{ 
# 1349
const double __v = -std::log((1.0) - __aurng()); 
# 1350
const double __y = (__param._M_d) + ((__v * __2cx) / (__param._M_d)); 
# 1352
__x = std::ceil(__y); 
# 1353
__w = (((-(__param._M_d)) * (__param._M_1cx)) * ((1) + (__y / (2)))); 
# 1354
}  }  }  }  }  
# 1356
__reject = (((__w - __e) - (__x * (__param._M_lm_thr))) > ((__param._M_lfm) - std::lgamma((__x + __m) + (1)))); 
# 1359
__reject |= ((__x + __m) >= __thr); 
# 1361
} } while (__reject); 
# 1363
return (result_type)((__x + __m) + __naf); 
# 1364
} else 
# 1367
{ 
# 1368
_IntType __x = (0); 
# 1369
double __prod = (1.0); 
# 1371
do 
# 1372
{ 
# 1373
__prod *= __aurng(); 
# 1374
__x += 1; 
# 1375
} 
# 1376
while (__prod > (__param._M_lm_thr)); 
# 1378
return __x - 1; 
# 1379
}  
# 1380
} 
# 1382
template< class _IntType> 
# 1383
template< class _ForwardIterator, class 
# 1384
_UniformRandomNumberGenerator> void 
# 1387
poisson_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1388
__urng, const param_type &
# 1389
__param) 
# 1390
{ 
# 1393
while (__f != __t) { 
# 1394
(*(__f++)) = (this->operator()(__urng, __param)); }  
# 1395
} 
# 1397
template< class _IntType, class 
# 1398
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1400
operator<<(basic_ostream< _CharT, _Traits>  &__os, const poisson_distribution< _IntType>  &
# 1401
__x) 
# 1402
{ 
# 1403
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1404
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1406
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 1407
const _CharT __fill = (__os.fill()); 
# 1408
const streamsize __precision = (__os.precision()); 
# 1409
const _CharT __space = (__os.widen(' ')); 
# 1410
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 1411
(__os.fill(__space)); 
# 1412
(__os.precision(std::numeric_limits< double> ::max_digits10)); 
# 1414
((__os << (__x.mean())) << __space) << (__x._M_nd); 
# 1416
(__os.flags(__flags)); 
# 1417
(__os.fill(__fill)); 
# 1418
(__os.precision(__precision)); 
# 1419
return __os; 
# 1420
} 
# 1422
template< class _IntType, class 
# 1423
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1425
operator>>(basic_istream< _CharT, _Traits>  &__is, poisson_distribution< _IntType>  &
# 1426
__x) 
# 1427
{ 
# 1428
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1429
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1431
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 1432
(__is.flags(__ios_base::skipws)); 
# 1434
double __mean; 
# 1435
(__is >> __mean) >> (__x._M_nd); 
# 1436
(__x.param((typename poisson_distribution< _IntType> ::param_type)__mean)); 
# 1438
(__is.flags(__flags)); 
# 1439
return __is; 
# 1440
} 
# 1443
template< class _IntType> void 
# 1446
binomial_distribution< _IntType> ::param_type::_M_initialize() 
# 1447
{ 
# 1448
const double __p12 = ((_M_p) <= (0.5)) ? _M_p : ((1.0) - (_M_p)); 
# 1450
(_M_easy) = true; 
# 1453
if (((_M_t) * __p12) >= 8) 
# 1454
{ 
# 1455
(_M_easy) = false; 
# 1456
const double __np = std::floor((_M_t) * __p12); 
# 1457
const double __pa = __np / (_M_t); 
# 1458
const double __1p = ((1) - __pa); 
# 1460
const double __pi_4 = ((0.785398163397448279L)); 
# 1461
const double __d1x = std::sqrt((__np * __1p) * std::log(((32) * __np) / (((81) * __pi_4) * __1p))); 
# 1464
(_M_d1) = std::round(std::max((1.0), __d1x)); 
# 1465
const double __d2x = std::sqrt((__np * __1p) * std::log(((32 * (_M_t)) * __1p) / (__pi_4 * __pa))); 
# 1468
(_M_d2) = std::round(std::max((1.0), __d2x)); 
# 1471
const double __spi_2 = ((1.253314137315500343L)); 
# 1472
(_M_s1) = (std::sqrt(__np * __1p) * ((1) + ((_M_d1) / ((4) * __np)))); 
# 1473
(_M_s2) = (std::sqrt(__np * __1p) * (1 + ((_M_d2) / ((4 * (_M_t)) * __1p)))); 
# 1474
(_M_c) = (((2) * (_M_d1)) / __np); 
# 1475
(_M_a1) = ((std::exp(_M_c) * (_M_s1)) * __spi_2); 
# 1476
const double __a12 = (_M_a1) + ((_M_s2) * __spi_2); 
# 1477
const double __s1s = (_M_s1) * (_M_s1); 
# 1478
(_M_a123) = (__a12 + ((((std::exp((_M_d1) / ((_M_t) * __1p)) * 2) * __s1s) / (_M_d1)) * std::exp(((-(_M_d1)) * (_M_d1)) / ((2) * __s1s)))); 
# 1481
const double __s2s = (_M_s2) * (_M_s2); 
# 1482
(_M_s) = ((_M_a123) + ((((2) * __s2s) / (_M_d2)) * std::exp(((-(_M_d2)) * (_M_d2)) / ((2) * __s2s)))); 
# 1484
(_M_lf) = (std::lgamma(__np + (1)) + std::lgamma(((_M_t) - __np) + 1)); 
# 1486
(_M_lp1p) = std::log(__pa / __1p); 
# 1488
(_M_q) = (-std::log((1) - ((__p12 - __pa) / __1p))); 
# 1489
} else { 
# 1492
(_M_q) = (-std::log((1) - __p12)); }  
# 1493
} 
# 1495
template< class _IntType> 
# 1496
template< class _UniformRandomNumberGenerator> typename binomial_distribution< _IntType> ::result_type 
# 1499
binomial_distribution< _IntType> ::_M_waiting(_UniformRandomNumberGenerator &__urng, _IntType 
# 1500
__t, double __q) 
# 1501
{ 
# 1502
_IntType __x = (0); 
# 1503
double __sum = (0.0); 
# 1505
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1507
do 
# 1508
{ 
# 1509
if (__t == __x) { 
# 1510
return __x; }  
# 1511
const double __e = -std::log((1.0) - __aurng()); 
# 1512
__sum += (__e / (__t - __x)); 
# 1513
__x += 1; 
# 1514
} 
# 1515
while (__sum <= __q); 
# 1517
return __x - 1; 
# 1518
} 
# 1530
template< class _IntType> 
# 1531
template< class _UniformRandomNumberGenerator> typename binomial_distribution< _IntType> ::result_type 
# 1534
binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1535
__param) 
# 1536
{ 
# 1537
result_type __ret; 
# 1538
const _IntType __t = (__param.t()); 
# 1539
const double __p = (__param.p()); 
# 1540
const double __p12 = ((__p <= (0.5)) ? __p : ((1.0) - __p)); 
# 1542
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1545
if (!(__param._M_easy)) 
# 1546
{ 
# 1547
double __x; 
# 1550
const double __naf = ((1) - std::numeric_limits< double> ::epsilon()) / (2); 
# 1552
const double __thr = std::numeric_limits< _IntType> ::max() + __naf; 
# 1555
const double __np = std::floor(__t * __p12); 
# 1558
const double __spi_2 = ((1.253314137315500343L)); 
# 1559
const double __a1 = ((__param._M_a1)); 
# 1560
const double __a12 = __a1 + ((__param._M_s2) * __spi_2); 
# 1561
const double __a123 = ((__param._M_a123)); 
# 1562
const double __s1s = (__param._M_s1) * (__param._M_s1); 
# 1563
const double __s2s = (__param._M_s2) * (__param._M_s2); 
# 1565
bool __reject; 
# 1566
do 
# 1567
{ 
# 1568
const double __u = (__param._M_s) * __aurng(); 
# 1570
double __v; 
# 1572
if (__u <= __a1) 
# 1573
{ 
# 1574
const double __n = (_M_nd)(__urng); 
# 1575
const double __y = (__param._M_s1) * std::abs(__n); 
# 1576
__reject = (__y >= (__param._M_d1)); 
# 1577
if (!__reject) 
# 1578
{ 
# 1579
const double __e = -std::log((1.0) - __aurng()); 
# 1580
__x = std::floor(__y); 
# 1581
__v = (((-__e) - ((__n * __n) / (2))) + (__param._M_c)); 
# 1582
}  
# 1583
} else { 
# 1584
if (__u <= __a12) 
# 1585
{ 
# 1586
const double __n = (_M_nd)(__urng); 
# 1587
const double __y = (__param._M_s2) * std::abs(__n); 
# 1588
__reject = (__y >= (__param._M_d2)); 
# 1589
if (!__reject) 
# 1590
{ 
# 1591
const double __e = -std::log((1.0) - __aurng()); 
# 1592
__x = std::floor(-__y); 
# 1593
__v = ((-__e) - ((__n * __n) / (2))); 
# 1594
}  
# 1595
} else { 
# 1596
if (__u <= __a123) 
# 1597
{ 
# 1598
const double __e1 = -std::log((1.0) - __aurng()); 
# 1599
const double __e2 = -std::log((1.0) - __aurng()); 
# 1601
const double __y = (__param._M_d1) + ((((2) * __s1s) * __e1) / (__param._M_d1)); 
# 1603
__x = std::floor(__y); 
# 1604
__v = ((-__e2) + ((__param._M_d1) * ((1 / (__t - __np)) - (__y / ((2) * __s1s))))); 
# 1606
__reject = false; 
# 1607
} else 
# 1609
{ 
# 1610
const double __e1 = -std::log((1.0) - __aurng()); 
# 1611
const double __e2 = -std::log((1.0) - __aurng()); 
# 1613
const double __y = (__param._M_d2) + ((((2) * __s2s) * __e1) / (__param._M_d2)); 
# 1615
__x = std::floor(-__y); 
# 1616
__v = ((-__e2) - (((__param._M_d2) * __y) / ((2) * __s2s))); 
# 1617
__reject = false; 
# 1618
}  }  }  
# 1620
__reject = ((__reject || (__x < (-__np))) || (__x > (__t - __np))); 
# 1621
if (!__reject) 
# 1622
{ 
# 1623
const double __lfx = std::lgamma((__np + __x) + (1)) + std::lgamma((__t - (__np + __x)) + 1); 
# 1626
__reject = (__v > (((__param._M_lf) - __lfx) + (__x * (__param._M_lp1p)))); 
# 1628
}  
# 1630
__reject |= ((__x + __np) >= __thr); 
# 1631
} 
# 1632
while (__reject); 
# 1634
__x += (__np + __naf); 
# 1636
const _IntType __z = _M_waiting(__urng, __t - ((_IntType)__x), (__param._M_q)); 
# 1638
__ret = (((_IntType)__x) + __z); 
# 1639
} else { 
# 1642
__ret = _M_waiting(__urng, __t, (__param._M_q)); }  
# 1644
if (__p12 != __p) { 
# 1645
__ret = (__t - __ret); }  
# 1646
return __ret; 
# 1647
} 
# 1649
template< class _IntType> 
# 1650
template< class _ForwardIterator, class 
# 1651
_UniformRandomNumberGenerator> void 
# 1654
binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1655
__urng, const param_type &
# 1656
__param) 
# 1657
{ 
# 1660
while (__f != __t) { 
# 1661
(*(__f++)) = (this->operator()(__urng, __param)); }  
# 1662
} 
# 1664
template< class _IntType, class 
# 1665
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1667
operator<<(basic_ostream< _CharT, _Traits>  &__os, const binomial_distribution< _IntType>  &
# 1668
__x) 
# 1669
{ 
# 1670
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1671
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1673
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 1674
const _CharT __fill = (__os.fill()); 
# 1675
const streamsize __precision = (__os.precision()); 
# 1676
const _CharT __space = (__os.widen(' ')); 
# 1677
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 1678
(__os.fill(__space)); 
# 1679
(__os.precision(std::numeric_limits< double> ::max_digits10)); 
# 1681
((((__os << (__x.t())) << __space) << (__x.p())) << __space) << (__x._M_nd); 
# 1684
(__os.flags(__flags)); 
# 1685
(__os.fill(__fill)); 
# 1686
(__os.precision(__precision)); 
# 1687
return __os; 
# 1688
} 
# 1690
template< class _IntType, class 
# 1691
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1693
operator>>(basic_istream< _CharT, _Traits>  &__is, binomial_distribution< _IntType>  &
# 1694
__x) 
# 1695
{ 
# 1696
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1697
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1699
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 1700
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 1702
_IntType __t; 
# 1703
double __p; 
# 1704
((__is >> __t) >> __p) >> (__x._M_nd); 
# 1705
(__x.param(typename binomial_distribution< _IntType> ::param_type(__t, __p))); 
# 1708
(__is.flags(__flags)); 
# 1709
return __is; 
# 1710
} 
# 1713
template< class _RealType> 
# 1714
template< class _ForwardIterator, class 
# 1715
_UniformRandomNumberGenerator> void 
# 1718
exponential_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1719
__urng, const param_type &
# 1720
__p) 
# 1721
{ 
# 1724
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 1725
while (__f != __t) { 
# 1726
(*(__f++)) = ((-std::log(((result_type)1) - __aurng())) / (__p.lambda())); }  
# 1727
} 
# 1729
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1731
operator<<(basic_ostream< _CharT, _Traits>  &__os, const exponential_distribution< _RealType>  &
# 1732
__x) 
# 1733
{ 
# 1734
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1735
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1737
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 1738
const _CharT __fill = (__os.fill()); 
# 1739
const streamsize __precision = (__os.precision()); 
# 1740
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 1741
(__os.fill((__os.widen(' ')))); 
# 1742
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 1744
__os << (__x.lambda()); 
# 1746
(__os.flags(__flags)); 
# 1747
(__os.fill(__fill)); 
# 1748
(__os.precision(__precision)); 
# 1749
return __os; 
# 1750
} 
# 1752
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1754
operator>>(basic_istream< _CharT, _Traits>  &__is, exponential_distribution< _RealType>  &
# 1755
__x) 
# 1756
{ 
# 1757
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1758
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1760
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 1761
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 1763
_RealType __lambda; 
# 1764
__is >> __lambda; 
# 1765
(__x.param((typename exponential_distribution< _RealType> ::param_type)__lambda)); 
# 1768
(__is.flags(__flags)); 
# 1769
return __is; 
# 1770
} 
# 1779
template< class _RealType> 
# 1780
template< class _UniformRandomNumberGenerator> typename normal_distribution< _RealType> ::result_type 
# 1783
normal_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1784
__param) 
# 1785
{ 
# 1786
result_type __ret; 
# 1788
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 1790
if (_M_saved_available) 
# 1791
{ 
# 1792
(_M_saved_available) = false; 
# 1793
__ret = (_M_saved); 
# 1794
} else 
# 1796
{ 
# 1797
result_type __x, __y, __r2; 
# 1798
do 
# 1799
{ 
# 1800
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1801
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1802
__r2 = ((__x * __x) + (__y * __y)); 
# 1803
} 
# 1804
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1806
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1807
(_M_saved) = (__x * __mult); 
# 1808
(_M_saved_available) = true; 
# 1809
__ret = (__y * __mult); 
# 1810
}  
# 1812
__ret = ((__ret * (__param.stddev())) + (__param.mean())); 
# 1813
return __ret; 
# 1814
} 
# 1816
template< class _RealType> 
# 1817
template< class _ForwardIterator, class 
# 1818
_UniformRandomNumberGenerator> void 
# 1821
normal_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1822
__urng, const param_type &
# 1823
__param) 
# 1824
{ 
# 1827
if (__f == __t) { 
# 1828
return; }  
# 1830
if (_M_saved_available) 
# 1831
{ 
# 1832
(_M_saved_available) = false; 
# 1833
(*(__f++)) = (((_M_saved) * (__param.stddev())) + (__param.mean())); 
# 1835
if (__f == __t) { 
# 1836
return; }  
# 1837
}  
# 1840
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 1842
while ((__f + 1) < __t) 
# 1843
{ 
# 1844
result_type __x, __y, __r2; 
# 1845
do 
# 1846
{ 
# 1847
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1848
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1849
__r2 = ((__x * __x) + (__y * __y)); 
# 1850
} 
# 1851
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1853
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1854
(*(__f++)) = (((__y * __mult) * (__param.stddev())) + (__param.mean())); 
# 1855
(*(__f++)) = (((__x * __mult) * (__param.stddev())) + (__param.mean())); 
# 1856
}  
# 1858
if (__f != __t) 
# 1859
{ 
# 1860
result_type __x, __y, __r2; 
# 1861
do 
# 1862
{ 
# 1863
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1864
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1865
__r2 = ((__x * __x) + (__y * __y)); 
# 1866
} 
# 1867
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1869
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1870
(_M_saved) = (__x * __mult); 
# 1871
(_M_saved_available) = true; 
# 1872
(*__f) = (((__y * __mult) * (__param.stddev())) + (__param.mean())); 
# 1873
}  
# 1874
} 
# 1876
template< class _RealType> bool 
# 1878
operator==(const normal_distribution< _RealType>  &__d1, const normal_distribution< _RealType>  &
# 1879
__d2) 
# 1880
{ 
# 1881
if (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_saved_available) == (__d2._M_saved_available))) 
# 1883
{ 
# 1884
if ((__d1._M_saved_available) && ((__d1._M_saved) == (__d2._M_saved))) { 
# 1886
return true; } else { 
# 1887
if (!(__d1._M_saved_available)) { 
# 1888
return true; } else { 
# 1890
return false; }  }  
# 1891
} else { 
# 1893
return false; }  
# 1894
} 
# 1896
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1898
operator<<(basic_ostream< _CharT, _Traits>  &__os, const normal_distribution< _RealType>  &
# 1899
__x) 
# 1900
{ 
# 1901
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1902
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1904
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 1905
const _CharT __fill = (__os.fill()); 
# 1906
const streamsize __precision = (__os.precision()); 
# 1907
const _CharT __space = (__os.widen(' ')); 
# 1908
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 1909
(__os.fill(__space)); 
# 1910
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 1912
((((__os << (__x.mean())) << __space) << (__x.stddev())) << __space) << (__x._M_saved_available); 
# 1914
if (__x._M_saved_available) { 
# 1915
(__os << __space) << (__x._M_saved); }  
# 1917
(__os.flags(__flags)); 
# 1918
(__os.fill(__fill)); 
# 1919
(__os.precision(__precision)); 
# 1920
return __os; 
# 1921
} 
# 1923
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1925
operator>>(basic_istream< _CharT, _Traits>  &__is, normal_distribution< _RealType>  &
# 1926
__x) 
# 1927
{ 
# 1928
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1929
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1931
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 1932
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 1934
double __mean, __stddev; 
# 1935
((__is >> __mean) >> __stddev) >> (__x._M_saved_available); 
# 1937
if (__x._M_saved_available) { 
# 1938
__is >> (__x._M_saved); }  
# 1939
(__x.param(typename normal_distribution< _RealType> ::param_type(__mean, __stddev))); 
# 1942
(__is.flags(__flags)); 
# 1943
return __is; 
# 1944
} 
# 1947
template< class _RealType> 
# 1948
template< class _ForwardIterator, class 
# 1949
_UniformRandomNumberGenerator> void 
# 1952
lognormal_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1953
__urng, const param_type &
# 1954
__p) 
# 1955
{ 
# 1957
while (__f != __t) { 
# 1958
(*(__f++)) = std::exp(((__p.s()) * (_M_nd)(__urng)) + (__p.m())); }  
# 1959
} 
# 1961
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1963
operator<<(basic_ostream< _CharT, _Traits>  &__os, const lognormal_distribution< _RealType>  &
# 1964
__x) 
# 1965
{ 
# 1966
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 1967
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 1969
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 1970
const _CharT __fill = (__os.fill()); 
# 1971
const streamsize __precision = (__os.precision()); 
# 1972
const _CharT __space = (__os.widen(' ')); 
# 1973
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 1974
(__os.fill(__space)); 
# 1975
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 1977
((((__os << (__x.m())) << __space) << (__x.s())) << __space) << (__x._M_nd); 
# 1980
(__os.flags(__flags)); 
# 1981
(__os.fill(__fill)); 
# 1982
(__os.precision(__precision)); 
# 1983
return __os; 
# 1984
} 
# 1986
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1988
operator>>(basic_istream< _CharT, _Traits>  &__is, lognormal_distribution< _RealType>  &
# 1989
__x) 
# 1990
{ 
# 1991
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1992
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1994
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 1995
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 1997
_RealType __m, __s; 
# 1998
((__is >> __m) >> __s) >> (__x._M_nd); 
# 1999
(__x.param(typename lognormal_distribution< _RealType> ::param_type(__m, __s))); 
# 2002
(__is.flags(__flags)); 
# 2003
return __is; 
# 2004
} 
# 2006
template< class _RealType> 
# 2007
template< class _ForwardIterator, class 
# 2008
_UniformRandomNumberGenerator> void 
# 2011
chi_squared_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2012
__urng) 
# 2013
{ 
# 2015
while (__f != __t) { 
# 2016
(*(__f++)) = (2 * (_M_gd)(__urng)); }  
# 2017
} 
# 2019
template< class _RealType> 
# 2020
template< class _ForwardIterator, class 
# 2021
_UniformRandomNumberGenerator> void 
# 2024
chi_squared_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2025
__urng, const typename gamma_distribution< _RealType> ::param_type &
# 2027
__p) 
# 2028
{ 
# 2030
while (__f != __t) { 
# 2031
(*(__f++)) = (2 * (_M_gd)(__urng, __p)); }  
# 2032
} 
# 2034
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2036
operator<<(basic_ostream< _CharT, _Traits>  &__os, const chi_squared_distribution< _RealType>  &
# 2037
__x) 
# 2038
{ 
# 2039
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2040
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2042
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2043
const _CharT __fill = (__os.fill()); 
# 2044
const streamsize __precision = (__os.precision()); 
# 2045
const _CharT __space = (__os.widen(' ')); 
# 2046
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2047
(__os.fill(__space)); 
# 2048
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 2050
((__os << (__x.n())) << __space) << (__x._M_gd); 
# 2052
(__os.flags(__flags)); 
# 2053
(__os.fill(__fill)); 
# 2054
(__os.precision(__precision)); 
# 2055
return __os; 
# 2056
} 
# 2058
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2060
operator>>(basic_istream< _CharT, _Traits>  &__is, chi_squared_distribution< _RealType>  &
# 2061
__x) 
# 2062
{ 
# 2063
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2064
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2066
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2067
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2069
_RealType __n; 
# 2070
(__is >> __n) >> (__x._M_gd); 
# 2071
(__x.param((typename chi_squared_distribution< _RealType> ::param_type)__n)); 
# 2074
(__is.flags(__flags)); 
# 2075
return __is; 
# 2076
} 
# 2079
template< class _RealType> 
# 2080
template< class _UniformRandomNumberGenerator> typename cauchy_distribution< _RealType> ::result_type 
# 2083
cauchy_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2084
__p) 
# 2085
{ 
# 2087
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 2088
_RealType __u; 
# 2089
do { 
# 2090
__u = __aurng(); } 
# 2091
while (__u == (0.5)); 
# 2093
const _RealType __pi = ((3.141592653589793116L)); 
# 2094
return (__p.a()) + ((__p.b()) * std::tan(__pi * __u)); 
# 2095
} 
# 2097
template< class _RealType> 
# 2098
template< class _ForwardIterator, class 
# 2099
_UniformRandomNumberGenerator> void 
# 2102
cauchy_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2103
__urng, const param_type &
# 2104
__p) 
# 2105
{ 
# 2107
const _RealType __pi = ((3.141592653589793116L)); 
# 2109
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 2110
while (__f != __t) 
# 2111
{ 
# 2112
_RealType __u; 
# 2113
do { 
# 2114
__u = __aurng(); } 
# 2115
while (__u == (0.5)); 
# 2117
(*(__f++)) = ((__p.a()) + ((__p.b()) * std::tan(__pi * __u))); 
# 2118
}  
# 2119
} 
# 2121
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2123
operator<<(basic_ostream< _CharT, _Traits>  &__os, const cauchy_distribution< _RealType>  &
# 2124
__x) 
# 2125
{ 
# 2126
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2127
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2129
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2130
const _CharT __fill = (__os.fill()); 
# 2131
const streamsize __precision = (__os.precision()); 
# 2132
const _CharT __space = (__os.widen(' ')); 
# 2133
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2134
(__os.fill(__space)); 
# 2135
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 2137
((__os << (__x.a())) << __space) << (__x.b()); 
# 2139
(__os.flags(__flags)); 
# 2140
(__os.fill(__fill)); 
# 2141
(__os.precision(__precision)); 
# 2142
return __os; 
# 2143
} 
# 2145
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2147
operator>>(basic_istream< _CharT, _Traits>  &__is, cauchy_distribution< _RealType>  &
# 2148
__x) 
# 2149
{ 
# 2150
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2151
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2153
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2154
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2156
_RealType __a, __b; 
# 2157
(__is >> __a) >> __b; 
# 2158
(__x.param(typename cauchy_distribution< _RealType> ::param_type(__a, __b))); 
# 2161
(__is.flags(__flags)); 
# 2162
return __is; 
# 2163
} 
# 2166
template< class _RealType> 
# 2167
template< class _ForwardIterator, class 
# 2168
_UniformRandomNumberGenerator> void 
# 2171
fisher_f_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2172
__urng) 
# 2173
{ 
# 2175
while (__f != __t) { 
# 2176
(*(__f++)) = (((_M_gd_x)(__urng) * n()) / ((_M_gd_y)(__urng) * m())); }  
# 2177
} 
# 2179
template< class _RealType> 
# 2180
template< class _ForwardIterator, class 
# 2181
_UniformRandomNumberGenerator> void 
# 2184
fisher_f_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2185
__urng, const param_type &
# 2186
__p) 
# 2187
{ 
# 2190
typedef typename gamma_distribution< _RealType> ::param_type param_type; 
# 2191
param_type __p1((__p.m()) / 2); 
# 2192
param_type __p2((__p.n()) / 2); 
# 2193
while (__f != __t) { 
# 2194
(*(__f++)) = (((_M_gd_x)(__urng, __p1) * n()) / ((_M_gd_y)(__urng, __p2) * m())); }  
# 2196
} 
# 2198
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2200
operator<<(basic_ostream< _CharT, _Traits>  &__os, const fisher_f_distribution< _RealType>  &
# 2201
__x) 
# 2202
{ 
# 2203
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2204
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2206
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2207
const _CharT __fill = (__os.fill()); 
# 2208
const streamsize __precision = (__os.precision()); 
# 2209
const _CharT __space = (__os.widen(' ')); 
# 2210
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2211
(__os.fill(__space)); 
# 2212
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 2214
((((((__os << (__x.m())) << __space) << (__x.n())) << __space) << (__x._M_gd_x)) << __space) << (__x._M_gd_y); 
# 2217
(__os.flags(__flags)); 
# 2218
(__os.fill(__fill)); 
# 2219
(__os.precision(__precision)); 
# 2220
return __os; 
# 2221
} 
# 2223
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2225
operator>>(basic_istream< _CharT, _Traits>  &__is, fisher_f_distribution< _RealType>  &
# 2226
__x) 
# 2227
{ 
# 2228
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2229
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2231
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2232
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2234
_RealType __m, __n; 
# 2235
(((__is >> __m) >> __n) >> (__x._M_gd_x)) >> (__x._M_gd_y); 
# 2236
(__x.param(typename fisher_f_distribution< _RealType> ::param_type(__m, __n))); 
# 2239
(__is.flags(__flags)); 
# 2240
return __is; 
# 2241
} 
# 2244
template< class _RealType> 
# 2245
template< class _ForwardIterator, class 
# 2246
_UniformRandomNumberGenerator> void 
# 2249
student_t_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2250
__urng) 
# 2251
{ 
# 2253
while (__f != __t) { 
# 2254
(*(__f++)) = ((_M_nd)(__urng) * std::sqrt(n() / (_M_gd)(__urng))); }  
# 2255
} 
# 2257
template< class _RealType> 
# 2258
template< class _ForwardIterator, class 
# 2259
_UniformRandomNumberGenerator> void 
# 2262
student_t_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2263
__urng, const param_type &
# 2264
__p) 
# 2265
{ 
# 2268
typename gamma_distribution< _RealType> ::param_type __p2((__p.n()) / 2, 2); 
# 2269
while (__f != __t) { 
# 2270
(*(__f++)) = ((_M_nd)(__urng) * std::sqrt((__p.n()) / (_M_gd)(__urng, __p2))); }  
# 2271
} 
# 2273
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2275
operator<<(basic_ostream< _CharT, _Traits>  &__os, const student_t_distribution< _RealType>  &
# 2276
__x) 
# 2277
{ 
# 2278
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2279
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2281
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2282
const _CharT __fill = (__os.fill()); 
# 2283
const streamsize __precision = (__os.precision()); 
# 2284
const _CharT __space = (__os.widen(' ')); 
# 2285
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2286
(__os.fill(__space)); 
# 2287
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 2289
((((__os << (__x.n())) << __space) << (__x._M_nd)) << __space) << (__x._M_gd); 
# 2291
(__os.flags(__flags)); 
# 2292
(__os.fill(__fill)); 
# 2293
(__os.precision(__precision)); 
# 2294
return __os; 
# 2295
} 
# 2297
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2299
operator>>(basic_istream< _CharT, _Traits>  &__is, student_t_distribution< _RealType>  &
# 2300
__x) 
# 2301
{ 
# 2302
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2303
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2305
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2306
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2308
_RealType __n; 
# 2309
((__is >> __n) >> (__x._M_nd)) >> (__x._M_gd); 
# 2310
(__x.param((typename student_t_distribution< _RealType> ::param_type)__n)); 
# 2312
(__is.flags(__flags)); 
# 2313
return __is; 
# 2314
} 
# 2317
template< class _RealType> void 
# 2320
gamma_distribution< _RealType> ::param_type::_M_initialize() 
# 2321
{ 
# 2322
(_M_malpha) = (((_M_alpha) < (1.0)) ? (_M_alpha) + ((_RealType)(1.0)) : (_M_alpha)); 
# 2324
const _RealType __a1 = (_M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0))); 
# 2325
(_M_a2) = (((_RealType)(1.0)) / std::sqrt(((_RealType)(9.0)) * __a1)); 
# 2326
} 
# 2333
template< class _RealType> 
# 2334
template< class _UniformRandomNumberGenerator> typename gamma_distribution< _RealType> ::result_type 
# 2337
gamma_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2338
__param) 
# 2339
{ 
# 2341
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 2343
result_type __u, __v, __n; 
# 2344
const result_type __a1 = (__param._M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0))); 
# 2347
do 
# 2348
{ 
# 2349
do 
# 2350
{ 
# 2351
__n = (_M_nd)(__urng); 
# 2352
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2353
} 
# 2354
while (__v <= (0.0)); 
# 2356
__v = ((__v * __v) * __v); 
# 2357
__u = __aurng(); 
# 2358
} 
# 2359
while ((__u > (((result_type)(1.0)) - (((((0.3310000000000000164) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2363
if ((__param.alpha()) == (__param._M_malpha)) { 
# 2364
return (__a1 * __v) * (__param.beta()); } else 
# 2366
{ 
# 2367
do { 
# 2368
__u = __aurng(); } 
# 2369
while (__u == (0.0)); 
# 2371
return ((std::pow(__u, ((result_type)(1.0)) / (__param.alpha())) * __a1) * __v) * (__param.beta()); 
# 2373
}  
# 2374
} 
# 2376
template< class _RealType> 
# 2377
template< class _ForwardIterator, class 
# 2378
_UniformRandomNumberGenerator> void 
# 2381
gamma_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2382
__urng, const param_type &
# 2383
__param) 
# 2384
{ 
# 2387
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 2389
result_type __u, __v, __n; 
# 2390
const result_type __a1 = (__param._M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0))); 
# 2393
if ((__param.alpha()) == (__param._M_malpha)) { 
# 2394
while (__f != __t) 
# 2395
{ 
# 2396
do 
# 2397
{ 
# 2398
do 
# 2399
{ 
# 2400
__n = (_M_nd)(__urng); 
# 2401
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2402
} 
# 2403
while (__v <= (0.0)); 
# 2405
__v = ((__v * __v) * __v); 
# 2406
__u = __aurng(); 
# 2407
} 
# 2408
while ((__u > (((result_type)(1.0)) - (((((0.3310000000000000164) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2412
(*(__f++)) = ((__a1 * __v) * (__param.beta())); 
# 2413
}  } else { 
# 2415
while (__f != __t) 
# 2416
{ 
# 2417
do 
# 2418
{ 
# 2419
do 
# 2420
{ 
# 2421
__n = (_M_nd)(__urng); 
# 2422
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2423
} 
# 2424
while (__v <= (0.0)); 
# 2426
__v = ((__v * __v) * __v); 
# 2427
__u = __aurng(); 
# 2428
} 
# 2429
while ((__u > (((result_type)(1.0)) - (((((0.3310000000000000164) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2433
do { 
# 2434
__u = __aurng(); } 
# 2435
while (__u == (0.0)); 
# 2437
(*(__f++)) = (((std::pow(__u, ((result_type)(1.0)) / (__param.alpha())) * __a1) * __v) * (__param.beta())); 
# 2439
}  }  
# 2440
} 
# 2442
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2444
operator<<(basic_ostream< _CharT, _Traits>  &__os, const gamma_distribution< _RealType>  &
# 2445
__x) 
# 2446
{ 
# 2447
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2448
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2450
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2451
const _CharT __fill = (__os.fill()); 
# 2452
const streamsize __precision = (__os.precision()); 
# 2453
const _CharT __space = (__os.widen(' ')); 
# 2454
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2455
(__os.fill(__space)); 
# 2456
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 2458
((((__os << (__x.alpha())) << __space) << (__x.beta())) << __space) << (__x._M_nd); 
# 2461
(__os.flags(__flags)); 
# 2462
(__os.fill(__fill)); 
# 2463
(__os.precision(__precision)); 
# 2464
return __os; 
# 2465
} 
# 2467
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2469
operator>>(basic_istream< _CharT, _Traits>  &__is, gamma_distribution< _RealType>  &
# 2470
__x) 
# 2471
{ 
# 2472
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2473
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2475
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2476
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2478
_RealType __alpha_val, __beta_val; 
# 2479
((__is >> __alpha_val) >> __beta_val) >> (__x._M_nd); 
# 2480
(__x.param(typename gamma_distribution< _RealType> ::param_type(__alpha_val, __beta_val))); 
# 2483
(__is.flags(__flags)); 
# 2484
return __is; 
# 2485
} 
# 2488
template< class _RealType> 
# 2489
template< class _UniformRandomNumberGenerator> typename weibull_distribution< _RealType> ::result_type 
# 2492
weibull_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2493
__p) 
# 2494
{ 
# 2496
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 2497
return (__p.b()) * std::pow(-std::log(((result_type)1) - __aurng()), ((result_type)1) / (__p.a())); 
# 2499
} 
# 2501
template< class _RealType> 
# 2502
template< class _ForwardIterator, class 
# 2503
_UniformRandomNumberGenerator> void 
# 2506
weibull_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2507
__urng, const param_type &
# 2508
__p) 
# 2509
{ 
# 2512
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 2513
auto __inv_a = ((result_type)1) / (__p.a()); 
# 2515
while (__f != __t) { 
# 2516
(*(__f++)) = ((__p.b()) * std::pow(-std::log(((result_type)1) - __aurng()), __inv_a)); }  
# 2518
} 
# 2520
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2522
operator<<(basic_ostream< _CharT, _Traits>  &__os, const weibull_distribution< _RealType>  &
# 2523
__x) 
# 2524
{ 
# 2525
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2526
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2528
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2529
const _CharT __fill = (__os.fill()); 
# 2530
const streamsize __precision = (__os.precision()); 
# 2531
const _CharT __space = (__os.widen(' ')); 
# 2532
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2533
(__os.fill(__space)); 
# 2534
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 2536
((__os << (__x.a())) << __space) << (__x.b()); 
# 2538
(__os.flags(__flags)); 
# 2539
(__os.fill(__fill)); 
# 2540
(__os.precision(__precision)); 
# 2541
return __os; 
# 2542
} 
# 2544
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2546
operator>>(basic_istream< _CharT, _Traits>  &__is, weibull_distribution< _RealType>  &
# 2547
__x) 
# 2548
{ 
# 2549
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2550
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2552
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2553
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2555
_RealType __a, __b; 
# 2556
(__is >> __a) >> __b; 
# 2557
(__x.param(typename weibull_distribution< _RealType> ::param_type(__a, __b))); 
# 2560
(__is.flags(__flags)); 
# 2561
return __is; 
# 2562
} 
# 2565
template< class _RealType> 
# 2566
template< class _UniformRandomNumberGenerator> typename extreme_value_distribution< _RealType> ::result_type 
# 2569
extreme_value_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2570
__p) 
# 2571
{ 
# 2573
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 2574
return (__p.a()) - ((__p.b()) * std::log(-std::log(((result_type)1) - __aurng()))); 
# 2576
} 
# 2578
template< class _RealType> 
# 2579
template< class _ForwardIterator, class 
# 2580
_UniformRandomNumberGenerator> void 
# 2583
extreme_value_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2584
__urng, const param_type &
# 2585
__p) 
# 2586
{ 
# 2589
__detail::_Adaptor< _UniformRandomNumberGenerator, _RealType>  __aurng(__urng); 
# 2591
while (__f != __t) { 
# 2592
(*(__f++)) = ((__p.a()) - ((__p.b()) * std::log(-std::log(((result_type)1) - __aurng())))); }  
# 2594
} 
# 2596
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2598
operator<<(basic_ostream< _CharT, _Traits>  &__os, const extreme_value_distribution< _RealType>  &
# 2599
__x) 
# 2600
{ 
# 2601
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2602
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2604
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2605
const _CharT __fill = (__os.fill()); 
# 2606
const streamsize __precision = (__os.precision()); 
# 2607
const _CharT __space = (__os.widen(' ')); 
# 2608
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2609
(__os.fill(__space)); 
# 2610
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 2612
((__os << (__x.a())) << __space) << (__x.b()); 
# 2614
(__os.flags(__flags)); 
# 2615
(__os.fill(__fill)); 
# 2616
(__os.precision(__precision)); 
# 2617
return __os; 
# 2618
} 
# 2620
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2622
operator>>(basic_istream< _CharT, _Traits>  &__is, extreme_value_distribution< _RealType>  &
# 2623
__x) 
# 2624
{ 
# 2625
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2626
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2628
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2629
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2631
_RealType __a, __b; 
# 2632
(__is >> __a) >> __b; 
# 2633
(__x.param(typename extreme_value_distribution< _RealType> ::param_type(__a, __b))); 
# 2636
(__is.flags(__flags)); 
# 2637
return __is; 
# 2638
} 
# 2641
template< class _IntType> void 
# 2644
discrete_distribution< _IntType> ::param_type::_M_initialize() 
# 2645
{ 
# 2646
if ((_M_prob).size() < (2)) 
# 2647
{ 
# 2648
(_M_prob).clear(); 
# 2649
return; 
# 2650
}  
# 2652
const double __sum = std::accumulate((_M_prob).begin(), (_M_prob).end(), (0.0)); 
# 2655
__detail::__normalize((_M_prob).begin(), (_M_prob).end(), (_M_prob).begin(), __sum); 
# 2658
(_M_cp).reserve((_M_prob).size()); 
# 2659
std::partial_sum((_M_prob).begin(), (_M_prob).end(), std::back_inserter(_M_cp)); 
# 2662
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 2663
} 
# 2665
template< class _IntType> 
# 2666
template< class _Func> 
# 2668
discrete_distribution< _IntType> ::param_type::param_type(size_t __nw, double __xmin, double __xmax, _Func __fw) : _M_prob(), _M_cp() 
# 2670
{ 
# 2671
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 2672
const double __delta = (__xmax - __xmin) / __n; 
# 2674
(_M_prob).reserve(__n); 
# 2675
for (size_t __k = (0); __k < __nw; ++__k) { 
# 2676
((_M_prob).push_back(__fw((__xmin + (__k * __delta)) + ((0.5) * __delta)))); }  
# 2678
_M_initialize(); 
# 2679
} 
# 2681
template< class _IntType> 
# 2682
template< class _UniformRandomNumberGenerator> typename discrete_distribution< _IntType> ::result_type 
# 2685
discrete_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2686
__param) 
# 2687
{ 
# 2688
if (((__param._M_cp).empty())) { 
# 2689
return (result_type)0; }  
# 2692
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2694
const double __p = __aurng(); 
# 2695
auto __pos = std::lower_bound(((__param._M_cp).begin()), ((__param._M_cp).end()), __p); 
# 2698
return __pos - ((__param._M_cp).begin()); 
# 2699
} 
# 2701
template< class _IntType> 
# 2702
template< class _ForwardIterator, class 
# 2703
_UniformRandomNumberGenerator> void 
# 2706
discrete_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2707
__urng, const param_type &
# 2708
__param) 
# 2709
{ 
# 2712
if (((__param._M_cp).empty())) 
# 2713
{ 
# 2714
while (__f != __t) { 
# 2715
(*(__f++)) = ((result_type)0); }  
# 2716
return; 
# 2717
}  
# 2720
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2722
while (__f != __t) 
# 2723
{ 
# 2724
const double __p = __aurng(); 
# 2725
auto __pos = std::lower_bound(((__param._M_cp).begin()), ((__param._M_cp).end()), __p); 
# 2728
(*(__f++)) = (__pos - ((__param._M_cp).begin())); 
# 2729
}  
# 2730
} 
# 2732
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2734
operator<<(basic_ostream< _CharT, _Traits>  &__os, const discrete_distribution< _IntType>  &
# 2735
__x) 
# 2736
{ 
# 2737
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2738
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2740
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2741
const _CharT __fill = (__os.fill()); 
# 2742
const streamsize __precision = (__os.precision()); 
# 2743
const _CharT __space = (__os.widen(' ')); 
# 2744
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2745
(__os.fill(__space)); 
# 2746
(__os.precision(std::numeric_limits< double> ::max_digits10)); 
# 2748
vector< double>  __prob = (__x.probabilities()); 
# 2749
__os << __prob.size(); 
# 2750
for (auto __dit = __prob.begin(); (__dit != (__prob.end())); (++__dit)) { 
# 2751
(__os << __space) << (*__dit); }  
# 2753
(__os.flags(__flags)); 
# 2754
(__os.fill(__fill)); 
# 2755
(__os.precision(__precision)); 
# 2756
return __os; 
# 2757
} 
# 2759
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2761
operator>>(basic_istream< _CharT, _Traits>  &__is, discrete_distribution< _IntType>  &
# 2762
__x) 
# 2763
{ 
# 2764
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2765
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2767
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2768
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2770
size_t __n; 
# 2771
__is >> __n; 
# 2773
vector< double>  __prob_vec; 
# 2774
__prob_vec.reserve(__n); 
# 2775
for (; __n != (0); --__n) 
# 2776
{ 
# 2777
double __prob; 
# 2778
__is >> __prob; 
# 2779
__prob_vec.push_back(__prob); 
# 2780
}  
# 2782
(__x.param(typename discrete_distribution< _IntType> ::param_type(__prob_vec.begin(), __prob_vec.end()))); 
# 2785
(__is.flags(__flags)); 
# 2786
return __is; 
# 2787
} 
# 2790
template< class _RealType> void 
# 2793
piecewise_constant_distribution< _RealType> ::param_type::_M_initialize() 
# 2794
{ 
# 2795
if ((((_M_int).size()) < 2) || ((((_M_int).size()) == 2) && (((_M_int)[0]) == ((_RealType)0)) && (((_M_int)[1]) == ((_RealType)1)))) 
# 2799
{ 
# 2800
((_M_int).clear()); 
# 2801
(_M_den).clear(); 
# 2802
return; 
# 2803
}  
# 2805
const double __sum = std::accumulate((_M_den).begin(), (_M_den).end(), (0.0)); 
# 2808
__detail::__normalize((_M_den).begin(), (_M_den).end(), (_M_den).begin(), __sum); 
# 2811
(_M_cp).reserve((_M_den).size()); 
# 2812
std::partial_sum((_M_den).begin(), (_M_den).end(), std::back_inserter(_M_cp)); 
# 2816
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 2818
for (size_t __k = (0); __k < (_M_den).size(); ++__k) { 
# 2819
(_M_den)[__k] /= (((_M_int)[__k + (1)]) - ((_M_int)[__k])); }  
# 2820
} 
# 2822
template< class _RealType> 
# 2823
template< class _InputIteratorB, class _InputIteratorW> 
# 2825
piecewise_constant_distribution< _RealType> ::param_type::param_type(_InputIteratorB __bbegin, _InputIteratorB 
# 2826
__bend, _InputIteratorW 
# 2827
__wbegin) : _M_int(), _M_den(), _M_cp() 
# 2829
{ 
# 2830
if (__bbegin != __bend) 
# 2831
{ 
# 2832
for (; ;) 
# 2833
{ 
# 2834
((_M_int).push_back(*__bbegin)); 
# 2835
++__bbegin; 
# 2836
if (__bbegin == __bend) { 
# 2837
break; }  
# 2839
((_M_den).push_back(*__wbegin)); 
# 2840
++__wbegin; 
# 2841
}  
# 2842
}  
# 2844
_M_initialize(); 
# 2845
} 
# 2847
template< class _RealType> 
# 2848
template< class _Func> 
# 2850
piecewise_constant_distribution< _RealType> ::param_type::param_type(initializer_list< _RealType>  __bl, _Func __fw) : _M_int(), _M_den(), _M_cp() 
# 2852
{ 
# 2853
((_M_int).reserve((__bl.size()))); 
# 2854
for (auto __biter = (__bl.begin()); __biter != (__bl.end()); ++__biter) { 
# 2855
((_M_int).push_back(*__biter)); }  
# 2857
(_M_den).reserve(((_M_int).size()) - 1); 
# 2858
for (size_t __k = (0); __k < (((_M_int).size()) - 1); ++__k) { 
# 2859
((_M_den).push_back(__fw((0.5) * (((_M_int)[__k + (1)]) + ((_M_int)[__k]))))); }  
# 2861
_M_initialize(); 
# 2862
} 
# 2864
template< class _RealType> 
# 2865
template< class _Func> 
# 2867
piecewise_constant_distribution< _RealType> ::param_type::param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw) : _M_int(), _M_den(), _M_cp() 
# 2869
{ 
# 2870
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 2871
const _RealType __delta = (__xmax - __xmin) / __n; 
# 2873
((_M_int).reserve(__n + (1))); 
# 2874
for (size_t __k = (0); __k <= __nw; ++__k) { 
# 2875
((_M_int).push_back(__xmin + (__k * __delta))); }  
# 2877
(_M_den).reserve(__n); 
# 2878
for (size_t __k = (0); __k < __nw; ++__k) { 
# 2879
((_M_den).push_back(__fw(((_M_int)[__k]) + ((0.5) * __delta)))); }  
# 2881
_M_initialize(); 
# 2882
} 
# 2884
template< class _RealType> 
# 2885
template< class _UniformRandomNumberGenerator> typename piecewise_constant_distribution< _RealType> ::result_type 
# 2888
piecewise_constant_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2889
__param) 
# 2890
{ 
# 2892
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2894
const double __p = __aurng(); 
# 2895
if (((__param._M_cp).empty())) { 
# 2896
return __p; }  
# 2898
auto __pos = std::lower_bound(((__param._M_cp).begin()), ((__param._M_cp).end()), __p); 
# 2900
const size_t __i = __pos - ((__param._M_cp).begin()); 
# 2902
const double __pref = (__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0); 
# 2904
return ((__param._M_int)[__i]) + ((__p - __pref) / ((__param._M_den)[__i])); 
# 2905
} 
# 2907
template< class _RealType> 
# 2908
template< class _ForwardIterator, class 
# 2909
_UniformRandomNumberGenerator> void 
# 2912
piecewise_constant_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2913
__urng, const param_type &
# 2914
__param) 
# 2915
{ 
# 2918
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2920
if (((__param._M_cp).empty())) 
# 2921
{ 
# 2922
while (__f != __t) { 
# 2923
(*(__f++)) = __aurng(); }  
# 2924
return; 
# 2925
}  
# 2927
while (__f != __t) 
# 2928
{ 
# 2929
const double __p = __aurng(); 
# 2931
auto __pos = std::lower_bound(((__param._M_cp).begin()), ((__param._M_cp).end()), __p); 
# 2933
const size_t __i = __pos - ((__param._M_cp).begin()); 
# 2935
const double __pref = (__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0); 
# 2937
(*(__f++)) = (((__param._M_int)[__i]) + ((__p - __pref) / ((__param._M_den)[__i]))); 
# 2939
}  
# 2940
} 
# 2942
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2944
operator<<(basic_ostream< _CharT, _Traits>  &__os, const piecewise_constant_distribution< _RealType>  &
# 2945
__x) 
# 2946
{ 
# 2947
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 2948
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 2950
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 2951
const _CharT __fill = (__os.fill()); 
# 2952
const streamsize __precision = (__os.precision()); 
# 2953
const _CharT __space = (__os.widen(' ')); 
# 2954
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 2955
(__os.fill(__space)); 
# 2956
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 2958
vector< _RealType>  __int = (__x.intervals()); 
# 2959
__os << ((__int.size()) - 1); 
# 2961
for (auto __xit = (__int.begin()); __xit != (__int.end()); ++__xit) { 
# 2962
(__os << __space) << (*__xit); }  
# 2964
vector< double>  __den = (__x.densities()); 
# 2965
for (auto __dit = __den.begin(); (__dit != (__den.end())); (++__dit)) { 
# 2966
(__os << __space) << (*__dit); }  
# 2968
(__os.flags(__flags)); 
# 2969
(__os.fill(__fill)); 
# 2970
(__os.precision(__precision)); 
# 2971
return __os; 
# 2972
} 
# 2974
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2976
operator>>(basic_istream< _CharT, _Traits>  &__is, piecewise_constant_distribution< _RealType>  &
# 2977
__x) 
# 2978
{ 
# 2979
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 2980
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 2982
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 2983
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 2985
size_t __n; 
# 2986
__is >> __n; 
# 2988
vector< _RealType>  __int_vec; 
# 2989
(__int_vec.reserve(__n + (1))); 
# 2990
for (size_t __i = (0); __i <= __n; ++__i) 
# 2991
{ 
# 2992
_RealType __int; 
# 2993
__is >> __int; 
# 2994
(__int_vec.push_back(__int)); 
# 2995
}  
# 2997
vector< double>  __den_vec; 
# 2998
__den_vec.reserve(__n); 
# 2999
for (size_t __i = (0); __i < __n; ++__i) 
# 3000
{ 
# 3001
double __den; 
# 3002
__is >> __den; 
# 3003
__den_vec.push_back(__den); 
# 3004
}  
# 3006
(__x.param(typename piecewise_constant_distribution< _RealType> ::param_type((__int_vec.begin()), (__int_vec.end()), __den_vec.begin()))); 
# 3009
(__is.flags(__flags)); 
# 3010
return __is; 
# 3011
} 
# 3014
template< class _RealType> void 
# 3017
piecewise_linear_distribution< _RealType> ::param_type::_M_initialize() 
# 3018
{ 
# 3019
if ((((_M_int).size()) < 2) || ((((_M_int).size()) == 2) && (((_M_int)[0]) == ((_RealType)0)) && (((_M_int)[1]) == ((_RealType)1)) && ((_M_den)[0] == (_M_den)[1]))) 
# 3024
{ 
# 3025
((_M_int).clear()); 
# 3026
(_M_den).clear(); 
# 3027
return; 
# 3028
}  
# 3030
double __sum = (0.0); 
# 3031
(_M_cp).reserve(((_M_int).size()) - 1); 
# 3032
(_M_m).reserve(((_M_int).size()) - 1); 
# 3033
for (size_t __k = (0); __k < (((_M_int).size()) - 1); ++__k) 
# 3034
{ 
# 3035
const _RealType __delta = ((_M_int)[__k + (1)]) - ((_M_int)[__k]); 
# 3036
__sum += (((0.5) * ((_M_den)[__k + (1)] + (_M_den)[__k])) * __delta); 
# 3037
(_M_cp).push_back(__sum); 
# 3038
((_M_m).push_back(((_M_den)[__k + (1)] - (_M_den)[__k]) / __delta)); 
# 3039
}  
# 3042
__detail::__normalize((_M_den).begin(), (_M_den).end(), (_M_den).begin(), __sum); 
# 3045
__detail::__normalize((_M_cp).begin(), (_M_cp).end(), (_M_cp).begin(), __sum); 
# 3047
__detail::__normalize((_M_m).begin(), (_M_m).end(), (_M_m).begin(), __sum); 
# 3050
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 3051
} 
# 3053
template< class _RealType> 
# 3054
template< class _InputIteratorB, class _InputIteratorW> 
# 3056
piecewise_linear_distribution< _RealType> ::param_type::param_type(_InputIteratorB __bbegin, _InputIteratorB 
# 3057
__bend, _InputIteratorW 
# 3058
__wbegin) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3060
{ 
# 3061
for (; __bbegin != __bend; (++__bbegin), (++__wbegin)) 
# 3062
{ 
# 3063
((_M_int).push_back(*__bbegin)); 
# 3064
((_M_den).push_back(*__wbegin)); 
# 3065
}  
# 3067
_M_initialize(); 
# 3068
} 
# 3070
template< class _RealType> 
# 3071
template< class _Func> 
# 3073
piecewise_linear_distribution< _RealType> ::param_type::param_type(initializer_list< _RealType>  __bl, _Func __fw) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3075
{ 
# 3076
((_M_int).reserve((__bl.size()))); 
# 3077
(_M_den).reserve((__bl.size())); 
# 3078
for (auto __biter = (__bl.begin()); __biter != (__bl.end()); ++__biter) 
# 3079
{ 
# 3080
((_M_int).push_back(*__biter)); 
# 3081
((_M_den).push_back(__fw(*__biter))); 
# 3082
}  
# 3084
_M_initialize(); 
# 3085
} 
# 3087
template< class _RealType> 
# 3088
template< class _Func> 
# 3090
piecewise_linear_distribution< _RealType> ::param_type::param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3092
{ 
# 3093
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 3094
const _RealType __delta = (__xmax - __xmin) / __n; 
# 3096
((_M_int).reserve(__n + (1))); 
# 3097
(_M_den).reserve(__n + (1)); 
# 3098
for (size_t __k = (0); __k <= __nw; ++__k) 
# 3099
{ 
# 3100
((_M_int).push_back(__xmin + (__k * __delta))); 
# 3101
((_M_den).push_back(__fw(((_M_int)[__k]) + __delta))); 
# 3102
}  
# 3104
_M_initialize(); 
# 3105
} 
# 3107
template< class _RealType> 
# 3108
template< class _UniformRandomNumberGenerator> typename piecewise_linear_distribution< _RealType> ::result_type 
# 3111
piecewise_linear_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3112
__param) 
# 3113
{ 
# 3115
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 3117
const double __p = __aurng(); 
# 3118
if (((__param._M_cp).empty())) { 
# 3119
return __p; }  
# 3121
auto __pos = std::lower_bound(((__param._M_cp).begin()), ((__param._M_cp).end()), __p); 
# 3123
const size_t __i = __pos - ((__param._M_cp).begin()); 
# 3125
const double __pref = (__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0); 
# 3127
const double __a = (0.5) * ((__param._M_m)[__i]); 
# 3128
const double __b = (__param._M_den)[__i]; 
# 3129
const double __cm = (__p - __pref); 
# 3131
_RealType __x = (__param._M_int)[__i]; 
# 3132
if (__a == (0)) { 
# 3133
__x += (__cm / __b); } else 
# 3135
{ 
# 3136
const double __d = ((__b * __b) + (((4.0) * __a) * __cm)); 
# 3137
__x += (((0.5) * (std::sqrt(__d) - __b)) / __a); 
# 3138
}  
# 3140
return __x; 
# 3141
} 
# 3143
template< class _RealType> 
# 3144
template< class _ForwardIterator, class 
# 3145
_UniformRandomNumberGenerator> void 
# 3148
piecewise_linear_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3149
__urng, const param_type &
# 3150
__param) 
# 3151
{ 
# 3154
while (__f != __t) { 
# 3155
(*(__f++)) = (this->operator()(__urng, __param)); }  
# 3156
} 
# 3158
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 3160
operator<<(basic_ostream< _CharT, _Traits>  &__os, const piecewise_linear_distribution< _RealType>  &
# 3161
__x) 
# 3162
{ 
# 3163
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 3164
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 3166
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__os.flags()); 
# 3167
const _CharT __fill = (__os.fill()); 
# 3168
const streamsize __precision = (__os.precision()); 
# 3169
const _CharT __space = (__os.widen(' ')); 
# 3170
(__os.flags(__ios_base::scientific | __ios_base::left)); 
# 3171
(__os.fill(__space)); 
# 3172
(__os.precision(std::numeric_limits< _RealType> ::max_digits10)); 
# 3174
vector< _RealType>  __int = (__x.intervals()); 
# 3175
__os << ((__int.size()) - 1); 
# 3177
for (auto __xit = (__int.begin()); __xit != (__int.end()); ++__xit) { 
# 3178
(__os << __space) << (*__xit); }  
# 3180
vector< double>  __den = (__x.densities()); 
# 3181
for (auto __dit = __den.begin(); (__dit != (__den.end())); (++__dit)) { 
# 3182
(__os << __space) << (*__dit); }  
# 3184
(__os.flags(__flags)); 
# 3185
(__os.fill(__fill)); 
# 3186
(__os.precision(__precision)); 
# 3187
return __os; 
# 3188
} 
# 3190
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 3192
operator>>(basic_istream< _CharT, _Traits>  &__is, piecewise_linear_distribution< _RealType>  &
# 3193
__x) 
# 3194
{ 
# 3195
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 3196
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 3198
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = (__is.flags()); 
# 3199
(__is.flags(__ios_base::dec | __ios_base::skipws)); 
# 3201
size_t __n; 
# 3202
__is >> __n; 
# 3204
vector< _RealType>  __int_vec; 
# 3205
(__int_vec.reserve(__n + (1))); 
# 3206
for (size_t __i = (0); __i <= __n; ++__i) 
# 3207
{ 
# 3208
_RealType __int; 
# 3209
__is >> __int; 
# 3210
(__int_vec.push_back(__int)); 
# 3211
}  
# 3213
vector< double>  __den_vec; 
# 3214
__den_vec.reserve(__n + (1)); 
# 3215
for (size_t __i = (0); __i <= __n; ++__i) 
# 3216
{ 
# 3217
double __den; 
# 3218
__is >> __den; 
# 3219
__den_vec.push_back(__den); 
# 3220
}  
# 3222
(__x.param(typename piecewise_linear_distribution< _RealType> ::param_type((__int_vec.begin()), (__int_vec.end()), __den_vec.begin()))); 
# 3225
(__is.flags(__flags)); 
# 3226
return __is; 
# 3227
} 
# 3230
template< class _IntType> 
# 3231
seed_seq::seed_seq(initializer_list< _IntType>  __il) 
# 3232
{ 
# 3233
for (auto __iter = (__il.begin()); __iter != (__il.end()); ++__iter) { 
# 3234
((_M_v).push_back(__detail::__mod< result_type, __detail::_Shift< unsigned, 32UL> ::__value> (*__iter))); }  
# 3236
} 
# 3238
template< class _InputIterator> 
# 3239
seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end) 
# 3240
{ 
# 3241
for (_InputIterator __iter = __begin; __iter != __end; ++__iter) { 
# 3242
((_M_v).push_back(__detail::__mod< result_type, __detail::_Shift< unsigned, 32UL> ::__value> (*__iter))); }  
# 3244
} 
# 3246
template< class _RandomAccessIterator> void 
# 3248
seed_seq::generate(_RandomAccessIterator __begin, _RandomAccessIterator 
# 3249
__end) 
# 3250
{ 
# 3252
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _Type; 
# 3254
if (__begin == __end) { 
# 3255
return; }  
# 3257
std::fill(__begin, __end, (_Type)2341178251U); 
# 3259
const size_t __n = __end - __begin; 
# 3260
const size_t __s = (_M_v).size(); 
# 3261
const size_t __t = ((__n >= (623)) ? 11 : ((__n >= (68)) ? 7 : ((__n >= (39)) ? 5 : ((__n >= (7)) ? 3 : ((__n - (1)) / (2)))))); 
# 3266
const size_t __p = ((__n - __t) / (2)); 
# 3267
const size_t __q = (__p + __t); 
# 3268
const size_t __m = std::max((size_t)(__s + (1)), __n); 
# 3270
for (size_t __k = (0); __k < __m; ++__k) 
# 3271
{ 
# 3272
_Type __arg = ((__begin[__k % __n]) ^ (__begin[(__k + __p) % __n])) ^ (__begin[(__k - (1)) % __n]); 
# 3275
_Type __r1 = __arg ^ (__arg >> 27); 
# 3276
__r1 = __detail::__mod< typename iterator_traits< _RandomAccessIterator> ::value_type, __detail::_Shift< typename iterator_traits< _RandomAccessIterator> ::value_type, 32UL> ::__value> (1664525U * __r1); 
# 3278
_Type __r2 = __r1; 
# 3279
if (__k == (0)) { 
# 3280
__r2 += __s; } else { 
# 3281
if (__k <= __s) { 
# 3282
__r2 += ((__k % __n) + ((_M_v)[__k - (1)])); } else { 
# 3284
__r2 += (__k % __n); }  }  
# 3285
__r2 = __detail::__mod< typename iterator_traits< _RandomAccessIterator> ::value_type, __detail::_Shift< typename iterator_traits< _RandomAccessIterator> ::value_type, 32UL> ::__value> (__r2); 
# 3287
(__begin[(__k + __p) % __n]) += __r1; 
# 3288
(__begin[(__k + __q) % __n]) += __r2; 
# 3289
(__begin[__k % __n]) = __r2; 
# 3290
}  
# 3292
for (size_t __k = __m; __k < (__m + __n); ++__k) 
# 3293
{ 
# 3294
_Type __arg = ((__begin[__k % __n]) + (__begin[(__k + __p) % __n])) + (__begin[(__k - (1)) % __n]); 
# 3297
_Type __r3 = __arg ^ (__arg >> 27); 
# 3298
__r3 = __detail::__mod< typename iterator_traits< _RandomAccessIterator> ::value_type, __detail::_Shift< typename iterator_traits< _RandomAccessIterator> ::value_type, 32UL> ::__value> (1566083941U * __r3); 
# 3300
_Type __r4 = __r3 - (__k % __n); 
# 3301
__r4 = __detail::__mod< typename iterator_traits< _RandomAccessIterator> ::value_type, __detail::_Shift< typename iterator_traits< _RandomAccessIterator> ::value_type, 32UL> ::__value> (__r4); 
# 3303
(__begin[(__k + __p) % __n]) ^= __r3; 
# 3304
(__begin[(__k + __q) % __n]) ^= __r4; 
# 3305
(__begin[__k % __n]) = __r4; 
# 3306
}  
# 3307
} 
# 3309
template< class _RealType, size_t __bits, class 
# 3310
_UniformRandomNumberGenerator> _RealType 
# 3312
generate_canonical(_UniformRandomNumberGenerator &__urng) 
# 3313
{ 
# 3314
static_assert((std::is_floating_point< _RealType> ::value), "template argument not a floating point type");
# 3317
const size_t __b = std::min(static_cast< size_t>(std::numeric_limits< _RealType> ::digits), __bits); 
# 3320
const long double __r = ((static_cast< long double>((__urng.max()))) - (static_cast< long double>((__urng.min())))) + (1.0L); 
# 3322
const size_t __log2r = std::log(__r) / std::log((2.0L)); 
# 3323
size_t __k = std::max< size_t> (1UL, ((__b + __log2r) - 1UL) / __log2r); 
# 3324
_RealType __sum = ((_RealType)0); 
# 3325
_RealType __tmp = ((_RealType)1); 
# 3326
for (; __k != (0); --__k) 
# 3327
{ 
# 3328
__sum += (((_RealType)(__urng() - (__urng.min()))) * __tmp); 
# 3329
__tmp *= __r; 
# 3330
}  
# 3331
return __sum / __tmp; 
# 3332
} 
# 3335
}
# 71 "/usr/include/c++/5/bits/stl_algo.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 76
template< class _Iterator, class _Compare> void 
# 78
__move_median_to_first(_Iterator __result, _Iterator __a, _Iterator __b, _Iterator 
# 79
__c, _Compare __comp) 
# 80
{ 
# 81
if (__comp(__a, __b)) 
# 82
{ 
# 83
if (__comp(__b, __c)) { 
# 84
std::iter_swap(__result, __b); } else { 
# 85
if (__comp(__a, __c)) { 
# 86
std::iter_swap(__result, __c); } else { 
# 88
std::iter_swap(__result, __a); }  }  
# 89
} else { 
# 90
if (__comp(__a, __c)) { 
# 91
std::iter_swap(__result, __a); } else { 
# 92
if (__comp(__b, __c)) { 
# 93
std::iter_swap(__result, __c); } else { 
# 95
std::iter_swap(__result, __b); }  }  }  
# 96
} 
# 99
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 101
__find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 102
__pred, input_iterator_tag) 
# 103
{ 
# 104
while ((__first != __last) && (!__pred(__first))) { 
# 105
++__first; }  
# 106
return __first; 
# 107
} 
# 110
template< class _RandomAccessIterator, class _Predicate> _RandomAccessIterator 
# 112
__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate 
# 113
__pred, random_access_iterator_tag) 
# 114
{ 
# 116
typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = (__last - __first) >> 2; 
# 118
for (; __trip_count > 0; --__trip_count) 
# 119
{ 
# 120
if (__pred(__first)) { 
# 121
return __first; }  
# 122
++__first; 
# 124
if (__pred(__first)) { 
# 125
return __first; }  
# 126
++__first; 
# 128
if (__pred(__first)) { 
# 129
return __first; }  
# 130
++__first; 
# 132
if (__pred(__first)) { 
# 133
return __first; }  
# 134
++__first; 
# 135
}  
# 137
switch (__last - __first) 
# 138
{ 
# 139
case 3:  
# 140
if (__pred(__first)) { 
# 141
return __first; }  
# 142
++__first; 
# 143
case 2:  
# 144
if (__pred(__first)) { 
# 145
return __first; }  
# 146
++__first; 
# 147
case 1:  
# 148
if (__pred(__first)) { 
# 149
return __first; }  
# 150
++__first; 
# 151
case 0:  
# 152
default:  
# 153
return __last; 
# 154
}  
# 155
} 
# 157
template< class _Iterator, class _Predicate> inline _Iterator 
# 159
__find_if(_Iterator __first, _Iterator __last, _Predicate __pred) 
# 160
{ 
# 161
return __find_if(__first, __last, __pred, std::__iterator_category(__first)); 
# 163
} 
# 166
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 168
__find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 169
__pred) 
# 170
{ 
# 171
return std::__find_if(__first, __last, __gnu_cxx::__ops::__negate(__pred), std::__iterator_category(__first)); 
# 174
} 
# 179
template< class _InputIterator, class _Predicate, class _Distance> _InputIterator 
# 181
__find_if_not_n(_InputIterator __first, _Distance &__len, _Predicate __pred) 
# 182
{ 
# 183
for (; __len; (--__len), (++__first)) { 
# 184
if (!__pred(__first)) { 
# 185
break; }  }  
# 186
return __first; 
# 187
} 
# 202
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 203
_BinaryPredicate> _ForwardIterator1 
# 205
__search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 206
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 207
__predicate) 
# 208
{ 
# 210
if ((__first1 == __last1) || (__first2 == __last2)) { 
# 211
return __first1; }  
# 214
_ForwardIterator2 __p1(__first2); 
# 215
if ((++__p1) == __last2) { 
# 216
return std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); }  
# 220
_ForwardIterator2 __p; 
# 221
_ForwardIterator1 __current = __first1; 
# 223
for (; ;) 
# 224
{ 
# 225
__first1 = std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2)); 
# 229
if (__first1 == __last1) { 
# 230
return __last1; }  
# 232
__p = __p1; 
# 233
__current = __first1; 
# 234
if ((++__current) == __last1) { 
# 235
return __last1; }  
# 237
while (__predicate(__current, __p)) 
# 238
{ 
# 239
if ((++__p) == __last2) { 
# 240
return __first1; }  
# 241
if ((++__current) == __last1) { 
# 242
return __last1; }  
# 243
}  
# 244
++__first1; 
# 245
}  
# 246
return __first1; 
# 247
} 
# 254
template< class _ForwardIterator, class _Integer, class 
# 255
_UnaryPredicate> _ForwardIterator 
# 257
__search_n_aux(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 258
__count, _UnaryPredicate __unary_pred, forward_iterator_tag) 
# 260
{ 
# 261
__first = std::__find_if(__first, __last, __unary_pred); 
# 262
while (__first != __last) 
# 263
{ 
# 265
typename iterator_traits< _ForwardIterator> ::difference_type __n = __count; 
# 266
_ForwardIterator __i = __first; 
# 267
++__i; 
# 268
while ((__i != __last) && (__n != 1) && __unary_pred(__i)) 
# 269
{ 
# 270
++__i; 
# 271
--__n; 
# 272
}  
# 273
if (__n == 1) { 
# 274
return __first; }  
# 275
if (__i == __last) { 
# 276
return __last; }  
# 277
__first = std::__find_if(++__i, __last, __unary_pred); 
# 278
}  
# 279
return __last; 
# 280
} 
# 286
template< class _RandomAccessIter, class _Integer, class 
# 287
_UnaryPredicate> _RandomAccessIter 
# 289
__search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last, _Integer 
# 290
__count, _UnaryPredicate __unary_pred, random_access_iterator_tag) 
# 292
{ 
# 294
typedef typename iterator_traits< _RandomAccessIter> ::difference_type _DistanceType; 
# 296
_DistanceType __tailSize = __last - __first; 
# 297
_DistanceType __remainder = __count; 
# 299
while (__remainder <= __tailSize) 
# 300
{ 
# 301
__first += __remainder; 
# 302
__tailSize -= __remainder; 
# 305
_RandomAccessIter __backTrack = __first; 
# 306
while (__unary_pred(--__backTrack)) 
# 307
{ 
# 308
if ((--__remainder) == 0) { 
# 309
return __first - __count; }  
# 310
}  
# 311
__remainder = ((__count + 1) - (__first - __backTrack)); 
# 312
}  
# 313
return __last; 
# 314
} 
# 316
template< class _ForwardIterator, class _Integer, class 
# 317
_UnaryPredicate> _ForwardIterator 
# 319
__search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 320
__count, _UnaryPredicate 
# 321
__unary_pred) 
# 322
{ 
# 323
if (__count <= 0) { 
# 324
return __first; }  
# 326
if (__count == 1) { 
# 327
return std::__find_if(__first, __last, __unary_pred); }  
# 329
return std::__search_n_aux(__first, __last, __count, __unary_pred, std::__iterator_category(__first)); 
# 331
} 
# 334
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 335
_BinaryPredicate> _ForwardIterator1 
# 337
__find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 338
__first2, _ForwardIterator2 __last2, forward_iterator_tag, forward_iterator_tag, _BinaryPredicate 
# 340
__comp) 
# 341
{ 
# 342
if (__first2 == __last2) { 
# 343
return __last1; }  
# 345
_ForwardIterator1 __result = __last1; 
# 346
while (1) 
# 347
{ 
# 348
_ForwardIterator1 __new_result = std::__search(__first1, __last1, __first2, __last2, __comp); 
# 350
if (__new_result == __last1) { 
# 351
return __result; } else 
# 353
{ 
# 354
__result = __new_result; 
# 355
__first1 = __new_result; 
# 356
++__first1; 
# 357
}  
# 358
}  
# 359
} 
# 362
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 363
_BinaryPredicate> _BidirectionalIterator1 
# 365
__find_end(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 366
__last1, _BidirectionalIterator2 
# 367
__first2, _BidirectionalIterator2 
# 368
__last2, bidirectional_iterator_tag, bidirectional_iterator_tag, _BinaryPredicate 
# 370
__comp) 
# 371
{ 
# 378
typedef reverse_iterator< _BidirectionalIterator1>  _RevIterator1; 
# 379
typedef reverse_iterator< _BidirectionalIterator2>  _RevIterator2; 
# 381
_RevIterator1 __rlast1(__first1); 
# 382
_RevIterator2 __rlast2(__first2); 
# 383
_RevIterator1 __rresult = std::__search(((_RevIterator1)(__last1)), __rlast1, ((_RevIterator2)(__last2)), __rlast2, __comp); 
# 387
if (__rresult == __rlast1) { 
# 388
return __last1; } else 
# 390
{ 
# 391
_BidirectionalIterator1 __result = (__rresult.base()); 
# 392
std::advance(__result, -std::distance(__first2, __last2)); 
# 393
return __result; 
# 394
}  
# 395
} 
# 423
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 425
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 426
__first2, _ForwardIterator2 __last2) 
# 427
{ 
# 434
; 
# 435
; 
# 437
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 441
} 
# 471
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 472
_BinaryPredicate> inline _ForwardIterator1 
# 474
find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 475
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 476
__comp) 
# 477
{ 
# 484
; 
# 485
; 
# 487
return std::__find_end(__first1, __last1, __first2, __last2, std::__iterator_category(__first1), std::__iterator_category(__first2), __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 491
} 
# 506
template< class _InputIterator, class _Predicate> inline bool 
# 508
all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 509
{ return __last == std::find_if_not(__first, __last, __pred); } 
# 523
template< class _InputIterator, class _Predicate> inline bool 
# 525
none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 526
{ return __last == std::find_if(__first, __last, __pred); } 
# 541
template< class _InputIterator, class _Predicate> inline bool 
# 543
any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 544
{ return !std::none_of(__first, __last, __pred); } 
# 556
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 558
find_if_not(_InputIterator __first, _InputIterator __last, _Predicate 
# 559
__pred) 
# 560
{ 
# 565
; 
# 566
return std::__find_if_not(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 568
} 
# 580
template< class _InputIterator, class _Predicate> inline bool 
# 582
is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate 
# 583
__pred) 
# 584
{ 
# 585
__first = std::find_if_not(__first, __last, __pred); 
# 586
return std::none_of(__first, __last, __pred); 
# 587
} 
# 598
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 600
partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 601
__pred) 
# 602
{ 
# 609
; 
# 612
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 614
_DistanceType __len = std::distance(__first, __last); 
# 615
_DistanceType __half; 
# 616
_ForwardIterator __middle; 
# 618
while (__len > 0) 
# 619
{ 
# 620
__half = (__len >> 1); 
# 621
__middle = __first; 
# 622
std::advance(__middle, __half); 
# 623
if (__pred(*__middle)) 
# 624
{ 
# 625
__first = __middle; 
# 626
++__first; 
# 627
__len = ((__len - __half) - 1); 
# 628
} else { 
# 630
__len = __half; }  
# 631
}  
# 632
return __first; 
# 633
} 
# 636
template< class _InputIterator, class _OutputIterator, class 
# 637
_Predicate> _OutputIterator 
# 639
__remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 640
__result, _Predicate __pred) 
# 641
{ 
# 642
for (; __first != __last; ++__first) { 
# 643
if (!__pred(__first)) 
# 644
{ 
# 645
(*__result) = (*__first); 
# 646
++__result; 
# 647
}  }  
# 648
return __result; 
# 649
} 
# 665
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 667
remove_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 668
__result, const _Tp &__value) 
# 669
{ 
# 676
; 
# 678
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 680
} 
# 697
template< class _InputIterator, class _OutputIterator, class 
# 698
_Predicate> inline _OutputIterator 
# 700
remove_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 701
__result, _Predicate __pred) 
# 702
{ 
# 709
; 
# 711
return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 713
} 
# 731
template< class _InputIterator, class _OutputIterator, class 
# 732
_Predicate> _OutputIterator 
# 734
copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 735
__result, _Predicate __pred) 
# 736
{ 
# 743
; 
# 745
for (; __first != __last; ++__first) { 
# 746
if (__pred(*__first)) 
# 747
{ 
# 748
(*__result) = (*__first); 
# 749
++__result; 
# 750
}  }  
# 751
return __result; 
# 752
} 
# 754
template< class _InputIterator, class _Size, class _OutputIterator> _OutputIterator 
# 756
__copy_n(_InputIterator __first, _Size __n, _OutputIterator 
# 757
__result, input_iterator_tag) 
# 758
{ 
# 759
if (__n > 0) 
# 760
{ 
# 761
while (true) 
# 762
{ 
# 763
(*__result) = (*__first); 
# 764
++__result; 
# 765
if ((--__n) > 0) { 
# 766
++__first; } else { 
# 768
break; }  
# 769
}  
# 770
}  
# 771
return __result; 
# 772
} 
# 774
template< class _RandomAccessIterator, class _Size, class 
# 775
_OutputIterator> inline _OutputIterator 
# 777
__copy_n(_RandomAccessIterator __first, _Size __n, _OutputIterator 
# 778
__result, random_access_iterator_tag) 
# 779
{ return std::copy(__first, __first + __n, __result); } 
# 794
template< class _InputIterator, class _Size, class _OutputIterator> inline _OutputIterator 
# 796
copy_n(_InputIterator __first, _Size __n, _OutputIterator __result) 
# 797
{ 
# 803
return std::__copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 805
} 
# 822
template< class _InputIterator, class _OutputIterator1, class 
# 823
_OutputIterator2, class _Predicate> pair< _OutputIterator1, _OutputIterator2>  
# 825
partition_copy(_InputIterator __first, _InputIterator __last, _OutputIterator1 
# 826
__out_true, _OutputIterator2 __out_false, _Predicate 
# 827
__pred) 
# 828
{ 
# 837
; 
# 839
for (; __first != __last; ++__first) { 
# 840
if (__pred(*__first)) 
# 841
{ 
# 842
(*__out_true) = (*__first); 
# 843
++__out_true; 
# 844
} else 
# 846
{ 
# 847
(*__out_false) = (*__first); 
# 848
++__out_false; 
# 849
}  }  
# 851
return pair< _OutputIterator1, _OutputIterator2> (__out_true, __out_false); 
# 852
} 
# 855
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 857
__remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 858
__pred) 
# 859
{ 
# 860
__first = std::__find_if(__first, __last, __pred); 
# 861
if (__first == __last) { 
# 862
return __first; }  
# 863
_ForwardIterator __result = __first; 
# 864
++__first; 
# 865
for (; __first != __last; ++__first) { 
# 866
if (!__pred(__first)) 
# 867
{ 
# 868
(*__result) = std::move(*__first); 
# 869
++__result; 
# 870
}  }  
# 871
return __result; 
# 872
} 
# 891
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 893
remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 894
__value) 
# 895
{ 
# 901
; 
# 903
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 905
} 
# 924
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 926
remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 927
__pred) 
# 928
{ 
# 934
; 
# 936
return std::__remove_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 938
} 
# 940
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 942
__adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 943
__binary_pred) 
# 944
{ 
# 945
if (__first == __last) { 
# 946
return __last; }  
# 947
_ForwardIterator __next = __first; 
# 948
while ((++__next) != __last) 
# 949
{ 
# 950
if (__binary_pred(__first, __next)) { 
# 951
return __first; }  
# 952
__first = __next; 
# 953
}  
# 954
return __last; 
# 955
} 
# 957
template< class _ForwardIterator, class _BinaryPredicate> _ForwardIterator 
# 959
__unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 960
__binary_pred) 
# 961
{ 
# 963
__first = std::__adjacent_find(__first, __last, __binary_pred); 
# 964
if (__first == __last) { 
# 965
return __last; }  
# 968
_ForwardIterator __dest = __first; 
# 969
++__first; 
# 970
while ((++__first) != __last) { 
# 971
if (!__binary_pred(__dest, __first)) { 
# 972
(*(++__dest)) = std::move(*__first); }  }  
# 973
return ++__dest; 
# 974
} 
# 990
template< class _ForwardIterator> inline _ForwardIterator 
# 992
unique(_ForwardIterator __first, _ForwardIterator __last) 
# 993
{ 
# 999
; 
# 1001
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1003
} 
# 1020
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 1022
unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 1023
__binary_pred) 
# 1024
{ 
# 1031
; 
# 1033
return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1035
} 
# 1043
template< class _ForwardIterator, class _OutputIterator, class 
# 1044
_BinaryPredicate> _OutputIterator 
# 1046
__unique_copy(_ForwardIterator __first, _ForwardIterator __last, _OutputIterator 
# 1047
__result, _BinaryPredicate __binary_pred, forward_iterator_tag, output_iterator_tag) 
# 1049
{ 
# 1055
_ForwardIterator __next = __first; 
# 1056
(*__result) = (*__first); 
# 1057
while ((++__next) != __last) { 
# 1058
if (!__binary_pred(__first, __next)) 
# 1059
{ 
# 1060
__first = __next; 
# 1061
(*(++__result)) = (*__first); 
# 1062
}  }  
# 1063
return ++__result; 
# 1064
} 
# 1072
template< class _InputIterator, class _OutputIterator, class 
# 1073
_BinaryPredicate> _OutputIterator 
# 1075
__unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 1076
__result, _BinaryPredicate __binary_pred, input_iterator_tag, output_iterator_tag) 
# 1078
{ 
# 1084
typename iterator_traits< _InputIterator> ::value_type __value = *__first; 
# 1086
__decltype((__gnu_cxx::__ops::__iter_comp_val(__binary_pred))) __rebound_pred = __gnu_cxx::__ops::__iter_comp_val(__binary_pred); 
# 1088
(*__result) = __value; 
# 1089
while ((++__first) != __last) { 
# 1090
if (!__rebound_pred(__first, __value)) 
# 1091
{ 
# 1092
__value = (*__first); 
# 1093
(*(++__result)) = __value; 
# 1094
}  }  
# 1095
return ++__result; 
# 1096
} 
# 1104
template< class _InputIterator, class _ForwardIterator, class 
# 1105
_BinaryPredicate> _ForwardIterator 
# 1107
__unique_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1108
__result, _BinaryPredicate __binary_pred, input_iterator_tag, forward_iterator_tag) 
# 1110
{ 
# 1115
(*__result) = (*__first); 
# 1116
while ((++__first) != __last) { 
# 1117
if (!__binary_pred(__result, __first)) { 
# 1118
(*(++__result)) = (*__first); }  }  
# 1119
return ++__result; 
# 1120
} 
# 1127
template< class _BidirectionalIterator> void 
# 1129
__reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag) 
# 1131
{ 
# 1132
while (true) { 
# 1133
if ((__first == __last) || (__first == (--__last))) { 
# 1134
return; } else 
# 1136
{ 
# 1137
std::iter_swap(__first, __last); 
# 1138
++__first; 
# 1139
}  }  
# 1140
} 
# 1147
template< class _RandomAccessIterator> void 
# 1149
__reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 1151
{ 
# 1152
if (__first == __last) { 
# 1153
return; }  
# 1154
--__last; 
# 1155
while (__first < __last) 
# 1156
{ 
# 1157
std::iter_swap(__first, __last); 
# 1158
++__first; 
# 1159
--__last; 
# 1160
}  
# 1161
} 
# 1175
template< class _BidirectionalIterator> inline void 
# 1177
reverse(_BidirectionalIterator __first, _BidirectionalIterator __last) 
# 1178
{ 
# 1182
; 
# 1183
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 1184
} 
# 1202
template< class _BidirectionalIterator, class _OutputIterator> _OutputIterator 
# 1204
reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator 
# 1205
__result) 
# 1206
{ 
# 1212
; 
# 1214
while (__first != __last) 
# 1215
{ 
# 1216
--__last; 
# 1217
(*__result) = (*__last); 
# 1218
++__result; 
# 1219
}  
# 1220
return __result; 
# 1221
} 
# 1227
template< class _EuclideanRingElement> _EuclideanRingElement 
# 1229
__gcd(_EuclideanRingElement __m, _EuclideanRingElement __n) 
# 1230
{ 
# 1231
while (__n != 0) 
# 1232
{ 
# 1233
_EuclideanRingElement __t = __m % __n; 
# 1234
__m = __n; 
# 1235
__n = __t; 
# 1236
}  
# 1237
return __m; 
# 1238
} 
# 1240
inline namespace _V2 { 
# 1244
template< class _ForwardIterator> _ForwardIterator 
# 1246
__rotate(_ForwardIterator __first, _ForwardIterator 
# 1247
__middle, _ForwardIterator 
# 1248
__last, forward_iterator_tag) 
# 1250
{ 
# 1251
if (__first == __middle) { 
# 1252
return __last; } else { 
# 1253
if (__last == __middle) { 
# 1254
return __first; }  }  
# 1256
_ForwardIterator __first2 = __middle; 
# 1257
do 
# 1258
{ 
# 1259
std::iter_swap(__first, __first2); 
# 1260
++__first; 
# 1261
++__first2; 
# 1262
if (__first == __middle) { 
# 1263
__middle = __first2; }  
# 1264
} 
# 1265
while (__first2 != __last); 
# 1267
_ForwardIterator __ret = __first; 
# 1269
__first2 = __middle; 
# 1271
while (__first2 != __last) 
# 1272
{ 
# 1273
std::iter_swap(__first, __first2); 
# 1274
++__first; 
# 1275
++__first2; 
# 1276
if (__first == __middle) { 
# 1277
__middle = __first2; } else { 
# 1278
if (__first2 == __last) { 
# 1279
__first2 = __middle; }  }  
# 1280
}  
# 1281
return __ret; 
# 1282
} 
# 1285
template< class _BidirectionalIterator> _BidirectionalIterator 
# 1287
__rotate(_BidirectionalIterator __first, _BidirectionalIterator 
# 1288
__middle, _BidirectionalIterator 
# 1289
__last, bidirectional_iterator_tag) 
# 1291
{ 
# 1296
if (__first == __middle) { 
# 1297
return __last; } else { 
# 1298
if (__last == __middle) { 
# 1299
return __first; }  }  
# 1301
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1302
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1304
while ((__first != __middle) && (__middle != __last)) 
# 1305
{ 
# 1306
std::iter_swap(__first, --__last); 
# 1307
++__first; 
# 1308
}  
# 1310
if (__first == __middle) 
# 1311
{ 
# 1312
std::__reverse(__middle, __last, bidirectional_iterator_tag()); 
# 1313
return __last; 
# 1314
} else 
# 1316
{ 
# 1317
std::__reverse(__first, __middle, bidirectional_iterator_tag()); 
# 1318
return __first; 
# 1319
}  
# 1320
} 
# 1323
template< class _RandomAccessIterator> _RandomAccessIterator 
# 1325
__rotate(_RandomAccessIterator __first, _RandomAccessIterator 
# 1326
__middle, _RandomAccessIterator 
# 1327
__last, random_access_iterator_tag) 
# 1329
{ 
# 1334
if (__first == __middle) { 
# 1335
return __last; } else { 
# 1336
if (__last == __middle) { 
# 1337
return __first; }  }  
# 1340
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 1342
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 1344
_Distance __n = __last - __first; 
# 1345
_Distance __k = __middle - __first; 
# 1347
if (__k == (__n - __k)) 
# 1348
{ 
# 1349
std::swap_ranges(__first, __middle, __middle); 
# 1350
return __middle; 
# 1351
}  
# 1353
_RandomAccessIterator __p = __first; 
# 1354
_RandomAccessIterator __ret = __first + (__last - __middle); 
# 1356
for (; ;) 
# 1357
{ 
# 1358
if (__k < (__n - __k)) 
# 1359
{ 
# 1360
if (__is_pod(_ValueType) && (__k == 1)) 
# 1361
{ 
# 1362
_ValueType __t = std::move(*__p); 
# 1363
std::move(__p + 1, __p + __n, __p); 
# 1364
(*((__p + __n) - 1)) = std::move(__t); 
# 1365
return __ret; 
# 1366
}  
# 1367
_RandomAccessIterator __q = __p + __k; 
# 1368
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1369
{ 
# 1370
std::iter_swap(__p, __q); 
# 1371
++__p; 
# 1372
++__q; 
# 1373
}  
# 1374
__n %= __k; 
# 1375
if (__n == 0) { 
# 1376
return __ret; }  
# 1377
std::swap(__n, __k); 
# 1378
__k = (__n - __k); 
# 1379
} else 
# 1381
{ 
# 1382
__k = (__n - __k); 
# 1383
if (__is_pod(_ValueType) && (__k == 1)) 
# 1384
{ 
# 1385
_ValueType __t = std::move(*((__p + __n) - 1)); 
# 1386
std::move_backward(__p, (__p + __n) - 1, __p + __n); 
# 1387
(*__p) = std::move(__t); 
# 1388
return __ret; 
# 1389
}  
# 1390
_RandomAccessIterator __q = __p + __n; 
# 1391
__p = (__q - __k); 
# 1392
for (_Distance __i = (0); __i < (__n - __k); ++__i) 
# 1393
{ 
# 1394
--__p; 
# 1395
--__q; 
# 1396
std::iter_swap(__p, __q); 
# 1397
}  
# 1398
__n %= __k; 
# 1399
if (__n == 0) { 
# 1400
return __ret; }  
# 1401
std::swap(__n, __k); 
# 1402
}  
# 1403
}  
# 1404
} 
# 1429
template< class _ForwardIterator> inline _ForwardIterator 
# 1431
rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1432
__last) 
# 1433
{ 
# 1437
; 
# 1438
; 
# 1440
return std::__rotate(__first, __middle, __last, std::__iterator_category(__first)); 
# 1442
} 
# 1444
}
# 1466
template< class _ForwardIterator, class _OutputIterator> inline _OutputIterator 
# 1468
rotate_copy(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator 
# 1469
__last, _OutputIterator __result) 
# 1470
{ 
# 1475
; 
# 1476
; 
# 1478
return std::copy(__first, __middle, std::copy(__middle, __last, __result)); 
# 1480
} 
# 1483
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1485
__partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1486
__pred, forward_iterator_tag) 
# 1487
{ 
# 1488
if (__first == __last) { 
# 1489
return __first; }  
# 1491
while (__pred(*__first)) { 
# 1492
if ((++__first) == __last) { 
# 1493
return __first; }  }  
# 1495
_ForwardIterator __next = __first; 
# 1497
while ((++__next) != __last) { 
# 1498
if (__pred(*__next)) 
# 1499
{ 
# 1500
std::iter_swap(__first, __next); 
# 1501
++__first; 
# 1502
}  }  
# 1504
return __first; 
# 1505
} 
# 1508
template< class _BidirectionalIterator, class _Predicate> _BidirectionalIterator 
# 1510
__partition(_BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate 
# 1511
__pred, bidirectional_iterator_tag) 
# 1512
{ 
# 1513
while (true) 
# 1514
{ 
# 1515
while (true) { 
# 1516
if (__first == __last) { 
# 1517
return __first; } else { 
# 1518
if (__pred(*__first)) { 
# 1519
++__first; } else { 
# 1521
break; }  }  }  
# 1522
--__last; 
# 1523
while (true) { 
# 1524
if (__first == __last) { 
# 1525
return __first; } else { 
# 1526
if (!((bool)__pred(*__last))) { 
# 1527
--__last; } else { 
# 1529
break; }  }  }  
# 1530
std::iter_swap(__first, __last); 
# 1531
++__first; 
# 1532
}  
# 1533
} 
# 1543
template< class _ForwardIterator, class _Pointer, class _Predicate, class 
# 1544
_Distance> _ForwardIterator 
# 1546
__stable_partition_adaptive(_ForwardIterator __first, _ForwardIterator 
# 1547
__last, _Predicate 
# 1548
__pred, _Distance __len, _Pointer 
# 1549
__buffer, _Distance 
# 1550
__buffer_size) 
# 1551
{ 
# 1552
if (__len == 1) { 
# 1553
return __first; }  
# 1555
if (__len <= __buffer_size) 
# 1556
{ 
# 1557
_ForwardIterator __result1 = __first; 
# 1558
_Pointer __result2 = __buffer; 
# 1563
(*__result2) = std::move(*__first); 
# 1564
++__result2; 
# 1565
++__first; 
# 1566
for (; __first != __last; ++__first) { 
# 1567
if (__pred(__first)) 
# 1568
{ 
# 1569
(*__result1) = std::move(*__first); 
# 1570
++__result1; 
# 1571
} else 
# 1573
{ 
# 1574
(*__result2) = std::move(*__first); 
# 1575
++__result2; 
# 1576
}  }  
# 1578
std::move(__buffer, __result2, __result1); 
# 1579
return __result1; 
# 1580
}  
# 1582
_ForwardIterator __middle = __first; 
# 1583
std::advance(__middle, __len / 2); 
# 1584
_ForwardIterator __left_split = std::__stable_partition_adaptive(__first, __middle, __pred, __len / 2, __buffer, __buffer_size); 
# 1591
_Distance __right_len = __len - (__len / 2); 
# 1592
_ForwardIterator __right_split = std::__find_if_not_n(__middle, __right_len, __pred); 
# 1595
if (__right_len) { 
# 1596
__right_split = std::__stable_partition_adaptive(__right_split, __last, __pred, __right_len, __buffer, __buffer_size); }  
# 1601
std::rotate(__left_split, __middle, __right_split); 
# 1602
std::advance(__left_split, std::distance(__middle, __right_split)); 
# 1603
return __left_split; 
# 1604
} 
# 1606
template< class _ForwardIterator, class _Predicate> _ForwardIterator 
# 1608
__stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1609
__pred) 
# 1610
{ 
# 1611
__first = std::__find_if_not(__first, __last, __pred); 
# 1613
if (__first == __last) { 
# 1614
return __first; }  
# 1617
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 1619
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 1621
_Temporary_buffer< _ForwardIterator, typename iterator_traits< _ForwardIterator> ::value_type>  __buf(__first, __last); 
# 1622
return std::__stable_partition_adaptive(__first, __last, __pred, (_DistanceType)(__buf.requested_size()), (__buf.begin()), (_DistanceType)(__buf.size())); 
# 1627
} 
# 1646
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 1648
stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 1649
__pred) 
# 1650
{ 
# 1656
; 
# 1658
return std::__stable_partition(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 1660
} 
# 1663
template< class _RandomAccessIterator, class _Compare> void 
# 1665
__heap_select(_RandomAccessIterator __first, _RandomAccessIterator 
# 1666
__middle, _RandomAccessIterator 
# 1667
__last, _Compare __comp) 
# 1668
{ 
# 1669
std::__make_heap(__first, __middle, __comp); 
# 1670
for (_RandomAccessIterator __i = __middle; __i < __last; ++__i) { 
# 1671
if (__comp(__i, __first)) { 
# 1672
std::__pop_heap(__first, __middle, __i, __comp); }  }  
# 1673
} 
# 1677
template< class _InputIterator, class _RandomAccessIterator, class 
# 1678
_Compare> _RandomAccessIterator 
# 1680
__partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1681
__result_first, _RandomAccessIterator 
# 1682
__result_last, _Compare 
# 1683
__comp) 
# 1684
{ 
# 1686
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType; 
# 1687
typedef iterator_traits< _RandomAccessIterator>  _RItTraits; 
# 1688
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 1690
if (__result_first == __result_last) { 
# 1691
return __result_last; }  
# 1692
_RandomAccessIterator __result_real_last = __result_first; 
# 1693
while ((__first != __last) && (__result_real_last != __result_last)) 
# 1694
{ 
# 1695
(*__result_real_last) = (*__first); 
# 1696
++__result_real_last; 
# 1697
++__first; 
# 1698
}  
# 1700
std::__make_heap(__result_first, __result_real_last, __comp); 
# 1701
while (__first != __last) 
# 1702
{ 
# 1703
if (__comp(__first, __result_first)) { 
# 1704
std::__adjust_heap(__result_first, (_DistanceType)0, (_DistanceType)(__result_real_last - __result_first), (_InputValueType)(*__first), __comp); }  
# 1708
++__first; 
# 1709
}  
# 1710
std::__sort_heap(__result_first, __result_real_last, __comp); 
# 1711
return __result_real_last; 
# 1712
} 
# 1732
template< class _InputIterator, class _RandomAccessIterator> inline _RandomAccessIterator 
# 1734
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1735
__result_first, _RandomAccessIterator 
# 1736
__result_last) 
# 1737
{ 
# 1739
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType; 
# 1741
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _OutputValueType; 
# 1743
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 1752
; 
# 1753
; 
# 1755
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_less_iter()); 
# 1758
} 
# 1780
template< class _InputIterator, class _RandomAccessIterator, class 
# 1781
_Compare> inline _RandomAccessIterator 
# 1783
partial_sort_copy(_InputIterator __first, _InputIterator __last, _RandomAccessIterator 
# 1784
__result_first, _RandomAccessIterator 
# 1785
__result_last, _Compare 
# 1786
__comp) 
# 1787
{ 
# 1789
typedef typename iterator_traits< _InputIterator> ::value_type _InputValueType; 
# 1791
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _OutputValueType; 
# 1793
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 1805
; 
# 1806
; 
# 1808
return std::__partial_sort_copy(__first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1811
} 
# 1814
template< class _RandomAccessIterator, class _Compare> void 
# 1816
__unguarded_linear_insert(_RandomAccessIterator __last, _Compare 
# 1817
__comp) 
# 1818
{ 
# 1820
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__last); 
# 1821
_RandomAccessIterator __next = __last; 
# 1822
--__next; 
# 1823
while (__comp(__val, __next)) 
# 1824
{ 
# 1825
(*__last) = std::move(*__next); 
# 1826
__last = __next; 
# 1827
--__next; 
# 1828
}  
# 1829
(*__last) = std::move(__val); 
# 1830
} 
# 1833
template< class _RandomAccessIterator, class _Compare> void 
# 1835
__insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1836
__last, _Compare __comp) 
# 1837
{ 
# 1838
if (__first == __last) { return; }  
# 1840
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 1841
{ 
# 1842
if (__comp(__i, __first)) 
# 1843
{ 
# 1845
typename iterator_traits< _RandomAccessIterator> ::value_type __val = std::move(*__i); 
# 1846
std::move_backward(__first, __i, __i + 1); 
# 1847
(*__first) = std::move(__val); 
# 1848
} else { 
# 1850
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1852
}  
# 1853
} 
# 1856
template< class _RandomAccessIterator, class _Compare> inline void 
# 1858
__unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1859
__last, _Compare __comp) 
# 1860
{ 
# 1861
for (_RandomAccessIterator __i = __first; __i != __last; ++__i) { 
# 1862
std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp)); }  
# 1864
} 
# 1870
enum { _S_threshold = 16}; 
# 1873
template< class _RandomAccessIterator, class _Compare> void 
# 1875
__final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1876
__last, _Compare __comp) 
# 1877
{ 
# 1878
if ((__last - __first) > ((int)_S_threshold)) 
# 1879
{ 
# 1880
std::__insertion_sort(__first, __first + ((int)_S_threshold), __comp); 
# 1881
std::__unguarded_insertion_sort(__first + ((int)_S_threshold), __last, __comp); 
# 1883
} else { 
# 1885
std::__insertion_sort(__first, __last, __comp); }  
# 1886
} 
# 1889
template< class _RandomAccessIterator, class _Compare> _RandomAccessIterator 
# 1891
__unguarded_partition(_RandomAccessIterator __first, _RandomAccessIterator 
# 1892
__last, _RandomAccessIterator 
# 1893
__pivot, _Compare __comp) 
# 1894
{ 
# 1895
while (true) 
# 1896
{ 
# 1897
while (__comp(__first, __pivot)) { 
# 1898
++__first; }  
# 1899
--__last; 
# 1900
while (__comp(__pivot, __last)) { 
# 1901
--__last; }  
# 1902
if (!(__first < __last)) { 
# 1903
return __first; }  
# 1904
std::iter_swap(__first, __last); 
# 1905
++__first; 
# 1906
}  
# 1907
} 
# 1910
template< class _RandomAccessIterator, class _Compare> inline _RandomAccessIterator 
# 1912
__unguarded_partition_pivot(_RandomAccessIterator __first, _RandomAccessIterator 
# 1913
__last, _Compare __comp) 
# 1914
{ 
# 1915
_RandomAccessIterator __mid = __first + ((__last - __first) / 2); 
# 1916
std::__move_median_to_first(__first, __first + 1, __mid, __last - 1, __comp); 
# 1918
return std::__unguarded_partition(__first + 1, __last, __first, __comp); 
# 1919
} 
# 1921
template< class _RandomAccessIterator, class _Compare> inline void 
# 1923
__partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 1924
__middle, _RandomAccessIterator 
# 1925
__last, _Compare 
# 1926
__comp) 
# 1927
{ 
# 1928
std::__heap_select(__first, __middle, __last, __comp); 
# 1929
std::__sort_heap(__first, __middle, __comp); 
# 1930
} 
# 1933
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1935
__introsort_loop(_RandomAccessIterator __first, _RandomAccessIterator 
# 1936
__last, _Size 
# 1937
__depth_limit, _Compare __comp) 
# 1938
{ 
# 1939
while ((__last - __first) > ((int)_S_threshold)) 
# 1940
{ 
# 1941
if (__depth_limit == 0) 
# 1942
{ 
# 1943
std::__partial_sort(__first, __last, __last, __comp); 
# 1944
return; 
# 1945
}  
# 1946
--__depth_limit; 
# 1947
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1949
std::__introsort_loop(__cut, __last, __depth_limit, __comp); 
# 1950
__last = __cut; 
# 1951
}  
# 1952
} 
# 1956
template< class _RandomAccessIterator, class _Compare> inline void 
# 1958
__sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 1959
__comp) 
# 1960
{ 
# 1961
if (__first != __last) 
# 1962
{ 
# 1963
std::__introsort_loop(__first, __last, std::__lg(__last - __first) * 2, __comp); 
# 1966
std::__final_insertion_sort(__first, __last, __comp); 
# 1967
}  
# 1968
} 
# 1970
template< class _RandomAccessIterator, class _Size, class _Compare> void 
# 1972
__introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 1973
__last, _Size __depth_limit, _Compare 
# 1974
__comp) 
# 1975
{ 
# 1976
while ((__last - __first) > 3) 
# 1977
{ 
# 1978
if (__depth_limit == 0) 
# 1979
{ 
# 1980
std::__heap_select(__first, __nth + 1, __last, __comp); 
# 1982
std::iter_swap(__first, __nth); 
# 1983
return; 
# 1984
}  
# 1985
--__depth_limit; 
# 1986
_RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp); 
# 1988
if (__cut <= __nth) { 
# 1989
__first = __cut; } else { 
# 1991
__last = __cut; }  
# 1992
}  
# 1993
std::__insertion_sort(__first, __last, __comp); 
# 1994
} 
# 2016
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2018
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2019
__val, _Compare __comp) 
# 2020
{ 
# 2022
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 2029
; 
# 2031
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2033
} 
# 2035
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 2037
__upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2038
__val, _Compare __comp) 
# 2039
{ 
# 2041
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2043
_DistanceType __len = std::distance(__first, __last); 
# 2045
while (__len > 0) 
# 2046
{ 
# 2047
_DistanceType __half = __len >> 1; 
# 2048
_ForwardIterator __middle = __first; 
# 2049
std::advance(__middle, __half); 
# 2050
if (__comp(__val, __middle)) { 
# 2051
__len = __half; } else 
# 2053
{ 
# 2054
__first = __middle; 
# 2055
++__first; 
# 2056
__len = ((__len - __half) - 1); 
# 2057
}  
# 2058
}  
# 2059
return __first; 
# 2060
} 
# 2073
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 2075
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2076
__val) 
# 2077
{ 
# 2079
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 2084
; 
# 2086
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_less_iter()); 
# 2088
} 
# 2105
template< class _ForwardIterator, class _Tp, class _Compare> inline _ForwardIterator 
# 2107
upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2108
__val, _Compare __comp) 
# 2109
{ 
# 2111
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 2118
; 
# 2120
return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2122
} 
# 2124
template< class _ForwardIterator, class _Tp, class 
# 2125
_CompareItTp, class _CompareTpIt> pair< _ForwardIterator, _ForwardIterator>  
# 2127
__equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2128
__val, _CompareItTp 
# 2129
__comp_it_val, _CompareTpIt __comp_val_it) 
# 2130
{ 
# 2132
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 2134
_DistanceType __len = std::distance(__first, __last); 
# 2136
while (__len > 0) 
# 2137
{ 
# 2138
_DistanceType __half = __len >> 1; 
# 2139
_ForwardIterator __middle = __first; 
# 2140
std::advance(__middle, __half); 
# 2141
if (__comp_it_val(__middle, __val)) 
# 2142
{ 
# 2143
__first = __middle; 
# 2144
++__first; 
# 2145
__len = ((__len - __half) - 1); 
# 2146
} else { 
# 2147
if (__comp_val_it(__val, __middle)) { 
# 2148
__len = __half; } else 
# 2150
{ 
# 2151
_ForwardIterator __left = std::__lower_bound(__first, __middle, __val, __comp_it_val); 
# 2153
std::advance(__first, __len); 
# 2154
_ForwardIterator __right = std::__upper_bound(++__middle, __first, __val, __comp_val_it); 
# 2156
return pair< _ForwardIterator, _ForwardIterator> (__left, __right); 
# 2157
}  }  
# 2158
}  
# 2159
return pair< _ForwardIterator, _ForwardIterator> (__first, __first); 
# 2160
} 
# 2179
template< class _ForwardIterator, class _Tp> inline pair< _ForwardIterator, _ForwardIterator>  
# 2181
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2182
__val) 
# 2183
{ 
# 2185
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 2191
; 
# 2192
; 
# 2194
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val(), __gnu_cxx::__ops::__val_less_iter()); 
# 2197
} 
# 2216
template< class _ForwardIterator, class _Tp, class _Compare> inline pair< _ForwardIterator, _ForwardIterator>  
# 2218
equal_range(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2219
__val, _Compare __comp) 
# 2220
{ 
# 2222
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 2231
; 
# 2233
; 
# 2235
return std::__equal_range(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp), __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2238
} 
# 2252
template< class _ForwardIterator, class _Tp> bool 
# 2254
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2255
__val) 
# 2256
{ 
# 2258
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 2263
; 
# 2264
; 
# 2266
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 2269
return (__i != __last) && (!(__val < (*__i))); 
# 2270
} 
# 2287
template< class _ForwardIterator, class _Tp, class _Compare> bool 
# 2289
binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 2290
__val, _Compare __comp) 
# 2291
{ 
# 2293
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 2300
; 
# 2302
; 
# 2304
_ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2307
return (__i != __last) && (!((bool)__comp(__val, *__i))); 
# 2308
} 
# 2313
template< class _InputIterator1, class _InputIterator2, class 
# 2314
_OutputIterator, class _Compare> void 
# 2316
__move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2317
__first2, _InputIterator2 __last2, _OutputIterator 
# 2318
__result, _Compare __comp) 
# 2319
{ 
# 2320
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2321
{ 
# 2322
if (__comp(__first2, __first1)) 
# 2323
{ 
# 2324
(*__result) = std::move(*__first2); 
# 2325
++__first2; 
# 2326
} else 
# 2328
{ 
# 2329
(*__result) = std::move(*__first1); 
# 2330
++__first1; 
# 2331
}  
# 2332
++__result; 
# 2333
}  
# 2334
if (__first1 != __last1) { 
# 2335
std::move(__first1, __last1, __result); }  
# 2336
} 
# 2339
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2340
_BidirectionalIterator3, class _Compare> void 
# 2342
__move_merge_adaptive_backward(_BidirectionalIterator1 __first1, _BidirectionalIterator1 
# 2343
__last1, _BidirectionalIterator2 
# 2344
__first2, _BidirectionalIterator2 
# 2345
__last2, _BidirectionalIterator3 
# 2346
__result, _Compare 
# 2347
__comp) 
# 2348
{ 
# 2349
if (__first1 == __last1) 
# 2350
{ 
# 2351
std::move_backward(__first2, __last2, __result); 
# 2352
return; 
# 2353
} else { 
# 2354
if (__first2 == __last2) { 
# 2355
return; }  }  
# 2357
--__last1; 
# 2358
--__last2; 
# 2359
while (true) 
# 2360
{ 
# 2361
if (__comp(__last2, __last1)) 
# 2362
{ 
# 2363
(*(--__result)) = std::move(*__last1); 
# 2364
if (__first1 == __last1) 
# 2365
{ 
# 2366
std::move_backward(__first2, ++__last2, __result); 
# 2367
return; 
# 2368
}  
# 2369
--__last1; 
# 2370
} else 
# 2372
{ 
# 2373
(*(--__result)) = std::move(*__last2); 
# 2374
if (__first2 == __last2) { 
# 2375
return; }  
# 2376
--__last2; 
# 2377
}  
# 2378
}  
# 2379
} 
# 2382
template< class _BidirectionalIterator1, class _BidirectionalIterator2, class 
# 2383
_Distance> _BidirectionalIterator1 
# 2385
__rotate_adaptive(_BidirectionalIterator1 __first, _BidirectionalIterator1 
# 2386
__middle, _BidirectionalIterator1 
# 2387
__last, _Distance 
# 2388
__len1, _Distance __len2, _BidirectionalIterator2 
# 2389
__buffer, _Distance 
# 2390
__buffer_size) 
# 2391
{ 
# 2392
_BidirectionalIterator2 __buffer_end; 
# 2393
if ((__len1 > __len2) && (__len2 <= __buffer_size)) 
# 2394
{ 
# 2395
if (__len2) 
# 2396
{ 
# 2397
__buffer_end = std::move(__middle, __last, __buffer); 
# 2398
std::move_backward(__first, __middle, __last); 
# 2399
return std::move(__buffer, __buffer_end, __first); 
# 2400
} else { 
# 2402
return __first; }  
# 2403
} else { 
# 2404
if (__len1 <= __buffer_size) 
# 2405
{ 
# 2406
if (__len1) 
# 2407
{ 
# 2408
__buffer_end = std::move(__first, __middle, __buffer); 
# 2409
std::move(__middle, __last, __first); 
# 2410
return std::move_backward(__buffer, __buffer_end, __last); 
# 2411
} else { 
# 2413
return __last; }  
# 2414
} else 
# 2416
{ 
# 2417
std::rotate(__first, __middle, __last); 
# 2418
std::advance(__first, std::distance(__middle, __last)); 
# 2419
return __first; 
# 2420
}  }  
# 2421
} 
# 2424
template< class _BidirectionalIterator, class _Distance, class 
# 2425
_Pointer, class _Compare> void 
# 2427
__merge_adaptive(_BidirectionalIterator __first, _BidirectionalIterator 
# 2428
__middle, _BidirectionalIterator 
# 2429
__last, _Distance 
# 2430
__len1, _Distance __len2, _Pointer 
# 2431
__buffer, _Distance __buffer_size, _Compare 
# 2432
__comp) 
# 2433
{ 
# 2434
if ((__len1 <= __len2) && (__len1 <= __buffer_size)) 
# 2435
{ 
# 2436
_Pointer __buffer_end = std::move(__first, __middle, __buffer); 
# 2437
std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last, __first, __comp); 
# 2439
} else { 
# 2440
if (__len2 <= __buffer_size) 
# 2441
{ 
# 2442
_Pointer __buffer_end = std::move(__middle, __last, __buffer); 
# 2443
std::__move_merge_adaptive_backward(__first, __middle, __buffer, __buffer_end, __last, __comp); 
# 2445
} else 
# 2447
{ 
# 2448
_BidirectionalIterator __first_cut = __first; 
# 2449
_BidirectionalIterator __second_cut = __middle; 
# 2450
_Distance __len11 = (0); 
# 2451
_Distance __len22 = (0); 
# 2452
if (__len1 > __len2) 
# 2453
{ 
# 2454
__len11 = (__len1 / 2); 
# 2455
std::advance(__first_cut, __len11); 
# 2456
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2459
__len22 = std::distance(__middle, __second_cut); 
# 2460
} else 
# 2462
{ 
# 2463
__len22 = (__len2 / 2); 
# 2464
std::advance(__second_cut, __len22); 
# 2465
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2468
__len11 = std::distance(__first, __first_cut); 
# 2469
}  
# 2471
_BidirectionalIterator __new_middle = std::__rotate_adaptive(__first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size); 
# 2475
std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size, __comp); 
# 2477
std::__merge_adaptive(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size, __comp); 
# 2481
}  }  
# 2482
} 
# 2485
template< class _BidirectionalIterator, class _Distance, class 
# 2486
_Compare> void 
# 2488
__merge_without_buffer(_BidirectionalIterator __first, _BidirectionalIterator 
# 2489
__middle, _BidirectionalIterator 
# 2490
__last, _Distance 
# 2491
__len1, _Distance __len2, _Compare 
# 2492
__comp) 
# 2493
{ 
# 2494
if ((__len1 == 0) || (__len2 == 0)) { 
# 2495
return; }  
# 2497
if ((__len1 + __len2) == 2) 
# 2498
{ 
# 2499
if (__comp(__middle, __first)) { 
# 2500
std::iter_swap(__first, __middle); }  
# 2501
return; 
# 2502
}  
# 2504
_BidirectionalIterator __first_cut = __first; 
# 2505
_BidirectionalIterator __second_cut = __middle; 
# 2506
_Distance __len11 = (0); 
# 2507
_Distance __len22 = (0); 
# 2508
if (__len1 > __len2) 
# 2509
{ 
# 2510
__len11 = (__len1 / 2); 
# 2511
std::advance(__first_cut, __len11); 
# 2512
__second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp)); 
# 2515
__len22 = std::distance(__middle, __second_cut); 
# 2516
} else 
# 2518
{ 
# 2519
__len22 = (__len2 / 2); 
# 2520
std::advance(__second_cut, __len22); 
# 2521
__first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp)); 
# 2524
__len11 = std::distance(__first, __first_cut); 
# 2525
}  
# 2527
std::rotate(__first_cut, __middle, __second_cut); 
# 2528
_BidirectionalIterator __new_middle = __first_cut; 
# 2529
std::advance(__new_middle, std::distance(__middle, __second_cut)); 
# 2530
std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22, __comp); 
# 2532
std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __comp); 
# 2534
} 
# 2536
template< class _BidirectionalIterator, class _Compare> void 
# 2538
__inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2539
__middle, _BidirectionalIterator 
# 2540
__last, _Compare 
# 2541
__comp) 
# 2542
{ 
# 2544
typedef typename iterator_traits< _BidirectionalIterator> ::value_type _ValueType; 
# 2546
typedef typename iterator_traits< _BidirectionalIterator> ::difference_type _DistanceType; 
# 2548
if ((__first == __middle) || (__middle == __last)) { 
# 2549
return; }  
# 2551
const _DistanceType __len1 = std::distance(__first, __middle); 
# 2552
const _DistanceType __len2 = std::distance(__middle, __last); 
# 2554
typedef _Temporary_buffer< _BidirectionalIterator, typename iterator_traits< _BidirectionalIterator> ::value_type>  _TmpBuf; 
# 2555
_TmpBuf __buf(__first, __last); 
# 2557
if ((__buf.begin()) == 0) { 
# 2558
std::__merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp); } else { 
# 2561
std::__merge_adaptive(__first, __middle, __last, __len1, __len2, (__buf.begin()), (_DistanceType)(__buf.size()), __comp); }  
# 2564
} 
# 2584
template< class _BidirectionalIterator> inline void 
# 2586
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2587
__middle, _BidirectionalIterator 
# 2588
__last) 
# 2589
{ 
# 2595
; 
# 2596
; 
# 2598
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2600
} 
# 2624
template< class _BidirectionalIterator, class _Compare> inline void 
# 2626
inplace_merge(_BidirectionalIterator __first, _BidirectionalIterator 
# 2627
__middle, _BidirectionalIterator 
# 2628
__last, _Compare 
# 2629
__comp) 
# 2630
{ 
# 2637
; 
# 2638
; 
# 2640
std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2642
} 
# 2646
template< class _InputIterator, class _OutputIterator, class 
# 2647
_Compare> _OutputIterator 
# 2649
__move_merge(_InputIterator __first1, _InputIterator __last1, _InputIterator 
# 2650
__first2, _InputIterator __last2, _OutputIterator 
# 2651
__result, _Compare __comp) 
# 2652
{ 
# 2653
while ((__first1 != __last1) && (__first2 != __last2)) 
# 2654
{ 
# 2655
if (__comp(__first2, __first1)) 
# 2656
{ 
# 2657
(*__result) = std::move(*__first2); 
# 2658
++__first2; 
# 2659
} else 
# 2661
{ 
# 2662
(*__result) = std::move(*__first1); 
# 2663
++__first1; 
# 2664
}  
# 2665
++__result; 
# 2666
}  
# 2667
return std::move(__first2, __last2, std::move(__first1, __last1, __result)); 
# 2670
} 
# 2672
template< class _RandomAccessIterator1, class _RandomAccessIterator2, class 
# 2673
_Distance, class _Compare> void 
# 2675
__merge_sort_loop(_RandomAccessIterator1 __first, _RandomAccessIterator1 
# 2676
__last, _RandomAccessIterator2 
# 2677
__result, _Distance __step_size, _Compare 
# 2678
__comp) 
# 2679
{ 
# 2680
const _Distance __two_step = 2 * __step_size; 
# 2682
while ((__last - __first) >= __two_step) 
# 2683
{ 
# 2684
__result = std::__move_merge(__first, __first + __step_size, __first + __step_size, __first + __two_step, __result, __comp); 
# 2688
__first += __two_step; 
# 2689
}  
# 2690
__step_size = std::min((_Distance)(__last - __first), __step_size); 
# 2692
std::__move_merge(__first, __first + __step_size, __first + __step_size, __last, __result, __comp); 
# 2694
} 
# 2696
template< class _RandomAccessIterator, class _Distance, class 
# 2697
_Compare> void 
# 2699
__chunk_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2700
__last, _Distance 
# 2701
__chunk_size, _Compare __comp) 
# 2702
{ 
# 2703
while ((__last - __first) >= __chunk_size) 
# 2704
{ 
# 2705
std::__insertion_sort(__first, __first + __chunk_size, __comp); 
# 2706
__first += __chunk_size; 
# 2707
}  
# 2708
std::__insertion_sort(__first, __last, __comp); 
# 2709
} 
# 2711
enum { _S_chunk_size = 7}; 
# 2713
template< class _RandomAccessIterator, class _Pointer, class _Compare> void 
# 2715
__merge_sort_with_buffer(_RandomAccessIterator __first, _RandomAccessIterator 
# 2716
__last, _Pointer 
# 2717
__buffer, _Compare __comp) 
# 2718
{ 
# 2720
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _Distance; 
# 2722
const _Distance __len = __last - __first; 
# 2723
const _Pointer __buffer_last = __buffer + __len; 
# 2725
_Distance __step_size = (_S_chunk_size); 
# 2726
std::__chunk_insertion_sort(__first, __last, __step_size, __comp); 
# 2728
while (__step_size < __len) 
# 2729
{ 
# 2730
std::__merge_sort_loop(__first, __last, __buffer, __step_size, __comp); 
# 2732
__step_size *= 2; 
# 2733
std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp); 
# 2735
__step_size *= 2; 
# 2736
}  
# 2737
} 
# 2739
template< class _RandomAccessIterator, class _Pointer, class 
# 2740
_Distance, class _Compare> void 
# 2742
__stable_sort_adaptive(_RandomAccessIterator __first, _RandomAccessIterator 
# 2743
__last, _Pointer 
# 2744
__buffer, _Distance __buffer_size, _Compare 
# 2745
__comp) 
# 2746
{ 
# 2747
const _Distance __len = ((__last - __first) + 1) / 2; 
# 2748
const _RandomAccessIterator __middle = __first + __len; 
# 2749
if (__len > __buffer_size) 
# 2750
{ 
# 2751
std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size, __comp); 
# 2753
std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size, __comp); 
# 2755
} else 
# 2757
{ 
# 2758
std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp); 
# 2759
std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp); 
# 2760
}  
# 2761
std::__merge_adaptive(__first, __middle, __last, (_Distance)(__middle - __first), (_Distance)(__last - __middle), __buffer, __buffer_size, __comp); 
# 2766
} 
# 2769
template< class _RandomAccessIterator, class _Compare> void 
# 2771
__inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 2772
__last, _Compare __comp) 
# 2773
{ 
# 2774
if ((__last - __first) < 15) 
# 2775
{ 
# 2776
std::__insertion_sort(__first, __last, __comp); 
# 2777
return; 
# 2778
}  
# 2779
_RandomAccessIterator __middle = __first + ((__last - __first) / 2); 
# 2780
std::__inplace_stable_sort(__first, __middle, __comp); 
# 2781
std::__inplace_stable_sort(__middle, __last, __comp); 
# 2782
std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle, __comp); 
# 2786
} 
# 2795
template< class _InputIterator1, class _InputIterator2, class 
# 2796
_Compare> bool 
# 2798
__includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2799
__first2, _InputIterator2 __last2, _Compare 
# 2800
__comp) 
# 2801
{ 
# 2802
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 2803
if (__comp(__first2, __first1)) { 
# 2804
return false; } else { 
# 2805
if (__comp(__first1, __first2)) { 
# 2806
++__first1; } else { 
# 2808
(++__first1), (++__first2); }  }  }  
# 2810
return __first2 == __last2; 
# 2811
} 
# 2831
template< class _InputIterator1, class _InputIterator2> inline bool 
# 2833
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2834
__first2, _InputIterator2 __last2) 
# 2835
{ 
# 2845
; 
# 2846
; 
# 2848
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter()); 
# 2850
} 
# 2873
template< class _InputIterator1, class _InputIterator2, class 
# 2874
_Compare> inline bool 
# 2876
includes(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2877
__first2, _InputIterator2 __last2, _Compare 
# 2878
__comp) 
# 2879
{ 
# 2889
; 
# 2890
; 
# 2892
return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 2894
} 
# 2906
template< class _BidirectionalIterator, class _Compare> bool 
# 2908
__next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2909
__last, _Compare __comp) 
# 2910
{ 
# 2911
if (__first == __last) { 
# 2912
return false; }  
# 2913
_BidirectionalIterator __i = __first; 
# 2914
++__i; 
# 2915
if (__i == __last) { 
# 2916
return false; }  
# 2917
__i = __last; 
# 2918
--__i; 
# 2920
for (; ;) 
# 2921
{ 
# 2922
_BidirectionalIterator __ii = __i; 
# 2923
--__i; 
# 2924
if (__comp(__i, __ii)) 
# 2925
{ 
# 2926
_BidirectionalIterator __j = __last; 
# 2927
while (!__comp(__i, --__j)) 
# 2928
{ }  
# 2929
std::iter_swap(__i, __j); 
# 2930
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 2932
return true; 
# 2933
}  
# 2934
if (__i == __first) 
# 2935
{ 
# 2936
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 2938
return false; 
# 2939
}  
# 2940
}  
# 2941
} 
# 2955
template< class _BidirectionalIterator> inline bool 
# 2957
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2958
__last) 
# 2959
{ 
# 2965
; 
# 2967
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 2969
} 
# 2986
template< class _BidirectionalIterator, class _Compare> inline bool 
# 2988
next_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 2989
__last, _Compare __comp) 
# 2990
{ 
# 2997
; 
# 2999
return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3001
} 
# 3003
template< class _BidirectionalIterator, class _Compare> bool 
# 3005
__prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3006
__last, _Compare __comp) 
# 3007
{ 
# 3008
if (__first == __last) { 
# 3009
return false; }  
# 3010
_BidirectionalIterator __i = __first; 
# 3011
++__i; 
# 3012
if (__i == __last) { 
# 3013
return false; }  
# 3014
__i = __last; 
# 3015
--__i; 
# 3017
for (; ;) 
# 3018
{ 
# 3019
_BidirectionalIterator __ii = __i; 
# 3020
--__i; 
# 3021
if (__comp(__ii, __i)) 
# 3022
{ 
# 3023
_BidirectionalIterator __j = __last; 
# 3024
while (!__comp(--__j, __i)) 
# 3025
{ }  
# 3026
std::iter_swap(__i, __j); 
# 3027
std::__reverse(__ii, __last, std::__iterator_category(__first)); 
# 3029
return true; 
# 3030
}  
# 3031
if (__i == __first) 
# 3032
{ 
# 3033
std::__reverse(__first, __last, std::__iterator_category(__first)); 
# 3035
return false; 
# 3036
}  
# 3037
}  
# 3038
} 
# 3053
template< class _BidirectionalIterator> inline bool 
# 3055
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3056
__last) 
# 3057
{ 
# 3063
; 
# 3065
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3067
} 
# 3084
template< class _BidirectionalIterator, class _Compare> inline bool 
# 3086
prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator 
# 3087
__last, _Compare __comp) 
# 3088
{ 
# 3095
; 
# 3097
return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3099
} 
# 3104
template< class _InputIterator, class _OutputIterator, class 
# 3105
_Predicate, class _Tp> _OutputIterator 
# 3107
__replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3108
__result, _Predicate 
# 3109
__pred, const _Tp &__new_value) 
# 3110
{ 
# 3111
for (; __first != __last; (++__first), (++__result)) { 
# 3112
if (__pred(__first)) { 
# 3113
(*__result) = __new_value; } else { 
# 3115
(*__result) = (*__first); }  }  
# 3116
return __result; 
# 3117
} 
# 3133
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 3135
replace_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3136
__result, const _Tp &
# 3137
__old_value, const _Tp &__new_value) 
# 3138
{ 
# 3145
; 
# 3147
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__old_value), __new_value); 
# 3150
} 
# 3167
template< class _InputIterator, class _OutputIterator, class 
# 3168
_Predicate, class _Tp> inline _OutputIterator 
# 3170
replace_copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 3171
__result, _Predicate 
# 3172
__pred, const _Tp &__new_value) 
# 3173
{ 
# 3180
; 
# 3182
return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred), __new_value); 
# 3185
} 
# 3187
template< class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type 
# 3189
__count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 3190
{ 
# 3191
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 3192
for (; __first != __last; ++__first) { 
# 3193
if (__pred(__first)) { 
# 3194
++__n; }  }  
# 3195
return __n; 
# 3196
} 
# 3206
template< class _ForwardIterator> inline bool 
# 3208
is_sorted(_ForwardIterator __first, _ForwardIterator __last) 
# 3209
{ return std::is_sorted_until(__first, __last) == __last; } 
# 3220
template< class _ForwardIterator, class _Compare> inline bool 
# 3222
is_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3223
__comp) 
# 3224
{ return std::is_sorted_until(__first, __last, __comp) == __last; } 
# 3226
template< class _ForwardIterator, class _Compare> _ForwardIterator 
# 3228
__is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3229
__comp) 
# 3230
{ 
# 3231
if (__first == __last) { 
# 3232
return __last; }  
# 3234
_ForwardIterator __next = __first; 
# 3235
for (++__next; __next != __last; (__first = __next), (++__next)) { 
# 3236
if (__comp(__next, __first)) { 
# 3237
return __next; }  }  
# 3238
return __next; 
# 3239
} 
# 3249
template< class _ForwardIterator> inline _ForwardIterator 
# 3251
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last) 
# 3252
{ 
# 3257
; 
# 3259
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3261
} 
# 3272
template< class _ForwardIterator, class _Compare> inline _ForwardIterator 
# 3274
is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3275
__comp) 
# 3276
{ 
# 3282
; 
# 3284
return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3286
} 
# 3296
template< class _Tp> inline pair< const _Tp &, const _Tp &>  
# 3299
minmax(const _Tp &__a, const _Tp &__b) 
# 3300
{ 
# 3304
return (__b < __a) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3306
} 
# 3317
template< class _Tp, class _Compare> inline pair< const _Tp &, const _Tp &>  
# 3320
minmax(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 3321
{ 
# 3322
return (__comp(__b, __a)) ? pair< const _Tp &, const _Tp &> (__b, __a) : pair< const _Tp &, const _Tp &> (__a, __b); 
# 3324
} 
# 3326
template< class _ForwardIterator, class _Compare> pair< _ForwardIterator, _ForwardIterator>  
# 3329
__minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3330
__comp) 
# 3331
{ 
# 3332
_ForwardIterator __next = __first; 
# 3333
if ((__first == __last) || ((++__next) == __last)) { 
# 3335
return std::make_pair(__first, __first); }  
# 3337
_ForwardIterator __min{}, __max{}; 
# 3338
if (__comp(__next, __first)) 
# 3339
{ 
# 3340
__min = __next; 
# 3341
__max = __first; 
# 3342
} else 
# 3344
{ 
# 3345
__min = __first; 
# 3346
__max = __next; 
# 3347
}  
# 3349
__first = __next; 
# 3350
++__first; 
# 3352
while (__first != __last) 
# 3353
{ 
# 3354
__next = __first; 
# 3355
if ((++__next) == __last) 
# 3356
{ 
# 3357
if (__comp(__first, __min)) { 
# 3358
__min = __first; } else { 
# 3359
if (!__comp(__first, __max)) { 
# 3360
__max = __first; }  }  
# 3361
break; 
# 3362
}  
# 3364
if (__comp(__next, __first)) 
# 3365
{ 
# 3366
if (__comp(__next, __min)) { 
# 3367
__min = __next; }  
# 3368
if (!__comp(__first, __max)) { 
# 3369
__max = __first; }  
# 3370
} else 
# 3372
{ 
# 3373
if (__comp(__first, __min)) { 
# 3374
__min = __first; }  
# 3375
if (!__comp(__next, __max)) { 
# 3376
__max = __next; }  
# 3377
}  
# 3379
__first = __next; 
# 3380
++__first; 
# 3381
}  
# 3383
return std::make_pair(__min, __max); 
# 3384
} 
# 3397
template< class _ForwardIterator> inline pair< _ForwardIterator, _ForwardIterator>  
# 3400
minmax_element(_ForwardIterator __first, _ForwardIterator __last) 
# 3401
{ 
# 3406
; 
# 3408
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 3410
} 
# 3424
template< class _ForwardIterator, class _Compare> inline pair< _ForwardIterator, _ForwardIterator>  
# 3427
minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 3428
__comp) 
# 3429
{ 
# 3435
; 
# 3437
return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 3439
} 
# 3442
template< class _Tp> inline _Tp 
# 3445
min(initializer_list< _Tp>  __l) 
# 3446
{ return *std::min_element((__l.begin()), (__l.end())); } 
# 3448
template< class _Tp, class _Compare> inline _Tp 
# 3451
min(initializer_list< _Tp>  __l, _Compare __comp) 
# 3452
{ return *std::min_element((__l.begin()), (__l.end()), __comp); } 
# 3454
template< class _Tp> inline _Tp 
# 3457
max(initializer_list< _Tp>  __l) 
# 3458
{ return *std::max_element((__l.begin()), (__l.end())); } 
# 3460
template< class _Tp, class _Compare> inline _Tp 
# 3463
max(initializer_list< _Tp>  __l, _Compare __comp) 
# 3464
{ return *std::max_element((__l.begin()), (__l.end()), __comp); } 
# 3466
template< class _Tp> inline pair< _Tp, _Tp>  
# 3469
minmax(initializer_list< _Tp>  __l) 
# 3470
{ 
# 3471
pair< const _Tp *, const _Tp *>  __p = std::minmax_element((__l.begin()), (__l.end())); 
# 3473
return std::make_pair(*(__p.first), *(__p.second)); 
# 3474
} 
# 3476
template< class _Tp, class _Compare> inline pair< _Tp, _Tp>  
# 3479
minmax(initializer_list< _Tp>  __l, _Compare __comp) 
# 3480
{ 
# 3481
pair< const _Tp *, const _Tp *>  __p = std::minmax_element((__l.begin()), (__l.end()), __comp); 
# 3483
return std::make_pair(*(__p.first), *(__p.second)); 
# 3484
} 
# 3486
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3487
_BinaryPredicate> bool 
# 3489
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3490
__first2, _BinaryPredicate __pred) 
# 3491
{ 
# 3494
for (; __first1 != __last1; (++__first1), (++__first2)) { 
# 3495
if (!__pred(__first1, __first2)) { 
# 3496
break; }  }  
# 3498
if (__first1 == __last1) { 
# 3499
return true; }  
# 3503
_ForwardIterator2 __last2 = __first2; 
# 3504
std::advance(__last2, std::distance(__first1, __last1)); 
# 3505
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) { 
# 3506
{ 
# 3507
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 3509
continue; }  
# 3511
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 3514
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 3518
return false; }  
# 3519
} }  
# 3520
return true; 
# 3521
} 
# 3535
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 3537
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3538
__first2) 
# 3539
{ 
# 3546
; 
# 3548
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3550
} 
# 3566
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 3567
_BinaryPredicate> inline bool 
# 3569
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 3570
__first2, _BinaryPredicate __pred) 
# 3571
{ 
# 3578
; 
# 3580
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__pred)); 
# 3582
} 
# 3714
template< class _RandomAccessIterator, class 
# 3715
_UniformRandomNumberGenerator> void 
# 3717
shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator &&
# 3718
__g) 
# 3719
{ 
# 3723
; 
# 3725
if (__first == __last) { 
# 3726
return; }  
# 3729
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 3731
typedef typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type __ud_type; 
# 3732
typedef uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type>  __distr_type; 
# 3733
typedef typename uniform_int_distribution< typename make_unsigned< typename iterator_traits< _RandomAccessIterator> ::difference_type> ::type> ::param_type __p_type; 
# 3734
__distr_type __d; 
# 3736
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) { 
# 3737
std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first))); }  
# 3738
} 
# 3759
template< class _InputIterator, class _Function> _Function 
# 3761
for_each(_InputIterator __first, _InputIterator __last, _Function __f) 
# 3762
{ 
# 3765
; 
# 3766
for (; __first != __last; ++__first) { 
# 3767
__f(*__first); }  
# 3768
return std::move(__f); 
# 3769
} 
# 3780
template< class _InputIterator, class _Tp> inline _InputIterator 
# 3782
find(_InputIterator __first, _InputIterator __last, const _Tp &
# 3783
__val) 
# 3784
{ 
# 3789
; 
# 3790
return std::__find_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 3792
} 
# 3804
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 3806
find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 3807
__pred) 
# 3808
{ 
# 3813
; 
# 3815
return std::__find_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 3817
} 
# 3835
template< class _InputIterator, class _ForwardIterator> _InputIterator 
# 3837
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3838
__first2, _ForwardIterator __last2) 
# 3839
{ 
# 3846
; 
# 3847
; 
# 3849
for (; __first1 != __last1; ++__first1) { 
# 3850
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 3851
if ((*__first1) == (*__iter)) { 
# 3852
return __first1; }  }  }  
# 3853
return __last1; 
# 3854
} 
# 3875
template< class _InputIterator, class _ForwardIterator, class 
# 3876
_BinaryPredicate> _InputIterator 
# 3878
find_first_of(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 3879
__first2, _ForwardIterator __last2, _BinaryPredicate 
# 3880
__comp) 
# 3881
{ 
# 3888
; 
# 3889
; 
# 3891
for (; __first1 != __last1; ++__first1) { 
# 3892
for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter) { 
# 3893
if (__comp(*__first1, *__iter)) { 
# 3894
return __first1; }  }  }  
# 3895
return __last1; 
# 3896
} 
# 3907
template< class _ForwardIterator> inline _ForwardIterator 
# 3909
adjacent_find(_ForwardIterator __first, _ForwardIterator __last) 
# 3910
{ 
# 3915
; 
# 3917
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 3919
} 
# 3932
template< class _ForwardIterator, class _BinaryPredicate> inline _ForwardIterator 
# 3934
adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate 
# 3935
__binary_pred) 
# 3936
{ 
# 3942
; 
# 3944
return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 3946
} 
# 3957
template< class _InputIterator, class _Tp> inline typename iterator_traits< _InputIterator> ::difference_type 
# 3959
count(_InputIterator __first, _InputIterator __last, const _Tp &__value) 
# 3960
{ 
# 3965
; 
# 3967
return std::__count_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value)); 
# 3969
} 
# 3980
template< class _InputIterator, class _Predicate> inline typename iterator_traits< _InputIterator> ::difference_type 
# 3982
count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 3983
{ 
# 3988
; 
# 3990
return std::__count_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred)); 
# 3992
} 
# 4020
template< class _ForwardIterator1, class _ForwardIterator2> inline _ForwardIterator1 
# 4022
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4023
__first2, _ForwardIterator2 __last2) 
# 4024
{ 
# 4031
; 
# 4032
; 
# 4034
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 4036
} 
# 4059
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 4060
_BinaryPredicate> inline _ForwardIterator1 
# 4062
search(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 4063
__first2, _ForwardIterator2 __last2, _BinaryPredicate 
# 4064
__predicate) 
# 4065
{ 
# 4072
; 
# 4073
; 
# 4075
return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__predicate)); 
# 4077
} 
# 4094
template< class _ForwardIterator, class _Integer, class _Tp> inline _ForwardIterator 
# 4096
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4097
__count, const _Tp &__val) 
# 4098
{ 
# 4103
; 
# 4105
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_equals_val(__val)); 
# 4107
} 
# 4127
template< class _ForwardIterator, class _Integer, class _Tp, class 
# 4128
_BinaryPredicate> inline _ForwardIterator 
# 4130
search_n(_ForwardIterator __first, _ForwardIterator __last, _Integer 
# 4131
__count, const _Tp &__val, _BinaryPredicate 
# 4132
__binary_pred) 
# 4133
{ 
# 4138
; 
# 4140
return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val)); 
# 4142
} 
# 4161
template< class _InputIterator, class _OutputIterator, class 
# 4162
_UnaryOperation> _OutputIterator 
# 4164
transform(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4165
__result, _UnaryOperation __unary_op) 
# 4166
{ 
# 4172
; 
# 4174
for (; __first != __last; (++__first), (++__result)) { 
# 4175
(*__result) = __unary_op(*__first); }  
# 4176
return __result; 
# 4177
} 
# 4198
template< class _InputIterator1, class _InputIterator2, class 
# 4199
_OutputIterator, class _BinaryOperation> _OutputIterator 
# 4201
transform(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4202
__first2, _OutputIterator __result, _BinaryOperation 
# 4203
__binary_op) 
# 4204
{ 
# 4211
; 
# 4213
for (; __first1 != __last1; ((++__first1), (++__first2)), (++__result)) { 
# 4214
(*__result) = __binary_op(*__first1, *__first2); }  
# 4215
return __result; 
# 4216
} 
# 4231
template< class _ForwardIterator, class _Tp> void 
# 4233
replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 4234
__old_value, const _Tp &__new_value) 
# 4235
{ 
# 4243
; 
# 4245
for (; __first != __last; ++__first) { 
# 4246
if ((*__first) == __old_value) { 
# 4247
(*__first) = __new_value; }  }  
# 4248
} 
# 4263
template< class _ForwardIterator, class _Predicate, class _Tp> void 
# 4265
replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4266
__pred, const _Tp &__new_value) 
# 4267
{ 
# 4275
; 
# 4277
for (; __first != __last; ++__first) { 
# 4278
if (__pred(*__first)) { 
# 4279
(*__first) = __new_value; }  }  
# 4280
} 
# 4295
template< class _ForwardIterator, class _Generator> void 
# 4297
generate(_ForwardIterator __first, _ForwardIterator __last, _Generator 
# 4298
__gen) 
# 4299
{ 
# 4304
; 
# 4306
for (; __first != __last; ++__first) { 
# 4307
(*__first) = __gen(); }  
# 4308
} 
# 4326
template< class _OutputIterator, class _Size, class _Generator> _OutputIterator 
# 4328
generate_n(_OutputIterator __first, _Size __n, _Generator __gen) 
# 4329
{ 
# 4335
for (__decltype((__n + 0)) __niter = __n; __niter > 0; (--__niter), (++__first)) { 
# 4337
(*__first) = __gen(); }  
# 4338
return __first; 
# 4339
} 
# 4362
template< class _InputIterator, class _OutputIterator> inline _OutputIterator 
# 4364
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4365
__result) 
# 4366
{ 
# 4373
; 
# 4375
if (__first == __last) { 
# 4376
return __result; }  
# 4377
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_equal_to_iter(), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4381
} 
# 4402
template< class _InputIterator, class _OutputIterator, class 
# 4403
_BinaryPredicate> inline _OutputIterator 
# 4405
unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 4406
__result, _BinaryPredicate 
# 4407
__binary_pred) 
# 4408
{ 
# 4413
; 
# 4415
if (__first == __last) { 
# 4416
return __result; }  
# 4417
return std::__unique_copy(__first, __last, __result, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred), std::__iterator_category(__first), std::__iterator_category(__result)); 
# 4421
} 
# 4434
template< class _RandomAccessIterator> inline void 
# 4436
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4437
{ 
# 4441
; 
# 4443
if (__first != __last) { 
# 4444
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4445
{ 
# 4447
_RandomAccessIterator __j = __first + (std::rand() % ((__i - __first) + 1)); 
# 4449
if (__i != __j) { 
# 4450
std::iter_swap(__i, __j); }  
# 4451
}  }  
# 4452
} 
# 4468
template< class _RandomAccessIterator, class _RandomNumberGenerator> void 
# 4470
random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator &&
# 4472
__rand) 
# 4476
{ 
# 4480
; 
# 4482
if (__first == __last) { 
# 4483
return; }  
# 4484
for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i) 
# 4485
{ 
# 4486
_RandomAccessIterator __j = __first + __rand((__i - __first) + 1); 
# 4487
if (__i != __j) { 
# 4488
std::iter_swap(__i, __j); }  
# 4489
}  
# 4490
} 
# 4508
template< class _ForwardIterator, class _Predicate> inline _ForwardIterator 
# 4510
partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate 
# 4511
__pred) 
# 4512
{ 
# 4518
; 
# 4520
return std::__partition(__first, __last, __pred, std::__iterator_category(__first)); 
# 4522
} 
# 4541
template< class _RandomAccessIterator> inline void 
# 4543
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4544
__middle, _RandomAccessIterator 
# 4545
__last) 
# 4546
{ 
# 4552
; 
# 4553
; 
# 4555
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4557
} 
# 4578
template< class _RandomAccessIterator, class _Compare> inline void 
# 4580
partial_sort(_RandomAccessIterator __first, _RandomAccessIterator 
# 4581
__middle, _RandomAccessIterator 
# 4582
__last, _Compare 
# 4583
__comp) 
# 4584
{ 
# 4591
; 
# 4592
; 
# 4594
std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4596
} 
# 4613
template< class _RandomAccessIterator> inline void 
# 4615
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4616
__last) 
# 4617
{ 
# 4623
; 
# 4624
; 
# 4626
if ((__first == __last) || (__nth == __last)) { 
# 4627
return; }  
# 4629
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_less_iter()); 
# 4632
} 
# 4651
template< class _RandomAccessIterator, class _Compare> inline void 
# 4653
nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator 
# 4654
__last, _Compare __comp) 
# 4655
{ 
# 4662
; 
# 4663
; 
# 4665
if ((__first == __last) || (__nth == __last)) { 
# 4666
return; }  
# 4668
std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4671
} 
# 4687
template< class _RandomAccessIterator> inline void 
# 4689
sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4690
{ 
# 4696
; 
# 4698
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4699
} 
# 4716
template< class _RandomAccessIterator, class _Compare> inline void 
# 4718
sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4719
__comp) 
# 4720
{ 
# 4727
; 
# 4729
std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4730
} 
# 4732
template< class _InputIterator1, class _InputIterator2, class 
# 4733
_OutputIterator, class _Compare> _OutputIterator 
# 4735
__merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4736
__first2, _InputIterator2 __last2, _OutputIterator 
# 4737
__result, _Compare __comp) 
# 4738
{ 
# 4739
while ((__first1 != __last1) && (__first2 != __last2)) 
# 4740
{ 
# 4741
if (__comp(__first2, __first1)) 
# 4742
{ 
# 4743
(*__result) = (*__first2); 
# 4744
++__first2; 
# 4745
} else 
# 4747
{ 
# 4748
(*__result) = (*__first1); 
# 4749
++__first1; 
# 4750
}  
# 4751
++__result; 
# 4752
}  
# 4753
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 4755
} 
# 4776
template< class _InputIterator1, class _InputIterator2, class 
# 4777
_OutputIterator> inline _OutputIterator 
# 4779
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4780
__first2, _InputIterator2 __last2, _OutputIterator 
# 4781
__result) 
# 4782
{ 
# 4793
; 
# 4794
; 
# 4796
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 4799
} 
# 4824
template< class _InputIterator1, class _InputIterator2, class 
# 4825
_OutputIterator, class _Compare> inline _OutputIterator 
# 4827
merge(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4828
__first2, _InputIterator2 __last2, _OutputIterator 
# 4829
__result, _Compare __comp) 
# 4830
{ 
# 4841
; 
# 4842
; 
# 4844
return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4847
} 
# 4849
template< class _RandomAccessIterator, class _Compare> inline void 
# 4851
__stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4852
__comp) 
# 4853
{ 
# 4855
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _ValueType; 
# 4857
typedef typename iterator_traits< _RandomAccessIterator> ::difference_type _DistanceType; 
# 4859
typedef _Temporary_buffer< _RandomAccessIterator, typename iterator_traits< _RandomAccessIterator> ::value_type>  _TmpBuf; 
# 4860
_TmpBuf __buf(__first, __last); 
# 4862
if ((__buf.begin()) == 0) { 
# 4863
std::__inplace_stable_sort(__first, __last, __comp); } else { 
# 4865
std::__stable_sort_adaptive(__first, __last, (__buf.begin()), (_DistanceType)(__buf.size()), __comp); }  
# 4867
} 
# 4886
template< class _RandomAccessIterator> inline void 
# 4888
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last) 
# 4889
{ 
# 4895
; 
# 4897
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 4899
} 
# 4919
template< class _RandomAccessIterator, class _Compare> inline void 
# 4921
stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare 
# 4922
__comp) 
# 4923
{ 
# 4930
; 
# 4932
std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 4934
} 
# 4936
template< class _InputIterator1, class _InputIterator2, class 
# 4937
_OutputIterator, class 
# 4938
_Compare> _OutputIterator 
# 4940
__set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4941
__first2, _InputIterator2 __last2, _OutputIterator 
# 4942
__result, _Compare __comp) 
# 4943
{ 
# 4944
while ((__first1 != __last1) && (__first2 != __last2)) 
# 4945
{ 
# 4946
if (__comp(__first1, __first2)) 
# 4947
{ 
# 4948
(*__result) = (*__first1); 
# 4949
++__first1; 
# 4950
} else { 
# 4951
if (__comp(__first2, __first1)) 
# 4952
{ 
# 4953
(*__result) = (*__first2); 
# 4954
++__first2; 
# 4955
} else 
# 4957
{ 
# 4958
(*__result) = (*__first1); 
# 4959
++__first1; 
# 4960
++__first2; 
# 4961
}  }  
# 4962
++__result; 
# 4963
}  
# 4964
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 4966
} 
# 4986
template< class _InputIterator1, class _InputIterator2, class 
# 4987
_OutputIterator> inline _OutputIterator 
# 4989
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 4990
__first2, _InputIterator2 __last2, _OutputIterator 
# 4991
__result) 
# 4992
{ 
# 5006
; 
# 5007
; 
# 5009
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5012
} 
# 5033
template< class _InputIterator1, class _InputIterator2, class 
# 5034
_OutputIterator, class _Compare> inline _OutputIterator 
# 5036
set_union(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5037
__first2, _InputIterator2 __last2, _OutputIterator 
# 5038
__result, _Compare __comp) 
# 5039
{ 
# 5053
; 
# 5054
; 
# 5056
return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5059
} 
# 5061
template< class _InputIterator1, class _InputIterator2, class 
# 5062
_OutputIterator, class 
# 5063
_Compare> _OutputIterator 
# 5065
__set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5066
__first2, _InputIterator2 __last2, _OutputIterator 
# 5067
__result, _Compare __comp) 
# 5068
{ 
# 5069
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5070
if (__comp(__first1, __first2)) { 
# 5071
++__first1; } else { 
# 5072
if (__comp(__first2, __first1)) { 
# 5073
++__first2; } else 
# 5075
{ 
# 5076
(*__result) = (*__first1); 
# 5077
++__first1; 
# 5078
++__first2; 
# 5079
++__result; 
# 5080
}  }  }  
# 5081
return __result; 
# 5082
} 
# 5101
template< class _InputIterator1, class _InputIterator2, class 
# 5102
_OutputIterator> inline _OutputIterator 
# 5104
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5105
__first2, _InputIterator2 __last2, _OutputIterator 
# 5106
__result) 
# 5107
{ 
# 5119
; 
# 5120
; 
# 5122
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5125
} 
# 5147
template< class _InputIterator1, class _InputIterator2, class 
# 5148
_OutputIterator, class _Compare> inline _OutputIterator 
# 5150
set_intersection(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5151
__first2, _InputIterator2 __last2, _OutputIterator 
# 5152
__result, _Compare __comp) 
# 5153
{ 
# 5165
; 
# 5166
; 
# 5168
return std::__set_intersection(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5171
} 
# 5173
template< class _InputIterator1, class _InputIterator2, class 
# 5174
_OutputIterator, class 
# 5175
_Compare> _OutputIterator 
# 5177
__set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5178
__first2, _InputIterator2 __last2, _OutputIterator 
# 5179
__result, _Compare __comp) 
# 5180
{ 
# 5181
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5182
if (__comp(__first1, __first2)) 
# 5183
{ 
# 5184
(*__result) = (*__first1); 
# 5185
++__first1; 
# 5186
++__result; 
# 5187
} else { 
# 5188
if (__comp(__first2, __first1)) { 
# 5189
++__first2; } else 
# 5191
{ 
# 5192
++__first1; 
# 5193
++__first2; 
# 5194
}  }  }  
# 5195
return std::copy(__first1, __last1, __result); 
# 5196
} 
# 5217
template< class _InputIterator1, class _InputIterator2, class 
# 5218
_OutputIterator> inline _OutputIterator 
# 5220
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5221
__first2, _InputIterator2 __last2, _OutputIterator 
# 5222
__result) 
# 5223
{ 
# 5235
; 
# 5236
; 
# 5238
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5241
} 
# 5265
template< class _InputIterator1, class _InputIterator2, class 
# 5266
_OutputIterator, class _Compare> inline _OutputIterator 
# 5268
set_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5269
__first2, _InputIterator2 __last2, _OutputIterator 
# 5270
__result, _Compare __comp) 
# 5271
{ 
# 5283
; 
# 5284
; 
# 5286
return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5289
} 
# 5291
template< class _InputIterator1, class _InputIterator2, class 
# 5292
_OutputIterator, class 
# 5293
_Compare> _OutputIterator 
# 5295
__set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 
# 5296
__last1, _InputIterator2 
# 5297
__first2, _InputIterator2 
# 5298
__last2, _OutputIterator 
# 5299
__result, _Compare 
# 5300
__comp) 
# 5301
{ 
# 5302
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 5303
if (__comp(__first1, __first2)) 
# 5304
{ 
# 5305
(*__result) = (*__first1); 
# 5306
++__first1; 
# 5307
++__result; 
# 5308
} else { 
# 5309
if (__comp(__first2, __first1)) 
# 5310
{ 
# 5311
(*__result) = (*__first2); 
# 5312
++__first2; 
# 5313
++__result; 
# 5314
} else 
# 5316
{ 
# 5317
++__first1; 
# 5318
++__first2; 
# 5319
}  }  }  
# 5320
return std::copy(__first2, __last2, std::copy(__first1, __last1, __result)); 
# 5322
} 
# 5341
template< class _InputIterator1, class _InputIterator2, class 
# 5342
_OutputIterator> inline _OutputIterator 
# 5344
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5345
__first2, _InputIterator2 __last2, _OutputIterator 
# 5346
__result) 
# 5347
{ 
# 5361
; 
# 5362
; 
# 5364
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter()); 
# 5367
} 
# 5389
template< class _InputIterator1, class _InputIterator2, class 
# 5390
_OutputIterator, class _Compare> inline _OutputIterator 
# 5392
set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 5393
__first2, _InputIterator2 __last2, _OutputIterator 
# 5394
__result, _Compare 
# 5395
__comp) 
# 5396
{ 
# 5410
; 
# 5411
; 
# 5413
return std::__set_symmetric_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5416
} 
# 5418
template< class _ForwardIterator, class _Compare> _ForwardIterator 
# 5421
__min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5422
__comp) 
# 5423
{ 
# 5424
if (__first == __last) { 
# 5425
return __first; }  
# 5426
_ForwardIterator __result = __first; 
# 5427
while ((++__first) != __last) { 
# 5428
if (__comp(__first, __result)) { 
# 5429
__result = __first; }  }  
# 5430
return __result; 
# 5431
} 
# 5440
template< class _ForwardIterator> inline _ForwardIterator 
# 5443
min_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5444
{ 
# 5449
; 
# 5451
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5453
} 
# 5464
template< class _ForwardIterator, class _Compare> inline _ForwardIterator 
# 5467
min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5468
__comp) 
# 5469
{ 
# 5475
; 
# 5477
return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5479
} 
# 5481
template< class _ForwardIterator, class _Compare> _ForwardIterator 
# 5484
__max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5485
__comp) 
# 5486
{ 
# 5487
if (__first == __last) { return __first; }  
# 5488
_ForwardIterator __result = __first; 
# 5489
while ((++__first) != __last) { 
# 5490
if (__comp(__result, __first)) { 
# 5491
__result = __first; }  }  
# 5492
return __result; 
# 5493
} 
# 5502
template< class _ForwardIterator> inline _ForwardIterator 
# 5505
max_element(_ForwardIterator __first, _ForwardIterator __last) 
# 5506
{ 
# 5511
; 
# 5513
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter()); 
# 5515
} 
# 5526
template< class _ForwardIterator, class _Compare> inline _ForwardIterator 
# 5529
max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare 
# 5530
__comp) 
# 5531
{ 
# 5537
; 
# 5539
return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 5541
} 
# 5544
}
# 24 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/deviceFunctions.h"
enum AssignPolicy { 
# 25
PREVIOUS_BINS, 
# 26
BOUNDING_BOX, 
# 27
POSITION
# 28
}; 
# 38
enum WaitPolicy { 
# 39
CUSTOM, 
# 40
BATCH, 
# 41
END_STAGE, 
# 42
END_BIN
# 43
}; 
# 45
enum SchedulePolicy { 
# 46
LOAD_BALANCE, 
# 47
ROUND_ROBIN, 
# 48
SERIAL, 
# 49
ALL
# 50
}; 
# 52
void specifySchedule(SchedulePolicy pol, const int tileSplitSize = 0) { } 
# 55
extern thread_local int threadIdx_x; 
# 56
extern thread_local int blockIdx_x; 
# 57
extern int blockDim_x; 
# 65
inline int getTID() { 
# 67
return threadIdx_x; 
# 73
} 
# 75
inline int getBlockID() { 
# 77
return blockIdx_x; 
# 83
} 
# 85
inline int getBinID() { 
# 87
if (overrideBinID < 0) { 
# 88
return blockIdx_x; } else { 
# 90
return overrideBinID; }  
# 99
} 
# 101
inline int getNumThreads() { 
# 103
return blockDim_x; 
# 109
} 
# 111
inline int getGID() { 
# 113
return (blockDim_x * blockIdx_x) + threadIdx_x; 
# 119
} 
# 30 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/atomics.h"
namespace piko { 
# 34
extern "C" int atomicIncrement(int *v1) { 
# 39
int ret = *v1; 
# 40
(*v1) += 1; 
# 41
return ret; 
# 45
} 
# 49
extern "C" int atomicDecrement(int *v1) { 
# 54
int ret = *v1; 
# 55
(*v1) -= 1; 
# 56
return ret; 
# 60
} 
# 63
extern "C" int atomicMin(int *v1, int v2) { 
# 67
int ret = *v1; 
# 68
(*v1) = std::min(*v1, v2); 
# 69
return ret; 
# 73
} 
# 81
int atomicMinLocal(int *v1, int v2) { 
# 82
int ret = *v1; 
# 83
(*v1) = std::min(*v1, v2); 
# 84
return ret; 
# 85
} 
# 93
int atomicAdd(int *v1, int v2) { 
# 97
int ret = *v1; 
# 98
(*v1) += v2; 
# 99
return ret; 
# 103
} 
# 105
float atomicAdd(float *v1, float v2) { 
# 109
float ret = *v1; 
# 110
(*v1) += v2; 
# 111
return ret; 
# 115
} 
# 117
}
# 21 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/internal/datatypes.h"
template< class T> 
# 22
class PikoDataStructure { 
# 25
public: PikoDataStructure(int maxPrims) { 
# 26
(head_) = 0; 
# 27
(tail_) = 0; 
# 28
(numPrims_) = 0; 
# 29
(maxPrims_) = maxPrims; 
# 30
} 
# 34
void allocate() { 
# 38
(data_) = ((T *)malloc((maxPrims_) * sizeof(T))); 
# 42
} 
# 44
void free() { 
# 48
std::free(data_); 
# 52
} 
# 54
T *getData() { 
# 55
T *ret = (T *)malloc((maxPrims_) * sizeof(T)); 
# 60
memcpy(ret, data_, (maxPrims_) * sizeof(T)); 
# 65
return ret; 
# 66
} 
# 70
int getNumPrims() { 
# 71
return numPrims_; 
# 72
} 
# 74
void updatePrimCount(int delta) 
# 75
{ 
# 76
(numPrims_) += delta; 
# 77
} 
# 79
int getHead() { 
# 80
return head_; 
# 81
} 
# 83
int getTail() { 
# 84
return tail_; 
# 85
} 
# 88
void insert(T prim) { 
# 89
int pos = piko::atomicIncrement(&(tail_)) % (maxPrims_); 
# 91
piko::atomicIncrement(&(numPrims_)); 
# 92
((data_)[pos]) = prim; 
# 93
} 
# 98
protected: T *data_; 
# 107
int head_; 
# 108
int tail_; 
# 109
int numPrims_; 
# 110
int maxPrims_; 
# 111
}; 
# 113
template< class T> 
# 114
class PikoArray : public PikoDataStructure< T>  { 
# 116
public: PikoArray() : ::PikoDataStructure< T> (50000000) 
# 118
{ } 
# 122
void copyData(T *inputData, int count) { 
# 123
int c = (count < (this->maxPrims_)) ? count : (this->maxPrims_); 
# 124
(this->head_) = 0; 
# 125
(this->numPrims_) = c; 
# 131
memcpy((this->data_), inputData, c * sizeof(T)); 
# 135
} 
# 140
T &operator[](unsigned pos) { 
# 141
return (this->data_)[pos]; 
# 142
} 
# 144
}; 
# 146
template< class T> 
# 147
class Bin : public PikoDataStructure< T>  { 
# 149
public: Bin(int maxPrims) : ::PikoDataStructure< T> (maxPrims) 
# 151
{ } 
# 156
T fetchPrim() { 
# 157
int pos = ::piko::atomicIncrement(&(this->head_)) % (this->maxPrims_); 
# 159
return (this->data_)[pos]; 
# 160
} 
# 162
T fetchPrimAtomic() { 
# 163
int pos = ::piko::atomicIncrement(&(this->head_)) % (this->maxPrims_); 
# 165
::piko::atomicDecrement(&(this->numPrims_)); 
# 166
return (this->data_)[pos]; 
# 167
} 
# 170
T fetchPrim(int pos) { 
# 171
return (this->data_)[pos]; 
# 172
} 
# 174
}; 
# 40 "/usr/include/c++/5/ext/aligned_buffer.h" 3
namespace __gnu_cxx { 
# 46
template< class _Tp> 
# 47
struct __aligned_membuf { 
# 52
struct _Tp2 { _Tp _M_t; }; 
# 54
alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)]; 
# 56
__aligned_membuf() = default;
# 59
__aligned_membuf(std::nullptr_t) { } 
# 62
void *_M_addr() noexcept 
# 63
{ return static_cast< void *>(&(_M_storage)); } 
# 66
const void *_M_addr() const noexcept 
# 67
{ return static_cast< const void *>(&(_M_storage)); } 
# 70
_Tp *_M_ptr() noexcept 
# 71
{ return static_cast< _Tp *>(this->_M_addr()); } 
# 74
const _Tp *_M_ptr() const noexcept 
# 75
{ return static_cast< const _Tp *>(this->_M_addr()); } 
# 76
}; 
# 83
template< class _Tp> 
# 84
struct __aligned_buffer : public std::aligned_storage< sizeof(_Tp), std::alignment_of< _Tp> ::value>  { 
# 89
typename ::std::aligned_storage< sizeof(_Tp), ::std::alignment_of< _Tp> ::value> ::type _M_storage; 
# 91
__aligned_buffer() = default;
# 94
__aligned_buffer(::std::nullptr_t) { } 
# 97
void *_M_addr() noexcept 
# 98
{ 
# 99
return static_cast< void *>(&(_M_storage)); 
# 100
} 
# 103
const void *_M_addr() const noexcept 
# 104
{ 
# 105
return static_cast< const void *>(&(_M_storage)); 
# 106
} 
# 109
_Tp *_M_ptr() noexcept 
# 110
{ return static_cast< _Tp *>(this->_M_addr()); } 
# 113
const _Tp *_M_ptr() const noexcept 
# 114
{ return static_cast< const _Tp *>(this->_M_addr()); } 
# 115
}; 
# 117
}
# 72 "/usr/include/c++/5/bits/stl_tree.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 92
enum _Rb_tree_color { _S_red, _S_black}; 
# 94
struct _Rb_tree_node_base { 
# 96
typedef _Rb_tree_node_base *_Base_ptr; 
# 97
typedef const _Rb_tree_node_base *_Const_Base_ptr; 
# 99
_Rb_tree_color _M_color; 
# 100
_Base_ptr _M_parent; 
# 101
_Base_ptr _M_left; 
# 102
_Base_ptr _M_right; 
# 105
static _Base_ptr _S_minimum(_Base_ptr __x) noexcept 
# 106
{ 
# 107
while ((__x->_M_left) != (0)) { __x = (__x->_M_left); }  
# 108
return __x; 
# 109
} 
# 112
static _Const_Base_ptr _S_minimum(_Const_Base_ptr __x) noexcept 
# 113
{ 
# 114
while ((__x->_M_left) != (0)) { __x = (__x->_M_left); }  
# 115
return __x; 
# 116
} 
# 119
static _Base_ptr _S_maximum(_Base_ptr __x) noexcept 
# 120
{ 
# 121
while ((__x->_M_right) != (0)) { __x = (__x->_M_right); }  
# 122
return __x; 
# 123
} 
# 126
static _Const_Base_ptr _S_maximum(_Const_Base_ptr __x) noexcept 
# 127
{ 
# 128
while ((__x->_M_right) != (0)) { __x = (__x->_M_right); }  
# 129
return __x; 
# 130
} 
# 131
}; 
# 133
template< class _Val> 
# 134
struct _Rb_tree_node : public _Rb_tree_node_base { 
# 136
typedef _Rb_tree_node *_Link_type; 
# 149
__gnu_cxx::__aligned_membuf< _Val>  _M_storage; 
# 152
_Val *_M_valptr() 
# 153
{ return ((_M_storage)._M_ptr()); } 
# 156
const _Val *_M_valptr() const 
# 157
{ return ((_M_storage)._M_ptr()); } 
# 159
}; 
# 161
__attribute((__pure__)) _Rb_tree_node_base *
# 162
_Rb_tree_increment(_Rb_tree_node_base * __x) throw(); 
# 164
__attribute((__pure__)) const _Rb_tree_node_base *
# 165
_Rb_tree_increment(const _Rb_tree_node_base * __x) throw(); 
# 167
__attribute((__pure__)) _Rb_tree_node_base *
# 168
_Rb_tree_decrement(_Rb_tree_node_base * __x) throw(); 
# 170
__attribute((__pure__)) const _Rb_tree_node_base *
# 171
_Rb_tree_decrement(const _Rb_tree_node_base * __x) throw(); 
# 173
template< class _Tp> 
# 174
struct _Rb_tree_iterator { 
# 176
typedef _Tp value_type; 
# 177
typedef _Tp &reference; 
# 178
typedef _Tp *pointer; 
# 180
typedef bidirectional_iterator_tag iterator_category; 
# 181
typedef ptrdiff_t difference_type; 
# 183
typedef _Rb_tree_iterator _Self; 
# 184
typedef _Rb_tree_node_base::_Base_ptr _Base_ptr; 
# 185
typedef _Rb_tree_node< _Tp>  *_Link_type; 
# 187
_Rb_tree_iterator() noexcept : _M_node() 
# 188
{ } 
# 191
explicit _Rb_tree_iterator(_Base_ptr __x) noexcept : _M_node(__x) 
# 192
{ } 
# 195
reference operator*() const noexcept 
# 196
{ return *((static_cast< _Link_type>(_M_node))->_M_valptr()); } 
# 199
pointer operator->() const noexcept 
# 200
{ return ((static_cast< _Link_type>(_M_node))->_M_valptr()); } 
# 203
_Self &operator++() noexcept 
# 204
{ 
# 205
(_M_node) = _Rb_tree_increment(_M_node); 
# 206
return *this; 
# 207
} 
# 210
_Self operator++(int) noexcept 
# 211
{ 
# 212
_Self __tmp = *this; 
# 213
(_M_node) = _Rb_tree_increment(_M_node); 
# 214
return __tmp; 
# 215
} 
# 218
_Self &operator--() noexcept 
# 219
{ 
# 220
(_M_node) = _Rb_tree_decrement(_M_node); 
# 221
return *this; 
# 222
} 
# 225
_Self operator--(int) noexcept 
# 226
{ 
# 227
_Self __tmp = *this; 
# 228
(_M_node) = _Rb_tree_decrement(_M_node); 
# 229
return __tmp; 
# 230
} 
# 233
bool operator==(const _Self &__x) const noexcept 
# 234
{ return (_M_node) == (__x._M_node); } 
# 237
bool operator!=(const _Self &__x) const noexcept 
# 238
{ return (_M_node) != (__x._M_node); } 
# 240
_Base_ptr _M_node; 
# 241
}; 
# 243
template< class _Tp> 
# 244
struct _Rb_tree_const_iterator { 
# 246
typedef _Tp value_type; 
# 247
typedef const _Tp &reference; 
# 248
typedef const _Tp *pointer; 
# 250
typedef _Rb_tree_iterator< _Tp>  iterator; 
# 252
typedef bidirectional_iterator_tag iterator_category; 
# 253
typedef ptrdiff_t difference_type; 
# 255
typedef _Rb_tree_const_iterator _Self; 
# 256
typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr; 
# 257
typedef const _Rb_tree_node< _Tp>  *_Link_type; 
# 259
_Rb_tree_const_iterator() noexcept : _M_node() 
# 260
{ } 
# 263
explicit _Rb_tree_const_iterator(_Base_ptr __x) noexcept : _M_node(__x) 
# 264
{ } 
# 266
_Rb_tree_const_iterator(const iterator &__it) noexcept : _M_node(((__it._M_node))) 
# 267
{ } 
# 270
iterator _M_const_cast() const noexcept 
# 271
{ return ((iterator)(const_cast< typename _Rb_tree_iterator< _Tp> ::_Base_ptr>(_M_node))); } 
# 274
reference operator*() const noexcept 
# 275
{ return *((static_cast< _Link_type>(_M_node))->_M_valptr()); } 
# 278
pointer operator->() const noexcept 
# 279
{ return ((static_cast< _Link_type>(_M_node))->_M_valptr()); } 
# 282
_Self &operator++() noexcept 
# 283
{ 
# 284
(_M_node) = _Rb_tree_increment(_M_node); 
# 285
return *this; 
# 286
} 
# 289
_Self operator++(int) noexcept 
# 290
{ 
# 291
_Self __tmp = *this; 
# 292
(_M_node) = _Rb_tree_increment(_M_node); 
# 293
return __tmp; 
# 294
} 
# 297
_Self &operator--() noexcept 
# 298
{ 
# 299
(_M_node) = _Rb_tree_decrement(_M_node); 
# 300
return *this; 
# 301
} 
# 304
_Self operator--(int) noexcept 
# 305
{ 
# 306
_Self __tmp = *this; 
# 307
(_M_node) = _Rb_tree_decrement(_M_node); 
# 308
return __tmp; 
# 309
} 
# 312
bool operator==(const _Self &__x) const noexcept 
# 313
{ return (_M_node) == (__x._M_node); } 
# 316
bool operator!=(const _Self &__x) const noexcept 
# 317
{ return (_M_node) != (__x._M_node); } 
# 319
_Base_ptr _M_node; 
# 320
}; 
# 322
template< class _Val> inline bool 
# 324
operator==(const _Rb_tree_iterator< _Val>  &__x, const _Rb_tree_const_iterator< _Val>  &
# 325
__y) noexcept 
# 326
{ return (__x._M_node) == (__y._M_node); } 
# 328
template< class _Val> inline bool 
# 330
operator!=(const _Rb_tree_iterator< _Val>  &__x, const _Rb_tree_const_iterator< _Val>  &
# 331
__y) noexcept 
# 332
{ return (__x._M_node) != (__y._M_node); } 
# 335
void _Rb_tree_insert_and_rebalance(const bool __insert_left, _Rb_tree_node_base * __x, _Rb_tree_node_base * __p, _Rb_tree_node_base & __header) throw(); 
# 341
_Rb_tree_node_base *_Rb_tree_rebalance_for_erase(_Rb_tree_node_base *const __z, _Rb_tree_node_base & __header) throw(); 
# 345
template< class _Key, class _Val, class _KeyOfValue, class 
# 346
_Compare, class _Alloc = allocator< _Val> > 
# 347
class _Rb_tree { 
# 350
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Rb_tree_node< _Val> > ::other _Node_allocator; 
# 352
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Rb_tree_node< _Val> > ::other>  _Alloc_traits; 
# 355
protected: typedef _Rb_tree_node_base *_Base_ptr; 
# 356
typedef const _Rb_tree_node_base *_Const_Base_ptr; 
# 357
typedef _Rb_tree_node< _Val>  *_Link_type; 
# 358
typedef const _Rb_tree_node< _Val>  *_Const_Link_type; 
# 363
private: struct _Reuse_or_alloc_node { 
# 365
_Reuse_or_alloc_node(_Rb_tree &__t) : _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t) 
# 367
{ 
# 368
if (_M_root) 
# 369
{ 
# 370
((_M_root)->_M_parent) = (0); 
# 372
if ((_M_nodes)->_M_left) { 
# 373
(_M_nodes) = ((_M_nodes)->_M_left); }  
# 374
} else { 
# 376
(_M_nodes) = (0); }  
# 377
} 
# 380
_Reuse_or_alloc_node(const _Reuse_or_alloc_node &) = delete;
# 383
~_Reuse_or_alloc_node() 
# 384
{ (_M_t)._M_erase(static_cast< _Link_type>(_M_root)); } 
# 386
template< class _Arg> _Link_type 
# 391
operator()(_Arg &&__arg) 
# 393
{ 
# 394
_Link_type __node = static_cast< _Link_type>(_M_extract()); 
# 395
if (__node) 
# 396
{ 
# 397
(_M_t)._M_destroy_node(__node); 
# 398
((_M_t)._M_construct_node(__node, std::forward< _Arg> (__arg))); 
# 399
return __node; 
# 400
}  
# 402
return ((_M_t)._M_create_node(std::forward< _Arg> (__arg))); 
# 403
} 
# 407
private: _Base_ptr _M_extract() 
# 408
{ 
# 409
if (!(_M_nodes)) { 
# 410
return _M_nodes; }  
# 412
_Base_ptr __node = _M_nodes; 
# 413
(_M_nodes) = ((_M_nodes)->_M_parent); 
# 414
if (_M_nodes) 
# 415
{ 
# 416
if (((_M_nodes)->_M_right) == __node) 
# 417
{ 
# 418
((_M_nodes)->_M_right) = (0); 
# 420
if ((_M_nodes)->_M_left) 
# 421
{ 
# 422
(_M_nodes) = ((_M_nodes)->_M_left); 
# 424
while ((_M_nodes)->_M_right) { 
# 425
(_M_nodes) = ((_M_nodes)->_M_right); }  
# 427
if ((_M_nodes)->_M_left) { 
# 428
(_M_nodes) = ((_M_nodes)->_M_left); }  
# 429
}  
# 430
} else { 
# 432
((_M_nodes)->_M_left) = (0); }  
# 433
} else { 
# 435
(_M_root) = (0); }  
# 437
return __node; 
# 438
} 
# 440
_Base_ptr _M_root; 
# 441
_Base_ptr _M_nodes; 
# 442
_Rb_tree &_M_t; 
# 443
}; 
# 447
struct _Alloc_node { 
# 449
_Alloc_node(_Rb_tree &__t) : _M_t(__t) 
# 450
{ } 
# 452
template< class _Arg> _Link_type 
# 457
operator()(_Arg &&__arg) const 
# 459
{ return ((_M_t)._M_create_node(std::forward< _Arg> (__arg))); } 
# 462
private: _Rb_tree &_M_t; 
# 463
}; 
# 466
public: typedef _Key key_type; 
# 467
typedef _Val value_type; 
# 468
typedef value_type *pointer; 
# 469
typedef const value_type *const_pointer; 
# 470
typedef value_type &reference; 
# 471
typedef const value_type &const_reference; 
# 472
typedef size_t size_type; 
# 473
typedef ptrdiff_t difference_type; 
# 474
typedef _Alloc allocator_type; 
# 477
_Node_allocator &_M_get_Node_allocator() noexcept 
# 478
{ return *(static_cast< _Node_allocator *>(&(this->_M_impl))); } 
# 481
const _Node_allocator &_M_get_Node_allocator() const noexcept 
# 482
{ return *(static_cast< const _Node_allocator *>(&(this->_M_impl))); } 
# 485
allocator_type get_allocator() const noexcept 
# 486
{ return (allocator_type)this->_M_get_Node_allocator(); } 
# 490
protected: _Link_type _M_get_node() 
# 491
{ return _Alloc_traits::allocate(this->_M_get_Node_allocator(), 1); } 
# 494
void _M_put_node(_Link_type __p) noexcept 
# 495
{ _Alloc_traits::deallocate(this->_M_get_Node_allocator(), __p, 1); } 
# 522
template< class ..._Args> void 
# 524
_M_construct_node(_Link_type __node, _Args &&...__args) 
# 525
{ 
# 526
try 
# 527
{ 
# 528
::new (__node) _Rb_tree_node< _Val> ; 
# 529
_Alloc_traits::construct(this->_M_get_Node_allocator(), (__node->_M_valptr()), std::forward< _Args> (__args)...); 
# 532
} 
# 533
catch (...) 
# 534
{ 
# 535
(__node->~_Rb_tree_node< _Val> ()); 
# 536
_M_put_node(__node); 
# 537
throw; 
# 538
}  
# 539
} 
# 541
template< class ..._Args> _Link_type 
# 543
_M_create_node(_Args &&...__args) 
# 544
{ 
# 545
_Link_type __tmp = _M_get_node(); 
# 546
_M_construct_node(__tmp, std::forward< _Args> (__args)...); 
# 547
return __tmp; 
# 548
} 
# 551
void _M_destroy_node(_Link_type __p) noexcept 
# 552
{ 
# 553
_Alloc_traits::destroy(this->_M_get_Node_allocator(), (__p->_M_valptr())); 
# 554
(__p->~_Rb_tree_node< _Val> ()); 
# 555
} 
# 559
void _M_drop_node(_Link_type __p) noexcept 
# 560
{ 
# 561
_M_destroy_node(__p); 
# 562
_M_put_node(__p); 
# 563
} 
# 565
template< class _NodeGen> _Link_type 
# 567
_M_clone_node(_Const_Link_type __x, _NodeGen &__node_gen) 
# 568
{ 
# 569
_Link_type __tmp = __node_gen(*(__x->_M_valptr())); 
# 570
(__tmp->_M_color) = (__x->_M_color); 
# 571
(__tmp->_M_left) = 0; 
# 572
(__tmp->_M_right) = 0; 
# 573
return __tmp; 
# 574
} 
# 578
template< class _Key_compare, bool 
# 579
 = __is_pod(_Key_compare)> 
# 580
struct _Rb_tree_impl : public _Node_allocator { 
# 582
_Key_compare _M_key_compare; 
# 583
::std::_Rb_tree_node_base _M_header; 
# 584
typename ::std::_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::size_type _M_node_count; 
# 586
_Rb_tree_impl() : ::std::_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_Node_allocator(), _M_key_compare(), _M_header(), _M_node_count((0)) 
# 589
{ _M_initialize(); } 
# 591
_Rb_tree_impl(const _Key_compare &__comp, const typename ::std::_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_Node_allocator &__a) : ::std::_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_Node_allocator(__a), _M_key_compare(__comp), _M_header(), _M_node_count((0)) 
# 594
{ _M_initialize(); } 
# 597
_Rb_tree_impl(const _Key_compare &__comp, typename ::std::_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_Node_allocator &&__a) : ::std::_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_Node_allocator(::std::move(__a)), _M_key_compare(__comp), _M_header(), _M_node_count((0)) 
# 600
{ _M_initialize(); } 
# 604
void _M_reset() 
# 605
{ 
# 606
((this->_M_header)._M_parent) = (0); 
# 607
((this->_M_header)._M_left) = (&(this->_M_header)); 
# 608
((this->_M_header)._M_right) = (&(this->_M_header)); 
# 609
(this->_M_node_count) = (0); 
# 610
} 
# 614
private: void _M_initialize() 
# 615
{ 
# 616
((this->_M_header)._M_color) = _S_red; 
# 617
((this->_M_header)._M_parent) = (0); 
# 618
((this->_M_header)._M_left) = (&(this->_M_header)); 
# 619
((this->_M_header)._M_right) = (&(this->_M_header)); 
# 620
} 
# 621
}; 
# 623
_Rb_tree_impl< _Compare>  _M_impl; 
# 627
_Base_ptr &_M_root() noexcept 
# 628
{ return ((this->_M_impl)._M_header)._M_parent; } 
# 631
_Const_Base_ptr _M_root() const noexcept 
# 632
{ return ((this->_M_impl)._M_header)._M_parent; } 
# 635
_Base_ptr &_M_leftmost() noexcept 
# 636
{ return ((this->_M_impl)._M_header)._M_left; } 
# 639
_Const_Base_ptr _M_leftmost() const noexcept 
# 640
{ return ((this->_M_impl)._M_header)._M_left; } 
# 643
_Base_ptr &_M_rightmost() noexcept 
# 644
{ return ((this->_M_impl)._M_header)._M_right; } 
# 647
_Const_Base_ptr _M_rightmost() const noexcept 
# 648
{ return ((this->_M_impl)._M_header)._M_right; } 
# 651
_Link_type _M_begin() noexcept 
# 652
{ return static_cast< _Link_type>(((this->_M_impl)._M_header)._M_parent); } 
# 655
_Const_Link_type _M_begin() const noexcept 
# 656
{ 
# 657
return static_cast< _Const_Link_type>(((this->_M_impl)._M_header)._M_parent); 
# 659
} 
# 662
_Link_type _M_end() noexcept 
# 663
{ return reinterpret_cast< _Link_type>(&((this->_M_impl)._M_header)); } 
# 666
_Const_Link_type _M_end() const noexcept 
# 667
{ return reinterpret_cast< _Const_Link_type>(&((this->_M_impl)._M_header)); } 
# 670
static const_reference _S_value(_Const_Link_type __x) 
# 671
{ return *(__x->_M_valptr()); } 
# 674
static const _Key &_S_key(_Const_Link_type __x) 
# 675
{ return _KeyOfValue()(_S_value(__x)); } 
# 678
static _Link_type _S_left(_Base_ptr __x) noexcept 
# 679
{ return static_cast< _Link_type>(__x->_M_left); } 
# 682
static _Const_Link_type _S_left(_Const_Base_ptr __x) noexcept 
# 683
{ return static_cast< _Const_Link_type>(__x->_M_left); } 
# 686
static _Link_type _S_right(_Base_ptr __x) noexcept 
# 687
{ return static_cast< _Link_type>(__x->_M_right); } 
# 690
static _Const_Link_type _S_right(_Const_Base_ptr __x) noexcept 
# 691
{ return static_cast< _Const_Link_type>(__x->_M_right); } 
# 694
static const_reference _S_value(_Const_Base_ptr __x) 
# 695
{ return *((static_cast< _Const_Link_type>(__x))->_M_valptr()); } 
# 698
static const _Key &_S_key(_Const_Base_ptr __x) 
# 699
{ return _KeyOfValue()(_S_value(__x)); } 
# 702
static _Base_ptr _S_minimum(_Base_ptr __x) noexcept 
# 703
{ return _Rb_tree_node_base::_S_minimum(__x); } 
# 706
static _Const_Base_ptr _S_minimum(_Const_Base_ptr __x) noexcept 
# 707
{ return _Rb_tree_node_base::_S_minimum(__x); } 
# 710
static _Base_ptr _S_maximum(_Base_ptr __x) noexcept 
# 711
{ return _Rb_tree_node_base::_S_maximum(__x); } 
# 714
static _Const_Base_ptr _S_maximum(_Const_Base_ptr __x) noexcept 
# 715
{ return _Rb_tree_node_base::_S_maximum(__x); } 
# 718
public: typedef _Rb_tree_iterator< _Val>  iterator; 
# 719
typedef _Rb_tree_const_iterator< _Val>  const_iterator; 
# 721
typedef std::reverse_iterator< _Rb_tree_iterator< _Val> >  reverse_iterator; 
# 722
typedef std::reverse_iterator< _Rb_tree_const_iterator< _Val> >  const_reverse_iterator; 
# 726
private: pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  _M_get_insert_unique_pos(const key_type & __k); 
# 729
pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  _M_get_insert_equal_pos(const key_type & __k); 
# 732
pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  _M_get_insert_hint_unique_pos(const_iterator __pos, const key_type & __k); 
# 736
pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  _M_get_insert_hint_equal_pos(const_iterator __pos, const key_type & __k); 
# 740
template< class _Arg, class _NodeGen> iterator _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg && __v, _NodeGen &); 
# 745
iterator _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z); 
# 747
template< class _Arg> iterator _M_insert_lower(_Base_ptr __y, _Arg && __v); 
# 751
template< class _Arg> iterator _M_insert_equal_lower(_Arg && __x); 
# 756
iterator _M_insert_lower_node(_Base_ptr __p, _Link_type __z); 
# 759
iterator _M_insert_equal_lower_node(_Link_type __z); 
# 775
template< class _NodeGen> _Link_type _M_copy(_Const_Link_type __x, _Link_type __p, _NodeGen &); 
# 780
_Link_type _M_copy(_Const_Link_type __x, _Link_type __p) 
# 781
{ 
# 782
_Alloc_node __an(*this); 
# 783
return _M_copy(__x, __p, __an); 
# 784
} 
# 787
void _M_erase(_Link_type __x); 
# 790
iterator _M_lower_bound(_Link_type __x, _Link_type __y, const _Key & __k); 
# 794
const_iterator _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y, const _Key & __k) const; 
# 798
iterator _M_upper_bound(_Link_type __x, _Link_type __y, const _Key & __k); 
# 802
const_iterator _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y, const _Key & __k) const; 
# 807
public: _Rb_tree() { } 
# 809
_Rb_tree(const _Compare &__comp, const allocator_type &
# 810
__a = allocator_type()) : _M_impl(__comp, (_Node_allocator)__a) 
# 811
{ } 
# 813
_Rb_tree(const _Rb_tree &__x) : _M_impl(((__x._M_impl)._M_key_compare), _Alloc_traits::_S_select_on_copy(__x._M_get_Node_allocator())) 
# 816
{ 
# 817
if (__x._M_root() != (0)) 
# 818
{ 
# 819
this->_M_root() = _M_copy(__x._M_begin(), this->_M_end()); 
# 820
this->_M_leftmost() = _S_minimum(this->_M_root()); 
# 821
this->_M_rightmost() = _S_maximum(this->_M_root()); 
# 822
((_M_impl)._M_node_count) = ((__x._M_impl)._M_node_count); 
# 823
}  
# 824
} 
# 827
_Rb_tree(const allocator_type &__a) : _M_impl(_Compare(), (_Node_allocator)__a) 
# 829
{ } 
# 831
_Rb_tree(const _Rb_tree &__x, const allocator_type &__a) : _M_impl(((__x._M_impl)._M_key_compare), (_Node_allocator)__a) 
# 833
{ 
# 834
if (__x._M_root() != (nullptr)) 
# 835
{ 
# 836
this->_M_root() = _M_copy(__x._M_begin(), this->_M_end()); 
# 837
this->_M_leftmost() = _S_minimum(this->_M_root()); 
# 838
this->_M_rightmost() = _S_maximum(this->_M_root()); 
# 839
((_M_impl)._M_node_count) = ((__x._M_impl)._M_node_count); 
# 840
}  
# 841
} 
# 843
_Rb_tree(_Rb_tree &&__x) : _M_impl(((__x._M_impl)._M_key_compare), __x._M_get_Node_allocator()) 
# 845
{ 
# 846
if (__x._M_root() != (0)) { 
# 847
_M_move_data(__x, true_type()); }  
# 848
} 
# 850
_Rb_tree(_Rb_tree &&__x, const allocator_type &__a) : _Rb_tree(std::move(__x), (_Node_allocator)__a) 
# 852
{ } 
# 854
_Rb_tree(_Rb_tree && __x, _Node_allocator && __a); 
# 857
~_Rb_tree() noexcept 
# 858
{ _M_erase(this->_M_begin()); } 
# 861
_Rb_tree &operator=(const _Rb_tree & __x); 
# 865
_Compare key_comp() const 
# 866
{ return (_M_impl)._M_key_compare; } 
# 869
iterator begin() noexcept 
# 870
{ return ((iterator)((((this->_M_impl)._M_header)._M_left))); } 
# 873
const_iterator begin() const noexcept 
# 874
{ return ((const_iterator)((((this->_M_impl)._M_header)._M_left))); } 
# 877
iterator end() noexcept 
# 878
{ return ((iterator)(&((this->_M_impl)._M_header))); } 
# 881
const_iterator end() const noexcept 
# 882
{ return ((const_iterator)(&((this->_M_impl)._M_header))); } 
# 885
reverse_iterator rbegin() noexcept 
# 886
{ return ((reverse_iterator)(this->end())); } 
# 889
const_reverse_iterator rbegin() const noexcept 
# 890
{ return ((const_reverse_iterator)(this->end())); } 
# 893
reverse_iterator rend() noexcept 
# 894
{ return ((reverse_iterator)(this->begin())); } 
# 897
const_reverse_iterator rend() const noexcept 
# 898
{ return ((const_reverse_iterator)(this->begin())); } 
# 901
bool empty() const noexcept 
# 902
{ return ((_M_impl)._M_node_count) == 0; } 
# 905
size_type size() const noexcept 
# 906
{ return (_M_impl)._M_node_count; } 
# 909
size_type max_size() const noexcept 
# 910
{ return _Alloc_traits::max_size(this->_M_get_Node_allocator()); } 
# 914
void swap(_Rb_tree & __t) noexcept(_Alloc_traits::_S_nothrow_swap()); 
# 921
template< class _Arg> pair< _Rb_tree_iterator< _Val> , bool>  _M_insert_unique(_Arg && __x); 
# 925
template< class _Arg> iterator _M_insert_equal(_Arg && __x); 
# 929
template< class _Arg, class _NodeGen> iterator _M_insert_unique_(const_iterator __pos, _Arg && __x, _NodeGen &); 
# 933
template< class _Arg> iterator 
# 935
_M_insert_unique_(const_iterator __pos, _Arg &&__x) 
# 936
{ 
# 937
_Alloc_node __an(*this); 
# 938
return _M_insert_unique_(__pos, std::forward< _Arg> (__x), __an); 
# 939
} 
# 941
template< class _Arg, class _NodeGen> iterator _M_insert_equal_(const_iterator __pos, _Arg && __x, _NodeGen &); 
# 945
template< class _Arg> iterator 
# 947
_M_insert_equal_(const_iterator __pos, _Arg &&__x) 
# 948
{ 
# 949
_Alloc_node __an(*this); 
# 950
return _M_insert_equal_(__pos, std::forward< _Arg> (__x), __an); 
# 951
} 
# 953
template< class ..._Args> pair< _Rb_tree_iterator< _Val> , bool>  _M_emplace_unique(_Args && ...__args); 
# 957
template< class ..._Args> iterator _M_emplace_equal(_Args && ...__args); 
# 961
template< class ..._Args> iterator _M_emplace_hint_unique(const_iterator __pos, _Args && ...__args); 
# 965
template< class ..._Args> iterator _M_emplace_hint_equal(const_iterator __pos, _Args && ...__args); 
# 999
template< class _InputIterator> void _M_insert_unique(_InputIterator __first, _InputIterator __last); 
# 1003
template< class _InputIterator> void _M_insert_equal(_InputIterator __first, _InputIterator __last); 
# 1009
private: void _M_erase_aux(const_iterator __position); 
# 1012
void _M_erase_aux(const_iterator __first, const_iterator __last); 
# 1020
public: 
# 1018
__attribute((__abi_tag__("cxx11" ))) iterator 
# 1020
erase(const_iterator __position) 
# 1021
{ 
# 1022
const_iterator __result = __position; 
# 1023
++__result; 
# 1024
_M_erase_aux(__position); 
# 1025
return (__result._M_const_cast()); 
# 1026
} 
# 1029
__attribute((__abi_tag__("cxx11" ))) iterator 
# 1031
erase(iterator __position) 
# 1032
{ 
# 1033
iterator __result = __position; 
# 1034
++__result; 
# 1035
_M_erase_aux(__position); 
# 1036
return __result; 
# 1037
} 
# 1048
size_type erase(const key_type & __x); 
# 1053
__attribute((__abi_tag__("cxx11" ))) iterator 
# 1055
erase(const_iterator __first, const_iterator __last) 
# 1056
{ 
# 1057
_M_erase_aux(__first, __last); 
# 1058
return (__last._M_const_cast()); 
# 1059
} 
# 1070
void erase(const key_type * __first, const key_type * __last); 
# 1073
void clear() noexcept 
# 1074
{ 
# 1075
_M_erase(this->_M_begin()); 
# 1076
((_M_impl)._M_reset()); 
# 1077
} 
# 1081
iterator find(const key_type & __k); 
# 1084
const_iterator find(const key_type & __k) const; 
# 1087
size_type count(const key_type & __k) const; 
# 1090
iterator lower_bound(const key_type &__k) 
# 1091
{ return _M_lower_bound(this->_M_begin(), this->_M_end(), __k); } 
# 1094
const_iterator lower_bound(const key_type &__k) const 
# 1095
{ return _M_lower_bound(this->_M_begin(), this->_M_end(), __k); } 
# 1098
iterator upper_bound(const key_type &__k) 
# 1099
{ return _M_upper_bound(this->_M_begin(), this->_M_end(), __k); } 
# 1102
const_iterator upper_bound(const key_type &__k) const 
# 1103
{ return _M_upper_bound(this->_M_begin(), this->_M_end(), __k); } 
# 1106
pair< _Rb_tree_iterator< _Val> , _Rb_tree_iterator< _Val> >  equal_range(const key_type & __k); 
# 1109
pair< _Rb_tree_const_iterator< _Val> , _Rb_tree_const_iterator< _Val> >  equal_range(const key_type & __k) const; 
# 1244
bool __rb_verify() const; 
# 1248
_Rb_tree &operator=(_Rb_tree &&) noexcept(_Alloc_traits::_S_nothrow_move()); 
# 1250
template< class _Iterator> void _M_assign_unique(_Iterator, _Iterator); 
# 1254
template< class _Iterator> void _M_assign_equal(_Iterator, _Iterator); 
# 1261
private: void _M_move_data(_Rb_tree &, true_type); 
# 1266
void _M_move_data(_Rb_tree &, false_type); 
# 1268
}; 
# 1270
template< class _Key, class _Val, class _KeyOfValue, class 
# 1271
_Compare, class _Alloc> inline bool 
# 1273
operator==(const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &__x, const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1274
__y) 
# 1275
{ 
# 1276
return ((__x.size()) == (__y.size())) && std::equal((__x.begin()), (__x.end()), (__y.begin())); 
# 1278
} 
# 1280
template< class _Key, class _Val, class _KeyOfValue, class 
# 1281
_Compare, class _Alloc> inline bool 
# 1283
operator<(const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &__x, const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1284
__y) 
# 1285
{ 
# 1286
return std::lexicographical_compare((__x.begin()), (__x.end()), (__y.begin()), (__y.end())); 
# 1288
} 
# 1290
template< class _Key, class _Val, class _KeyOfValue, class 
# 1291
_Compare, class _Alloc> inline bool 
# 1293
operator!=(const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &__x, const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1294
__y) 
# 1295
{ return !(__x == __y); } 
# 1297
template< class _Key, class _Val, class _KeyOfValue, class 
# 1298
_Compare, class _Alloc> inline bool 
# 1300
operator>(const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &__x, const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1301
__y) 
# 1302
{ return __y < __x; } 
# 1304
template< class _Key, class _Val, class _KeyOfValue, class 
# 1305
_Compare, class _Alloc> inline bool 
# 1307
operator<=(const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &__x, const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1308
__y) 
# 1309
{ return !(__y < __x); } 
# 1311
template< class _Key, class _Val, class _KeyOfValue, class 
# 1312
_Compare, class _Alloc> inline bool 
# 1314
operator>=(const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &__x, const _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1315
__y) 
# 1316
{ return !(__x < __y); } 
# 1318
template< class _Key, class _Val, class _KeyOfValue, class 
# 1319
_Compare, class _Alloc> inline void 
# 1321
swap(_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &__x, _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1322
__y) 
# 1323
{ (__x.swap(__y)); } 
# 1326
template< class _Key, class _Val, class _KeyOfValue, class 
# 1327
_Compare, class _Alloc> 
# 1329
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_Rb_tree(_Rb_tree &&__x, _Node_allocator &&__a) : _M_impl(((__x._M_impl)._M_key_compare), std::move(__a)) 
# 1331
{ 
# 1332
using __eq = integral_constant< bool, __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Rb_tree_node< _Val> > ::other> ::_S_always_equal()> ; 
# 1333
if (__x._M_root() != (nullptr)) { 
# 1334
_M_move_data(__x, __eq()); }  
# 1335
} 
# 1337
template< class _Key, class _Val, class _KeyOfValue, class 
# 1338
_Compare, class _Alloc> void 
# 1341
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_move_data(_Rb_tree &__x, true_type) 
# 1342
{ 
# 1343
this->_M_root() = __x._M_root(); 
# 1344
this->_M_leftmost() = __x._M_leftmost(); 
# 1345
this->_M_rightmost() = __x._M_rightmost(); 
# 1346
(this->_M_root()->_M_parent) = this->_M_end(); 
# 1348
__x._M_root() = (0); 
# 1349
__x._M_leftmost() = __x._M_end(); 
# 1350
__x._M_rightmost() = __x._M_end(); 
# 1352
((this->_M_impl)._M_node_count) = ((__x._M_impl)._M_node_count); 
# 1353
((__x._M_impl)._M_node_count) = 0; 
# 1354
} 
# 1356
template< class _Key, class _Val, class _KeyOfValue, class 
# 1357
_Compare, class _Alloc> void 
# 1360
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_move_data(_Rb_tree &__x, false_type) 
# 1361
{ 
# 1362
if (this->_M_get_Node_allocator() == __x._M_get_Node_allocator()) { 
# 1363
_M_move_data(__x, true_type()); } else 
# 1365
{ 
# 1366
_Alloc_node __an(*this); 
# 1367
auto __lbd = [&__an](const value_type &
# 1368
__cval) 
# 1369
{ 
# 1370
auto &__val = const_cast< value_type &>(__cval); 
# 1371
return (__an)(std::move_if_noexcept(__val)); 
# 1372
} ; 
# 1373
this->_M_root() = _M_copy(__x._M_begin(), this->_M_end(), __lbd); 
# 1374
this->_M_leftmost() = _S_minimum(this->_M_root()); 
# 1375
this->_M_rightmost() = _S_maximum(this->_M_root()); 
# 1376
((_M_impl)._M_node_count) = ((__x._M_impl)._M_node_count); 
# 1377
}  
# 1378
} 
# 1380
template< class _Key, class _Val, class _KeyOfValue, class 
# 1381
_Compare, class _Alloc> _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1384
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::operator=(_Rb_tree &&__x) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 1386
{ 
# 1387
((_M_impl)._M_key_compare) = ((__x._M_impl)._M_key_compare); 
# 1388
if ((_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()) || (this->_M_get_Node_allocator() == __x._M_get_Node_allocator())) 
# 1391
{ 
# 1392
clear(); 
# 1393
if (__x._M_root() != (nullptr)) { 
# 1394
_M_move_data(__x, true_type()); }  
# 1395
std::__alloc_on_move(this->_M_get_Node_allocator(), __x._M_get_Node_allocator()); 
# 1397
return *this; 
# 1398
}  
# 1402
_Reuse_or_alloc_node __roan(*this); 
# 1403
((_M_impl)._M_reset()); 
# 1404
if (__x._M_root() != (nullptr)) 
# 1405
{ 
# 1406
auto __lbd = [&__roan](const value_type &
# 1407
__cval) 
# 1408
{ 
# 1409
auto &__val = const_cast< value_type &>(__cval); 
# 1410
return (__roan)(std::move_if_noexcept(__val)); 
# 1411
} ; 
# 1412
this->_M_root() = _M_copy(__x._M_begin(), this->_M_end(), __lbd); 
# 1413
this->_M_leftmost() = _S_minimum(this->_M_root()); 
# 1414
this->_M_rightmost() = _S_maximum(this->_M_root()); 
# 1415
((_M_impl)._M_node_count) = ((__x._M_impl)._M_node_count); 
# 1416
__x.clear(); 
# 1417
}  
# 1418
return *this; 
# 1419
} 
# 1421
template< class _Key, class _Val, class _KeyOfValue, class 
# 1422
_Compare, class _Alloc> 
# 1423
template< class _Iterator> void 
# 1426
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_assign_unique(_Iterator __first, _Iterator __last) 
# 1427
{ 
# 1428
_Reuse_or_alloc_node __roan(*this); 
# 1429
((_M_impl)._M_reset()); 
# 1430
for (; __first != __last; ++__first) { 
# 1431
_M_insert_unique_(this->end(), *__first, __roan); }  
# 1432
} 
# 1434
template< class _Key, class _Val, class _KeyOfValue, class 
# 1435
_Compare, class _Alloc> 
# 1436
template< class _Iterator> void 
# 1439
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_assign_equal(_Iterator __first, _Iterator __last) 
# 1440
{ 
# 1441
_Reuse_or_alloc_node __roan(*this); 
# 1442
((_M_impl)._M_reset()); 
# 1443
for (; __first != __last; ++__first) { 
# 1444
_M_insert_equal_(this->end(), *__first, __roan); }  
# 1445
} 
# 1448
template< class _Key, class _Val, class _KeyOfValue, class 
# 1449
_Compare, class _Alloc> _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc>  &
# 1452
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::operator=(const _Rb_tree &__x) 
# 1453
{ 
# 1454
if (this != (&__x)) 
# 1455
{ 
# 1458
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 1459
{ 
# 1460
auto &__this_alloc = this->_M_get_Node_allocator(); 
# 1461
auto &__that_alloc = __x._M_get_Node_allocator(); 
# 1462
if ((!_Alloc_traits::_S_always_equal()) && (__this_alloc != __that_alloc)) 
# 1464
{ 
# 1467
clear(); 
# 1468
std::__alloc_on_copy(__this_alloc, __that_alloc); 
# 1469
}  
# 1470
}  
# 1473
_Reuse_or_alloc_node __roan(*this); 
# 1474
((_M_impl)._M_reset()); 
# 1475
((_M_impl)._M_key_compare) = ((__x._M_impl)._M_key_compare); 
# 1476
if (__x._M_root() != (0)) 
# 1477
{ 
# 1478
this->_M_root() = _M_copy(__x._M_begin(), this->_M_end(), __roan); 
# 1479
this->_M_leftmost() = _S_minimum(this->_M_root()); 
# 1480
this->_M_rightmost() = _S_maximum(this->_M_root()); 
# 1481
((_M_impl)._M_node_count) = ((__x._M_impl)._M_node_count); 
# 1482
}  
# 1483
}  
# 1485
return *this; 
# 1486
} 
# 1488
template< class _Key, class _Val, class _KeyOfValue, class 
# 1489
_Compare, class _Alloc> 
# 1491
template< class _Arg, class _NodeGen> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 1497
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_(_Base_ptr __x, _Base_ptr __p, _Arg &&
# 1499
__v, _NodeGen &
# 1503
__node_gen) 
# 1504
{ 
# 1505
bool __insert_left = ((__x != (0)) || (__p == this->_M_end())) || ((_M_impl)._M_key_compare(_KeyOfValue()(__v), _S_key(__p))); 
# 1509
_Link_type __z = __node_gen(std::forward< _Arg> (__v)); 
# 1511
_Rb_tree_insert_and_rebalance(__insert_left, __z, __p, ((this->_M_impl)._M_header)); 
# 1513
++((_M_impl)._M_node_count); 
# 1514
return ((iterator)(__z)); 
# 1515
} 
# 1517
template< class _Key, class _Val, class _KeyOfValue, class 
# 1518
_Compare, class _Alloc> 
# 1520
template< class _Arg> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 1525
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_lower(_Base_ptr __p, _Arg &&__v) 
# 1529
{ 
# 1530
bool __insert_left = (__p == this->_M_end()) || (!((_M_impl)._M_key_compare(_S_key(__p), _KeyOfValue()(__v)))); 
# 1534
_Link_type __z = _M_create_node(std::forward< _Arg> (__v)); 
# 1536
_Rb_tree_insert_and_rebalance(__insert_left, __z, __p, ((this->_M_impl)._M_header)); 
# 1538
++((_M_impl)._M_node_count); 
# 1539
return ((iterator)(__z)); 
# 1540
} 
# 1542
template< class _Key, class _Val, class _KeyOfValue, class 
# 1543
_Compare, class _Alloc> 
# 1545
template< class _Arg> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 1550
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_equal_lower(_Arg &&__v) 
# 1554
{ 
# 1555
_Link_type __x = this->_M_begin(); 
# 1556
_Link_type __y = this->_M_end(); 
# 1557
while (__x != 0) 
# 1558
{ 
# 1559
__y = __x; 
# 1560
__x = ((!((_M_impl)._M_key_compare(_S_key(__x), _KeyOfValue()(__v)))) ? _S_left(__x) : _S_right(__x)); 
# 1562
}  
# 1563
return _M_insert_lower(__y, std::forward< _Arg> (__v)); 
# 1564
} 
# 1566
template< class _Key, class _Val, class _KoV, class 
# 1567
_Compare, class _Alloc> 
# 1568
template< class _NodeGen> typename _Rb_tree< _Key, _Val, _KoV, _Compare, _Alloc> ::_Link_type 
# 1571
_Rb_tree< _Key, _Val, _KoV, _Compare, _Alloc> ::_M_copy(_Const_Link_type __x, _Link_type __p, _NodeGen &__node_gen) 
# 1572
{ 
# 1574
_Link_type __top = _M_clone_node(__x, __node_gen); 
# 1575
(__top->_M_parent) = __p; 
# 1577
try 
# 1578
{ 
# 1579
if (__x->_M_right) { 
# 1580
(__top->_M_right) = _M_copy(_S_right(__x), __top, __node_gen); }  
# 1581
__p = __top; 
# 1582
__x = _S_left(__x); 
# 1584
while (__x != 0) 
# 1585
{ 
# 1586
_Link_type __y = _M_clone_node(__x, __node_gen); 
# 1587
(__p->_M_left) = __y; 
# 1588
(__y->_M_parent) = __p; 
# 1589
if (__x->_M_right) { 
# 1590
(__y->_M_right) = _M_copy(_S_right(__x), __y, __node_gen); }  
# 1591
__p = __y; 
# 1592
__x = _S_left(__x); 
# 1593
}  
# 1594
} 
# 1595
catch (...) 
# 1596
{ 
# 1597
_M_erase(__top); 
# 1598
throw; 
# 1599
}  
# 1600
return __top; 
# 1601
} 
# 1603
template< class _Key, class _Val, class _KeyOfValue, class 
# 1604
_Compare, class _Alloc> void 
# 1607
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_erase(_Link_type __x) 
# 1608
{ 
# 1610
while (__x != 0) 
# 1611
{ 
# 1612
_M_erase(_S_right(__x)); 
# 1613
_Link_type __y = _S_left(__x); 
# 1614
_M_drop_node(__x); 
# 1615
__x = __y; 
# 1616
}  
# 1617
} 
# 1619
template< class _Key, class _Val, class _KeyOfValue, class 
# 1620
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 1624
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_lower_bound(_Link_type __x, _Link_type __y, const _Key &
# 1625
__k) 
# 1626
{ 
# 1627
while (__x != 0) { 
# 1628
if (!((_M_impl)._M_key_compare(_S_key(__x), __k))) { 
# 1629
(__y = __x), (__x = _S_left(__x)); } else { 
# 1631
__x = _S_right(__x); }  }  
# 1632
return ((iterator)(__y)); 
# 1633
} 
# 1635
template< class _Key, class _Val, class _KeyOfValue, class 
# 1636
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::const_iterator 
# 1640
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_lower_bound(_Const_Link_type __x, _Const_Link_type __y, const _Key &
# 1641
__k) const 
# 1642
{ 
# 1643
while (__x != 0) { 
# 1644
if (!((_M_impl)._M_key_compare(_S_key(__x), __k))) { 
# 1645
(__y = __x), (__x = _S_left(__x)); } else { 
# 1647
__x = _S_right(__x); }  }  
# 1648
return ((const_iterator)(__y)); 
# 1649
} 
# 1651
template< class _Key, class _Val, class _KeyOfValue, class 
# 1652
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 1656
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_upper_bound(_Link_type __x, _Link_type __y, const _Key &
# 1657
__k) 
# 1658
{ 
# 1659
while (__x != 0) { 
# 1660
if (((_M_impl)._M_key_compare(__k, _S_key(__x)))) { 
# 1661
(__y = __x), (__x = _S_left(__x)); } else { 
# 1663
__x = _S_right(__x); }  }  
# 1664
return ((iterator)(__y)); 
# 1665
} 
# 1667
template< class _Key, class _Val, class _KeyOfValue, class 
# 1668
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::const_iterator 
# 1672
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_upper_bound(_Const_Link_type __x, _Const_Link_type __y, const _Key &
# 1673
__k) const 
# 1674
{ 
# 1675
while (__x != 0) { 
# 1676
if (((_M_impl)._M_key_compare(__k, _S_key(__x)))) { 
# 1677
(__y = __x), (__x = _S_left(__x)); } else { 
# 1679
__x = _S_right(__x); }  }  
# 1680
return ((const_iterator)(__y)); 
# 1681
} 
# 1683
template< class _Key, class _Val, class _KeyOfValue, class 
# 1684
_Compare, class _Alloc> pair< _Rb_tree_iterator< _Val> , _Rb_tree_iterator< _Val> >  
# 1690
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::equal_range(const _Key &__k) 
# 1691
{ 
# 1692
_Link_type __x = this->_M_begin(); 
# 1693
_Link_type __y = this->_M_end(); 
# 1694
while (__x != 0) 
# 1695
{ 
# 1696
if (((_M_impl)._M_key_compare(_S_key(__x), __k))) { 
# 1697
__x = _S_right(__x); } else { 
# 1698
if (((_M_impl)._M_key_compare(__k, _S_key(__x)))) { 
# 1699
(__y = __x), (__x = _S_left(__x)); } else 
# 1701
{ 
# 1702
_Link_type __xu(__x), __yu(__y); 
# 1703
(__y = __x), (__x = _S_left(__x)); 
# 1704
__xu = _S_right(__xu); 
# 1705
return pair< _Rb_tree_iterator< _Val> , _Rb_tree_iterator< _Val> > (_M_lower_bound(__x, __y, __k), _M_upper_bound(__xu, __yu, __k)); 
# 1708
}  }  
# 1709
}  
# 1710
return pair< _Rb_tree_iterator< _Val> , _Rb_tree_iterator< _Val> > (((iterator)(__y)), ((iterator)(__y))); 
# 1712
} 
# 1714
template< class _Key, class _Val, class _KeyOfValue, class 
# 1715
_Compare, class _Alloc> pair< _Rb_tree_const_iterator< _Val> , _Rb_tree_const_iterator< _Val> >  
# 1721
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::equal_range(const _Key &__k) const 
# 1722
{ 
# 1723
_Const_Link_type __x = this->_M_begin(); 
# 1724
_Const_Link_type __y = this->_M_end(); 
# 1725
while (__x != 0) 
# 1726
{ 
# 1727
if (((_M_impl)._M_key_compare(_S_key(__x), __k))) { 
# 1728
__x = _S_right(__x); } else { 
# 1729
if (((_M_impl)._M_key_compare(__k, _S_key(__x)))) { 
# 1730
(__y = __x), (__x = _S_left(__x)); } else 
# 1732
{ 
# 1733
_Const_Link_type __xu(__x), __yu(__y); 
# 1734
(__y = __x), (__x = _S_left(__x)); 
# 1735
__xu = _S_right(__xu); 
# 1736
return pair< _Rb_tree_const_iterator< _Val> , _Rb_tree_const_iterator< _Val> > (_M_lower_bound(__x, __y, __k), _M_upper_bound(__xu, __yu, __k)); 
# 1739
}  }  
# 1740
}  
# 1741
return pair< _Rb_tree_const_iterator< _Val> , _Rb_tree_const_iterator< _Val> > (((const_iterator)(__y)), ((const_iterator)(__y))); 
# 1743
} 
# 1745
template< class _Key, class _Val, class _KeyOfValue, class 
# 1746
_Compare, class _Alloc> void 
# 1749
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::swap(_Rb_tree &__t) noexcept(_Alloc_traits::_S_nothrow_swap()) 
# 1753
{ 
# 1754
if (this->_M_root() == (0)) 
# 1755
{ 
# 1756
if (__t._M_root() != (0)) 
# 1757
{ 
# 1758
this->_M_root() = __t._M_root(); 
# 1759
this->_M_leftmost() = __t._M_leftmost(); 
# 1760
this->_M_rightmost() = __t._M_rightmost(); 
# 1761
(this->_M_root()->_M_parent) = this->_M_end(); 
# 1762
((_M_impl)._M_node_count) = ((__t._M_impl)._M_node_count); 
# 1764
((__t._M_impl)._M_reset()); 
# 1765
}  
# 1766
} else { 
# 1767
if (__t._M_root() == (0)) 
# 1768
{ 
# 1769
__t._M_root() = this->_M_root(); 
# 1770
__t._M_leftmost() = this->_M_leftmost(); 
# 1771
__t._M_rightmost() = this->_M_rightmost(); 
# 1772
(__t._M_root()->_M_parent) = __t._M_end(); 
# 1773
((__t._M_impl)._M_node_count) = ((_M_impl)._M_node_count); 
# 1775
((_M_impl)._M_reset()); 
# 1776
} else 
# 1778
{ 
# 1779
std::swap(this->_M_root(), __t._M_root()); 
# 1780
std::swap(this->_M_leftmost(), __t._M_leftmost()); 
# 1781
std::swap(this->_M_rightmost(), __t._M_rightmost()); 
# 1783
(this->_M_root()->_M_parent) = this->_M_end(); 
# 1784
(__t._M_root()->_M_parent) = __t._M_end(); 
# 1785
std::swap(((this->_M_impl)._M_node_count), ((__t._M_impl)._M_node_count)); 
# 1786
}  }  
# 1788
std::swap(((this->_M_impl)._M_key_compare), ((__t._M_impl)._M_key_compare)); 
# 1790
_Alloc_traits::_S_on_swap(this->_M_get_Node_allocator(), __t._M_get_Node_allocator()); 
# 1792
} 
# 1794
template< class _Key, class _Val, class _KeyOfValue, class 
# 1795
_Compare, class _Alloc> pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  
# 1801
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_get_insert_unique_pos(const key_type &__k) 
# 1802
{ 
# 1803
typedef pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  _Res; 
# 1804
_Link_type __x = this->_M_begin(); 
# 1805
_Link_type __y = this->_M_end(); 
# 1806
bool __comp = true; 
# 1807
while (__x != 0) 
# 1808
{ 
# 1809
__y = __x; 
# 1810
__comp = ((_M_impl)._M_key_compare(__k, _S_key(__x))); 
# 1811
__x = (__comp ? _S_left(__x) : _S_right(__x)); 
# 1812
}  
# 1813
iterator __j = ((iterator)(__y)); 
# 1814
if (__comp) 
# 1815
{ 
# 1816
if (__j == this->begin()) { 
# 1817
return _Res(__x, __y); } else { 
# 1819
--__j; }  
# 1820
}  
# 1821
if (((_M_impl)._M_key_compare(_S_key((__j._M_node)), __k))) { 
# 1822
return _Res(__x, __y); }  
# 1823
return _Res((__j._M_node), 0); 
# 1824
} 
# 1826
template< class _Key, class _Val, class _KeyOfValue, class 
# 1827
_Compare, class _Alloc> pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  
# 1833
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_get_insert_equal_pos(const key_type &__k) 
# 1834
{ 
# 1835
typedef pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  _Res; 
# 1836
_Link_type __x = this->_M_begin(); 
# 1837
_Link_type __y = this->_M_end(); 
# 1838
while (__x != 0) 
# 1839
{ 
# 1840
__y = __x; 
# 1841
__x = ((((_M_impl)._M_key_compare(__k, _S_key(__x)))) ? _S_left(__x) : _S_right(__x)); 
# 1843
}  
# 1844
return _Res(__x, __y); 
# 1845
} 
# 1847
template< class _Key, class _Val, class _KeyOfValue, class 
# 1848
_Compare, class _Alloc> 
# 1850
template< class _Arg> pair< _Rb_tree_iterator< _Val> , bool>  
# 1856
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_unique(_Arg &&__v) 
# 1860
{ 
# 1861
typedef pair< _Rb_tree_iterator< _Val> , bool>  _Res; 
# 1862
pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  __res = _M_get_insert_unique_pos(_KeyOfValue()(__v)); 
# 1865
if (__res.second) 
# 1866
{ 
# 1867
_Alloc_node __an(*this); 
# 1868
return _Res(_M_insert_(__res.first, __res.second, std::forward< _Arg> (__v), __an), true); 
# 1871
}  
# 1873
return _Res(((iterator)(static_cast< _Link_type>(__res.first))), false); 
# 1874
} 
# 1876
template< class _Key, class _Val, class _KeyOfValue, class 
# 1877
_Compare, class _Alloc> 
# 1879
template< class _Arg> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 1884
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_equal(_Arg &&__v) 
# 1888
{ 
# 1889
pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  __res = _M_get_insert_equal_pos(_KeyOfValue()(__v)); 
# 1891
_Alloc_node __an(*this); 
# 1892
return _M_insert_(__res.first, __res.second, std::forward< _Arg> (__v), __an); 
# 1894
} 
# 1896
template< class _Key, class _Val, class _KeyOfValue, class 
# 1897
_Compare, class _Alloc> pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  
# 1903
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_get_insert_hint_unique_pos(const_iterator __position, const key_type &
# 1904
__k) 
# 1905
{ 
# 1906
iterator __pos = (__position._M_const_cast()); 
# 1907
typedef pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  _Res; 
# 1910
if ((__pos._M_node) == this->_M_end()) 
# 1911
{ 
# 1912
if ((size() > 0) && ((_M_impl)._M_key_compare(_S_key(this->_M_rightmost()), __k))) { 
# 1914
return _Res(0, this->_M_rightmost()); } else { 
# 1916
return _M_get_insert_unique_pos(__k); }  
# 1917
} else { 
# 1918
if (((_M_impl)._M_key_compare(__k, _S_key((__pos._M_node))))) 
# 1919
{ 
# 1921
iterator __before = __pos; 
# 1922
if ((__pos._M_node) == this->_M_leftmost()) { 
# 1923
return _Res(this->_M_leftmost(), this->_M_leftmost()); } else { 
# 1924
if (((_M_impl)._M_key_compare(_S_key(((--__before)._M_node)), __k))) 
# 1925
{ 
# 1926
if (_S_right((__before._M_node)) == 0) { 
# 1927
return _Res(0, (__before._M_node)); } else { 
# 1929
return _Res((__pos._M_node), (__pos._M_node)); }  
# 1930
} else { 
# 1932
return _M_get_insert_unique_pos(__k); }  }  
# 1933
} else { 
# 1934
if (((_M_impl)._M_key_compare(_S_key((__pos._M_node)), __k))) 
# 1935
{ 
# 1937
iterator __after = __pos; 
# 1938
if ((__pos._M_node) == this->_M_rightmost()) { 
# 1939
return _Res(0, this->_M_rightmost()); } else { 
# 1940
if (((_M_impl)._M_key_compare(__k, _S_key(((++__after)._M_node))))) 
# 1941
{ 
# 1942
if (_S_right((__pos._M_node)) == 0) { 
# 1943
return _Res(0, (__pos._M_node)); } else { 
# 1945
return _Res((__after._M_node), (__after._M_node)); }  
# 1946
} else { 
# 1948
return _M_get_insert_unique_pos(__k); }  }  
# 1949
} else { 
# 1952
return _Res((__pos._M_node), 0); }  }  }  
# 1953
} 
# 1955
template< class _Key, class _Val, class _KeyOfValue, class 
# 1956
_Compare, class _Alloc> 
# 1958
template< class _Arg, class _NodeGen> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 1964
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_unique_(const_iterator __position, _Arg &&
# 1966
__v, _NodeGen &
# 1970
__node_gen) 
# 1971
{ 
# 1972
pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  __res = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v)); 
# 1975
if (__res.second) { 
# 1976
return _M_insert_(__res.first, __res.second, std::forward< _Arg> (__v), __node_gen); }  
# 1979
return ((iterator)(static_cast< _Link_type>(__res.first))); 
# 1980
} 
# 1982
template< class _Key, class _Val, class _KeyOfValue, class 
# 1983
_Compare, class _Alloc> pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  
# 1989
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_get_insert_hint_equal_pos(const_iterator __position, const key_type &__k) 
# 1990
{ 
# 1991
iterator __pos = (__position._M_const_cast()); 
# 1992
typedef pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  _Res; 
# 1995
if ((__pos._M_node) == this->_M_end()) 
# 1996
{ 
# 1997
if ((size() > 0) && (!((_M_impl)._M_key_compare(__k, _S_key(this->_M_rightmost()))))) { 
# 1999
return _Res(0, this->_M_rightmost()); } else { 
# 2001
return _M_get_insert_equal_pos(__k); }  
# 2002
} else { 
# 2003
if (!((_M_impl)._M_key_compare(_S_key((__pos._M_node)), __k))) 
# 2004
{ 
# 2006
iterator __before = __pos; 
# 2007
if ((__pos._M_node) == this->_M_leftmost()) { 
# 2008
return _Res(this->_M_leftmost(), this->_M_leftmost()); } else { 
# 2009
if (!((_M_impl)._M_key_compare(__k, _S_key(((--__before)._M_node))))) 
# 2010
{ 
# 2011
if (_S_right((__before._M_node)) == 0) { 
# 2012
return _Res(0, (__before._M_node)); } else { 
# 2014
return _Res((__pos._M_node), (__pos._M_node)); }  
# 2015
} else { 
# 2017
return _M_get_insert_equal_pos(__k); }  }  
# 2018
} else 
# 2020
{ 
# 2022
iterator __after = __pos; 
# 2023
if ((__pos._M_node) == this->_M_rightmost()) { 
# 2024
return _Res(0, this->_M_rightmost()); } else { 
# 2025
if (!((_M_impl)._M_key_compare(_S_key(((++__after)._M_node)), __k))) 
# 2026
{ 
# 2027
if (_S_right((__pos._M_node)) == 0) { 
# 2028
return _Res(0, (__pos._M_node)); } else { 
# 2030
return _Res((__after._M_node), (__after._M_node)); }  
# 2031
} else { 
# 2033
return _Res(0, 0); }  }  
# 2034
}  }  
# 2035
} 
# 2037
template< class _Key, class _Val, class _KeyOfValue, class 
# 2038
_Compare, class _Alloc> 
# 2040
template< class _Arg, class _NodeGen> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 2046
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_equal_(const_iterator __position, _Arg &&
# 2048
__v, _NodeGen &
# 2052
__node_gen) 
# 2053
{ 
# 2054
pair< _Rb_tree_node_base *, _Rb_tree_node_base *>  __res = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v)); 
# 2057
if (__res.second) { 
# 2058
return _M_insert_(__res.first, __res.second, std::forward< _Arg> (__v), __node_gen); }  
# 2062
return _M_insert_equal_lower(std::forward< _Arg> (__v)); 
# 2063
} 
# 2066
template< class _Key, class _Val, class _KeyOfValue, class 
# 2067
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 2070
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z) 
# 2071
{ 
# 2072
bool __insert_left = ((__x != (0)) || (__p == this->_M_end())) || ((_M_impl)._M_key_compare(_S_key(__z), _S_key(__p))); 
# 2076
_Rb_tree_insert_and_rebalance(__insert_left, __z, __p, ((this->_M_impl)._M_header)); 
# 2078
++((_M_impl)._M_node_count); 
# 2079
return ((iterator)(__z)); 
# 2080
} 
# 2082
template< class _Key, class _Val, class _KeyOfValue, class 
# 2083
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 2086
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_lower_node(_Base_ptr __p, _Link_type __z) 
# 2087
{ 
# 2088
bool __insert_left = (__p == this->_M_end()) || (!((_M_impl)._M_key_compare(_S_key(__p), _S_key(__z)))); 
# 2092
_Rb_tree_insert_and_rebalance(__insert_left, __z, __p, ((this->_M_impl)._M_header)); 
# 2094
++((_M_impl)._M_node_count); 
# 2095
return ((iterator)(__z)); 
# 2096
} 
# 2098
template< class _Key, class _Val, class _KeyOfValue, class 
# 2099
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 2102
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_insert_equal_lower_node(_Link_type __z) 
# 2103
{ 
# 2104
_Link_type __x = this->_M_begin(); 
# 2105
_Link_type __y = this->_M_end(); 
# 2106
while (__x != 0) 
# 2107
{ 
# 2108
__y = __x; 
# 2109
__x = ((!((_M_impl)._M_key_compare(_S_key(__x), _S_key(__z)))) ? _S_left(__x) : _S_right(__x)); 
# 2111
}  
# 2112
return _M_insert_lower_node(__y, __z); 
# 2113
} 
# 2115
template< class _Key, class _Val, class _KeyOfValue, class 
# 2116
_Compare, class _Alloc> 
# 2117
template< class ..._Args> pair< _Rb_tree_iterator< _Val> , bool>  
# 2121
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_emplace_unique(_Args &&...__args) 
# 2122
{ 
# 2123
_Link_type __z = _M_create_node(std::forward< _Args> (__args)...); 
# 2125
try 
# 2126
{ 
# 2127
typedef pair< _Rb_tree_iterator< _Val> , bool>  _Res; 
# 2128
auto __res = _M_get_insert_unique_pos(_S_key(__z)); 
# 2129
if (__res.second) { 
# 2130
return _Res(_M_insert_node((__res.first), (__res.second), __z), true); }  
# 2132
_M_drop_node(__z); 
# 2133
return _Res(((iterator)(static_cast< _Link_type>(__res.first))), false); 
# 2134
} 
# 2135
catch (...) 
# 2136
{ 
# 2137
_M_drop_node(__z); 
# 2138
throw; 
# 2139
}  
# 2140
} 
# 2142
template< class _Key, class _Val, class _KeyOfValue, class 
# 2143
_Compare, class _Alloc> 
# 2144
template< class ..._Args> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 2147
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_emplace_equal(_Args &&...__args) 
# 2148
{ 
# 2149
_Link_type __z = _M_create_node(std::forward< _Args> (__args)...); 
# 2151
try 
# 2152
{ 
# 2153
auto __res = _M_get_insert_equal_pos(_S_key(__z)); 
# 2154
return _M_insert_node((__res.first), (__res.second), __z); 
# 2155
} 
# 2156
catch (...) 
# 2157
{ 
# 2158
_M_drop_node(__z); 
# 2159
throw; 
# 2160
}  
# 2161
} 
# 2163
template< class _Key, class _Val, class _KeyOfValue, class 
# 2164
_Compare, class _Alloc> 
# 2165
template< class ..._Args> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 2168
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_emplace_hint_unique(const_iterator __pos, _Args &&...__args) 
# 2169
{ 
# 2170
_Link_type __z = _M_create_node(std::forward< _Args> (__args)...); 
# 2172
try 
# 2173
{ 
# 2174
auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z)); 
# 2176
if (__res.second) { 
# 2177
return _M_insert_node((__res.first), (__res.second), __z); }  
# 2179
_M_drop_node(__z); 
# 2180
return ((iterator)(static_cast< _Link_type>(__res.first))); 
# 2181
} 
# 2182
catch (...) 
# 2183
{ 
# 2184
_M_drop_node(__z); 
# 2185
throw; 
# 2186
}  
# 2187
} 
# 2189
template< class _Key, class _Val, class _KeyOfValue, class 
# 2190
_Compare, class _Alloc> 
# 2191
template< class ..._Args> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 2194
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_emplace_hint_equal(const_iterator __pos, _Args &&...__args) 
# 2195
{ 
# 2196
_Link_type __z = _M_create_node(std::forward< _Args> (__args)...); 
# 2198
try 
# 2199
{ 
# 2200
auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z)); 
# 2202
if (__res.second) { 
# 2203
return _M_insert_node((__res.first), (__res.second), __z); }  
# 2205
return _M_insert_equal_lower_node(__z); 
# 2206
} 
# 2207
catch (...) 
# 2208
{ 
# 2209
_M_drop_node(__z); 
# 2210
throw; 
# 2211
}  
# 2212
} 
# 2215
template< class _Key, class _Val, class _KoV, class 
# 2216
_Cmp, class _Alloc> 
# 2217
template< class _II> void 
# 2220
_Rb_tree< _Key, _Val, _KoV, _Cmp, _Alloc> ::_M_insert_unique(_II __first, _II __last) 
# 2221
{ 
# 2222
_Alloc_node __an(*this); 
# 2223
for (; __first != __last; ++__first) { 
# 2224
_M_insert_unique_(this->end(), *__first, __an); }  
# 2225
} 
# 2227
template< class _Key, class _Val, class _KoV, class 
# 2228
_Cmp, class _Alloc> 
# 2229
template< class _II> void 
# 2232
_Rb_tree< _Key, _Val, _KoV, _Cmp, _Alloc> ::_M_insert_equal(_II __first, _II __last) 
# 2233
{ 
# 2234
_Alloc_node __an(*this); 
# 2235
for (; __first != __last; ++__first) { 
# 2236
_M_insert_equal_(this->end(), *__first, __an); }  
# 2237
} 
# 2239
template< class _Key, class _Val, class _KeyOfValue, class 
# 2240
_Compare, class _Alloc> void 
# 2243
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_erase_aux(const_iterator __position) 
# 2244
{ 
# 2245
_Link_type __y = static_cast< _Link_type>(_Rb_tree_rebalance_for_erase(const_cast< _Base_ptr>(__position._M_node), ((this->_M_impl)._M_header))); 
# 2249
_M_drop_node(__y); 
# 2250
--((_M_impl)._M_node_count); 
# 2251
} 
# 2253
template< class _Key, class _Val, class _KeyOfValue, class 
# 2254
_Compare, class _Alloc> void 
# 2257
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::_M_erase_aux(const_iterator __first, const_iterator __last) 
# 2258
{ 
# 2259
if ((__first == this->begin()) && (__last == this->end())) { 
# 2260
clear(); } else { 
# 2262
while (__first != __last) { 
# 2263
erase(__first++); }  }  
# 2264
} 
# 2266
template< class _Key, class _Val, class _KeyOfValue, class 
# 2267
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::size_type 
# 2270
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::erase(const _Key &__x) 
# 2271
{ 
# 2272
pair< _Rb_tree_iterator< _Val> , _Rb_tree_iterator< _Val> >  __p = equal_range(__x); 
# 2273
const size_type __old_size = size(); 
# 2274
erase((__p.first), (__p.second)); 
# 2275
return __old_size - size(); 
# 2276
} 
# 2278
template< class _Key, class _Val, class _KeyOfValue, class 
# 2279
_Compare, class _Alloc> void 
# 2282
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::erase(const _Key *__first, const _Key *__last) 
# 2283
{ 
# 2284
while (__first != __last) { 
# 2285
erase(*(__first++)); }  
# 2286
} 
# 2288
template< class _Key, class _Val, class _KeyOfValue, class 
# 2289
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::iterator 
# 2293
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::find(const _Key &__k) 
# 2294
{ 
# 2295
iterator __j = _M_lower_bound(this->_M_begin(), this->_M_end(), __k); 
# 2296
return ((__j == this->end()) || ((_M_impl)._M_key_compare(__k, _S_key((__j._M_node))))) ? this->end() : __j; 
# 2299
} 
# 2301
template< class _Key, class _Val, class _KeyOfValue, class 
# 2302
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::const_iterator 
# 2306
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::find(const _Key &__k) const 
# 2307
{ 
# 2308
const_iterator __j = _M_lower_bound(this->_M_begin(), this->_M_end(), __k); 
# 2309
return ((__j == this->end()) || ((_M_impl)._M_key_compare(__k, _S_key((__j._M_node))))) ? this->end() : __j; 
# 2312
} 
# 2314
template< class _Key, class _Val, class _KeyOfValue, class 
# 2315
_Compare, class _Alloc> typename _Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::size_type 
# 2318
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::count(const _Key &__k) const 
# 2319
{ 
# 2320
pair< _Rb_tree_const_iterator< _Val> , _Rb_tree_const_iterator< _Val> >  __p = equal_range(__k); 
# 2321
const size_type __n = std::distance((__p.first), (__p.second)); 
# 2322
return __n; 
# 2323
} 
# 2325
__attribute((__pure__)) unsigned 
# 2326
_Rb_tree_black_count(const _Rb_tree_node_base * __node, const _Rb_tree_node_base * __root) throw(); 
# 2329
template< class _Key, class _Val, class _KeyOfValue, class 
# 2330
_Compare, class _Alloc> bool 
# 2332
_Rb_tree< _Key, _Val, _KeyOfValue, _Compare, _Alloc> ::__rb_verify() const 
# 2333
{ 
# 2334
if ((((_M_impl)._M_node_count) == 0) || (this->begin() == this->end())) { 
# 2335
return (((_M_impl)._M_node_count) == 0) && (this->begin() == this->end()) && ((((this->_M_impl)._M_header)._M_left) == this->_M_end()) && ((((this->_M_impl)._M_header)._M_right) == this->_M_end()); }  
# 2339
unsigned __len = _Rb_tree_black_count(this->_M_leftmost(), this->_M_root()); 
# 2340
for (const_iterator __it = this->begin(); __it != this->end(); ++__it) 
# 2341
{ 
# 2342
_Const_Link_type __x = static_cast< _Const_Link_type>(__it._M_node); 
# 2343
_Const_Link_type __L = _S_left(__x); 
# 2344
_Const_Link_type __R = _S_right(__x); 
# 2346
if ((__x->_M_color) == _S_red) { 
# 2347
if ((__L && ((__L->_M_color) == _S_red)) || (__R && ((__R->_M_color) == _S_red))) { 
# 2349
return false; }  }  
# 2351
if (__L && ((_M_impl)._M_key_compare(_S_key(__x), _S_key(__L)))) { 
# 2352
return false; }  
# 2353
if (__R && ((_M_impl)._M_key_compare(_S_key(__R), _S_key(__x)))) { 
# 2354
return false; }  
# 2356
if ((!__L) && (!__R) && (_Rb_tree_black_count(__x, this->_M_root()) != __len)) { 
# 2357
return false; }  
# 2358
}  
# 2360
if (this->_M_leftmost() != _Rb_tree_node_base::_S_minimum(this->_M_root())) { 
# 2361
return false; }  
# 2362
if (this->_M_rightmost() != _Rb_tree_node_base::_S_maximum(this->_M_root())) { 
# 2363
return false; }  
# 2364
return true; 
# 2365
} 
# 2368
}
# 42 "/usr/include/c++/5/array" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _Tp, size_t _Nm> 
# 47
struct __array_traits { 
# 49
typedef _Tp _Type[_Nm]; 
# 52
static constexpr _Tp &_S_ref(const _Type &__t, size_t __n) noexcept 
# 53
{ return const_cast< _Tp &>((__t)[__n]); } 
# 56
static constexpr _Tp *_S_ptr(const _Type &__t) noexcept 
# 57
{ return const_cast< _Tp *>(__t); } 
# 58
}; 
# 60
template< class _Tp> 
# 61
struct __array_traits< _Tp, 0>  { 
# 63
struct _Type { }; 
# 66
static constexpr _Tp &_S_ref(const _Type &, size_t) noexcept 
# 67
{ return *(static_cast< _Tp *>(nullptr)); } 
# 70
static constexpr _Tp *_S_ptr(const _Type &) noexcept 
# 71
{ return nullptr; } 
# 72
}; 
# 88
template< class _Tp, size_t _Nm> 
# 89
struct array { 
# 91
typedef _Tp value_type; 
# 92
typedef value_type *pointer; 
# 93
typedef const value_type *const_pointer; 
# 94
typedef value_type &reference; 
# 95
typedef const value_type &const_reference; 
# 96
typedef value_type *iterator; 
# 97
typedef const value_type *const_iterator; 
# 98
typedef size_t size_type; 
# 99
typedef ptrdiff_t difference_type; 
# 100
typedef std::reverse_iterator< _Tp *>  reverse_iterator; 
# 101
typedef std::reverse_iterator< const _Tp *>  const_reverse_iterator; 
# 104
typedef __array_traits< _Tp, _Nm>  _AT_Type; 
# 105
typename __array_traits< _Tp, _Nm> ::_Type _M_elems; 
# 111
void fill(const value_type &__u) 
# 112
{ std::fill_n(this->begin(), size(), __u); } 
# 115
void swap(array &__other) noexcept(noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))) 
# 117
{ std::swap_ranges(this->begin(), this->end(), __other.begin()); } 
# 121
iterator begin() noexcept 
# 122
{ return (iterator)this->data(); } 
# 125
const_iterator begin() const noexcept 
# 126
{ return (const_iterator)this->data(); } 
# 129
iterator end() noexcept 
# 130
{ return (iterator)(this->data() + _Nm); } 
# 133
const_iterator end() const noexcept 
# 134
{ return (const_iterator)(this->data() + _Nm); } 
# 137
reverse_iterator rbegin() noexcept 
# 138
{ return ((reverse_iterator)(this->end())); } 
# 141
const_reverse_iterator rbegin() const noexcept 
# 142
{ return ((const_reverse_iterator)(this->end())); } 
# 145
reverse_iterator rend() noexcept 
# 146
{ return ((reverse_iterator)(this->begin())); } 
# 149
const_reverse_iterator rend() const noexcept 
# 150
{ return ((const_reverse_iterator)(this->begin())); } 
# 153
const_iterator cbegin() const noexcept 
# 154
{ return (const_iterator)this->data(); } 
# 157
const_iterator cend() const noexcept 
# 158
{ return (const_iterator)(this->data() + _Nm); } 
# 161
const_reverse_iterator crbegin() const noexcept 
# 162
{ return ((const_reverse_iterator)(this->end())); } 
# 165
const_reverse_iterator crend() const noexcept 
# 166
{ return ((const_reverse_iterator)(this->begin())); } 
# 170
constexpr size_type size() const noexcept { return _Nm; } 
# 173
constexpr size_type max_size() const noexcept { return _Nm; } 
# 176
constexpr bool empty() const noexcept { return size() == 0; } 
# 180
reference operator[](size_type __n) noexcept 
# 181
{ return _AT_Type::_S_ref(_M_elems, __n); } 
# 184
constexpr const_reference operator[](size_type __n) const noexcept 
# 185
{ return _AT_Type::_S_ref(_M_elems, __n); } 
# 188
reference at(size_type __n) 
# 189
{ 
# 190
if (__n >= _Nm) { 
# 191
std::__throw_out_of_range_fmt("array::at: __n (which is %zu) >= _Nm (which is %zu)", __n, _Nm); }  
# 194
return _AT_Type::_S_ref(_M_elems, __n); 
# 195
} 
# 198
constexpr const_reference at(size_type __n) const 
# 199
{ 
# 202
return (__n < _Nm) ? _AT_Type::_S_ref(_M_elems, __n) : (std::__throw_out_of_range_fmt("array::at: __n (which is %zu) >= _Nm (which is %zu)", __n, _Nm), _AT_Type::_S_ref(_M_elems, 0)); 
# 207
} 
# 210
reference front() noexcept 
# 211
{ return *this->begin(); } 
# 214
constexpr const_reference front() const noexcept 
# 215
{ return _AT_Type::_S_ref(_M_elems, 0); } 
# 218
reference back() noexcept 
# 219
{ return (_Nm) ? *(this->end() - 1) : (*this->end()); } 
# 222
constexpr const_reference back() const noexcept 
# 223
{ 
# 224
return (_Nm) ? _AT_Type::_S_ref(_M_elems, _Nm - (1)) : _AT_Type::_S_ref(_M_elems, 0); 
# 226
} 
# 229
pointer data() noexcept 
# 230
{ return _AT_Type::_S_ptr(_M_elems); } 
# 233
const_pointer data() const noexcept 
# 234
{ return _AT_Type::_S_ptr(_M_elems); } 
# 235
}; 
# 238
template< class _Tp, size_t _Nm> inline bool 
# 240
operator==(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 241
{ return std::equal((__one.begin()), (__one.end()), (__two.begin())); } 
# 243
template< class _Tp, size_t _Nm> inline bool 
# 245
operator!=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 246
{ return !(__one == __two); } 
# 248
template< class _Tp, size_t _Nm> inline bool 
# 250
operator<(const array< _Tp, _Nm>  &__a, const array< _Tp, _Nm>  &__b) 
# 251
{ 
# 252
return std::lexicographical_compare((__a.begin()), (__a.end()), (__b.begin()), (__b.end())); 
# 254
} 
# 256
template< class _Tp, size_t _Nm> inline bool 
# 258
operator>(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 259
{ return __two < __one; } 
# 261
template< class _Tp, size_t _Nm> inline bool 
# 263
operator<=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 264
{ return !(__one > __two); } 
# 266
template< class _Tp, size_t _Nm> inline bool 
# 268
operator>=(const array< _Tp, _Nm>  &__one, const array< _Tp, _Nm>  &__two) 
# 269
{ return !(__one < __two); } 
# 272
template< class _Tp, size_t _Nm> inline void 
# 274
swap(array< _Tp, _Nm>  &__one, array< _Tp, _Nm>  &__two) noexcept(noexcept((__one.swap(__two)))) 
# 276
{ (__one.swap(__two)); } 
# 278
template< size_t _Int, class _Tp, size_t _Nm> constexpr _Tp &
# 280
get(array< _Tp, _Nm>  &__arr) noexcept 
# 281
{ 
# 282
static_assert((_Int < _Nm), "index is out of bounds");
# 283
return std::__array_traits< _Tp, _Nm> ::_S_ref((__arr._M_elems), _Int); 
# 285
} 
# 287
template< size_t _Int, class _Tp, size_t _Nm> constexpr _Tp &&
# 289
get(array< _Tp, _Nm>  &&__arr) noexcept 
# 290
{ 
# 291
static_assert((_Int < _Nm), "index is out of bounds");
# 292
return std::move(std::get< _Int> (__arr)); 
# 293
} 
# 295
template< size_t _Int, class _Tp, size_t _Nm> constexpr const _Tp &
# 297
get(const array< _Tp, _Nm>  &__arr) noexcept 
# 298
{ 
# 299
static_assert((_Int < _Nm), "index is out of bounds");
# 300
return std::__array_traits< _Tp, _Nm> ::_S_ref((__arr._M_elems), _Int); 
# 302
} 
# 305
}
# 307
namespace std __attribute((__visibility__("default"))) { 
# 314
template< class _Tp> class tuple_size; 
# 318
template< class _Tp, size_t _Nm> 
# 319
struct tuple_size< array< _Tp, _Nm> >  : public integral_constant< unsigned long, _Nm>  { 
# 320
}; 
# 323
template< size_t _Int, class _Tp> class tuple_element; 
# 327
template< size_t _Int, class _Tp, size_t _Nm> 
# 328
struct tuple_element< _Int, array< _Tp, _Nm> >  { 
# 330
static_assert((_Int < _Nm), "index is out of bounds");
# 331
typedef _Tp type; 
# 332
}; 
# 335
}
# 34 "/usr/include/c++/5/bits/uses_allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
struct allocator_arg_t { }; 
# 41
constexpr allocator_arg_t allocator_arg = allocator_arg_t(); 
# 43
template< class _Tp, class _Alloc, class  = __void_t< > > 
# 44
struct __uses_allocator_helper : public false_type { 
# 45
}; 
# 47
template< class _Tp, class _Alloc> 
# 48
struct __uses_allocator_helper< _Tp, _Alloc, __void_t< typename _Tp::allocator_type> >  : public is_convertible< _Alloc, typename _Tp::allocator_type> ::type { 
# 51
}; 
# 54
template< class _Tp, class _Alloc> 
# 55
struct uses_allocator : public __uses_allocator_helper< _Tp, _Alloc> ::type { 
# 57
}; 
# 59
struct __uses_alloc_base { }; 
# 61
struct __uses_alloc0 : public __uses_alloc_base { 
# 63
struct _Sink { void operator=(const void *) { } } _M_a; 
# 64
}; 
# 66
template< class _Alloc> 
# 67
struct __uses_alloc1 : public __uses_alloc_base { const _Alloc *_M_a; }; 
# 69
template< class _Alloc> 
# 70
struct __uses_alloc2 : public __uses_alloc_base { const _Alloc *_M_a; }; 
# 72
template< bool , class _Tp, class _Alloc, class ..._Args> struct __uses_alloc; 
# 75
template< class _Tp, class _Alloc, class ..._Args> 
# 76
struct __uses_alloc< true, _Tp, _Alloc, _Args...>  : public conditional< is_constructible< _Tp, allocator_arg_t, _Alloc, _Args...> ::value, __uses_alloc1< _Alloc> , __uses_alloc2< _Alloc> > ::type { 
# 81
}; 
# 83
template< class _Tp, class _Alloc, class ..._Args> 
# 84
struct __uses_alloc< false, _Tp, _Alloc, _Args...>  : public __uses_alloc0 { 
# 85
}; 
# 87
template< class _Tp, class _Alloc, class ..._Args> using __uses_alloc_t = __uses_alloc< uses_allocator< _Tp, _Alloc> ::value, _Tp, _Alloc, _Args...> ; 
# 91
template< class _Tp, class _Alloc, class ..._Args> inline __uses_alloc_t< _Tp, _Alloc, _Args...>  
# 93
__use_alloc(const _Alloc &__a) 
# 94
{ 
# 95
__uses_alloc_t< _Tp, _Alloc, _Args...>  __ret; 
# 96
(__ret._M_a) = (&__a); 
# 97
return __ret; 
# 98
} 
# 101
}
# 42 "/usr/include/c++/5/tuple" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
template< size_t _Idx, class _Head, bool _IsEmptyNotFinal> struct _Head_base; 
# 54
template< size_t _Idx, class _Head> 
# 55
struct _Head_base< _Idx, _Head, true>  : public _Head { 
# 58
constexpr _Head_base() : _Head() 
# 59
{ } 
# 61
constexpr _Head_base(const _Head &__h) : _Head(__h) 
# 62
{ } 
# 64
constexpr _Head_base(const ::std::_Head_base< _Idx, _Head, true>  &) = default;
# 65
constexpr _Head_base(::std::_Head_base< _Idx, _Head, true>  &&) = default;
# 67
template< class _UHead> constexpr 
# 68
_Head_base(_UHead &&__h) : _Head(::std::forward< _UHead> (__h)) 
# 69
{ } 
# 71
_Head_base(::std::allocator_arg_t, ::std::__uses_alloc0) : _Head() 
# 72
{ } 
# 74
template< class _Alloc> 
# 75
_Head_base(::std::allocator_arg_t, __uses_alloc1< _Alloc>  __a) : _Head(allocator_arg, *(__a._M_a)) 
# 76
{ } 
# 78
template< class _Alloc> 
# 79
_Head_base(::std::allocator_arg_t, __uses_alloc2< _Alloc>  __a) : _Head(*(__a._M_a)) 
# 80
{ } 
# 82
template< class _UHead> 
# 83
_Head_base(::std::__uses_alloc0, _UHead &&__uhead) : _Head(::std::forward< _UHead> (__uhead)) 
# 84
{ } 
# 86
template< class _Alloc, class _UHead> 
# 87
_Head_base(__uses_alloc1< _Alloc>  __a, _UHead &&__uhead) : _Head(allocator_arg, *(__a._M_a), ::std::forward< _UHead> (__uhead)) 
# 88
{ } 
# 90
template< class _Alloc, class _UHead> 
# 91
_Head_base(__uses_alloc2< _Alloc>  __a, _UHead &&__uhead) : _Head(::std::forward< _UHead> (__uhead), *(__a._M_a)) 
# 92
{ } 
# 95
static constexpr _Head &_M_head(::std::_Head_base< _Idx, _Head, true>  &__b) noexcept { return __b; } 
# 98
static constexpr const _Head &_M_head(const ::std::_Head_base< _Idx, _Head, true>  &__b) noexcept { return __b; } 
# 99
}; 
# 101
template< size_t _Idx, class _Head> 
# 102
struct _Head_base< _Idx, _Head, false>  { 
# 104
constexpr _Head_base() : _M_head_impl() 
# 105
{ } 
# 107
constexpr _Head_base(const _Head &__h) : _M_head_impl(__h) 
# 108
{ } 
# 110
constexpr _Head_base(const std::_Head_base< _Idx, _Head, false>  &) = default;
# 111
constexpr _Head_base(std::_Head_base< _Idx, _Head, false>  &&) = default;
# 113
template< class _UHead> constexpr 
# 114
_Head_base(_UHead &&__h) : _M_head_impl(std::forward< _UHead> (__h)) 
# 115
{ } 
# 117
_Head_base(allocator_arg_t, __uses_alloc0) : _M_head_impl() 
# 118
{ } 
# 120
template< class _Alloc> 
# 121
_Head_base(allocator_arg_t, __uses_alloc1< _Alloc>  __a) : _M_head_impl(allocator_arg, *(__a._M_a)) 
# 122
{ } 
# 124
template< class _Alloc> 
# 125
_Head_base(allocator_arg_t, __uses_alloc2< _Alloc>  __a) : _M_head_impl(*(__a._M_a)) 
# 126
{ } 
# 128
template< class _UHead> 
# 129
_Head_base(__uses_alloc0, _UHead &&__uhead) : _M_head_impl(std::forward< _UHead> (__uhead)) 
# 130
{ } 
# 132
template< class _Alloc, class _UHead> 
# 133
_Head_base(__uses_alloc1< _Alloc>  __a, _UHead &&__uhead) : _M_head_impl(allocator_arg, *(__a._M_a), std::forward< _UHead> (__uhead)) 
# 135
{ } 
# 137
template< class _Alloc, class _UHead> 
# 138
_Head_base(__uses_alloc2< _Alloc>  __a, _UHead &&__uhead) : _M_head_impl(std::forward< _UHead> (__uhead), *(__a._M_a)) 
# 139
{ } 
# 142
static constexpr _Head &_M_head(std::_Head_base< _Idx, _Head, false>  &__b) noexcept { return __b._M_head_impl; } 
# 145
static constexpr const _Head &_M_head(const std::_Head_base< _Idx, _Head, false>  &__b) noexcept { return __b._M_head_impl; } 
# 147
_Head _M_head_impl; 
# 148
}; 
# 158
template< size_t _Idx, class ..._Elements> struct _Tuple_impl; 
# 161
template< class _Tp> 
# 162
struct __is_empty_non_tuple : public is_empty< _Tp>  { }; 
# 165
template< class _El0, class ..._El> 
# 166
struct __is_empty_non_tuple< tuple< _El0, _El...> >  : public false_type { }; 
# 169
template< class _Tp> using __empty_not_final = typename conditional< __is_final(_Tp), integral_constant< bool, false> , __is_empty_non_tuple< _Tp> > ::type; 
# 179
template< size_t _Idx, class _Head, class ..._Tail> 
# 180
struct _Tuple_impl< _Idx, _Head, _Tail...>  : public _Tuple_impl< _Idx + (1), _Tail...> , private _Head_base< _Idx, _Head, conditional< __is_final(_Head), integral_constant< bool, false> , __is_empty_non_tuple< _Head> > ::type::value>  { 
# 184
template< ::std::size_t , class ...> friend struct _Tuple_impl; 
# 186
typedef ::std::_Tuple_impl< _Idx + (1), _Tail...>  _Inherited; 
# 187
typedef _Head_base< _Idx, _Head, conditional< __is_final(_Head), ::std::integral_constant< bool, false> , __is_empty_non_tuple< _Head> > ::type::value>  _Base; 
# 190
static constexpr _Head &_M_head(::std::_Tuple_impl< _Idx, _Head, _Tail...>  &__t) noexcept { return _Base::_M_head(__t); } 
# 193
static constexpr const _Head &_M_head(const ::std::_Tuple_impl< _Idx, _Head, _Tail...>  &__t) noexcept { return _Base::_M_head(__t); } 
# 196
static constexpr _Inherited &_M_tail(::std::_Tuple_impl< _Idx, _Head, _Tail...>  &__t) noexcept { return __t; } 
# 199
static constexpr const _Inherited &_M_tail(const ::std::_Tuple_impl< _Idx, _Head, _Tail...>  &__t) noexcept { return __t; } 
# 201
constexpr _Tuple_impl() : _Inherited(), _Base() 
# 202
{ } 
# 205
constexpr explicit _Tuple_impl(const _Head &__head, const _Tail &...__tail) : _Inherited(__tail...), _Base(__head) 
# 206
{ } 
# 208
template< class _UHead, class ..._UTail, class  = typename enable_if< sizeof...(_Tail) == sizeof...(_UTail)> ::type> constexpr explicit 
# 211
_Tuple_impl(_UHead &&__head, _UTail &&...__tail) : _Inherited(::std::forward< _UTail> (__tail)...), _Base(::std::forward< _UHead> (__head)) 
# 213
{ } 
# 215
constexpr _Tuple_impl(const ::std::_Tuple_impl< _Idx, _Head, _Tail...>  &) = default;
# 218
constexpr _Tuple_impl(::std::_Tuple_impl< _Idx, _Head, _Tail...>  &&__in) noexcept(__and_< is_nothrow_move_constructible< _Head> , is_nothrow_move_constructible< ::std::_Tuple_impl< _Idx + (1), _Tail...> > > ::value) : _Inherited(::std::move(_M_tail(__in))), _Base(::std::forward< _Head> (_M_head(__in))) 
# 222
{ } 
# 224
template< class ..._UElements> constexpr 
# 225
_Tuple_impl(const ::std::_Tuple_impl< _Idx, _UElements...>  &__in) : _Inherited(_Tuple_impl< _Idx, _UElements...> ::_M_tail(__in)), _Base(_Tuple_impl< _Idx, _UElements...> ::_M_head(__in)) 
# 227
{ } 
# 229
template< class _UHead, class ..._UTails> constexpr 
# 230
_Tuple_impl(::std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&__in) : _Inherited(::std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in))), _Base(::std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in))) 
# 234
{ } 
# 236
template< class _Alloc> 
# 237
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a), _Base(__tag, __use_alloc< _Head> (__a)) 
# 239
{ } 
# 241
template< class _Alloc> 
# 242
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, const _Head &
# 243
__head, const _Tail &...__tail) : _Inherited(__tag, __a, __tail...), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), __head) 
# 245
{ } 
# 247
template< class _Alloc, class _UHead, class ..._UTail, class 
# 248
 = typename enable_if< sizeof...(_Tail) == sizeof...(_UTail)> ::type> 
# 250
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, _UHead &&
# 251
__head, _UTail &&...__tail) : _Inherited(__tag, __a, ::std::forward< _UTail> (__tail)...), _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), ::std::forward< _UHead> (__head)) 
# 254
{ } 
# 256
template< class _Alloc> 
# 257
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, const ::std::_Tuple_impl< _Idx, _Head, _Tail...>  &
# 258
__in) : _Inherited(__tag, __a, _M_tail(__in)), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _M_head(__in)) 
# 260
{ } 
# 262
template< class _Alloc> 
# 263
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, ::std::_Tuple_impl< _Idx, _Head, _Tail...>  &&
# 264
__in) : _Inherited(__tag, __a, ::std::move(_M_tail(__in))), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), ::std::forward< _Head> (_M_head(__in))) 
# 267
{ } 
# 269
template< class _Alloc, class ..._UElements> 
# 270
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, const ::std::_Tuple_impl< _Idx, _UElements...>  &
# 271
__in) : _Inherited(__tag, __a, _Tuple_impl< _Idx, _UElements...> ::_M_tail(__in)), _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _Tuple_impl< _Idx, _UElements...> ::_M_head(__in)) 
# 275
{ } 
# 277
template< class _Alloc, class _UHead, class ..._UTails> 
# 278
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, ::std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&
# 279
__in) : _Inherited(__tag, __a, ::std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in))), _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), ::std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in))) 
# 284
{ } 
# 287
::std::_Tuple_impl< _Idx, _Head, _Tail...>  &operator=(const ::std::_Tuple_impl< _Idx, _Head, _Tail...>  &__in) 
# 288
{ 
# 289
_M_head(*this) = _M_head(__in); 
# 290
_M_tail(*this) = _M_tail(__in); 
# 291
return *this; 
# 292
} 
# 295
::std::_Tuple_impl< _Idx, _Head, _Tail...>  &operator=(::std::_Tuple_impl< _Idx, _Head, _Tail...>  &&__in) noexcept(__and_< is_nothrow_move_assignable< _Head> , is_nothrow_move_assignable< ::std::_Tuple_impl< _Idx + (1), _Tail...> > > ::value) 
# 298
{ 
# 299
_M_head(*this) = ::std::forward< _Head> (_M_head(__in)); 
# 300
_M_tail(*this) = ::std::move(_M_tail(__in)); 
# 301
return *this; 
# 302
} 
# 304
template< class ..._UElements> ::std::_Tuple_impl< _Idx, _Head, _Tail...>  &
# 306
operator=(const ::std::_Tuple_impl< _Idx, _UElements...>  &__in) 
# 307
{ 
# 308
_M_head(*this) = _Tuple_impl< _Idx, _UElements...> ::_M_head(__in); 
# 309
_M_tail(*this) = _Tuple_impl< _Idx, _UElements...> ::_M_tail(__in); 
# 310
return *this; 
# 311
} 
# 313
template< class _UHead, class ..._UTails> ::std::_Tuple_impl< _Idx, _Head, _Tail...>  &
# 315
operator=(::std::_Tuple_impl< _Idx, _UHead, _UTails...>  &&__in) 
# 316
{ 
# 317
_M_head(*this) = ::std::forward< _UHead> (_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_head(__in)); 
# 319
_M_tail(*this) = ::std::move(_Tuple_impl< _Idx, _UHead, _UTails...> ::_M_tail(__in)); 
# 321
return *this; 
# 322
} 
# 326
protected: void _M_swap(::std::_Tuple_impl< _Idx, _Head, _Tail...>  &__in) noexcept(noexcept(swap(::std::declval< _Head &> (), ::std::declval< _Head &> ())) && noexcept((_M_tail(__in)._M_swap(_M_tail(__in))))) 
# 330
{ 
# 331
using ::std::swap;
# 332
swap(_M_head(*this), _M_head(__in)); 
# 333
_Inherited::_M_swap(_M_tail(__in)); 
# 334
} 
# 335
}; 
# 338
template< size_t _Idx, class _Head> 
# 339
struct _Tuple_impl< _Idx, _Head>  : private _Head_base< _Idx, _Head, conditional< __is_final(_Head), integral_constant< bool, false> , __is_empty_non_tuple< _Head> > ::type::value>  { 
# 342
template< ::std::size_t , class ...> friend struct _Tuple_impl; 
# 344
typedef _Head_base< _Idx, _Head, conditional< __is_final(_Head), ::std::integral_constant< bool, false> , __is_empty_non_tuple< _Head> > ::type::value>  _Base; 
# 347
static constexpr _Head &_M_head(::std::_Tuple_impl< _Idx, _Head>  &__t) noexcept { return _Base::_M_head(__t); } 
# 350
static constexpr const _Head &_M_head(const ::std::_Tuple_impl< _Idx, _Head>  &__t) noexcept { return _Base::_M_head(__t); } 
# 352
constexpr _Tuple_impl() : _Base() 
# 353
{ } 
# 356
constexpr explicit _Tuple_impl(const _Head &__head) : _Base(__head) 
# 357
{ } 
# 359
template< class _UHead> constexpr explicit 
# 361
_Tuple_impl(_UHead &&__head) : _Base(::std::forward< _UHead> (__head)) 
# 362
{ } 
# 364
constexpr _Tuple_impl(const ::std::_Tuple_impl< _Idx, _Head>  &) = default;
# 367
constexpr _Tuple_impl(::std::_Tuple_impl< _Idx, _Head>  &&__in) noexcept(is_nothrow_move_constructible< _Head> ::value) : _Base(::std::forward< _Head> (_M_head(__in))) 
# 369
{ } 
# 371
template< class _UHead> constexpr 
# 372
_Tuple_impl(const ::std::_Tuple_impl< _Idx, _UHead>  &__in) : _Base(_Tuple_impl< _Idx, _UHead> ::_M_head(__in)) 
# 373
{ } 
# 375
template< class _UHead> constexpr 
# 376
_Tuple_impl(::std::_Tuple_impl< _Idx, _UHead>  &&__in) : _Base(::std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in))) 
# 378
{ } 
# 380
template< class _Alloc> 
# 381
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a) : _Base(__tag, __use_alloc< _Head> (__a)) 
# 382
{ } 
# 384
template< class _Alloc> 
# 385
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, const _Head &
# 386
__head) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), __head) 
# 387
{ } 
# 389
template< class _Alloc, class _UHead> 
# 390
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, _UHead &&
# 391
__head) : _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), ::std::forward< _UHead> (__head)) 
# 393
{ } 
# 395
template< class _Alloc> 
# 396
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, const ::std::_Tuple_impl< _Idx, _Head>  &
# 397
__in) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _M_head(__in)) 
# 398
{ } 
# 400
template< class _Alloc> 
# 401
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, ::std::_Tuple_impl< _Idx, _Head>  &&
# 402
__in) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), ::std::forward< _Head> (_M_head(__in))) 
# 404
{ } 
# 406
template< class _Alloc, class _UHead> 
# 407
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, const ::std::_Tuple_impl< _Idx, _UHead>  &
# 408
__in) : _Base(__use_alloc< _Head, _Alloc, _Head> (__a), _Tuple_impl< _Idx, _UHead> ::_M_head(__in)) 
# 410
{ } 
# 412
template< class _Alloc, class _UHead> 
# 413
_Tuple_impl(::std::allocator_arg_t __tag, const _Alloc &__a, ::std::_Tuple_impl< _Idx, _UHead>  &&
# 414
__in) : _Base(__use_alloc< _Head, _Alloc, _UHead> (__a), ::std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in))) 
# 417
{ } 
# 420
::std::_Tuple_impl< _Idx, _Head>  &operator=(const ::std::_Tuple_impl< _Idx, _Head>  &__in) 
# 421
{ 
# 422
_M_head(*this) = _M_head(__in); 
# 423
return *this; 
# 424
} 
# 427
::std::_Tuple_impl< _Idx, _Head>  &operator=(::std::_Tuple_impl< _Idx, _Head>  &&__in) noexcept(is_nothrow_move_assignable< _Head> ::value) 
# 429
{ 
# 430
_M_head(*this) = ::std::forward< _Head> (_M_head(__in)); 
# 431
return *this; 
# 432
} 
# 434
template< class _UHead> ::std::_Tuple_impl< _Idx, _Head>  &
# 436
operator=(const ::std::_Tuple_impl< _Idx, _UHead>  &__in) 
# 437
{ 
# 438
_M_head(*this) = _Tuple_impl< _Idx, _UHead> ::_M_head(__in); 
# 439
return *this; 
# 440
} 
# 442
template< class _UHead> ::std::_Tuple_impl< _Idx, _Head>  &
# 444
operator=(::std::_Tuple_impl< _Idx, _UHead>  &&__in) 
# 445
{ 
# 446
_M_head(*this) = ::std::forward< _UHead> (_Tuple_impl< _Idx, _UHead> ::_M_head(__in)); 
# 448
return *this; 
# 449
} 
# 453
protected: void _M_swap(::std::_Tuple_impl< _Idx, _Head>  &__in) noexcept(noexcept(swap(::std::declval< _Head &> (), ::std::declval< _Head &> ()))) 
# 455
{ 
# 456
using ::std::swap;
# 457
swap(_M_head(*this), _M_head(__in)); 
# 458
} 
# 459
}; 
# 462
template< class ..._Elements> 
# 463
class tuple : public _Tuple_impl< 0UL, _Elements...>  { 
# 465
typedef _Tuple_impl< 0UL, _Elements...>  _Inherited; 
# 468
public: constexpr tuple() : _Inherited() 
# 469
{ } 
# 472
constexpr explicit tuple(const _Elements &...__elements) : _Inherited(__elements...) 
# 473
{ } 
# 475
template< class ..._UElements, class  = typename enable_if< __and_< is_convertible< _UElements, _Elements> ...> ::value> ::type> constexpr explicit 
# 479
tuple(_UElements &&...__elements) : _Inherited(::std::forward< _UElements> (__elements)...) 
# 480
{ } 
# 482
constexpr tuple(const tuple &) = default;
# 484
constexpr tuple(tuple &&) = default;
# 486
template< class ..._UElements, class  = typename enable_if< __and_< is_convertible< const _UElements &, _Elements> ...> ::value> ::type> constexpr 
# 489
tuple(const ::std::tuple< _UElements...>  &__in) : _Inherited(static_cast< const _Tuple_impl< 0UL, _UElements...>  &>(__in)) 
# 491
{ } 
# 493
template< class ..._UElements, class  = typename enable_if< __and_< is_convertible< _UElements, _Elements> ...> ::value> ::type> constexpr 
# 496
tuple(::std::tuple< _UElements...>  &&__in) : _Inherited(static_cast< _Tuple_impl< 0UL, _UElements...>  &&>(__in)) 
# 497
{ } 
# 501
template< class _Alloc> 
# 502
tuple(::std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a) 
# 503
{ } 
# 505
template< class _Alloc> 
# 506
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, const _Elements &...
# 507
__elements) : _Inherited(__tag, __a, __elements...) 
# 508
{ } 
# 510
template< class _Alloc, class ..._UElements, class  = typename enable_if< sizeof...(_UElements) == sizeof...(_Elements)> ::type> 
# 513
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, _UElements &&...
# 514
__elements) : _Inherited(__tag, __a, ::std::forward< _UElements> (__elements)...) 
# 516
{ } 
# 518
template< class _Alloc> 
# 519
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, const tuple &__in) : _Inherited(__tag, __a, static_cast< const _Inherited &>(__in)) 
# 520
{ } 
# 522
template< class _Alloc> 
# 523
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, tuple &&__in) : _Inherited(__tag, __a, static_cast< _Inherited &&>(__in)) 
# 524
{ } 
# 526
template< class _Alloc, class ..._UElements, class  = typename enable_if< sizeof...(_UElements) == sizeof...(_Elements)> ::type> 
# 529
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, const ::std::tuple< _UElements...>  &
# 530
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0UL, _UElements...>  &>(__in)) 
# 533
{ } 
# 535
template< class _Alloc, class ..._UElements, class  = typename enable_if< sizeof...(_UElements) == sizeof...(_Elements)> ::type> 
# 538
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, ::std::tuple< _UElements...>  &&
# 539
__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0UL, _UElements...>  &&>(__in)) 
# 542
{ } 
# 545
tuple &operator=(const tuple &__in) 
# 546
{ 
# 547
(static_cast< _Inherited &>(*this)) = __in; 
# 548
return *this; 
# 549
} 
# 552
tuple &operator=(tuple &&__in) noexcept(is_nothrow_move_assignable< _Tuple_impl< 0UL, _Elements...> > ::value) 
# 554
{ 
# 555
(static_cast< _Inherited &>(*this)) = ::std::move(__in); 
# 556
return *this; 
# 557
} 
# 559
template< class ..._UElements, class  = typename enable_if< sizeof...(_UElements) == sizeof...(_Elements)> ::type> tuple &
# 563
operator=(const ::std::tuple< _UElements...>  &__in) 
# 564
{ 
# 565
(static_cast< _Inherited &>(*this)) = __in; 
# 566
return *this; 
# 567
} 
# 569
template< class ..._UElements, class  = typename enable_if< sizeof...(_UElements) == sizeof...(_Elements)> ::type> tuple &
# 573
operator=(::std::tuple< _UElements...>  &&__in) 
# 574
{ 
# 575
(static_cast< _Inherited &>(*this)) = ::std::move(__in); 
# 576
return *this; 
# 577
} 
# 580
void swap(tuple &__in) noexcept(noexcept((__in._M_swap(__in)))) 
# 582
{ _Inherited::_M_swap(__in); } 
# 583
}; 
# 587
template<> class tuple< >  { 
# 590
public: void swap(std::tuple< >  &) noexcept { } 
# 591
}; 
# 595
template< class _T1, class _T2> 
# 596
class tuple< _T1, _T2>  : public _Tuple_impl< 0UL, _T1, _T2>  { 
# 598
typedef _Tuple_impl< 0UL, _T1, _T2>  _Inherited; 
# 601
public: constexpr tuple() : _Inherited() 
# 602
{ } 
# 605
constexpr explicit tuple(const _T1 &__a1, const _T2 &__a2) : _Inherited(__a1, __a2) 
# 606
{ } 
# 608
template< class _U1, class _U2, class  = typename enable_if< __and_< is_convertible< _U1, _T1> , is_convertible< _U2, _T2> > ::value> ::type> constexpr explicit 
# 612
tuple(_U1 &&__a1, _U2 &&__a2) : _Inherited(::std::forward< _U1> (__a1), ::std::forward< _U2> (__a2)) 
# 613
{ } 
# 615
constexpr tuple(const ::std::tuple< _T1, _T2>  &) = default;
# 617
constexpr tuple(::std::tuple< _T1, _T2>  &&) = default;
# 619
template< class _U1, class _U2, class  = typename enable_if< __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value> ::type> constexpr 
# 622
tuple(const ::std::tuple< _U1, _U2>  &__in) : _Inherited(static_cast< const _Tuple_impl< 0UL, _U1, _U2>  &>(__in)) 
# 623
{ } 
# 625
template< class _U1, class _U2, class  = typename enable_if< __and_< is_convertible< _U1, _T1> , is_convertible< _U2, _T2> > ::value> ::type> constexpr 
# 628
tuple(::std::tuple< _U1, _U2>  &&__in) : _Inherited(static_cast< _Tuple_impl< 0UL, _U1, _U2>  &&>(__in)) 
# 629
{ } 
# 631
template< class _U1, class _U2, class  = typename enable_if< __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value> ::type> constexpr 
# 634
tuple(const pair< _U1, _U2>  &__in) : _Inherited((__in.first), (__in.second)) 
# 635
{ } 
# 637
template< class _U1, class _U2, class  = typename enable_if< __and_< is_convertible< _U1, _T1> , is_convertible< _U2, _T2> > ::value> ::type> constexpr 
# 640
tuple(pair< _U1, _U2>  &&__in) : _Inherited(::std::forward< _U1> ((__in.first)), ::std::forward< _U2> ((__in.second))) 
# 642
{ } 
# 646
template< class _Alloc> 
# 647
tuple(::std::allocator_arg_t __tag, const _Alloc &__a) : _Inherited(__tag, __a) 
# 648
{ } 
# 650
template< class _Alloc> 
# 651
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, const _T1 &
# 652
__a1, const _T2 &__a2) : _Inherited(__tag, __a, __a1, __a2) 
# 653
{ } 
# 655
template< class _Alloc, class _U1, class _U2> 
# 656
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, _U1 &&__a1, _U2 &&__a2) : _Inherited(__tag, __a, ::std::forward< _U1> (__a1), ::std::forward< _U2> (__a2)) 
# 658
{ } 
# 660
template< class _Alloc> 
# 661
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, const ::std::tuple< _T1, _T2>  &__in) : _Inherited(__tag, __a, static_cast< const _Inherited &>(__in)) 
# 662
{ } 
# 664
template< class _Alloc> 
# 665
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, ::std::tuple< _T1, _T2>  &&__in) : _Inherited(__tag, __a, static_cast< _Inherited &&>(__in)) 
# 666
{ } 
# 668
template< class _Alloc, class _U1, class _U2> 
# 669
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, const ::std::tuple< _U1, _U2>  &
# 670
__in) : _Inherited(__tag, __a, static_cast< const _Tuple_impl< 0UL, _U1, _U2>  &>(__in)) 
# 673
{ } 
# 675
template< class _Alloc, class _U1, class _U2> 
# 676
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, ::std::tuple< _U1, _U2>  &&__in) : _Inherited(__tag, __a, static_cast< _Tuple_impl< 0UL, _U1, _U2>  &&>(__in)) 
# 678
{ } 
# 680
template< class _Alloc, class _U1, class _U2> 
# 681
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, const pair< _U1, _U2>  &
# 682
__in) : _Inherited(__tag, __a, (__in.first), (__in.second)) 
# 683
{ } 
# 685
template< class _Alloc, class _U1, class _U2> 
# 686
tuple(::std::allocator_arg_t __tag, const _Alloc &__a, pair< _U1, _U2>  &&__in) : _Inherited(__tag, __a, ::std::forward< _U1> ((__in.first)), ::std::forward< _U2> ((__in.second))) 
# 688
{ } 
# 691
::std::tuple< _T1, _T2>  &operator=(const ::std::tuple< _T1, _T2>  &__in) 
# 692
{ 
# 693
(static_cast< _Inherited &>(*this)) = __in; 
# 694
return *this; 
# 695
} 
# 698
::std::tuple< _T1, _T2>  &operator=(::std::tuple< _T1, _T2>  &&__in) noexcept(is_nothrow_move_assignable< _Tuple_impl< 0UL, _T1, _T2> > ::value) 
# 700
{ 
# 701
(static_cast< _Inherited &>(*this)) = ::std::move(__in); 
# 702
return *this; 
# 703
} 
# 705
template< class _U1, class _U2> ::std::tuple< _T1, _T2>  &
# 707
operator=(const ::std::tuple< _U1, _U2>  &__in) 
# 708
{ 
# 709
(static_cast< _Inherited &>(*this)) = __in; 
# 710
return *this; 
# 711
} 
# 713
template< class _U1, class _U2> ::std::tuple< _T1, _T2>  &
# 715
operator=(::std::tuple< _U1, _U2>  &&__in) 
# 716
{ 
# 717
(static_cast< _Inherited &>(*this)) = ::std::move(__in); 
# 718
return *this; 
# 719
} 
# 721
template< class _U1, class _U2> ::std::tuple< _T1, _T2>  &
# 723
operator=(const pair< _U1, _U2>  &__in) 
# 724
{ 
# 725
(this->_M_head(*this)) = (__in.first); 
# 726
((this->_M_tail(*this))._M_head(*this)) = (__in.second); 
# 727
return *this; 
# 728
} 
# 730
template< class _U1, class _U2> ::std::tuple< _T1, _T2>  &
# 732
operator=(pair< _U1, _U2>  &&__in) 
# 733
{ 
# 734
(this->_M_head(*this)) = ::std::forward< _U1> ((__in.first)); 
# 735
((this->_M_tail(*this))._M_head(*this)) = ::std::forward< _U2> ((__in.second)); 
# 736
return *this; 
# 737
} 
# 740
void swap(::std::tuple< _T1, _T2>  &__in) noexcept(noexcept((__in._M_swap(__in)))) 
# 742
{ _Inherited::_M_swap(__in); } 
# 743
}; 
# 747
template< size_t __i, class _Tp> class tuple_element; 
# 754
template< size_t __i, class _Head, class ..._Tail> 
# 755
struct tuple_element< __i, tuple< _Head, _Tail...> >  : public tuple_element< __i - (1), tuple< _Tail...> >  { 
# 756
}; 
# 761
template< class _Head, class ..._Tail> 
# 762
struct tuple_element< 0, tuple< _Head, _Tail...> >  { 
# 764
typedef _Head type; 
# 765
}; 
# 768
template< size_t __i, class _Tp> using __tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 771
template< size_t __i, class _Tp> 
# 772
struct tuple_element< __i, const _Tp>  { 
# 774
typedef typename add_const< __tuple_element_t< __i, _Tp> > ::type type; 
# 775
}; 
# 777
template< size_t __i, class _Tp> 
# 778
struct tuple_element< __i, volatile _Tp>  { 
# 780
typedef typename add_volatile< __tuple_element_t< __i, _Tp> > ::type type; 
# 781
}; 
# 783
template< size_t __i, class _Tp> 
# 784
struct tuple_element< __i, const volatile _Tp>  { 
# 786
typedef typename add_cv< __tuple_element_t< __i, _Tp> > ::type type; 
# 787
}; 
# 797
template< class _Tp> class tuple_size; 
# 802
template< class _Tp> 
# 803
struct tuple_size< const _Tp>  : public integral_constant< unsigned long, tuple_size< _Tp> ::value>  { 
# 804
}; 
# 806
template< class _Tp> 
# 807
struct tuple_size< volatile _Tp>  : public integral_constant< unsigned long, tuple_size< _Tp> ::value>  { 
# 808
}; 
# 810
template< class _Tp> 
# 811
struct tuple_size< const volatile _Tp>  : public integral_constant< unsigned long, tuple_size< _Tp> ::value>  { 
# 812
}; 
# 815
template< class ..._Elements> 
# 816
struct tuple_size< tuple< _Elements...> >  : public integral_constant< unsigned long, sizeof...(_Elements)>  { 
# 817
}; 
# 819
template< size_t __i, class _Head, class ..._Tail> constexpr _Head &
# 821
__get_helper(_Tuple_impl< __i, _Head, _Tail...>  &__t) noexcept 
# 822
{ return _Tuple_impl< __i, _Head, _Tail...> ::_M_head(__t); } 
# 824
template< size_t __i, class _Head, class ..._Tail> constexpr const _Head &
# 826
__get_helper(const _Tuple_impl< __i, _Head, _Tail...>  &__t) noexcept 
# 827
{ return _Tuple_impl< __i, _Head, _Tail...> ::_M_head(__t); } 
# 830
template< size_t __i, class ..._Elements> constexpr __tuple_element_t< __i, tuple< _Elements...> >  &
# 832
get(tuple< _Elements...>  &__t) noexcept 
# 833
{ return std::__get_helper< __i> (__t); } 
# 836
template< size_t __i, class ..._Elements> constexpr const __tuple_element_t< __i, tuple< _Elements...> >  &
# 838
get(const tuple< _Elements...>  &__t) noexcept 
# 839
{ return std::__get_helper< __i> (__t); } 
# 842
template< size_t __i, class ..._Elements> constexpr __tuple_element_t< __i, tuple< _Elements...> >  &&
# 844
get(tuple< _Elements...>  &&__t) noexcept 
# 845
{ 
# 846
typedef __tuple_element_t< __i, tuple< _Elements...> >  __element_type; 
# 847
return std::forward< __tuple_element_t< __i, tuple< _Elements...> >  &&> (std::get< __i> (__t)); 
# 848
} 
# 884
template< class _Tp, class _Up, size_t __i, size_t __size> 
# 885
struct __tuple_compare { 
# 888
static constexpr bool __eq(const _Tp &__t, const _Up &__u) 
# 889
{ 
# 890
return ((bool)(std::get< __i> (__t) == std::get< __i> (__u))) && __tuple_compare< _Tp, _Up, __i + (1), __size> ::__eq(__t, __u); 
# 892
} 
# 895
static constexpr bool __less(const _Tp &__t, const _Up &__u) 
# 896
{ 
# 897
return ((bool)(std::get< __i> (__t) < std::get< __i> (__u))) || ((!((bool)(std::get< __i> (__u) < std::get< __i> (__t)))) && __tuple_compare< _Tp, _Up, __i + (1), __size> ::__less(__t, __u)); 
# 900
} 
# 901
}; 
# 903
template< class _Tp, class _Up, size_t __size> 
# 904
struct __tuple_compare< _Tp, _Up, __size, __size>  { 
# 907
static constexpr bool __eq(const _Tp &, const _Up &) { return true; } 
# 910
static constexpr bool __less(const _Tp &, const _Up &) { return false; } 
# 911
}; 
# 913
template< class ..._TElements, class ..._UElements> constexpr bool 
# 915
operator==(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 916
__u) 
# 917
{ 
# 918
static_assert((sizeof...(_TElements) == sizeof...(_UElements)), "tuple objects can only be compared if they have equal sizes.");
# 920
using __compare = __tuple_compare< tuple< _TElements...> , tuple< _UElements...> , 0UL, sizeof...(_TElements)> ; 
# 923
return __compare::__eq(__t, __u); 
# 924
} 
# 926
template< class ..._TElements, class ..._UElements> constexpr bool 
# 928
operator<(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 929
__u) 
# 930
{ 
# 931
static_assert((sizeof...(_TElements) == sizeof...(_UElements)), "tuple objects can only be compared if they have equal sizes.");
# 933
using __compare = __tuple_compare< tuple< _TElements...> , tuple< _UElements...> , 0UL, sizeof...(_TElements)> ; 
# 936
return __compare::__less(__t, __u); 
# 937
} 
# 939
template< class ..._TElements, class ..._UElements> constexpr bool 
# 941
operator!=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 942
__u) 
# 943
{ return !(__t == __u); } 
# 945
template< class ..._TElements, class ..._UElements> constexpr bool 
# 947
operator>(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 948
__u) 
# 949
{ return __u < __t; } 
# 951
template< class ..._TElements, class ..._UElements> constexpr bool 
# 953
operator<=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 954
__u) 
# 955
{ return !(__u < __t); } 
# 957
template< class ..._TElements, class ..._UElements> constexpr bool 
# 959
operator>=(const tuple< _TElements...>  &__t, const tuple< _UElements...>  &
# 960
__u) 
# 961
{ return !(__t < __u); } 
# 964
template< class ..._Elements> constexpr tuple< typename __decay_and_strip< _Elements> ::__type...>  
# 966
make_tuple(_Elements &&...__args) 
# 967
{ 
# 969
typedef tuple< typename __decay_and_strip< _Elements> ::__type...>  __result_type; 
# 970
return __result_type(std::forward< _Elements> (__args)...); 
# 971
} 
# 973
template< class ..._Elements> tuple< _Elements &&...>  
# 975
forward_as_tuple(_Elements &&...__args) noexcept 
# 976
{ return tuple< _Elements &&...> (std::forward< _Elements> (__args)...); } 
# 978
template< class > 
# 979
struct __is_tuple_like_impl : public false_type { 
# 980
}; 
# 982
template< class ..._Tps> 
# 983
struct __is_tuple_like_impl< tuple< _Tps...> >  : public true_type { 
# 984
}; 
# 986
template< class _T1, class _T2> 
# 987
struct __is_tuple_like_impl< pair< _T1, _T2> >  : public true_type { 
# 988
}; 
# 990
template< class _Tp, size_t _Nm> 
# 991
struct __is_tuple_like_impl< array< _Tp, _Nm> >  : public true_type { 
# 992
}; 
# 995
template< class _Tp> 
# 996
struct __is_tuple_like : public __is_tuple_like_impl< typename remove_cv< typename remove_reference< _Tp> ::type> ::type> ::type { 
# 999
}; 
# 1001
template< size_t , class , class , size_t > struct __make_tuple_impl; 
# 1004
template< size_t _Idx, class _Tuple, class ..._Tp, size_t _Nm> 
# 1005
struct __make_tuple_impl< _Idx, tuple< _Tp...> , _Tuple, _Nm>  : public __make_tuple_impl< _Idx + (1), tuple< _Tp..., __tuple_element_t< _Idx, _Tuple> > , _Tuple, _Nm>  { 
# 1009
}; 
# 1011
template< size_t _Nm, class _Tuple, class ..._Tp> 
# 1012
struct __make_tuple_impl< _Nm, tuple< _Tp...> , _Tuple, _Nm>  { 
# 1014
typedef tuple< _Tp...>  __type; 
# 1015
}; 
# 1017
template< class _Tuple> 
# 1018
struct __do_make_tuple : public __make_tuple_impl< 0UL, tuple< > , _Tuple, tuple_size< _Tuple> ::value>  { 
# 1020
}; 
# 1023
template< class _Tuple> 
# 1024
struct __make_tuple : public __do_make_tuple< typename remove_cv< typename remove_reference< _Tuple> ::type> ::type>  { 
# 1027
}; 
# 1030
template< class ...> struct __combine_tuples; 
# 1034
template<> struct __combine_tuples< >  { 
# 1036
typedef tuple< >  __type; 
# 1037
}; 
# 1039
template< class ..._Ts> 
# 1040
struct __combine_tuples< tuple< _Ts...> >  { 
# 1042
typedef tuple< _Ts...>  __type; 
# 1043
}; 
# 1045
template< class ..._T1s, class ..._T2s, class ..._Rem> 
# 1046
struct __combine_tuples< tuple< _T1s...> , tuple< _T2s...> , _Rem...>  { 
# 1049
typedef typename std::__combine_tuples< tuple< _T1s..., _T2s...> , _Rem...> ::__type __type; 
# 1050
}; 
# 1053
template< class ..._Tpls> 
# 1054
struct __tuple_cat_result { 
# 1057
typedef typename __combine_tuples< typename __make_tuple< _Tpls> ::__type...> ::__type __type; 
# 1058
}; 
# 1062
template< class ...> struct __make_1st_indices; 
# 1066
template<> struct __make_1st_indices< >  { 
# 1068
typedef _Index_tuple< >  __type; 
# 1069
}; 
# 1071
template< class _Tp, class ..._Tpls> 
# 1072
struct __make_1st_indices< _Tp, _Tpls...>  { 
# 1075
typedef typename _Build_index_tuple< tuple_size< typename remove_reference< _Tp> ::type> ::value> ::__type __type; 
# 1076
}; 
# 1081
template< class _Ret, class _Indices, class ..._Tpls> struct __tuple_concater; 
# 1084
template< class _Ret, size_t ..._Is, class _Tp, class ..._Tpls> 
# 1085
struct __tuple_concater< _Ret, _Index_tuple< _Is...> , _Tp, _Tpls...>  { 
# 1087
template< class ..._Us> static constexpr _Ret 
# 1089
_S_do(_Tp &&__tp, _Tpls &&...__tps, _Us &&...__us) 
# 1090
{ 
# 1091
typedef typename __make_1st_indices< _Tpls...> ::__type __idx; 
# 1092
typedef std::__tuple_concater< _Ret, typename __make_1st_indices< _Tpls...> ::__type, _Tpls...>  __next; 
# 1093
return __next::_S_do(std::forward< _Tpls> (__tps)..., std::forward< _Us> (__us)..., std::get< _Is> (std::forward< _Tp> (__tp))...); 
# 1096
} 
# 1097
}; 
# 1099
template< class _Ret> 
# 1100
struct __tuple_concater< _Ret, _Index_tuple< > >  { 
# 1102
template< class ..._Us> static constexpr _Ret 
# 1104
_S_do(_Us &&...__us) 
# 1105
{ 
# 1106
return _Ret(std::forward< _Us> (__us)...); 
# 1107
} 
# 1108
}; 
# 1111
template< class ..._Tpls, class  = typename enable_if< __and_< __is_tuple_like< _Tpls> ...> ::value> ::type> constexpr auto 
# 1114
tuple_cat(_Tpls &&...__tpls)->typename __tuple_cat_result< _Tpls...> ::__type 
# 1116
{ 
# 1117
typedef typename __tuple_cat_result< _Tpls...> ::__type __ret; 
# 1118
typedef typename __make_1st_indices< _Tpls...> ::__type __idx; 
# 1119
typedef __tuple_concater< typename __tuple_cat_result< _Tpls...> ::__type, typename __make_1st_indices< _Tpls...> ::__type, _Tpls...>  __concater; 
# 1120
return __concater::_S_do(std::forward< _Tpls> (__tpls)...); 
# 1121
} 
# 1124
template< class ..._Elements> inline tuple< _Elements &...>  
# 1126
tie(_Elements &...__args) noexcept 
# 1127
{ return tuple< _Elements &...> (__args...); } 
# 1130
template< class ..._Elements> inline void 
# 1132
swap(tuple< _Elements...>  &__x, tuple< _Elements...>  &__y) noexcept(noexcept((__x.swap(__y)))) 
# 1134
{ (__x.swap(__y)); } 
# 1138
struct _Swallow_assign { 
# 1140
template< class _Tp> const _Swallow_assign &
# 1142
operator=(const _Tp &) const 
# 1143
{ return *this; } 
# 1144
}; 
# 1146
const _Swallow_assign ignore{}; 
# 1149
template< class ..._Types, class _Alloc> 
# 1150
struct uses_allocator< tuple< _Types...> , _Alloc>  : public true_type { }; 
# 1153
template< class _T1, class _T2> 
# 1154
template< class ..._Args1, class ..._Args2> inline 
# 1157
pair< _T1, _T2> ::pair(piecewise_construct_t, tuple< _Args1...>  
# 1158
__first, tuple< _Args2...>  __second) : pair(__first, __second, typename _Build_index_tuple< sizeof...(_Args1)> ::__type(), typename _Build_index_tuple< sizeof...(_Args2)> ::__type()) 
# 1162
{ } 
# 1164
template< class _T1, class _T2> 
# 1165
template< class ..._Args1, size_t ..._Indexes1, class ...
# 1166
_Args2, size_t ..._Indexes2> inline 
# 1169
pair< _T1, _T2> ::pair(tuple< _Args1...>  &__tuple1, tuple< _Args2...>  &__tuple2, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ) : first(std::forward< _Args1> (std::get< _Indexes1> (__tuple1))...), second(std::forward< _Args2> (std::get< _Indexes2> (__tuple2))...) 
# 1173
{ } 
# 1178
}
# 66 "/usr/include/c++/5/bits/stl_map.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 94
template< class _Key, class _Tp, class _Compare = less< _Key> , class 
# 95
_Alloc = allocator< pair< const _Key, _Tp> > > 
# 96
class map { 
# 99
public: typedef _Key key_type; 
# 100
typedef _Tp mapped_type; 
# 101
typedef pair< const _Key, _Tp>  value_type; 
# 102
typedef _Compare key_compare; 
# 103
typedef _Alloc allocator_type; 
# 107
private: typedef typename _Alloc::value_type _Alloc_value_type; 
# 114
public: class value_compare : public binary_function< pair< const _Key, _Tp> , pair< const _Key, _Tp> , bool>  { 
# 117
friend class map; 
# 119
protected: _Compare comp; 
# 121
value_compare(_Compare __c) : comp(__c) 
# 122
{ } 
# 125
public: bool operator()(const typename ::std::map< _Key, _Tp, _Compare, _Alloc> ::value_type &__x, const typename ::std::map< _Key, _Tp, _Compare, _Alloc> ::value_type &__y) const 
# 126
{ return (comp)((__x.first), (__y.first)); } 
# 127
}; 
# 132
private: typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other _Pair_alloc_type; 
# 135
typedef _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other>  _Rep_type; 
# 138
_Rep_type _M_t; 
# 140
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other>  _Alloc_traits; 
# 145
public: typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::pointer pointer; 
# 146
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_pointer const_pointer; 
# 147
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::reference reference; 
# 148
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_reference const_reference; 
# 149
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator iterator; 
# 150
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_iterator const_iterator; 
# 151
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::size_type size_type; 
# 152
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::difference_type difference_type; 
# 153
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::reverse_iterator reverse_iterator; 
# 154
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_reverse_iterator const_reverse_iterator; 
# 162
map() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_t() 
# 166
{ } 
# 174
explicit map(const _Compare &__comp, const allocator_type &
# 175
__a = allocator_type()) : _M_t(__comp, (_Pair_alloc_type)__a) 
# 176
{ } 
# 185
map(const map &__x) : _M_t(__x._M_t) 
# 186
{ } 
# 196
map(map &&__x) noexcept(is_nothrow_copy_constructible< _Compare> ::value) : _M_t(std::move(__x._M_t)) 
# 198
{ } 
# 211
map(initializer_list< pair< const _Key, _Tp> >  __l, const _Compare &
# 212
__comp = _Compare(), const allocator_type &
# 213
__a = allocator_type()) : _M_t(__comp, (_Pair_alloc_type)__a) 
# 215
{ ((_M_t)._M_insert_unique((__l.begin()), (__l.end()))); } 
# 219
explicit map(const allocator_type &__a) : _M_t(_Compare(), (_Pair_alloc_type)__a) 
# 220
{ } 
# 223
map(const map &__m, const allocator_type &__a) : _M_t(__m._M_t, (_Pair_alloc_type)__a) 
# 224
{ } 
# 227
map(map &&__m, const allocator_type &__a) noexcept(is_nothrow_copy_constructible< _Compare> ::value && _Alloc_traits::_S_always_equal()) : _M_t(std::move(__m._M_t), (_Pair_alloc_type)__a) 
# 230
{ } 
# 233
map(initializer_list< pair< const _Key, _Tp> >  __l, const allocator_type &__a) : _M_t(_Compare(), (_Pair_alloc_type)__a) 
# 235
{ ((_M_t)._M_insert_unique((__l.begin()), (__l.end()))); } 
# 238
template< class _InputIterator> 
# 239
map(_InputIterator __first, _InputIterator __last, const allocator_type &
# 240
__a) : _M_t(_Compare(), (_Pair_alloc_type)__a) 
# 242
{ ((_M_t)._M_insert_unique(__first, __last)); } 
# 255
template< class _InputIterator> 
# 256
map(_InputIterator __first, _InputIterator __last) : _M_t() 
# 258
{ ((_M_t)._M_insert_unique(__first, __last)); } 
# 272
template< class _InputIterator> 
# 273
map(_InputIterator __first, _InputIterator __last, const _Compare &
# 274
__comp, const allocator_type &
# 275
__a = allocator_type()) : _M_t(__comp, (_Pair_alloc_type)__a) 
# 277
{ ((_M_t)._M_insert_unique(__first, __last)); } 
# 296
map &operator=(const map &__x) 
# 297
{ 
# 298
(_M_t) = (__x._M_t); 
# 299
return *this; 
# 300
} 
# 305
map &operator=(map &&) = default;
# 319
map &operator=(initializer_list< pair< const _Key, _Tp> >  __l) 
# 320
{ 
# 321
((_M_t)._M_assign_unique((__l.begin()), (__l.end()))); 
# 322
return *this; 
# 323
} 
# 328
allocator_type get_allocator() const noexcept 
# 329
{ return (allocator_type)((_M_t).get_allocator()); } 
# 338
iterator begin() noexcept 
# 339
{ return ((_M_t).begin()); } 
# 347
const_iterator begin() const noexcept 
# 348
{ return ((_M_t).begin()); } 
# 356
iterator end() noexcept 
# 357
{ return ((_M_t).end()); } 
# 365
const_iterator end() const noexcept 
# 366
{ return ((_M_t).end()); } 
# 374
reverse_iterator rbegin() noexcept 
# 375
{ return ((_M_t).rbegin()); } 
# 383
const_reverse_iterator rbegin() const noexcept 
# 384
{ return ((_M_t).rbegin()); } 
# 392
reverse_iterator rend() noexcept 
# 393
{ return ((_M_t).rend()); } 
# 401
const_reverse_iterator rend() const noexcept 
# 402
{ return ((_M_t).rend()); } 
# 411
const_iterator cbegin() const noexcept 
# 412
{ return ((_M_t).begin()); } 
# 420
const_iterator cend() const noexcept 
# 421
{ return ((_M_t).end()); } 
# 429
const_reverse_iterator crbegin() const noexcept 
# 430
{ return ((_M_t).rbegin()); } 
# 438
const_reverse_iterator crend() const noexcept 
# 439
{ return ((_M_t).rend()); } 
# 447
bool empty() const noexcept 
# 448
{ return ((_M_t).empty()); } 
# 452
size_type size() const noexcept 
# 453
{ return ((_M_t).size()); } 
# 457
size_type max_size() const noexcept 
# 458
{ return ((_M_t).max_size()); } 
# 474
mapped_type &operator[](const key_type &__k) 
# 475
{ 
# 479
iterator __i = lower_bound(__k); 
# 481
if ((__i == this->end()) || key_comp()(__k, ((*__i).first))) { 
# 483
__i = ((_M_t)._M_emplace_hint_unique(__i, std::piecewise_construct, ((tuple< const _Key &> )(__k)), tuple< > ())); }  
# 489
return (*__i).second; 
# 490
} 
# 494
mapped_type &operator[](key_type &&__k) 
# 495
{ 
# 499
iterator __i = lower_bound(__k); 
# 501
if ((__i == this->end()) || key_comp()(__k, ((*__i).first))) { 
# 502
__i = ((_M_t)._M_emplace_hint_unique(__i, std::piecewise_construct, std::forward_as_tuple(std::move(__k)), tuple< > ())); }  
# 505
return (*__i).second; 
# 506
} 
# 519
mapped_type &at(const key_type &__k) 
# 520
{ 
# 521
iterator __i = lower_bound(__k); 
# 522
if ((__i == this->end()) || key_comp()(__k, ((*__i).first))) { 
# 523
__throw_out_of_range("map::at"); }  
# 524
return (*__i).second; 
# 525
} 
# 528
const mapped_type &at(const key_type &__k) const 
# 529
{ 
# 530
const_iterator __i = lower_bound(__k); 
# 531
if ((__i == this->end()) || key_comp()(__k, ((*__i).first))) { 
# 532
__throw_out_of_range("map::at"); }  
# 533
return (*__i).second; 
# 534
} 
# 556
template< class ..._Args> pair< typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator, bool>  
# 558
emplace(_Args &&...__args) 
# 559
{ return ((_M_t)._M_emplace_unique(std::forward< _Args> (__args)...)); } 
# 586
template< class ..._Args> iterator 
# 588
emplace_hint(const_iterator __pos, _Args &&...__args) 
# 589
{ 
# 590
return ((_M_t)._M_emplace_hint_unique(__pos, std::forward< _Args> (__args)...)); 
# 592
} 
# 612
pair< typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator, bool>  insert(const value_type &__x) 
# 613
{ return ((_M_t)._M_insert_unique(__x)); } 
# 616
template< class _Pair, class  = typename enable_if< is_constructible< pair< const _Key, _Tp> , _Pair &&> ::value> ::type> pair< typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator, bool>  
# 620
insert(_Pair &&__x) 
# 621
{ return ((_M_t)._M_insert_unique(std::forward< _Pair> (__x))); } 
# 633
void insert(initializer_list< pair< const _Key, _Tp> >  __list) 
# 634
{ insert((__list.begin()), (__list.end())); } 
# 662
iterator insert(const_iterator __position, const value_type &__x) 
# 666
{ return ((_M_t)._M_insert_unique_(__position, __x)); } 
# 669
template< class _Pair, class  = typename enable_if< is_constructible< pair< const _Key, _Tp> , _Pair &&> ::value> ::type> iterator 
# 673
insert(const_iterator __position, _Pair &&__x) 
# 674
{ return ((_M_t)._M_insert_unique_(__position, std::forward< _Pair> (__x))); 
# 675
} 
# 686
template< class _InputIterator> void 
# 688
insert(_InputIterator __first, _InputIterator __last) 
# 689
{ ((_M_t)._M_insert_unique(__first, __last)); } 
# 708
iterator erase(const_iterator __position) 
# 709
{ return ((_M_t).erase(__position)); } 
# 712
__attribute((__abi_tag__("cxx11" ))) iterator 
# 714
erase(iterator __position) 
# 715
{ return ((_M_t).erase(__position)); } 
# 744
size_type erase(const key_type &__x) 
# 745
{ return ((_M_t).erase(__x)); } 
# 764
iterator erase(const_iterator __first, const_iterator __last) 
# 765
{ return ((_M_t).erase(__first, __last)); } 
# 796
void swap(map &__x) noexcept(_Alloc_traits::_S_nothrow_swap()) 
# 800
{ ((_M_t).swap(__x._M_t)); } 
# 809
void clear() noexcept 
# 810
{ ((_M_t).clear()); } 
# 818
key_compare key_comp() const 
# 819
{ return ((_M_t).key_comp()); } 
# 826
value_compare value_comp() const 
# 827
{ return (value_compare)((_M_t).key_comp()); } 
# 845
iterator find(const key_type &__x) 
# 846
{ return ((_M_t).find(__x)); } 
# 870
const_iterator find(const key_type &__x) const 
# 871
{ return ((_M_t).find(__x)); } 
# 891
size_type count(const key_type &__x) const 
# 892
{ return (((_M_t).find(__x)) == ((_M_t).end())) ? 0 : 1; } 
# 915
iterator lower_bound(const key_type &__x) 
# 916
{ return ((_M_t).lower_bound(__x)); } 
# 940
const_iterator lower_bound(const key_type &__x) const 
# 941
{ return ((_M_t).lower_bound(__x)); } 
# 960
iterator upper_bound(const key_type &__x) 
# 961
{ return ((_M_t).upper_bound(__x)); } 
# 980
const_iterator upper_bound(const key_type &__x) const 
# 981
{ return ((_M_t).upper_bound(__x)); } 
# 1009
pair< typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator, typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator>  equal_range(const key_type &__x) 
# 1010
{ return ((_M_t).equal_range(__x)); } 
# 1038
pair< typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_iterator, typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_iterator>  equal_range(const key_type &__x) const 
# 1039
{ return ((_M_t).equal_range(__x)); } 
# 1050
template< class _K1, class _T1, class _C1, class _A1> friend bool operator==(const std::map< _K1, _T1, _C1, _A1>  &, const std::map< _K1, _T1, _C1, _A1>  &); 
# 1055
template< class _K1, class _T1, class _C1, class _A1> friend bool operator<(const std::map< _K1, _T1, _C1, _A1>  &, const std::map< _K1, _T1, _C1, _A1>  &); 
# 1059
}; 
# 1071
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1073
operator==(const map< _Key, _Tp, _Compare, _Alloc>  &__x, const map< _Key, _Tp, _Compare, _Alloc>  &
# 1074
__y) 
# 1075
{ return (__x._M_t) == (__y._M_t); } 
# 1088
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1090
operator<(const map< _Key, _Tp, _Compare, _Alloc>  &__x, const map< _Key, _Tp, _Compare, _Alloc>  &
# 1091
__y) 
# 1092
{ return (__x._M_t) < (__y._M_t); } 
# 1095
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1097
operator!=(const map< _Key, _Tp, _Compare, _Alloc>  &__x, const map< _Key, _Tp, _Compare, _Alloc>  &
# 1098
__y) 
# 1099
{ return !(__x == __y); } 
# 1102
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1104
operator>(const map< _Key, _Tp, _Compare, _Alloc>  &__x, const map< _Key, _Tp, _Compare, _Alloc>  &
# 1105
__y) 
# 1106
{ return __y < __x; } 
# 1109
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1111
operator<=(const map< _Key, _Tp, _Compare, _Alloc>  &__x, const map< _Key, _Tp, _Compare, _Alloc>  &
# 1112
__y) 
# 1113
{ return !(__y < __x); } 
# 1116
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1118
operator>=(const map< _Key, _Tp, _Compare, _Alloc>  &__x, const map< _Key, _Tp, _Compare, _Alloc>  &
# 1119
__y) 
# 1120
{ return !(__x < __y); } 
# 1123
template< class _Key, class _Tp, class _Compare, class _Alloc> inline void 
# 1125
swap(map< _Key, _Tp, _Compare, _Alloc>  &__x, map< _Key, _Tp, _Compare, _Alloc>  &
# 1126
__y) 
# 1127
{ (__x.swap(__y)); } 
# 1130
}
# 64 "/usr/include/c++/5/bits/stl_multimap.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 92
template< class _Key, class _Tp, class 
# 93
_Compare = less< _Key> , class 
# 94
_Alloc = allocator< pair< const _Key, _Tp> > > 
# 95
class multimap { 
# 98
public: typedef _Key key_type; 
# 99
typedef _Tp mapped_type; 
# 100
typedef pair< const _Key, _Tp>  value_type; 
# 101
typedef _Compare key_compare; 
# 102
typedef _Alloc allocator_type; 
# 106
private: typedef typename _Alloc::value_type _Alloc_value_type; 
# 113
public: class value_compare : public binary_function< pair< const _Key, _Tp> , pair< const _Key, _Tp> , bool>  { 
# 116
friend class multimap; 
# 118
protected: _Compare comp; 
# 120
value_compare(_Compare __c) : comp(__c) 
# 121
{ } 
# 124
public: bool operator()(const typename ::std::multimap< _Key, _Tp, _Compare, _Alloc> ::value_type &__x, const typename ::std::multimap< _Key, _Tp, _Compare, _Alloc> ::value_type &__y) const 
# 125
{ return (comp)((__x.first), (__y.first)); } 
# 126
}; 
# 131
private: typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other _Pair_alloc_type; 
# 134
typedef _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other>  _Rep_type; 
# 136
_Rep_type _M_t; 
# 138
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other>  _Alloc_traits; 
# 143
public: typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::pointer pointer; 
# 144
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_pointer const_pointer; 
# 145
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::reference reference; 
# 146
typedef typename __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_reference const_reference; 
# 147
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator iterator; 
# 148
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_iterator const_iterator; 
# 149
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::size_type size_type; 
# 150
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::difference_type difference_type; 
# 151
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::reverse_iterator reverse_iterator; 
# 152
typedef typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_reverse_iterator const_reverse_iterator; 
# 160
multimap() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_t() 
# 164
{ } 
# 172
explicit multimap(const _Compare &__comp, const allocator_type &
# 173
__a = allocator_type()) : _M_t(__comp, (_Pair_alloc_type)__a) 
# 174
{ } 
# 183
multimap(const multimap &__x) : _M_t(__x._M_t) 
# 184
{ } 
# 194
multimap(multimap &&__x) noexcept(is_nothrow_copy_constructible< _Compare> ::value) : _M_t(std::move(__x._M_t)) 
# 196
{ } 
# 208
multimap(initializer_list< pair< const _Key, _Tp> >  __l, const _Compare &
# 209
__comp = _Compare(), const allocator_type &
# 210
__a = allocator_type()) : _M_t(__comp, (_Pair_alloc_type)__a) 
# 212
{ ((_M_t)._M_insert_equal((__l.begin()), (__l.end()))); } 
# 216
explicit multimap(const allocator_type &__a) : _M_t(_Compare(), (_Pair_alloc_type)__a) 
# 217
{ } 
# 220
multimap(const multimap &__m, const allocator_type &__a) : _M_t(__m._M_t, (_Pair_alloc_type)__a) 
# 221
{ } 
# 224
multimap(multimap &&__m, const allocator_type &__a) noexcept(is_nothrow_copy_constructible< _Compare> ::value && _Alloc_traits::_S_always_equal()) : _M_t(std::move(__m._M_t), (_Pair_alloc_type)__a) 
# 227
{ } 
# 230
multimap(initializer_list< pair< const _Key, _Tp> >  __l, const allocator_type &__a) : _M_t(_Compare(), (_Pair_alloc_type)__a) 
# 232
{ ((_M_t)._M_insert_equal((__l.begin()), (__l.end()))); } 
# 235
template< class _InputIterator> 
# 236
multimap(_InputIterator __first, _InputIterator __last, const allocator_type &
# 237
__a) : _M_t(_Compare(), (_Pair_alloc_type)__a) 
# 239
{ ((_M_t)._M_insert_equal(__first, __last)); } 
# 251
template< class _InputIterator> 
# 252
multimap(_InputIterator __first, _InputIterator __last) : _M_t() 
# 254
{ ((_M_t)._M_insert_equal(__first, __last)); } 
# 267
template< class _InputIterator> 
# 268
multimap(_InputIterator __first, _InputIterator __last, const _Compare &
# 269
__comp, const allocator_type &
# 270
__a = allocator_type()) : _M_t(__comp, (_Pair_alloc_type)__a) 
# 272
{ ((_M_t)._M_insert_equal(__first, __last)); } 
# 291
multimap &operator=(const multimap &__x) 
# 292
{ 
# 293
(_M_t) = (__x._M_t); 
# 294
return *this; 
# 295
} 
# 300
multimap &operator=(multimap &&) = default;
# 314
multimap &operator=(initializer_list< pair< const _Key, _Tp> >  __l) 
# 315
{ 
# 316
((_M_t)._M_assign_equal((__l.begin()), (__l.end()))); 
# 317
return *this; 
# 318
} 
# 323
allocator_type get_allocator() const noexcept 
# 324
{ return (allocator_type)((_M_t).get_allocator()); } 
# 333
iterator begin() noexcept 
# 334
{ return ((_M_t).begin()); } 
# 342
const_iterator begin() const noexcept 
# 343
{ return ((_M_t).begin()); } 
# 351
iterator end() noexcept 
# 352
{ return ((_M_t).end()); } 
# 360
const_iterator end() const noexcept 
# 361
{ return ((_M_t).end()); } 
# 369
reverse_iterator rbegin() noexcept 
# 370
{ return ((_M_t).rbegin()); } 
# 378
const_reverse_iterator rbegin() const noexcept 
# 379
{ return ((_M_t).rbegin()); } 
# 387
reverse_iterator rend() noexcept 
# 388
{ return ((_M_t).rend()); } 
# 396
const_reverse_iterator rend() const noexcept 
# 397
{ return ((_M_t).rend()); } 
# 406
const_iterator cbegin() const noexcept 
# 407
{ return ((_M_t).begin()); } 
# 415
const_iterator cend() const noexcept 
# 416
{ return ((_M_t).end()); } 
# 424
const_reverse_iterator crbegin() const noexcept 
# 425
{ return ((_M_t).rbegin()); } 
# 433
const_reverse_iterator crend() const noexcept 
# 434
{ return ((_M_t).rend()); } 
# 440
bool empty() const noexcept 
# 441
{ return ((_M_t).empty()); } 
# 445
size_type size() const noexcept 
# 446
{ return ((_M_t).size()); } 
# 450
size_type max_size() const noexcept 
# 451
{ return ((_M_t).max_size()); } 
# 471
template< class ..._Args> iterator 
# 473
emplace(_Args &&...__args) 
# 474
{ return ((_M_t)._M_emplace_equal(std::forward< _Args> (__args)...)); } 
# 498
template< class ..._Args> iterator 
# 500
emplace_hint(const_iterator __pos, _Args &&...__args) 
# 501
{ 
# 502
return ((_M_t)._M_emplace_hint_equal(__pos, std::forward< _Args> (__args)...)); 
# 504
} 
# 520
iterator insert(const value_type &__x) 
# 521
{ return ((_M_t)._M_insert_equal(__x)); } 
# 524
template< class _Pair, class  = typename enable_if< is_constructible< pair< const _Key, _Tp> , _Pair &&> ::value> ::type> iterator 
# 528
insert(_Pair &&__x) 
# 529
{ return ((_M_t)._M_insert_equal(std::forward< _Pair> (__x))); } 
# 554
iterator insert(const_iterator __position, const value_type &__x) 
# 558
{ return ((_M_t)._M_insert_equal_(__position, __x)); } 
# 561
template< class _Pair, class  = typename enable_if< is_constructible< pair< const _Key, _Tp> , _Pair &&> ::value> ::type> iterator 
# 565
insert(const_iterator __position, _Pair &&__x) 
# 566
{ return ((_M_t)._M_insert_equal_(__position, std::forward< _Pair> (__x))); 
# 567
} 
# 579
template< class _InputIterator> void 
# 581
insert(_InputIterator __first, _InputIterator __last) 
# 582
{ ((_M_t)._M_insert_equal(__first, __last)); } 
# 593
void insert(initializer_list< pair< const _Key, _Tp> >  __l) 
# 594
{ (this->insert((__l.begin()), (__l.end()))); } 
# 614
iterator erase(const_iterator __position) 
# 615
{ return ((_M_t).erase(__position)); } 
# 618
__attribute((__abi_tag__("cxx11" ))) iterator 
# 620
erase(iterator __position) 
# 621
{ return ((_M_t).erase(__position)); } 
# 650
size_type erase(const key_type &__x) 
# 651
{ return ((_M_t).erase(__x)); } 
# 671
iterator erase(const_iterator __first, const_iterator __last) 
# 672
{ return ((_M_t).erase(__first, __last)); } 
# 706
void swap(multimap &__x) noexcept(_Alloc_traits::_S_nothrow_swap()) 
# 710
{ ((_M_t).swap(__x._M_t)); } 
# 719
void clear() noexcept 
# 720
{ ((_M_t).clear()); } 
# 728
key_compare key_comp() const 
# 729
{ return ((_M_t).key_comp()); } 
# 736
value_compare value_comp() const 
# 737
{ return (value_compare)((_M_t).key_comp()); } 
# 754
iterator find(const key_type &__x) 
# 755
{ return ((_M_t).find(__x)); } 
# 778
const_iterator find(const key_type &__x) const 
# 779
{ return ((_M_t).find(__x)); } 
# 796
size_type count(const key_type &__x) const 
# 797
{ return ((_M_t).count(__x)); } 
# 820
iterator lower_bound(const key_type &__x) 
# 821
{ return ((_M_t).lower_bound(__x)); } 
# 845
const_iterator lower_bound(const key_type &__x) const 
# 846
{ return ((_M_t).lower_bound(__x)); } 
# 865
iterator upper_bound(const key_type &__x) 
# 866
{ return ((_M_t).upper_bound(__x)); } 
# 885
const_iterator upper_bound(const key_type &__x) const 
# 886
{ return ((_M_t).upper_bound(__x)); } 
# 912
pair< typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator, typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::iterator>  equal_range(const key_type &__x) 
# 913
{ return ((_M_t).equal_range(__x)); } 
# 939
pair< typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_iterator, typename _Rb_tree< _Key, pair< const _Key, _Tp> , _Select1st< pair< const _Key, _Tp> > , _Compare, typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< pair< const _Key, _Tp> > ::other> ::const_iterator>  equal_range(const key_type &__x) const 
# 940
{ return ((_M_t).equal_range(__x)); } 
# 951
template< class _K1, class _T1, class _C1, class _A1> friend bool operator==(const std::multimap< _K1, _T1, _C1, _A1>  &, const std::multimap< _K1, _T1, _C1, _A1>  &); 
# 956
template< class _K1, class _T1, class _C1, class _A1> friend bool operator<(const std::multimap< _K1, _T1, _C1, _A1>  &, const std::multimap< _K1, _T1, _C1, _A1>  &); 
# 960
}; 
# 972
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 974
operator==(const multimap< _Key, _Tp, _Compare, _Alloc>  &__x, const multimap< _Key, _Tp, _Compare, _Alloc>  &
# 975
__y) 
# 976
{ return (__x._M_t) == (__y._M_t); } 
# 989
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 991
operator<(const multimap< _Key, _Tp, _Compare, _Alloc>  &__x, const multimap< _Key, _Tp, _Compare, _Alloc>  &
# 992
__y) 
# 993
{ return (__x._M_t) < (__y._M_t); } 
# 996
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 998
operator!=(const multimap< _Key, _Tp, _Compare, _Alloc>  &__x, const multimap< _Key, _Tp, _Compare, _Alloc>  &
# 999
__y) 
# 1000
{ return !(__x == __y); } 
# 1003
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1005
operator>(const multimap< _Key, _Tp, _Compare, _Alloc>  &__x, const multimap< _Key, _Tp, _Compare, _Alloc>  &
# 1006
__y) 
# 1007
{ return __y < __x; } 
# 1010
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1012
operator<=(const multimap< _Key, _Tp, _Compare, _Alloc>  &__x, const multimap< _Key, _Tp, _Compare, _Alloc>  &
# 1013
__y) 
# 1014
{ return !(__y < __x); } 
# 1017
template< class _Key, class _Tp, class _Compare, class _Alloc> inline bool 
# 1019
operator>=(const multimap< _Key, _Tp, _Compare, _Alloc>  &__x, const multimap< _Key, _Tp, _Compare, _Alloc>  &
# 1020
__y) 
# 1021
{ return !(__x < __y); } 
# 1024
template< class _Key, class _Tp, class _Compare, class _Alloc> inline void 
# 1026
swap(multimap< _Key, _Tp, _Compare, _Alloc>  &__x, multimap< _Key, _Tp, _Compare, _Alloc>  &
# 1027
__y) 
# 1028
{ (__x.swap(__y)); } 
# 1031
}
# 23 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/stage.h"
ConstantState constState; 
# 24
ConstantState constState_d; 
# 25
MutableState mutableState_d; 
# 28
class StageFloor { }; 
# 30
template< class InPrimType> 
# 31
class StageBase : public StageFloor { 
# 44
}; 
# 46
class NullStage : public StageBase< Primitive>  { 
# 49
public: void assignBin(Primitive p) { } 
# 50
void schedule(int binID) { } 
# 51
void process(Primitive p) { } 
# 53
}; 
# 55
class PikoScreen : public StageBase< Pixel>  { 
# 59
public: void assignBin(Pixel p) 
# 60
{ 
# 61
int i = (((p.pos).y) * (screenSizeX_)) + ((p.pos).x); 
# 62
((d_data_)[i]) = (p.color); 
# 63
} 
# 64
void schedule(int binID) { } 
# 65
void process(Pixel p) { } 
# 70
void allocate(ConstantState *constStateArg) 
# 71
{ 
# 72
(screenSizeX_) = (constStateArg->screenSizeX); 
# 73
(screenSizeY_) = (constStateArg->screenSizeY); 
# 74
(numPixels_) = ((screenSizeX_) * (screenSizeY_)); 
# 75
(h_data_) = ((unsigned *)malloc((numPixels_) * sizeof(unsigned))); 
# 80
(d_data_) = (h_data_); 
# 85
for (int i = 0; i < (numPixels_); ++i) { 
# 86
((h_data_)[i]) = 4284887827U; 
# 87
}  
# 95
} 
# 97
void free() { 
# 104
} 
# 106
int getNumPixels() { 
# 107
return numPixels_; 
# 108
} 
# 110
unsigned *getData() { 
# 118
return h_data_; 
# 119
} 
# 124
private: int numPixels_; 
# 125
int screenSizeX_; 
# 126
int screenSizeY_; 
# 127
unsigned *h_data_; 
# 129
unsigned *d_data_; 
# 138
}; 
# 140
template< int binSizeX, int binSizeY, int threadsPerTile, class 
# 141
InPrimType, class OutPrimType> 
# 142
class Stage : public StageBase< InPrimType>  { 
# 144
typedef ::StageFloor *pikoPortIn; 
# 145
typedef ::StageFloor *pikoPortOut; 
# 149
public: pikoPortIn inPort[5]; 
# 150
pikoPortOut outPort[5]; 
# 151
int outPortTypes[5]; 
# 153
bool fusedWithNext; 
# 154
bool hasPrims; 
# 156
int getNumBins() { return numBins_; } 
# 157
int getNumBinsX() { return numBinsX_; } 
# 158
int getNumBinsY() { return numBinsY_; } 
# 159
int getBinSizeX() { return binSizeX; } 
# 160
int getBinSizeY() { return binSizeY; } 
# 162
int getPrevNumBins(int portNum) { 
# 164
return ((Stage *)((d_inPort_)[portNum]))->getNumBins(); 
# 168
} 
# 170
int getPrevNumBinsX(int portNum) { 
# 172
return ((Stage *)((d_inPort_)[portNum]))->getNumBinsX(); 
# 176
} 
# 178
int getPrevNumBinsY(int portNum) { 
# 180
return ((Stage *)((d_inPort_)[portNum]))->getNumBinsY(); 
# 184
} 
# 186
int getPrevBinSizeX(int portNum) { 
# 188
return ((Stage *)((d_inPort_)[portNum]))->getBinSizeX(); 
# 192
} 
# 194
int getPrevBinSizeY(int portNum) { 
# 196
return ((Stage *)((d_inPort_)[portNum]))->getBinSizeY(); 
# 200
} 
# 202
int getNextNumBins(int portNum) { 
# 204
return ((Stage *)((d_outPort_)[portNum]))->getNumBins(); 
# 208
} 
# 210
int getNextNumBinsX(int portNum) { 
# 212
return ((Stage *)((d_outPort_)[portNum]))->getNumBinsX(); 
# 216
} 
# 218
int getNextNumBinsY(int portNum) { 
# 220
return ((Stage *)((d_outPort_)[portNum]))->getNumBinsY(); 
# 224
} 
# 226
int getNextBinSizeX(int portNum) { 
# 228
return ((Stage *)((d_outPort_)[portNum]))->getBinSizeX(); 
# 232
} 
# 234
int getNextBinSizeY(int portNum) { 
# 236
return ((Stage *)((d_outPort_)[portNum]))->getBinSizeY(); 
# 240
} 
# 242
Bin< InPrimType>  *getBin(int binID) { 
# 244
return &((d_bins_)[binID]); 
# 256
} 
# 264
void allocate(::ConstantState *constStateArg, ::MutableState *d_mutableState, ::std::map< void *, ::StageFloor *>  
# 265
stgMap, bool fused) 
# 269
{ 
# 270
(fusedWithNext) = fused; 
# 271
(this->mutableState) = d_mutableState; 
# 275
int nbx = (binSizeX == 0) ? 1 : ((constStateArg->screenSizeX) / binSizeX); 
# 276
int nby = (binSizeY == 0) ? 1 : ((constStateArg->screenSizeY) / binSizeY); 
# 279
(numBins_) = (nbx * nby); 
# 280
(numBinsX_) = nbx; 
# 281
(numBinsY_) = nby; 
# 283
int maxPrimsPerBin = std::max(ceil(((double)50000000) / (numBins_)), (100.0)); 
# 286
(h_bins_) = ((Bin< InPrimType>  *)malloc((numBins_) * sizeof(Bin< InPrimType> ))); 
# 287
for (unsigned i = (0); i < (numBins_); ++i) { 
# 288
((h_bins_)[i]) = (*(new Bin< InPrimType> (maxPrimsPerBin))); 
# 289
(((h_bins_)[i]).allocate()); 
# 290
}  
# 297
(d_bins_) = (h_bins_); 
# 302
for (int i = 0; i < 5; ++i) { { 
# 303
if (((stgMap.find((inPort)[i])) == (stgMap.end()))) { 
# 304
continue; 
# 305
}  
# 307
((d_inPort_)[i]) = stgMap[(inPort)[i]]; 
# 308
} }  
# 310
for (int i = 0; i < 5; ++i) { { 
# 311
if (((stgMap.find((outPort)[i])) == (stgMap.end()))) { 
# 312
continue; 
# 313
}  
# 315
((d_outPort_)[i]) = stgMap[(outPort)[i]]; 
# 316
} }  
# 317
} 
# 319
void free() { 
# 320
for (unsigned i = (0); i < (numBins_); ++i) { 
# 321
(((h_bins_)[i]).free()); 
# 322
}  
# 323
::std::free(h_bins_); 
# 331
} 
# 333
InPrimType *getData(int binID) { 
# 334
return (((h_bins_)[binID]).getData()); 
# 335
} 
# 341
protected: void assignToBin(InPrimType p, int binID) { 
# 342
(hasPrims) = true; 
# 343
(p.binID) = binID; 
# 344
(((d_bins_)[binID]).insert(p)); 
# 345
} 
# 347
void assignToBin(InPrimType p, ::AssignPolicy pol) { 
# 348
(hasPrims) = true; 
# 350
if (pol == (PREVIOUS_BINS)) { 
# 351
(p.binID) = getBinID(); 
# 352
(((d_bins_)[getBinID()]).insert(p)); 
# 353
}  
# 354
} 
# 360
::MutableState *mutableState; 
# 371
private: int numBins_; 
# 372
int numBinsX_; 
# 373
int numBinsY_; 
# 374
Bin< InPrimType>  *h_bins_; 
# 377
Bin< InPrimType>  *d_bins_; 
# 379
protected: ::StageFloor *d_inPort_[5]; 
# 380
::StageFloor *d_outPort_[5]; 
# 393
}; 
# 8 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/pipe.h"
template< class S1, class S2> static void 
# 9
pikoConnect(S1 &outStg, S2 &inStg, const int outPortNum, const int inPortNum) { 
# 10
((outStg.outPort)[outPortNum]) = (&inStg); 
# 11
((inStg.inPort)[inPortNum]) = (&outStg); 
# 12
} 
# 14
class PikoPipe { 
# 15
}; 
# 66 "/usr/include/assert.h" 3
extern "C" {
# 69
extern void __assert_fail(const char * __assertion, const char * __file, unsigned __line, const char * __function) throw()
# 71
 __attribute((__noreturn__)); 
# 74
extern void __assert_perror_fail(int __errnum, const char * __file, unsigned __line, const char * __function) throw()
# 76
 __attribute((__noreturn__)); 
# 81
extern void __assert(const char * __assertion, const char * __file, int __line) throw()
# 82
 __attribute((__noreturn__)); 
# 85
}
# 13 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h"
namespace piko { 
# 17
double fmin(double x, double y) { 
# 21
return std::min(x, y); 
# 25
} 
# 27
float fminf(float x, float y) { 
# 31
return std::min(x, y); 
# 35
} 
# 37
double fmax(double x, double y) { 
# 41
return std::max(x, y); 
# 45
} 
# 47
float fmaxf(float x, float y) { 
# 51
return std::max(x, y); 
# 55
} 
# 58
double floor(double x) { 
# 62
return std::floor(x); 
# 66
} 
# 68
float floorf(float x) { 
# 72
return std::floor(x); 
# 76
} 
# 78
double ceil(double x) { 
# 82
return std::ceil(x); 
# 86
} 
# 88
float ceilf(float x) { 
# 92
return std::ceil(x); 
# 96
} 
# 98
double sqrt(double x) { 
# 102
return std::sqrt(x); 
# 106
} 
# 108
float sqrtf(float x) { 
# 112
return std::sqrt(x); 
# 116
} 
# 118
double pow(double x, double y) { 
# 122
return std::pow(x, y); 
# 126
} 
# 128
float powf(float x, float y) { 
# 132
return std::pow(x, y); 
# 136
} 
# 138
double sin(double x) { 
# 142
return std::sin(x); 
# 146
} 
# 148
float sinf(float x) { 
# 152
return std::sin(x); 
# 156
} 
# 158
double cos(double x) { 
# 162
return std::cos(x); 
# 166
} 
# 168
float cosf(float x) { 
# 172
return std::cos(x); 
# 176
} 
# 178
int abs(int x) { 
# 182
return std::abs(x); 
# 186
} 
# 188
int ffsll(unsigned long long x) { 
# 192
if (x == (0)) { 
# 193
return 0; }  
# 195
int c = 0; 
# 196
x = ((x ^ (x - (1))) >> 1); 
# 197
for (c = 0; x; c++) { 
# 198
x >>= 1; }  
# 199
return c + 1; 
# 203
} 
# 205
__attribute__((unused)) inline int ffsll_cuda(unsigned long long x) {int volatile ___ = 1;(void)x;
# 214
::exit(___);}
#if 0
# 205
{ 
# 206
if (x == (0)) { 
# 207
return 0; }  
# 209
int c = 0; 
# 210
x = ((x ^ (x - (1))) >> 1); 
# 211
for (c = 0; x; c++) { 
# 212
x >>= 1; }  
# 213
return c + 1; 
# 214
} 
#endif
# 216 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h"
int popcll(unsigned long long x) { 
# 220
int c = 0; 
# 221
for (c = 0; x; x >>= 1) { 
# 222
c += (x & (1)); }  
# 223
return c; 
# 227
} 
# 229
__attribute__((unused)) inline int popcll_cuda(unsigned long long x) {int volatile ___ = 1;(void)x;
# 234
::exit(___);}
#if 0
# 229
{ 
# 230
int c = 0; 
# 231
for (c = 0; x; x >>= 1) { 
# 232
c += (x & (1)); }  
# 233
return c; 
# 234
} 
#endif
# 238 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h"
int imax(int a, int b) { return (a > b) ? a : b; } 
# 239
int imin(int a, int b) { return (a < b) ? a : b; } 
# 296
inline void membar_bin() { } 
# 297
inline void BinSynchronize() { } 
# 298
inline int max_max(int a, int b, int c) { return imax(imax(a, b), c); } 
# 299
inline int min_min(int a, int b, int c) { return imin(imin(a, b), c); } 
# 300
inline int max_add(int a, int b, int c) { return imax(a, b) + c; } 
# 301
inline int min_add(int a, int b, int c) { return imin(a, b) + c; } 
# 302
inline int shl_add(int a, unsigned b, int c) { return (a << b) + c; } 
# 303
inline int shr_add(int a, unsigned b, int c) { return (a >> b) + c; } 
# 304
inline unsigned shl_max(unsigned a, unsigned b, unsigned c) { return imax(a << b, c); } 
# 305
inline unsigned shr_max(unsigned a, unsigned b, unsigned c) { return imax(a >> b, c); } 
# 306
inline unsigned shl_min(unsigned a, unsigned b, unsigned c) { return imin(a << b, c); } 
# 307
inline unsigned shr_min(unsigned a, unsigned b, unsigned c) { return imin(a >> b, c); } 
# 308
inline unsigned add_add(unsigned a, unsigned b, unsigned c) { return (a + b) + c; } 
# 309
inline unsigned sub_add(unsigned a, unsigned b, unsigned c) { return (a - b) + c; } 
# 310
inline unsigned add_sub(unsigned a, unsigned b, unsigned c) { return (a + b) - c; } 
# 311
inline int imad(int a, int b, int c) { return (a * b) + c; } 
# 312
__attribute__((unused)) inline int imad_cuda(int a, int b, int c) {int volatile ___ = 1;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 312
{ return (a * b) + c; } 
#endif
# 313 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h"
inline unsigned slct(unsigned a, unsigned b, int c) { (false && ("unimplemented function")) ? static_cast< void>(0) : __assert_fail("false && \"unimplemented function\"", "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h", 313, __PRETTY_FUNCTION__); return 0; } 
# 314
inline int slct(int a, int b, int c) { (false && ("unimplemented function")) ? static_cast< void>(0) : __assert_fail("false && \"unimplemented function\"", "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h", 314, __PRETTY_FUNCTION__); return 0; } 
# 315
inline float slct(float a, float b, int c) { (false && ("unimplemented function")) ? static_cast< void>(0) : __assert_fail("false && \"unimplemented function\"", "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h", 315, __PRETTY_FUNCTION__); return 0; } 
# 316
inline unsigned isetge(int a, int b) { (false && ("unimplemented function")) ? static_cast< void>(0) : __assert_fail("false && \"unimplemented function\"", "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h", 316, __PRETTY_FUNCTION__); return 0; } 
# 317
inline float rcp_approx(float a) { return (1.0F) / a; } 
# 318
__attribute__((unused)) inline float rcp_approx_cuda(float a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
# 318
{ return (1.0F) / a; } 
#endif
# 319 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h"
inline unsigned f32_to_u32_sat_rmi(float a) { return (unsigned)a; } 
# 321
inline float fma_rm(float a, float b, float c) { return (a * b) + c; } 
# 323
inline unsigned idiv_fast(unsigned a, unsigned b) { return a / b; } 
# 325
inline unsigned toABGR(cvec3f color) 
# 326
{ 
# 327
return (((255 << 24) | (((unsigned)((color.z) * (255.0F))) << 16)) | (((unsigned)((color.y) * (255.0F))) << 8)) | ((unsigned)((color.x) * (255.0F))); 
# 328
} 
# 330
__attribute__((unused)) inline unsigned toABGR_cuda(cvec3f color) 
# 331
{int volatile ___ = 1;(void)color;
# 333
::exit(___);}
#if 0
# 331
{ 
# 332
return (((255 << 24) | (((unsigned)((color.z) * (255.0F))) << 16)) | (((unsigned)((color.y) * (255.0F))) << 8)) | ((unsigned)((color.x) * (255.0F))); 
# 333
} 
#endif
# 370 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h"
inline cvec3f fromABGR(unsigned color) 
# 371
{ 
# 372
cvec3f ret; 
# 373
(ret.x) = (((float)((color >> 0) & (255))) / (255.0F)); 
# 374
(ret.y) = (((float)((color >> 8) & (255))) / (255.0F)); 
# 375
(ret.z) = (((float)((color >> 16) & (255))) / (255.0F)); 
# 376
return ret; 
# 377
} 
# 379
__attribute__((unused)) inline cvec3f fromABGR_cuda(unsigned color) 
# 380
{int volatile ___ = 1;(void)color;
# 386
::exit(___);}
#if 0
# 380
{ 
# 381
cvec3f ret; 
# 382
(ret.x) = (((float)((color >> 0) & (255))) / (255.0F)); 
# 383
(ret.y) = (((float)((color >> 8) & (255))) / (255.0F)); 
# 384
(ret.z) = (((float)((color >> 16) & (255))) / (255.0F)); 
# 385
return ret; 
# 386
} 
#endif
# 390 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/math.h"
cvec3f normalize(cvec3f vec); 
# 391
float magnitude(cvec3f vec); 
# 395
float distance(cvec2f a, cvec2f b) { 
# 396
cvec2f c = (a - b); 
# 397
float sum = ((c.x) * (c.x)) + ((c.y) * (c.y)); 
# 398
return piko::sqrtf(sum); 
# 399
} 
# 401
cvec3f normalize(cvec3f vec) 
# 402
{ 
# 403
float mag = magnitude(vec); 
# 404
(vec.x) /= mag; 
# 405
(vec.y) /= mag; 
# 406
(vec.z) /= mag; 
# 408
return vec; 
# 409
} 
# 411
float magnitude(cvec3f vec) 
# 412
{ 
# 413
float sum = (((vec.x) * (vec.x)) + ((vec.y) * (vec.y))) + ((vec.z) * (vec.z)); 
# 414
return piko::sqrtf(sum); 
# 415
} 
# 417
float dotvec(const cvec3f &v1, const cvec3f &v2) 
# 418
{ return (((v1.x) * (v2.x)) + ((v1.y) * (v2.y))) + ((v1.z) * (v2.z)); } 
# 421
cvec4f matmultfloat4(float *mvpMat, cvec3f v) 
# 422
{ 
# 423
cvec4f outRes; 
# 424
(outRes.x) = (((((mvpMat[0]) * (v.x)) + ((mvpMat[4]) * (v.y))) + ((mvpMat[8]) * (v.z))) + (mvpMat[12])); 
# 425
(outRes.y) = (((((mvpMat[1]) * (v.x)) + ((mvpMat[5]) * (v.y))) + ((mvpMat[9]) * (v.z))) + (mvpMat[13])); 
# 426
(outRes.z) = (((((mvpMat[2]) * (v.x)) + ((mvpMat[6]) * (v.y))) + ((mvpMat[10]) * (v.z))) + (mvpMat[14])); 
# 427
(outRes.w) = (((((mvpMat[3]) * (v.x)) + ((mvpMat[7]) * (v.y))) + ((mvpMat[11]) * (v.z))) + (mvpMat[15])); 
# 428
return outRes; 
# 429
} 
# 431
cvec4f matmultfloat4(const float *mvpMat, cvec3f v) 
# 432
{ 
# 433
cvec4f outRes; 
# 434
(outRes.x) = (((((mvpMat[0]) * (v.x)) + ((mvpMat[4]) * (v.y))) + ((mvpMat[8]) * (v.z))) + (mvpMat[12])); 
# 435
(outRes.y) = (((((mvpMat[1]) * (v.x)) + ((mvpMat[5]) * (v.y))) + ((mvpMat[9]) * (v.z))) + (mvpMat[13])); 
# 436
(outRes.z) = (((((mvpMat[2]) * (v.x)) + ((mvpMat[6]) * (v.y))) + ((mvpMat[10]) * (v.z))) + (mvpMat[14])); 
# 437
(outRes.w) = (((((mvpMat[3]) * (v.x)) + ((mvpMat[7]) * (v.y))) + ((mvpMat[11]) * (v.z))) + (mvpMat[15])); 
# 438
return outRes; 
# 439
} 
# 441
cvec4f matmultfloat4(float *mvpMat, cvec4f v) 
# 442
{ 
# 443
cvec4f outRes; 
# 444
(outRes.x) = (((((mvpMat[0]) * (v.x)) + ((mvpMat[4]) * (v.y))) + ((mvpMat[8]) * (v.z))) + ((mvpMat[12]) * (v.w))); 
# 445
(outRes.y) = (((((mvpMat[1]) * (v.x)) + ((mvpMat[5]) * (v.y))) + ((mvpMat[9]) * (v.z))) + ((mvpMat[13]) * (v.w))); 
# 446
(outRes.z) = (((((mvpMat[2]) * (v.x)) + ((mvpMat[6]) * (v.y))) + ((mvpMat[10]) * (v.z))) + ((mvpMat[14]) * (v.w))); 
# 447
(outRes.w) = (((((mvpMat[3]) * (v.x)) + ((mvpMat[7]) * (v.y))) + ((mvpMat[11]) * (v.z))) + ((mvpMat[15]) * (v.w))); 
# 448
return outRes; 
# 449
} 
# 451
cvec4f matmultfloat4(const float *mvpMat, cvec4f v) 
# 452
{ 
# 453
cvec4f outRes; 
# 454
(outRes.x) = (((((mvpMat[0]) * (v.x)) + ((mvpMat[4]) * (v.y))) + ((mvpMat[8]) * (v.z))) + ((mvpMat[12]) * (v.w))); 
# 455
(outRes.y) = (((((mvpMat[1]) * (v.x)) + ((mvpMat[5]) * (v.y))) + ((mvpMat[9]) * (v.z))) + ((mvpMat[13]) * (v.w))); 
# 456
(outRes.z) = (((((mvpMat[2]) * (v.x)) + ((mvpMat[6]) * (v.y))) + ((mvpMat[10]) * (v.z))) + ((mvpMat[14]) * (v.w))); 
# 457
(outRes.w) = (((((mvpMat[3]) * (v.x)) + ((mvpMat[7]) * (v.y))) + ((mvpMat[11]) * (v.z))) + ((mvpMat[15]) * (v.w))); 
# 458
return outRes; 
# 459
} 
# 461
float magnitude(cvec4f vec) 
# 462
{ 
# 463
float sum = ((((vec.x) * (vec.x)) + ((vec.y) * (vec.y))) + ((vec.z) * (vec.z))) + ((vec.w) * (vec.w)); 
# 464
return piko::sqrtf(sum); 
# 465
} 
# 468
float distance(cvec4f a, cvec4f b) { 
# 469
cvec4f c = (a - b); 
# 470
return piko::magnitude(c); 
# 471
} 
# 473
cvec4f cross(cvec4f v1, cvec4f v2) { 
# 474
cvec4f crossprod; 
# 475
(crossprod.x) = (((v1.y) * (v2.z)) - ((v1.z) * (v2.y))); 
# 476
(crossprod.y) = (((v1.z) * (v2.x)) - ((v1.x) * (v2.z))); 
# 477
(crossprod.z) = (((v1.x) * (v2.y)) - ((v1.y) * (v2.x))); 
# 479
return crossprod; 
# 480
} 
# 482
}
# 16 "/home/zhengzhen/workspace/versapipe/examples/rasterization/./basicTypes/pikoTypes.h"
struct piko_wTri : public Primitive { 
# 18
int id; 
# 19
cvec3f worldPos[3]; 
# 20
cvec3f normal[3]; 
# 22
piko_wTri &operator=(piko_wTri &p) 
# 23
{ 
# 24
for (int i = 0; i < 3; i++) 
# 25
{ 
# 26
((worldPos)[i]) = ((p.worldPos)[i]); 
# 27
((normal)[i]) = ((p.normal)[i]); 
# 28
}  
# 29
return *this; 
# 30
} 
# 31
}; 
# 34
struct piko_sTri : public Primitive { 
# 36
cvec3f screenPos[3]; 
# 37
cvec3f normal[3]; 
# 39
piko_sTri &operator=(piko_sTri &p) 
# 40
{ 
# 41
for (int i = 0; i < 3; i++) 
# 42
{ 
# 43
((normal)[i]) = ((p.normal)[i]); 
# 44
((screenPos)[i]) = ((p.screenPos)[i]); 
# 45
}  
# 46
return *this; 
# 47
} 
# 48
}; 
# 57
struct piko_fragment : public Primitive { 
# 59
int pos; 
# 60
float depth; 
# 61
cvec3f normal; 
# 62
}; 
# 65
struct piko_patch : public Primitive { 
# 66
cvec4f CP[16]; 
# 67
int nu; 
# 68
int nv; 
# 69
}; 
# 71
struct piko_upoly : public Primitive { 
# 72
cvec4f worldPos[4]; 
# 73
cvec4f screenPos[4]; 
# 74
cvec3f normal[4]; 
# 75
}; 
# 8 "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/rasterTypes.h"
struct __attribute((aligned(16))) raster_wtri : public Primitive { 
# 10
int id; 
# 11
cvec3f worldPos0, worldPos1, worldPos2; 
# 13
unsigned icol0, icol1, icol2; 
# 18
raster_wtri &operator=(raster_wtri &p) 
# 19
{ 
# 20
(worldPos0) = (p.worldPos0); 
# 21
(worldPos1) = (p.worldPos1); 
# 22
(worldPos2) = (p.worldPos2); 
# 24
(icol0) = (p.icol0); 
# 25
(icol1) = (p.icol1); 
# 26
(icol2) = (p.icol2); 
# 32
return *this; 
# 33
} 
# 34
}; 
# 36
struct __attribute((aligned(16))) raster_stri : public Primitive { 
# 39
int xmin, ymin; 
# 43
int x0, x1, x2; 
# 44
int y0, y1, y2; 
# 45
float z0, z1, z2; 
# 48
unsigned icol0, icol1, icol2; 
# 53
raster_stri &operator=(raster_stri &p) 
# 54
{ 
# 60
(binID) = (p.binID); 
# 66
(icol0) = (p.icol0); 
# 67
(icol1) = (p.icol1); 
# 68
(icol2) = (p.icol2); 
# 77
(x0) = (p.x0); (y0) = (p.y0); (z0) = (p.z0); 
# 78
(x1) = (p.x1); (y1) = (p.y1); (z1) = (p.z1); 
# 79
(x2) = (p.x2); (y2) = (p.y2); (z2) = (p.z2); 
# 80
return *this; 
# 81
} 
# 82
}; 
# 84
struct boundingBoxFixPt { 
# 85
cvec2i hi, lo; 
# 86
}; 
# 88 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/helperRoutines.h"
extern "C" void printInt(int d) { 
# 89
printf("%d\n", d); 
# 90
} 
# 93
extern "C" void printFloat(float f) { 
# 94
printf("%f\n", f); 
# 95
} 
# 46 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/specialInstructions.h"
extern "C" inline int float_as_int_host(float f) { return *((int *)(&f)); } 
# 47
extern "C" inline float int_as_float_host(int d) { return *((float *)(&d)); } 
# 17 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline void vtxTransform(float *vPM, cvec3f &worldPos, cvec4f &screenPos, float halfW, float halfH) 
# 18
{ 
# 19
screenPos = piko::matmultfloat4(vPM, worldPos); 
# 20
float onebyw = piko::rcp_approx(screenPos.w); 
# 21
(screenPos.x) = ((((screenPos.x) * onebyw) + (1.0F)) * halfW); 
# 22
(screenPos.y) = ((((screenPos.y) * onebyw) + (1.0F)) * halfH); 
# 23
(screenPos.z) = ((screenPos.z) * onebyw); 
# 24
} 
# 26
inline bool isFrontFacingFixPt(raster_stri &p) 
# 27
{ 
# 28
return ((((p.y2) - (p.y0)) * ((p.x1) - (p.x0))) - (((p.x2) - (p.x0)) * ((p.y1) - (p.y0)))) > 0; 
# 33
} 
# 35
__attribute__((unused)) inline bool isFrontFacingFixPt_cuda(raster_stri &p) 
# 36
{int volatile ___ = 1;(void)p;
# 42
::exit(___);}
#if 0
# 36
{ 
# 37
return ((((p.y2) - (p.y0)) * ((p.x1) - (p.x0))) - (((p.x2) - (p.x0)) * ((p.y1) - (p.y0)))) > 0; 
# 42
} 
#endif
# 44 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline bool isInsideFrustumFixPt(raster_stri &p, float min_Z, float max_Z, int W, int H) 
# 45
{ 
# 49
int guard = (225 << 4); 
# 51
return !((((((((p.x0) < (-guard)) || ((p.x0) >= (W + guard))) || (((p.y0) < (-guard)) || ((p.y0) >= (H + guard)))) || (((p.x1) < (-guard)) || ((p.x1) >= (W + guard)))) || (((p.y1) < (-guard)) || ((p.y1) >= (H + guard)))) || (((p.x2) < (-guard)) || ((p.x2) >= (W + guard)))) || (((p.y2) < (-guard)) || ((p.y2) >= (H + guard)))); 
# 58
} 
# 60
__attribute__((unused)) inline bool isInsideFrustumFixPt_cuda(raster_stri &p, float min_Z, float max_Z, int W, int H) 
# 61
{int volatile ___ = 1;(void)p;(void)min_Z;(void)max_Z;(void)W;(void)H;
# 74
::exit(___);}
#if 0
# 61
{ 
# 65
int guard = (225 << 4); 
# 67
return !((((((((p.x0) < (-guard)) || ((p.x0) >= (W + guard))) || (((p.y0) < (-guard)) || ((p.y0) >= (H + guard)))) || (((p.x1) < (-guard)) || ((p.x1) >= (W + guard)))) || (((p.y1) < (-guard)) || ((p.y1) >= (H + guard)))) || (((p.x2) < (-guard)) || ((p.x2) >= (W + guard)))) || (((p.y2) < (-guard)) || ((p.y2) >= (H + guard)))); 
# 74
} 
#endif
# 76 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline int RoundDownFixPt(int num) { return num & 4294967040U; } 
# 77
__attribute__((unused)) inline int RoundDownFixPt_cuda(int num) {int volatile ___ = 1;(void)num;::exit(___);}
#if 0
# 77
{ return num & 4294967040U; } 
#endif
# 78 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline int RoundUpFixPt(int num) { return (num + 255) & 4294967040U; } 
# 79
__attribute__((unused)) inline int RoundUpFixPt_cuda(int num) {int volatile ___ = 1;(void)num;::exit(___);}
#if 0
# 79
{ return (num + 255) & 4294967040U; } 
#endif
# 81 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline void computeBoundingBoxFixPt(raster_stri &_p, boundingBoxFixPt &_bb) { 
# 82
((_bb.lo).x) = piko::min_min(_p.x0, _p.x1, _p.x2); 
# 83
((_bb.lo).y) = piko::min_min(_p.y0, _p.y1, _p.y2); 
# 84
((_bb.hi).x) = piko::max_max(_p.x0, _p.x1, _p.x2); 
# 85
((_bb.hi).y) = piko::max_max(_p.y0, _p.y1, _p.y2); 
# 86
} 
# 88
__attribute__((unused)) inline void computeBoundingBoxFixPt_cuda(raster_stri &_p, boundingBoxFixPt &_bb) {int volatile ___ = 1;(void)_p;(void)_bb;
# 93
::exit(___);}
#if 0
# 88
{ 
# 89
((_bb.lo).x) = min(min(_p.x0, _p.x1), _p.x2); 
# 90
((_bb.lo).y) = min(min(_p.y0, _p.y1), _p.y2); 
# 91
((_bb.hi).x) = max(max(_p.x0, _p.x1), _p.x2); 
# 92
((_bb.hi).y) = max(max(_p.y0, _p.y1), _p.y2); 
# 93
} 
#endif
# 95 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline void computePixelBoundingBoxFixPt(raster_stri &_p, boundingBoxFixPt &_bb) { 
# 96
((_bb.lo).x) = RoundDownFixPt(piko::min_min(_p.x0, _p.x1, _p.x2)); 
# 97
((_bb.lo).y) = RoundDownFixPt(piko::min_min(_p.y0, _p.y1, _p.y2)); 
# 98
((_bb.hi).x) = RoundUpFixPt(piko::max_max(_p.x0, _p.x1, _p.x2)); 
# 99
((_bb.hi).y) = RoundUpFixPt(piko::max_max(_p.y0, _p.y1, _p.y2)); 
# 100
} 
# 102
__attribute__((unused)) inline void computePixelBoundingBoxFixPt_cuda(raster_stri &_p, boundingBoxFixPt &_bb) {int volatile ___ = 1;(void)_p;(void)_bb;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
((_bb.lo).x) = RoundDownFixPt_cuda(min(min(_p.x0, _p.x1), _p.x2)); 
# 104
((_bb.lo).y) = RoundDownFixPt_cuda(min(min(_p.y0, _p.y1), _p.y2)); 
# 105
((_bb.hi).x) = RoundUpFixPt_cuda(max(max(_p.x0, _p.x1), _p.x2)); 
# 106
((_bb.hi).y) = RoundUpFixPt_cuda(max(max(_p.y0, _p.y1), _p.y2)); 
# 107
} 
#endif
# 109 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline bool isBBBetweenSamples(boundingBoxFixPt &bb) 
# 110
{ 
# 115
{ 
# 116
bool bCullXaxis = ((((bb.lo).x) - 8) >> 4) == ((((bb.hi).x) - 8) >> 4); 
# 117
bool bCullYaxis = ((((bb.lo).y) - 8) >> 4) == ((((bb.hi).y) - 8) >> 4); 
# 118
return bCullXaxis || bCullYaxis; 
# 119
} 
# 121
} 
# 123
__attribute__((unused)) inline bool isBBBetweenSamples_cuda(boundingBoxFixPt &bb) 
# 124
{int volatile ___ = 1;(void)bb;
# 135
::exit(___);}
#if 0
# 124
{ 
# 129
{ 
# 130
bool bCullXaxis = ((((bb.lo).x) - 8) >> 4) == ((((bb.hi).x) - 8) >> 4); 
# 131
bool bCullYaxis = ((((bb.lo).y) - 8) >> 4) == ((((bb.hi).y) - 8) >> 4); 
# 132
return bCullXaxis || bCullYaxis; 
# 133
} 
# 135
} 
#endif
# 158 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline void computeBinExtent(cvec2i &_binBeg, cvec2i &_binEnd, int _binSize, int nBx, int bID) { 
# 159
unsigned binIdx = bID % nBx; 
# 160
unsigned binIdy = piko::idiv_fast(bID, nBx); 
# 161
(_binBeg.x) = (binIdx * _binSize); 
# 162
(_binBeg.y) = (binIdy * _binSize); 
# 163
(_binEnd.x) = ((_binBeg.x) + _binSize); 
# 164
(_binEnd.y) = ((_binBeg.y) + _binSize); 
# 165
} 
# 167
__attribute__((unused)) inline void computeBinExtent_cuda(cvec2i &_binBeg, cvec2i &_binEnd, int _binSize, int nBx, int bID) {int volatile ___ = 1;(void)_binBeg;(void)_binEnd;(void)_binSize;(void)nBx;(void)bID;
# 174
::exit(___);}
#if 0
# 167
{ 
# 168
unsigned binIdx = bID % nBx; 
# 169
unsigned binIdy = bID / nBx; 
# 170
(_binBeg.x) = (binIdx * _binSize); 
# 171
(_binBeg.y) = (binIdy * _binSize); 
# 172
(_binEnd.x) = ((_binBeg.x) + _binSize); 
# 173
(_binEnd.y) = ((_binBeg.y) + _binSize); 
# 174
} 
#endif
# 176 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline void intersectBBi(cvec2i &_bb1_lo, cvec2i &_bb1_hi, cvec2i &_bb2_lo, cvec2i &_bb2_hi, cvec2i &_bbOut_lo, cvec2i &_bbOut_hi) 
# 177
{ 
# 178
(_bbOut_lo.x) = piko::imax(_bb1_lo.x, _bb2_lo.x); 
# 179
(_bbOut_lo.y) = piko::imax(_bb1_lo.y, _bb2_lo.y); 
# 180
(_bbOut_hi.x) = piko::imin(_bb1_hi.x, _bb2_hi.x); 
# 181
(_bbOut_hi.y) = piko::imin(_bb1_hi.y, _bb2_hi.y); 
# 182
} 
# 184
__attribute__((unused)) inline void intersectBBi_cuda(cvec2i &_bb1_lo, cvec2i &_bb1_hi, cvec2i &_bb2_lo, cvec2i &_bb2_hi, cvec2i &_bbOut_lo, cvec2i &_bbOut_hi) 
# 185
{int volatile ___ = 1;(void)_bb1_lo;(void)_bb1_hi;(void)_bb2_lo;(void)_bb2_hi;(void)_bbOut_lo;(void)_bbOut_hi;
# 190
::exit(___);}
#if 0
# 185
{ 
# 186
(_bbOut_lo.x) = max(_bb1_lo.x, _bb2_lo.x); 
# 187
(_bbOut_lo.y) = max(_bb1_lo.y, _bb2_lo.y); 
# 188
(_bbOut_hi.x) = min(_bb1_hi.x, _bb2_hi.x); 
# 189
(_bbOut_hi.y) = min(_bb1_hi.y, _bb2_hi.y); 
# 190
} 
#endif
# 192 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline void saturatePixel(cvec3f &_p) 
# 193
{ 
# 194
(_p.x) = (((_p.x) > (1.0F)) ? (1.0F) : (((_p.x) < (0.0F)) ? (0.0F) : (_p.x))); 
# 195
(_p.y) = (((_p.y) > (1.0F)) ? (1.0F) : (((_p.y) < (0.0F)) ? (0.0F) : (_p.y))); 
# 196
(_p.z) = (((_p.z) > (1.0F)) ? (1.0F) : (((_p.z) < (0.0F)) ? (0.0F) : (_p.z))); 
# 197
} 
# 199
inline cvec3f computeLighting(cvec2f &_mynor, cvec3f &_lightvec, cvec3f &_matcol) 
# 200
{ 
# 201
cvec3f out; 
# 202
float n_z = piko::sqrtf(((1.0F) - ((_mynor.x) * (_mynor.x))) - ((_mynor.y) * (_mynor.y))); 
# 203
float _diffuse = (((_mynor.x) * (_lightvec.x)) + ((_mynor.y) * (_lightvec.y))) + (n_z * (_lightvec.z)); 
# 205
_diffuse = ((_diffuse < (0.0F)) ? (0.0F) : _diffuse); 
# 206
(out.x) = piko::fma_rm(_diffuse, _matcol.x, (0.150000006F)); 
# 207
(out.y) = piko::fma_rm(_diffuse, _matcol.y, (0.150000006F)); 
# 208
(out.z) = piko::fma_rm(_diffuse, _matcol.z, (0.3000000119F)); 
# 209
saturatePixel(out); 
# 210
return out; 
# 211
} 
# 227
inline int GetTrivialRejectOffset(int x1mx0, int y1my0, int step0x, int step0y) 
# 228
{ 
# 229
int offset = 0; 
# 231
offset += ((y1my0 < 0) ? step0x : 0); 
# 232
offset += ((x1mx0 >= 0) ? step0y : 0); 
# 234
return offset; 
# 235
} 
# 237
__attribute__((unused)) inline int GetTrivialRejectOffset_cuda(int x1mx0, int y1my0, int step0x, int step0y) 
# 238
{int volatile ___ = 1;(void)x1mx0;(void)y1my0;(void)step0x;(void)step0y;
# 245
::exit(___);}
#if 0
# 238
{ 
# 239
int offset = 0; 
# 241
offset += ((y1my0 < 0) ? step0x : 0); 
# 242
offset += ((x1mx0 >= 0) ? step0y : 0); 
# 244
return offset; 
# 245
} 
#endif
# 247 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline int GetTrivialAcceptOffset(int x1mx0, int y1my0, int step0x, int step0y) 
# 248
{ 
# 249
int offset = 0; 
# 251
offset += ((y1my0 >= 0) ? step0x : 0); 
# 252
offset += ((x1mx0 < 0) ? step0y : 0); 
# 254
return offset; 
# 255
} 
# 257
__attribute__((unused)) inline int GetTrivialAcceptOffset_cuda(int x1mx0, int y1my0, int step0x, int step0y) 
# 258
{int volatile ___ = 1;(void)x1mx0;(void)y1my0;(void)step0x;(void)step0y;
# 265
::exit(___);}
#if 0
# 258
{ 
# 259
int offset = 0; 
# 261
offset += ((y1my0 >= 0) ? step0x : 0); 
# 262
offset += ((x1mx0 < 0) ? step0y : 0); 
# 264
return offset; 
# 265
} 
#endif
# 267 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterMacros.h"
inline void getSampleIdFromMask(const unsigned long long &
# 268
mask, int &x, int &y) 
# 269
{ 
# 270
int lowBit = piko::ffsll(mask) - 1; 
# 271
x = (lowBit & 7); 
# 272
y = (lowBit >> 3); 
# 273
} 
# 275
__attribute__((unused)) inline void getSampleIdFromMask_cuda(const unsigned long long &
# 276
mask, int &x, int &y) 
# 277
{int volatile ___ = 1;(void)mask;(void)x;(void)y;
# 281
::exit(___);}
#if 0
# 277
{ 
# 278
int lowBit = __ffsll(mask) - 1; 
# 279
x = (lowBit & 7); 
# 280
y = (lowBit >> 3); 
# 281
} 
#endif
# 24 "/home/zhengzhen/workspace/versapipe/examples/rasterization/vertexShader.h"
namespace VertexShaderStage { 
# 29
__attribute__((unused)) inline void zzAssignBin(raster_stri p, raster_stri *prims, int *index) {int volatile ___ = 1;(void)p;(void)prims;(void)index;
# 115
::exit(___);}
#if 0
# 29
{ 
# 30
boundingBoxFixPt bb; 
# 31
computePixelBoundingBoxFixPt_cuda(p, bb); 
# 33
int binSize = (1 << 3); 
# 34
int binsizebits = (4 + 3); 
# 35
int bx1 = ((bb.lo).x) >> binsizebits; 
# 36
int bx2 = ((bb.hi).x) >> binsizebits; 
# 37
int by1 = ((bb.lo).y) >> binsizebits; 
# 38
int by2 = ((bb.hi).y) >> binsizebits; 
# 43
int nBx = (constState_d.screenSizeX) / binSize; 
# 44
int nBy = (constState_d.screenSizeY) / binSize; 
# 50
bx1 = max(0, bx1); 
# 51
by1 = max(0, by1); 
# 52
bx2 = min(bx2, nBx - 1); 
# 53
by2 = min(by2, nBy - 1); 
# 55
{ 
# 56
int x1mx0 = (p.x1) - (p.x0); 
# 57
int x2mx1 = (p.x2) - (p.x1); 
# 58
int x0mx2 = (p.x0) - (p.x2); 
# 59
int y1my0 = (p.y1) - (p.y0); 
# 60
int y2my1 = (p.y2) - (p.y1); 
# 61
int y0my2 = (p.y0) - (p.y2); 
# 63
int startx = bx1 << binsizebits; 
# 64
int starty = by1 << binsizebits; 
# 66
int step0x = -(y1my0 << binsizebits); 
# 67
int step1x = -(y2my1 << binsizebits); 
# 68
int step2x = -(y0my2 << binsizebits); 
# 70
int step0y = +(x1mx0 << binsizebits); 
# 71
int step1y = +(x2mx1 << binsizebits); 
# 72
int step2y = +(x0mx2 << binsizebits); 
# 74
int TRoffset0 = GetTrivialRejectOffset_cuda(x1mx0, y1my0, step0x, step0y); 
# 75
int TRoffset1 = GetTrivialRejectOffset_cuda(x2mx1, y2my1, step1x, step1y); 
# 76
int TRoffset2 = GetTrivialRejectOffset_cuda(x0mx2, y0my2, step2x, step2y); 
# 78
int rowsume0 = (TRoffset0 + ((starty - (p.y0)) * x1mx0)) - ((startx - (p.x0)) * y1my0); 
# 79
int rowsume1 = (TRoffset1 + ((starty - (p.y1)) * x2mx1)) - ((startx - (p.x1)) * y2my1); 
# 80
int rowsume2 = (TRoffset2 + ((starty - (p.y2)) * x0mx2)) - ((startx - (p.x2)) * y0my2); 
# 82
raster_stri newP; 
# 84
for (int by = by1; by <= by2; by += 1) { 
# 86
int trivialRe0 = rowsume0; 
# 87
int trivialRe1 = rowsume1; 
# 88
int trivialRe2 = rowsume2; 
# 90
for (int bx = bx1; bx <= bx2; bx += 1) { 
# 92
if (((trivialRe0 | trivialRe1) | trivialRe2) >= 0) 
# 93
{ 
# 94
(newP = p); 
# 97
(newP.binID) = ((by * nBx) + bx); 
# 100
((prims[atomicAdd(index, 1)]) = newP); 
# 103
}  
# 105
trivialRe0 += step0x; 
# 106
trivialRe1 += step1x; 
# 107
trivialRe2 += step2x; 
# 108
}  
# 109
rowsume0 += step0y; 
# 110
rowsume1 += step1y; 
# 111
rowsume2 += step2y; 
# 112
}  
# 113
} 
# 115
} 
#endif
# 210 "/home/zhengzhen/workspace/versapipe/examples/rasterization/vertexShader.h"
__attribute__((unused)) inline void process_new(raster_wtri p, raster_stri *prims, int *index) 
# 211
{int volatile ___ = 1;(void)p;(void)prims;(void)index;
# 284
::exit(___);}
#if 0
# 211
{ 
# 212
float W = (float)(constState_d.screenSizeX); 
# 213
float H = (float)(constState_d.screenSizeY); 
# 215
raster_stri ps; 
# 216
float maxZ, minZ; 
# 220
(ps.x0) = ((int)(((p.worldPos0).x) * (16.0F))); 
# 221
(ps.y0) = ((int)(((p.worldPos0).y) * (16.0F))); 
# 222
(ps.z0) = ((p.worldPos0).z); 
# 223
(ps.x1) = ((int)(((p.worldPos1).x) * (16.0F))); 
# 224
(ps.y1) = ((int)(((p.worldPos1).y) * (16.0F))); 
# 225
(ps.z1) = ((p.worldPos1).z); 
# 226
(ps.x2) = ((int)(((p.worldPos2).x) * (16.0F))); 
# 227
(ps.y2) = ((int)(((p.worldPos2).y) * (16.0F))); 
# 228
(ps.z2) = ((p.worldPos2).z); 
# 229
(ps.icol0) = (p.icol0); 
# 230
(ps.icol1) = (p.icol1); 
# 231
(ps.icol2) = (p.icol2); 
# 259
if (isFrontFacingFixPt_cuda(ps) && isInsideFrustumFixPt_cuda(ps, minZ, maxZ, W * (16), H * (16))) 
# 260
{ 
# 261
boundingBoxFixPt bb; 
# 262
computeBoundingBoxFixPt_cuda(ps, bb); 
# 263
if (!isBBBetweenSamples_cuda(bb)) 
# 264
{ 
# 281
zzAssignBin(ps, prims, index); 
# 282
}  
# 283
}  
# 284
} 
#endif
# 286 "/home/zhengzhen/workspace/versapipe/examples/rasterization/vertexShader.h"
}
# 40 "/home/zhengzhen/workspace/versapipe/examples/rasterization/raster.h"
template< class T> __attribute__((unused)) inline T 
# 41
interpolate_alphabeta(const T &f0mf2, const T &f1mf2, const T &f2, const float &alpha, const float &beta) 
# 42
{int volatile ___ = 1;(void)f0mf2;(void)f1mf2;(void)f2;(void)alpha;(void)beta;
# 44
::exit(___);}
#if 0
# 42
{ 
# 43
return (f2 + (alpha * f0mf2)) + (beta * f1mf2); 
# 44
} 
#endif
# 46 "/home/zhengzhen/workspace/versapipe/examples/rasterization/raster.h"
int temp = 0; 
# 49
namespace RasterStage { 
# 54
__attribute__((unused)) inline void process_new(raster_stri p, Pixel *pixels, int *index) 
# 55
{int volatile ___ = 1;(void)p;(void)pixels;(void)index;
# 252
::exit(___);}
#if 0
# 55
{ 
# 60
boundingBoxFixPt bb; 
# 61
computePixelBoundingBoxFixPt_cuda(p, bb); 
# 65
cvec2i binBeg, binEnd; 
# 66
computeBinExtent_cuda(binBeg, binEnd, (1 << 3) << 4, (constState_d.screenSizeX) / (1 << 3), p.binID); 
# 70
cvec2i pixelBeg, pixelEnd; 
# 71
intersectBBi_cuda(bb.lo, bb.hi, binBeg, binEnd, pixelBeg, pixelEnd); 
# 78
int x1mx0 = (p.x1) - (p.x0); 
# 79
int x2mx1 = (p.x2) - (p.x1); 
# 80
int x0mx2 = (p.x0) - (p.x2); 
# 81
int y1my0 = (p.y1) - (p.y0); 
# 82
int y2my1 = (p.y2) - (p.y1); 
# 83
int y0my2 = (p.y0) - (p.y2); 
# 85
int barydenom = ((-y0my2) * x1mx0) + (x0mx2 * y1my0); 
# 86
float onebybary = piko::rcp_approx_cuda((float)barydenom); 
# 90
cvec2i pixelBegCenter = gencvec2i((pixelBeg.x) + 8, (pixelBeg.y) + 8); 
# 94
int rowsume0 = (((pixelBegCenter.y) - (p.y0)) * x1mx0) - (((pixelBegCenter.x) - (p.x0)) * y1my0); 
# 95
int rowsume1 = (((pixelBegCenter.y) - (p.y1)) * x2mx1) - (((pixelBegCenter.x) - (p.x1)) * y2my1); 
# 96
int rowsume2 = (((pixelBegCenter.y) - (p.y2)) * x0mx2) - (((pixelBegCenter.x) - (p.x2)) * y0my2); 
# 101
cvec3f vcol0 = piko::fromABGR_cuda(p.icol0); 
# 102
cvec3f vcol1 = piko::fromABGR_cuda(p.icol1); 
# 103
cvec3f vcol2 = piko::fromABGR_cuda(p.icol2); 
# 113
int step0x = -(y1my0 << 4); 
# 114
int step1x = -(y2my1 << 4); 
# 115
int step2x = -(y0my2 << 4); 
# 117
int step0y = +(x1mx0 << 4); 
# 118
int step1y = +(x2mx1 << 4); 
# 119
int step2y = +(x0mx2 << 4); 
# 121
bool bFullCov = false; 
# 122
{ 
# 123
int TAoffset0 = GetTrivialAcceptOffset_cuda(x1mx0, y1my0, step0x, step0y); 
# 124
int TAoffset1 = GetTrivialAcceptOffset_cuda(x2mx1, y2my1, step1x, step1y); 
# 125
int TAoffset2 = GetTrivialAcceptOffset_cuda(x0mx2, y0my2, step2x, step2y); 
# 127
int trivialA0 = rowsume0 + (TAoffset0 << 3); 
# 128
int trivialA1 = rowsume1 + (TAoffset1 << 3); 
# 129
int trivialA2 = rowsume2 + (TAoffset2 << 3); 
# 130
bFullCov = ((((trivialA0 | trivialA1) | trivialA2) & 2147483648U) == (0)); 
# 131
} 
# 136
unsigned long long sampleMask; 
# 138
if (bFullCov) 
# 139
{ 
# 140
sampleMask = (18446744073709551615UL); 
# 141
} else 
# 143
{ 
# 144
sampleMask = (0); 
# 145
for (int y = pixelBeg.y; y < (pixelEnd.y); y += 16) { 
# 146
int e0test = rowsume0; 
# 147
int e1test = rowsume1; 
# 148
int e2test = rowsume2; 
# 149
for (int x = pixelBeg.x; x < (pixelEnd.x); x += 16) { 
# 150
if (((e0test | e1test) | e2test) >= 0) 
# 151
{ 
# 153
int bitID = ((x - (binBeg.x)) + ((y - (binBeg.y)) << 3)) >> 4; 
# 155
sampleMask |= (1LL << bitID); 
# 156
}  
# 157
e0test += step0x; 
# 158
e1test += step1x; 
# 159
e2test += step2x; 
# 160
}  
# 161
rowsume0 += step0y; 
# 162
rowsume1 += step1y; 
# 163
rowsume2 += step2y; 
# 164
}  
# 165
}  
# 169
if (sampleMask != (0LL)) 
# 170
{ 
# 171
int covCount = __popcll(sampleMask); 
# 172
unsigned long long tempMask = sampleMask; 
# 174
int rowsume1 = ((((binBeg.y) + 8) - (p.y1)) * x2mx1) - ((((binBeg.x) + 8) - (p.x1)) * y2my1); 
# 176
int rowsume2 = ((((binBeg.y) + 8) - (p.y2)) * x0mx2) - ((((binBeg.x) + 8) - (p.x2)) * y0my2); 
# 178
float z0mz2 = (p.z0) - (p.z2); 
# 179
float z1mz2 = (p.z1) - (p.z2); 
# 181
cvec3f dcol0mcol2 = (vcol0 - vcol2); 
# 182
cvec3f dcol1mcol2 = (vcol1 - vcol2); 
# 184
for (int fragID = 0; fragID < covCount; fragID++) 
# 185
{ 
# 186
int x, y; 
# 187
getSampleIdFromMask_cuda(tempMask, x, y); 
# 188
int e1test = (rowsume1 + (x * step1x)) + (y * step1y); 
# 189
int e2test = (rowsume2 + (x * step2x)) + (y * step2y); 
# 194
x = ((x << 4) + (binBeg.x)); 
# 196
y = ((y << 4) + (binBeg.y)); 
# 198
float alpha = ((float)e1test) * onebybary; 
# 199
float beta = ((float)e2test) * onebybary; 
# 201
float _zbyw = interpolate_alphabeta(z0mz2, z1mz2, p.z2, alpha, beta); 
# 203
int pixelID = piko::imad_cuda(y, constState_d.screenSizeX, x) >> 4; 
# 204
int remoteZi = float_as_int((1.0F)); 
# 205
int _zbywi = float_as_int(_zbyw); 
# 206
int *depthintptr = (int *)(&((mutableState_d.zBuffer)[pixelID])); 
# 209
do { 
# 211
remoteZi = atomicMin(depthintptr, _zbywi); 
# 212
} while (remoteZi > _zbywi); 
# 214
bool depthPassed = remoteZi >= _zbywi; 
# 216
if (depthPassed) 
# 217
{ 
# 218
cvec3f colorf; 
# 221
(colorf.x) = interpolate_alphabeta(dcol0mcol2.x, dcol1mcol2.x, vcol2.x, alpha, beta); 
# 222
(colorf.y) = interpolate_alphabeta(dcol0mcol2.y, dcol1mcol2.y, vcol2.y, alpha, beta); 
# 223
(colorf.z) = interpolate_alphabeta(dcol0mcol2.z, dcol1mcol2.z, vcol2.z, alpha, beta); 
# 236
Pixel pi; 
# 237
((pi.pos).x) = (x >> 4); 
# 238
((pi.pos).y) = (y >> 4); 
# 239
(pi.color) = piko::toABGR_cuda(colorf); 
# 247
((pixels[atomicAdd(index, 1)]) = pi); 
# 248
}  
# 249
tempMask &= (tempMask - (1)); 
# 250
}  
# 251
}  
# 252
} 
#endif
# 254 "/home/zhengzhen/workspace/versapipe/examples/rasterization/raster.h"
}
# 16 "/home/zhengzhen/workspace/versapipe/examples/rasterization/rasterPipe.h"
class RasterPipe : public PikoPipe { 
# 25
public: ConstantState *constState_; 
# 26
MutableState *mutableState_; 
# 27
int count_; 
# 28
PikoScreen pikoScreen; 
# 29
PikoArray< raster_wtri>  h_input; 
# 32
StageFloor *d_pikoScreen; MutableState *d_mutableState; PikoArray< raster_wtri>  *d_input; 
# 35
RasterPipe() 
# 36
{ 
# 38
} 
# 40
void run(ConstantState & constState, MutableState & mutableState, raster_wtri * input, int count); 
# 41
void allocate(ConstantState & constState, MutableState & mutableState, raster_wtri * input, int count); 
# 42
void prepare(); 
# 43
void run_single(); 
# 44
void destroy(); 
# 45
}; 
# 37 "/usr/include/x86_64-linux-gnu/sys/time.h" 3
extern "C" {
# 55
struct timezone { 
# 57
int tz_minuteswest; 
# 58
int tz_dsttime; 
# 59
}; 
# 61
typedef struct timezone *__restrict__ __timezone_ptr_t; 
# 71
extern int gettimeofday(timeval *__restrict__ __tv, __timezone_ptr_t __tz) throw()
# 72
 __attribute((__nonnull__(1))); 
# 77
extern int settimeofday(const timeval * __tv, const struct timezone * __tz) throw(); 
# 85
extern int adjtime(const timeval * __delta, timeval * __olddelta) throw(); 
# 91
enum __itimer_which { 
# 94
ITIMER_REAL, 
# 97
ITIMER_VIRTUAL, 
# 101
ITIMER_PROF
# 103
}; 
# 107
struct itimerval { 
# 110
timeval it_interval; 
# 112
timeval it_value; 
# 113
}; 
# 120
typedef int __itimer_which_t; 
# 125
extern int getitimer(__itimer_which_t __which, itimerval * __value) throw(); 
# 131
extern int setitimer(__itimer_which_t __which, const itimerval *__restrict__ __new, itimerval *__restrict__ __old) throw(); 
# 138
extern int utimes(const char * __file, const timeval  __tvp[2]) throw()
# 139
 __attribute((__nonnull__(1))); 
# 143
extern int lutimes(const char * __file, const timeval  __tvp[2]) throw()
# 144
 __attribute((__nonnull__(1))); 
# 147
extern int futimes(int __fd, const timeval  __tvp[2]) throw(); 
# 154
extern int futimesat(int __fd, const char * __file, const timeval  __tvp[2]) throw(); 
# 189
}
# 41 "/usr/include/c++/5/bits/codecvt.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
class codecvt_base { 
# 49
public: enum result { 
# 51
ok, 
# 52
partial, 
# 53
error, 
# 54
noconv
# 55
}; 
# 56
}; 
# 67
template< class _InternT, class _ExternT, class _StateT> 
# 68
class __codecvt_abstract_base : public locale::facet, public codecvt_base { 
# 73
public: typedef codecvt_base::result result; 
# 74
typedef _InternT intern_type; 
# 75
typedef _ExternT extern_type; 
# 76
typedef _StateT state_type; 
# 116
result out(state_type &__state, const intern_type *__from, const intern_type *
# 117
__from_end, const intern_type *&__from_next, extern_type *
# 118
__to, extern_type *__to_end, extern_type *&
# 119
__to_next) const 
# 120
{ 
# 121
return this->do_out(__state, __from, __from_end, __from_next, __to, __to_end, __to_next); 
# 123
} 
# 155
result unshift(state_type &__state, extern_type *__to, extern_type *__to_end, extern_type *&
# 156
__to_next) const 
# 157
{ return this->do_unshift(__state, __to, __to_end, __to_next); } 
# 196
result in(state_type &__state, const extern_type *__from, const extern_type *
# 197
__from_end, const extern_type *&__from_next, intern_type *
# 198
__to, intern_type *__to_end, intern_type *&
# 199
__to_next) const 
# 200
{ 
# 201
return this->do_in(__state, __from, __from_end, __from_next, __to, __to_end, __to_next); 
# 203
} 
# 206
int encoding() const throw() 
# 207
{ return this->do_encoding(); } 
# 210
bool always_noconv() const throw() 
# 211
{ return this->do_always_noconv(); } 
# 214
int length(state_type &__state, const extern_type *__from, const extern_type *
# 215
__end, size_t __max) const 
# 216
{ return this->do_length(__state, __from, __end, __max); } 
# 219
int max_length() const throw() 
# 220
{ return this->do_max_length(); } 
# 224
protected: explicit __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 227
virtual ~__codecvt_abstract_base() { } 
# 237
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const = 0; 
# 243
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const = 0; 
# 247
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const = 0; 
# 253
virtual int do_encoding() const throw() = 0; 
# 256
virtual bool do_always_noconv() const throw() = 0; 
# 259
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const = 0; 
# 263
virtual int do_max_length() const throw() = 0; 
# 264
}; 
# 273
template< class _InternT, class _ExternT, class _StateT> 
# 274
class codecvt : public __codecvt_abstract_base< _InternT, _ExternT, _StateT>  { 
# 279
public: typedef ::std::codecvt_base::result result; 
# 280
typedef _InternT intern_type; 
# 281
typedef _ExternT extern_type; 
# 282
typedef _StateT state_type; 
# 285
protected: ::std::__c_locale _M_c_locale_codecvt; 
# 288
public: static ::std::locale::id id; 
# 291
explicit codecvt(::std::size_t __refs = 0) : ::std::__codecvt_abstract_base< _InternT, _ExternT, _StateT> (__refs), _M_c_locale_codecvt((0)) 
# 294
{ } 
# 297
explicit codecvt(::std::__c_locale __cloc, ::std::size_t __refs = 0); 
# 301
protected: virtual ~codecvt() { } 
# 304
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 310
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 314
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 320
virtual int do_encoding() const throw(); 
# 323
virtual bool do_always_noconv() const throw(); 
# 326
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, ::std::size_t __max) const; 
# 330
virtual int do_max_length() const throw(); 
# 331
}; 
# 333
template< class _InternT, class _ExternT, class _StateT> locale::id 
# 334
codecvt< _InternT, _ExternT, _StateT> ::id; 
# 338
template<> class codecvt< char, char, __mbstate_t>  : public __codecvt_abstract_base< char, char, __mbstate_t>  { 
# 341
friend class __cxx11::messages< char> ; 
# 345
public: typedef char intern_type; 
# 346
typedef char extern_type; 
# 347
typedef mbstate_t state_type; 
# 350
protected: __c_locale _M_c_locale_codecvt; 
# 353
public: static locale::id id; 
# 356
explicit codecvt(size_t __refs = 0); 
# 359
explicit codecvt(__c_locale __cloc, size_t __refs = 0); 
# 363
protected: virtual ~codecvt(); 
# 366
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 372
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 376
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 382
virtual int do_encoding() const throw(); 
# 385
virtual bool do_always_noconv() const throw(); 
# 388
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const; 
# 392
virtual int do_max_length() const throw(); 
# 393
}; 
# 401
template<> class codecvt< wchar_t, char, __mbstate_t>  : public __codecvt_abstract_base< wchar_t, char, __mbstate_t>  { 
# 404
friend class __cxx11::messages< wchar_t> ; 
# 408
public: typedef wchar_t intern_type; 
# 409
typedef char extern_type; 
# 410
typedef mbstate_t state_type; 
# 413
protected: __c_locale _M_c_locale_codecvt; 
# 416
public: static locale::id id; 
# 419
explicit codecvt(size_t __refs = 0); 
# 422
explicit codecvt(__c_locale __cloc, size_t __refs = 0); 
# 426
protected: virtual ~codecvt(); 
# 429
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 435
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 440
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 447
virtual int do_encoding() const throw(); 
# 450
virtual bool do_always_noconv() const throw(); 
# 453
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const; 
# 457
virtual int do_max_length() const throw(); 
# 458
}; 
# 468
template<> class codecvt< char16_t, char, __mbstate_t>  : public __codecvt_abstract_base< char16_t, char, __mbstate_t>  { 
# 473
public: typedef char16_t intern_type; 
# 474
typedef char extern_type; 
# 475
typedef mbstate_t state_type; 
# 478
static locale::id id; 
# 481
explicit codecvt(size_t __refs = 0) : std::__codecvt_abstract_base< char16_t, char, __mbstate_t> (__refs) 
# 482
{ } 
# 486
protected: virtual ~codecvt(); 
# 489
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 495
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 500
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 507
virtual int do_encoding() const throw(); 
# 510
virtual bool do_always_noconv() const throw(); 
# 513
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const; 
# 517
virtual int do_max_length() const throw(); 
# 518
}; 
# 525
template<> class codecvt< char32_t, char, __mbstate_t>  : public __codecvt_abstract_base< char32_t, char, __mbstate_t>  { 
# 530
public: typedef char32_t intern_type; 
# 531
typedef char extern_type; 
# 532
typedef mbstate_t state_type; 
# 535
static locale::id id; 
# 538
explicit codecvt(size_t __refs = 0) : std::__codecvt_abstract_base< char32_t, char, __mbstate_t> (__refs) 
# 539
{ } 
# 543
protected: virtual ~codecvt(); 
# 546
virtual result do_out(state_type & __state, const intern_type * __from, const intern_type * __from_end, const intern_type *& __from_next, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 552
virtual result do_unshift(state_type & __state, extern_type * __to, extern_type * __to_end, extern_type *& __to_next) const; 
# 557
virtual result do_in(state_type & __state, const extern_type * __from, const extern_type * __from_end, const extern_type *& __from_next, intern_type * __to, intern_type * __to_end, intern_type *& __to_next) const; 
# 564
virtual int do_encoding() const throw(); 
# 567
virtual bool do_always_noconv() const throw(); 
# 570
virtual int do_length(state_type &, const extern_type * __from, const extern_type * __end, size_t __max) const; 
# 574
virtual int do_max_length() const throw(); 
# 575
}; 
# 581
template< class _InternT, class _ExternT, class _StateT> 
# 582
class codecvt_byname : public codecvt< _InternT, _ExternT, _StateT>  { 
# 586
public: explicit codecvt_byname(const char *__s, ::std::size_t __refs = 0) : ::std::codecvt< _InternT, _ExternT, _StateT> (__refs) 
# 588
{ 
# 589
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 591
{ 
# 592
(this->_S_destroy_c_locale((this->_M_c_locale_codecvt))); 
# 593
(this->_S_create_c_locale((this->_M_c_locale_codecvt), __s)); 
# 594
}  
# 595
} 
# 599
explicit codecvt_byname(const ::std::__cxx11::string &__s, ::std::size_t __refs = 0) : codecvt_byname(__s.c_str(), __refs) 
# 600
{ } 
# 605
protected: virtual ~codecvt_byname() { } 
# 606
}; 
# 610
template<> class codecvt_byname< char16_t, char, __mbstate_t>  : public codecvt< char16_t, char, __mbstate_t>  { 
# 615
public: explicit codecvt_byname(const char *__s, size_t __refs = 0) : std::codecvt< char16_t, char, __mbstate_t> (__refs) 
# 616
{ } 
# 619
explicit codecvt_byname(const __cxx11::string &__s, size_t __refs = 0) : codecvt_byname(__s.c_str(), __refs) 
# 620
{ } 
# 624
protected: virtual ~codecvt_byname() { } 
# 625
}; 
# 628
template<> class codecvt_byname< char32_t, char, __mbstate_t>  : public codecvt< char32_t, char, __mbstate_t>  { 
# 633
public: explicit codecvt_byname(const char *__s, size_t __refs = 0) : std::codecvt< char32_t, char, __mbstate_t> (__refs) 
# 634
{ } 
# 637
explicit codecvt_byname(const __cxx11::string &__s, size_t __refs = 0) : codecvt_byname(__s.c_str(), __refs) 
# 638
{ } 
# 642
protected: virtual ~codecvt_byname() { } 
# 643
}; 
# 649
extern template class codecvt_byname< char, char, __mbstate_t> ;
# 651
extern template const codecvt< char, char, __mbstate_t>  &use_facet< codecvt< char, char, __mbstate_t> > (const locale &);
# 655
extern template bool has_facet< codecvt< char, char, __mbstate_t> > (const locale &) throw();
# 660
extern template class codecvt_byname< wchar_t, char, __mbstate_t> ;
# 662
extern template const codecvt< wchar_t, char, __mbstate_t>  &use_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &);
# 666
extern template bool has_facet< codecvt< wchar_t, char, __mbstate_t> > (const locale &) throw();
# 679
}
# 38 "/usr/include/x86_64-linux-gnu/c++/5/bits/c++io.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
typedef __gthread_mutex_t __c_lock; 
# 45
typedef FILE __c_file; 
# 48
}
# 44 "/usr/include/x86_64-linux-gnu/c++/5/bits/basic_file.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _CharT> class __basic_file; 
# 54
template<> class __basic_file< char>  { 
# 57
__c_file *_M_cfile; 
# 60
bool _M_cfile_created; 
# 63
public: __basic_file(__c_lock * __lock = 0) throw(); 
# 66
__basic_file(std::__basic_file< char>  &&__rv, __c_lock *__lock = 0) noexcept : _M_cfile(__rv._M_cfile), _M_cfile_created(__rv._M_cfile_created) 
# 68
{ 
# 69
(__rv._M_cfile) = (nullptr); 
# 70
(__rv._M_cfile_created) = false; 
# 71
} 
# 73
std::__basic_file< char>  &operator=(const std::__basic_file< char>  &) = delete;
# 74
std::__basic_file< char>  &operator=(std::__basic_file< char>  &&) = delete;
# 77
void swap(std::__basic_file< char>  &__f) noexcept 
# 78
{ 
# 79
std::swap(_M_cfile, __f._M_cfile); 
# 80
std::swap(_M_cfile_created, __f._M_cfile_created); 
# 81
} 
# 85
std::__basic_file< char>  *open(const char * __name, ios_base::openmode __mode, int __prot = 436); 
# 88
std::__basic_file< char>  *sys_open(__c_file * __file, ios_base::openmode); 
# 91
std::__basic_file< char>  *sys_open(int __fd, ios_base::openmode __mode) throw(); 
# 94
std::__basic_file< char>  *close(); 
# 96
__attribute((__pure__)) bool 
# 97
is_open() const throw(); 
# 99
__attribute((__pure__)) int 
# 100
fd() throw(); 
# 102
__attribute((__pure__)) __c_file *
# 103
file() throw(); 
# 105
~__basic_file(); 
# 108
streamsize xsputn(const char * __s, streamsize __n); 
# 111
streamsize xsputn_2(const char * __s1, streamsize __n1, const char * __s2, streamsize __n2); 
# 115
streamsize xsgetn(char * __s, streamsize __n); 
# 118
streamoff seekoff(streamoff __off, ios_base::seekdir __way) throw(); 
# 121
int sync(); 
# 124
streamsize showmanyc(); 
# 125
}; 
# 128
}
# 47 "/usr/include/c++/5/fstream" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
template< class _CharT, class _Traits> 
# 72
class basic_filebuf : public basic_streambuf< _CharT, _Traits>  { 
# 75
template< class _Tp> using __chk_state = __and_< is_copy_assignable< _Tp> , is_copy_constructible< _Tp> , is_default_constructible< _Tp> > ; 
# 80
static_assert((__chk_state< typename _Traits::state_type> ::value), "state_type must be CopyAssignable, CopyConstructible and DefaultConstructible");
# 84
static_assert((is_same< typename _Traits::pos_type, fpos< typename _Traits::state_type> > ::value), "pos_type must be fpos<state_type>");
# 90
public: typedef _CharT char_type; 
# 91
typedef _Traits traits_type; 
# 92
typedef typename _Traits::int_type int_type; 
# 93
typedef typename _Traits::pos_type pos_type; 
# 94
typedef typename _Traits::off_type off_type; 
# 96
typedef ::std::basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 97
typedef basic_filebuf __filebuf_type; 
# 98
typedef ::std::__basic_file< char>  __file_type; 
# 99
typedef typename _Traits::state_type __state_type; 
# 100
typedef codecvt< _CharT, char, typename _Traits::state_type>  __codecvt_type; 
# 102
friend class ios_base; 
# 107
protected: ::std::__c_lock _M_lock; 
# 110
__file_type _M_file; 
# 113
::std::ios_base::openmode _M_mode; 
# 116
__state_type _M_state_beg; 
# 121
__state_type _M_state_cur; 
# 125
__state_type _M_state_last; 
# 128
char_type *_M_buf; 
# 135
::std::size_t _M_buf_size; 
# 138
bool _M_buf_allocated; 
# 147
bool _M_reading; 
# 148
bool _M_writing; 
# 156
char_type _M_pback; 
# 157
char_type *_M_pback_cur_save; 
# 158
char_type *_M_pback_end_save; 
# 159
bool _M_pback_init; 
# 163
const __codecvt_type *_M_codecvt; 
# 170
char *_M_ext_buf; 
# 175
::std::streamsize _M_ext_buf_size; 
# 182
const char *_M_ext_next; 
# 183
char *_M_ext_end; 
# 191
void _M_create_pback() 
# 192
{ 
# 193
if (!(_M_pback_init)) 
# 194
{ 
# 195
(_M_pback_cur_save) = (this->gptr()); 
# 196
(_M_pback_end_save) = (this->egptr()); 
# 197
(this->setg(&(_M_pback), &(_M_pback), (&(_M_pback)) + 1)); 
# 198
(_M_pback_init) = true; 
# 199
}  
# 200
} 
# 208
void _M_destroy_pback() throw() 
# 209
{ 
# 210
if (_M_pback_init) 
# 211
{ 
# 213
(_M_pback_cur_save) += ((this->gptr()) != (this->eback())); 
# 214
(this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save)); 
# 215
(_M_pback_init) = false; 
# 216
}  
# 217
} 
# 227
public: basic_filebuf(); 
# 230
basic_filebuf(const basic_filebuf &) = delete;
# 231
basic_filebuf(basic_filebuf &&); 
# 238
virtual ~basic_filebuf() 
# 239
{ this->close(); } 
# 242
basic_filebuf &operator=(const basic_filebuf &) = delete;
# 243
basic_filebuf &operator=(basic_filebuf &&); 
# 244
void swap(basic_filebuf &); 
# 252
bool is_open() const throw() 
# 253
{ return (_M_file).is_open(); } 
# 297
__filebuf_type *open(const char * __s, ::std::ios_base::openmode __mode); 
# 307
__filebuf_type *open(const ::std::__cxx11::string &__s, ::std::ios_base::openmode __mode) 
# 308
{ return this->open(__s.c_str(), __mode); } 
# 324
__filebuf_type *close(); 
# 328
protected: void _M_allocate_internal_buffer(); 
# 331
void _M_destroy_internal_buffer() throw(); 
# 335
virtual ::std::streamsize showmanyc(); 
# 343
virtual int_type underflow(); 
# 346
virtual int_type pbackfail(int_type __c = _Traits::eof()); 
# 356
virtual int_type overflow(int_type __c = _Traits::eof()); 
# 361
bool _M_convert_to_external(char_type *, ::std::streamsize); 
# 376
virtual __streambuf_type *setbuf(char_type * __s, ::std::streamsize __n); 
# 379
virtual pos_type seekoff(off_type __off, ::std::ios_base::seekdir __way, ::std::ios_base::openmode __mode = (::std::ios_base::in | ::std::ios_base::out)); 
# 383
virtual pos_type seekpos(pos_type __pos, ::std::ios_base::openmode __mode = (::std::ios_base::in | ::std::ios_base::out)); 
# 388
pos_type _M_seek(off_type __off, ::std::ios_base::seekdir __way, __state_type __state); 
# 391
int _M_get_ext_pos(__state_type & __state); 
# 394
virtual int sync(); 
# 397
virtual void imbue(const ::std::locale & __loc); 
# 400
virtual ::std::streamsize xsgetn(char_type * __s, ::std::streamsize __n); 
# 403
virtual ::std::streamsize xsputn(const char_type * __s, ::std::streamsize __n); 
# 407
bool _M_terminate_output(); 
# 422
void _M_set_buffer(::std::streamsize __off) 
# 423
{ 
# 424
const bool __testin = ((_M_mode) & ::std::ios_base::in); 
# 425
const bool __testout = (((_M_mode) & ::std::ios_base::out)) || (((_M_mode) & ::std::ios_base::app)); 
# 428
if (__testin && (__off > (0))) { 
# 429
(this->setg(_M_buf, _M_buf, (_M_buf) + __off)); } else { 
# 431
(this->setg(_M_buf, _M_buf, _M_buf)); }  
# 433
if (__testout && (__off == (0)) && ((_M_buf_size) > (1))) { 
# 434
(this->setp(_M_buf, ((_M_buf) + (_M_buf_size)) - 1)); } else { 
# 436
(this->setp(0, 0)); }  
# 437
} 
# 438
}; 
# 454
template< class _CharT, class _Traits> 
# 455
class basic_ifstream : public basic_istream< _CharT, _Traits>  { 
# 459
public: typedef _CharT char_type; 
# 460
typedef _Traits traits_type; 
# 461
typedef typename _Traits::int_type int_type; 
# 462
typedef typename _Traits::pos_type pos_type; 
# 463
typedef typename _Traits::off_type off_type; 
# 466
typedef basic_filebuf< _CharT, _Traits>  __filebuf_type; 
# 467
typedef ::std::basic_istream< _CharT, _Traits>  __istream_type; 
# 470
private: __filebuf_type _M_filebuf; 
# 481
public: basic_ifstream() : __istream_type(), _M_filebuf() 
# 482
{ (this->init(&(_M_filebuf))); } 
# 495
explicit basic_ifstream(const char *__s, ::std::ios_base::openmode __mode = ios_base::in) : __istream_type(), _M_filebuf() 
# 497
{ 
# 498
(this->init(&(_M_filebuf))); 
# 499
(this->open(__s, __mode)); 
# 500
} 
# 511
explicit basic_ifstream(const ::std::__cxx11::string &__s, ::std::ios_base::openmode 
# 512
__mode = ios_base::in) : __istream_type(), _M_filebuf() 
# 514
{ 
# 515
(this->init(&(_M_filebuf))); 
# 516
(this->open(__s, __mode)); 
# 517
} 
# 519
basic_ifstream(const basic_ifstream &) = delete;
# 521
basic_ifstream(basic_ifstream &&__rhs) : __istream_type(::std::move(__rhs)), _M_filebuf(::std::move(__rhs._M_filebuf)) 
# 524
{ __istream_type::set_rdbuf(&(_M_filebuf)); } 
# 533
~basic_ifstream() 
# 534
{ } 
# 540
basic_ifstream &operator=(const basic_ifstream &) = delete;
# 543
basic_ifstream &operator=(basic_ifstream &&__rhs) 
# 544
{ 
# 545
::std::basic_istream< _CharT, _Traits> ::operator=(::std::move(__rhs)); 
# 546
(_M_filebuf) = ::std::move(__rhs._M_filebuf); 
# 547
return *this; 
# 548
} 
# 551
void swap(basic_ifstream &__rhs) 
# 552
{ 
# 553
__istream_type::swap(__rhs); 
# 554
((_M_filebuf).swap(__rhs._M_filebuf)); 
# 555
} 
# 566
__filebuf_type *rdbuf() const 
# 567
{ return const_cast< __filebuf_type *>(&(_M_filebuf)); } 
# 574
bool is_open() 
# 575
{ return ((_M_filebuf).is_open()); } 
# 580
bool is_open() const 
# 581
{ return ((_M_filebuf).is_open()); } 
# 595
void open(const char *__s, ::std::ios_base::openmode __mode = ios_base::in) 
# 596
{ 
# 597
if (!((_M_filebuf).open(__s, (__mode | ::std::ios_base::in)))) { 
# 598
(this->setstate(ios_base::failbit)); } else { 
# 602
(this->clear()); }  
# 603
} 
# 615
void open(const ::std::__cxx11::string &__s, ::std::ios_base::openmode __mode = ios_base::in) 
# 616
{ 
# 617
if (!((_M_filebuf).open(__s, (__mode | ::std::ios_base::in)))) { 
# 618
(this->setstate(ios_base::failbit)); } else { 
# 622
(this->clear()); }  
# 623
} 
# 633
void close() 
# 634
{ 
# 635
if (!((_M_filebuf).close())) { 
# 636
(this->setstate(ios_base::failbit)); }  
# 637
} 
# 638
}; 
# 655
template< class _CharT, class _Traits> 
# 656
class basic_ofstream : public basic_ostream< _CharT, _Traits>  { 
# 660
public: typedef _CharT char_type; 
# 661
typedef _Traits traits_type; 
# 662
typedef typename _Traits::int_type int_type; 
# 663
typedef typename _Traits::pos_type pos_type; 
# 664
typedef typename _Traits::off_type off_type; 
# 667
typedef basic_filebuf< _CharT, _Traits>  __filebuf_type; 
# 668
typedef ::std::basic_ostream< _CharT, _Traits>  __ostream_type; 
# 671
private: __filebuf_type _M_filebuf; 
# 682
public: basic_ofstream() : __ostream_type(), _M_filebuf() 
# 683
{ (this->init(&(_M_filebuf))); } 
# 697
explicit basic_ofstream(const char *__s, ::std::ios_base::openmode 
# 698
__mode = (::std::ios_base::out | ::std::ios_base::trunc)) : __ostream_type(), _M_filebuf() 
# 700
{ 
# 701
(this->init(&(_M_filebuf))); 
# 702
(this->open(__s, __mode)); 
# 703
} 
# 715
explicit basic_ofstream(const ::std::__cxx11::string &__s, ::std::ios_base::openmode 
# 716
__mode = (::std::ios_base::out | ::std::ios_base::trunc)) : __ostream_type(), _M_filebuf() 
# 718
{ 
# 719
(this->init(&(_M_filebuf))); 
# 720
(this->open(__s, __mode)); 
# 721
} 
# 723
basic_ofstream(const basic_ofstream &) = delete;
# 725
basic_ofstream(basic_ofstream &&__rhs) : __ostream_type(::std::move(__rhs)), _M_filebuf(::std::move(__rhs._M_filebuf)) 
# 728
{ __ostream_type::set_rdbuf(&(_M_filebuf)); } 
# 737
~basic_ofstream() 
# 738
{ } 
# 744
basic_ofstream &operator=(const basic_ofstream &) = delete;
# 747
basic_ofstream &operator=(basic_ofstream &&__rhs) 
# 748
{ 
# 749
::std::basic_ostream< _CharT, _Traits> ::operator=(::std::move(__rhs)); 
# 750
(_M_filebuf) = ::std::move(__rhs._M_filebuf); 
# 751
return *this; 
# 752
} 
# 755
void swap(basic_ofstream &__rhs) 
# 756
{ 
# 757
__ostream_type::swap(__rhs); 
# 758
((_M_filebuf).swap(__rhs._M_filebuf)); 
# 759
} 
# 770
__filebuf_type *rdbuf() const 
# 771
{ return const_cast< __filebuf_type *>(&(_M_filebuf)); } 
# 778
bool is_open() 
# 779
{ return ((_M_filebuf).is_open()); } 
# 784
bool is_open() const 
# 785
{ return ((_M_filebuf).is_open()); } 
# 799
void open(const char *__s, ::std::ios_base::openmode 
# 800
__mode = (::std::ios_base::out | ::std::ios_base::trunc)) 
# 801
{ 
# 802
if (!((_M_filebuf).open(__s, (__mode | ::std::ios_base::out)))) { 
# 803
(this->setstate(ios_base::failbit)); } else { 
# 807
(this->clear()); }  
# 808
} 
# 820
void open(const ::std::__cxx11::string &__s, ::std::ios_base::openmode 
# 821
__mode = (::std::ios_base::out | ::std::ios_base::trunc)) 
# 822
{ 
# 823
if (!((_M_filebuf).open(__s, (__mode | ::std::ios_base::out)))) { 
# 824
(this->setstate(ios_base::failbit)); } else { 
# 828
(this->clear()); }  
# 829
} 
# 839
void close() 
# 840
{ 
# 841
if (!((_M_filebuf).close())) { 
# 842
(this->setstate(ios_base::failbit)); }  
# 843
} 
# 844
}; 
# 861
template< class _CharT, class _Traits> 
# 862
class basic_fstream : public basic_iostream< _CharT, _Traits>  { 
# 866
public: typedef _CharT char_type; 
# 867
typedef _Traits traits_type; 
# 868
typedef typename _Traits::int_type int_type; 
# 869
typedef typename _Traits::pos_type pos_type; 
# 870
typedef typename _Traits::off_type off_type; 
# 873
typedef basic_filebuf< _CharT, _Traits>  __filebuf_type; 
# 874
typedef ::std::basic_ios< _CharT, _Traits>  __ios_type; 
# 875
typedef ::std::basic_iostream< _CharT, _Traits>  __iostream_type; 
# 878
private: __filebuf_type _M_filebuf; 
# 889
public: basic_fstream() : __iostream_type(), _M_filebuf() 
# 891
{ (this->init(&(_M_filebuf))); } 
# 902
explicit basic_fstream(const char *__s, ::std::ios_base::openmode 
# 903
__mode = (::std::ios_base::in | ::std::ios_base::out)) : __iostream_type(0), _M_filebuf() 
# 905
{ 
# 906
(this->init(&(_M_filebuf))); 
# 907
(this->open(__s, __mode)); 
# 908
} 
# 917
explicit basic_fstream(const ::std::__cxx11::string &__s, ::std::ios_base::openmode 
# 918
__mode = (::std::ios_base::in | ::std::ios_base::out)) : __iostream_type(0), _M_filebuf() 
# 920
{ 
# 921
(this->init(&(_M_filebuf))); 
# 922
(this->open(__s, __mode)); 
# 923
} 
# 925
basic_fstream(const basic_fstream &) = delete;
# 927
basic_fstream(basic_fstream &&__rhs) : __iostream_type(::std::move(__rhs)), _M_filebuf(::std::move(__rhs._M_filebuf)) 
# 930
{ __iostream_type::set_rdbuf(&(_M_filebuf)); } 
# 939
~basic_fstream() 
# 940
{ } 
# 946
basic_fstream &operator=(const basic_fstream &) = delete;
# 949
basic_fstream &operator=(basic_fstream &&__rhs) 
# 950
{ 
# 951
::std::basic_iostream< _CharT, _Traits> ::operator=(::std::move(__rhs)); 
# 952
(_M_filebuf) = ::std::move(__rhs._M_filebuf); 
# 953
return *this; 
# 954
} 
# 957
void swap(basic_fstream &__rhs) 
# 958
{ 
# 959
__iostream_type::swap(__rhs); 
# 960
((_M_filebuf).swap(__rhs._M_filebuf)); 
# 961
} 
# 972
__filebuf_type *rdbuf() const 
# 973
{ return const_cast< __filebuf_type *>(&(_M_filebuf)); } 
# 980
bool is_open() 
# 981
{ return ((_M_filebuf).is_open()); } 
# 986
bool is_open() const 
# 987
{ return ((_M_filebuf).is_open()); } 
# 1001
void open(const char *__s, ::std::ios_base::openmode 
# 1002
__mode = (::std::ios_base::in | ::std::ios_base::out)) 
# 1003
{ 
# 1004
if (!((_M_filebuf).open(__s, __mode))) { 
# 1005
(this->setstate(ios_base::failbit)); } else { 
# 1009
(this->clear()); }  
# 1010
} 
# 1022
void open(const ::std::__cxx11::string &__s, ::std::ios_base::openmode 
# 1023
__mode = (::std::ios_base::in | ::std::ios_base::out)) 
# 1024
{ 
# 1025
if (!((_M_filebuf).open(__s, __mode))) { 
# 1026
(this->setstate(ios_base::failbit)); } else { 
# 1030
(this->clear()); }  
# 1031
} 
# 1041
void close() 
# 1042
{ 
# 1043
if (!((_M_filebuf).close())) { 
# 1044
(this->setstate(ios_base::failbit)); }  
# 1045
} 
# 1046
}; 
# 1050
template< class _CharT, class _Traits> inline void 
# 1052
swap(basic_filebuf< _CharT, _Traits>  &__x, basic_filebuf< _CharT, _Traits>  &
# 1053
__y) 
# 1054
{ (__x.swap(__y)); } 
# 1057
template< class _CharT, class _Traits> inline void 
# 1059
swap(basic_ifstream< _CharT, _Traits>  &__x, basic_ifstream< _CharT, _Traits>  &
# 1060
__y) 
# 1061
{ (__x.swap(__y)); } 
# 1064
template< class _CharT, class _Traits> inline void 
# 1066
swap(basic_ofstream< _CharT, _Traits>  &__x, basic_ofstream< _CharT, _Traits>  &
# 1067
__y) 
# 1068
{ (__x.swap(__y)); } 
# 1071
template< class _CharT, class _Traits> inline void 
# 1073
swap(basic_fstream< _CharT, _Traits>  &__x, basic_fstream< _CharT, _Traits>  &
# 1074
__y) 
# 1075
{ (__x.swap(__y)); } 
# 1079
}
# 42 "/usr/include/c++/5/bits/fstream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
template< class _CharT, class _Traits> void 
# 49
basic_filebuf< _CharT, _Traits> ::_M_allocate_internal_buffer() 
# 50
{ 
# 53
if ((!(_M_buf_allocated)) && (!(_M_buf))) 
# 54
{ 
# 55
(_M_buf) = (new char_type [_M_buf_size]); 
# 56
(_M_buf_allocated) = true; 
# 57
}  
# 58
} 
# 60
template< class _CharT, class _Traits> void 
# 63
basic_filebuf< _CharT, _Traits> ::_M_destroy_internal_buffer() throw() 
# 64
{ 
# 65
if (_M_buf_allocated) 
# 66
{ 
# 67
delete [] (_M_buf); 
# 68
(_M_buf) = 0; 
# 69
(_M_buf_allocated) = false; 
# 70
}  
# 71
delete [] (_M_ext_buf); 
# 72
(_M_ext_buf) = (0); 
# 73
(_M_ext_buf_size) = (0); 
# 74
(_M_ext_next) = (0); 
# 75
(_M_ext_end) = (0); 
# 76
} 
# 78
template< class _CharT, class _Traits> 
# 80
basic_filebuf< _CharT, _Traits> ::basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&(_M_lock)), _M_mode(((::std::ios_base::openmode)0)), _M_state_beg(), _M_state_cur(), _M_state_last(), _M_buf((0)), _M_buf_size((8192)), _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(), _M_pback_cur_save((0)), _M_pback_end_save((0)), _M_pback_init(false), _M_codecvt((0)), _M_ext_buf((0)), _M_ext_buf_size((0)), _M_ext_next((0)), _M_ext_end((0)) 
# 87
{ 
# 88
if (has_facet< __codecvt_type> ((this->_M_buf_locale))) { 
# 89
(_M_codecvt) = (&use_facet< __codecvt_type> ((this->_M_buf_locale))); }  
# 90
} 
# 93
template< class _CharT, class _Traits> 
# 95
basic_filebuf< _CharT, _Traits> ::basic_filebuf(basic_filebuf &&__rhs) : __streambuf_type(__rhs), _M_lock(), _M_file(std::move(__rhs._M_file), &(_M_lock)), _M_mode(::std::__exchange(__rhs._M_mode, (::std::ios_base::openmode)0)), _M_state_beg(::std::move(__rhs._M_state_beg)), _M_state_cur(::std::move(__rhs._M_state_cur)), _M_state_last(::std::move(__rhs._M_state_last)), _M_buf(::std::__exchange(__rhs._M_buf, nullptr)), _M_buf_size(std::__exchange(__rhs._M_buf_size, 1)), _M_buf_allocated(std::__exchange(__rhs._M_buf_allocated, false)), _M_reading(std::__exchange(__rhs._M_reading, false)), _M_writing(std::__exchange(__rhs._M_writing, false)), _M_pback(__rhs._M_pback), _M_pback_cur_save(::std::__exchange(__rhs._M_pback_cur_save, nullptr)), _M_pback_end_save(::std::__exchange(__rhs._M_pback_end_save, nullptr)), _M_pback_init(std::__exchange(__rhs._M_pback_init, false)), _M_codecvt(__rhs._M_codecvt), _M_ext_buf(std::__exchange(__rhs._M_ext_buf, nullptr)), _M_ext_buf_size(std::__exchange(__rhs._M_ext_buf_size, 0)), _M_ext_next(std::__exchange(__rhs._M_ext_next, nullptr)), _M_ext_end(std::__exchange(__rhs._M_ext_end, nullptr)) 
# 116
{ 
# 117
__rhs._M_set_buffer(-1); 
# 118
(__rhs._M_state_last) = ((__rhs._M_state_cur) = (__rhs._M_state_beg)); 
# 119
} 
# 121
template< class _CharT, class _Traits> basic_filebuf< _CharT, _Traits>  &
# 124
basic_filebuf< _CharT, _Traits> ::operator=(basic_filebuf &&__rhs) 
# 125
{ 
# 126
this->close(); 
# 127
::std::basic_streambuf< _CharT, _Traits> ::operator=(__rhs); 
# 128
(_M_file).swap(__rhs._M_file); 
# 129
(_M_mode) = ::std::__exchange(__rhs._M_mode, (::std::ios_base::openmode)0); 
# 130
(_M_state_beg) = ::std::move(__rhs._M_state_beg); 
# 131
(_M_state_cur) = ::std::move(__rhs._M_state_cur); 
# 132
(_M_state_last) = ::std::move(__rhs._M_state_last); 
# 133
(_M_buf) = ::std::__exchange(__rhs._M_buf, nullptr); 
# 134
(_M_buf_size) = std::__exchange(__rhs._M_buf_size, 1); 
# 135
(_M_buf_allocated) = std::__exchange(__rhs._M_buf_allocated, false); 
# 136
(_M_ext_buf) = std::__exchange(__rhs._M_ext_buf, nullptr); 
# 137
(_M_ext_buf_size) = std::__exchange(__rhs._M_ext_buf_size, 0); 
# 138
(_M_ext_next) = std::__exchange(__rhs._M_ext_next, nullptr); 
# 139
(_M_ext_end) = std::__exchange(__rhs._M_ext_end, nullptr); 
# 140
(_M_reading) = std::__exchange(__rhs._M_reading, false); 
# 141
(_M_writing) = std::__exchange(__rhs._M_writing, false); 
# 142
(_M_pback_cur_save) = ::std::__exchange(__rhs._M_pback_cur_save, nullptr); 
# 143
(_M_pback_end_save) = ::std::__exchange(__rhs._M_pback_end_save, nullptr); 
# 144
(_M_pback_init) = std::__exchange(__rhs._M_pback_init, false); 
# 145
__rhs._M_set_buffer(-1); 
# 146
(__rhs._M_state_last) = ((__rhs._M_state_cur) = (__rhs._M_state_beg)); 
# 147
return *this; 
# 148
} 
# 150
template< class _CharT, class _Traits> void 
# 153
basic_filebuf< _CharT, _Traits> ::swap(basic_filebuf &__rhs) 
# 154
{ 
# 155
__streambuf_type::swap(__rhs); 
# 156
(_M_file).swap(__rhs._M_file); 
# 157
std::swap(_M_mode, __rhs._M_mode); 
# 158
::std::swap(_M_state_beg, __rhs._M_state_beg); 
# 159
::std::swap(_M_state_cur, __rhs._M_state_cur); 
# 160
::std::swap(_M_state_last, __rhs._M_state_last); 
# 161
::std::swap(_M_buf, __rhs._M_buf); 
# 162
std::swap(_M_buf_size, __rhs._M_buf_size); 
# 163
std::swap(_M_buf_allocated, __rhs._M_buf_allocated); 
# 164
std::swap(_M_ext_buf, __rhs._M_ext_buf); 
# 165
std::swap(_M_ext_buf_size, __rhs._M_ext_buf_size); 
# 166
std::swap(_M_ext_next, __rhs._M_ext_next); 
# 167
std::swap(_M_ext_end, __rhs._M_ext_end); 
# 168
std::swap(_M_reading, __rhs._M_reading); 
# 169
std::swap(_M_writing, __rhs._M_writing); 
# 170
::std::swap(_M_pback_cur_save, __rhs._M_pback_cur_save); 
# 171
::std::swap(_M_pback_end_save, __rhs._M_pback_end_save); 
# 172
std::swap(_M_pback_init, __rhs._M_pback_init); 
# 173
} 
# 176
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::__filebuf_type *
# 179
basic_filebuf< _CharT, _Traits> ::open(const char *__s, ::std::ios_base::openmode __mode) 
# 180
{ 
# 181
__filebuf_type *__ret = (0); 
# 182
if (!this->is_open()) 
# 183
{ 
# 184
(_M_file).open(__s, __mode); 
# 185
if (this->is_open()) 
# 186
{ 
# 187
_M_allocate_internal_buffer(); 
# 188
(_M_mode) = __mode; 
# 191
(_M_reading) = false; 
# 192
(_M_writing) = false; 
# 193
_M_set_buffer(-1); 
# 196
(_M_state_last) = ((_M_state_cur) = (_M_state_beg)); 
# 199
if (((__mode & ::std::ios_base::ate)) && (this->seekoff(0, ::std::ios_base::end, __mode) == ((pos_type)((off_type)(-1))))) { 
# 202
this->close(); } else { 
# 204
__ret = this; }  
# 205
}  
# 206
}  
# 207
return __ret; 
# 208
} 
# 210
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::__filebuf_type *
# 213
basic_filebuf< _CharT, _Traits> ::close() 
# 214
{ 
# 215
if (!this->is_open()) { 
# 216
return 0; }  
# 218
bool __testfail = false; 
# 219
{ 
# 221
struct __close_sentry { 
# 223
basic_filebuf *__fb; 
# 224
__close_sentry(basic_filebuf *__fbi) : __fb(__fbi) { } 
# 225
~__close_sentry() 
# 226
{ 
# 227
((__fb)->_M_mode) = ((::std::ios_base::openmode)0); 
# 228
((__fb)->_M_pback_init) = false; 
# 229
(__fb)->_M_destroy_internal_buffer(); 
# 230
((__fb)->_M_reading) = false; 
# 231
((__fb)->_M_writing) = false; 
# 232
(__fb)->_M_set_buffer(-1); 
# 233
((__fb)->_M_state_last) = (((__fb)->_M_state_cur) = ((__fb)->_M_state_beg)); 
# 234
} 
# 235
} __cs(this); 
# 237
try 
# 238
{ 
# 239
if (!_M_terminate_output()) { 
# 240
__testfail = true; }  
# 241
} 
# 242
catch (::__cxxabiv1::__forced_unwind &) 
# 243
{ 
# 244
(_M_file).close(); 
# 245
throw; 
# 246
} 
# 247
catch (...) 
# 248
{ __testfail = true; }  
# 249
} 
# 251
if (!((_M_file).close())) { 
# 252
__testfail = true; }  
# 254
if (__testfail) { 
# 255
return 0; } else { 
# 257
return this; }  
# 258
} 
# 260
template< class _CharT, class _Traits> streamsize 
# 263
basic_filebuf< _CharT, _Traits> ::showmanyc() 
# 264
{ 
# 265
::std::streamsize __ret = (-1); 
# 266
const bool __testin = ((_M_mode) & ::std::ios_base::in); 
# 267
if (__testin && this->is_open()) 
# 268
{ 
# 271
__ret = ((this->egptr()) - (this->gptr())); 
# 279
if ((__check_facet(_M_codecvt).encoding()) >= 0) { 
# 281
__ret += ((_M_file).showmanyc() / ((_M_codecvt)->max_length())); }  
# 282
}  
# 283
return __ret; 
# 284
} 
# 286
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::int_type 
# 289
basic_filebuf< _CharT, _Traits> ::underflow() 
# 290
{ 
# 291
int_type __ret = traits_type::eof(); 
# 292
const bool __testin = ((_M_mode) & ::std::ios_base::in); 
# 293
if (__testin) 
# 294
{ 
# 295
if (_M_writing) 
# 296
{ 
# 297
if (overflow() == traits_type::eof()) { 
# 298
return __ret; }  
# 299
_M_set_buffer(-1); 
# 300
(_M_writing) = false; 
# 301
}  
# 305
_M_destroy_pback(); 
# 307
if ((this->gptr()) < (this->egptr())) { 
# 308
return traits_type::to_int_type(*(this->gptr())); }  
# 311
const ::std::size_t __buflen = ((_M_buf_size) > (1)) ? (_M_buf_size) - (1) : (1); 
# 314
bool __got_eof = false; 
# 316
::std::streamsize __ilen = (0); 
# 317
::std::codecvt_base::result __r = codecvt_base::ok; 
# 318
if ((__check_facet(_M_codecvt).always_noconv())) 
# 319
{ 
# 320
__ilen = (_M_file).xsgetn(reinterpret_cast< char *>((this->eback())), __buflen); 
# 322
if (__ilen == (0)) { 
# 323
__got_eof = true; }  
# 324
} else 
# 326
{ 
# 329
const int __enc = ((_M_codecvt)->encoding()); 
# 330
::std::streamsize __blen; 
# 331
::std::streamsize __rlen; 
# 332
if (__enc > 0) { 
# 333
__blen = (__rlen = (__buflen * __enc)); } else 
# 335
{ 
# 336
__blen = ((__buflen + ((_M_codecvt)->max_length())) - 1); 
# 337
__rlen = __buflen; 
# 338
}  
# 339
const ::std::streamsize __remainder = (_M_ext_end) - (_M_ext_next); 
# 340
__rlen = ((__rlen > __remainder) ? __rlen - __remainder : (0)); 
# 344
if ((_M_reading) && ((this->egptr()) == (this->eback())) && __remainder) { 
# 345
__rlen = (0); }  
# 349
if ((_M_ext_buf_size) < __blen) 
# 350
{ 
# 351
char *__buf = new char [__blen]; 
# 352
if (__remainder) { 
# 353
__builtin_memcpy(__buf, _M_ext_next, __remainder); }  
# 355
delete [] (_M_ext_buf); 
# 356
(_M_ext_buf) = __buf; 
# 357
(_M_ext_buf_size) = __blen; 
# 358
} else { 
# 359
if (__remainder) { 
# 360
__builtin_memmove(_M_ext_buf, _M_ext_next, __remainder); }  }  
# 362
(_M_ext_next) = (_M_ext_buf); 
# 363
(_M_ext_end) = ((_M_ext_buf) + __remainder); 
# 364
(_M_state_last) = (_M_state_cur); 
# 366
do 
# 367
{ 
# 368
if (__rlen > (0)) 
# 369
{ 
# 373
if ((((_M_ext_end) - (_M_ext_buf)) + __rlen) > (_M_ext_buf_size)) 
# 374
{ 
# 375
__throw_ios_failure("basic_filebuf::underflow codecvt::max_length() is not valid"); 
# 378
}  
# 379
::std::streamsize __elen = (_M_file).xsgetn(_M_ext_end, __rlen); 
# 380
if (__elen == (0)) { 
# 381
__got_eof = true; } else { 
# 382
if (__elen == (-1)) { 
# 383
break; }  }  
# 384
(_M_ext_end) += __elen; 
# 385
}  
# 387
char_type *__iend = (this->eback()); 
# 388
if ((_M_ext_next) < (_M_ext_end)) { 
# 389
__r = ((_M_codecvt)->in(_M_state_cur, _M_ext_next, _M_ext_end, _M_ext_next, (this->eback()), (this->eback()) + __buflen, __iend)); }  
# 393
if (__r == (codecvt_base::noconv)) 
# 394
{ 
# 395
::std::size_t __avail = (_M_ext_end) - (_M_ext_buf); 
# 396
__ilen = (std::min(__avail, __buflen)); 
# 397
traits_type::copy((this->eback()), reinterpret_cast< char_type *>(_M_ext_buf), __ilen); 
# 400
(_M_ext_next) = ((_M_ext_buf) + __ilen); 
# 401
} else { 
# 403
__ilen = (__iend - (this->eback())); }  
# 408
if (__r == (codecvt_base::error)) { 
# 409
break; }  
# 411
__rlen = (1); 
# 412
} 
# 413
while ((__ilen == (0)) && (!__got_eof)); 
# 414
}  
# 416
if (__ilen > (0)) 
# 417
{ 
# 418
_M_set_buffer(__ilen); 
# 419
(_M_reading) = true; 
# 420
__ret = traits_type::to_int_type(*(this->gptr())); 
# 421
} else { 
# 422
if (__got_eof) 
# 423
{ 
# 427
_M_set_buffer(-1); 
# 428
(_M_reading) = false; 
# 431
if (__r == (codecvt_base::partial)) { 
# 432
__throw_ios_failure("basic_filebuf::underflow incomplete character in file"); }  
# 434
} else { 
# 435
if (__r == (codecvt_base::error)) { 
# 436
__throw_ios_failure("basic_filebuf::underflow invalid byte sequence in file"); } else { 
# 439
__throw_ios_failure("basic_filebuf::underflow error reading the file"); }  }  }  
# 441
}  
# 442
return __ret; 
# 443
} 
# 445
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::int_type 
# 448
basic_filebuf< _CharT, _Traits> ::pbackfail(int_type __i) 
# 449
{ 
# 450
int_type __ret = traits_type::eof(); 
# 451
const bool __testin = ((_M_mode) & ::std::ios_base::in); 
# 452
if (__testin) 
# 453
{ 
# 454
if (_M_writing) 
# 455
{ 
# 456
if (overflow() == traits_type::eof()) { 
# 457
return __ret; }  
# 458
_M_set_buffer(-1); 
# 459
(_M_writing) = false; 
# 460
}  
# 463
const bool __testpb = _M_pback_init; 
# 464
const bool __testeof = traits_type::eq_int_type(__i, __ret); 
# 465
int_type __tmp; 
# 466
if ((this->eback()) < (this->gptr())) 
# 467
{ 
# 468
(this->gbump(-1)); 
# 469
__tmp = traits_type::to_int_type(*(this->gptr())); 
# 470
} else { 
# 471
if (this->seekoff(-1, ::std::ios_base::cur) != ((pos_type)((off_type)(-1)))) 
# 472
{ 
# 473
__tmp = this->underflow(); 
# 474
if (traits_type::eq_int_type(__tmp, __ret)) { 
# 475
return __ret; }  
# 476
} else 
# 478
{ 
# 484
return __ret; 
# 485
}  }  
# 489
if ((!__testeof) && traits_type::eq_int_type(__i, __tmp)) { 
# 490
__ret = __i; } else { 
# 491
if (__testeof) { 
# 492
__ret = traits_type::not_eof(__i); } else { 
# 493
if (!__testpb) 
# 494
{ 
# 495
_M_create_pback(); 
# 496
(_M_reading) = true; 
# 497
(*(this->gptr())) = traits_type::to_char_type(__i); 
# 498
__ret = __i; 
# 499
}  }  }  
# 500
}  
# 501
return __ret; 
# 502
} 
# 504
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::int_type 
# 507
basic_filebuf< _CharT, _Traits> ::overflow(int_type __c) 
# 508
{ 
# 509
int_type __ret = traits_type::eof(); 
# 510
const bool __testeof = traits_type::eq_int_type(__c, __ret); 
# 511
const bool __testout = (((_M_mode) & ::std::ios_base::out)) || (((_M_mode) & ::std::ios_base::app)); 
# 513
if (__testout) 
# 514
{ 
# 515
if (_M_reading) 
# 516
{ 
# 517
_M_destroy_pback(); 
# 518
const int __gptr_off = _M_get_ext_pos(_M_state_last); 
# 519
if (_M_seek(__gptr_off, ios_base::cur, _M_state_last) == ((pos_type)((off_type)(-1)))) { 
# 521
return __ret; }  
# 522
}  
# 523
if ((this->pbase()) < (this->pptr())) 
# 524
{ 
# 526
if (!__testeof) 
# 527
{ 
# 528
(*(this->pptr())) = traits_type::to_char_type(__c); 
# 529
(this->pbump(1)); 
# 530
}  
# 534
if (_M_convert_to_external((this->pbase()), (this->pptr()) - (this->pbase()))) 
# 536
{ 
# 537
_M_set_buffer(0); 
# 538
__ret = traits_type::not_eof(__c); 
# 539
}  
# 540
} else { 
# 541
if ((_M_buf_size) > (1)) 
# 542
{ 
# 546
_M_set_buffer(0); 
# 547
(_M_writing) = true; 
# 548
if (!__testeof) 
# 549
{ 
# 550
(*(this->pptr())) = traits_type::to_char_type(__c); 
# 551
(this->pbump(1)); 
# 552
}  
# 553
__ret = traits_type::not_eof(__c); 
# 554
} else 
# 556
{ 
# 558
char_type __conv = traits_type::to_char_type(__c); 
# 559
if (__testeof || _M_convert_to_external(&__conv, 1)) 
# 560
{ 
# 561
(_M_writing) = true; 
# 562
__ret = traits_type::not_eof(__c); 
# 563
}  
# 564
}  }  
# 565
}  
# 566
return __ret; 
# 567
} 
# 569
template< class _CharT, class _Traits> bool 
# 572
basic_filebuf< _CharT, _Traits> ::_M_convert_to_external(_CharT *__ibuf, ::std::streamsize __ilen) 
# 573
{ 
# 575
::std::streamsize __elen; 
# 576
::std::streamsize __plen; 
# 577
if ((__check_facet(_M_codecvt).always_noconv())) 
# 578
{ 
# 579
__elen = (_M_file).xsputn(reinterpret_cast< char *>(__ibuf), __ilen); 
# 580
__plen = __ilen; 
# 581
} else 
# 583
{ 
# 586
::std::streamsize __blen = __ilen * ((_M_codecvt)->max_length()); 
# 587
char *__buf = static_cast< char *>(__builtin_alloca(__blen)); 
# 589
char *__bend; 
# 590
const char_type *__iend; 
# 591
::std::codecvt_base::result __r; 
# 592
__r = ((_M_codecvt)->out(_M_state_cur, __ibuf, __ibuf + __ilen, __iend, __buf, __buf + __blen, __bend)); 
# 595
if ((__r == (codecvt_base::ok)) || (__r == (codecvt_base::partial))) { 
# 596
__blen = (__bend - __buf); } else { 
# 597
if (__r == (codecvt_base::noconv)) 
# 598
{ 
# 600
__buf = (reinterpret_cast< char *>(__ibuf)); 
# 601
__blen = __ilen; 
# 602
} else { 
# 604
__throw_ios_failure("basic_filebuf::_M_convert_to_external conversion error"); }  }  
# 607
__elen = (_M_file).xsputn(__buf, __blen); 
# 608
__plen = __blen; 
# 611
if ((__r == (codecvt_base::partial)) && (__elen == __plen)) 
# 612
{ 
# 613
const char_type *__iresume = __iend; 
# 614
::std::streamsize __rlen = (this->pptr()) - __iend; 
# 615
__r = ((_M_codecvt)->out(_M_state_cur, __iresume, __iresume + __rlen, __iend, __buf, __buf + __blen, __bend)); 
# 618
if (__r != (codecvt_base::error)) 
# 619
{ 
# 620
__rlen = (__bend - __buf); 
# 621
__elen = (_M_file).xsputn(__buf, __rlen); 
# 622
__plen = __rlen; 
# 623
} else { 
# 625
__throw_ios_failure("basic_filebuf::_M_convert_to_external conversion error"); }  
# 627
}  
# 628
}  
# 629
return __elen == __plen; 
# 630
} 
# 632
template< class _CharT, class _Traits> streamsize 
# 635
basic_filebuf< _CharT, _Traits> ::xsgetn(_CharT *__s, ::std::streamsize __n) 
# 636
{ 
# 638
::std::streamsize __ret = (0); 
# 639
if (_M_pback_init) 
# 640
{ 
# 641
if ((__n > (0)) && ((this->gptr()) == (this->eback()))) 
# 642
{ 
# 643
(*(__s++)) = (*(this->gptr())); 
# 644
(this->gbump(1)); 
# 645
__ret = (1); 
# 646
--__n; 
# 647
}  
# 648
_M_destroy_pback(); 
# 649
} else { 
# 650
if (_M_writing) 
# 651
{ 
# 652
if (overflow() == traits_type::eof()) { 
# 653
return __ret; }  
# 654
_M_set_buffer(-1); 
# 655
(_M_writing) = false; 
# 656
}  }  
# 661
const bool __testin = ((_M_mode) & ::std::ios_base::in); 
# 662
const ::std::streamsize __buflen = ((_M_buf_size) > (1)) ? (_M_buf_size) - (1) : (1); 
# 664
if ((__n > __buflen) && (__check_facet(_M_codecvt).always_noconv()) && __testin) 
# 666
{ 
# 668
const ::std::streamsize __avail = (this->egptr()) - (this->gptr()); 
# 669
if (__avail != (0)) 
# 670
{ 
# 671
traits_type::copy(__s, (this->gptr()), __avail); 
# 672
__s += __avail; 
# 673
(this->setg((this->eback()), (this->gptr()) + __avail, (this->egptr()))); 
# 675
__ret += __avail; 
# 676
__n -= __avail; 
# 677
}  
# 681
::std::streamsize __len; 
# 682
for (; ;) 
# 683
{ 
# 684
__len = (_M_file).xsgetn(reinterpret_cast< char *>(__s), __n); 
# 686
if (__len == (-1)) { 
# 687
__throw_ios_failure("basic_filebuf::xsgetn error reading the file"); }  
# 689
if (__len == (0)) { 
# 690
break; }  
# 692
__n -= __len; 
# 693
__ret += __len; 
# 694
if (__n == (0)) { 
# 695
break; }  
# 697
__s += __len; 
# 698
}  
# 700
if (__n == (0)) 
# 701
{ 
# 702
_M_set_buffer(0); 
# 703
(_M_reading) = true; 
# 704
} else { 
# 705
if (__len == (0)) 
# 706
{ 
# 710
_M_set_buffer(-1); 
# 711
(_M_reading) = false; 
# 712
}  }  
# 713
} else { 
# 715
__ret += __streambuf_type::xsgetn(__s, __n); }  
# 717
return __ret; 
# 718
} 
# 720
template< class _CharT, class _Traits> streamsize 
# 723
basic_filebuf< _CharT, _Traits> ::xsputn(const _CharT *__s, ::std::streamsize __n) 
# 724
{ 
# 725
::std::streamsize __ret = (0); 
# 729
const bool __testout = (((_M_mode) & ::std::ios_base::out)) || (((_M_mode) & ::std::ios_base::app)); 
# 731
if ((__check_facet(_M_codecvt).always_noconv()) && __testout && (!(_M_reading))) 
# 733
{ 
# 735
const ::std::streamsize __chunk = (1UL << 10); 
# 736
::std::streamsize __bufavail = (this->epptr()) - (this->pptr()); 
# 739
if ((!(_M_writing)) && ((_M_buf_size) > (1))) { 
# 740
__bufavail = ((_M_buf_size) - (1)); }  
# 742
const ::std::streamsize __limit = std::min(__chunk, __bufavail); 
# 743
if (__n >= __limit) 
# 744
{ 
# 745
const ::std::streamsize __buffill = (this->pptr()) - (this->pbase()); 
# 746
const char *__buf = reinterpret_cast< const char *>((this->pbase())); 
# 747
__ret = (_M_file).xsputn_2(__buf, __buffill, reinterpret_cast< const char *>(__s), __n); 
# 750
if (__ret == (__buffill + __n)) 
# 751
{ 
# 752
_M_set_buffer(0); 
# 753
(_M_writing) = true; 
# 754
}  
# 755
if (__ret > __buffill) { 
# 756
__ret -= __buffill; } else { 
# 758
__ret = (0); }  
# 759
} else { 
# 761
__ret = __streambuf_type::xsputn(__s, __n); }  
# 762
} else { 
# 764
__ret = __streambuf_type::xsputn(__s, __n); }  
# 765
return __ret; 
# 766
} 
# 768
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::__streambuf_type *
# 771
basic_filebuf< _CharT, _Traits> ::setbuf(char_type *__s, ::std::streamsize __n) 
# 772
{ 
# 773
if (!this->is_open()) 
# 774
{ 
# 775
if ((__s == 0) && (__n == (0))) { 
# 776
(_M_buf_size) = (1); } else { 
# 777
if (__s && (__n > (0))) 
# 778
{ 
# 787
(_M_buf) = __s; 
# 788
(_M_buf_size) = __n; 
# 789
}  }  
# 790
}  
# 791
return this; 
# 792
} 
# 797
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::pos_type 
# 800
basic_filebuf< _CharT, _Traits> ::seekoff(off_type __off, ::std::ios_base::seekdir __way, ::std::ios_base::openmode) 
# 801
{ 
# 802
int __width = 0; 
# 803
if (_M_codecvt) { 
# 804
__width = ((_M_codecvt)->encoding()); }  
# 805
if (__width < 0) { 
# 806
__width = 0; }  
# 808
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 809
const bool __testfail = (__off != 0) && (__width <= 0); 
# 810
if (this->is_open() && (!__testfail)) 
# 811
{ 
# 816
bool __no_movement = (__way == ::std::ios_base::cur) && (__off == 0) && ((!(_M_writing)) || ((_M_codecvt)->always_noconv())); 
# 820
if (!__no_movement) { 
# 821
_M_destroy_pback(); }  
# 828
__state_type __state = _M_state_beg; 
# 829
off_type __computed_off = __off * __width; 
# 830
if ((_M_reading) && (__way == ::std::ios_base::cur)) 
# 831
{ 
# 832
__state = (_M_state_last); 
# 833
__computed_off += _M_get_ext_pos(__state); 
# 834
}  
# 835
if (!__no_movement) { 
# 836
__ret = _M_seek(__computed_off, __way, __state); } else 
# 838
{ 
# 839
if (_M_writing) { 
# 840
__computed_off = ((this->pptr()) - (this->pbase())); }  
# 842
off_type __file_off = (_M_file).seekoff(0, ::std::ios_base::cur); 
# 843
if (__file_off != ((off_type)(-1))) 
# 844
{ 
# 845
__ret = (__file_off + __computed_off); 
# 846
(__ret.state(__state)); 
# 847
}  
# 848
}  
# 849
}  
# 850
return __ret; 
# 851
} 
# 857
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::pos_type 
# 860
basic_filebuf< _CharT, _Traits> ::seekpos(pos_type __pos, ::std::ios_base::openmode) 
# 861
{ 
# 862
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 863
if (this->is_open()) 
# 864
{ 
# 866
_M_destroy_pback(); 
# 867
__ret = _M_seek((off_type)__pos, ios_base::beg, (__pos.state())); 
# 868
}  
# 869
return __ret; 
# 870
} 
# 872
template< class _CharT, class _Traits> typename basic_filebuf< _CharT, _Traits> ::pos_type 
# 875
basic_filebuf< _CharT, _Traits> ::_M_seek(off_type __off, ::std::ios_base::seekdir __way, __state_type __state) 
# 876
{ 
# 877
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 878
if (_M_terminate_output()) 
# 879
{ 
# 880
off_type __file_off = (_M_file).seekoff(__off, __way); 
# 881
if (__file_off != ((off_type)(-1))) 
# 882
{ 
# 883
(_M_reading) = false; 
# 884
(_M_writing) = false; 
# 885
(_M_ext_next) = ((_M_ext_end) = (_M_ext_buf)); 
# 886
_M_set_buffer(-1); 
# 887
(_M_state_cur) = __state; 
# 888
__ret = __file_off; 
# 889
(__ret.state(_M_state_cur)); 
# 890
}  
# 891
}  
# 892
return __ret; 
# 893
} 
# 898
template< class _CharT, class _Traits> int 
# 900
basic_filebuf< _CharT, _Traits> ::_M_get_ext_pos(__state_type &__state) 
# 901
{ 
# 902
if (((_M_codecvt)->always_noconv())) { 
# 903
return (this->gptr()) - (this->egptr()); } else 
# 905
{ 
# 909
const int __gptr_off = ((_M_codecvt)->length(__state, _M_ext_buf, _M_ext_next, (this->gptr()) - (this->eback()))); 
# 912
return ((_M_ext_buf) + __gptr_off) - (_M_ext_end); 
# 913
}  
# 914
} 
# 916
template< class _CharT, class _Traits> bool 
# 919
basic_filebuf< _CharT, _Traits> ::_M_terminate_output() 
# 920
{ 
# 922
bool __testvalid = true; 
# 923
if ((this->pbase()) < (this->pptr())) 
# 924
{ 
# 925
const int_type __tmp = this->overflow(); 
# 926
if (traits_type::eq_int_type(__tmp, traits_type::eof())) { 
# 927
__testvalid = false; }  
# 928
}  
# 931
if ((_M_writing) && (!(__check_facet(_M_codecvt).always_noconv())) && __testvalid) 
# 933
{ 
# 937
const ::std::size_t __blen = (128); 
# 938
char __buf[__blen]; 
# 939
::std::codecvt_base::result __r; 
# 940
::std::streamsize __ilen = (0); 
# 942
do 
# 943
{ 
# 944
char *__next; 
# 945
__r = ((_M_codecvt)->unshift(_M_state_cur, __buf, (__buf) + __blen, __next)); 
# 947
if (__r == (codecvt_base::error)) { 
# 948
__testvalid = false; } else { 
# 949
if ((__r == (codecvt_base::ok)) || (__r == (codecvt_base::partial))) 
# 951
{ 
# 952
__ilen = (__next - (__buf)); 
# 953
if (__ilen > (0)) 
# 954
{ 
# 955
const ::std::streamsize __elen = (_M_file).xsputn(__buf, __ilen); 
# 956
if (__elen != __ilen) { 
# 957
__testvalid = false; }  
# 958
}  
# 959
}  }  
# 960
} 
# 961
while ((__r == (codecvt_base::partial)) && (__ilen > (0)) && __testvalid); 
# 963
if (__testvalid) 
# 964
{ 
# 969
const int_type __tmp = this->overflow(); 
# 970
if (traits_type::eq_int_type(__tmp, traits_type::eof())) { 
# 971
__testvalid = false; }  
# 972
}  
# 973
}  
# 974
return __testvalid; 
# 975
} 
# 977
template< class _CharT, class _Traits> int 
# 980
basic_filebuf< _CharT, _Traits> ::sync() 
# 981
{ 
# 984
int __ret = 0; 
# 985
if ((this->pbase()) < (this->pptr())) 
# 986
{ 
# 987
const int_type __tmp = this->overflow(); 
# 988
if (traits_type::eq_int_type(__tmp, traits_type::eof())) { 
# 989
__ret = (-1); }  
# 990
}  
# 991
return __ret; 
# 992
} 
# 994
template< class _CharT, class _Traits> void 
# 997
basic_filebuf< _CharT, _Traits> ::imbue(const ::std::locale &__loc) 
# 998
{ 
# 999
bool __testvalid = true; 
# 1001
const __codecvt_type *_M_codecvt_tmp = (0); 
# 1002
if (__builtin_expect(has_facet< __codecvt_type> (__loc), true)) { 
# 1003
_M_codecvt_tmp = (&use_facet< __codecvt_type> (__loc)); }  
# 1005
if (this->is_open()) 
# 1006
{ 
# 1008
if (((_M_reading) || (_M_writing)) && ((__check_facet(_M_codecvt).encoding()) == (-1))) { 
# 1010
__testvalid = false; } else 
# 1012
{ 
# 1013
if (_M_reading) 
# 1014
{ 
# 1015
if ((__check_facet(_M_codecvt).always_noconv())) 
# 1016
{ 
# 1017
if (_M_codecvt_tmp && (!(__check_facet(_M_codecvt_tmp).always_noconv()))) { 
# 1019
__testvalid = (this->seekoff(0, ::std::ios_base::cur, _M_mode) != ((pos_type)((off_type)(-1)))); }  
# 1021
} else 
# 1023
{ 
# 1025
(_M_ext_next) = ((_M_ext_buf) + ((_M_codecvt)->length(_M_state_last, _M_ext_buf, _M_ext_next, (this->gptr()) - (this->eback())))); 
# 1029
const ::std::streamsize __remainder = (_M_ext_end) - (_M_ext_next); 
# 1030
if (__remainder) { 
# 1031
__builtin_memmove(_M_ext_buf, _M_ext_next, __remainder); }  
# 1033
(_M_ext_next) = (_M_ext_buf); 
# 1034
(_M_ext_end) = ((_M_ext_buf) + __remainder); 
# 1035
_M_set_buffer(-1); 
# 1036
(_M_state_last) = ((_M_state_cur) = (_M_state_beg)); 
# 1037
}  
# 1038
} else { 
# 1039
if ((_M_writing) && (__testvalid = _M_terminate_output())) { 
# 1040
_M_set_buffer(-1); }  }  
# 1041
}  
# 1042
}  
# 1044
if (__testvalid) { 
# 1045
(_M_codecvt) = _M_codecvt_tmp; } else { 
# 1047
(_M_codecvt) = 0; }  
# 1048
} 
# 1053
extern template class basic_filebuf< char, char_traits< char> > ;
# 1054
extern template class basic_ifstream< char, char_traits< char> > ;
# 1055
extern template class basic_ofstream< char, char_traits< char> > ;
# 1056
extern template class basic_fstream< char, char_traits< char> > ;
# 1059
extern template class basic_filebuf< wchar_t, char_traits< wchar_t> > ;
# 1060
extern template class basic_ifstream< wchar_t, char_traits< wchar_t> > ;
# 1061
extern template class basic_ofstream< wchar_t, char_traits< wchar_t> > ;
# 1062
extern template class basic_fstream< wchar_t, char_traits< wchar_t> > ;
# 1067
}
# 41 "/usr/include/c++/5/sstream" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
inline namespace __cxx11 { 
# 64
template< class _CharT, class _Traits, class _Alloc> 
# 65
class basic_stringbuf : public basic_streambuf< _CharT, _Traits>  { 
# 67
struct __xfer_bufptrs; 
# 70
public: typedef _CharT char_type; 
# 71
typedef _Traits traits_type; 
# 74
typedef _Alloc allocator_type; 
# 75
typedef typename _Traits::int_type int_type; 
# 76
typedef typename _Traits::pos_type pos_type; 
# 77
typedef typename _Traits::off_type off_type; 
# 79
typedef ::std::basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 80
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 81
typedef typename basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 85
protected: ::std::ios_base::openmode _M_mode; 
# 88
__string_type _M_string; 
# 100
public: explicit basic_stringbuf(::std::ios_base::openmode __mode = (::std::ios_base::in | ::std::ios_base::out)) : __streambuf_type(), _M_mode(__mode), _M_string() 
# 102
{ } 
# 113
explicit basic_stringbuf(const __string_type &__str, ::std::ios_base::openmode 
# 114
__mode = (::std::ios_base::in | ::std::ios_base::out)) : __streambuf_type(), _M_mode(), _M_string((__str.data()), (__str.size())) 
# 116
{ _M_stringbuf_init(__mode); } 
# 119
basic_stringbuf(const basic_stringbuf &) = delete;
# 121
basic_stringbuf(basic_stringbuf &&__rhs) : basic_stringbuf(::std::move(__rhs), __xfer_bufptrs(__rhs, this)) 
# 123
{ __rhs._M_sync(const_cast< char_type *>(((__rhs._M_string).data())), 0, 0); } 
# 128
basic_stringbuf &operator=(const basic_stringbuf &) = delete;
# 131
basic_stringbuf &operator=(basic_stringbuf &&__rhs) 
# 132
{ 
# 133
__xfer_bufptrs __st{__rhs, this}; 
# 134
const __streambuf_type &__base = __rhs; 
# 135
::std::basic_streambuf< _CharT, _Traits> ::operator=(__base); 
# 136
(this->pubimbue((__rhs.getloc()))); 
# 137
(_M_mode) = (__rhs._M_mode); 
# 138
(_M_string) = ::std::move(__rhs._M_string); 
# 139
__rhs._M_sync(const_cast< char_type *>(((__rhs._M_string).data())), 0, 0); 
# 140
return *this; 
# 141
} 
# 144
void swap(basic_stringbuf &__rhs) 
# 145
{ 
# 146
__xfer_bufptrs __l_st{*this, ::std::__addressof(__rhs)}; 
# 147
__xfer_bufptrs __r_st{__rhs, this}; 
# 148
__streambuf_type &__base = __rhs; 
# 149
__streambuf_type::swap(__base); 
# 150
(__rhs.pubimbue((this->pubimbue((__rhs.getloc()))))); 
# 151
std::swap(_M_mode, __rhs._M_mode); 
# 152
::std::swap(_M_string, __rhs._M_string); 
# 153
} 
# 166
__string_type str() const 
# 167
{ 
# 168
__string_type __ret; 
# 169
if ((this->pptr())) 
# 170
{ 
# 172
if ((this->pptr()) > (this->egptr())) { 
# 173
__ret = __string_type((this->pbase()), (this->pptr())); } else { 
# 175
__ret = __string_type((this->pbase()), (this->egptr())); }  
# 176
} else { 
# 178
__ret = (_M_string); }  
# 179
return __ret; 
# 180
} 
# 190
void str(const __string_type &__s) 
# 191
{ 
# 194
((_M_string).assign((__s.data()), (__s.size()))); 
# 195
_M_stringbuf_init(_M_mode); 
# 196
} 
# 201
protected: void _M_stringbuf_init(::std::ios_base::openmode __mode) 
# 202
{ 
# 203
(_M_mode) = __mode; 
# 204
__size_type __len = (0); 
# 205
if (((_M_mode) & ((::std::ios_base::ate | ::std::ios_base::app)))) { 
# 206
__len = ((_M_string).size()); }  
# 207
_M_sync(const_cast< char_type *>(((_M_string).data())), 0, __len); 
# 208
} 
# 211
virtual ::std::streamsize showmanyc() 
# 212
{ 
# 213
::std::streamsize __ret = (-1); 
# 214
if (((_M_mode) & ::std::ios_base::in)) 
# 215
{ 
# 216
_M_update_egptr(); 
# 217
__ret = ((this->egptr()) - (this->gptr())); 
# 218
}  
# 219
return __ret; 
# 220
} 
# 223
virtual int_type underflow(); 
# 226
virtual int_type pbackfail(int_type __c = traits_type::eof()); 
# 229
virtual int_type overflow(int_type __c = traits_type::eof()); 
# 243
virtual __streambuf_type *setbuf(char_type *__s, ::std::streamsize __n) 
# 244
{ 
# 245
if (__s && (__n >= (0))) 
# 246
{ 
# 253
((_M_string).clear()); 
# 256
_M_sync(__s, __n, 0); 
# 257
}  
# 258
return this; 
# 259
} 
# 262
virtual pos_type seekoff(off_type __off, ::std::ios_base::seekdir __way, ::std::ios_base::openmode __mode = (::std::ios_base::in | ::std::ios_base::out)); 
# 266
virtual pos_type seekpos(pos_type __sp, ::std::ios_base::openmode __mode = (::std::ios_base::in | ::std::ios_base::out)); 
# 273
void _M_sync(char_type * __base, __size_type __i, __size_type __o); 
# 278
void _M_update_egptr() 
# 279
{ 
# 280
const bool __testin = ((_M_mode) & ::std::ios_base::in); 
# 281
if ((this->pptr()) && ((this->pptr()) > (this->egptr()))) 
# 282
{ 
# 283
if (__testin) { 
# 284
(this->setg((this->eback()), (this->gptr()), (this->pptr()))); } else { 
# 286
(this->setg((this->pptr()), (this->pptr()), (this->pptr()))); }  
# 287
}  
# 288
} 
# 293
void _M_pbump(char_type * __pbeg, char_type * __pend, off_type __off); 
# 300
private: struct __xfer_bufptrs { 
# 302
__xfer_bufptrs(const basic_stringbuf &__from, basic_stringbuf *__to) : _M_to{__to}, _M_goff{(-1), (-1), (-1)}, _M_poff{(-1), (-1), (-1)} 
# 304
{ 
# 305
const _CharT *__str = ((__from._M_string).data()); 
# 306
if ((__from.eback())) 
# 307
{ 
# 308
((_M_goff)[0]) = ((__from.eback()) - __str); 
# 309
((_M_goff)[1]) = ((__from.gptr()) - __str); 
# 310
((_M_goff)[2]) = ((__from.egptr()) - __str); 
# 311
}  
# 312
if ((__from.pbase())) 
# 313
{ 
# 314
((_M_poff)[0]) = ((__from.pbase()) - __str); 
# 315
((_M_poff)[1]) = ((__from.pptr()) - (__from.pbase())); 
# 316
((_M_poff)[2]) = ((__from.epptr()) - __str); 
# 317
}  
# 318
} 
# 320
~__xfer_bufptrs() 
# 321
{ 
# 322
char_type *__str = const_cast< char_type *>((((_M_to)->_M_string).data())); 
# 323
if (((_M_goff)[0]) != (-1)) { 
# 324
((_M_to)->setg(__str + ((_M_goff)[0]), __str + ((_M_goff)[1]), __str + ((_M_goff)[2]))); }  
# 325
if (((_M_poff)[0]) != (-1)) { 
# 326
(_M_to)->_M_pbump(__str + ((_M_poff)[0]), __str + ((_M_poff)[2]), (_M_poff)[1]); }  
# 327
} 
# 329
basic_stringbuf *_M_to; 
# 330
off_type _M_goff[3]; 
# 331
off_type _M_poff[3]; 
# 332
}; 
# 343
basic_stringbuf(basic_stringbuf &&__rhs, __xfer_bufptrs &&) : __streambuf_type(static_cast< const __streambuf_type &>(__rhs)), _M_mode(__rhs._M_mode), _M_string(::std::move(__rhs._M_string)) 
# 346
{ } 
# 348
}; 
# 366
template< class _CharT, class _Traits, class _Alloc> 
# 367
class basic_istringstream : public basic_istream< _CharT, _Traits>  { 
# 371
public: typedef _CharT char_type; 
# 372
typedef _Traits traits_type; 
# 375
typedef _Alloc allocator_type; 
# 376
typedef typename _Traits::int_type int_type; 
# 377
typedef typename _Traits::pos_type pos_type; 
# 378
typedef typename _Traits::off_type off_type; 
# 381
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 382
typedef basic_stringbuf< _CharT, _Traits, _Alloc>  __stringbuf_type; 
# 383
typedef ::std::basic_istream< _CharT, _Traits>  __istream_type; 
# 386
private: __stringbuf_type _M_stringbuf; 
# 403
public: explicit basic_istringstream(::std::ios_base::openmode __mode = ios_base::in) : __istream_type(), _M_stringbuf((__mode | ::std::ios_base::in)) 
# 405
{ (this->init(&(_M_stringbuf))); } 
# 421
explicit basic_istringstream(const __string_type &__str, ::std::ios_base::openmode 
# 422
__mode = ios_base::in) : __istream_type(), _M_stringbuf(__str, (__mode | ::std::ios_base::in)) 
# 424
{ (this->init(&(_M_stringbuf))); } 
# 432
~basic_istringstream() 
# 433
{ } 
# 436
basic_istringstream(const basic_istringstream &) = delete;
# 438
basic_istringstream(basic_istringstream &&__rhs) : __istream_type(::std::move(__rhs)), _M_stringbuf(::std::move(__rhs._M_stringbuf)) 
# 441
{ __istream_type::set_rdbuf(&(_M_stringbuf)); } 
# 446
basic_istringstream &operator=(const basic_istringstream &) = delete;
# 449
basic_istringstream &operator=(basic_istringstream &&__rhs) 
# 450
{ 
# 451
::std::basic_istream< _CharT, _Traits> ::operator=(::std::move(__rhs)); 
# 452
(_M_stringbuf) = ::std::move(__rhs._M_stringbuf); 
# 453
return *this; 
# 454
} 
# 457
void swap(basic_istringstream &__rhs) 
# 458
{ 
# 459
__istream_type::swap(__rhs); 
# 460
((_M_stringbuf).swap(__rhs._M_stringbuf)); 
# 461
} 
# 472
__stringbuf_type *rdbuf() const 
# 473
{ return const_cast< __stringbuf_type *>(&(_M_stringbuf)); } 
# 480
__string_type str() const 
# 481
{ return ((_M_stringbuf).str()); } 
# 490
void str(const __string_type &__s) 
# 491
{ ((_M_stringbuf).str(__s)); } 
# 492
}; 
# 510
template< class _CharT, class _Traits, class _Alloc> 
# 511
class basic_ostringstream : public basic_ostream< _CharT, _Traits>  { 
# 515
public: typedef _CharT char_type; 
# 516
typedef _Traits traits_type; 
# 519
typedef _Alloc allocator_type; 
# 520
typedef typename _Traits::int_type int_type; 
# 521
typedef typename _Traits::pos_type pos_type; 
# 522
typedef typename _Traits::off_type off_type; 
# 525
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 526
typedef basic_stringbuf< _CharT, _Traits, _Alloc>  __stringbuf_type; 
# 527
typedef ::std::basic_ostream< _CharT, _Traits>  __ostream_type; 
# 530
private: __stringbuf_type _M_stringbuf; 
# 547
public: explicit basic_ostringstream(::std::ios_base::openmode __mode = ios_base::out) : __ostream_type(), _M_stringbuf((__mode | ::std::ios_base::out)) 
# 549
{ (this->init(&(_M_stringbuf))); } 
# 565
explicit basic_ostringstream(const __string_type &__str, ::std::ios_base::openmode 
# 566
__mode = ios_base::out) : __ostream_type(), _M_stringbuf(__str, (__mode | ::std::ios_base::out)) 
# 568
{ (this->init(&(_M_stringbuf))); } 
# 576
~basic_ostringstream() 
# 577
{ } 
# 580
basic_ostringstream(const basic_ostringstream &) = delete;
# 582
basic_ostringstream(basic_ostringstream &&__rhs) : __ostream_type(::std::move(__rhs)), _M_stringbuf(::std::move(__rhs._M_stringbuf)) 
# 585
{ __ostream_type::set_rdbuf(&(_M_stringbuf)); } 
# 590
basic_ostringstream &operator=(const basic_ostringstream &) = delete;
# 593
basic_ostringstream &operator=(basic_ostringstream &&__rhs) 
# 594
{ 
# 595
::std::basic_ostream< _CharT, _Traits> ::operator=(::std::move(__rhs)); 
# 596
(_M_stringbuf) = ::std::move(__rhs._M_stringbuf); 
# 597
return *this; 
# 598
} 
# 601
void swap(basic_ostringstream &__rhs) 
# 602
{ 
# 603
__ostream_type::swap(__rhs); 
# 604
((_M_stringbuf).swap(__rhs._M_stringbuf)); 
# 605
} 
# 616
__stringbuf_type *rdbuf() const 
# 617
{ return const_cast< __stringbuf_type *>(&(_M_stringbuf)); } 
# 624
__string_type str() const 
# 625
{ return ((_M_stringbuf).str()); } 
# 634
void str(const __string_type &__s) 
# 635
{ ((_M_stringbuf).str(__s)); } 
# 636
}; 
# 654
template< class _CharT, class _Traits, class _Alloc> 
# 655
class basic_stringstream : public basic_iostream< _CharT, _Traits>  { 
# 659
public: typedef _CharT char_type; 
# 660
typedef _Traits traits_type; 
# 663
typedef _Alloc allocator_type; 
# 664
typedef typename _Traits::int_type int_type; 
# 665
typedef typename _Traits::pos_type pos_type; 
# 666
typedef typename _Traits::off_type off_type; 
# 669
typedef basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 670
typedef basic_stringbuf< _CharT, _Traits, _Alloc>  __stringbuf_type; 
# 671
typedef ::std::basic_iostream< _CharT, _Traits>  __iostream_type; 
# 674
private: __stringbuf_type _M_stringbuf; 
# 690
public: explicit basic_stringstream(::std::ios_base::openmode __m = (::std::ios_base::out | ::std::ios_base::in)) : __iostream_type(), _M_stringbuf(__m) 
# 692
{ (this->init(&(_M_stringbuf))); } 
# 706
explicit basic_stringstream(const __string_type &__str, ::std::ios_base::openmode 
# 707
__m = (::std::ios_base::out | ::std::ios_base::in)) : __iostream_type(), _M_stringbuf(__str, __m) 
# 709
{ (this->init(&(_M_stringbuf))); } 
# 717
~basic_stringstream() 
# 718
{ } 
# 721
basic_stringstream(const basic_stringstream &) = delete;
# 723
basic_stringstream(basic_stringstream &&__rhs) : __iostream_type(::std::move(__rhs)), _M_stringbuf(::std::move(__rhs._M_stringbuf)) 
# 726
{ __iostream_type::set_rdbuf(&(_M_stringbuf)); } 
# 731
basic_stringstream &operator=(const basic_stringstream &) = delete;
# 734
basic_stringstream &operator=(basic_stringstream &&__rhs) 
# 735
{ 
# 736
::std::basic_iostream< _CharT, _Traits> ::operator=(::std::move(__rhs)); 
# 737
(_M_stringbuf) = ::std::move(__rhs._M_stringbuf); 
# 738
return *this; 
# 739
} 
# 742
void swap(basic_stringstream &__rhs) 
# 743
{ 
# 744
__iostream_type::swap(__rhs); 
# 745
((_M_stringbuf).swap(__rhs._M_stringbuf)); 
# 746
} 
# 757
__stringbuf_type *rdbuf() const 
# 758
{ return const_cast< __stringbuf_type *>(&(_M_stringbuf)); } 
# 765
__string_type str() const 
# 766
{ return ((_M_stringbuf).str()); } 
# 775
void str(const __string_type &__s) 
# 776
{ ((_M_stringbuf).str(__s)); } 
# 777
}; 
# 781
template< class _CharT, class _Traits, class _Allocator> inline void 
# 783
swap(basic_stringbuf< _CharT, _Traits, _Allocator>  &__x, basic_stringbuf< _CharT, _Traits, _Allocator>  &
# 784
__y) 
# 785
{ (__x.swap(__y)); } 
# 788
template< class _CharT, class _Traits, class _Allocator> inline void 
# 790
swap(basic_istringstream< _CharT, _Traits, _Allocator>  &__x, basic_istringstream< _CharT, _Traits, _Allocator>  &
# 791
__y) 
# 792
{ (__x.swap(__y)); } 
# 795
template< class _CharT, class _Traits, class _Allocator> inline void 
# 797
swap(basic_ostringstream< _CharT, _Traits, _Allocator>  &__x, basic_ostringstream< _CharT, _Traits, _Allocator>  &
# 798
__y) 
# 799
{ (__x.swap(__y)); } 
# 802
template< class _CharT, class _Traits, class _Allocator> inline void 
# 804
swap(basic_stringstream< _CharT, _Traits, _Allocator>  &__x, basic_stringstream< _CharT, _Traits, _Allocator>  &
# 805
__y) 
# 806
{ (__x.swap(__y)); } 
# 809
}
# 811
}
# 39 "/usr/include/c++/5/bits/sstream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::int_type 
# 46
__cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::pbackfail(int_type __c) 
# 47
{ 
# 48
int_type __ret = traits_type::eof(); 
# 49
if ((this->eback()) < (this->gptr())) 
# 50
{ 
# 53
const bool __testeof = traits_type::eq_int_type(__c, __ret); 
# 54
if (!__testeof) 
# 55
{ 
# 56
const bool __testeq = traits_type::eq(traits_type::to_char_type(__c), (this->gptr())[-1]); 
# 59
const bool __testout = ((this->_M_mode) & ::std::ios_base::out); 
# 60
if (__testeq || __testout) 
# 61
{ 
# 62
(this->gbump(-1)); 
# 63
if (!__testeq) { 
# 64
(*(this->gptr())) = traits_type::to_char_type(__c); }  
# 65
__ret = __c; 
# 66
}  
# 67
} else 
# 69
{ 
# 70
(this->gbump(-1)); 
# 71
__ret = traits_type::not_eof(__c); 
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::int_type 
# 80
__cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::overflow(int_type __c) 
# 81
{ 
# 82
const bool __testout = ((this->_M_mode) & ::std::ios_base::out); 
# 83
if (__builtin_expect(!__testout, false)) { 
# 84
return traits_type::eof(); }  
# 86
const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof()); 
# 87
if (__builtin_expect(__testeof, false)) { 
# 88
return traits_type::not_eof(__c); }  
# 90
const __size_type __capacity = ((_M_string).capacity()); 
# 91
const __size_type __max_size = ((_M_string).max_size()); 
# 92
const bool __testput = (this->pptr()) < (this->epptr()); 
# 93
if (__builtin_expect((!__testput) && (__capacity == __max_size), false)) { 
# 94
return traits_type::eof(); }  
# 98
const char_type __conv = traits_type::to_char_type(__c); 
# 99
if (!__testput) 
# 100
{ 
# 110
const __size_type __opt_len = ::std::max((__size_type)(2 * __capacity), (__size_type)512); 
# 112
const __size_type __len = ::std::min(__opt_len, __max_size); 
# 113
__string_type __tmp; 
# 114
(__tmp.reserve(__len)); 
# 115
if ((this->pbase())) { 
# 116
(__tmp.assign((this->pbase()), (this->epptr()) - (this->pbase()))); }  
# 117
(__tmp.push_back(__conv)); 
# 118
((_M_string).swap(__tmp)); 
# 119
_M_sync(const_cast< char_type *>(((_M_string).data())), (this->gptr()) - (this->eback()), (this->pptr()) - (this->pbase())); 
# 121
} else { 
# 123
(*(this->pptr())) = __conv; }  
# 124
(this->pbump(1)); 
# 125
return __c; 
# 126
} 
# 128
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::int_type 
# 131
__cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::underflow() 
# 132
{ 
# 133
int_type __ret = traits_type::eof(); 
# 134
const bool __testin = ((this->_M_mode) & ::std::ios_base::in); 
# 135
if (__testin) 
# 136
{ 
# 138
_M_update_egptr(); 
# 140
if ((this->gptr()) < (this->egptr())) { 
# 141
__ret = traits_type::to_int_type(*(this->gptr())); }  
# 142
}  
# 143
return __ret; 
# 144
} 
# 146
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::pos_type 
# 149
__cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::seekoff(off_type __off, ::std::ios_base::seekdir __way, ::std::ios_base::openmode __mode) 
# 150
{ 
# 151
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 152
bool __testin = ((((::std::ios_base::in & (this->_M_mode))) & __mode)) != 0; 
# 153
bool __testout = ((((::std::ios_base::out & (this->_M_mode))) & __mode)) != 0; 
# 154
const bool __testboth = __testin && __testout && (__way != ::std::ios_base::cur); 
# 155
__testin &= (!((__mode & ::std::ios_base::out))); 
# 156
__testout &= (!((__mode & ::std::ios_base::in))); 
# 160
const char_type *__beg = __testin ? (this->eback()) : (this->pbase()); 
# 161
if ((__beg || (!__off)) && ((__testin || __testout) || __testboth)) 
# 162
{ 
# 163
_M_update_egptr(); 
# 165
off_type __newoffi = __off; 
# 166
off_type __newoffo = __newoffi; 
# 167
if (__way == ::std::ios_base::cur) 
# 168
{ 
# 169
__newoffi += ((this->gptr()) - __beg); 
# 170
__newoffo += ((this->pptr()) - __beg); 
# 171
} else { 
# 172
if (__way == ::std::ios_base::end) { 
# 173
__newoffo = (__newoffi += ((this->egptr()) - __beg)); }  }  
# 175
if ((__testin || __testboth) && (__newoffi >= 0) && (((this->egptr()) - __beg) >= __newoffi)) 
# 178
{ 
# 179
(this->setg((this->eback()), (this->eback()) + __newoffi, (this->egptr()))); 
# 181
__ret = ((pos_type)__newoffi); 
# 182
}  
# 183
if ((__testout || __testboth) && (__newoffo >= 0) && (((this->egptr()) - __beg) >= __newoffo)) 
# 186
{ 
# 187
_M_pbump((this->pbase()), (this->epptr()), __newoffo); 
# 188
__ret = ((pos_type)__newoffo); 
# 189
}  
# 190
}  
# 191
return __ret; 
# 192
} 
# 194
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::pos_type 
# 197
__cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::seekpos(pos_type __sp, ::std::ios_base::openmode __mode) 
# 198
{ 
# 199
pos_type __ret = ((pos_type)((off_type)(-1))); 
# 200
const bool __testin = ((((::std::ios_base::in & (this->_M_mode))) & __mode)) != 0; 
# 201
const bool __testout = ((((::std::ios_base::out & (this->_M_mode))) & __mode)) != 0; 
# 203
const char_type *__beg = __testin ? (this->eback()) : (this->pbase()); 
# 204
if ((__beg || (!((off_type)__sp))) && (__testin || __testout)) 
# 205
{ 
# 206
_M_update_egptr(); 
# 208
const off_type __pos(__sp); 
# 209
const bool __testpos = (0 <= __pos) && (__pos <= ((this->egptr()) - __beg)); 
# 211
if (__testpos) 
# 212
{ 
# 213
if (__testin) { 
# 214
(this->setg((this->eback()), (this->eback()) + __pos, (this->egptr()))); }  
# 216
if (__testout) { 
# 217
_M_pbump((this->pbase()), (this->epptr()), __pos); }  
# 218
__ret = __sp; 
# 219
}  
# 220
}  
# 221
return __ret; 
# 222
} 
# 224
template< class _CharT, class _Traits, class _Alloc> void 
# 227
__cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::_M_sync(char_type *__base, __size_type __i, __size_type __o) 
# 228
{ 
# 229
const bool __testin = ((_M_mode) & ::std::ios_base::in); 
# 230
const bool __testout = ((_M_mode) & ::std::ios_base::out); 
# 231
char_type *__endg = __base + ((_M_string).size()); 
# 232
char_type *__endp = __base + ((_M_string).capacity()); 
# 234
if (__base != ((_M_string).data())) 
# 235
{ 
# 237
__endg += __i; 
# 238
__i = 0; 
# 239
__endp = __endg; 
# 240
}  
# 242
if (__testin) { 
# 243
(this->setg(__base, __base + __i, __endg)); }  
# 244
if (__testout) 
# 245
{ 
# 246
_M_pbump(__base, __endp, __o); 
# 250
if (!__testin) { 
# 251
(this->setg(__endg, __endg, __endg)); }  
# 252
}  
# 253
} 
# 255
template< class _CharT, class _Traits, class _Alloc> void 
# 258
__cxx11::basic_stringbuf< _CharT, _Traits, _Alloc> ::_M_pbump(char_type *__pbeg, char_type *__pend, off_type __off) 
# 259
{ 
# 260
(this->setp(__pbeg, __pend)); 
# 261
while (__off > __gnu_cxx::__numeric_traits< int> ::__max) 
# 262
{ 
# 263
(this->pbump(__gnu_cxx::__numeric_traits< int> ::__max)); 
# 264
__off -= __gnu_cxx::__numeric_traits< int> ::__max; 
# 265
}  
# 266
(this->pbump(__off)); 
# 267
} 
# 272
extern template class __cxx11::basic_stringbuf< char, char_traits< char> , allocator< char> > ;
# 273
extern template class __cxx11::basic_istringstream< char, char_traits< char> , allocator< char> > ;
# 274
extern template class __cxx11::basic_ostringstream< char, char_traits< char> , allocator< char> > ;
# 275
extern template class __cxx11::basic_stringstream< char, char_traits< char> , allocator< char> > ;
# 278
extern template class __cxx11::basic_stringbuf< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 279
extern template class __cxx11::basic_istringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 280
extern template class __cxx11::basic_ostringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 281
extern template class __cxx11::basic_stringstream< wchar_t, char_traits< wchar_t> , allocator< wchar_t> > ;
# 286
}
# 64 "/usr/include/c++/5/bits/stl_list.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 66
namespace __detail { 
# 77
struct _List_node_base { 
# 79
_List_node_base *_M_next; 
# 80
_List_node_base *_M_prev; 
# 83
static void swap(_List_node_base & __x, _List_node_base & __y) noexcept; 
# 86
void _M_transfer(_List_node_base *const __first, _List_node_base *const __last) noexcept; 
# 90
void _M_reverse() noexcept; 
# 93
void _M_hook(_List_node_base *const __position) noexcept; 
# 96
void _M_unhook() noexcept; 
# 97
}; 
# 100
}
# 105
template< class _Tp> 
# 106
struct _List_node : public __detail::_List_node_base { 
# 109
_Tp _M_data; 
# 112
template< class ..._Args> 
# 113
_List_node(_Args &&...__args) : __detail::_List_node_base(), _M_data(std::forward< _Args> (__args)...) 
# 115
{ } 
# 117
}; 
# 124
template< class _Tp> 
# 125
struct _List_iterator { 
# 127
typedef _List_iterator _Self; 
# 128
typedef _List_node< _Tp>  _Node; 
# 130
typedef ptrdiff_t difference_type; 
# 131
typedef bidirectional_iterator_tag iterator_category; 
# 132
typedef _Tp value_type; 
# 133
typedef _Tp *pointer; 
# 134
typedef _Tp &reference; 
# 136
_List_iterator() noexcept : _M_node() 
# 137
{ } 
# 140
explicit _List_iterator(__detail::_List_node_base *__x) noexcept : _M_node(__x) 
# 141
{ } 
# 144
_Self _M_const_cast() const noexcept 
# 145
{ return *this; } 
# 149
reference operator*() const noexcept 
# 150
{ return (static_cast< _Node *>(_M_node))->_M_data; } 
# 153
pointer operator->() const noexcept 
# 154
{ return std::__addressof(((static_cast< _Node *>(_M_node))->_M_data)); } 
# 157
_Self &operator++() noexcept 
# 158
{ 
# 159
(_M_node) = ((_M_node)->_M_next); 
# 160
return *this; 
# 161
} 
# 164
_Self operator++(int) noexcept 
# 165
{ 
# 166
_Self __tmp = *this; 
# 167
(_M_node) = ((_M_node)->_M_next); 
# 168
return __tmp; 
# 169
} 
# 172
_Self &operator--() noexcept 
# 173
{ 
# 174
(_M_node) = ((_M_node)->_M_prev); 
# 175
return *this; 
# 176
} 
# 179
_Self operator--(int) noexcept 
# 180
{ 
# 181
_Self __tmp = *this; 
# 182
(_M_node) = ((_M_node)->_M_prev); 
# 183
return __tmp; 
# 184
} 
# 187
bool operator==(const _Self &__x) const noexcept 
# 188
{ return (_M_node) == (__x._M_node); } 
# 191
bool operator!=(const _Self &__x) const noexcept 
# 192
{ return (_M_node) != (__x._M_node); } 
# 195
__detail::_List_node_base *_M_node; 
# 196
}; 
# 203
template< class _Tp> 
# 204
struct _List_const_iterator { 
# 206
typedef _List_const_iterator _Self; 
# 207
typedef const _List_node< _Tp>  _Node; 
# 208
typedef _List_iterator< _Tp>  iterator; 
# 210
typedef ptrdiff_t difference_type; 
# 211
typedef bidirectional_iterator_tag iterator_category; 
# 212
typedef _Tp value_type; 
# 213
typedef const _Tp *pointer; 
# 214
typedef const _Tp &reference; 
# 216
_List_const_iterator() noexcept : _M_node() 
# 217
{ } 
# 220
explicit _List_const_iterator(const __detail::_List_node_base *__x) noexcept : _M_node(__x) 
# 222
{ } 
# 224
_List_const_iterator(const iterator &__x) noexcept : _M_node(((__x._M_node))) 
# 225
{ } 
# 228
iterator _M_const_cast() const noexcept 
# 229
{ return ((iterator)(const_cast< __detail::_List_node_base *>(_M_node))); } 
# 234
reference operator*() const noexcept 
# 235
{ return (static_cast< _Node *>(_M_node))->_M_data; } 
# 238
pointer operator->() const noexcept 
# 239
{ return std::__addressof(((static_cast< _Node *>(_M_node))->_M_data)); } 
# 242
_Self &operator++() noexcept 
# 243
{ 
# 244
(_M_node) = ((_M_node)->_M_next); 
# 245
return *this; 
# 246
} 
# 249
_Self operator++(int) noexcept 
# 250
{ 
# 251
_Self __tmp = *this; 
# 252
(_M_node) = ((_M_node)->_M_next); 
# 253
return __tmp; 
# 254
} 
# 257
_Self &operator--() noexcept 
# 258
{ 
# 259
(_M_node) = ((_M_node)->_M_prev); 
# 260
return *this; 
# 261
} 
# 264
_Self operator--(int) noexcept 
# 265
{ 
# 266
_Self __tmp = *this; 
# 267
(_M_node) = ((_M_node)->_M_prev); 
# 268
return __tmp; 
# 269
} 
# 272
bool operator==(const _Self &__x) const noexcept 
# 273
{ return (_M_node) == (__x._M_node); } 
# 276
bool operator!=(const _Self &__x) const noexcept 
# 277
{ return (_M_node) != (__x._M_node); } 
# 280
const __detail::_List_node_base *_M_node; 
# 281
}; 
# 283
template< class _Val> inline bool 
# 285
operator==(const _List_iterator< _Val>  &__x, const _List_const_iterator< _Val>  &
# 286
__y) noexcept 
# 287
{ return (__x._M_node) == (__y._M_node); } 
# 289
template< class _Val> inline bool 
# 291
operator!=(const _List_iterator< _Val>  &__x, const _List_const_iterator< _Val>  &
# 292
__y) noexcept 
# 293
{ return (__x._M_node) != (__y._M_node); } 
# 295
inline namespace __cxx11 { 
# 297
template< class _Tp, class _Alloc> 
# 298
class _List_base { 
# 315
protected: typedef typename _Alloc::template rebind< _List_node< _Tp> > ::other _Node_alloc_type; 
# 317
typedef typename _Alloc::template rebind< _Tp> ::other _Tp_alloc_type; 
# 320
static size_t _S_distance(const __detail::_List_node_base *__first, const __detail::_List_node_base *
# 321
__last) 
# 322
{ 
# 323
size_t __n = (0); 
# 324
while (__first != __last) 
# 325
{ 
# 326
__first = (__first->_M_next); 
# 327
++__n; 
# 328
}  
# 329
return __n; 
# 330
} 
# 332
struct _List_impl : public _Node_alloc_type { 
# 336
::std::_List_node< unsigned long>  _M_node; 
# 341
_List_impl() : ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type(), _M_node() 
# 343
{ } 
# 345
_List_impl(const typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type &__a) noexcept : ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type(__a), _M_node() 
# 347
{ } 
# 350
_List_impl(typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type &&__a) noexcept : ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type(::std::move(__a)), _M_node() 
# 352
{ } 
# 354
}; 
# 356
_List_impl _M_impl; 
# 359
size_t _M_get_size() const { return ((_M_impl)._M_node)._M_data; } 
# 361
void _M_set_size(size_t __n) { (((_M_impl)._M_node)._M_data) = __n; } 
# 363
void _M_inc_size(size_t __n) { (((_M_impl)._M_node)._M_data) += __n; } 
# 365
void _M_dec_size(size_t __n) { (((_M_impl)._M_node)._M_data) -= __n; } 
# 368
size_t _M_distance(const __detail::_List_node_base *__first, const __detail::_List_node_base *
# 369
__last) const 
# 370
{ return (_S_distance)(__first, __last); } 
# 373
size_t _M_node_count() const { return ((_M_impl)._M_node)._M_data; } 
# 391
_List_node< _Tp>  *_M_get_node() 
# 392
{ return ((_M_impl)._Node_alloc_type::allocate(1)); } 
# 395
void _M_put_node(_List_node< _Tp>  *__p) noexcept 
# 396
{ ((_M_impl)._Node_alloc_type::deallocate(__p, 1)); } 
# 399
public: typedef _Alloc allocator_type; 
# 402
_Node_alloc_type &_M_get_Node_allocator() noexcept 
# 403
{ return *(static_cast< _Node_alloc_type *>(&(_M_impl))); } 
# 406
const _Node_alloc_type &_M_get_Node_allocator() const noexcept 
# 407
{ return *(static_cast< const _Node_alloc_type *>(&(_M_impl))); } 
# 410
_Tp_alloc_type _M_get_Tp_allocator() const noexcept 
# 411
{ return (_Tp_alloc_type)this->_M_get_Node_allocator(); } 
# 414
allocator_type get_allocator() const noexcept 
# 415
{ return (allocator_type)this->_M_get_Node_allocator(); } 
# 417
_List_base() : _M_impl() 
# 419
{ _M_init(); } 
# 421
_List_base(const _Node_alloc_type &__a) noexcept : _M_impl(__a) 
# 423
{ _M_init(); } 
# 426
_List_base(_List_base &&__x) noexcept : _M_impl(std::move(__x._M_get_Node_allocator())) 
# 428
{ 
# 429
auto *const __xnode = std::__addressof(((__x._M_impl)._M_node)); 
# 430
if ((__xnode->_M_next) == __xnode) { 
# 431
_M_init(); } else 
# 433
{ 
# 434
auto *const __node = std::__addressof(((_M_impl)._M_node)); 
# 435
(__node->_M_next) = (__xnode->_M_next); 
# 436
(__node->_M_prev) = (__xnode->_M_prev); 
# 437
((__node->_M_next)->_M_prev) = (((__node->_M_prev)->_M_next) = __node); 
# 438
_M_set_size(__x._M_get_size()); 
# 439
__x._M_init(); 
# 440
}  
# 441
} 
# 445
~_List_base() noexcept 
# 446
{ _M_clear(); } 
# 449
void _M_clear() noexcept; 
# 452
void _M_init() noexcept 
# 453
{ 
# 454
(((this->_M_impl)._M_node)._M_next) = (&((this->_M_impl)._M_node)); 
# 455
(((this->_M_impl)._M_node)._M_prev) = (&((this->_M_impl)._M_node)); 
# 456
_M_set_size(0); 
# 457
} 
# 458
}; 
# 506
template< class _Tp, class _Alloc = allocator< _Tp> > 
# 507
class list : protected _List_base< _Tp, _Alloc>  { 
# 510
typedef typename _Alloc::value_type _Alloc_value_type; 
# 514
typedef ::std::__cxx11::_List_base< _Tp, _Alloc>  _Base; 
# 515
typedef typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Tp_alloc_type _Tp_alloc_type; 
# 516
typedef typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type _Node_alloc_type; 
# 519
public: typedef _Tp value_type; 
# 520
typedef typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Tp_alloc_type::pointer pointer; 
# 521
typedef typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Tp_alloc_type::const_pointer const_pointer; 
# 522
typedef typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Tp_alloc_type::reference reference; 
# 523
typedef typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Tp_alloc_type::const_reference const_reference; 
# 524
typedef _List_iterator< _Tp>  iterator; 
# 525
typedef _List_const_iterator< _Tp>  const_iterator; 
# 526
typedef ::std::reverse_iterator< _List_const_iterator< _Tp> >  const_reverse_iterator; 
# 527
typedef ::std::reverse_iterator< _List_iterator< _Tp> >  reverse_iterator; 
# 528
typedef ::std::size_t size_type; 
# 529
typedef ::std::ptrdiff_t difference_type; 
# 530
typedef _Alloc allocator_type; 
# 535
protected: typedef _List_node< _Tp>  _Node; 
# 537
using ::std::__cxx11::_List_base< _Tp, _Alloc> ::_M_impl;
# 538
using ::std::__cxx11::_List_base< _Tp, _Alloc> ::_M_put_node;
# 539
using ::std::__cxx11::_List_base< _Tp, _Alloc> ::_M_get_node;
# 540
using ::std::__cxx11::_List_base< _Tp, _Alloc> ::_M_get_Tp_allocator;
# 541
using ::std::__cxx11::_List_base< _Tp, _Alloc> ::_M_get_Node_allocator;
# 567
template< class ..._Args> _Node *
# 569
_M_create_node(_Args &&...__args) 
# 570
{ 
# 571
_Node *__p = (this->_M_get_node()); 
# 572
try 
# 573
{ 
# 574
(_M_get_Node_allocator().construct(__p, ::std::forward< _Args> (__args)...)); 
# 576
} 
# 577
catch (...) 
# 578
{ 
# 579
_M_put_node(__p); 
# 580
throw; 
# 581
}  
# 582
return __p; 
# 583
} 
# 593
public: list() noexcept(is_nothrow_default_constructible< typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type> ::value) : _Base() 
# 597
{ } 
# 604
explicit list(const allocator_type &__a) noexcept : _Base((_Node_alloc_type)__a) 
# 605
{ } 
# 616
explicit list(size_type __n) : _Base() 
# 618
{ _M_default_initialize(__n); } 
# 628
list(size_type __n, const value_type &__value, const allocator_type &
# 629
__a = allocator_type()) : _Base((_Node_alloc_type)__a) 
# 631
{ _M_fill_initialize(__n, __value); } 
# 655
list(const list &__x) : _Base((__x._M_get_Node_allocator())) 
# 657
{ _M_initialize_dispatch(__x.begin(), __x.end(), ::std::__false_type()); } 
# 667
list(list &&__x) noexcept : _Base(::std::move(__x)) 
# 668
{ } 
# 678
list(initializer_list< _Tp>  __l, const allocator_type &
# 679
__a = allocator_type()) : _Base((_Node_alloc_type)__a) 
# 681
{ _M_initialize_dispatch((__l.begin()), (__l.end()), ::std::__false_type()); } 
# 695
template< class _InputIterator, class 
# 696
 = ::std::_RequireInputIter< _InputIterator> > 
# 697
list(_InputIterator __first, _InputIterator __last, const allocator_type &
# 698
__a = allocator_type()) : _Base((_Node_alloc_type)__a) 
# 700
{ _M_initialize_dispatch(__first, __last, ::std::__false_type()); } 
# 729
list &operator=(const list & __x); 
# 740
list &operator=(list &&__x) 
# 741
{ 
# 744
this->clear(); 
# 745
this->swap(__x); 
# 746
return *this; 
# 747
} 
# 757
list &operator=(initializer_list< _Tp>  __l) 
# 758
{ 
# 759
(this->assign((__l.begin()), (__l.end()))); 
# 760
return *this; 
# 761
} 
# 775
void assign(size_type __n, const value_type &__val) 
# 776
{ _M_fill_assign(__n, __val); } 
# 791
template< class _InputIterator, class 
# 792
 = ::std::_RequireInputIter< _InputIterator> > void 
# 794
assign(_InputIterator __first, _InputIterator __last) 
# 795
{ _M_assign_dispatch(__first, __last, ::std::__false_type()); } 
# 816
void assign(initializer_list< _Tp>  __l) 
# 817
{ (this->assign((__l.begin()), (__l.end()))); } 
# 822
allocator_type get_allocator() const noexcept 
# 823
{ return _Base::get_allocator(); } 
# 831
iterator begin() noexcept 
# 832
{ return ((iterator)((((this->_M_impl)._M_node)._M_next))); } 
# 840
const_iterator begin() const noexcept 
# 841
{ return ((const_iterator)((((this->_M_impl)._M_node)._M_next))); } 
# 849
iterator end() noexcept 
# 850
{ return ((iterator)(&((this->_M_impl)._M_node))); } 
# 858
const_iterator end() const noexcept 
# 859
{ return ((const_iterator)(&((this->_M_impl)._M_node))); } 
# 867
reverse_iterator rbegin() noexcept 
# 868
{ return ((reverse_iterator)(this->end())); } 
# 876
const_reverse_iterator rbegin() const noexcept 
# 877
{ return ((const_reverse_iterator)(this->end())); } 
# 885
reverse_iterator rend() noexcept 
# 886
{ return ((reverse_iterator)(this->begin())); } 
# 894
const_reverse_iterator rend() const noexcept 
# 895
{ return ((const_reverse_iterator)(this->begin())); } 
# 904
const_iterator cbegin() const noexcept 
# 905
{ return ((const_iterator)((((this->_M_impl)._M_node)._M_next))); } 
# 913
const_iterator cend() const noexcept 
# 914
{ return ((const_iterator)(&((this->_M_impl)._M_node))); } 
# 922
const_reverse_iterator crbegin() const noexcept 
# 923
{ return ((const_reverse_iterator)(this->end())); } 
# 931
const_reverse_iterator crend() const noexcept 
# 932
{ return ((const_reverse_iterator)(this->begin())); } 
# 941
bool empty() const noexcept 
# 942
{ return (((this->_M_impl)._M_node)._M_next) == (&((this->_M_impl)._M_node)); } 
# 946
size_type size() const noexcept 
# 947
{ return (this->_M_node_count()); } 
# 951
size_type max_size() const noexcept 
# 952
{ return (_M_get_Node_allocator().max_size()); } 
# 965
void resize(size_type __new_size); 
# 978
void resize(size_type __new_size, const value_type & __x); 
# 1000
reference front() noexcept 
# 1001
{ return *this->begin(); } 
# 1008
const_reference front() const noexcept 
# 1009
{ return *this->begin(); } 
# 1016
reference back() noexcept 
# 1017
{ 
# 1018
iterator __tmp = this->end(); 
# 1019
--__tmp; 
# 1020
return *__tmp; 
# 1021
} 
# 1028
const_reference back() const noexcept 
# 1029
{ 
# 1030
const_iterator __tmp = this->end(); 
# 1031
--__tmp; 
# 1032
return *__tmp; 
# 1033
} 
# 1047
void push_front(const value_type &__x) 
# 1048
{ (this->_M_insert(this->begin(), __x)); } 
# 1052
void push_front(value_type &&__x) 
# 1053
{ (this->_M_insert(this->begin(), ::std::move(__x))); } 
# 1055
template< class ..._Args> void 
# 1057
emplace_front(_Args &&...__args) 
# 1058
{ (this->_M_insert(this->begin(), ::std::forward< _Args> (__args)...)); } 
# 1074
void pop_front() noexcept 
# 1075
{ this->_M_erase(this->begin()); } 
# 1088
void push_back(const value_type &__x) 
# 1089
{ (this->_M_insert(this->end(), __x)); } 
# 1093
void push_back(value_type &&__x) 
# 1094
{ (this->_M_insert(this->end(), ::std::move(__x))); } 
# 1096
template< class ..._Args> void 
# 1098
emplace_back(_Args &&...__args) 
# 1099
{ (this->_M_insert(this->end(), ::std::forward< _Args> (__args)...)); } 
# 1114
void pop_back() noexcept 
# 1115
{ this->_M_erase(((((iterator)((((this->_M_impl)._M_node)._M_prev)))))); } 
# 1130
template< class ..._Args> iterator emplace(const_iterator __position, _Args && ...__args); 
# 1146
iterator insert(const_iterator __position, const value_type & __x); 
# 1176
iterator insert(const_iterator __position, value_type &&__x) 
# 1177
{ return emplace(__position, ::std::move(__x)); } 
# 1195
iterator insert(const_iterator __p, initializer_list< _Tp>  __l) 
# 1196
{ return (this->insert(__p, (__l.begin()), (__l.end()))); } 
# 1215
iterator insert(const_iterator __position, size_type __n, const value_type & __x); 
# 1253
template< class _InputIterator, class 
# 1254
 = ::std::_RequireInputIter< _InputIterator> > iterator 
# 1253
insert(const_iterator __position, _InputIterator __first, _InputIterator __last); 
# 1299
iterator erase(const_iterator __position) noexcept; 
# 1324
iterator erase(const_iterator __first, const_iterator __last) noexcept 
# 1328
{ 
# 1329
while (__first != __last) { 
# 1330
__first = erase(__first); }  
# 1331
return (__last._M_const_cast()); 
# 1332
} 
# 1344
void swap(list &__x) 
# 1345
{ 
# 1346
__detail::_List_node_base::swap(((this->_M_impl)._M_node), ((__x._M_impl)._M_node)); 
# 1349
::std::size_t __xsize = (__x._M_get_size()); 
# 1350
(__x._M_set_size((this->_M_get_size()))); 
# 1351
(this->_M_set_size(__xsize)); 
# 1355
std::__alloc_swap< typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type> ::_S_do_it(_M_get_Node_allocator(), (__x._M_get_Node_allocator())); 
# 1357
} 
# 1366
void clear() noexcept 
# 1367
{ 
# 1368
_Base::_M_clear(); 
# 1369
_Base::_M_init(); 
# 1370
} 
# 1386
void splice(const_iterator __position, list &&__x) noexcept 
# 1390
{ 
# 1391
if (!__x.empty()) 
# 1392
{ 
# 1393
_M_check_equal_allocators(__x); 
# 1395
this->_M_transfer((__position._M_const_cast()), __x.begin(), __x.end()); 
# 1398
(this->_M_inc_size((__x._M_get_size()))); 
# 1399
(__x._M_set_size(0)); 
# 1400
}  
# 1401
} 
# 1405
void splice(const_iterator __position, list &__x) noexcept 
# 1406
{ splice(__position, ::std::move(__x)); } 
# 1421
void splice(const_iterator __position, list &&__x, const_iterator __i) noexcept 
# 1435
{ 
# 1436
iterator __j = (__i._M_const_cast()); 
# 1437
++__j; 
# 1438
if ((__position == __i) || (__position == __j)) { 
# 1439
return; }  
# 1441
if (this != (&__x)) { 
# 1442
_M_check_equal_allocators(__x); }  
# 1444
this->_M_transfer((__position._M_const_cast()), (__i._M_const_cast()), __j); 
# 1447
(this->_M_inc_size(1)); 
# 1448
(__x._M_dec_size(1)); 
# 1449
} 
# 1463
void splice(const_iterator __position, list &__x, const_iterator __i) noexcept 
# 1464
{ splice(__position, ::std::move(__x), __i); } 
# 1482
void splice(const_iterator __position, list &&__x, const_iterator __first, const_iterator 
# 1483
__last) noexcept 
# 1501
{ 
# 1502
if (__first != __last) 
# 1503
{ 
# 1504
if (this != (&__x)) { 
# 1505
_M_check_equal_allocators(__x); }  
# 1507
::std::size_t __n = (this->_M_distance((__first._M_node), (__last._M_node))); 
# 1508
(this->_M_inc_size(__n)); 
# 1509
(__x._M_dec_size(__n)); 
# 1511
this->_M_transfer((__position._M_const_cast()), (__first._M_const_cast()), (__last._M_const_cast())); 
# 1514
}  
# 1515
} 
# 1532
void splice(const_iterator __position, list &__x, const_iterator __first, const_iterator 
# 1533
__last) noexcept 
# 1534
{ splice(__position, ::std::move(__x), __first, __last); } 
# 1549
void remove(const _Tp & __value); 
# 1562
template< class _Predicate> void remove_if(_Predicate); 
# 1577
void unique(); 
# 1591
template< class _BinaryPredicate> void unique(_BinaryPredicate); 
# 1606
void merge(list && __x); 
# 1609
void merge(list &__x) 
# 1610
{ merge(::std::move(__x)); } 
# 1630
template< class _StrictWeakOrdering> void merge(list && __x, _StrictWeakOrdering __comp); 
# 1634
template< class _StrictWeakOrdering> void 
# 1636
merge(list &__x, _StrictWeakOrdering __comp) 
# 1637
{ merge(::std::move(__x), __comp); } 
# 1650
void reverse() noexcept 
# 1651
{ (((this->_M_impl)._M_node)._M_reverse()); } 
# 1660
void sort(); 
# 1668
template< class _StrictWeakOrdering> void sort(_StrictWeakOrdering); 
# 1681
protected: 
# 1679
template< class _Integer> void 
# 1681
_M_initialize_dispatch(_Integer __n, _Integer __x, ::std::__true_type) 
# 1682
{ _M_fill_initialize(static_cast< size_type>(__n), __x); } 
# 1685
template< class _InputIterator> void 
# 1687
_M_initialize_dispatch(_InputIterator __first, _InputIterator __last, ::std::__false_type) 
# 1689
{ 
# 1690
for (; __first != __last; ++__first) { 
# 1692
emplace_back(*__first); }  
# 1696
} 
# 1701
void _M_fill_initialize(size_type __n, const value_type &__x) 
# 1702
{ 
# 1703
for (; __n; --__n) { 
# 1704
push_back(__x); }  
# 1705
} 
# 1710
void _M_default_initialize(size_type __n) 
# 1711
{ 
# 1712
for (; __n; --__n) { 
# 1713
emplace_back(); }  
# 1714
} 
# 1718
void _M_default_append(size_type __n); 
# 1727
template< class _Integer> void 
# 1729
_M_assign_dispatch(_Integer __n, _Integer __val, ::std::__true_type) 
# 1730
{ _M_fill_assign(__n, __val); } 
# 1733
template< class _InputIterator> void _M_assign_dispatch(_InputIterator __first, _InputIterator __last, ::std::__false_type); 
# 1741
void _M_fill_assign(size_type __n, const value_type & __val); 
# 1746
void _M_transfer(iterator __position, iterator __first, iterator __last) 
# 1747
{ ((__position._M_node)->_M_transfer((__first._M_node), (__last._M_node))); } 
# 1759
template< class ..._Args> void 
# 1761
_M_insert(iterator __position, _Args &&...__args) 
# 1762
{ 
# 1763
_Node *__tmp = _M_create_node(::std::forward< _Args> (__args)...); 
# 1764
(__tmp->_M_hook((__position._M_node))); 
# 1765
(this->_M_inc_size(1)); 
# 1766
} 
# 1771
void _M_erase(iterator __position) noexcept 
# 1772
{ 
# 1773
(this->_M_dec_size(1)); 
# 1774
((__position._M_node)->_M_unhook()); 
# 1775
_Node *__n = static_cast< _Node *>(__position._M_node); 
# 1777
(_M_get_Node_allocator().destroy(__n)); 
# 1781
_M_put_node(__n); 
# 1782
} 
# 1786
void _M_check_equal_allocators(list &__x) noexcept 
# 1787
{ 
# 1788
if (std::__alloc_neq< typename ::std::__cxx11::_List_base< _Tp, _Alloc> ::_Node_alloc_type> ::_S_do_it(_M_get_Node_allocator(), (__x._M_get_Node_allocator()))) { 
# 1790
__builtin_abort(); }  
# 1791
} 
# 1792
}; 
# 1793
}
# 1805
template< class _Tp, class _Alloc> inline bool 
# 1807
operator==(const __cxx11::list< _Tp, _Alloc>  &__x, const __cxx11::list< _Tp, _Alloc>  &__y) 
# 1808
{ 
# 1809
typedef typename __cxx11::list< _Tp, _Alloc> ::const_iterator const_iterator; 
# 1810
const_iterator __end1 = (__x.end()); 
# 1811
const_iterator __end2 = (__y.end()); 
# 1813
const_iterator __i1 = (__x.begin()); 
# 1814
const_iterator __i2 = (__y.begin()); 
# 1815
while ((__i1 != __end1) && (__i2 != __end2) && ((*__i1) == (*__i2))) 
# 1816
{ 
# 1817
++__i1; 
# 1818
++__i2; 
# 1819
}  
# 1820
return (__i1 == __end1) && (__i2 == __end2); 
# 1821
} 
# 1834
template< class _Tp, class _Alloc> inline bool 
# 1836
operator<(const __cxx11::list< _Tp, _Alloc>  &__x, const __cxx11::list< _Tp, _Alloc>  &__y) 
# 1837
{ return std::lexicographical_compare((__x.begin()), (__x.end()), (__y.begin()), (__y.end())); 
# 1838
} 
# 1841
template< class _Tp, class _Alloc> inline bool 
# 1843
operator!=(const __cxx11::list< _Tp, _Alloc>  &__x, const __cxx11::list< _Tp, _Alloc>  &__y) 
# 1844
{ return !(__x == __y); } 
# 1847
template< class _Tp, class _Alloc> inline bool 
# 1849
operator>(const __cxx11::list< _Tp, _Alloc>  &__x, const __cxx11::list< _Tp, _Alloc>  &__y) 
# 1850
{ return __y < __x; } 
# 1853
template< class _Tp, class _Alloc> inline bool 
# 1855
operator<=(const __cxx11::list< _Tp, _Alloc>  &__x, const __cxx11::list< _Tp, _Alloc>  &__y) 
# 1856
{ return !(__y < __x); } 
# 1859
template< class _Tp, class _Alloc> inline bool 
# 1861
operator>=(const __cxx11::list< _Tp, _Alloc>  &__x, const __cxx11::list< _Tp, _Alloc>  &__y) 
# 1862
{ return !(__x < __y); } 
# 1865
template< class _Tp, class _Alloc> inline void 
# 1867
swap(__cxx11::list< _Tp, _Alloc>  &__x, __cxx11::list< _Tp, _Alloc>  &__y) 
# 1868
{ (__x.swap(__y)); } 
# 1871
}
# 59 "/usr/include/c++/5/bits/list.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63
template< class _Tp, class _Alloc> void 
# 66
__cxx11::_List_base< _Tp, _Alloc> ::_M_clear() noexcept 
# 67
{ 
# 68
typedef _List_node< _Tp>  _Node; 
# 69
__detail::_List_node_base *__cur = ((((_M_impl)._M_node)._M_next)); 
# 70
while (__cur != (&((_M_impl)._M_node))) 
# 71
{ 
# 72
_Node *__tmp = static_cast< _Node *>(__cur); 
# 73
__cur = (__tmp->_M_next); 
# 75
(this->_M_get_Node_allocator().destroy(__tmp)); 
# 79
_M_put_node(__tmp); 
# 80
}  
# 81
} 
# 84
template< class _Tp, class _Alloc> 
# 85
template< class ..._Args> typename __cxx11::list< _Tp, _Alloc> ::iterator 
# 88
__cxx11::list< _Tp, _Alloc> ::emplace(const_iterator __position, _Args &&...__args) 
# 89
{ 
# 90
_Node *__tmp = _M_create_node(::std::forward< _Args> (__args)...); 
# 91
(__tmp->_M_hook(((__position._M_const_cast())._M_node))); 
# 92
(this->_M_inc_size(1)); 
# 93
return ((iterator)(__tmp)); 
# 94
} 
# 97
template< class _Tp, class _Alloc> typename __cxx11::list< _Tp, _Alloc> ::iterator 
# 101
__cxx11::list< _Tp, _Alloc> ::insert(const_iterator __position, const value_type &__x) 
# 105
{ 
# 106
_Node *__tmp = _M_create_node(__x); 
# 107
(__tmp->_M_hook(((__position._M_const_cast())._M_node))); 
# 108
(this->_M_inc_size(1)); 
# 109
return ((iterator)(__tmp)); 
# 110
} 
# 113
template< class _Tp, class _Alloc> typename __cxx11::list< _Tp, _Alloc> ::iterator 
# 116
__cxx11::list< _Tp, _Alloc> ::insert(const_iterator __position, size_type __n, const value_type &__x) 
# 117
{ 
# 118
if (__n) 
# 119
{ 
# 120
list __tmp(__n, __x, get_allocator()); 
# 121
iterator __it = __tmp.begin(); 
# 122
splice(__position, __tmp); 
# 123
return __it; 
# 124
}  
# 125
return (__position._M_const_cast()); 
# 126
} 
# 128
template< class _Tp, class _Alloc> 
# 129
template< class _InputIterator, class > typename __cxx11::list< _Tp, _Alloc> ::iterator 
# 132
__cxx11::list< _Tp, _Alloc> ::insert(const_iterator __position, _InputIterator __first, _InputIterator 
# 133
__last) 
# 134
{ 
# 135
list __tmp(__first, __last, get_allocator()); 
# 136
if (!__tmp.empty()) 
# 137
{ 
# 138
iterator __it = __tmp.begin(); 
# 139
splice(__position, __tmp); 
# 140
return __it; 
# 141
}  
# 142
return (__position._M_const_cast()); 
# 143
} 
# 146
template< class _Tp, class _Alloc> typename __cxx11::list< _Tp, _Alloc> ::iterator 
# 150
__cxx11::list< _Tp, _Alloc> ::erase(const_iterator __position) noexcept 
# 154
{ 
# 155
iterator __ret = ((((iterator)(((__position._M_node)->_M_next))))); 
# 156
_M_erase((__position._M_const_cast())); 
# 157
return __ret; 
# 158
} 
# 161
template< class _Tp, class _Alloc> void 
# 164
__cxx11::list< _Tp, _Alloc> ::_M_default_append(size_type __n) 
# 165
{ 
# 166
size_type __i = (0); 
# 167
try 
# 168
{ 
# 169
for (; __i < __n; ++__i) { 
# 170
emplace_back(); }  
# 171
} 
# 172
catch (...) 
# 173
{ 
# 174
for (; __i; --__i) { 
# 175
pop_back(); }  
# 176
throw; 
# 177
}  
# 178
} 
# 180
template< class _Tp, class _Alloc> void 
# 183
__cxx11::list< _Tp, _Alloc> ::resize(size_type __new_size) 
# 184
{ 
# 185
iterator __i = this->begin(); 
# 186
size_type __len = (0); 
# 187
for (; (__i != this->end()) && (__len < __new_size); (++__i), (++__len)) { 
# 188
; }  
# 189
if (__len == __new_size) { 
# 190
erase(__i, this->end()); } else { 
# 192
_M_default_append(__new_size - __len); }  
# 193
} 
# 195
template< class _Tp, class _Alloc> void 
# 198
__cxx11::list< _Tp, _Alloc> ::resize(size_type __new_size, const value_type &__x) 
# 199
{ 
# 200
iterator __i = this->begin(); 
# 201
size_type __len = (0); 
# 202
for (; (__i != this->end()) && (__len < __new_size); (++__i), (++__len)) { 
# 203
; }  
# 204
if (__len == __new_size) { 
# 205
erase(__i, this->end()); } else { 
# 207
insert(this->end(), __new_size - __len, __x); }  
# 208
} 
# 226
template< class _Tp, class _Alloc> __cxx11::list< _Tp, _Alloc>  &
# 229
__cxx11::list< _Tp, _Alloc> ::operator=(const list &__x) 
# 230
{ 
# 231
if (this != (&__x)) 
# 232
{ 
# 233
iterator __first1 = this->begin(); 
# 234
iterator __last1 = this->end(); 
# 235
const_iterator __first2 = __x.begin(); 
# 236
const_iterator __last2 = __x.end(); 
# 237
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), (++__first2)) { 
# 239
(*__first1) = (*__first2); }  
# 240
if (__first2 == __last2) { 
# 241
erase(__first1, __last1); } else { 
# 243
insert(__last1, __first2, __last2); }  
# 244
}  
# 245
return *this; 
# 246
} 
# 248
template< class _Tp, class _Alloc> void 
# 251
__cxx11::list< _Tp, _Alloc> ::_M_fill_assign(size_type __n, const value_type &__val) 
# 252
{ 
# 253
iterator __i = this->begin(); 
# 254
for (; (__i != this->end()) && (__n > (0)); (++__i), (--__n)) { 
# 255
(*__i) = __val; }  
# 256
if (__n > (0)) { 
# 257
insert(this->end(), __n, __val); } else { 
# 259
erase(__i, this->end()); }  
# 260
} 
# 262
template< class _Tp, class _Alloc> 
# 263
template< class _InputIterator> void 
# 266
__cxx11::list< _Tp, _Alloc> ::_M_assign_dispatch(_InputIterator __first2, _InputIterator __last2, ::std::__false_type) 
# 268
{ 
# 269
iterator __first1 = this->begin(); 
# 270
iterator __last1 = this->end(); 
# 271
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), (++__first2)) { 
# 273
(*__first1) = (*__first2); }  
# 274
if (__first2 == __last2) { 
# 275
erase(__first1, __last1); } else { 
# 277
insert(__last1, __first2, __last2); }  
# 278
} 
# 280
template< class _Tp, class _Alloc> void 
# 283
__cxx11::list< _Tp, _Alloc> ::remove(const value_type &__value) 
# 284
{ 
# 285
iterator __first = this->begin(); 
# 286
iterator __last = this->end(); 
# 287
iterator __extra = __last; 
# 288
while (__first != __last) 
# 289
{ 
# 290
iterator __next = __first; 
# 291
++__next; 
# 292
if ((*__first) == __value) 
# 293
{ 
# 297
if (::std::__addressof(*__first) != ::std::__addressof(__value)) { 
# 298
_M_erase(__first); } else { 
# 300
__extra = __first; }  
# 301
}  
# 302
__first = __next; 
# 303
}  
# 304
if (__extra != __last) { 
# 305
_M_erase(__extra); }  
# 306
} 
# 308
template< class _Tp, class _Alloc> void 
# 311
__cxx11::list< _Tp, _Alloc> ::unique() 
# 312
{ 
# 313
iterator __first = this->begin(); 
# 314
iterator __last = this->end(); 
# 315
if (__first == __last) { 
# 316
return; }  
# 317
iterator __next = __first; 
# 318
while ((++__next) != __last) 
# 319
{ 
# 320
if ((*__first) == (*__next)) { 
# 321
_M_erase(__next); } else { 
# 323
__first = __next; }  
# 324
__next = __first; 
# 325
}  
# 326
} 
# 328
template< class _Tp, class _Alloc> void 
# 332
__cxx11::list< _Tp, _Alloc> ::merge(list &&__x) 
# 336
{ 
# 339
if (this != (&__x)) 
# 340
{ 
# 341
_M_check_equal_allocators(__x); 
# 343
iterator __first1 = this->begin(); 
# 344
iterator __last1 = this->end(); 
# 345
iterator __first2 = __x.begin(); 
# 346
iterator __last2 = __x.end(); 
# 347
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 348
if ((*__first2) < (*__first1)) 
# 349
{ 
# 350
iterator __next = __first2; 
# 351
_M_transfer(__first1, __first2, ++__next); 
# 352
__first2 = __next; 
# 353
} else { 
# 355
++__first1; }  }  
# 356
if (__first2 != __last2) { 
# 357
_M_transfer(__last1, __first2, __last2); }  
# 359
(this->_M_inc_size((__x._M_get_size()))); 
# 360
(__x._M_set_size(0)); 
# 361
}  
# 362
} 
# 364
template< class _Tp, class _Alloc> 
# 365
template< class _StrictWeakOrdering> void 
# 369
__cxx11::list< _Tp, _Alloc> ::merge(list &&__x, _StrictWeakOrdering __comp) 
# 373
{ 
# 376
if (this != (&__x)) 
# 377
{ 
# 378
_M_check_equal_allocators(__x); 
# 380
iterator __first1 = this->begin(); 
# 381
iterator __last1 = this->end(); 
# 382
iterator __first2 = __x.begin(); 
# 383
iterator __last2 = __x.end(); 
# 384
while ((__first1 != __last1) && (__first2 != __last2)) { 
# 385
if (__comp(*__first2, *__first1)) 
# 386
{ 
# 387
iterator __next = __first2; 
# 388
_M_transfer(__first1, __first2, ++__next); 
# 389
__first2 = __next; 
# 390
} else { 
# 392
++__first1; }  }  
# 393
if (__first2 != __last2) { 
# 394
_M_transfer(__last1, __first2, __last2); }  
# 396
(this->_M_inc_size((__x._M_get_size()))); 
# 397
(__x._M_set_size(0)); 
# 398
}  
# 399
} 
# 401
template< class _Tp, class _Alloc> void 
# 404
__cxx11::list< _Tp, _Alloc> ::sort() 
# 405
{ 
# 407
if (((((this->_M_impl)._M_node)._M_next) != (&((this->_M_impl)._M_node))) && (((((this->_M_impl)._M_node)._M_next)->_M_next) != (&((this->_M_impl)._M_node)))) 
# 409
{ 
# 410
list __carry; 
# 411
list __tmp[64]; 
# 412
list *__fill = (&((__tmp)[0])); 
# 413
list *__counter; 
# 415
do 
# 416
{ 
# 417
(__carry.splice(__carry.begin(), *this, this->begin())); 
# 419
for (__counter = (&((__tmp)[0])); (__counter != __fill) && (!__counter->empty()); ++__counter) 
# 422
{ 
# 423
(__counter->merge(__carry)); 
# 424
__carry.swap(*__counter); 
# 425
}  
# 426
__carry.swap(*__counter); 
# 427
if (__counter == __fill) { 
# 428
++__fill; }  
# 429
} 
# 430
while (!empty()); 
# 432
for (__counter = (&((__tmp)[1])); __counter != __fill; ++__counter) { 
# 433
(__counter->merge(*(__counter - 1))); }  
# 434
swap(*(__fill - 1)); 
# 435
}  
# 436
} 
# 438
template< class _Tp, class _Alloc> 
# 439
template< class _Predicate> void 
# 442
__cxx11::list< _Tp, _Alloc> ::remove_if(_Predicate __pred) 
# 443
{ 
# 444
iterator __first = this->begin(); 
# 445
iterator __last = this->end(); 
# 446
while (__first != __last) 
# 447
{ 
# 448
iterator __next = __first; 
# 449
++__next; 
# 450
if (__pred(*__first)) { 
# 451
_M_erase(__first); }  
# 452
__first = __next; 
# 453
}  
# 454
} 
# 456
template< class _Tp, class _Alloc> 
# 457
template< class _BinaryPredicate> void 
# 460
__cxx11::list< _Tp, _Alloc> ::unique(_BinaryPredicate __binary_pred) 
# 461
{ 
# 462
iterator __first = this->begin(); 
# 463
iterator __last = this->end(); 
# 464
if (__first == __last) { 
# 465
return; }  
# 466
iterator __next = __first; 
# 467
while ((++__next) != __last) 
# 468
{ 
# 469
if (__binary_pred(*__first, *__next)) { 
# 470
_M_erase(__next); } else { 
# 472
__first = __next; }  
# 473
__next = __first; 
# 474
}  
# 475
} 
# 477
template< class _Tp, class _Alloc> 
# 478
template< class _StrictWeakOrdering> void 
# 481
__cxx11::list< _Tp, _Alloc> ::sort(_StrictWeakOrdering __comp) 
# 482
{ 
# 484
if (((((this->_M_impl)._M_node)._M_next) != (&((this->_M_impl)._M_node))) && (((((this->_M_impl)._M_node)._M_next)->_M_next) != (&((this->_M_impl)._M_node)))) 
# 486
{ 
# 487
list __carry; 
# 488
list __tmp[64]; 
# 489
list *__fill = (&((__tmp)[0])); 
# 490
list *__counter; 
# 492
do 
# 493
{ 
# 494
(__carry.splice(__carry.begin(), *this, this->begin())); 
# 496
for (__counter = (&((__tmp)[0])); (__counter != __fill) && (!__counter->empty()); ++__counter) 
# 499
{ 
# 500
(__counter->merge(__carry, __comp)); 
# 501
__carry.swap(*__counter); 
# 502
}  
# 503
__carry.swap(*__counter); 
# 504
if (__counter == __fill) { 
# 505
++__fill; }  
# 506
} 
# 507
while (!empty()); 
# 509
for (__counter = (&((__tmp)[1])); __counter != __fill; ++__counter) { 
# 510
(__counter->merge(*(__counter - 1), __comp)); }  
# 511
swap(*(__fill - 1)); 
# 512
}  
# 513
} 
# 516
}
# 9 "/home/zhengzhen/workspace/versapipe/examples/rasterization/common_code/strings.h"
template< class to, class from> inline to 
# 10
lexical_cast(const from &x) { 
# 11
std::stringstream os; 
# 12
to ret; 
# 13
os << x; 
# 14
os >> ret; 
# 15
return ret; 
# 16
} 
# 18
inline void chompString(std::__cxx11::string &str) { 
# 19
std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::size_type pos = str.find_last_not_of("\n\r"); 
# 20
if (pos != std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos) { 
# 21
str.erase(pos + (1)); 
# 22
pos = str.find_first_not_of("\n\r"); 
# 23
if (pos != std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos) { str.erase(0, pos); }  
# 24
} else { 
# 25
str.erase(str.begin(), str.end()); }  
# 26
} 
# 28
inline void trimString(std::__cxx11::string &str) { 
# 29
std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::size_type pos = str.find_last_not_of(' '); 
# 30
if (pos != std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos) { 
# 31
str.erase(pos + (1)); 
# 32
pos = str.find_first_not_of(' '); 
# 33
if (pos != std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos) { str.erase(0, pos); }  
# 34
} else { 
# 35
str.erase(str.begin(), str.end()); }  
# 36
} 
# 38
inline void StripComments(std::__cxx11::string &str, const std::__cxx11::string &comm) 
# 39
{ 
# 40
auto pos = str.find(comm); 
# 42
if (pos != std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos) 
# 43
{ 
# 44
(str = (str.substr(0, pos))); 
# 45
}  
# 46
} 
# 49
inline void ltokenize(const std::__cxx11::string &str, const std::__cxx11::string &delimiters, std::__cxx11::list< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > >  &tokens) 
# 50
{ 
# 51
tokens.clear(); 
# 53
if ((str == (""))) { return; }  
# 55
std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::size_type lastPos = str.find_first_not_of(delimiters, 0); 
# 57
std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::size_type pos = str.find_first_of(delimiters, lastPos); 
# 58
while ((std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos != pos) || (std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos != lastPos)) 
# 59
{ 
# 61
tokens.push_back(str.substr(lastPos, pos - lastPos)); 
# 63
lastPos = str.find_first_not_of(delimiters, pos); 
# 65
pos = str.find_first_of(delimiters, lastPos); 
# 66
}  
# 67
} 
# 70
inline void vtokenize_degen(const std::__cxx11::string &str, const std::__cxx11::string &delimiters, std::vector< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > >  &tokens) 
# 71
{ 
# 72
using namespace std;
# 73
tokens.clear(); 
# 74
std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::size_type delimPos = (0), tokenPos = (0), pos = (0); 
# 76
if (str.length() < (1)) { return; }  
# 77
while (1) { 
# 78
delimPos = str.find_first_of(delimiters, pos); 
# 79
tokenPos = str.find_first_not_of(delimiters, pos); 
# 81
if (std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos != delimPos) { 
# 82
if (std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos != tokenPos) { 
# 83
if (tokenPos < delimPos) { 
# 84
tokens.push_back(str.substr(pos, delimPos - pos)); 
# 85
} else { 
# 86
tokens.push_back(""); 
# 87
}  
# 88
} else { 
# 89
tokens.push_back(""); 
# 90
}  
# 91
pos = (delimPos + (1)); 
# 92
} else { 
# 93
if (std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos != tokenPos) { 
# 94
tokens.push_back(str.substr(pos)); 
# 95
} else { 
# 96
tokens.push_back(""); 
# 97
}  
# 98
break; 
# 99
}  
# 100
}  
# 101
} 
# 105
inline void vtokenize(const std::__cxx11::string &str, const std::__cxx11::string &delimiters, std::vector< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > >  &
# 106
tokens) 
# 107
{ 
# 108
tokens.clear(); 
# 110
if ((str == (""))) { return; }  
# 112
std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::size_type lastPos = str.find_first_not_of(delimiters, 0); 
# 114
std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::size_type pos = str.find_first_of(delimiters, lastPos); 
# 115
while ((std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos != pos) || (std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos != lastPos)) 
# 116
{ 
# 118
tokens.push_back(str.substr(lastPos, pos - lastPos)); 
# 120
lastPos = str.find_first_not_of(delimiters, pos); 
# 122
pos = str.find_first_of(delimiters, lastPos); 
# 123
}  
# 124
} 
# 80 "/home/zhengzhen/workspace/versapipe/examples/rasterization/./helper_string.h"
inline int stringRemoveDelimiter(char delimiter, const char *string) 
# 81
{ 
# 82
int string_start = 0; 
# 84
while ((string[string_start]) == delimiter) 
# 85
{ 
# 86
string_start++; 
# 87
}  
# 89
if (string_start >= (((int)strlen(string)) - 1)) 
# 90
{ 
# 91
return 0; 
# 92
}  
# 94
return string_start; 
# 95
} 
# 97
inline int getFileExtension(char *filename, char **extension) 
# 98
{ 
# 99
int string_length = (int)strlen(filename); 
# 101
while ((filename[string_length--]) != ('.')) 
# 102
{ 
# 103
if (string_length == 0) { 
# 104
break; }  
# 105
}  
# 107
if (string_length > 0) { string_length += 2; }  
# 109
if (string_length == 0) { 
# 110
(*extension) = (__null); } else { 
# 112
(*extension) = (&(filename[string_length])); }  
# 114
return string_length; 
# 115
} 
# 118
inline bool checkCmdLineFlag(const int argc, const char **argv, const char *string_ref) 
# 119
{ 
# 120
bool bFound = false; 
# 122
if (argc >= 1) 
# 123
{ 
# 124
for (int i = 1; i < argc; i++) { 
# 125
{ 
# 126
int string_start = stringRemoveDelimiter('-', argv[i]); 
# 127
const char *string_argv = &((argv[i])[string_start]); 
# 129
const char *equal_pos = strchr(string_argv, '='); 
# 130
int argv_length = (int)((equal_pos == (0)) ? strlen(string_argv) : (equal_pos - string_argv)); 
# 132
int length = (int)strlen(string_ref); 
# 134
if ((length == argv_length) && (!(strncasecmp(string_argv, string_ref, length)))) 
# 135
{ 
# 136
bFound = true; 
# 137
continue; 
# 138
}  
# 139
} }  
# 140
}  
# 142
return bFound; 
# 143
} 
# 146
template< class T> inline bool 
# 147
getCmdLineArgumentValue(const int argc, const char **argv, const char *string_ref, T *value) 
# 148
{ 
# 149
bool bFound = false; 
# 151
if (argc >= 1) 
# 152
{ 
# 153
for (int i = 1; i < argc; i++) 
# 154
{ 
# 155
int string_start = stringRemoveDelimiter('-', argv[i]); 
# 156
const char *string_argv = &((argv[i])[string_start]); 
# 157
int length = (int)strlen(string_ref); 
# 159
if (!(strncasecmp(string_argv, string_ref, length))) 
# 160
{ 
# 161
if ((length + 1) <= ((int)strlen(string_argv))) 
# 162
{ 
# 163
int auto_inc = ((string_argv[length]) == ('=')) ? 1 : 0; 
# 164
(*value) = ((T)atoi(&(string_argv[length + auto_inc]))); 
# 165
}  
# 167
bFound = true; 
# 168
i = argc; 
# 169
}  
# 170
}  
# 171
}  
# 173
return bFound; 
# 174
} 
# 176
inline int getCmdLineArgumentInt(const int argc, const char **argv, const char *string_ref) 
# 177
{ 
# 178
bool bFound = false; 
# 179
int value = (-1); 
# 181
if (argc >= 1) 
# 182
{ 
# 183
for (int i = 1; i < argc; i++) { 
# 184
{ 
# 185
int string_start = stringRemoveDelimiter('-', argv[i]); 
# 186
const char *string_argv = &((argv[i])[string_start]); 
# 187
int length = (int)strlen(string_ref); 
# 189
if (!(strncasecmp(string_argv, string_ref, length))) 
# 190
{ 
# 191
if ((length + 1) <= ((int)strlen(string_argv))) 
# 192
{ 
# 193
int auto_inc = ((string_argv[length]) == ('=')) ? 1 : 0; 
# 194
value = atoi(&(string_argv[length + auto_inc])); 
# 195
} else 
# 197
{ 
# 198
value = 0; 
# 199
}  
# 201
bFound = true; 
# 202
continue; 
# 203
}  
# 204
} }  
# 205
}  
# 207
if (bFound) 
# 208
{ 
# 209
return value; 
# 210
} else 
# 212
{ 
# 213
return 0; 
# 214
}  
# 215
} 
# 217
inline float getCmdLineArgumentFloat(const int argc, const char **argv, const char *string_ref) 
# 218
{ 
# 219
bool bFound = false; 
# 220
float value = (-1); 
# 222
if (argc >= 1) 
# 223
{ 
# 224
for (int i = 1; i < argc; i++) { 
# 225
{ 
# 226
int string_start = stringRemoveDelimiter('-', argv[i]); 
# 227
const char *string_argv = &((argv[i])[string_start]); 
# 228
int length = (int)strlen(string_ref); 
# 230
if (!(strncasecmp(string_argv, string_ref, length))) 
# 231
{ 
# 232
if ((length + 1) <= ((int)strlen(string_argv))) 
# 233
{ 
# 234
int auto_inc = ((string_argv[length]) == ('=')) ? 1 : 0; 
# 235
value = ((float)atof(&(string_argv[length + auto_inc]))); 
# 236
} else 
# 238
{ 
# 239
value = (0.0F); 
# 240
}  
# 242
bFound = true; 
# 243
continue; 
# 244
}  
# 245
} }  
# 246
}  
# 248
if (bFound) 
# 249
{ 
# 250
return value; 
# 251
} else 
# 253
{ 
# 254
return 0; 
# 255
}  
# 256
} 
# 258
inline bool getCmdLineArgumentString(const int argc, const char **argv, const char *
# 259
string_ref, char **string_retval) 
# 260
{ 
# 261
bool bFound = false; 
# 263
if (argc >= 1) 
# 264
{ 
# 265
for (int i = 1; i < argc; i++) { 
# 266
{ 
# 267
int string_start = stringRemoveDelimiter('-', argv[i]); 
# 268
char *string_argv = (char *)(&((argv[i])[string_start])); 
# 269
int length = (int)strlen(string_ref); 
# 271
if (!(strncasecmp(string_argv, string_ref, length))) 
# 272
{ 
# 273
(*string_retval) = (&(string_argv[length + 1])); 
# 274
bFound = true; 
# 275
continue; 
# 276
}  
# 277
} }  
# 278
}  
# 280
if (!bFound) 
# 281
{ 
# 282
(*string_retval) = (__null); 
# 283
}  
# 285
return bFound; 
# 286
} 
# 296
inline char *sdkFindFilePath(const char *filename, const char *executable_path) 
# 297
{ 
# 302
const char *searchPath[] = {"./", "./common/", "./common/data/", "./data/", "./src/", "./src/<executable_name>/data/", "./inc/", "./0_Simple/", "./1_Utilities/", "./2_Graphics/", "./3_Imaging/", "./4_Finance/", "./5_Simulations/", "./6_Advanced/", "./7_CUDALibraries/", "./8_Android/", "./samples/", "./0_Simple/<executable_name>/data/", "./1_Utilities/<executable_name>/data/", "./2_Graphics/<executable_name>/data/", "./3_Imaging/<executable_name>/data/", "./4_Finance/<executable_name>/data/", "./5_Simulations/<executable_name>/data/", "./6_Advanced/<executable_name>/data/", "./7_CUDALibraries/<executable_name>/", "./7_CUDALibraries/<executable_name>/data/", "../", "../common/", "../common/data/", "../data/", "../src/", "../inc/", "../0_Simple/<executable_name>/data/", "../1_Utilities/<executable_name>/data/", "../2_Graphics/<executable_name>/data/", "../3_Imaging/<executable_name>/data/", "../4_Finance/<executable_name>/data/", "../5_Simulations/<executable_name>/data/", "../6_Advanced/<executable_name>/data/", "../7_CUDALibraries/<executable_name>/data/", "../8_Android/<executable_name>/data/", "../samples/<executable_name>/data/", "../../", "../../common/", "../../common/data/", "../../data/", "../../src/", "../../inc/", "../../sandbox/<executable_name>/data/", "../../0_Simple/<executable_name>/data/", "../../1_Utilities/<executable_name>/data/", "../../2_Graphics/<executable_name>/data/", "../../3_Imaging/<executable_name>/data/", "../../4_Finance/<executable_name>/data/", "../../5_Simulations/<executable_name>/data/", "../../6_Advanced/<executable_name>/data/", "../../7_CUDALibraries/<executable_name>/data/", "../../8_Android/<executable_name>/data/", "../../samples/<executable_name>/data/", "../../../", "../../../src/<executable_name>/", "../../../src/<executable_name>/data/", "../../../src/<executable_name>/src/", "../../../src/<executable_name>/inc/", "../../../sandbox/<executable_name>/", "../../../sandbox/<executable_name>/data/", "../../../sandbox/<executable_name>/src/", "../../../sandbox/<executable_name>/inc/", "../../../0_Simple/<executable_name>/data/", "../../../1_Utilities/<executable_name>/data/", "../../../2_Graphics/<executable_name>/data/", "../../../3_Imaging/<executable_name>/data/", "../../../4_Finance/<executable_name>/data/", "../../../5_Simulations/<executable_name>/data/", "../../../6_Advanced/<executable_name>/data/", "../../../7_CUDALibraries/<executable_name>/data/", "../../../8_Android/<executable_name>/data/", "../../../0_Simple/<executable_name>/", "../../../1_Utilities/<executable_name>/", "../../../2_Graphics/<executable_name>/", "../../../3_Imaging/<executable_name>/", "../../../4_Finance/<executable_name>/", "../../../5_Simulations/<executable_name>/", "../../../6_Advanced/<executable_name>/", "../../../7_CUDALibraries/<executable_name>/", "../../../8_Android/<executable_name>/", "../../../samples/<executable_name>/data/", "../../../common/", "../../../common/data/", "../../../data/", "../../../../", "../../../../src/<executable_name>/", "../../../../src/<executable_name>/data/", "../../../../src/<executable_name>/src/", "../../../../src/<executable_name>/inc/", "../../../../sandbox/<executable_name>/", "../../../../sandbox/<executable_name>/data/", "../../../../sandbox/<executable_name>/src/", "../../../../sandbox/<executable_name>/inc/", "../../../../0_Simple/<executable_name>/data/", "../../../../1_Utilities/<executable_name>/data/", "../../../../2_Graphics/<executable_name>/data/", "../../../../3_Imaging/<executable_name>/data/", "../../../../4_Finance/<executable_name>/data/", "../../../../5_Simulations/<executable_name>/data/", "../../../../6_Advanced/<executable_name>/data/", "../../../../7_CUDALibraries/<executable_name>/data/", "../../../../8_Android/<executable_name>/data/", "../../../../0_Simple/<executable_name>/", "../../../../1_Utilities/<executable_name>/", "../../../../2_Graphics/<executable_name>/", "../../../../3_Imaging/<executable_name>/", "../../../../4_Finance/<executable_name>/", "../../../../5_Simulations/<executable_name>/", "../../../../6_Advanced/<executable_name>/", "../../../../7_CUDALibraries/<executable_name>/", "../../../../8_Android/<executable_name>/", "../../../../samples/<executable_name>/data/", "../../../../common/", "../../../../common/data/", "../../../../data/", "../../../../../", "../../../../../src/<executable_name>/", "../../../../../src/<executable_name>/data/", "../../../../../src/<executable_name>/src/", "../../../../../src/<executable_name>/inc/", "../../../../../sandbox/<executable_name>/", "../../../../../sandbox/<executable_name>/data/", "../../../../../sandbox/<executable_name>/src/", "../../../../../sandbox/<executable_name>/inc/", "../../../../../0_Simple/<executable_name>/data/", "../../../../../1_Utilities/<executable_name>/data/", "../../../../../2_Graphics/<executable_name>/data/", "../../../../../3_Imaging/<executable_name>/data/", "../../../../../4_Finance/<executable_name>/data/", "../../../../../5_Simulations/<executable_name>/data/", "../../../../../6_Advanced/<executable_name>/data/", "../../../../../7_CUDALibraries/<executable_name>/data/", "../../../../../8_Android/<executable_name>/data/", "../../../../../samples/<executable_name>/data/", "../../../../../common/", "../../../../../common/data/"}; 
# 452
std::__cxx11::string executable_name; 
# 454
if (executable_path != (0)) 
# 455
{ 
# 456
(executable_name = ((std::__cxx11::string)(executable_path))); 
# 471
::size_t delimiter_pos = executable_name.find_last_of('/'); 
# 472
executable_name.erase(0, delimiter_pos + (1)); 
# 474
}  
# 477
for (unsigned i = (0); i < (sizeof searchPath / sizeof(char *)); ++i) { 
# 478
{ 
# 479
std::__cxx11::string path((searchPath)[i]); 
# 480
::size_t executable_name_pos = path.find("<executable_name>"); 
# 484
if (executable_name_pos != std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > ::npos) 
# 485
{ 
# 486
if (executable_path != (0)) 
# 487
{ 
# 488
path.replace(executable_name_pos, strlen("<executable_name>"), executable_name); 
# 489
} else 
# 491
{ 
# 493
continue; 
# 494
}  
# 495
}  
# 502
path.append(filename); 
# 503
FILE *fp; 
# 504
fp = fopen(path.c_str(), "rb"); 
# 506
if (fp != (__null)) 
# 507
{ 
# 508
fclose(fp); 
# 511
char *file_path = (char *)malloc(path.length() + (1)); 
# 512
strcpy(file_path, path.c_str()); 
# 513
return file_path; 
# 514
}  
# 516
if (fp) 
# 517
{ 
# 518
fclose(fp); 
# 519
}  
# 520
} }  
# 523
return 0; 
# 524
} 
# 36 "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h"
static const char *_cudaGetErrorEnum(cudaError_t error) 
# 37
{ 
# 38
switch (error) 
# 39
{ 
# 40
case cudaSuccess:  
# 41
return "cudaSuccess"; 
# 43
case cudaErrorMissingConfiguration:  
# 44
return "cudaErrorMissingConfiguration"; 
# 46
case cudaErrorMemoryAllocation:  
# 47
return "cudaErrorMemoryAllocation"; 
# 49
case cudaErrorInitializationError:  
# 50
return "cudaErrorInitializationError"; 
# 52
case cudaErrorLaunchFailure:  
# 53
return "cudaErrorLaunchFailure"; 
# 55
case cudaErrorPriorLaunchFailure:  
# 56
return "cudaErrorPriorLaunchFailure"; 
# 58
case cudaErrorLaunchTimeout:  
# 59
return "cudaErrorLaunchTimeout"; 
# 61
case cudaErrorLaunchOutOfResources:  
# 62
return "cudaErrorLaunchOutOfResources"; 
# 64
case cudaErrorInvalidDeviceFunction:  
# 65
return "cudaErrorInvalidDeviceFunction"; 
# 67
case cudaErrorInvalidConfiguration:  
# 68
return "cudaErrorInvalidConfiguration"; 
# 70
case cudaErrorInvalidDevice:  
# 71
return "cudaErrorInvalidDevice"; 
# 73
case cudaErrorInvalidValue:  
# 74
return "cudaErrorInvalidValue"; 
# 76
case cudaErrorInvalidPitchValue:  
# 77
return "cudaErrorInvalidPitchValue"; 
# 79
case cudaErrorInvalidSymbol:  
# 80
return "cudaErrorInvalidSymbol"; 
# 82
case cudaErrorMapBufferObjectFailed:  
# 83
return "cudaErrorMapBufferObjectFailed"; 
# 85
case cudaErrorUnmapBufferObjectFailed:  
# 86
return "cudaErrorUnmapBufferObjectFailed"; 
# 88
case cudaErrorInvalidHostPointer:  
# 89
return "cudaErrorInvalidHostPointer"; 
# 91
case cudaErrorInvalidDevicePointer:  
# 92
return "cudaErrorInvalidDevicePointer"; 
# 94
case cudaErrorInvalidTexture:  
# 95
return "cudaErrorInvalidTexture"; 
# 97
case cudaErrorInvalidTextureBinding:  
# 98
return "cudaErrorInvalidTextureBinding"; 
# 100
case cudaErrorInvalidChannelDescriptor:  
# 101
return "cudaErrorInvalidChannelDescriptor"; 
# 103
case cudaErrorInvalidMemcpyDirection:  
# 104
return "cudaErrorInvalidMemcpyDirection"; 
# 106
case cudaErrorAddressOfConstant:  
# 107
return "cudaErrorAddressOfConstant"; 
# 109
case cudaErrorTextureFetchFailed:  
# 110
return "cudaErrorTextureFetchFailed"; 
# 112
case cudaErrorTextureNotBound:  
# 113
return "cudaErrorTextureNotBound"; 
# 115
case cudaErrorSynchronizationError:  
# 116
return "cudaErrorSynchronizationError"; 
# 118
case cudaErrorInvalidFilterSetting:  
# 119
return "cudaErrorInvalidFilterSetting"; 
# 121
case cudaErrorInvalidNormSetting:  
# 122
return "cudaErrorInvalidNormSetting"; 
# 124
case cudaErrorMixedDeviceExecution:  
# 125
return "cudaErrorMixedDeviceExecution"; 
# 127
case cudaErrorCudartUnloading:  
# 128
return "cudaErrorCudartUnloading"; 
# 130
case cudaErrorUnknown:  
# 131
return "cudaErrorUnknown"; 
# 133
case cudaErrorNotYetImplemented:  
# 134
return "cudaErrorNotYetImplemented"; 
# 136
case cudaErrorMemoryValueTooLarge:  
# 137
return "cudaErrorMemoryValueTooLarge"; 
# 139
case cudaErrorInvalidResourceHandle:  
# 140
return "cudaErrorInvalidResourceHandle"; 
# 142
case cudaErrorNotReady:  
# 143
return "cudaErrorNotReady"; 
# 145
case cudaErrorInsufficientDriver:  
# 146
return "cudaErrorInsufficientDriver"; 
# 148
case cudaErrorSetOnActiveProcess:  
# 149
return "cudaErrorSetOnActiveProcess"; 
# 151
case cudaErrorInvalidSurface:  
# 152
return "cudaErrorInvalidSurface"; 
# 154
case cudaErrorNoDevice:  
# 155
return "cudaErrorNoDevice"; 
# 157
case cudaErrorECCUncorrectable:  
# 158
return "cudaErrorECCUncorrectable"; 
# 160
case cudaErrorSharedObjectSymbolNotFound:  
# 161
return "cudaErrorSharedObjectSymbolNotFound"; 
# 163
case cudaErrorSharedObjectInitFailed:  
# 164
return "cudaErrorSharedObjectInitFailed"; 
# 166
case cudaErrorUnsupportedLimit:  
# 167
return "cudaErrorUnsupportedLimit"; 
# 169
case cudaErrorDuplicateVariableName:  
# 170
return "cudaErrorDuplicateVariableName"; 
# 172
case cudaErrorDuplicateTextureName:  
# 173
return "cudaErrorDuplicateTextureName"; 
# 175
case cudaErrorDuplicateSurfaceName:  
# 176
return "cudaErrorDuplicateSurfaceName"; 
# 178
case cudaErrorDevicesUnavailable:  
# 179
return "cudaErrorDevicesUnavailable"; 
# 181
case cudaErrorInvalidKernelImage:  
# 182
return "cudaErrorInvalidKernelImage"; 
# 184
case cudaErrorNoKernelImageForDevice:  
# 185
return "cudaErrorNoKernelImageForDevice"; 
# 187
case cudaErrorIncompatibleDriverContext:  
# 188
return "cudaErrorIncompatibleDriverContext"; 
# 190
case cudaErrorPeerAccessAlreadyEnabled:  
# 191
return "cudaErrorPeerAccessAlreadyEnabled"; 
# 193
case cudaErrorPeerAccessNotEnabled:  
# 194
return "cudaErrorPeerAccessNotEnabled"; 
# 196
case cudaErrorDeviceAlreadyInUse:  
# 197
return "cudaErrorDeviceAlreadyInUse"; 
# 199
case cudaErrorProfilerDisabled:  
# 200
return "cudaErrorProfilerDisabled"; 
# 202
case cudaErrorProfilerNotInitialized:  
# 203
return "cudaErrorProfilerNotInitialized"; 
# 205
case cudaErrorProfilerAlreadyStarted:  
# 206
return "cudaErrorProfilerAlreadyStarted"; 
# 208
case cudaErrorProfilerAlreadyStopped:  
# 209
return "cudaErrorProfilerAlreadyStopped"; 
# 212
case cudaErrorAssert:  
# 213
return "cudaErrorAssert"; 
# 215
case cudaErrorTooManyPeers:  
# 216
return "cudaErrorTooManyPeers"; 
# 218
case cudaErrorHostMemoryAlreadyRegistered:  
# 219
return "cudaErrorHostMemoryAlreadyRegistered"; 
# 221
case cudaErrorHostMemoryNotRegistered:  
# 222
return "cudaErrorHostMemoryNotRegistered"; 
# 225
case cudaErrorOperatingSystem:  
# 226
return "cudaErrorOperatingSystem"; 
# 228
case cudaErrorPeerAccessUnsupported:  
# 229
return "cudaErrorPeerAccessUnsupported"; 
# 231
case cudaErrorLaunchMaxDepthExceeded:  
# 232
return "cudaErrorLaunchMaxDepthExceeded"; 
# 234
case cudaErrorLaunchFileScopedTex:  
# 235
return "cudaErrorLaunchFileScopedTex"; 
# 237
case cudaErrorLaunchFileScopedSurf:  
# 238
return "cudaErrorLaunchFileScopedSurf"; 
# 240
case cudaErrorSyncDepthExceeded:  
# 241
return "cudaErrorSyncDepthExceeded"; 
# 243
case cudaErrorLaunchPendingCountExceeded:  
# 244
return "cudaErrorLaunchPendingCountExceeded"; 
# 246
case cudaErrorNotPermitted:  
# 247
return "cudaErrorNotPermitted"; 
# 249
case cudaErrorNotSupported:  
# 250
return "cudaErrorNotSupported"; 
# 253
case cudaErrorHardwareStackError:  
# 254
return "cudaErrorHardwareStackError"; 
# 256
case cudaErrorIllegalInstruction:  
# 257
return "cudaErrorIllegalInstruction"; 
# 259
case cudaErrorMisalignedAddress:  
# 260
return "cudaErrorMisalignedAddress"; 
# 262
case cudaErrorInvalidAddressSpace:  
# 263
return "cudaErrorInvalidAddressSpace"; 
# 265
case cudaErrorInvalidPc:  
# 266
return "cudaErrorInvalidPc"; 
# 268
case cudaErrorIllegalAddress:  
# 269
return "cudaErrorIllegalAddress"; 
# 272
case cudaErrorInvalidPtx:  
# 273
return "cudaErrorInvalidPtx"; 
# 275
case cudaErrorInvalidGraphicsContext:  
# 276
return "cudaErrorInvalidGraphicsContext"; 
# 278
case cudaErrorStartupFailure:  
# 279
return "cudaErrorStartupFailure"; 
# 281
case cudaErrorApiFailureBase:  
# 282
return "cudaErrorApiFailureBase"; 
# 283
}  
# 285
return "<unknown>"; 
# 286
} 
# 291
static const char *_cudaGetErrorEnum(CUresult error) 
# 292
{ 
# 293
switch (error) 
# 294
{ 
# 295
case CUDA_SUCCESS:  
# 296
return "CUDA_SUCCESS"; 
# 298
case CUDA_ERROR_INVALID_VALUE:  
# 299
return "CUDA_ERROR_INVALID_VALUE"; 
# 301
case CUDA_ERROR_OUT_OF_MEMORY:  
# 302
return "CUDA_ERROR_OUT_OF_MEMORY"; 
# 304
case CUDA_ERROR_NOT_INITIALIZED:  
# 305
return "CUDA_ERROR_NOT_INITIALIZED"; 
# 307
case CUDA_ERROR_DEINITIALIZED:  
# 308
return "CUDA_ERROR_DEINITIALIZED"; 
# 310
case CUDA_ERROR_PROFILER_DISABLED:  
# 311
return "CUDA_ERROR_PROFILER_DISABLED"; 
# 313
case CUDA_ERROR_PROFILER_NOT_INITIALIZED:  
# 314
return "CUDA_ERROR_PROFILER_NOT_INITIALIZED"; 
# 316
case CUDA_ERROR_PROFILER_ALREADY_STARTED:  
# 317
return "CUDA_ERROR_PROFILER_ALREADY_STARTED"; 
# 319
case CUDA_ERROR_PROFILER_ALREADY_STOPPED:  
# 320
return "CUDA_ERROR_PROFILER_ALREADY_STOPPED"; 
# 322
case CUDA_ERROR_NO_DEVICE:  
# 323
return "CUDA_ERROR_NO_DEVICE"; 
# 325
case CUDA_ERROR_INVALID_DEVICE:  
# 326
return "CUDA_ERROR_INVALID_DEVICE"; 
# 328
case CUDA_ERROR_INVALID_IMAGE:  
# 329
return "CUDA_ERROR_INVALID_IMAGE"; 
# 331
case CUDA_ERROR_INVALID_CONTEXT:  
# 332
return "CUDA_ERROR_INVALID_CONTEXT"; 
# 334
case CUDA_ERROR_CONTEXT_ALREADY_CURRENT:  
# 335
return "CUDA_ERROR_CONTEXT_ALREADY_CURRENT"; 
# 337
case CUDA_ERROR_MAP_FAILED:  
# 338
return "CUDA_ERROR_MAP_FAILED"; 
# 340
case CUDA_ERROR_UNMAP_FAILED:  
# 341
return "CUDA_ERROR_UNMAP_FAILED"; 
# 343
case CUDA_ERROR_ARRAY_IS_MAPPED:  
# 344
return "CUDA_ERROR_ARRAY_IS_MAPPED"; 
# 346
case CUDA_ERROR_ALREADY_MAPPED:  
# 347
return "CUDA_ERROR_ALREADY_MAPPED"; 
# 349
case CUDA_ERROR_NO_BINARY_FOR_GPU:  
# 350
return "CUDA_ERROR_NO_BINARY_FOR_GPU"; 
# 352
case CUDA_ERROR_ALREADY_ACQUIRED:  
# 353
return "CUDA_ERROR_ALREADY_ACQUIRED"; 
# 355
case CUDA_ERROR_NOT_MAPPED:  
# 356
return "CUDA_ERROR_NOT_MAPPED"; 
# 358
case CUDA_ERROR_NOT_MAPPED_AS_ARRAY:  
# 359
return "CUDA_ERROR_NOT_MAPPED_AS_ARRAY"; 
# 361
case CUDA_ERROR_NOT_MAPPED_AS_POINTER:  
# 362
return "CUDA_ERROR_NOT_MAPPED_AS_POINTER"; 
# 364
case CUDA_ERROR_ECC_UNCORRECTABLE:  
# 365
return "CUDA_ERROR_ECC_UNCORRECTABLE"; 
# 367
case CUDA_ERROR_UNSUPPORTED_LIMIT:  
# 368
return "CUDA_ERROR_UNSUPPORTED_LIMIT"; 
# 370
case CUDA_ERROR_CONTEXT_ALREADY_IN_USE:  
# 371
return "CUDA_ERROR_CONTEXT_ALREADY_IN_USE"; 
# 373
case CUDA_ERROR_PEER_ACCESS_UNSUPPORTED:  
# 374
return "CUDA_ERROR_PEER_ACCESS_UNSUPPORTED"; 
# 376
case CUDA_ERROR_INVALID_PTX:  
# 377
return "CUDA_ERROR_INVALID_PTX"; 
# 379
case CUDA_ERROR_INVALID_GRAPHICS_CONTEXT:  
# 380
return "CUDA_ERROR_INVALID_GRAPHICS_CONTEXT"; 
# 382
case CUDA_ERROR_INVALID_SOURCE:  
# 383
return "CUDA_ERROR_INVALID_SOURCE"; 
# 385
case CUDA_ERROR_FILE_NOT_FOUND:  
# 386
return "CUDA_ERROR_FILE_NOT_FOUND"; 
# 388
case CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND:  
# 389
return "CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND"; 
# 391
case CUDA_ERROR_SHARED_OBJECT_INIT_FAILED:  
# 392
return "CUDA_ERROR_SHARED_OBJECT_INIT_FAILED"; 
# 394
case CUDA_ERROR_OPERATING_SYSTEM:  
# 395
return "CUDA_ERROR_OPERATING_SYSTEM"; 
# 397
case CUDA_ERROR_INVALID_HANDLE:  
# 398
return "CUDA_ERROR_INVALID_HANDLE"; 
# 400
case CUDA_ERROR_NOT_FOUND:  
# 401
return "CUDA_ERROR_NOT_FOUND"; 
# 403
case CUDA_ERROR_NOT_READY:  
# 404
return "CUDA_ERROR_NOT_READY"; 
# 406
case CUDA_ERROR_ILLEGAL_ADDRESS:  
# 407
return "CUDA_ERROR_ILLEGAL_ADDRESS"; 
# 409
case CUDA_ERROR_LAUNCH_FAILED:  
# 410
return "CUDA_ERROR_LAUNCH_FAILED"; 
# 412
case CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES:  
# 413
return "CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES"; 
# 415
case CUDA_ERROR_LAUNCH_TIMEOUT:  
# 416
return "CUDA_ERROR_LAUNCH_TIMEOUT"; 
# 418
case CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING:  
# 419
return "CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING"; 
# 421
case CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED:  
# 422
return "CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED"; 
# 424
case CUDA_ERROR_PEER_ACCESS_NOT_ENABLED:  
# 425
return "CUDA_ERROR_PEER_ACCESS_NOT_ENABLED"; 
# 427
case CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE:  
# 428
return "CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE"; 
# 430
case CUDA_ERROR_CONTEXT_IS_DESTROYED:  
# 431
return "CUDA_ERROR_CONTEXT_IS_DESTROYED"; 
# 433
case CUDA_ERROR_ASSERT:  
# 434
return "CUDA_ERROR_ASSERT"; 
# 436
case CUDA_ERROR_TOO_MANY_PEERS:  
# 437
return "CUDA_ERROR_TOO_MANY_PEERS"; 
# 439
case CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED:  
# 440
return "CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED"; 
# 442
case CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED:  
# 443
return "CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED"; 
# 445
case CUDA_ERROR_HARDWARE_STACK_ERROR:  
# 446
return "CUDA_ERROR_HARDWARE_STACK_ERROR"; 
# 448
case CUDA_ERROR_ILLEGAL_INSTRUCTION:  
# 449
return "CUDA_ERROR_ILLEGAL_INSTRUCTION"; 
# 451
case CUDA_ERROR_MISALIGNED_ADDRESS:  
# 452
return "CUDA_ERROR_MISALIGNED_ADDRESS"; 
# 454
case CUDA_ERROR_INVALID_ADDRESS_SPACE:  
# 455
return "CUDA_ERROR_INVALID_ADDRESS_SPACE"; 
# 457
case CUDA_ERROR_INVALID_PC:  
# 458
return "CUDA_ERROR_INVALID_PC"; 
# 460
case CUDA_ERROR_NOT_PERMITTED:  
# 461
return "CUDA_ERROR_NOT_PERMITTED"; 
# 463
case CUDA_ERROR_NOT_SUPPORTED:  
# 464
return "CUDA_ERROR_NOT_SUPPORTED"; 
# 466
case CUDA_ERROR_UNKNOWN:  
# 467
return "CUDA_ERROR_UNKNOWN"; 
# 468
}  
# 470
return "<unknown>"; 
# 471
} 
# 966
template< class T> void 
# 967
check(T result, const char *const func, const char *const file, const int line) 
# 968
{ 
# 969
if (result) 
# 970
{ 
# 971
fprintf(stderr, "CUDA error at %s:%d code=%d(%s) \"%s\" \n", file, line, static_cast< unsigned>(result), _cudaGetErrorEnum(result), func); 
# 973
cudaDeviceReset(); 
# 975
exit(1); 
# 976
}  
# 977
} 
# 986
inline void __getLastCudaError(const char *errorMessage, const char *file, const int line) 
# 987
{ 
# 988
cudaError_t err = cudaGetLastError(); 
# 990
if ((cudaSuccess) != err) 
# 991
{ 
# 992
fprintf(stderr, "%s(%i) : getLastCudaError() CUDA error : %s : (%d) %s.\n", file, line, errorMessage, (int)err, cudaGetErrorString(err)); 
# 994
cudaDeviceReset(); 
# 995
exit(1); 
# 996
}  
# 997
} 
# 1005
inline int ftoi(float value) 
# 1006
{ 
# 1007
return (value >= (0)) ? (int)(value + (0.5)) : ((int)(value - (0.5))); 
# 1008
} 
# 1011
inline int _ConvertSMVer2Cores(int major, int minor) 
# 1012
{ 
# 1018
typedef 
# 1015
struct { 
# 1016
int SM; 
# 1017
int Cores; 
# 1018
} sSMtoCores; 
# 1020
sSMtoCores nGpuArchCoresPerSM[] = {{32, 32}, {33, 48}, {48, 192}, {50, 192}, {53, 192}, {55, 192}, {80, 128}, {82, 128}, {(-1), (-1)}}; 
# 1033
int index = 0; 
# 1035
while ((((nGpuArchCoresPerSM)[index]).SM) != (-1)) 
# 1036
{ 
# 1037
if ((((nGpuArchCoresPerSM)[index]).SM) == ((major << 4) + minor)) 
# 1038
{ 
# 1039
return ((nGpuArchCoresPerSM)[index]).Cores; 
# 1040
}  
# 1042
index++; 
# 1043
}  
# 1046
printf("MapSMtoCores for SM %d.%d is undefined.  Default to use %d Cores/SM\n", major, minor, ((nGpuArchCoresPerSM)[index - 1]).Cores); 
# 1047
return ((nGpuArchCoresPerSM)[index - 1]).Cores; 
# 1048
} 
# 1053
inline int gpuDeviceInit(int devID) 
# 1054
{ 
# 1055
int device_count; 
# 1056
check(cudaGetDeviceCount(&device_count), "cudaGetDeviceCount(&device_count)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h", 1056); 
# 1058
if (device_count == 0) 
# 1059
{ 
# 1060
fprintf(stderr, "gpuDeviceInit() CUDA error: no devices supporting CUDA.\n"); 
# 1061
exit(1); 
# 1062
}  
# 1064
if (devID < 0) 
# 1065
{ 
# 1066
devID = 0; 
# 1067
}  
# 1069
if (devID > (device_count - 1)) 
# 1070
{ 
# 1071
fprintf(stderr, "\n"); 
# 1072
fprintf(stderr, ">> %d CUDA capable GPU device(s) detected. <<\n", device_count); 
# 1073
fprintf(stderr, ">> gpuDeviceInit (-device=%d) is not a valid GPU device. <<\n", devID); 
# 1074
fprintf(stderr, "\n"); 
# 1075
return -devID; 
# 1076
}  
# 1078
cudaDeviceProp deviceProp; 
# 1079
check(cudaGetDeviceProperties(&deviceProp, devID), "cudaGetDeviceProperties(&deviceProp, devID)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h", 1079); 
# 1081
if ((deviceProp.computeMode) == (cudaComputeModeProhibited)) 
# 1082
{ 
# 1083
fprintf(stderr, "Error: device is running in <Compute Mode Prohibited>, no threads can use ::cudaSetDevice().\n"); 
# 1084
return -1; 
# 1085
}  
# 1087
if ((deviceProp.major) < 1) 
# 1088
{ 
# 1089
fprintf(stderr, "gpuDeviceInit(): GPU device does not support CUDA.\n"); 
# 1090
exit(1); 
# 1091
}  
# 1093
check(cudaSetDevice(devID), "cudaSetDevice(devID)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h", 1093); 
# 1094
printf("gpuDeviceInit() CUDA Device [%d]: \"%s\n", devID, deviceProp.name); 
# 1096
return devID; 
# 1097
} 
# 1100
inline int gpuGetMaxGflopsDeviceId() 
# 1101
{ 
# 1102
int current_device = 0, sm_per_multiproc = 0; 
# 1103
int max_perf_device = 0; 
# 1104
int device_count = 0, best_SM_arch = 0; 
# 1105
int devices_prohibited = 0; 
# 1107
unsigned long long max_compute_perf = (0); 
# 1108
cudaDeviceProp deviceProp; 
# 1109
cudaGetDeviceCount(&device_count); 
# 1111
check(cudaGetDeviceCount(&device_count), "cudaGetDeviceCount(&device_count)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h", 1111); 
# 1113
if (device_count == 0) 
# 1114
{ 
# 1115
fprintf(stderr, "gpuGetMaxGflopsDeviceId() CUDA error: no devices supporting CUDA.\n"); 
# 1116
exit(1); 
# 1117
}  
# 1120
while (current_device < device_count) 
# 1121
{ 
# 1122
cudaGetDeviceProperties(&deviceProp, current_device); 
# 1125
if ((deviceProp.computeMode) != (cudaComputeModeProhibited)) 
# 1126
{ 
# 1127
if (((deviceProp.major) > 0) && ((deviceProp.major) < 9999)) 
# 1128
{ 
# 1129
best_SM_arch = ((best_SM_arch > (deviceProp.major)) ? best_SM_arch : (deviceProp.major)); 
# 1130
}  
# 1131
} else 
# 1133
{ 
# 1134
devices_prohibited++; 
# 1135
}  
# 1137
current_device++; 
# 1138
}  
# 1140
if (devices_prohibited == device_count) 
# 1141
{ 
# 1142
fprintf(stderr, "gpuGetMaxGflopsDeviceId() CUDA error: all devices have compute mode prohibited.\n"); 
# 1143
exit(1); 
# 1144
}  
# 1147
current_device = 0; 
# 1149
while (current_device < device_count) 
# 1150
{ 
# 1151
cudaGetDeviceProperties(&deviceProp, current_device); 
# 1154
if ((deviceProp.computeMode) != (cudaComputeModeProhibited)) 
# 1155
{ 
# 1156
if (((deviceProp.major) == 9999) && ((deviceProp.minor) == 9999)) 
# 1157
{ 
# 1158
sm_per_multiproc = 1; 
# 1159
} else 
# 1161
{ 
# 1162
sm_per_multiproc = _ConvertSMVer2Cores(deviceProp.major, deviceProp.minor); 
# 1163
}  
# 1165
unsigned long long compute_perf = (((unsigned long long)(deviceProp.multiProcessorCount)) * sm_per_multiproc) * (deviceProp.clockRate); 
# 1167
if (compute_perf > max_compute_perf) 
# 1168
{ 
# 1170
if (best_SM_arch > 2) 
# 1171
{ 
# 1173
if ((deviceProp.major) == best_SM_arch) 
# 1174
{ 
# 1175
max_compute_perf = compute_perf; 
# 1176
max_perf_device = current_device; 
# 1177
}  
# 1178
} else 
# 1180
{ 
# 1181
max_compute_perf = compute_perf; 
# 1182
max_perf_device = current_device; 
# 1183
}  
# 1184
}  
# 1185
}  
# 1187
++current_device; 
# 1188
}  
# 1190
return max_perf_device; 
# 1191
} 
# 1195
inline int findCudaDevice(int argc, const char **argv) 
# 1196
{ 
# 1197
cudaDeviceProp deviceProp; 
# 1198
int devID = 0; 
# 1201
if (checkCmdLineFlag(argc, argv, "device")) 
# 1202
{ 
# 1203
devID = getCmdLineArgumentInt(argc, argv, "device="); 
# 1205
if (devID < 0) 
# 1206
{ 
# 1207
printf("Invalid command line parameter\n "); 
# 1208
exit(1); 
# 1209
} else 
# 1211
{ 
# 1212
devID = gpuDeviceInit(devID); 
# 1214
if (devID < 0) 
# 1215
{ 
# 1216
printf("exiting...\n"); 
# 1217
exit(1); 
# 1218
}  
# 1219
}  
# 1220
} else 
# 1222
{ 
# 1224
devID = gpuGetMaxGflopsDeviceId(); 
# 1225
check(cudaSetDevice(devID), "cudaSetDevice(devID)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h", 1225); 
# 1226
check(cudaGetDeviceProperties(&deviceProp, devID), "cudaGetDeviceProperties(&deviceProp, devID)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h", 1226); 
# 1227
printf("GPU Device %d: \"%s\" with compute capability %d.%d\n\n", devID, deviceProp.name, deviceProp.major, deviceProp.minor); 
# 1228
}  
# 1230
return devID; 
# 1231
} 
# 1234
inline bool checkCudaCapabilities(int major_version, int minor_version) 
# 1235
{ 
# 1236
cudaDeviceProp deviceProp; 
# 1237
(deviceProp.major) = 0; 
# 1238
(deviceProp.minor) = 0; 
# 1239
int dev; 
# 1241
check(cudaGetDevice(&dev), "cudaGetDevice(&dev)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h", 1241); 
# 1242
check(cudaGetDeviceProperties(&deviceProp, dev), "cudaGetDeviceProperties(&deviceProp, dev)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/helper_cuda.h", 1242); 
# 1244
if (((deviceProp.major) > major_version) || (((deviceProp.major) == major_version) && ((deviceProp.minor) >= minor_version))) 
# 1246
{ 
# 1247
printf("  Device %d: <%16s >, Compute SM %d.%d detected\n", dev, deviceProp.name, deviceProp.major, deviceProp.minor); 
# 1248
return true; 
# 1249
} else 
# 1251
{ 
# 1252
printf("  No GPU device was found that can support CUDA compute capability %d.%d.\n", major_version, minor_version); 
# 1253
return false; 
# 1254
}  
# 1255
} 
# 39 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< bool TWarnings = true> 
# 40
class Queue { 
# 43
public: static const bool needTripleCall = false; 
# 44
static const bool supportReuseInit = false; 
# 45
static const int globalMaintainMinThreads = 0; 
# 46
static int globalMaintainSharedMemory(int Threads) { return 0; } 
# 47
static const int requiredShared = 0; 
# 49
void init() 
# 50
{int volatile ___ = 1;
# 52
::exit(___);}
#if 0
# 50
{ 
# 51
if (TWarnings) { printf("Warning: Queue does not implement init\n"); }  
# 52
} 
#endif
# 54 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class PROCEDURE> bool 
# 55
enqueueInitial(typename PROCEDURE::ExpectedData data) 
# 56
{int volatile ___ = 1;(void)data;
# 59
::exit(___);}
#if 0
# 56
{ 
# 57
if (TWarnings) { printf("Error: Queue does not implement enqueueInitial\n"); }  
# 58
return false; 
# 59
} 
#endif
# 61 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< int threads, class PROCEDURE> bool 
# 62
enqueueInitial(typename PROCEDURE::ExpectedData *data) 
# 63
{int volatile ___ = 1;(void)data;
# 66
::exit(___);}
#if 0
# 63
{ 
# 64
if (TWarnings) { printf("Error: Queue does not implement enqueueInitial<int,Proc>\n"); }  
# 65
return false; 
# 66
} 
#endif
# 68 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class PROCEDURE> bool 
# 69
enqueue(typename PROCEDURE::ExpectedData data) 
# 70
{int volatile ___ = 1;(void)data;
# 73
::exit(___);}
#if 0
# 70
{ 
# 71
if (TWarnings) { printf("Error: Queue does not implement enqueue\n"); }  
# 72
return false; 
# 73
} 
#endif
# 75 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< int threads, class PROCEDURE> bool 
# 76
enqueue(typename PROCEDURE::ExpectedData *data) 
# 77
{int volatile ___ = 1;(void)data;
# 80
::exit(___);}
#if 0
# 77
{ 
# 78
if (TWarnings) { printf("Error: Queue does not implement enqueue<Threads>\n"); }  
# 79
return false; 
# 80
} 
#endif
# 82 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< bool MultiProcedure> int 
# 83
dequeue(void *&data, int *&procId, int maxShared = -1) 
# 84
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 87
::exit(___);}
#if 0
# 84
{ 
# 85
if (TWarnings) { printf("Error: Queue does not implement dequeue\n"); }  
# 86
return 0; 
# 87
} 
#endif
# 89 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< bool MultiProcedure> int 
# 90
dequeueSelected(void *&data, int procId, int maxNum = -1) 
# 91
{int volatile ___ = 1;(void)data;(void)procId;(void)maxNum;
# 94
::exit(___);}
#if 0
# 91
{ 
# 92
if (TWarnings) { printf("Error: Queue does not implement dequeueSelected\n"); }  
# 93
return 0; 
# 94
} 
#endif
# 96 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< bool MultiProcedure> int 
# 97
dequeueStartRead(void *&data, int *&procId, int maxShared = -1) 
# 98
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 101
::exit(___);}
#if 0
# 98
{ 
# 99
if (TWarnings) { printf("Error: Queue does not implement dequeuePointer\n"); }  
# 100
return 0; 
# 101
} 
#endif
# 103 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< bool MultiProcedure> int 
# 104
dequeueStartReadSelected(void *&data, int *&procId, int maxShared = -1) 
# 105
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 108
::exit(___);}
#if 0
# 105
{ 
# 106
if (TWarnings) { printf("Error: Queue does not implement dequeueStartReadSelected\n"); }  
# 107
return 0; 
# 108
} 
#endif
# 110 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class PROCEDURE> int 
# 111
reserveRead(int maxNum = -1) 
# 112
{int volatile ___ = 1;(void)maxNum;
# 115
::exit(___);}
#if 0
# 112
{ 
# 113
if (TWarnings) { printf("Error: Queue does not implement reserveRead\n"); }  
# 114
return 0; 
# 115
} 
#endif
# 116 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class PROCEDURE> int 
# 117
startRead(void *&data, int num) 
# 118
{int volatile ___ = 1;(void)data;(void)num;
# 121
::exit(___);}
#if 0
# 118
{ 
# 119
if (TWarnings) { printf("Error: Queue does not implement startRead\n"); }  
# 120
return -1; 
# 121
} 
#endif
# 122 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class PROCEDURE> void 
# 123
finishRead(int id, int num) 
# 124
{int volatile ___ = 1;(void)id;(void)num;
# 126
::exit(___);}
#if 0
# 124
{ 
# 125
if (TWarnings) { printf("Error: Queue does not implement finishRead\n"); }  
# 126
} 
#endif
# 128 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void numEntries(int *counts) 
# 129
{int volatile ___ = 1;(void)counts;
# 131
::exit(___);}
#if 0
# 129
{ 
# 130
if (TWarnings) { printf("Error: Queue does not implement numEntries\n"); }  
# 131
} 
#endif
# 134 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void record() 
# 135
{int volatile ___ = 1;
# 137
::exit(___);}
#if 0
# 135
{ 
# 136
if (TWarnings) { printf("Error: Queue does not implement record\n"); }  
# 137
} 
#endif
# 138 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void reset() 
# 139
{int volatile ___ = 1;
# 141
::exit(___);}
#if 0
# 139
{ 
# 140
if (TWarnings) { printf("Error: Queue does not implement reset\n"); }  
# 141
} 
#endif
# 144 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void workerStart() 
# 145
{int volatile ___ = 1;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void workerMaintain() 
# 147
{int volatile ___ = 1;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void workerEnd() 
# 149
{int volatile ___ = 1;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void globalMaintain() 
# 151
{int volatile ___ = 1;::exit(___);}
#if 0
# 151
{ } 
#endif
# 153 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
static std::__cxx11::string name() 
# 154
{ 
# 155
if (TWarnings) { 
# 156
return "UnnamedQueuing"; } else { 
# 158
return ""; }  
# 159
} 
# 161
void printName() 
# 162
{int volatile ___ = 1;
# 164
::exit(___);}
#if 0
# 162
{ 
# 163
printf("%s\n", "UnamedQueuing"); 
# 164
} 
#endif
# 165 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
}; 
# 167
template< class ProcedureInfo, template< class >  class RealQueue, template< class >  class MatchMaker> 
# 168
class QueueEnqueueWrapper : public RealQueue< ProcedureInfo>  { 
# 172
public: 
# 171
template< class PROCEDURE> bool 
# 172
enqueueInitial(typename PROCEDURE::ExpectedData data) 
# 173
{int volatile ___ = 1;(void)data;
# 175
::exit(___);}
#if 0
# 173
{ 
# 174
return RealQueue< ProcedureInfo> ::template enqueueInitial< typename MatchMaker< PROCEDURE> ::Match> (data); 
# 175
} 
#endif
# 177 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< int threads, class PROCEDURE> bool 
# 178
enqueueInitial(typename PROCEDURE::ExpectedData *data) 
# 179
{int volatile ___ = 1;(void)data;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return RealQueue< ProcedureInfo> ::template enqueueInitial< typename MatchMaker< PROCEDURE> ::Match> (data); 
# 181
} 
#endif
# 183 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class PROCEDURE> bool 
# 184
enqueue(typename PROCEDURE::ExpectedData data) 
# 185
{int volatile ___ = 1;(void)data;
# 187
::exit(___);}
#if 0
# 185
{ 
# 186
return RealQueue< ProcedureInfo> ::template enqueue< typename MatchMaker< PROCEDURE> ::Match> (data); 
# 187
} 
#endif
# 189 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< int threads, class PROCEDURE> bool 
# 190
enqueue(typename PROCEDURE::ExpectedData *data) 
# 191
{int volatile ___ = 1;(void)data;
# 193
::exit(___);}
#if 0
# 191
{ 
# 192
return RealQueue< ProcedureInfo> ::template enqueue< threads, typename MatchMaker< PROCEDURE> ::Match> (data); 
# 193
} 
#endif
# 194 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
}; 
# 196
template< class TAdditionalData> 
# 197
class BasicQueue { 
# 201
public: void init() 
# 202
{int volatile ___ = 1;
# 204
::exit(___);}
#if 0
# 202
{ 
# 203
printf("Warning: BasicQueue does not implement init\n"); 
# 204
} 
#endif
# 206 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class Data> bool 
# 207
enqueueInitial(Data data, TAdditionalData additionalData) 
# 208
{int volatile ___ = 1;(void)data;(void)additionalData;
# 211
::exit(___);}
#if 0
# 208
{ 
# 209
printf("Error: BasicQueue does not implement enqueueInitial\n"); 
# 210
return false; 
# 211
} 
#endif
# 213 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< int Threads, class Data> bool 
# 214
enqueueInitial(Data *data, TAdditionalData additionalData) 
# 215
{int volatile ___ = 1;(void)data;(void)additionalData;
# 218
::exit(___);}
#if 0
# 215
{ 
# 216
printf("Error: BasicQueue does not implement enqueueInitial\n"); 
# 217
return false; 
# 218
} 
#endif
# 220 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class Data> bool 
# 221
enqueue(Data data, TAdditionalData additionalData) 
# 222
{int volatile ___ = 1;(void)data;(void)additionalData;
# 225
::exit(___);}
#if 0
# 222
{ 
# 223
printf("Error: BasicQueue does not implement enqueue\n"); 
# 224
return false; 
# 225
} 
#endif
# 227 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< int threads, class Data> bool 
# 228
enqueue(Data *data, TAdditionalData additionalData) 
# 229
{int volatile ___ = 1;(void)data;(void)additionalData;
# 232
::exit(___);}
#if 0
# 229
{ 
# 230
printf("Error: BasicQueue does not implement enqueue<Threads>\n"); 
# 231
return false; 
# 232
} 
#endif
# 234 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
int dequeue(void *data, TAdditionalData *addtionalData, int maxnum) 
# 235
{int volatile ___ = 1;(void)data;(void)addtionalData;(void)maxnum;
# 238
::exit(___);}
#if 0
# 235
{ 
# 236
printf("Error: BasicQueue does not implement dequeue\n"); 
# 237
return 0; 
# 238
} 
#endif
# 240 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 241
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 244
::exit(___);}
#if 0
# 241
{ 
# 242
printf("Error: BasicQueue does not implement reserveRead\n"); 
# 243
return 0; 
# 244
} 
#endif
# 245 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
int startRead(void *&data, TAdditionalData *addtionalData, int pos, int num) 
# 246
{int volatile ___ = 1;(void)data;(void)addtionalData;(void)pos;(void)num;
# 249
::exit(___);}
#if 0
# 246
{ 
# 247
printf("Error: BasicQueue does not implement startRead\n"); 
# 248
return -1; 
# 249
} 
#endif
# 250 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void finishRead(int id, int num) 
# 251
{int volatile ___ = 1;(void)id;(void)num;
# 253
::exit(___);}
#if 0
# 251
{ 
# 252
printf("Error: BasicQueue does not implement finishRead\n"); 
# 253
} 
#endif
# 255 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class SortInfo> bool 
# 256
sort(unsigned threads) 
# 257
{int volatile ___ = 1;(void)threads;
# 260
::exit(___);}
#if 0
# 257
{ 
# 258
printf("Error: BasicQueue does not implement sort\n"); 
# 259
return false; 
# 260
} 
#endif
# 262 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
static std::__cxx11::string name() 
# 263
{ 
# 264
return "UnnamedBasicQueue"; 
# 265
} 
# 267
void printName() 
# 268
{int volatile ___ = 1;
# 270
::exit(___);}
#if 0
# 268
{ 
# 269
printf("%s\n", "UnamedQueuing"); 
# 270
} 
#endif
# 271 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
}; 
# 274
template<> class BasicQueue< void>  { 
# 277
public: void init() 
# 278
{int volatile ___ = 1;
# 280
::exit(___);}
#if 0
# 278
{ 
# 279
printf("Warning: BasicQueue does not implement init\n"); 
# 280
} 
#endif
# 282 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class Data> bool 
# 283
enqueueInitial(Data data) 
# 284
{int volatile ___ = 1;(void)data;
# 287
::exit(___);}
#if 0
# 284
{ 
# 285
printf("Error: BasicQueue does not implement enqueueInitial\n"); 
# 286
return false; 
# 287
} 
#endif
# 289 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< int threads, class Data> bool 
# 290
enqueueInitial(Data *data) 
# 291
{int volatile ___ = 1;(void)data;
# 294
::exit(___);}
#if 0
# 291
{ 
# 292
printf("Error: BasicQueue does not implement enqueueInitial*\n"); 
# 293
return false; 
# 294
} 
#endif
# 296 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class Data> bool 
# 297
enqueue(Data data) 
# 298
{int volatile ___ = 1;(void)data;
# 301
::exit(___);}
#if 0
# 298
{ 
# 299
printf("Error: BasicQueue does not implement enqueue\n"); 
# 300
return false; 
# 301
} 
#endif
# 303 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< int threads, class Data> bool 
# 304
enqueue(Data *data) 
# 305
{int volatile ___ = 1;(void)data;
# 308
::exit(___);}
#if 0
# 305
{ 
# 306
printf("Error: BasicQueue does not implement enqueue<Threads>\n"); 
# 307
return false; 
# 308
} 
#endif
# 310 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
int dequeue(void *data, int maxnum) 
# 311
{int volatile ___ = 1;(void)data;(void)maxnum;
# 314
::exit(___);}
#if 0
# 311
{ 
# 312
printf("Error: BasicQueue does not implement dequeue\n"); 
# 313
return 0; 
# 314
} 
#endif
# 316 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 317
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 320
::exit(___);}
#if 0
# 317
{ 
# 318
printf("Error: BasicQueue does not implement reserveRead\n"); 
# 319
return 0; 
# 320
} 
#endif
# 321 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
int startRead(void *&data, int pos, int num) 
# 322
{int volatile ___ = 1;(void)data;(void)pos;(void)num;
# 325
::exit(___);}
#if 0
# 322
{ 
# 323
printf("Error: BasicQueue does not implement startRead\n"); 
# 324
return -1; 
# 325
} 
#endif
# 326 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
void finishRead(int id, int num) 
# 327
{int volatile ___ = 1;(void)id;(void)num;
# 329
::exit(___);}
#if 0
# 327
{ 
# 328
printf("Error: Queue does not implement finishRead\n"); 
# 329
} 
#endif
# 331 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class SortInfo> bool 
# 332
sort(unsigned threads) 
# 333
{int volatile ___ = 1;(void)threads;
# 336
::exit(___);}
#if 0
# 333
{ 
# 334
printf("Error: BasicQueue does not implement sort\n"); 
# 335
return false; 
# 336
} 
#endif
# 338 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
static std::__cxx11::string name() 
# 339
{ 
# 340
return "UnnamedBasicQueue"; 
# 341
} 
# 343
void printName() 
# 344
{int volatile ___ = 1;
# 346
::exit(___);}
#if 0
# 344
{ 
# 345
printf("%s\n", "UnamedQueuing"); 
# 346
} 
#endif
# 347 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
}; 
# 350
typedef Queue< false>  ZeroQueue; 
# 352
template< class ProcInfo> 
# 353
class IgnoreQueue : public ZeroQueue { }; 
# 356
template< class Q> static void 
# 357
__wrapper__device_stub_initQueue(Q *&q) {exit(1);}
#if 0
# 358
{ 
# 359
(q->init()); 
# 360
} 
#endif
# 356 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< class Q> void 
# 357
initQueue(Q *q) 
# 358
{__wrapper__device_stub_initQueue<Q>(q);
# 360
return;}
#if 0
# 358
{ 
# 359
(q->init()); 
# 360
} 
#endif
# 362 "/home/zhengzhen/workspace/versapipe/queueInterface.cuh"
template< unsigned Size> 
# 363
class Min16 { 
# 366
public: static const unsigned Compute = Size; 
# 367
}; 
# 378
template<> class Min16< 0U>  { public: static const unsigned Compute = 16U; }; 
# 379
template<> class Min16< 1U>  { public: static const unsigned Compute = 16U; }; 
# 380
template<> class Min16< 2U>  { public: static const unsigned Compute = 16U; }; 
# 381
template<> class Min16< 3U>  { public: static const unsigned Compute = 16U; }; 
# 382
template<> class Min16< 4U>  { public: static const unsigned Compute = 16U; }; 
# 383
template<> class Min16< 5U>  { public: static const unsigned Compute = 16U; }; 
# 384
template<> class Min16< 6U>  { public: static const unsigned Compute = 16U; }; 
# 385
template<> class Min16< 7U>  { public: static const unsigned Compute = 16U; }; 
# 386
template<> class Min16< 8U>  { public: static const unsigned Compute = 16U; }; 
# 387
template<> class Min16< 9U>  { public: static const unsigned Compute = 16U; }; 
# 388
template<> class Min16< 10U>  { public: static const unsigned Compute = 16U; }; 
# 389
template<> class Min16< 11U>  { public: static const unsigned Compute = 16U; }; 
# 390
template<> class Min16< 12U>  { public: static const unsigned Compute = 16U; }; 
# 391
template<> class Min16< 13U>  { public: static const unsigned Compute = 16U; }; 
# 392
template<> class Min16< 14U>  { public: static const unsigned Compute = 16U; }; 
# 393
template<> class Min16< 15U>  { public: static const unsigned Compute = 16U; }; 
# 69 "/home/zhengzhen/workspace/versapipe/tools/types.h"
extern "C" { typedef unsigned uint; }
# 70
extern "C" { typedef unsigned short ushort; }
# 72
namespace Tools { 
# 75
struct dim { 
# 78
union { 
# 80
struct { 
# 81
uint x, y, z; 
# 82
}; 
# 83
uint d[3]; 
# 84
}; 
# 85
dim(uint _x, uint _y = 1, uint _z = 1) : x(_x), y(_y), z(_z) 
# 87
{ 
# 88
} 
# 89
}; 
# 90
}
# 76 "/home/zhengzhen/workspace/versapipe/tools/utils.h"
namespace Tools { 
# 80
class CudaError : public std::runtime_error { 
# 83
static std::__cxx11::string genErrorString(cudaError error, const char *file, int line) 
# 84
{ 
# 88
return (((((((((std::__cxx11::string)(file)) + ('('))) + (std::to_string(static_cast< long long>(line))))) + ("): error: "))) + (cudaGetErrorString(error))); 
# 89
} 
# 91
public: CudaError(cudaError error, const char *file, int line) : runtime_error(genErrorString(error, file, line)) 
# 93
{ 
# 94
} 
# 96
CudaError(cudaError error) : runtime_error(cudaGetErrorString(error)) 
# 98
{ 
# 99
} 
# 101
CudaError(const std::__cxx11::string &msg) : runtime_error(msg) 
# 103
{ 
# 104
} 
# 105
}; 
# 106
inline void checkError(cudaError error, const char *file, int line) 
# 107
{ 
# 108
if (error != (cudaSuccess)) { 
# 109
throw CudaError(error, file, line); }  
# 110
} 
# 112
inline void checkError(const char *file, int line) 
# 113
{ 
# 114
checkError(cudaGetLastError(), file, line); 
# 115
} 
# 117
inline void checkError() 
# 118
{ 
# 119
cudaError error = cudaGetLastError(); 
# 120
if (error != (cudaSuccess)) { 
# 121
throw ((CudaError)(error)); }  
# 122
} 
# 123
}
# 73 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
namespace Tools { 
# 76
template< int PSIZE> 
# 77
class __PointerEquivalent { 
# 80
public: typedef unsigned type; 
# 82
static uint isshared(uint p) 
# 83
{int volatile ___ = 1;(void)p;
# 92
::exit(___);}
#if 0
# 83
{ 
# 84
uint res; 
# 85
__asm__("{\n\t.reg .pred t1;\n\tisspacep.shared t1, %1;\n\tselp.u32 \t%0, 1, 0, t1;\n\t}\n\t" : "=r" (res) : "r" (p)); 
# 91
return res; 
# 92
} 
#endif
# 93 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
static uint islocal(uint p) 
# 94
{int volatile ___ = 1;(void)p;
# 103
::exit(___);}
#if 0
# 94
{ 
# 95
uint res; 
# 96
__asm__("{\n\t.reg .pred t1;\n\tisspacep.local t1, %1;\n\tselp.u32 \t%0, 1, 0, t1;\n\t}\n\t" : "=r" (res) : "r" (p)); 
# 102
return res; 
# 103
} 
#endif
# 104 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
static uint isconst(uint p) 
# 105
{int volatile ___ = 1;(void)p;
# 114
::exit(___);}
#if 0
# 105
{ 
# 106
uint res; 
# 107
__asm__("{\n\t.reg .pred t1;\n\tisspacep.const, t1, %1;\n\tselp.u32 \t%0, 1, 0, t1;\n\t}\n\t" : "=r" (res) : "r" (p)); 
# 113
return res; 
# 114
} 
#endif
# 115 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
static uint isglobal(uint p) 
# 116
{int volatile ___ = 1;(void)p;
# 125
::exit(___);}
#if 0
# 116
{ 
# 117
uint res; 
# 118
__asm__("{\n\t.reg .pred t1;\n\tisspacep.global, t1, %1;\n\tselp.u32 \t%0, 1, 0, t1;\n\t}\n\t" : "=r" (res) : "r" (p)); 
# 124
return res; 
# 125
} 
#endif
# 127 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
}; 
# 129
template<> class __PointerEquivalent< 8>  { 
# 132
public: typedef unsigned long long type; 
# 134
static uint isshared(unsigned long long p) 
# 135
{int volatile ___ = 1;(void)p;
# 144
::exit(___);}
#if 0
# 135
{ 
# 136
uint res; 
# 137
__asm__("{\n\t.reg .pred t1;\n\tisspacep.shared t1, %1;\n\tselp.u32 \t%0, 1, 0, t1;\n\t}\n\t" : "=r" (res) : "l" (p)); 
# 143
return res; 
# 144
} 
#endif
# 145 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
static uint islocal(unsigned long long p) 
# 146
{int volatile ___ = 1;(void)p;
# 155
::exit(___);}
#if 0
# 146
{ 
# 147
uint res; 
# 148
__asm__("{\n\t.reg .pred t1;\n\tisspacep.local t1, %1;\n\tselp.u32 \t%0, 1, 0, t1;\n\t}\n\t" : "=r" (res) : "l" (p)); 
# 154
return res; 
# 155
} 
#endif
# 156 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
static uint isconst(unsigned long long p) 
# 157
{int volatile ___ = 1;(void)p;
# 166
::exit(___);}
#if 0
# 157
{ 
# 158
uint res; 
# 159
__asm__("{\n\t.reg .pred t1;\n\tisspacep.const t1, %1;\n\tselp.u32 \t%0, 1, 0, t1;\n\t}\n\t" : "=r" (res) : "l" (p)); 
# 165
return res; 
# 166
} 
#endif
# 167 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
static uint isglobal(unsigned long long p) 
# 168
{int volatile ___ = 1;(void)p;
# 177
::exit(___);}
#if 0
# 168
{ 
# 169
uint res; 
# 170
__asm__("{\n\t.reg .pred t1;\n\tisspacep.global t1, %1;\n\tselp.u32 \t%0, 1, 0, t1;\n\t}\n\t" : "=r" (res) : "l" (p)); 
# 176
return res; 
# 177
} 
#endif
# 179 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
}; 
# 180
typedef __PointerEquivalent< 8> ::type PointerEquivalent; 
# 183
__attribute__((unused)) inline uint laneid() 
# 184
{int volatile ___ = 1;
# 188
::exit(___);}
#if 0
# 184
{ 
# 185
uint mylaneid; 
# 186
__asm__("mov.u32 %0, %laneid;" : "=r" (mylaneid) :); 
# 187
return mylaneid; 
# 188
} 
#endif
# 190 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint warpid() 
# 191
{int volatile ___ = 1;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
uint mywarpid; 
# 193
__asm__("mov.u32 %0, %warpid;" : "=r" (mywarpid) :); 
# 194
return mywarpid; 
# 195
} 
#endif
# 196 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint nwarpid() 
# 197
{int volatile ___ = 1;
# 201
::exit(___);}
#if 0
# 197
{ 
# 198
uint mynwarpid; 
# 199
__asm__("mov.u32 %0, %nwarpid;" : "=r" (mynwarpid) :); 
# 200
return mynwarpid; 
# 201
} 
#endif
# 203 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint smid() 
# 204
{int volatile ___ = 1;
# 208
::exit(___);}
#if 0
# 204
{ 
# 205
uint mysmid; 
# 206
__asm__("mov.u32 %0, %smid;" : "=r" (mysmid) :); 
# 207
return mysmid; 
# 208
} 
#endif
# 211 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint gridid() 
# 212
{int volatile ___ = 1;
# 216
::exit(___);}
#if 0
# 212
{ 
# 213
uint mygridid; 
# 214
__asm__("mov.u32 %0, %gridid;" : "=r" (mygridid) :); 
# 215
return mygridid; 
# 216
} 
#endif
# 226 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint nsmid() 
# 227
{int volatile ___ = 1;
# 231
::exit(___);}
#if 0
# 227
{ 
# 228
uint mynsmid; 
# 229
__asm__("mov.u32 %0, %nsmid;" : "=r" (mynsmid) :); 
# 230
return mynsmid; 
# 231
} 
#endif
# 233 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint lanemask() 
# 234
{int volatile ___ = 1;
# 238
::exit(___);}
#if 0
# 234
{ 
# 235
uint lanemask; 
# 236
__asm__("mov.u32 %0, %lanemask_eq;" : "=r" (lanemask) :); 
# 237
return lanemask; 
# 238
} 
#endif
# 240 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint lanemask_le() 
# 241
{int volatile ___ = 1;
# 245
::exit(___);}
#if 0
# 241
{ 
# 242
uint lanemask; 
# 243
__asm__("mov.u32 %0, %lanemask_le;" : "=r" (lanemask) :); 
# 244
return lanemask; 
# 245
} 
#endif
# 247 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint lanemask_lt() 
# 248
{int volatile ___ = 1;
# 252
::exit(___);}
#if 0
# 248
{ 
# 249
uint lanemask; 
# 250
__asm__("mov.u32 %0, %lanemask_lt;" : "=r" (lanemask) :); 
# 251
return lanemask; 
# 252
} 
#endif
# 254 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint lanemask_ge() 
# 255
{int volatile ___ = 1;
# 259
::exit(___);}
#if 0
# 255
{ 
# 256
uint lanemask; 
# 257
__asm__("mov.u32 %0, %lanemask_ge;" : "=r" (lanemask) :); 
# 258
return lanemask; 
# 259
} 
#endif
# 261 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint lanemask_gt() 
# 262
{int volatile ___ = 1;
# 266
::exit(___);}
#if 0
# 262
{ 
# 263
uint lanemask; 
# 264
__asm__("mov.u32 %0, %lanemask_gt;" : "=r" (lanemask) :); 
# 265
return lanemask; 
# 266
} 
#endif
# 267 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline void trap() 
# 268
{int volatile ___ = 1;
# 270
::exit(___);}
#if 0
# 268
{ 
# 269
__asm__("trap;"); 
# 270
} 
#endif
# 272 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline void syncthreads(uint lock = 0, int num = -1) 
# 273
{int volatile ___ = 1;(void)lock;(void)num;
# 282
::exit(___);}
#if 0
# 273
{ 
# 274
if (num == (-1)) 
# 275
{ 
# 276
__asm__("bar.sync %0;" : : "r" (lock)); 
# 277
} else 
# 279
{ 
# 280
__asm__("bar.sync %0, %1;" : : "r" (lock), "r" (num)); 
# 281
}  
# 282
} 
#endif
# 283 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline void arrive(uint lock, uint num) 
# 284
{int volatile ___ = 1;(void)lock;(void)num;
# 286
::exit(___);}
#if 0
# 284
{ 
# 285
__asm__("bar.arrive %0, %1;" : : "r" (lock), "r" (num)); 
# 286
} 
#endif
# 287 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint syncthreads_count(uint predicate, uint lock = 0, int num = -1) 
# 288
{int volatile ___ = 1;(void)predicate;(void)lock;(void)num;
# 299
::exit(___);}
#if 0
# 288
{ 
# 289
uint res; 
# 290
if (num == (-1)) 
# 291
{ 
# 292
__asm__("bar.red.popc.u32 %0, %1, %2;" : "=r" (res) : "r" (lock), "r" (predicate)); 
# 293
} else 
# 295
{ 
# 296
__asm__("bar.red.popc.u32 %0, %1, %2, %3;" : "=r" (res) : "r" (lock), "r" (num), "r" (predicate)); 
# 297
}  
# 298
return res; 
# 299
} 
#endif
# 300 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline int syncthreads_or(int predicate, uint lock = 0, int num = -1) 
# 301
{int volatile ___ = 1;(void)predicate;(void)lock;(void)num;
# 312
::exit(___);}
#if 0
# 301
{ 
# 302
int res; 
# 303
if (num == (-1)) 
# 304
{ 
# 305
__asm__("bar.red.or.pred %0, %1, %2;" : "=r" (res) : "r" (lock), "r" (predicate)); 
# 306
} else 
# 308
{ 
# 309
__asm__("bar.red.or.pred %0, %1, %2, %3;" : "=r" (res) : "r" (lock), "r" (num), "r" (predicate)); 
# 310
}  
# 311
return res; 
# 312
} 
#endif
# 313 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline int syncthreads_and(int predicate, uint lock = 0, int num = -1) 
# 314
{int volatile ___ = 1;(void)predicate;(void)lock;(void)num;
# 325
::exit(___);}
#if 0
# 314
{ 
# 315
int res; 
# 316
if (num == (-1)) 
# 317
{ 
# 318
__asm__("bar.red.and.pred %0, %1, %2;" : "=r" (res) : "r" (lock), "r" (predicate)); 
# 319
} else 
# 321
{ 
# 322
__asm__("bar.red.and.pred %0, %1, %2, %3;" : "=r" (res) : "r" (lock), "r" (num), "r" (predicate)); 
# 323
}  
# 324
return res; 
# 325
} 
#endif
# 326 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline clock_t __clock() 
# 327
{int volatile ___ = 1;
# 337
::exit(___);}
#if 0
# 327
{ 
# 328
__attribute__((unused)) volatile clock_t hack; 
# 329
clock_t c; 
# 333
__asm__ volatile("mov.u64 %0, %%clock;" : "=l" (c) :); 
# 335
hack = c; 
# 336
return hack; 
# 337
} 
#endif
# 338 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint isshared(void *p) 
# 339
{int volatile ___ = 1;(void)p;
# 341
::exit(___);}
#if 0
# 339
{ 
# 340
return Tools::__PointerEquivalent< 8> ::isshared((PointerEquivalent)p); 
# 341
} 
#endif
# 342 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint islocal(void *p) 
# 343
{int volatile ___ = 1;(void)p;
# 345
::exit(___);}
#if 0
# 343
{ 
# 344
return Tools::__PointerEquivalent< 8> ::islocal((PointerEquivalent)p); 
# 345
} 
#endif
# 346 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint isconst(void *p) 
# 347
{int volatile ___ = 1;(void)p;
# 349
::exit(___);}
#if 0
# 347
{ 
# 348
return Tools::__PointerEquivalent< 8> ::isconst((PointerEquivalent)p); 
# 349
} 
#endif
# 350 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
__attribute__((unused)) inline uint isglobal(void *p) 
# 351
{int volatile ___ = 1;(void)p;
# 353
::exit(___);}
#if 0
# 351
{ 
# 352
return Tools::__PointerEquivalent< 8> ::isglobal((PointerEquivalent)p); 
# 353
} 
#endif
# 355 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
typedef unsigned long long clock64_t; 
# 357
__attribute__((unused)) inline clock64_t __clock64() 
# 358
{int volatile ___ = 1;
# 364
::exit(___);}
#if 0
# 358
{ 
# 359
__attribute__((unused)) volatile clock64_t hack; 
# 360
clock64_t c; 
# 361
__asm__ volatile("mov.u64 %0, %%clock64;" : "=l" (c) :); 
# 362
hack = c; 
# 363
return hack; 
# 364
} 
#endif
# 367 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> inline T 
# 368
divup(T a, T b) { return ((a + b) - 1) / b; } 
# 371
__attribute__((unused)) inline void wait(uint cycles) 
# 372
{int volatile ___ = 1;(void)cycles;
# 375
::exit(___);}
#if 0
# 372
{ 
# 373
clock_t start = clock(); 
# 374
while ((clock() - start) < cycles) { ; }  
# 375
} 
#endif
# 380 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> __attribute__((unused)) inline T 
# 381
atomicAddVolatile(volatile T *p, T val) 
# 382
{int volatile ___ = 1;(void)p;(void)val;
# 384
::exit(___);}
#if 0
# 382
{ 
# 383
return atomicAdd(const_cast< T *>(p), val); 
# 384
} 
#endif
# 385 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> __attribute__((unused)) inline T 
# 386
atomicSubVolatile(volatile T *p, T val) 
# 387
{int volatile ___ = 1;(void)p;(void)val;
# 389
::exit(___);}
#if 0
# 387
{ 
# 388
return atomicSub(const_cast< T *>(p), val); 
# 389
} 
#endif
# 390 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> __attribute__((unused)) inline T 
# 391
atomicExchVolatile(volatile T *p, T val) 
# 392
{int volatile ___ = 1;(void)p;(void)val;
# 394
::exit(___);}
#if 0
# 392
{ 
# 393
return atomicExch(const_cast< T *>(p), val); 
# 394
} 
#endif
# 395 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> __attribute__((unused)) inline T 
# 396
atomicMinVolatile(volatile T *p, T val) 
# 397
{int volatile ___ = 1;(void)p;(void)val;
# 399
::exit(___);}
#if 0
# 397
{ 
# 398
return atomicMin(const_cast< T *>(p), val); 
# 399
} 
#endif
# 400 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> __attribute__((unused)) inline T 
# 401
atomicMaxVolatile(volatile T *p, T val) 
# 402
{int volatile ___ = 1;(void)p;(void)val;
# 404
::exit(___);}
#if 0
# 402
{ 
# 403
return atomicMax(const_cast< T *>(p), val); 
# 404
} 
#endif
# 405 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> __attribute__((unused)) inline T 
# 406
atomicIncVolatile(volatile T *p, T val) 
# 407
{int volatile ___ = 1;(void)p;(void)val;
# 409
::exit(___);}
#if 0
# 407
{ 
# 408
return atomicInc(const_cast< T *>(p), val); 
# 409
} 
#endif
# 410 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> __attribute__((unused)) inline T 
# 411
atomicDecVolatile(volatile T *p, T val) 
# 412
{int volatile ___ = 1;(void)p;(void)val;
# 414
::exit(___);}
#if 0
# 412
{ 
# 413
return atomicDec(const_cast< T *>(p), val); 
# 414
} 
#endif
# 415 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
template< class T> __attribute__((unused)) inline T 
# 416
atomicCASVolatile(volatile T *p, T compare, T val) 
# 417
{int volatile ___ = 1;(void)p;(void)compare;(void)val;
# 419
::exit(___);}
#if 0
# 417
{ 
# 418
return atomicCAS(const_cast< T *>(p), compare, val); 
# 419
} 
#endif
# 435 "/home/zhengzhen/workspace/versapipe/tools/common.cuh"
}
# 39 "/home/zhengzhen/workspace/versapipe/random.cuh"
namespace whippletree { namespace random { 
# 42
__attribute__((unused)) inline int warp_rand() 
# 43
{int volatile ___ = 1;
# 47
::exit(___);}
#if 0
# 43
{ 
# 44
clock_t m1 = ((((40009) + clock()) / (16)) * (19281)) + ((((811) * Tools::smid()) + ((127) * Tools::warpid())) * (8231)); 
# 45
clock_t m2 = ((36969) * (m1 & (65535))) + (m1 >> 16); 
# 46
return m2 & (65535); 
# 47
} 
#endif
# 50 "/home/zhengzhen/workspace/versapipe/random.cuh"
__attribute__((unused)) inline int rand() 
# 51
{int volatile ___ = 1;
# 55
::exit(___);}
#if 0
# 51
{ 
# 52
clock_t m1 = ((((40009) + clock()) / (16)) * (19281)) + (((((61) * (__device_builtin_variable_threadIdx.x)) + ((811) * Tools::smid())) + ((127) * Tools::warpid())) * (8231)); 
# 53
clock_t m2 = ((36969) * (m1 & (65535))) + (m1 >> 16); 
# 54
return m2 & (65535); 
# 55
} 
#endif
# 57 "/home/zhengzhen/workspace/versapipe/random.cuh"
static const int max = 65535; 
# 58
static const int Range = 65536; 
# 61
__attribute__((unused)) inline int frand() 
# 62
{int volatile ___ = 1;
# 64
::exit(___);}
#if 0
# 62
{ 
# 63
return (rand()) / (static_cast< float>(max)); 
# 64
} 
#endif
# 67 "/home/zhengzhen/workspace/versapipe/random.cuh"
__attribute__((unused)) inline bool check(int percent) 
# 68
{int volatile ___ = 1;(void)percent;
# 70
::exit(___);}
#if 0
# 68
{ 
# 69
return rand() < (((max + 1) * percent) / 100); 
# 70
} 
#endif
# 73 "/home/zhengzhen/workspace/versapipe/random.cuh"
__attribute__((unused)) inline bool warp_check(int percent) 
# 74
{int volatile ___ = 1;(void)percent;
# 76
::exit(___);}
#if 0
# 74
{ 
# 75
return warp_rand() < (((max + 1) * percent) / 100); 
# 76
} 
#endif
# 79 "/home/zhengzhen/workspace/versapipe/random.cuh"
__attribute__((unused)) inline bool block_check(int percent) 
# 80
{int volatile ___ = 1;(void)percent;
# 87
::exit(___);}
#if 0
# 80
{ 
# 81
__attribute__((unused)) bool res; 
# 82
__syncthreads(); 
# 83
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 84
res = check(percent); }  
# 85
__syncthreads(); 
# 86
return res; 
# 87
} 
#endif
# 89 "/home/zhengzhen/workspace/versapipe/random.cuh"
}}
# 43 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class TAdditionalData> 
# 44
struct AdditionalDataInfo { 
# 46
static const int size = (sizeof(TAdditionalData)); 
# 47
}; 
# 50
template<> struct AdditionalDataInfo< void>  { 
# 52
static const int size = 0; 
# 53
}; 
# 55
template< int Mod, int MaxWarps> __attribute__((unused)) inline int 
# 56
warpBroadcast(int val, int who) 
# 57
{int volatile ___ = 1;(void)val;(void)who;
# 71
::exit(___);}
#if 0
# 57
{ 
# 59
__attribute__((unused)) volatile int comm[MaxWarps]; 
# 60
for (int offset = 0; offset < 32; offset += Mod) 
# 61
{ 
# 62
if ((Tools::laneid() - offset) == who) { 
# 63
((comm)[(__device_builtin_variable_threadIdx.x) / (32)]) = val; }  
# 64
if (Tools::laneid() < (offset + Mod)) { 
# 65
return (comm)[(__device_builtin_variable_threadIdx.x) / (32)]; }  
# 66
}  
# 67
return val; 
# 71
} 
#endif
# 72 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int Mod> __attribute__((unused)) inline int 
# 73
warpBroadcast(int val, int who) 
# 74
{int volatile ___ = 1;(void)val;(void)who;
# 76
::exit(___);}
#if 0
# 74
{ 
# 75
return warpBroadcast< Mod, 32> (val, who); 
# 76
} 
#endif
# 78 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int Mod, int MaxWarps> __attribute__((unused)) inline int 
# 79
warpShfl(int val, int who) 
# 80
{int volatile ___ = 1;(void)val;(void)who;
# 102
::exit(___);}
#if 0
# 80
{ 
# 82
__attribute__((unused)) volatile int comm[MaxWarps]; 
# 83
int runid = 0; 
# 84
int res = val; 
# 85
for (int offset = 0; offset < 32; offset += Mod) 
# 86
{ 
# 87
for (int within = 0; within < Mod; ++within) 
# 88
{ 
# 89
if (Tools::laneid() == runid) { 
# 90
((comm)[(__device_builtin_variable_threadIdx.x) / (32)]) = val; }  
# 91
if ((Tools::laneid() >= offset) && (Tools::laneid() < (offset + Mod)) && ((runid % Mod) == ((who + 32) % Mod))) { 
# 94
res = ((comm)[(__device_builtin_variable_threadIdx.x) / (32)]); }  
# 95
++runid; 
# 96
}  
# 97
}  
# 98
return res; 
# 102
} 
#endif
# 103 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int Mod> __attribute__((unused)) inline int 
# 104
warpShfl(int val, int who) 
# 105
{int volatile ___ = 1;(void)val;(void)who;
# 107
::exit(___);}
#if 0
# 105
{ 
# 106
return warpShfl< Mod, 32> (val, who); 
# 107
} 
#endif
# 110 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int Maxrand> __attribute__((unused)) inline void 
# 111
backoff(int num) 
# 112
{int volatile ___ = 1;(void)num;
# 120
::exit(___);}
#if 0
# 112
{ 
# 114
volatile int local = __device_builtin_variable_threadIdx.x; 
# 115
for (int i = 0; i < (whippletree::random::rand() % Maxrand); ++i) 
# 116
{ 
# 117
local += ((num * (__device_builtin_variable_threadIdx.x)) / (i + 1234)); 
# 118
__threadfence(); 
# 119
}  
# 120
} 
#endif
# 123 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline uint4 &load(uint4 &dest, const volatile uint4 &src) 
# 124
{int volatile ___ = 1;(void)dest;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(src))));
# 127
::exit(___);}
#if 0
# 124
{ 
# 125
__asm__("ld.volatile.global.v4.u32 {%0, %1, %2, %3}, [%4];" : "=r" (dest.x), "=r" (dest.y), "=r" (dest.z), "=r" (dest.w) : "l" (&src)); 
# 126
return dest; 
# 127
} 
#endif
# 129 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline uint2 &load(uint2 &dest, const volatile uint2 &src) 
# 130
{int volatile ___ = 1;(void)dest;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(src))));
# 133
::exit(___);}
#if 0
# 130
{ 
# 131
__asm__("ld.volatile.global.v2.u32 {%0, %1}, [%2];" : "=r" (dest.x), "=r" (dest.y) : "l" (&src)); 
# 132
return dest; 
# 133
} 
#endif
# 135 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline uint &load(uint &dest, const volatile uint &src) 
# 136
{int volatile ___ = 1;(void)dest;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(src))));
# 139
::exit(___);}
#if 0
# 136
{ 
# 137
dest = src; 
# 138
return dest; 
# 139
} 
#endif
# 141 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline uint1 &load(uint1 &dest, const volatile uint1 &src) 
# 142
{int volatile ___ = 1;(void)dest;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(src))));
# 145
::exit(___);}
#if 0
# 142
{ 
# 143
(dest.x) = (src.x); 
# 144
return dest; 
# 145
} 
#endif
# 147 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline uchar3 &load(uchar3 &dest, const volatile uchar3 &src) 
# 148
{int volatile ___ = 1;(void)dest;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(src))));
# 153
::exit(___);}
#if 0
# 148
{ 
# 149
(dest.x) = (src.x); 
# 150
(dest.y) = (src.y); 
# 151
(dest.z) = (src.z); 
# 152
return dest; 
# 153
} 
#endif
# 155 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline uchar2 &load(uchar2 &dest, const volatile uchar2 &src) 
# 156
{int volatile ___ = 1;(void)dest;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(src))));
# 160
::exit(___);}
#if 0
# 156
{ 
# 157
(dest.x) = (src.x); 
# 158
(dest.y) = (src.y); 
# 159
return dest; 
# 160
} 
#endif
# 162 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline uchar1 &load(uchar1 &dest, const volatile uchar1 &src) 
# 163
{int volatile ___ = 1;(void)dest;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(src))));
# 166
::exit(___);}
#if 0
# 163
{ 
# 164
(dest.x) = (src.x); 
# 165
return dest; 
# 166
} 
#endif
# 169 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline volatile uint4 &store(volatile uint4 &dest, const uint4 &src) 
# 170
{int volatile ___ = 1;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(dest))));(void)src;
# 179
::exit(___);}
#if 0
# 170
{ 
# 177
__asm__("st.volatile.global.v4.u32 [%0], {%1, %2, %3, %4};" : : "l" (&dest), "r" (src.x), "r" (src.y), "r" (src.z), "r" (src.w)); 
# 178
return dest; 
# 179
} 
#endif
# 181 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline volatile uint2 &store(volatile uint2 &dest, const uint2 &src) 
# 182
{int volatile ___ = 1;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(dest))));(void)src;
# 186
::exit(___);}
#if 0
# 182
{ 
# 183
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 183); 
# 184
__asm__("st.volatile.global.v2.u32 [%0], {%1, %2};" : : "l" (&dest), "r" (src.x), "r" (src.y)); 
# 185
return dest; 
# 186
} 
#endif
# 188 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline volatile uint &store(volatile uint &dest, const uint &src) 
# 189
{int volatile ___ = 1;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(dest))));(void)src;
# 192
::exit(___);}
#if 0
# 189
{ 
# 190
dest = src; 
# 191
return dest; 
# 192
} 
#endif
# 194 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline volatile uint1 &store(volatile uint1 &dest, const uint1 &src) 
# 195
{int volatile ___ = 1;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(dest))));(void)src;
# 198
::exit(___);}
#if 0
# 195
{ 
# 196
(dest.x) = (src.x); 
# 197
return dest; 
# 198
} 
#endif
# 200 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline volatile uchar3 &store(volatile uchar3 &dest, const uchar3 &src) 
# 201
{int volatile ___ = 1;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(dest))));(void)src;
# 206
::exit(___);}
#if 0
# 201
{ 
# 202
(dest.x) = (src.x); 
# 203
(dest.y) = (src.y); 
# 204
(dest.z) = (src.z); 
# 205
return dest; 
# 206
} 
#endif
# 208 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline volatile uchar2 &store(volatile uchar2 &dest, const uchar2 &src) 
# 209
{int volatile ___ = 1;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(dest))));(void)src;
# 213
::exit(___);}
#if 0
# 209
{ 
# 210
(dest.x) = (src.x); 
# 211
(dest.y) = (src.y); 
# 212
return dest; 
# 213
} 
#endif
# 215 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline volatile uchar1 &store(volatile uchar1 &dest, const uchar1 &src) 
# 216
{int volatile ___ = 1;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(dest))));(void)src;
# 219
::exit(___);}
#if 0
# 216
{ 
# 217
(dest.x) = (src.x); 
# 218
return dest; 
# 219
} 
#endif
# 224 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint TElementSize> 
# 225
struct StorageElement16 { 
# 227
static const int num_storage_owords = ((TElementSize + (15)) / (16)); 
# 229
uint4 storage[num_storage_owords]; 
# 231
volatile StorageElement16 &operator=(const StorageElement16 &ele) volatile 
# 232
{int volatile ___ = 1;(void)ele;
# 249
::exit(___);}
#if 0
# 232
{ 
# 235
#pragma unroll 1
for (
# 235
int i = 0; i < num_storage_owords; i++) 
# 236
{ 
# 237
store((storage)[i], (ele.storage)[i]); 
# 246
}  
# 248
return *this; 
# 249
} 
#endif
# 250 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 253
template< int i> 
# 254
struct StorageDude16 { 
# 256
template< uint ElementSize> static StorageElement16< ElementSize>  &
# 257
assign(StorageElement16< ElementSize>  &dest, const StorageElement16< ElementSize>  &src) 
# 258
{int volatile ___ = 1;(void)dest;(void)src;
# 263
::exit(___);}
#if 0
# 258
{ 
# 259
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 259); 
# 260
StorageDude16< i - 1> ::assign(dest, src); 
# 261
((dest.storage)[i]) = ((src.storage)[i]); 
# 262
return dest; 
# 263
} 
#endif
# 265 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint ElementSize> static StorageElement16< ElementSize>  &
# 266
load(StorageElement16< ElementSize>  &dest, const volatile StorageElement16< ElementSize>  &src) 
# 267
{int volatile ___ = 1;(void)dest;(void)src;
# 272
::exit(___);}
#if 0
# 267
{ 
# 268
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 268); 
# 269
StorageDude16< i - 1> ::load(dest, src); 
# 270
::load((dest.storage)[i], (src.storage)[i]); 
# 271
return dest; 
# 272
} 
#endif
# 274 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint ElementSize> static volatile StorageElement16< ElementSize>  &
# 275
store(volatile StorageElement16< ElementSize>  &dest, const StorageElement16< ElementSize>  &src) 
# 276
{int volatile ___ = 1;(void)dest;(void)src;
# 281
::exit(___);}
#if 0
# 276
{ 
# 277
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 277); 
# 278
StorageDude16< i - 1> ::store(dest, src); 
# 279
::store((dest.storage)[i], (src.storage)[i]); 
# 280
return dest; 
# 281
} 
#endif
# 282 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 285
template<> struct StorageDude16< 0>  { 
# 287
template< uint ElementSize> static StorageElement16< ElementSize>  &
# 288
assign(StorageElement16< ElementSize>  &dest, const StorageElement16< ElementSize>  &src) 
# 289
{int volatile ___ = 1;(void)dest;(void)src;
# 293
::exit(___);}
#if 0
# 289
{ 
# 290
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 290); 
# 291
((dest.storage)[0]) = ((src.storage)[0]); 
# 292
return dest; 
# 293
} 
#endif
# 295 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint ElementSize> static StorageElement16< ElementSize>  &
# 296
load(StorageElement16< ElementSize>  &dest, const volatile StorageElement16< ElementSize>  &src) 
# 297
{int volatile ___ = 1;(void)dest;(void)src;
# 301
::exit(___);}
#if 0
# 297
{ 
# 298
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 298); 
# 299
::load((dest.storage)[0], (src.storage)[0]); 
# 300
return dest; 
# 301
} 
#endif
# 303 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint ElementSize> static volatile StorageElement16< ElementSize>  &
# 304
store(volatile StorageElement16< ElementSize>  &dest, const StorageElement16< ElementSize>  &src) 
# 305
{int volatile ___ = 1;(void)dest;(void)src;
# 309
::exit(___);}
#if 0
# 305
{ 
# 306
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 306); 
# 307
::store((dest.storage)[0], (src.storage)[0]); 
# 308
return dest; 
# 309
} 
#endif
# 310 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 313
template< uint ElementSize> __attribute__((unused)) inline StorageElement16< ElementSize>  &
# 314
assign(StorageElement16< ElementSize>  &dest, const StorageElement16< ElementSize>  &src) 
# 315
{int volatile ___ = 1;(void)dest;(void)src;
# 318
::exit(___);}
#if 0
# 315
{ 
# 316
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 316); 
# 317
return StorageDude16< StorageElement16< ElementSize> ::num_storage_owords - 1> ::assign(dest, src); 
# 318
} 
#endif
# 320 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint ElementSize> __attribute__((unused)) inline StorageElement16< ElementSize>  &
# 321
load(StorageElement16< ElementSize>  &dest, const volatile StorageElement16< ElementSize>  &src) 
# 322
{int volatile ___ = 1;(void)dest;(void)src;
# 325
::exit(___);}
#if 0
# 322
{ 
# 323
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh", 323); 
# 324
return StorageDude16< StorageElement16< ElementSize> ::num_storage_owords - 1> ::load(dest, src); 
# 325
} 
#endif
# 327 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint ElementSize> __attribute__((unused)) inline volatile StorageElement16< ElementSize>  &
# 328
store(volatile StorageElement16< ElementSize>  &dest, const StorageElement16< ElementSize>  &src) 
# 329
{int volatile ___ = 1;(void)dest;(void)src;
# 332
::exit(___);}
#if 0
# 329
{ 
# 331
return StorageDude16< StorageElement16< ElementSize> ::num_storage_owords - 1> ::store(dest, src); 
# 332
} 
#endif
# 336 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
struct StorageElement8 { 
# 338
uint2 storage; 
# 340
volatile StorageElement8 &operator=(const StorageElement8 &ele) volatile 
# 341
{ 
# 344
((storage).x) = ((ele.storage).x); 
# 345
((storage).y) = ((ele.storage).y); 
# 346
return *this; 
# 347
} 
# 349
}; 
# 351
__attribute__((unused)) inline StorageElement8 &assign(StorageElement8 &dest, const StorageElement8 &src) 
# 352
{int volatile ___ = 1;(void)dest;(void)src;
# 356
::exit(___);}
#if 0
# 352
{ 
# 354
(dest.storage) = (src.storage); 
# 355
return dest; 
# 356
} 
#endif
# 358 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline StorageElement8 &load(StorageElement8 &dest, const volatile StorageElement8 &src) 
# 359
{int volatile ___ = 1;(void)dest;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(src))));
# 363
::exit(___);}
#if 0
# 359
{ 
# 361
load(dest.storage, src.storage); 
# 362
return dest; 
# 363
} 
#endif
# 365 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
__attribute__((unused)) inline volatile StorageElement8 &store(volatile StorageElement8 &dest, const StorageElement8 &src) 
# 366
{int volatile ___ = 1;(void)reinterpret_cast<void *>(&(const_cast<char &>(reinterpret_cast<const volatile char &>(dest))));(void)src;
# 370
::exit(___);}
#if 0
# 366
{ 
# 368
store(dest.storage, src.storage); 
# 369
return dest; 
# 370
} 
#endif
# 375 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint TElementSize, bool take_eight> 
# 376
struct StorageElementSelector { 
# 378
typedef StorageElement16< TElementSize>  type; 
# 379
}; 
# 381
template< uint TElementSize> 
# 382
struct StorageElementSelector< TElementSize, true>  { 
# 384
typedef StorageElement8 type; 
# 385
}; 
# 387
template< uint TElementSize> 
# 388
struct StorageElementTyping { 
# 390
typedef typename StorageElementSelector< TElementSize, TElementSize <= (8)> ::type Type; 
# 391
}; 
# 394
template<> struct StorageElementTyping< 0U> ; 
# 397
template<> struct StorageElementTyping< 1U>  { 
# 399
typedef unsigned char Type; 
# 400
}; 
# 402
template<> struct StorageElementTyping< 2U>  { 
# 404
typedef uchar2 Type; 
# 405
}; 
# 407
template<> struct StorageElementTyping< 3U>  { 
# 409
typedef uchar3 Type; 
# 410
}; 
# 412
template<> struct StorageElementTyping< 4U>  { 
# 414
typedef uint Type; 
# 415
}; 
# 419
template< unsigned width> struct selectVectorCopyType; 
# 423
template<> struct selectVectorCopyType< 16U>  { 
# 425
typedef uint4 type; 
# 426
}; 
# 429
template<> struct selectVectorCopyType< 8U>  { 
# 431
typedef uint2 type; 
# 432
}; 
# 435
template<> struct selectVectorCopyType< 4U>  { 
# 437
typedef uint1 type; 
# 438
}; 
# 441
template<> struct selectVectorCopyType< 3U>  { 
# 443
typedef uchar3 type; 
# 444
}; 
# 447
template<> struct selectVectorCopyType< 2U>  { 
# 449
typedef uchar2 type; 
# 450
}; 
# 453
template<> struct selectVectorCopyType< 1U>  { 
# 455
typedef uchar1 type; 
# 456
}; 
# 459
template< unsigned bytes, int threads = 1> 
# 460
struct vectorCopy { 
# 462
static const unsigned byte_width = ((bytes >= (16)) ? 16 : ((bytes >= (8)) ? 8 : ((bytes >= (4)) ? 4 : 1))); 
# 463
static const unsigned iterations = (bytes / byte_width); 
# 464
static const unsigned max_threads = ((iterations < (threads)) ? iterations : (threads)); 
# 465
static const unsigned iterations_threaded = (iterations / max_threads); 
# 466
static const unsigned vectors_copied = (max_threads * iterations_threaded); 
# 468
typedef typename selectVectorCopyType< byte_width> ::type vector_type; 
# 470
static inline void storeThreaded(volatile void * dest, const void * src, int i); 
# 471
static inline void loadThreaded(void * dest, const volatile void * src, int i); 
# 472
}; 
# 474
template< int threads> 
# 475
struct vectorCopy< 0, threads>  { 
# 477
static void storeThreaded(volatile void *dest, const void *src, int i) {int volatile ___ = 1;(void)dest;(void)src;(void)i;::exit(___);}
#if 0
# 477
{ } 
#endif
# 478 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
static void loadThreaded(void *dest, const volatile void *src, int i) {int volatile ___ = 1;(void)dest;(void)src;(void)i;::exit(___);}
#if 0
# 478
{ } 
#endif
# 479 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 483
template< unsigned bytes, int threads> inline void 
# 484
vectorCopy< bytes, threads> ::storeThreaded(volatile void *dest, const void *src, int i) 
# 485
{int volatile ___ = 1;(void)dest;(void)src;(void)i;
# 503
::exit(___);}
#if 0
# 485
{ 
# 486
volatile vector_type *const destv = static_cast< volatile vector_type *>(dest); 
# 487
const vector_type *const srcv = static_cast< const vector_type *>(src); 
# 489
if (i < max_threads) 
# 490
{ 
# 491
volatile vector_type *d = destv + i; 
# 492
const vector_type *s = srcv + i; 
# 494
#pragma unroll
for (
# 494
int j = 0; j < iterations_threaded; ++j) 
# 495
{ 
# 496
store(*d, *s); 
# 497
d += max_threads; 
# 498
s += max_threads; 
# 499
}  
# 500
}  
# 502
vectorCopy< bytes - (byte_width * vectors_copied), threads> ::storeThreaded(destv + vectors_copied, srcv + vectors_copied, i); 
# 503
} 
#endif
# 505 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< unsigned bytes, int threads> inline void 
# 506
vectorCopy< bytes, threads> ::loadThreaded(void *dest, const volatile void *src, int i) 
# 507
{int volatile ___ = 1;(void)dest;(void)src;(void)i;
# 525
::exit(___);}
#if 0
# 507
{ 
# 508
vector_type *const destv = static_cast< volatile vector_type *>(dest); 
# 509
const volatile vector_type *const srcv = static_cast< const volatile vector_type *>(src); 
# 511
if (i < max_threads) 
# 512
{ 
# 513
vector_type *d = destv + i; 
# 514
const volatile vector_type *s = srcv + i; 
# 516
#pragma unroll
for (
# 516
int j = 0; j < iterations_threaded; ++j) 
# 517
{ 
# 518
load(*d, *s); 
# 519
d += max_threads; 
# 520
s += max_threads; 
# 521
}  
# 522
}  
# 524
vectorCopy< bytes - (byte_width * vectors_copied), threads> ::loadThreaded(destv + vectors_copied, srcv + vectors_copied, i); 
# 525
} 
#endif
# 528 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int Threads, class T> __attribute__((unused)) inline void 
# 529
multiWrite(volatile T *data_out, T *data) 
# 530
{int volatile ___ = 1;(void)data_out;(void)data;
# 538
::exit(___);}
#if 0
# 530
{ 
# 531
vectorCopy< sizeof(T), Threads> ::storeThreaded(data_out, data, Tools::laneid() % (Threads)); 
# 538
} 
#endif
# 541 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int Threads, class T> __attribute__((unused)) inline void 
# 542
multiRead(T *data, volatile T *data_in) 
# 543
{int volatile ___ = 1;(void)data;(void)data_in;
# 551
::exit(___);}
#if 0
# 543
{ 
# 544
vectorCopy< sizeof(T), Threads> ::loadThreaded(data, data_in, Tools::laneid() % (Threads)); 
# 551
} 
#endif
# 590 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< uint TElementSize, class TAdditionalData, uint TQueueSize> 
# 591
class QueueStorage { 
# 594
protected: typedef typename StorageElementTyping< TElementSize> ::Type QueueData_T; 
# 595
typedef typename StorageElementTyping< sizeof(TAdditionalData)> ::Type QueueAddtionalData_T; 
# 598
public: volatile QueueData_T storage[TQueueSize]; 
# 599
volatile QueueAddtionalData_T additionalStorage[TQueueSize]; 
# 601
void printName() 
# 602
{int volatile ___ = 1;
# 604
::exit(___);}
#if 0
# 602
{ 
# 603
printf("%s\n", __PRETTY_FUNCTION__); 
# 604
} 
#endif
# 606 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
static std::__cxx11::string name() 
# 607
{ 
# 608
return ""; 
# 609
} 
# 611
void init() 
# 612
{int volatile ___ = 1;
# 613
::exit(___);}
#if 0
# 612
{ 
# 613
} 
#endif
# 615 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class T> uint 
# 616
prepareData(T data, TAdditionalData additionalData) 
# 617
{int volatile ___ = 1;(void)data;(void)additionalData;
# 619
::exit(___);}
#if 0
# 617
{ 
# 618
return 0; 
# 619
} 
#endif
# 621 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadsPerElenent, class T> uint 
# 622
prepareDataParallel(T *data, TAdditionalData additionalData) 
# 623
{int volatile ___ = 1;(void)data;(void)additionalData;
# 625
::exit(___);}
#if 0
# 623
{ 
# 624
return 0; 
# 625
} 
#endif
# 629 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class T> void 
# 630
writeData(T data, TAdditionalData additionalData, uint2 pos) 
# 631
{int volatile ___ = 1;(void)data;(void)additionalData;(void)pos;
# 636
::exit(___);}
#if 0
# 631
{ 
# 632
(pos.x) = ((pos.x) % TQueueSize); 
# 634
((storage)[pos.x]) = (*(reinterpret_cast< QueueData_T *>(&data))); 
# 635
((additionalStorage)[pos.x]) = (*(reinterpret_cast< QueueAddtionalData_T *>(&additionalData))); 
# 636
} 
#endif
# 640 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadsPerElenent, class T> void 
# 641
writeDataParallel(T *data, TAdditionalData additionalData, uint2 pos) 
# 642
{int volatile ___ = 1;(void)data;(void)additionalData;(void)pos;
# 653
::exit(___);}
#if 0
# 642
{ 
# 643
(pos.x) = ((pos.x) % TQueueSize); 
# 644
multiWrite< TThreadsPerElenent, T> (reinterpret_cast< volatile T *>((storage) + (pos.x)), data); 
# 645
multiWrite< TThreadsPerElenent, TAdditionalData> (reinterpret_cast< volatile TAdditionalData *>((additionalStorage) + (pos.x)), &additionalData); 
# 653
} 
#endif
# 657 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void readData(void *data, TAdditionalData *additionalData, uint pos) 
# 658
{int volatile ___ = 1;(void)data;(void)additionalData;(void)pos;
# 662
::exit(___);}
#if 0
# 658
{ 
# 659
pos = (pos % TQueueSize); 
# 660
(*(reinterpret_cast< QueueData_T *>(data))) = ((storage)[pos]); 
# 661
(*(reinterpret_cast< QueueAddtionalData_T *>(additionalData))) = ((additionalStorage)[pos]); 
# 662
} 
#endif
# 666 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void *readDataPointers(TAdditionalData *additionalData, uint pos) 
# 667
{int volatile ___ = 1;(void)additionalData;(void)pos;
# 671
::exit(___);}
#if 0
# 667
{ 
# 668
pos = (pos % TQueueSize); 
# 669
(*(reinterpret_cast< QueueAddtionalData_T *>(additionalData))) = ((additionalStorage)[pos]); 
# 670
return (void *)((storage) + pos); 
# 671
} 
#endif
# 672 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void storageFinishRead(uint2 pos) 
# 673
{int volatile ___ = 1;(void)pos;
# 674
::exit(___);}
#if 0
# 673
{ 
# 674
} 
#endif
# 675 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 677
template< uint TElementSize, uint TQueueSize> 
# 678
class QueueStorage< TElementSize, void, TQueueSize>  { 
# 681
protected: typedef typename StorageElementTyping< TElementSize> ::Type QueueData_T; 
# 682
volatile QueueData_T storage[TQueueSize]; 
# 686
public: void printName() 
# 687
{int volatile ___ = 1;
# 689
::exit(___);}
#if 0
# 687
{ 
# 688
printf("%s\n", __PRETTY_FUNCTION__); 
# 689
} 
#endif
# 691 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
static std::__cxx11::string name() 
# 692
{ 
# 693
return ""; 
# 694
} 
# 696
void init() 
# 697
{int volatile ___ = 1;
# 698
::exit(___);}
#if 0
# 697
{ 
# 698
} 
#endif
# 700 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class T> uint 
# 701
prepareData(T data) 
# 702
{int volatile ___ = 1;(void)data;
# 704
::exit(___);}
#if 0
# 702
{ 
# 703
return 0; 
# 704
} 
#endif
# 706 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadsPerElenent, class T> uint 
# 707
prepareDataParallel(T *data) 
# 708
{int volatile ___ = 1;(void)data;
# 710
::exit(___);}
#if 0
# 708
{ 
# 709
return 0; 
# 710
} 
#endif
# 714 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class T> void 
# 715
writeData(T data, uint2 pos) 
# 716
{int volatile ___ = 1;(void)data;(void)pos;
# 726
::exit(___);}
#if 0
# 716
{ 
# 719
(pos.x) = ((pos.x) % TQueueSize); 
# 720
((storage)[pos.x]) = (*(reinterpret_cast< QueueData_T *>(&data))); 
# 726
} 
#endif
# 730 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadsPerElenent, class T> void 
# 731
writeDataParallel(T *data, uint2 pos) 
# 732
{int volatile ___ = 1;(void)data;(void)pos;
# 739
::exit(___);}
#if 0
# 732
{ 
# 733
(pos.x) = ((pos.x) % TQueueSize); 
# 734
multiWrite< TThreadsPerElenent, T> (reinterpret_cast< volatile T *>((storage) + (pos.x)), data); 
# 739
} 
#endif
# 743 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void readData(void *data, uint pos) 
# 744
{int volatile ___ = 1;(void)data;(void)pos;
# 747
::exit(___);}
#if 0
# 744
{ 
# 745
pos = (pos % TQueueSize); 
# 746
load(*(reinterpret_cast< QueueData_T *>(data)), (storage)[pos]); 
# 747
} 
#endif
# 751 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void *readDataPointers(uint pos) 
# 752
{int volatile ___ = 1;(void)pos;
# 755
::exit(___);}
#if 0
# 752
{ 
# 753
pos = (pos % TQueueSize); 
# 754
return (void *)((storage) + pos); 
# 755
} 
#endif
# 757 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void storageFinishRead(uint2 pos) 
# 758
{int volatile ___ = 1;(void)pos;
# 759
::exit(___);}
#if 0
# 758
{ 
# 759
} 
#endif
# 760 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 763
template< uint TElementSize, uint TQueueSize, class TAdditionalData, class QueueStub, class TQueueStorage> 
# 764
class QueueBuilder : public BasicQueue< TAdditionalData> , protected TQueueStorage, public QueueStub { 
# 766
static const ::uint ElementSize = ((((TElementSize) + sizeof(::uint)) - (1)) / sizeof(::uint)); 
# 770
public: void printName() 
# 771
{int volatile ___ = 1;
# 773
::exit(___);}
#if 0
# 771
{ 
# 772
printf("%s\n", __PRETTY_FUNCTION__); 
# 773
} 
#endif
# 775 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void init() 
# 776
{int volatile ___ = 1;
# 779
::exit(___);}
#if 0
# 776
{ 
# 777
QueueStub::init(); 
# 778
TQueueStorage::init(); 
# 779
} 
#endif
# 781 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
static ::std::__cxx11::string name() 
# 782
{ 
# 783
return QueueStub::name() + TQueueStorage::name(); 
# 784
} 
# 788
template< class Data> bool 
# 789
enqueueInitial(Data data, TAdditionalData additionalData) 
# 790
{int volatile ___ = 1;(void)data;(void)additionalData;
# 792
::exit(___);}
#if 0
# 790
{ 
# 791
return enqueue< Data> (data, additionalData); 
# 792
} 
#endif
# 796 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class Data> bool 
# 797
enqueue(Data data, TAdditionalData additionalData) 
# 798
{int volatile ___ = 1;(void)data;(void)additionalData;
# 812
::exit(___);}
#if 0
# 798
{ 
# 799
::int2 pos = make_int2(-1, 0); 
# 800
::uint addinfo = prepareData(data, additionalData); 
# 801
do 
# 802
{ 
# 803
pos = QueueStub::template enqueuePrep< 1> (pos); 
# 804
if ((pos.x) >= 0) 
# 805
{ 
# 806
writeData(data, additionalData, make_uint2(pos.x, addinfo)); 
# 807
__threadfence(); 
# 808
QueueStub::template enqueueEnd< 1> (pos); 
# 809
}  
# 810
} while ((pos.x) == (-2)); 
# 811
return (pos.x) >= 0; 
# 812
} 
#endif
# 816 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadssPerElment, class Data> bool 
# 817
enqueue(Data *data, TAdditionalData additionalData) 
# 818
{int volatile ___ = 1;(void)data;(void)additionalData;
# 832
::exit(___);}
#if 0
# 818
{ 
# 819
::int2 pos = make_int2(-1, 0); 
# 820
::uint addinfo = TQueueStorage::template prepareDataParallel< TThreadssPerElment> (data, additionalData); 
# 821
do 
# 822
{ 
# 823
pos = QueueStub::template enqueuePrep< TThreadssPerElment> (pos); 
# 824
if ((pos.x) >= 0) 
# 825
{ 
# 826
TQueueStorage::template writeDataParallel< TThreadssPerElment> (data, additionalData, make_uint2(pos.x, addinfo)); 
# 827
__threadfence(); 
# 828
QueueStub::template enqueueEnd< TThreadssPerElment> (pos); 
# 829
}  
# 830
} while ((pos.x) == (-2)); 
# 831
return (pos.x) >= 0; 
# 832
} 
#endif
# 836 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
int dequeue(void *data, TAdditionalData *addtionalData, int num) 
# 837
{int volatile ___ = 1;(void)data;(void)addtionalData;(void)num;
# 850
::exit(___);}
#if 0
# 837
{ 
# 839
::uint2 offset_take = QueueStub::dequeuePrep(num); 
# 841
if ((__device_builtin_variable_threadIdx.x) < (offset_take.y)) 
# 842
{ 
# 843
readData((reinterpret_cast< ::uint *>(data)) + ((__device_builtin_variable_threadIdx.x) * ElementSize), addtionalData + (__device_builtin_variable_threadIdx.x), (offset_take.x) + (__device_builtin_variable_threadIdx.x)); 
# 844
__threadfence(); 
# 845
}  
# 846
__syncthreads(); 
# 847
QueueStub::dequeueEnd(offset_take); 
# 848
TQueueStorage::storageFinishRead(offset_take); 
# 849
return offset_take.y; 
# 850
} 
#endif
# 851 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 853
template< uint TElementSize, uint TQueueSize, class QueueStub, class TQueueStorage> 
# 854
class QueueBuilder< TElementSize, TQueueSize, void, QueueStub, TQueueStorage>  : public BasicQueue< void> , protected TQueueStorage, public QueueStub { 
# 857
static const ::uint ElementSize = ((((TElementSize) + sizeof(::uint)) - (1)) / sizeof(::uint)); 
# 860
public: void printName() 
# 861
{int volatile ___ = 1;
# 863
::exit(___);}
#if 0
# 861
{ 
# 862
printf("%s\n", __PRETTY_FUNCTION__); 
# 863
} 
#endif
# 865 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void init() 
# 866
{int volatile ___ = 1;
# 869
::exit(___);}
#if 0
# 866
{ 
# 867
QueueStub::init(); 
# 868
TQueueStorage::init(); 
# 869
} 
#endif
# 871 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
static ::std::__cxx11::string name() 
# 872
{ 
# 873
return QueueStub::name() + TQueueStorage::name(); 
# 874
} 
# 878
bool isFill(float portion) 
# 879
{int volatile ___ = 1;(void)portion;
# 892
::exit(___);}
#if 0
# 879
{ 
# 880
float fsize = QueueStub::size(); 
# 881
float fcapa = QueueStub::capacity(); 
# 886
if (fcapa <= (0)) 
# 887
{ 
# 888
return true; 
# 889
}  
# 891
return (fsize / fcapa) > portion; 
# 892
} 
#endif
# 896 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class Data> bool 
# 897
enqueueInitial(Data data) 
# 898
{int volatile ___ = 1;(void)data;
# 901
::exit(___);}
#if 0
# 898
{ 
# 900
return enqueue< Data> (data); 
# 901
} 
#endif
# 905 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class Data> bool 
# 906
enqueue(Data data) 
# 907
{int volatile ___ = 1;(void)data;
# 923
::exit(___);}
#if 0
# 907
{ 
# 910
::int2 pos = make_int2(-1, 0); 
# 911
::uint addinfo = prepareData(data); 
# 913
{ 
# 914
pos = QueueStub::template enqueuePrep< 1> (pos); 
# 915
if ((pos.x) >= 0) 
# 916
{ 
# 917
writeData(data, make_uint2(pos.x, addinfo)); 
# 918
__threadfence(); 
# 919
QueueStub::template enqueueEnd< 1> (pos); 
# 920
}  
# 921
} 
# 922
return (pos.x) >= 0; 
# 923
} 
#endif
# 927 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadssPerElment, class Data> bool 
# 928
enqueue(Data *data) 
# 929
{int volatile ___ = 1;(void)data;
# 943
::exit(___);}
#if 0
# 929
{ 
# 930
::int2 pos = make_int2(-1, 0); 
# 931
::uint addinfo = TQueueStorage::template prepareDataParallel< TThreadssPerElment> (data); 
# 932
do 
# 933
{ 
# 934
pos = QueueStub::template enqueuePrep< TThreadssPerElment> (pos); 
# 935
if ((pos.x) >= 0) 
# 936
{ 
# 937
TQueueStorage::template writeDataParallel< TThreadssPerElment> (data, make_uint2(pos.x, addinfo)); 
# 938
__threadfence(); 
# 939
QueueStub::template enqueueEnd< TThreadssPerElment> (pos); 
# 940
}  
# 941
} while ((pos.x) == (-2)); 
# 942
return (pos.x) >= 0; 
# 943
} 
#endif
# 946 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
int dequeue(void *data, int num) 
# 947
{int volatile ___ = 1;(void)data;(void)num;
# 958
::exit(___);}
#if 0
# 947
{ 
# 948
::uint2 offset_take = QueueStub::dequeuePrep(num); 
# 949
if ((__device_builtin_variable_threadIdx.x) < (offset_take.y)) 
# 950
{ 
# 951
TQueueStorage::readData((reinterpret_cast< ::uint *>(data)) + ((__device_builtin_variable_threadIdx.x) * ElementSize), (offset_take.x) + (__device_builtin_variable_threadIdx.x)); 
# 952
__threadfence(); 
# 953
}  
# 954
__syncthreads(); 
# 955
QueueStub::dequeueEnd(offset_take); 
# 956
TQueueStorage::storageFinishRead(offset_take); 
# 957
return offset_take.y; 
# 958
} 
#endif
# 959 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 965
template< uint MemSize> 
# 966
class MemoryAllocFastest { 
# 968
static const uint AllocElements = ((MemSize) / sizeof(uint)); 
# 969
uint allocPointer; 
# 971
public: volatile uint4 dataAllocation[AllocElements / (4)]; 
# 973
void printName() 
# 974
{int volatile ___ = 1;
# 976
::exit(___);}
#if 0
# 974
{ 
# 975
printf("%s\n", __PRETTY_FUNCTION__); 
# 976
} 
#endif
# 978 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void init() 
# 979
{int volatile ___ = 1;
# 983
::exit(___);}
#if 0
# 979
{ 
# 980
uint lid = (__device_builtin_variable_threadIdx.x) + ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)); 
# 981
if (lid == (0)) { 
# 982
(allocPointer) = (0); }  
# 983
} 
#endif
# 984 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
uint allocOffset(uint size) 
# 985
{int volatile ___ = 1;(void)size;
# 991
::exit(___);}
#if 0
# 985
{ 
# 986
size = (size / sizeof(uint)); 
# 987
uint p = atomicAdd(&(allocPointer), size) % AllocElements; 
# 988
while ((p + size) > AllocElements) { 
# 989
p = (atomicAdd(&(allocPointer), size) % AllocElements); }  
# 990
return p; 
# 991
} 
#endif
# 993 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
volatile uint *offsetToPointer(uint offset) 
# 994
{int volatile ___ = 1;(void)offset;
# 996
::exit(___);}
#if 0
# 994
{ 
# 995
return (reinterpret_cast< volatile uint *>(dataAllocation)) + offset; 
# 996
} 
#endif
# 997 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
volatile uint *alloc(uint size) 
# 998
{int volatile ___ = 1;(void)size;
# 1000
::exit(___);}
#if 0
# 998
{ 
# 999
return offsetToPointer(allocOffset(size)); 
# 1000
} 
#endif
# 1002 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void free(void *p, int size) 
# 1003
{int volatile ___ = 1;(void)p;(void)size;
# 1004
::exit(___);}
#if 0
# 1003
{ 
# 1004
} 
#endif
# 1005 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void freeOffset(int offset, int size) 
# 1006
{int volatile ___ = 1;(void)offset;(void)size;
# 1007
::exit(___);}
#if 0
# 1006
{ 
# 1007
} 
#endif
# 1008 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 1012
template< uint MemSize> 
# 1013
class MemoryAlloc { 
# 1015
static const uint AllocSize = (16); 
# 1016
static const uint AllocElements = (MemSize / AllocSize); 
# 1018
uint flags[(AllocElements + (31)) / (32)]; 
# 1019
uint allocPointer; 
# 1021
public: volatile uint4 dataAllocation[AllocElements]; 
# 1023
void printName() 
# 1024
{int volatile ___ = 1;
# 1026
::exit(___);}
#if 0
# 1024
{ 
# 1025
printf("%s\n", __PRETTY_FUNCTION__); 
# 1026
} 
#endif
# 1028 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void init() 
# 1029
{int volatile ___ = 1;
# 1035
::exit(___);}
#if 0
# 1029
{ 
# 1030
uint lid = (__device_builtin_variable_threadIdx.x) + ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)); 
# 1031
for (int i = lid; i < ((AllocElements + (31)) / (32)); i += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) { 
# 1032
((flags)[i]) = 0; }  
# 1033
if (lid == (0)) { 
# 1034
(allocPointer) = (0); }  
# 1035
} 
#endif
# 1039 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
int allocOffset(uint size) 
# 1040
{int volatile ___ = 1;(void)size;
# 1058
::exit(___);}
#if 0
# 1040
{ 
# 1041
size = (((size + AllocSize) - (1)) / AllocSize); 
# 1042
for (uint t = (0); t < (AllocElements / AllocSize); ++t) 
# 1043
{ 
# 1044
int p = atomicAdd(&(allocPointer), size) % AllocElements; 
# 1045
if ((p + size) > AllocElements) { 
# 1046
p = (atomicAdd(&(allocPointer), size) % AllocElements); }  
# 1048
int bigoffset = p / 32; 
# 1049
int withinoffset = p - (bigoffset * 32); 
# 1050
uint bits = ((1U << size) - 1U) << withinoffset; 
# 1051
uint oldf = atomicOr((flags) + bigoffset, bits); 
# 1052
if ((oldf & bits) == (0)) { 
# 1053
return p; }  
# 1054
atomicAnd((flags) + bigoffset, oldf | (~bits)); 
# 1055
}  
# 1057
return -1; 
# 1058
} 
#endif
# 1060 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
volatile uint *offsetToPointer(int offset) 
# 1061
{int volatile ___ = 1;(void)offset;
# 1063
::exit(___);}
#if 0
# 1061
{ 
# 1062
return reinterpret_cast< volatile uint *>((dataAllocation) + offset); 
# 1063
} 
#endif
# 1064 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
int pointerToOffset(void *p) 
# 1065
{int volatile ___ = 1;(void)p;
# 1067
::exit(___);}
#if 0
# 1065
{ 
# 1066
return (reinterpret_cast< volatile uint4 *>(p)) - (dataAllocation); 
# 1067
} 
#endif
# 1068 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
volatile uint *alloc(uint size) 
# 1069
{int volatile ___ = 1;(void)size;
# 1071
::exit(___);}
#if 0
# 1069
{ 
# 1070
return offsetToPointer(allocOffset(size)); 
# 1071
} 
#endif
# 1073 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void free(void *p, int size) 
# 1074
{int volatile ___ = 1;(void)p;(void)size;
# 1076
::exit(___);}
#if 0
# 1074
{ 
# 1075
freeOffset(pointerToOffset(p), size); 
# 1076
} 
#endif
# 1077 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void freeOffset(int offset, int size) 
# 1078
{int volatile ___ = 1;(void)offset;(void)size;
# 1085
::exit(___);}
#if 0
# 1078
{ 
# 1080
size = (((size + AllocSize) - (1)) / AllocSize); 
# 1081
int bigoffset = offset / 32; 
# 1082
int withinoffset = offset - (bigoffset * 32); 
# 1083
uint bits = ((1U << size) - 1U) << withinoffset; 
# 1084
atomicAnd((flags) + bigoffset, ~bits); 
# 1085
} 
#endif
# 1086 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 1091
template< uint TAvgElementSize, class TAdditionalData, uint TQueueSize, bool TCheckSet = false, template< uint >  class MemAlloc = MemoryAlloc> 
# 1092
class AllocStorage : private MemAlloc< (TQueueSize) * ((TAvgElementSize) + (((TAvgElementSize > (8)) || (AdditionalDataInfo< TAdditionalData> ::size > 8)) ? ((sizeof(TAdditionalData) + (15)) / (16)) * (16) : (((TAvgElementSize > (4)) || (AdditionalDataInfo< TAdditionalData> ::size > 4)) ? ((sizeof(TAdditionalData) + (7)) / (8)) * (8) : (4))))>  { 
# 1096
protected: static const int ForceSize = ((TAvgElementSize > (8)) ? 16 : ((TAvgElementSize > (4)) ? 8 : 4)); 
# 1098
static const int PureAdditionalSize = (((sizeof(TAdditionalData) + sizeof(::uint)) - (1)) / sizeof(::uint)); 
# 1099
static const int AdditionalSize = (((TAvgElementSize > (8)) || (sizeof(TAdditionalData) > (8))) ? ((sizeof(TAdditionalData) + (15)) / (16)) * (16) : (((TAvgElementSize > (4)) || (sizeof(TAdditionalData) > (4))) ? ((sizeof(TAdditionalData) + (7)) / (8)) * (8) : (4))); 
# 1102
typedef typename StorageElementTyping< sizeof(TAdditionalData)> ::Type AdditonalInfoElement; 
# 1103
typedef ::StorageElementTyping< 8U> ::Type OffsetData_T; 
# 1104
typedef MemAlloc< TAvgElementSize * TQueueSize>  TMemAlloc; 
# 1106
volatile OffsetData_T offsetStorage[TQueueSize]; 
# 1110
public: void printName() 
# 1111
{int volatile ___ = 1;
# 1113
::exit(___);}
#if 0
# 1111
{ 
# 1112
printf("%s\n", __PRETTY_FUNCTION__); 
# 1113
} 
#endif
# 1115 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
static ::std::__cxx11::string name() 
# 1116
{ 
# 1117
return ((::std::__cxx11::string)("Alloced")); 
# 1118
} 
# 1120
void init() 
# 1121
{int volatile ___ = 1;
# 1129
::exit(___);}
#if 0
# 1121
{ 
# 1122
MemAlloc< (TQueueSize) * ((TAvgElementSize) + (((TAvgElementSize > (8)) || (AdditionalDataInfo< TAdditionalData> ::size > 8)) ? ((sizeof(TAdditionalData) + (15)) / (16)) * (16) : (((TAvgElementSize > (4)) || (AdditionalDataInfo< TAdditionalData> ::size > 4)) ? ((sizeof(TAdditionalData) + (7)) / (8)) * (8) : (4))))> ::init(); 
# 1123
if (TCheckSet) 
# 1124
{ 
# 1125
::uint lid = (__device_builtin_variable_threadIdx.x) + ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)); 
# 1126
for (::uint i = lid; i < ((2) * TQueueSize); i += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) { 
# 1127
(((::uint *)(offsetStorage))[i]) = (0); }  
# 1128
}  
# 1129
} 
#endif
# 1134 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class T> ::uint 
# 1135
prepareData(T data, TAdditionalData additionalData) 
# 1136
{int volatile ___ = 1;(void)data;(void)additionalData;
# 1141
::exit(___);}
#if 0
# 1136
{ 
# 1137
::uint p = allocOffset(((((sizeof(T) + AdditionalSize) + ForceSize) - (1)) / ForceSize) * ForceSize); 
# 1138
(*(reinterpret_cast< volatile AdditonalInfoElement *>((reinterpret_cast< volatile ::uint *>(TMemAlloc::dataAllocation)) + p))) = (*(reinterpret_cast< AdditonalInfoElement *>(&additionalData))); 
# 1139
(*(reinterpret_cast< volatile typename StorageElementTyping< sizeof(T)> ::Type *>(((reinterpret_cast< volatile ::uint *>(TMemAlloc::dataAllocation)) + p) + (AdditionalSize / sizeof(::uint))))) = (*(reinterpret_cast< typename StorageElementTyping< sizeof(T)> ::Type *>(&data))); 
# 1140
return p; 
# 1141
} 
#endif
# 1147 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadsPerElement, class T> ::uint 
# 1148
prepareDataParallel(T *data, TAdditionalData additionalData) 
# 1149
{int volatile ___ = 1;(void)data;(void)additionalData;
# 1162
::exit(___);}
#if 0
# 1149
{ 
# 1150
if (TThreadsPerElement == 1) { 
# 1151
return prepareData(*data, additionalData); }  
# 1153
int p; 
# 1154
if ((Tools::laneid() % (TThreadsPerElement)) == (0)) { 
# 1155
p = allocOffset(((((sizeof(T) + AdditionalSize) + ForceSize) - (1)) / ForceSize) * ForceSize); }  
# 1156
p = warpBroadcast< TThreadsPerElement> (p, 0); 
# 1158
multiWrite< TThreadsPerElement, TAdditionalData> (reinterpret_cast< volatile TAdditionalData *>((reinterpret_cast< volatile ::uint *>(TMemAlloc::dataAllocation)) + p), &additionalData); 
# 1159
multiWrite< TThreadsPerElement, T> (reinterpret_cast< volatile T *>(((reinterpret_cast< volatile ::uint *>(TMemAlloc::dataAllocation)) + p) + (AdditionalSize / sizeof(::uint))), data); 
# 1161
return p; 
# 1162
} 
#endif
# 1166 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class T> void 
# 1167
writeData(T data, TAdditionalData additionalData, ::uint2 pos) 
# 1168
{int volatile ___ = 1;(void)data;(void)additionalData;(void)pos;
# 1180
::exit(___);}
#if 0
# 1168
{ 
# 1169
(pos.x) = ((pos.x) % TQueueSize); 
# 1170
::uint2 o = make_uint2(pos.y, sizeof(T)); 
# 1172
if (TCheckSet) 
# 1173
{ 
# 1174
(o.x) += (1); 
# 1175
while ((*(((volatile ::uint *)(offsetStorage)) + ((2) * (pos.x)))) != (0)) { 
# 1176
__threadfence(); }  
# 1177
}  
# 1179
((offsetStorage)[pos.x]) = (*(reinterpret_cast< OffsetData_T *>(&o))); 
# 1180
} 
#endif
# 1184 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadsPerElement, class T> void 
# 1185
writeDataParallel(T *data, TAdditionalData additionalData, ::uint2 pos) 
# 1186
{int volatile ___ = 1;(void)data;(void)additionalData;(void)pos;
# 1189
::exit(___);}
#if 0
# 1186
{ 
# 1187
if ((Tools::laneid() % (TThreadsPerElement)) == (0)) { 
# 1188
writeData(*data, additionalData, pos); }  
# 1189
} 
#endif
# 1215 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void storageFinishRead(::uint2 pos) 
# 1216
{int volatile ___ = 1;(void)pos;
# 1234
::exit(___);}
#if 0
# 1216
{ 
# 1218
if ((__device_builtin_variable_threadIdx.x) < (pos.y)) 
# 1219
{ 
# 1220
::uint p = ((pos.x) + (__device_builtin_variable_threadIdx.x)) % TQueueSize; 
# 1222
OffsetData_T offsetData; 
# 1223
offsetData = ((offsetStorage)[p]); 
# 1224
::uint2 offset = *(reinterpret_cast< ::uint2 *>(&offsetData)); 
# 1226
TMemAlloc::freeOffset(offset.x, offset.y); 
# 1227
if (TCheckSet) 
# 1228
{ 
# 1229
__threadfence(); 
# 1230
::uint2 o = make_uint2(0, 0); 
# 1231
((offsetStorage)[p]) = (*(reinterpret_cast< OffsetData_T *>(&o))); 
# 1232
}  
# 1233
}  
# 1234
} 
#endif
# 1235 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 1237
template< uint TAvgElementSize, uint TQueueSize, bool TCheckSet, template< uint >  class MemAlloc> 
# 1238
class AllocStorage< TAvgElementSize, void, TQueueSize, TCheckSet, MemAlloc>  : private MemAlloc< TAvgElementSize * TQueueSize>  { 
# 1241
protected: static const int ForceSize = ((TAvgElementSize > (8)) ? 16 : ((TAvgElementSize > (4)) ? 8 : 4)); 
# 1244
typedef ::StorageElementTyping< 8U> ::Type OffsetData_T; 
# 1245
typedef MemAlloc< TAvgElementSize * TQueueSize>  TMemAlloc; 
# 1247
volatile OffsetData_T offsetStorage[TQueueSize]; 
# 1251
public: void printName() 
# 1252
{int volatile ___ = 1;
# 1254
::exit(___);}
#if 0
# 1252
{ 
# 1253
printf("%s\n", __PRETTY_FUNCTION__); 
# 1254
} 
#endif
# 1256 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
static ::std::__cxx11::string name() 
# 1257
{ 
# 1258
return "Alloced"; 
# 1259
} 
# 1261
void init() 
# 1262
{int volatile ___ = 1;
# 1270
::exit(___);}
#if 0
# 1262
{ 
# 1263
MemAlloc< TAvgElementSize * TQueueSize> ::init(); 
# 1264
if (TCheckSet) 
# 1265
{ 
# 1266
::uint lid = (__device_builtin_variable_threadIdx.x) + ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)); 
# 1267
for (::uint i = lid; i < ((2) * TQueueSize); i += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) { 
# 1268
(((::uint *)(offsetStorage))[i]) = (0); }  
# 1269
}  
# 1270
} 
#endif
# 1274 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class T> ::uint 
# 1275
prepareData(T data) 
# 1276
{int volatile ___ = 1;(void)data;
# 1280
::exit(___);}
#if 0
# 1276
{ 
# 1277
::uint p = allocOffset((((sizeof(T) + ForceSize) - (1)) / ForceSize) * ForceSize); 
# 1278
(*(reinterpret_cast< volatile typename StorageElementTyping< sizeof(T)> ::Type *>((reinterpret_cast< volatile ::uint *>(TMemAlloc::dataAllocation)) + p))) = (*(reinterpret_cast< typename StorageElementTyping< sizeof(T)> ::Type *>(&data))); 
# 1279
return p; 
# 1280
} 
#endif
# 1285 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadsPerElement, class T> ::uint 
# 1286
prepareDataParallel(T *data) 
# 1287
{int volatile ___ = 1;(void)data;
# 1298
::exit(___);}
#if 0
# 1287
{ 
# 1288
if (TThreadsPerElement == 1) { 
# 1289
return prepareData(*data); }  
# 1291
int p; 
# 1292
if ((Tools::laneid() % (TThreadsPerElement)) == (0)) { 
# 1293
p = allocOffset((((sizeof(T) + ForceSize) - (1)) / ForceSize) * ForceSize); }  
# 1295
p = warpBroadcast< TThreadsPerElement> (p, 0); 
# 1296
multiWrite< TThreadsPerElement, T> (reinterpret_cast< volatile T *>((reinterpret_cast< volatile ::uint *>(TMemAlloc::dataAllocation)) + p), data); 
# 1297
return p; 
# 1298
} 
#endif
# 1302 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< class T> void 
# 1303
writeData(T data, ::uint2 pos) 
# 1304
{int volatile ___ = 1;(void)data;(void)pos;
# 1316
::exit(___);}
#if 0
# 1304
{ 
# 1305
(pos.x) = ((pos.x) % TQueueSize); 
# 1306
::uint2 o = make_uint2(pos.y, sizeof(T)); 
# 1308
if (TCheckSet) 
# 1309
{ 
# 1310
(o.x) += (1); 
# 1311
while ((*(((volatile ::uint *)(offsetStorage)) + ((2) * (pos.x)))) != (0)) { 
# 1312
__threadfence(); }  
# 1313
}  
# 1315
((offsetStorage)[pos.x]) = (*(reinterpret_cast< OffsetData_T *>(&o))); 
# 1316
} 
#endif
# 1320 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
template< int TThreadsPerElement, class T> void 
# 1321
writeDataParallel(T *data, ::uint2 pos) 
# 1322
{int volatile ___ = 1;(void)data;(void)pos;
# 1325
::exit(___);}
#if 0
# 1322
{ 
# 1323
if ((Tools::laneid() % (TThreadsPerElement)) == (0)) { 
# 1324
writeData(*data, pos); }  
# 1325
} 
#endif
# 1349 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
void storageFinishRead(::uint2 pos) 
# 1350
{int volatile ___ = 1;(void)pos;
# 1366
::exit(___);}
#if 0
# 1350
{ 
# 1351
if ((__device_builtin_variable_threadIdx.x) < (pos.y)) 
# 1352
{ 
# 1353
::uint p = ((pos.x) + (__device_builtin_variable_threadIdx.x)) % TQueueSize; 
# 1354
OffsetData_T offsetData; 
# 1355
offsetData = ((offsetStorage)[p]); 
# 1356
::uint2 offset = *(reinterpret_cast< ::uint2 *>(&offsetData)); 
# 1358
TMemAlloc::freeOffset(offset.x, offset.y); 
# 1359
if (TCheckSet) 
# 1360
{ 
# 1361
__threadfence(); 
# 1362
::uint2 o = make_uint2(0, 0); 
# 1363
((offsetStorage)[p]) = (*(reinterpret_cast< OffsetData_T *>(&o))); 
# 1364
}  
# 1365
}  
# 1366
} 
#endif
# 1367 "/home/zhengzhen/workspace/versapipe/queueHelpers.cuh"
}; 
# 39 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
namespace SegmentedStorage { 
# 42
extern void (*pReinitStorage)(void); 
# 43
extern void *storage; 
# 46
template< int TStorageSize, int TBlockSize> 
# 47
class Storage { 
# 50
public: static const int StorageSize = TStorageSize; 
# 51
static const int BlockSize = ((TBlockSize / 16) * 16); 
# 52
struct Block { 
# 54
unsigned data[BlockSize / sizeof(int)]; 
# 55
}; 
# 59
private: static const int NumBlocks = ((StorageSize - ((16) * sizeof(uint))) / (BlockSize + sizeof(int))); 
# 61
Block blocks[NumBlocks]; 
# 63
int count; 
# 64
unsigned front, back; 
# 65
volatile int available[NumBlocks]; 
# 68
public: void init() 
# 69
{int volatile ___ = 1;
# 74
::exit(___);}
#if 0
# 69
{ 
# 70
(count) = NumBlocks; 
# 71
(back) = ((front) = (0)); 
# 72
for (int id = (__device_builtin_variable_threadIdx.x) + ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)); id < NumBlocks; id += ((__device_builtin_variable_gridDim.x) * (__device_builtin_variable_blockDim.x))) { 
# 73
((available)[id]) = id; }  
# 74
} 
#endif
# 77 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
int request() 
# 78
{int volatile ___ = 1;
# 91
::exit(___);}
#if 0
# 78
{ 
# 79
int c = atomicSub(&(count), 1); 
# 80
if (c <= 0) 
# 81
{ 
# 82
atomicAdd(&(count), 1); 
# 83
return -1; 
# 84
}  
# 85
int p = atomicInc(&(front), NumBlocks - 1); 
# 86
int id; 
# 87
while ((id = ((available)[p])) == (-1)) { 
# 88
__threadfence(); }  
# 89
((available)[p]) = (-1); 
# 90
return id; 
# 91
} 
#endif
# 94 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void free(int id) 
# 95
{int volatile ___ = 1;(void)id;
# 102
::exit(___);}
#if 0
# 95
{ 
# 96
int p = atomicInc(&(back), NumBlocks - 1); 
# 97
while (((available)[p]) != (-1)) { 
# 98
__threadfence(); }  
# 99
((available)[p]) = id; 
# 100
__threadfence(); 
# 101
atomicAdd(&(count), 1); 
# 102
} 
#endif
# 105 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void free(Block *b) 
# 106
{int volatile ___ = 1;(void)b;
# 108
::exit(___);}
#if 0
# 106
{ 
# 107
free(blockToIndex(b)); 
# 108
} 
#endif
# 111 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
Block *indexToBlock(int index) 
# 112
{int volatile ___ = 1;(void)index;
# 115
::exit(___);}
#if 0
# 112
{ 
# 114
return (blocks) + index; 
# 115
} 
#endif
# 118 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
int blockToIndex(Block *b) 
# 119
{int volatile ___ = 1;(void)b;
# 121
::exit(___);}
#if 0
# 119
{ 
# 120
return b - (blocks); 
# 121
} 
#endif
# 124 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
static Storage *get() 
# 125
{int volatile ___ = 1;
# 127
::exit(___);}
#if 0
# 125
{ 
# 126
return reinterpret_cast< SegmentedStorage::Storage< StorageSize, BlockSize>  *>(storage); 
# 127
} 
#endif
# 128 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
}; 
# 130
extern void *StoragePointer; 
# 132
template< int StorageSize, int BlockSize> static void 
# 133
__wrapper__device_stub_initStorage(void *&data) {exit(1);}
#if 0
# 134
{ 
# 135
storage = data; 
# 136
Storage< StorageSize, BlockSize>  *s = reinterpret_cast< Storage< StorageSize, BlockSize>  *>(data); 
# 137
(s->init()); 
# 138
} 
#endif
# 132 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< int StorageSize, int BlockSize> void 
# 133
initStorage(void *data) 
# 134
{__wrapper__device_stub_initStorage<StorageSize,BlockSize>(data);
# 138
return;}
#if 0
# 134
{ 
# 135
storage = data; 
# 136
Storage< StorageSize, BlockSize>  *s = reinterpret_cast< Storage< StorageSize, BlockSize>  *>(data); 
# 137
(s->init()); 
# 138
} 
#endif
# 140 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< class Storage> void 
# 141
reinitStorage() 
# 142
{ 
# 143
if (StoragePointer == (0)) { 
# 144
Tools::checkError(cudaMalloc(&StoragePointer, Storage::StorageSize), "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh", 144); }  
# 145
(cudaConfigureCall(512, 512)) ? (void)0 : (initStorage< Storage::StorageSize, Storage::BlockSize> )(StoragePointer); 
# 146
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh", 146); 
# 147
} 
# 150
template< class Storage> void 
# 151
createStorage() 
# 152
{ 
# 153
Tools::checkError(cudaMalloc(&StoragePointer, Storage::StorageSize), "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh", 153); 
# 154
(cudaConfigureCall(512, 512)) ? (void)0 : (initStorage< Storage::StorageSize, Storage::BlockSize> )(StoragePointer); 
# 155
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh", 155); 
# 156
pReinitStorage = (&reinitStorage< Storage> ); 
# 157
} 
# 159
void destroyStorage(); 
# 161
void checkReinitStorage(); 
# 164
template< uint TQueueSize, uint ElementsPerBlock, class SharedStorage> 
# 165
class SegmentedQueueStorageBase { 
# 169
protected: static const int MaxBlocks = (((TQueueSize + ElementsPerBlock) - (1)) / ElementsPerBlock); 
# 171
template< class QueueData_T, class QueueAddtionalData_T> 
# 172
struct MyBlock { 
# 174
volatile QueueData_T storage[ElementsPerBlock]; 
# 175
volatile QueueAddtionalData_T additionalStorage[ElementsPerBlock]; 
# 176
int available; 
# 177
void init() 
# 178
{int volatile ___ = 1;
# 180
::exit(___);}
#if 0
# 178
{ 
# 179
(*((volatile int *)(&(available)))) = (ElementsPerBlock); 
# 180
} 
#endif
# 181 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void use(int num = 1) 
# 182
{int volatile ___ = 1;(void)num;
# 183
::exit(___);}
#if 0
# 182
{ 
# 183
} 
#endif
# 185 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
bool doneuse(int num = 1) 
# 186
{int volatile ___ = 1;(void)num;
# 188
::exit(___);}
#if 0
# 186
{ 
# 187
return atomicSub(&(available), num) <= num; 
# 188
} 
#endif
# 189 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
}; 
# 191
template< class QueueData_T> 
# 192
struct MyBlock< QueueData_T, void>  { 
# 194
volatile QueueData_T storage[ElementsPerBlock]; 
# 195
int available; 
# 196
void init() 
# 197
{int volatile ___ = 1;
# 199
::exit(___);}
#if 0
# 197
{ 
# 198
(*((volatile int *)(&(available)))) = (ElementsPerBlock); 
# 199
} 
#endif
# 200 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void use(int num = 1) 
# 201
{int volatile ___ = 1;(void)num;
# 202
::exit(___);}
#if 0
# 201
{ 
# 202
} 
#endif
# 203 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
bool doneuse(int num = 1) 
# 204
{int volatile ___ = 1;(void)num;
# 206
::exit(___);}
#if 0
# 204
{ 
# 205
return atomicSub(&(available), num) <= num; 
# 206
} 
#endif
# 207 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
}; 
# 209
volatile int useBlocks[MaxBlocks]; 
# 212
template< class TMyBlock, int Smaller> TMyBlock *
# 213
acquireBlock(int pos) 
# 214
{int volatile ___ = 1;(void)pos;
# 259
::exit(___);}
#if 0
# 214
{ 
# 215
int block = pos / ElementsPerBlock; 
# 216
int blockoffset = (useBlocks)[block]; 
# 217
if (blockoffset == (-1)) 
# 218
{ 
# 219
int localpos = pos - (ElementsPerBlock * block); 
# 220
if ((Smaller == 0) || (localpos < Smaller)) 
# 221
{ 
# 222
blockoffset = (SharedStorage::get()->request()); 
# 226
if (blockoffset == (-1)) 
# 227
{ 
# 228
__threadfence(); 
# 229
blockoffset = ((useBlocks)[block]); 
# 230
if (blockoffset == (-1)) 
# 231
{ 
# 235
Tools::trap(); 
# 236
}  
# 237
} else 
# 239
{ 
# 240
((reinterpret_cast< TMyBlock *>((SharedStorage::get()->indexToBlock(blockoffset))))->init()); 
# 241
int oldid = atomicCAS((int *)((useBlocks) + block), -1, blockoffset); 
# 242
if (oldid != (-1)) 
# 243
{ 
# 247
(SharedStorage::get()->free(blockoffset)); 
# 248
blockoffset = oldid; 
# 249
}  
# 250
}  
# 251
} else 
# 253
{ 
# 254
while ((blockoffset = ((useBlocks)[block])) == (-1)) { 
# 255
__threadfence(); }  
# 256
}  
# 257
}  
# 258
return reinterpret_cast< TMyBlock *>((SharedStorage::get()->indexToBlock(blockoffset))); 
# 259
} 
#endif
# 262 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< class TMyBlock> TMyBlock *
# 263
getBlock(int pos) 
# 264
{int volatile ___ = 1;(void)pos;
# 268
::exit(___);}
#if 0
# 264
{ 
# 265
int block = pos / ElementsPerBlock; 
# 266
int blockoffset = (useBlocks)[block]; 
# 267
return reinterpret_cast< TMyBlock *>((SharedStorage::get()->indexToBlock(blockoffset))); 
# 268
} 
#endif
# 273 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< class TMyBlock> void 
# 274
storageFinishRead(uint2 pos) 
# 275
{int volatile ___ = 1;(void)pos;
# 293
::exit(___);}
#if 0
# 275
{ 
# 276
int mypos = ((pos.x) + (__device_builtin_variable_threadIdx.x)) % TQueueSize; ; 
# 277
int prevblock = (mypos - 1) / ElementsPerBlock; 
# 278
int myblock = mypos / ElementsPerBlock; 
# 279
if (((__device_builtin_variable_threadIdx.x) < (pos.y)) && (((__device_builtin_variable_threadIdx.x) == (0)) || (myblock != prevblock))) 
# 280
{ 
# 281
int donelements = min((int)(((myblock + 1) * ElementsPerBlock) - mypos), (int)((pos.y) - (__device_builtin_variable_threadIdx.x))); 
# 282
int bid = (useBlocks)[myblock]; 
# 283
TMyBlock *b = reinterpret_cast< TMyBlock *>((SharedStorage::get()->indexToBlock(bid))); 
# 284
if ((b->doneuse(donelements))) 
# 285
{ 
# 286
((useBlocks)[myblock]) = (-1); 
# 290
(SharedStorage::get()->free(bid)); 
# 291
}  
# 292
}  
# 293
} 
#endif
# 299 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
public: static std::__cxx11::string name() 
# 300
{ 
# 301
return "SharedStorage"; 
# 302
} 
# 304
void init() 
# 305
{int volatile ___ = 1;
# 313
::exit(___);}
#if 0
# 305
{ 
# 306
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 307
for (int i = id; i < MaxBlocks; i += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) { 
# 308
((useBlocks)[i]) = (-1); }  
# 313
} 
#endif
# 315 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
}; 
# 318
template< uint TElementSize, class TAdditionalData, uint TQueueSize, class SharedStorage> 
# 319
class SegmentedQueueStorage : public SegmentedQueueStorageBase< TQueueSize, (SharedStorage::BlockSize - sizeof(unsigned)) / (sizeof(TAdditionalData) + (TElementSize)), SharedStorage>  { 
# 322
protected: typedef typename StorageElementTyping< TElementSize> ::Type QueueData_T; 
# 323
typedef typename StorageElementTyping< sizeof(TAdditionalData)> ::Type QueueAddtionalData_T; 
# 325
static const int ElementsPerBlock = ((SharedStorage::BlockSize - sizeof(::uint)) / (sizeof(TAdditionalData) + (TElementSize))); 
# 326
typedef ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage>  Base; 
# 327
typedef typename ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::MyBlock MyBlock; 
# 332
public: 
# 331
template< class T> ::uint 
# 332
prepareData(T data, TAdditionalData additionalData) 
# 333
{int volatile ___ = 1;(void)data;(void)additionalData;
# 335
::exit(___);}
#if 0
# 333
{ 
# 334
return 0; 
# 335
} 
#endif
# 337 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< int TThreadsPerElenent, class T> ::uint 
# 338
prepareDataParallel(T *data, TAdditionalData additionalData) 
# 339
{int volatile ___ = 1;(void)data;(void)additionalData;
# 341
::exit(___);}
#if 0
# 339
{ 
# 340
return 0; 
# 341
} 
#endif
# 344 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< class T> void 
# 345
writeData(T data, TAdditionalData additionalData, ::uint2 pos) 
# 346
{int volatile ___ = 1;(void)data;(void)additionalData;(void)pos;
# 354
::exit(___);}
#if 0
# 346
{ 
# 347
(pos.x) = ((pos.x) % TQueueSize); 
# 348
int localpos = (pos.x) % ElementsPerBlock; 
# 349
MyBlock *b = ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template acquireBlock< MyBlock, 32> (pos.x); 
# 350
(b->use()); 
# 352
((b->storage)[localpos]) = (*(reinterpret_cast< QueueData_T *>(&data))); 
# 353
((b->additionalStorage)[localpos]) = (*(reinterpret_cast< QueueAddtionalData_T *>(&additionalData))); 
# 354
} 
#endif
# 358 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< int TThreadsPerElenent, class T> void 
# 359
writeDataParallel(T *data, TAdditionalData additionalData, ::uint2 pos) 
# 360
{int volatile ___ = 1;(void)data;(void)additionalData;(void)pos;
# 370
::exit(___);}
#if 0
# 360
{ 
# 361
(pos.x) = ((pos.x) % TQueueSize); 
# 362
int localpos = (pos.x) % ElementsPerBlock; 
# 363
MyBlock *b = ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template acquireBlock< MyBlock, 32> (pos.x); 
# 364
if (((__device_builtin_variable_threadIdx.x) % (TThreadsPerElenent)) == (0)) { 
# 365
(b->use()); }  
# 367
multiWrite< TThreadsPerElenent, T> (reinterpret_cast< volatile T *>((b->storage) + localpos), data); 
# 368
multiWrite< TThreadsPerElenent, TAdditionalData> (reinterpret_cast< volatile TAdditionalData *>((b->additionalStorage) + localpos), &additionalData); 
# 370
} 
#endif
# 373 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void readData(void *data, TAdditionalData *additionalData, ::uint pos) 
# 374
{int volatile ___ = 1;(void)data;(void)additionalData;(void)pos;
# 380
::exit(___);}
#if 0
# 374
{ 
# 375
pos = (pos % TQueueSize); 
# 376
int localpos = pos % ElementsPerBlock; 
# 377
MyBlock *b = ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template getBlock< MyBlock> (pos); 
# 378
(*(reinterpret_cast< QueueData_T *>(data))) = ((b->storage)[localpos]); 
# 379
(*(reinterpret_cast< QueueAddtionalData_T *>(additionalData))) = ((b->additionalStorage)[localpos]); 
# 380
} 
#endif
# 383 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void *readDataPointers(TAdditionalData *additionalData, ::uint pos) 
# 384
{int volatile ___ = 1;(void)additionalData;(void)pos;
# 390
::exit(___);}
#if 0
# 384
{ 
# 385
pos = (pos % TQueueSize); 
# 386
int localpos = pos % ElementsPerBlock; 
# 387
MyBlock *b = ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template getBlock< MyBlock> (pos); 
# 388
(*(reinterpret_cast< QueueAddtionalData_T *>(additionalData))) = ((b->additionalStorage)[localpos]); 
# 389
return (void *)((b->storage) + localpos); 
# 390
} 
#endif
# 392 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void storageFinishRead(::uint2 pos) 
# 393
{int volatile ___ = 1;(void)pos;
# 395
::exit(___);}
#if 0
# 393
{ 
# 394
::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template storageFinishRead< MyBlock> (pos); 
# 395
} 
#endif
# 396 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
}; 
# 398
template< uint TElementSize, uint TQueueSize, class SharedStorage> 
# 399
class SegmentedQueueStorage< TElementSize, void, TQueueSize, SharedStorage>  : public SegmentedQueueStorageBase< TQueueSize, (SharedStorage::BlockSize - sizeof(unsigned)) / TElementSize, SharedStorage>  { 
# 402
protected: typedef typename StorageElementTyping< TElementSize> ::Type QueueData_T; 
# 404
static const int ElementsPerBlock = ((SharedStorage::BlockSize - sizeof(::uint)) / TElementSize); 
# 405
typedef ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage>  Base; 
# 406
typedef typename ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::MyBlock MyBlock; 
# 411
public: 
# 410
template< class T> ::uint 
# 411
prepareData(T data) 
# 412
{int volatile ___ = 1;(void)data;
# 414
::exit(___);}
#if 0
# 412
{ 
# 413
return 0; 
# 414
} 
#endif
# 416 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< int TThreadsPerElenent, class T> ::uint 
# 417
prepareDataParallel(T *data) 
# 418
{int volatile ___ = 1;(void)data;
# 420
::exit(___);}
#if 0
# 418
{ 
# 419
return 0; 
# 420
} 
#endif
# 423 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< class T> void 
# 424
writeData(T data, ::uint2 pos) 
# 425
{int volatile ___ = 1;(void)data;(void)pos;
# 436
::exit(___);}
#if 0
# 425
{ 
# 426
(pos.x) = ((pos.x) % TQueueSize); 
# 427
int localpos = (pos.x) % ElementsPerBlock; 
# 428
MyBlock *b = ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template acquireBlock< MyBlock, 32> (pos.x); 
# 429
(b->use()); 
# 433
store((b->storage)[localpos], *(reinterpret_cast< QueueData_T *>(&data))); 
# 436
} 
#endif
# 440 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
template< int TThreadsPerElenent, class T> void 
# 441
writeDataParallel(T *data, ::uint2 pos) 
# 442
{int volatile ___ = 1;(void)data;(void)pos;
# 450
::exit(___);}
#if 0
# 442
{ 
# 443
(pos.x) = ((pos.x) % TQueueSize); 
# 444
int localpos = (pos.x) % ElementsPerBlock; 
# 445
MyBlock *b = ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template acquireBlock< MyBlock, 32> (pos.x); 
# 446
if (((__device_builtin_variable_threadIdx.x) % (TThreadsPerElenent)) == (0)) { 
# 447
(b->use()); }  
# 449
multiWrite< TThreadsPerElenent, T> (reinterpret_cast< volatile T *>((b->storage) + localpos), data); 
# 450
} 
#endif
# 453 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void readData(void *data, ::uint pos) 
# 454
{int volatile ___ = 1;(void)data;(void)pos;
# 460
::exit(___);}
#if 0
# 454
{ 
# 455
pos = (pos % TQueueSize); 
# 456
int localpos = pos % ElementsPerBlock; 
# 457
MyBlock *b = ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template getBlock< MyBlock> (pos); 
# 458
load(*(reinterpret_cast< QueueData_T *>(data)), (b->storage)[localpos]); 
# 460
} 
#endif
# 463 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void *readDataPointers(::uint pos) 
# 464
{int volatile ___ = 1;(void)pos;
# 469
::exit(___);}
#if 0
# 464
{ 
# 465
pos = (pos % TQueueSize); 
# 466
int localpos = pos % ElementsPerBlock; 
# 467
MyBlock *b = ::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template getBlock< MyBlock> (pos); 
# 468
return (void *)((b->storage) + localpos); 
# 469
} 
#endif
# 471 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
void storageFinishRead(::uint2 pos) 
# 472
{int volatile ___ = 1;(void)pos;
# 474
::exit(___);}
#if 0
# 472
{ 
# 473
::SegmentedStorage::SegmentedQueueStorageBase< TQueueSize, ElementsPerBlock, SharedStorage> ::template storageFinishRead< MyBlock> (pos); 
# 474
} 
#endif
# 475 "/home/zhengzhen/workspace/versapipe/segmentedStorage.cuh"
}; 
# 476
}
# 72 "/home/zhengzhen/workspace/versapipe/tools/bitonicSort.cuh"
namespace Tools { 
# 75
namespace Sort { 
# 77
template< class Key, class Value> __attribute__((unused)) inline void 
# 78
bitonic_comp(volatile Key &key_a, volatile Key &key_b, volatile Value &
# 79
val_a, volatile Value &val_b, bool 
# 80
dir) 
# 81
{int volatile ___ = 1;(void)key_a;(void)key_b;(void)val_a;(void)val_b;(void)dir;
# 93
::exit(___);}
#if 0
# 81
{ 
# 82
if ((key_a != key_b) && ((key_a > key_b) == dir)) 
# 83
{ 
# 85
Key kT = key_a; 
# 86
key_a = key_b; 
# 87
key_b = kT; 
# 89
Value vT = val_a; 
# 90
val_a = val_b; 
# 91
val_b = vT; 
# 92
}  
# 93
} 
#endif
# 96 "/home/zhengzhen/workspace/versapipe/tools/bitonicSort.cuh"
template< class Key, class Value, bool Dir> __attribute__((unused)) void 
# 97
bitonic(volatile Key *keys, volatile Value *values, uint linId, uint elements) 
# 98
{int volatile ___ = 1;(void)keys;(void)values;(void)linId;(void)elements;
# 126
::exit(___);}
#if 0
# 98
{ 
# 99
if (linId < (elements / (2))) 
# 100
{ 
# 101
for (uint size = (2); size < elements; size <<= 1) 
# 102
{ 
# 104
bool d = (Dir) ^ ((linId & (size / (2))) != (0)); 
# 105
for (uint stride = size / (2); stride > (0); stride >>= 1) 
# 106
{ 
# 107
syncthreads(1, elements / (2)); 
# 108
uint pos = ((2) * linId) - (linId & (stride - (1))); 
# 109
bitonic_comp(keys[pos], keys[pos + stride], values[pos], values[pos + stride], d); 
# 112
}  
# 113
}  
# 116
for (uint stride = elements / (2); stride > (0); stride >>= 1) 
# 117
{ 
# 118
syncthreads(1, elements / (2)); 
# 119
uint pos = ((2) * linId) - (linId & (stride - (1))); 
# 120
bitonic_comp(keys[pos], keys[pos + stride], values[pos], values[pos + stride], Dir); 
# 123
}  
# 124
}  
# 125
syncthreads(1, elements / (2)); 
# 126
} 
#endif
# 127 "/home/zhengzhen/workspace/versapipe/tools/bitonicSort.cuh"
}
# 128
}
# 40 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
__attribute__((unused)) inline int atomicAddMod(uint *addr, uint val, uint mod) 
# 41
{int volatile ___ = 1;(void)addr;(void)val;(void)mod;
# 51
::exit(___);}
#if 0
# 41
{ 
# 42
uint old = *addr, assumed; 
# 43
do 
# 44
{ 
# 45
assumed = old; 
# 46
old = atomicCAS(addr, assumed, (assumed + val) % mod); 
# 47
} 
# 48
while (assumed != old); 
# 50
return old; 
# 51
} 
#endif
# 53 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
template< uint TQueueSize, bool TWarpOptimization = true, bool TAssertOnOverflow = true, bool TWithFence = false> 
# 54
class QueueDistLocksStub { 
# 57
protected: static const uint QueueSize = TQueueSize; 
# 59
uint front, back; 
# 60
volatile int count; 
# 61
volatile uint locks[QueueSize]; 
# 63
int dummy0[4]; 
# 65
volatile uint sortingFence; 
# 66
volatile uint hitSortingFence; 
# 67
uint sortingMinBorder; 
# 68
uint lastSortEnd; 
# 70
int dummy1[4]; 
# 73
static std::__cxx11::string name() 
# 74
{ 
# 75
return TWarpOptimization ? "DistLocksWarpoptimized" : ("DistLocks"); 
# 76
} 
# 79
void init() 
# 80
{int volatile ___ = 1;
# 90
::exit(___);}
#if 0
# 80
{ 
# 81
uint lid = (__device_builtin_variable_threadIdx.x) + ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)); 
# 82
if (lid == (0)) 
# 83
{ 
# 84
(((front) = (0)), ((back) = (0))), ((count) = 0); 
# 85
if (TWithFence) { 
# 86
((((sortingFence) = QueueSize), ((hitSortingFence) = (0))), ((sortingMinBorder) = (32))), ((lastSortEnd) = (0)); }  
# 87
}  
# 88
for (uint i = lid; i < QueueSize; i += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) { 
# 89
((locks)[i]) = 0; }  
# 90
} 
#endif
# 95 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
template< int TthreadsPerElement> int2 
# 96
enqueuePrep(int2 last) 
# 97
{int volatile ___ = 1;(void)last;
# 196
::exit(___);}
#if 0
# 97
{ 
# 98
if (TWarpOptimization) 
# 99
{ 
# 101
uint mask = __ballot(1); 
# 102
uint ourcount = __popc(mask) / TthreadsPerElement; 
# 103
int mypos = __popc(Tools::lanemask_lt() & mask); 
# 105
int wpos = (-1); 
# 107
if (mypos == 0) 
# 108
{ 
# 109
int c = atomicAdd(const_cast< int *>(&(count)), ourcount); 
# 110
if ((c + (static_cast< int>(ourcount))) < (static_cast< int>(QueueSize))) { 
# 111
wpos = atomicAddMod(&(back), ourcount, QueueSize); } else 
# 114
{ 
# 115
if (TAssertOnOverflow) 
# 116
{ 
# 117
printf("ERROR queue out of elements %d\n", c); 
# 120
}  
# 121
atomicSub(const_cast< int *>(&(count)), ourcount); 
# 122
}  
# 123
}  
# 126
int src = __ffs(mask) - 1; 
# 128
wpos = warpBroadcast< 32> (wpos, src); 
# 130
if (wpos == (-1)) { 
# 131
return make_int2(-1, 0); }  
# 132
uint pos = (wpos + (mypos / TthreadsPerElement)) % QueueSize; 
# 133
while (((locks)[pos]) != 0) { 
# 134
__threadfence(); }  
# 135
return make_int2(pos, ourcount); 
# 136
} else 
# 138
{ 
# 139
if (TthreadsPerElement == 1) 
# 140
{ 
# 141
int c = atomicAdd(const_cast< int *>(&(count)), 1); 
# 142
if ((c + 1) < (static_cast< int>(QueueSize))) 
# 143
{ 
# 144
uint pos = atomicAddMod(&(back), 1, QueueSize); ; 
# 146
while (((locks)[pos]) != 0) { 
# 147
__threadfence(); }  
# 148
return make_int2(pos, 1); 
# 149
} else 
# 151
{ 
# 152
if (TAssertOnOverflow) 
# 153
{ 
# 154
printf("ERROR queue out of elements\n"); 
# 157
}  
# 158
atomicSub(const_cast< int *>(&(count)), 1); 
# 159
return make_int2(-1, 0); 
# 160
}  
# 161
} else 
# 163
{ 
# 164
int pos; 
# 165
if ((Tools::laneid() % (TthreadsPerElement)) == (0)) 
# 166
{ 
# 167
int c = atomicAdd(const_cast< int *>(&(count)), 1); 
# 168
if ((c + 1) < (static_cast< int>(QueueSize))) 
# 169
{ 
# 170
pos = atomicAddMod(&(back), 1, QueueSize); 
# 172
while (((locks)[pos]) != 0) { 
# 173
__threadfence(); }  
# 174
} else 
# 176
{ 
# 177
if (TAssertOnOverflow) 
# 178
{ 
# 179
printf("ERROR queue out of elements\n"); 
# 182
}  
# 183
atomicSub(const_cast< int *>(&(count)), 1); 
# 184
pos = (-1); 
# 185
}  
# 186
}  
# 189
pos = warpBroadcast< TthreadsPerElement> (pos, 0); 
# 190
if (pos != (-1)) { 
# 191
return make_int2(pos, 1); } else { 
# 193
return make_int2(pos, 0); }  
# 194
}  
# 195
}  
# 196
} 
#endif
# 199 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
template< int TthreadsPerElement> void 
# 200
enqueueEnd(int2 pos_ourcount) 
# 201
{int volatile ___ = 1;(void)pos_ourcount;
# 206
::exit(___);}
#if 0
# 201
{ 
# 202
if (TthreadsPerElement == 1) { 
# 203
((locks)[pos_ourcount.x]) = 1; } else { 
# 204
if ((Tools::laneid() % (TthreadsPerElement)) == (0)) { 
# 205
((locks)[pos_ourcount.x]) = 1; }  }  
# 206
} 
#endif
# 209 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
uint2 dequeuePrep(int num) 
# 210
{int volatile ___ = 1;(void)num;
# 248
::exit(___);}
#if 0
# 210
{ 
# 211
__attribute__((unused)) uint2 offset_take; 
# 212
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 213
{ 
# 214
int c = atomicSub(const_cast< int *>(&(count)), num); 
# 215
if (c < num) 
# 216
{ 
# 217
atomicAdd(const_cast< int *>(&(count)), min(num, num - c)); 
# 218
num = max(c, 0); 
# 219
}  
# 220
(offset_take.y) = num; 
# 221
if (num > 0) { 
# 222
(offset_take.x) = atomicAdd(&(front), num); }  
# 225
}  
# 226
__syncthreads(); 
# 227
if ((__device_builtin_variable_threadIdx.x) < (offset_take.y)) 
# 228
{ 
# 229
uint p = ((offset_take.x) + (__device_builtin_variable_threadIdx.x)) % QueueSize; 
# 230
while (((locks)[p]) != 1) { 
# 231
__threadfence(); }  
# 233
if (TWithFence) 
# 234
{ 
# 235
uint currentfence; 
# 236
while ((currentfence = (sortingFence)) != QueueSize) 
# 237
{ 
# 238
if (currentfence > p) { break; }  
# 239
if ((currentfence < (back)) && ((back) < p)) { break; }  
# 241
(hitSortingFence) = (true); 
# 242
__threadfence(); 
# 243
}  
# 244
}  
# 245
}  
# 247
return offset_take; 
# 248
} 
#endif
# 251 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
void dequeueEnd(uint2 offset_take) 
# 252
{int volatile ___ = 1;(void)offset_take;
# 258
::exit(___);}
#if 0
# 252
{ 
# 253
if ((__device_builtin_variable_threadIdx.x) < (offset_take.y)) 
# 254
{ 
# 255
((locks)[((offset_take.x) + (__device_builtin_variable_threadIdx.x)) % QueueSize]) = 0; 
# 257
}  
# 258
} 
#endif
# 261 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 262
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 292
::exit(___);}
#if 0
# 262
{ 
# 270
__attribute__((unused)) int num; 
# 271
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 272
{ 
# 273
int c = atomicSub(const_cast< int *>(&(count)), maxnum); 
# 274
if (c < maxnum) 
# 275
{ 
# 276
if (only_read_all) 
# 277
{ 
# 278
atomicAdd(const_cast< int *>(&(count)), maxnum); 
# 279
num = 0; 
# 280
} else 
# 282
{ 
# 283
atomicAdd(const_cast< int *>(&(count)), min(maxnum, maxnum - c)); 
# 284
num = max(c, 0); 
# 285
}  
# 286
} else { 
# 288
num = maxnum; }  
# 289
}  
# 290
__syncthreads(); 
# 291
return num; 
# 292
} 
#endif
# 295 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int startRead(int num) 
# 296
{int volatile ___ = 1;(void)num;
# 324
::exit(___);}
#if 0
# 296
{ 
# 297
__attribute__((unused)) int offset; 
# 298
if (num <= 0) { 
# 299
return 0; }  
# 300
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 301
offset = (atomicAdd(&(front), num)); }  
# 302
__syncthreads(); 
# 303
if ((__device_builtin_variable_threadIdx.x) < num) 
# 304
{ 
# 305
int pos = (offset + (__device_builtin_variable_threadIdx.x)) % QueueSize; 
# 306
while (((locks)[pos]) != 1) { 
# 307
__threadfence(); }  
# 310
if (TWithFence) 
# 311
{ 
# 312
uint currentfence; 
# 313
while ((currentfence = (sortingFence)) != QueueSize) 
# 314
{ 
# 315
if (currentfence > pos) { break; }  
# 316
if ((currentfence < (back)) && ((back) < pos)) { break; }  
# 318
(hitSortingFence) = (true); 
# 319
__threadfence(); 
# 320
}  
# 321
}  
# 322
}  
# 323
return offset; 
# 324
} 
#endif
# 327 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
void finishRead(int id, int num) 
# 328
{int volatile ___ = 1;(void)id;(void)num;
# 331
::exit(___);}
#if 0
# 328
{ 
# 329
if ((__device_builtin_variable_threadIdx.x) < num) { 
# 330
((locks)[(id + (__device_builtin_variable_threadIdx.x)) % QueueSize]) = 0; }  
# 331
} 
#endif
# 335 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
public: void printName() 
# 336
{int volatile ___ = 1;
# 338
::exit(___);}
#if 0
# 336
{ 
# 337
printf("%s\n", __PRETTY_FUNCTION__); 
# 338
} 
#endif
# 340 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int size() const 
# 341
{int volatile ___ = 1;
# 344
::exit(___);}
#if 0
# 341
{ 
# 343
return count; 
# 344
} 
#endif
# 346 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int capacity() const 
# 347
{int volatile ___ = 1;
# 350
::exit(___);}
#if 0
# 347
{ 
# 349
return static_cast< int>(QueueSize); 
# 350
} 
#endif
# 351 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
}; 
# 355
template< uint TElementSize, uint TQueueSize, class TAdditionalData = void, bool TWarpOptimization = true, bool TAssertOnOverflow = true> 
# 356
class QueueDistUnequalLocks : public QueueBuilder< TElementSize, TQueueSize, TAdditionalData, QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> , AllocStorage< TElementSize, TAdditionalData, TQueueSize> >  { 
# 359
void printName() 
# 360
{int volatile ___ = 1;
# 362
::exit(___);}
#if 0
# 360
{ 
# 361
printf("%s\n", __PRETTY_FUNCTION__); 
# 362
} 
#endif
# 363 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
}; 
# 365
template< uint TElementSize, uint TQueueSize, bool TWarpOptimization, bool TAssertOnOverflow> 
# 366
class QueueDistUnequalLocks< TElementSize, TQueueSize, void, TWarpOptimization, TAssertOnOverflow>  : public QueueBuilder< TElementSize, TQueueSize, void, QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> , AllocStorage< TElementSize, void, TQueueSize> >  { 
# 369
void printName() 
# 370
{int volatile ___ = 1;
# 372
::exit(___);}
#if 0
# 370
{ 
# 371
printf("%s\n", __PRETTY_FUNCTION__); 
# 372
} 
#endif
# 373 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
}; 
# 376
template< uint TElementSize, uint TQueueSize, class TAdditionalData = void, bool TWarpOptimization = true, bool TAssertOnOverflow = true> 
# 377
class QueueDistLocks : public QueueBuilder< TElementSize, TQueueSize, TAdditionalData, QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> , QueueStorage< TElementSize, TAdditionalData, TQueueSize> >  { 
# 381
public: void printName() 
# 382
{int volatile ___ = 1;
# 384
::exit(___);}
#if 0
# 382
{ 
# 383
printf("%s\n", __PRETTY_FUNCTION__); 
# 384
} 
#endif
# 385 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 386
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 389
::exit(___);}
#if 0
# 386
{ 
# 387
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh", 387); 
# 388
return QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::reserveRead(maxnum, only_read_all); 
# 389
} 
#endif
# 390 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int startRead(void *&data, TAdditionalData *addtionalData, int pos, int num) 
# 391
{int volatile ___ = 1;(void)data;(void)addtionalData;(void)pos;(void)num;
# 396
::exit(___);}
#if 0
# 391
{ 
# 392
int offset = QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::startRead(num); 
# 393
if (pos < num) { 
# 394
data = QueueStorage< TElementSize, TAdditionalData, TQueueSize> ::readDataPointers(addtionalData + pos, offset + pos); }  
# 395
return offset; 
# 396
} 
#endif
# 397 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
void finishRead(int id, int num) 
# 398
{int volatile ___ = 1;(void)id;(void)num;
# 401
::exit(___);}
#if 0
# 398
{ 
# 399
QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::finishRead(id, num); 
# 400
QueueStorage< TElementSize, TAdditionalData, TQueueSize> ::storageFinishRead(make_uint2(id, num)); 
# 401
} 
#endif
# 402 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
}; 
# 404
template< uint TElementSize, uint TQueueSize, bool TWarpOptimization, bool TAssertOnOverflow> 
# 405
class QueueDistLocks< TElementSize, TQueueSize, void, TWarpOptimization, TAssertOnOverflow>  : public QueueBuilder< TElementSize, TQueueSize, void, QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> , QueueStorage< TElementSize, void, TQueueSize> >  { 
# 409
public: void printName() 
# 410
{int volatile ___ = 1;
# 412
::exit(___);}
#if 0
# 410
{ 
# 411
printf("%s\n", __PRETTY_FUNCTION__); 
# 412
} 
#endif
# 413 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 414
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 418
::exit(___);}
#if 0
# 414
{ 
# 417
return QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::reserveRead(maxnum, only_read_all); 
# 418
} 
#endif
# 419 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int startRead(void *&data, int pos, int num) 
# 420
{int volatile ___ = 1;(void)data;(void)pos;(void)num;
# 425
::exit(___);}
#if 0
# 420
{ 
# 421
int offset = QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::startRead(num); 
# 422
if (pos < num) { 
# 423
data = QueueStorage< TElementSize, void, TQueueSize> ::readDataPointers(offset + pos); }  
# 424
return offset; 
# 425
} 
#endif
# 426 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
void finishRead(int id, int num) 
# 427
{int volatile ___ = 1;(void)id;(void)num;
# 430
::exit(___);}
#if 0
# 427
{ 
# 428
QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::finishRead(id, num); 
# 429
QueueStorage< TElementSize, void, TQueueSize> ::storageFinishRead(make_uint2(id, num)); 
# 430
} 
#endif
# 431 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
}; 
# 435
template< uint TElementSize, uint TQueueSize, class TAdditionalData, class ExternalStorage, bool TWarpOptimization = true, bool TAssertOnOverflow = true> 
# 436
class QueueDistLocksExternal : public QueueBuilder< TElementSize, TQueueSize, TAdditionalData, QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> , SegmentedStorage::SegmentedQueueStorage< TElementSize, TAdditionalData, TQueueSize, ExternalStorage> >  { 
# 440
public: void printName() 
# 441
{int volatile ___ = 1;
# 443
::exit(___);}
#if 0
# 441
{ 
# 442
printf("%s\n", __PRETTY_FUNCTION__); 
# 443
} 
#endif
# 444 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 445
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 448
::exit(___);}
#if 0
# 445
{ 
# 446
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh", 446); 
# 447
return QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::reserveRead(maxnum, only_read_all); 
# 448
} 
#endif
# 449 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int startRead(void *&data, TAdditionalData *addtionalData, int pos, int num) 
# 450
{int volatile ___ = 1;(void)data;(void)addtionalData;(void)pos;(void)num;
# 455
::exit(___);}
#if 0
# 450
{ 
# 451
int offset = QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::startRead(num); 
# 452
if (pos < num) { 
# 453
data = SegmentedStorage::SegmentedQueueStorage< TElementSize, TAdditionalData, TQueueSize, ExternalStorage> ::readDataPointers(addtionalData + pos, offset + pos); }  
# 454
return offset; 
# 455
} 
#endif
# 456 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
void finishRead(int id, int num) 
# 457
{int volatile ___ = 1;(void)id;(void)num;
# 460
::exit(___);}
#if 0
# 457
{ 
# 458
QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::finishRead(id, num); 
# 459
SegmentedStorage::SegmentedQueueStorage< TElementSize, TAdditionalData, TQueueSize, ExternalStorage> ::storageFinishRead(make_uint2(id, num)); 
# 460
} 
#endif
# 461 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
}; 
# 463
template< uint TElementSize, uint TQueueSize, class ExternalStorage, bool TWarpOptimization, bool TAssertOnOverflow> 
# 464
class QueueDistLocksExternal< TElementSize, TQueueSize, void, ExternalStorage, TWarpOptimization, TAssertOnOverflow>  : public QueueBuilder< TElementSize, TQueueSize, void, QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> , SegmentedStorage::SegmentedQueueStorage< TElementSize, void, TQueueSize, ExternalStorage> >  { 
# 468
public: void printName() 
# 469
{int volatile ___ = 1;
# 471
::exit(___);}
#if 0
# 469
{ 
# 470
printf("%s\n", __PRETTY_FUNCTION__); 
# 471
} 
#endif
# 472 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 473
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 476
::exit(___);}
#if 0
# 473
{ 
# 474
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh", 474); 
# 475
return QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::reserveRead(maxnum, only_read_all); 
# 476
} 
#endif
# 477 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int startRead(void *&data, int pos, int num) 
# 478
{int volatile ___ = 1;(void)data;(void)pos;(void)num;
# 483
::exit(___);}
#if 0
# 478
{ 
# 479
int offset = QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::startRead(num); 
# 480
if (pos < num) { 
# 481
data = SegmentedStorage::SegmentedQueueStorage< TElementSize, void, TQueueSize, ExternalStorage> ::readDataPointers(offset + pos); }  
# 482
return offset; 
# 483
} 
#endif
# 484 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
void finishRead(int id, int num) 
# 485
{int volatile ___ = 1;(void)id;(void)num;
# 488
::exit(___);}
#if 0
# 485
{ 
# 486
QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow> ::finishRead(id, num); 
# 487
SegmentedStorage::SegmentedQueueStorage< TElementSize, void, TQueueSize, ExternalStorage> ::storageFinishRead(make_uint2(id, num)); 
# 488
} 
#endif
# 489 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
}; 
# 494
template< uint TElementSize, uint TQueueSize, class TAdditionalData = void, bool TWarpOptimization = true, bool TAssertOnOverflow = true> 
# 495
class QueueDistLocksSortable : public QueueBuilder< TElementSize, TQueueSize, TAdditionalData, QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow, true> , QueueStorage< TElementSize, TAdditionalData, TQueueSize> >  { 
# 497
typedef ::QueueBuilder< TElementSize, TQueueSize, TAdditionalData, QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow, true> , QueueStorage< TElementSize, TAdditionalData, TQueueSize> >  Base; 
# 498
typedef QueueDistLocksStub< TQueueSize, TWarpOptimization, TAssertOnOverflow, true>  Stub; 
# 499
typedef QueueStorage< TElementSize, TAdditionalData, TQueueSize>  Storage; 
# 502
typedef typename StorageElementTyping< TElementSize> ::Type QueueData_t; 
# 505
public: void printName() 
# 506
{int volatile ___ = 1;
# 508
::exit(___);}
#if 0
# 506
{ 
# 507
printf("%s\n", __PRETTY_FUNCTION__); 
# 508
} 
#endif
# 510 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 511
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 514
::exit(___);}
#if 0
# 511
{ 
# 512
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh", 512); 
# 513
return Stub::reserveRead(maxnum, only_read_all); 
# 514
} 
#endif
# 515 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
int startRead(void *&data, TAdditionalData *addtionalData, int pos, int num) 
# 516
{int volatile ___ = 1;(void)data;(void)addtionalData;(void)pos;(void)num;
# 521
::exit(___);}
#if 0
# 516
{ 
# 517
int offset = Stub::startRead(num); 
# 518
if (pos < num) { 
# 519
data = Stub::readDataPointers(addtionalData + pos, offset + pos); }  
# 520
return offset; 
# 521
} 
#endif
# 522 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
void finishRead(int id, int num) 
# 523
{int volatile ___ = 1;(void)id;(void)num;
# 526
::exit(___);}
#if 0
# 523
{ 
# 524
Stub::finishRead(id, num); 
# 525
Storage::storageFinishRead(make_uint2(id, num)); 
# 526
} 
#endif
# 530 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
template< class SortInfo> bool 
# 531
sort(unsigned threads) 
# 532
{int volatile ___ = 1;(void)threads;
# 711
::exit(___);}
#if 0
# 532
{ 
# 533
__attribute__((unused)) int sortStart; 
# 534
__attribute__((unused)) extern ::uint s_data[]; 
# 536
::uint num = (2) * threads; 
# 537
::uint linId = __device_builtin_variable_threadIdx.x; 
# 539
int cFront = 0; 
# 540
if (linId == (0)) 
# 541
{ 
# 542
cFront = (*((volatile ::uint *)(&Stub::front))); 
# 543
int cBack = (*((volatile ::uint *)(&Stub::back))) % Stub::QueueSize; 
# 545
int thisSortEnd = (Stub::lastSortEnd); 
# 547
if (cFront > cBack) 
# 548
{ 
# 549
cBack += Stub::QueueSize; 
# 550
if (cBack > thisSortEnd) { 
# 551
thisSortEnd += Stub::QueueSize; }  
# 552
}  
# 555
if ((thisSortEnd == Stub::QueueSize) || (thisSortEnd < cFront)) { 
# 556
thisSortEnd = (cBack - ((int)num)); } else { 
# 558
thisSortEnd = (Stub::lastSortEnd - (num / (2))); }  
# 561
int maxfill = thisSortEnd - ((int)Stub::sortingMinBorder); 
# 562
if ((maxfill < cFront) || (Stub::count < ((int)((256 + Stub::sortingMinBorder) + num)))) 
# 563
{ 
# 564
Stub::lastSortEnd = Stub::QueueSize; 
# 565
sortStart = (-1); 
# 566
} else 
# 568
{ 
# 569
sortStart = thisSortEnd; 
# 570
}  
# 580
}  
# 583
Tools::syncthreads(1, threads); 
# 584
if (sortStart < 0) { return false; }  
# 591
for (::uint i = linId; i < num; i += threads) 
# 592
{ 
# 593
::uint elementId = (sortStart + i) % Stub::QueueSize; 
# 594
while ((Stub::locks[elementId]) == 0) { 
# 595
__threadfence(); }  
# 597
int addInfo; 
# 598
void *data = Storage::readDataPointers(&addInfo, elementId); 
# 600
((s_data)[i]) = elementId; 
# 601
((s_data)[i + ((2) * threads)]) = SortInfo::eval(addInfo, data); 
# 602
}  
# 604
__threadfence(); 
# 605
Tools::syncthreads(1, threads); 
# 612
if (linId == (0)) 
# 613
{ 
# 614
Stub::hitSortingFence = false; 
# 615
Stub::sortingFence = (sortStart % Stub::QueueSize); 
# 616
__threadfence(); 
# 617
int nFront = (*((volatile ::uint *)(&Stub::front))); 
# 618
if (nFront < cFront) { nFront += Stub::QueueSize; }  
# 620
int maxfill = sortStart - (((int)Stub::sortingMinBorder) / 2); 
# 621
if (maxfill < nFront) 
# 622
{ 
# 624
Stub::sortingFence = Stub::QueueSize; 
# 625
Stub::lastSortEnd = Stub::QueueSize; 
# 626
sortStart = (-1); 
# 627
} else { 
# 629
Stub::lastSortEnd = sortStart; }  
# 639
}  
# 646
Tools::syncthreads(1, threads); 
# 647
if (sortStart < 0) { return false; }  
# 654
if (linId < (num / (2))) { 
# 655
Tools::Sort::bitonic< unsigned, unsigned, false> ((s_data) + ((2) * threads), s_data, linId, num); }  
# 656
Tools::syncthreads(2, threads); 
# 665
TAdditionalData addOne, addTwo; 
# 666
QueueData_t dataOne, dataTwo; 
# 668
Storage::readData((void *)(&dataOne), &addOne, (s_data)[linId]); 
# 669
Storage::readData((void *)(&dataTwo), &addTwo, (s_data)[linId + threads]); 
# 670
Tools::syncthreads(1, threads); 
# 671
QueueStorage< TElementSize, TAdditionalData, TQueueSize> ::template writeData< QueueData_t> (dataOne, addOne, make_uint2((sortStart + linId) % Stub::QueueSize, 0)); 
# 672
QueueStorage< TElementSize, TAdditionalData, TQueueSize> ::template writeData< QueueData_t> (dataTwo, addTwo, make_uint2(((sortStart + linId) + threads) % Stub::QueueSize, 0)); 
# 687
__threadfence(); 
# 688
Tools::syncthreads(1, threads); 
# 696
if (linId == (0)) 
# 697
{ 
# 698
Stub::sortingFence = Stub::QueueSize; 
# 703
if (Stub::hitSortingFence) 
# 704
{ 
# 706
Stub::sortingMinBorder += 64; 
# 707
Stub::hitSortingFence = false; 
# 708
}  
# 709
}  
# 710
return true; 
# 711
} 
#endif
# 712 "/home/zhengzhen/workspace/versapipe/queueDistLocks.cuh"
}; 
# 714
template< uint TElementSize, uint TQueueSize, class TAdditionalData> class QueueDistLocks_t : public QueueDistLocks< TElementSize, TQueueSize, TAdditionalData, false, true>  { }; 
# 715
template< uint TElementSize, uint TQueueSize, class TAdditionalData> class QueueDistLocksOpt_t : public QueueDistLocks< TElementSize, TQueueSize, TAdditionalData, true, true>  { }; 
# 716
template< uint TElementSize, uint TQueueSize, class TAdditionalData> class QueueDistLocksNoOverflow_t : public QueueDistLocks< TElementSize, TQueueSize, TAdditionalData, false, false>  { }; 
# 717
template< uint TElementSize, uint TQueueSize, class TAdditionalData> class QueueDistLocksNoOverflowOpt_t : public QueueDistLocks< TElementSize, TQueueSize, TAdditionalData, true, false>  { }; 
# 718
template< uint TElementSize, uint TQueueSize, class TAdditionalData> class QueueDistLocksSortable_t : public QueueDistLocksSortable< TElementSize, TQueueSize, TAdditionalData, false, true>  { }; 
# 719
template< uint TElementSize, uint TQueueSize, class TAdditionalData> class QueueDistLocksSortableOpt_t : public QueueDistLocksSortable< TElementSize, TQueueSize, TAdditionalData, true, true>  { }; 
# 42 "/home/zhengzhen/workspace/versapipe/procedureInterface.cuh"
struct ProcedureDescription { 
# 44
int ProcedureId; 
# 45
int NumThreads; 
# 46
bool ItemInput; 
# 47
int sharedMemory; 
# 48
bool InitialProcedure; 
# 49
int inputSize; 
# 50
std::__cxx11::string name; 
# 51
std::__cxx11::string algorithmname; 
# 53
template< class PROCEDURE, int proc_id> static ProcedureDescription 
# 54
generate() 
# 55
{ 
# 56
ProcedureDescription d; 
# 57
(d.ProcedureId) = proc_id; 
# 58
(d.NumThreads) = ((PROCEDURE::NumThreads > 0) ? PROCEDURE::NumThreads : ((PROCEDURE::ItemInput) ? 1 : 0)); 
# 59
(d.ItemInput) = PROCEDURE::ItemInput; 
# 60
(d.sharedMemory) = PROCEDURE::sharedMemory; 
# 61
(d.InitialProcedure) = PROCEDURE::InitialProcedure; 
# 62
(d.inputSize) = (sizeof(typename PROCEDURE::ExpectedData)); 
# 63
(d.name) = PROCEDURE::name(); 
# 64
(d.algorithmname) = PROCEDURE::algorithmname(); 
# 65
return d; 
# 66
} 
# 67
}; 
# 69
class Procedure { 
# 73
public: static const int NumThreads = 0; 
# 74
static const bool ItemInput = false; 
# 75
static const int sharedMemory = 0; 
# 76
static const bool InitialProcedure = false; 
# 77
typedef int ExpectedData; 
# 79
static const char *name() { return "Unnamed_"; } 
# 80
static std::__cxx11::string algorithmname() { return ((std::__cxx11::string)("UnknownAlgorithm")); } 
# 83
template< class Q, class Sync> static void 
# 84
execute(int threadId, int numThreads, Q *queue, ExpectedData *data, unsigned *shared) {int volatile ___ = 1;(void)threadId;(void)numThreads;(void)queue;(void)data;(void)shared;::exit(___);}
#if 0
# 84
{ } 
#endif
# 85 "/home/zhengzhen/workspace/versapipe/procedureInterface.cuh"
}; 
# 87
class NoProcedure : public Procedure { 
# 91
public: static const int myid = (-1); 
# 93
static const char *name() { return "NoProcedure"; } 
# 95
template< class Q, class Sync> static void 
# 96
execute(int threadId, int numThreads, Q *queue, ExpectedData *data, unsigned *shared) 
# 97
{int volatile ___ = 1;(void)threadId;(void)numThreads;(void)queue;(void)data;(void)shared;
# 99
::exit(___);}
#if 0
# 97
{ 
# 98
printf("ERROR: NoProcedure executed\n"); 
# 99
} 
#endif
# 100 "/home/zhengzhen/workspace/versapipe/procedureInterface.cuh"
}; 
# 103
template< class PROCEDURE> __attribute__((unused)) inline int 
# 104
getThreadCount() 
# 105
{int volatile ___ = 1;
# 107
::exit(___);}
#if 0
# 105
{ 
# 106
return (PROCEDURE::NumThreads > 0) ? PROCEDURE::NumThreads : ((PROCEDURE::ItemInput) ? 1 : (__device_builtin_variable_blockDim.x)); 
# 107
} 
#endif
# 110 "/home/zhengzhen/workspace/versapipe/procedureInterface.cuh"
template< class PROCEDURE, bool MultiElement> __attribute__((unused)) inline int 
# 111
getElementCount() 
# 112
{int volatile ___ = 1;
# 116
::exit(___);}
#if 0
# 112
{ 
# 113
if ((!MultiElement) && (!PROCEDURE::ItemInput)) { 
# 114
return 1; }  
# 115
return (PROCEDURE::NumThreads > 0) ? (__device_builtin_variable_blockDim.x) / PROCEDURE::NumThreads : ((PROCEDURE::ItemInput) ? __device_builtin_variable_blockDim.x : (1)); 
# 116
} 
#endif
# 119 "/home/zhengzhen/workspace/versapipe/procedureInterface.cuh"
template< class PROCEDURE, bool MultiElement> __attribute__((unused)) inline int 
# 120
getThreadOffset() 
# 121
{int volatile ___ = 1;
# 125
::exit(___);}
#if 0
# 121
{ 
# 122
if ((!MultiElement) && (!PROCEDURE::ItemInput)) { 
# 123
return 0; }  
# 124
return (PROCEDURE::NumThreads > 0) ? (__device_builtin_variable_threadIdx.x) / PROCEDURE::NumThreads : ((PROCEDURE::ItemInput) ? __device_builtin_variable_threadIdx.x : (0)); 
# 125
} 
#endif
# 44 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< int ProcThreads, bool Warp, bool MultiElement> class GroupOpsSelect; 
# 48
template< bool MultiElement> 
# 49
class GroupOpsSelect< 1, true, MultiElement>  { }; 
# 53
template< int ProcThreads, bool MultiElement> 
# 54
class GroupOpsSelect< ProcThreads, true, MultiElement>  { 
# 56
static const int MaxWarps = 32; 
# 57
static const unsigned Mask = ((1U << ProcThreads) - (1)); 
# 61
public: static bool any(int arg) 
# 62
{int volatile ___ = 1;(void)arg;
# 65
::exit(___);}
#if 0
# 62
{ 
# 63
unsigned ballotres = __ballot(arg); 
# 64
return ((ballotres << (Tools::laneid() / (ProcThreads))) & Mask) != 0U; 
# 65
} 
#endif
# 68 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static bool all(int arg) 
# 69
{int volatile ___ = 1;(void)arg;
# 72
::exit(___);}
#if 0
# 69
{ 
# 70
unsigned ballotres = __ballot(arg); 
# 71
return (ballotres << (Tools::laneid() / (ProcThreads))) == Mask; 
# 72
} 
#endif
# 75 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static unsigned ballot(int arg) 
# 76
{int volatile ___ = 1;(void)arg;
# 79
::exit(___);}
#if 0
# 76
{ 
# 77
unsigned ballotres = __ballot(arg); 
# 78
return (ballotres << (Tools::laneid() / (ProcThreads))) & Mask; 
# 79
} 
#endif
# 81 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static int shfl(int value, int srcThread) 
# 82
{int volatile ___ = 1;(void)value;(void)srcThread;
# 104
::exit(___);}
#if 0
# 82
{ 
# 84
__attribute__((unused)) volatile int comm[MaxWarps]; 
# 85
int runid = 0; 
# 86
int res = value; 
# 87
for (int offset = 0; offset < 32; offset += ProcThreads) 
# 88
{ 
# 89
for (int within = 0; within < ProcThreads; ++within) 
# 90
{ 
# 91
if (Tools::laneid() == runid) { 
# 92
((comm)[(__device_builtin_variable_threadIdx.x) / (32)]) = value; }  
# 93
if ((Tools::laneid() >= offset) && (Tools::laneid() < (offset + ProcThreads)) && ((runid % ProcThreads) == ((srcThread + 32) % ProcThreads))) { 
# 96
res = ((comm)[(__device_builtin_variable_threadIdx.x) / (32)]); }  
# 97
++runid; 
# 98
}  
# 99
}  
# 100
return res; 
# 104
} 
#endif
# 106 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 109
template< int ProcThreads> 
# 110
class GroupOpsSelect< ProcThreads, false, false>  { 
# 113
public: static void sync() 
# 114
{int volatile ___ = 1;
# 116
::exit(___);}
#if 0
# 114
{ 
# 115
Tools::syncthreads(1, ProcThreads); 
# 116
} 
#endif
# 117 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static int sync_count(int predicate) 
# 118
{int volatile ___ = 1;(void)predicate;
# 120
::exit(___);}
#if 0
# 118
{ 
# 119
return Tools::syncthreads_count(predicate, 1, ProcThreads); 
# 120
} 
#endif
# 121 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static int sync_and(int predicate) 
# 122
{int volatile ___ = 1;(void)predicate;
# 124
::exit(___);}
#if 0
# 122
{ 
# 123
return Tools::syncthreads_and(predicate, 1, ProcThreads); 
# 124
} 
#endif
# 125 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static int sync_or(int predicate) 
# 126
{int volatile ___ = 1;(void)predicate;
# 128
::exit(___);}
#if 0
# 126
{ 
# 127
return Tools::syncthreads_or(predicate, 1, ProcThreads); 
# 128
} 
#endif
# 129 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 133
template< int ProcThreads> 
# 134
class GroupOpsSelect< ProcThreads, false, true>  { 
# 137
public: static void sync() 
# 138
{int volatile ___ = 1;
# 140
::exit(___);}
#if 0
# 138
{ 
# 139
Tools::syncthreads((1) + ((__device_builtin_variable_threadIdx.x) / (ProcThreads)), ProcThreads); 
# 140
} 
#endif
# 141 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static int sync_count(int predicate) 
# 142
{int volatile ___ = 1;(void)predicate;
# 144
::exit(___);}
#if 0
# 142
{ 
# 143
return Tools::syncthreads_count(predicate, (1) + ((__device_builtin_variable_threadIdx.x) / (ProcThreads)), ProcThreads); 
# 144
} 
#endif
# 145 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static int sync_and(int predicate) 
# 146
{int volatile ___ = 1;(void)predicate;
# 148
::exit(___);}
#if 0
# 146
{ 
# 147
return Tools::syncthreads_and(predicate, (1) + ((__device_builtin_variable_threadIdx.x) / (ProcThreads)), ProcThreads); 
# 148
} 
#endif
# 149 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
static int sync_or(int predicate) 
# 150
{int volatile ___ = 1;(void)predicate;
# 152
::exit(___);}
#if 0
# 150
{ 
# 151
return Tools::syncthreads_or(predicate, (1) + ((__device_builtin_variable_threadIdx.x) / (ProcThreads)), ProcThreads); 
# 152
} 
#endif
# 153 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 158
template< int ProcThreads, bool MultiElement, class CustomType> 
# 159
class Context : public GroupOpsSelect< ProcThreads, ProcThreads <= 32, MultiElement>  { 
# 162
public: typedef CustomType Application; 
# 163
}; 
# 168
template< int a, int b> 
# 169
struct maxOperator { 
# 171
static const int result = ((a > b) ? a : b); 
# 172
}; 
# 174
template< int a, int b> 
# 175
struct minOperator { 
# 177
static const int result = ((a < b) ? a : b); 
# 178
}; 
# 180
template< bool test, int a, int b> 
# 181
struct switchOperator { 
# 183
static const int result = (test ? a : b); 
# 184
}; 
# 186
template< int VAL> 
# 187
struct AvoidZero { 
# 189
static const int val = VAL; 
# 190
}; 
# 193
template<> struct AvoidZero< 0>  { 
# 195
static const int val = 1; 
# 196
}; 
# 199
template< class A, class B> 
# 200
struct Equals { 
# 202
static const bool result = false; 
# 203
}; 
# 205
template< class A> 
# 206
struct Equals< A, A>  { 
# 208
static const bool result = true; 
# 209
}; 
# 215
template< int Phase> 
# 216
struct NoPriority { 
# 218
static const unsigned MinPriority = (1); 
# 219
static const unsigned MaxPriority = (1); 
# 221
template< class TProc> static unsigned 
# 222
eval(typename TProc::ExpectedData *data) 
# 223
{int volatile ___ = 1;(void)data;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
return 1; 
# 225
} 
#endif
# 227 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class ProcedureIdentifier> static unsigned 
# 228
eval(ProcedureIdentifier procIdentifier, void *data) 
# 229
{int volatile ___ = 1;(void)procIdentifier;(void)data;
# 231
::exit(___);}
#if 0
# 229
{ 
# 230
return 1; 
# 231
} 
#endif
# 232 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 235
template< class Proc, int Phase> 
# 236
struct AllPhasesActiveTrait { 
# 238
static const bool Active = true; 
# 239
}; 
# 242
template< int ElementSize> struct DataAlignment; 
# 247
class ProcInfoEnd { 
# 251
public: typedef NoProcedure Procedure; 
# 253
typedef ProcInfoEnd Next; 
# 256
static void print() 
# 257
{ 
# 258
printf("\n"); 
# 259
} 
# 261
static const int ProcedureId = 0; 
# 263
static const int MaxId = 0; 
# 264
static const int MaxDataSize = 0; 
# 265
static const int NumProcedures = 0; 
# 266
static const bool ItemizedOnly = true; 
# 267
static const int CombMaxNumThreads = 0; 
# 269
static const int MinThreadsAmongWorkpackages = 2048; 
# 271
template< int ThreadCount> 
# 272
struct GetOccupancy { 
# 274
static const bool Runable = true; 
# 275
static const int SumOccupancy = 0; 
# 276
}; 
# 278
template< bool MultiPackage> static void 
# 279
updateRequiredShared(int numThreads, uint4 &sharedMem, bool copyToShared, int maxShared, bool MultiExecIdentifieres) 
# 280
{ 
# 281
} 
# 283
template< class Proc> 
# 284
struct Contains { 
# 286
static const bool value = false; 
# 287
}; 
# 289
template< bool MultiElement> 
# 290
struct OptimalThreadCount { 
# 292
static const int Num = 0; 
# 293
}; 
# 295
template< bool MultiPackage> static uint4 
# 296
requiredShared(int numThreads, bool copyToShared = true, int maxShared = 49100, bool MultiExecIdentifieres = false) 
# 297
{ 
# 298
uint4 sharedMem; 
# 299
(sharedMem.x) = ((sharedMem.y) = ((sharedMem.z) = ((sharedMem.w) = (0)))); 
# 300
return sharedMem; 
# 301
} 
# 303
}; 
# 308
template< class TProcInfo, int MinThreadCount, int MaxThreadCount, int Step = 32> 
# 309
struct IterateOccupancy { 
# 311
typedef ::IterateOccupancy< TProcInfo, (((MinThreadCount + Step) > MaxThreadCount) ? MaxThreadCount : (MinThreadCount + Step)), MaxThreadCount, Step>  TNext; 
# 312
static const int ThisOccupancy = (TProcInfo::template GetOccupancy< MinThreadCount> ::AverageOccupancy); 
# 313
static const int OptimalOccupancy = ((TNext::OptimalOccupancy > ThisOccupancy) ? TNext::OptimalOccupancy : ThisOccupancy); 
# 314
static const int OptimalThreadCount = ((TNext::OptimalOccupancy > ThisOccupancy) ? TNext::OptimalThreadCount : MinThreadCount); 
# 315
}; 
# 317
template< class TProcInfo, int MaxThreadCount, int Step> 
# 318
struct IterateOccupancy< TProcInfo, MaxThreadCount, MaxThreadCount, Step>  { 
# 320
static const int ThisOccupancy = (TProcInfo::template GetOccupancy< MaxThreadCount> ::AverageOccupancy); 
# 321
static const int OptimalOccupancy = ThisOccupancy; 
# 322
static const int OptimalThreadCount = MaxThreadCount; 
# 323
}; 
# 325
template< class TProc, int ID, class TNext = ProcInfoEnd> 
# 326
class ProcInfo { 
# 329
public: typedef TProc Procedure; 
# 330
typedef TNext Next; 
# 332
static void print() 
# 333
{ 
# 334
printf("%d->", Procedure::myid); 
# 335
Next::print(); 
# 336
} 
# 338
static const int ProcedureId = ID; 
# 340
static const int NumPhases = 1; 
# 341
template< class TTProc, int Phase> 
# 342
struct PhaseTraits : public AllPhasesActiveTrait< TTProc, Phase>  { }; 
# 344
template< int Phase> 
# 345
struct Priority : public NoPriority< Phase>  { }; 
# 347
static const int MaxId = (maxOperator< ProcedureId, TNext::MaxId> ::result); 
# 348
static const int MaxDataSize = (maxOperator< sizeof(typename TProc::ExpectedData), TNext::MaxDataSize> ::result); 
# 349
typedef typename DataAlignment< MaxDataSize> ::Type QueueDataContainer; 
# 350
static const int NumProcedures = (Next::NumProcedures + 1); 
# 352
static const bool ItemizedOnly = (Procedure::ItemInput && Next::ItemizedOnly); 
# 353
static const int CombMaxNumThreads = (maxOperator< (TProc::ItemInput) ? 0 : TProc::NumThreads, TNext::CombMaxNumThreads> ::result); 
# 355
static const int MinThreadsAmongWorkpackages = ((Procedure::ItemInput) ? Next::MinThreadsAmongWorkpackages : minOperator< TProc::NumThreads, TNext::MinThreadsAmongWorkpackages> ::result); 
# 358
template< int ThreadCount> 
# 359
struct GetOccupancy { 
# 361
static const int UseThreads = (maxOperator< TProc::NumThreads, 1> ::result); 
# 363
static const int Occupancy = ((((ThreadCount / UseThreads) * UseThreads) * 1000) / maxOperator< ThreadCount, 1> ::result); 
# 364
static const bool Runable = ((ThreadCount >= UseThreads) && Next::template GetOccupancy< ThreadCount> ::Runable); 
# 366
static const int SumOccupancy = (Runable ? Next::template GetOccupancy< ThreadCount> ::SumOccupancy + Occupancy : 0); 
# 367
static const int AverageOccupancy = (SumOccupancy / NumProcedures); 
# 368
}; 
# 370
static const int OptimalThreadCountNonMulti = ((ItemizedOnly || (CombMaxNumThreads == 0)) ? 512 : CombMaxNumThreads); 
# 371
static const int OptimalThreadCountMulti = ((ItemizedOnly || (CombMaxNumThreads == 0)) ? 256 : IterateOccupancy< ProcInfo, CombMaxNumThreads, 1024, 32> ::OptimalThreadCount); 
# 373
template< bool MultiElement> 
# 374
struct OptimalThreadCount { 
# 376
static const int Num = (MultiElement ? OptimalThreadCountMulti : OptimalThreadCountMulti); 
# 377
}; 
# 384
template< bool MultiPackage> static uint4 
# 385
requiredShared(int numThreads, bool copyToShared = true, int maxShared = 49100, bool MultiExecIdentifieres = false) 
# 386
{ 
# 388
uint4 sharedMem; 
# 389
(sharedMem.x) = ((sharedMem.y) = ((sharedMem.z) = ((sharedMem.w) = (0)))); 
# 390
if (maxShared < 0) 
# 391
{ 
# 392
printf("ERROR: cannot run with negative amount of shared memory!!\n"); 
# 393
return sharedMem; 
# 394
}  
# 395
updateRequiredShared< MultiPackage> (numThreads, sharedMem, copyToShared, maxShared, MultiExecIdentifieres); 
# 397
(sharedMem.x) = ((((sharedMem.x) + (15)) / (16)) * (16)); 
# 398
(sharedMem.y) = ((((sharedMem.y) + (15)) / (16)) * (16)); 
# 399
(sharedMem.z) = ((((sharedMem.z) + (15)) / (16)) * (16)); 
# 400
(sharedMem.w) = (((sharedMem.x) + (sharedMem.y)) + (sharedMem.z)); 
# 402
return sharedMem; 
# 403
} 
# 405
template< class Proc> 
# 406
struct Contains { 
# 408
static const bool value = (Equals< Proc, TProc> ::result || Next::template Contains< Proc> ::value); 
# 409
}; 
# 413
template< bool MultiPackage> static void 
# 414
updateRequiredShared(int numThreads, uint4 &sharedMem, bool copyToShared, int maxShared, bool MultiExecIdentifieres) 
# 415
{ 
# 416
int num = numThreads; 
# 417
uint4 mysharedAbs = make_uint4(0, 0, 0, 0); 
# 418
uint4 mysharedMul = make_uint4(0, 0, 0, 0); 
# 419
if (Procedure::ItemInput) 
# 420
{ 
# 421
num = numThreads; 
# 422
if (Procedure::NumThreads != 0) { 
# 423
num = (numThreads / AvoidZero< TProc::NumThreads> ::val); }  
# 424
if (MultiExecIdentifieres) { 
# 425
(mysharedMul.x) = (sizeof(uint)); } else { 
# 427
(mysharedAbs.x) = std::max< unsigned> (sharedMem.x, sizeof(uint)); }  
# 428
} else 
# 430
{ 
# 431
num = 1; 
# 432
if ((Procedure::NumThreads != 0) && MultiPackage) { 
# 433
num = (numThreads / AvoidZero< TProc::NumThreads> ::val); }  
# 434
(mysharedMul.x) = (sizeof(uint)); 
# 435
}  
# 436
if (copyToShared) { 
# 437
(mysharedMul.y) = (sizeof(typename TProc::ExpectedData)); }  
# 438
(mysharedMul.z) = Procedure::sharedMemory; 
# 440
uint4 current; 
# 441
(current.x) = std::max< unsigned> (sharedMem.x, (((((mysharedMul.x) * num) + (mysharedAbs.x)) + (15)) / (16)) * (16)); 
# 442
(current.y) = std::max< unsigned> (sharedMem.y, (((((mysharedMul.y) * num) + (mysharedAbs.y)) + (15)) / (16)) * (16)); 
# 443
(current.z) = std::max< unsigned> (sharedMem.z, (((((mysharedMul.z) * num) + (mysharedAbs.z)) + (15)) / (16)) * (16)); 
# 444
while ((((current.x) + (current.y)) + (current.z)) > (static_cast< unsigned>(maxShared))) 
# 445
{ 
# 446
if ((--num) <= 0) 
# 447
{ 
# 448
printf("ERROR: cannot fulfill shared memory requirements!!\n"); 
# 449
num = 1; 
# 450
break; 
# 451
}  
# 452
(current.x) = std::max< unsigned> (sharedMem.x, (((((mysharedMul.x) * num) + (mysharedAbs.x)) + (15)) / (16)) * (16)); 
# 453
(current.y) = std::max< unsigned> (sharedMem.y, (((((mysharedMul.y) * num) + (mysharedAbs.y)) + (15)) / (16)) * (16)); 
# 454
(current.z) = std::max< unsigned> (sharedMem.z, (((((mysharedMul.z) * num) + (mysharedAbs.z)) + (15)) / (16)) * (16)); 
# 455
}  
# 458
(sharedMem.x) = (current.x); 
# 459
(sharedMem.y) = (current.y); 
# 460
(sharedMem.z) = (current.z); 
# 462
TNext::template updateRequiredShared< MultiPackage> (numThreads, sharedMem, copyToShared, maxShared, MultiExecIdentifieres); 
# 463
} 
# 465
}; 
# 468
template< class A, class B> 
# 469
struct typesEqual { 
# 471
static const bool value = false; 
# 472
}; 
# 474
template< class A> 
# 475
struct typesEqual< A, A>  { 
# 477
static const bool value = true; 
# 478
}; 
# 480
template< bool b, int id_a, int id_b> struct selectProcId; 
# 483
template< int id_a, int id_b> 
# 484
struct selectProcId< true, id_a, id_b>  { 
# 486
static const int value = id_a; 
# 487
}; 
# 489
template< int id_a, int id_b> 
# 490
struct selectProcId< false, id_a, id_b>  { 
# 492
static const int value = id_b; 
# 493
}; 
# 497
template< class ProcInfo, class Proc> 
# 498
struct findProcId { 
# 500
static const int value = (selectProcId< typesEqual< typename ProcInfo::Procedure, Proc> ::value, ProcInfo::ProcedureId, ::findProcId< typename ProcInfo::Next, Proc> ::value> ::value); 
# 501
}; 
# 503
template< class Proc> 
# 504
struct findProcId< ProcInfoEnd, Proc>  { 
# 506
static const int value = (-1); 
# 507
}; 
# 510
template< class TProcInfo> 
# 511
class ProcedureIdentifier { 
# 513
int procId; 
# 515
public: ProcedureIdentifier(int procId) : procId(procId) {int *volatile ___ = 0;(void)procId;::free(___);}
#if 0
# 515
{ } 
#endif
# 518 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class TProc> static ProcedureIdentifier 
# 519
create() 
# 520
{int volatile ___ = 1;
# 522
::exit(___);}
#if 0
# 520
{ 
# 521
return ((ProcedureIdentifier)(findProcId< TProcInfo, TProc> ::value)); 
# 522
} 
#endif
# 525 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class TProc> bool 
# 526
equals() 
# 527
{int volatile ___ = 1;
# 529
::exit(___);}
#if 0
# 527
{ 
# 528
return findProcId< TProcInfo, TProc> ::value == (procId); 
# 529
} 
#endif
# 532 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
operator int() 
# 533
{int volatile ___ = 1;
# 535
::exit(___);}
#if 0
# 533
{ 
# 534
return procId; 
# 535
} 
#endif
# 536 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 538
template< class Procedure, int ID, class Next = ProcInfoEnd> 
# 539
class N : public ProcInfo< Procedure, ID, Next>  { 
# 540
}; 
# 544
template< class TProcInfo, int id> 
# 545
struct Select { 
# 547
typedef typename ::Select< typename TProcInfo::Next, id - 1> ::Procedure Procedure; 
# 548
}; 
# 550
template< class TProcInfo> 
# 551
struct Select< TProcInfo, 0>  { 
# 553
typedef typename TProcInfo::Procedure Procedure; 
# 554
}; 
# 556
template< int ElementSize> 
# 557
struct DataAlignment { 
# 559
struct Type { 
# 561
static const int NumElements = ((ElementSize + 3) / 4); 
# 562
unsigned data[NumElements]; 
# 564
Type() 
# 565
{ 
# 566
} 
# 569
const Type &operator=(const Type &other) 
# 570
{ 
# 571
for (int i = 0; i < NumElements; ++i) { 
# 572
((data)[i]) = ((other.data)[i]); }  
# 573
return *this; 
# 574
} 
# 576
const volatile Type &operator=(const Type &other) volatile 
# 577
{ 
# 578
for (int i = 0; i < NumElements; ++i) { 
# 579
((data)[i]) = ((other.data)[i]); }  
# 580
return *this; 
# 581
} 
# 583
const Type &operator=(const volatile Type &other) 
# 584
{ 
# 585
for (int i = 0; i < NumElements; ++i) { 
# 586
((data)[i]) = ((other.data)[i]); }  
# 587
return *this; 
# 588
} 
# 589
}; 
# 590
}; 
# 593
template<> struct DataAlignment< 1>  { 
# 595
typedef unsigned Type; 
# 596
}; 
# 598
template<> struct DataAlignment< 2>  { 
# 600
typedef unsigned Type; 
# 601
}; 
# 603
template<> struct DataAlignment< 3>  { 
# 605
typedef unsigned Type; 
# 606
}; 
# 608
template<> struct DataAlignment< 4>  { 
# 610
typedef unsigned Type; 
# 611
}; 
# 616
template< class PriorityEvaluation, class TProcInfo> 
# 617
class ProcInfoWithPriority : public TProcInfo { 
# 621
public: 
# 620
template< int Phase> 
# 621
class Priority : public PriorityEvaluation { }; 
# 622
}; 
# 625
template< int TNumPhases, template< class , int >  class TPhaseTraits, template< int >  class TPriority, class TProcInfo> 
# 626
class ProcInfoMultiPhase : public TProcInfo { 
# 629
public: static const int NumPhases = TNumPhases; 
# 630
template< class TTProc, int Phase> 
# 631
class PhaseTraits : public TPhaseTraits< TTProc, Phase>  { }; 
# 633
template< int Phase> 
# 634
class Priority : public TPriority< Phase>  { }; 
# 635
}; 
# 637
template< class A, class B, bool useA> struct ClassSelector; 
# 640
template< class A, class B> 
# 641
struct ClassSelector< A, B, true>  { 
# 643
typedef A TheClass; 
# 644
}; 
# 646
template< class A, class B> 
# 647
struct ClassSelector< A, B, false>  { 
# 649
typedef B TheClass; 
# 650
}; 
# 654
template< class TThisAttachment, class Visitor, class ThisProc, class TargetProc, class Next> 
# 655
class VisitSpecificSelector { 
# 658
public: static bool visit(Next &next, Visitor &visitor, TThisAttachment &data) 
# 659
{int volatile ___ = 1;(void)next;(void)visitor;(void)data;
# 661
::exit(___);}
#if 0
# 659
{ 
# 660
return (next.template VisitSpecific< Visitor, TargetProc> (visitor)); 
# 661
} 
#endif
# 662 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 665
template< class TThisAttachment, class Visitor, class MatchProc, class Next> 
# 666
class VisitSpecificSelector< TThisAttachment, Visitor, MatchProc, MatchProc, Next>  { 
# 669
public: static bool visit(Next &next, Visitor &visitor, TThisAttachment &data) 
# 670
{int volatile ___ = 1;(void)next;(void)visitor;(void)data;
# 672
::exit(___);}
#if 0
# 670
{ 
# 671
return (visitor.template visit< TThisAttachment> (data)); 
# 672
} 
#endif
# 673 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 678
template< template< class >  class TAttachment, class TProcInfo> 
# 679
class Attach { 
# 682
typedef TAttachment< typename TProcInfo::Procedure>  TThisAttachment; 
# 686
TThisAttachment data; 
# 687
::Attach< TAttachment, typename TProcInfo::Next>  next; 
# 689
template< class Visitor> 
# 690
struct RandVisitorBeg { 
# 692
int notBefore, i; 
# 693
Visitor &v; 
# 694
RandVisitorBeg(Visitor &v, int randOffset) : notBefore(randOffset), i(0), v(v) 
# 695
{int *volatile ___ = 0;(void)v;(void)randOffset;::free(___);}
#if 0
# 695
{ } 
#endif
# 696 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class T> bool 
# 697
visit(T &data) 
# 698
{int volatile ___ = 1;(void)data;
# 705
::exit(___);}
#if 0
# 698
{ 
# 699
if ((i) < (notBefore)) 
# 700
{ 
# 701
++(i); 
# 702
return false; 
# 703
}  
# 704
return ((v).template visit< T> (data)); 
# 705
} 
#endif
# 706 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 708
template< class Visitor> 
# 709
struct RandVisitorEnd { 
# 711
int notBefore, i; 
# 712
Visitor &v; 
# 713
bool runOver; 
# 714
RandVisitorEnd(Visitor &v, int randOffset) : notBefore(randOffset), i(0), v(v), runOver(false) {int *volatile ___ = 0;(void)v;(void)randOffset;::free(___);}
#if 0
# 714
{ } 
#endif
# 715 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class T> bool 
# 716
visit(T &data) 
# 717
{int volatile ___ = 1;(void)data;
# 726
::exit(___);}
#if 0
# 717
{ 
# 718
if ((i) < (notBefore)) 
# 719
{ 
# 720
++(i); 
# 721
return ((v).template visit< T> (data)); 
# 722
}  
# 723
(runOver) = true; 
# 724
return true; 
# 726
} 
#endif
# 727 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 731
public: TThisAttachment &getAttachment() 
# 732
{int volatile ___ = 1;
# 734
::exit(___);}
#if 0
# 732
{ 
# 733
return data; 
# 734
} 
#endif
# 737 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class Visitor> bool 
# 738
VisitAll(Visitor &visitor) 
# 739
{int volatile ___ = 1;(void)visitor;
# 750
::exit(___);}
#if 0
# 739
{ 
# 747
if ((visitor.template visit< TThisAttachment> (data))) { 
# 748
return true; }  
# 749
return ((next).template VisitAll< Visitor> (visitor)); 
# 750
} 
#endif
# 753 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class Visitor> bool 
# 754
VisitAllRandStart(Visitor &visitor) 
# 755
{int volatile ___ = 1;(void)visitor;
# 763
::exit(___);}
#if 0
# 755
{ 
# 756
int offset = whippletree::random::rand() % TProcInfo::NumProcedures; 
# 757
RandVisitorBeg< Visitor>  v(visitor, offset); 
# 758
if (VisitAll< RandVisitorBeg< Visitor> > (v)) { 
# 759
return true; }  
# 760
RandVisitorEnd< Visitor>  v2(visitor, offset); 
# 761
VisitAll< RandVisitorEnd< Visitor> > (v2); 
# 762
return !(v2.runOver); 
# 763
} 
#endif
# 766 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class Visitor, class TargetProc> bool 
# 767
VisitSpecific(Visitor &visitor) 
# 768
{int volatile ___ = 1;(void)visitor;
# 775
::exit(___);}
#if 0
# 768
{ 
# 771
return VisitSpecificSelector< TAttachment< typename TProcInfo::Procedure> , Visitor, typename TProcInfo::Procedure, TargetProc, ::Attach< TAttachment, typename TProcInfo::Next> > ::visit(next, visitor, data); 
# 775
} 
#endif
# 778 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class Visitor> bool 
# 779
VisitSpecific(Visitor &visitor, int ProcId) 
# 780
{int volatile ___ = 1;(void)visitor;(void)ProcId;
# 801
::exit(___);}
#if 0
# 780
{ 
# 791
if (ProcId == TProcInfo::ProcedureId) 
# 792
{ 
# 796
return (visitor.template visit< TThisAttachment> (data)); 
# 797
}  
# 800
return ((next).template VisitSpecific< Visitor> (visitor, ProcId)); 
# 801
} 
#endif
# 802 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 805
template< template< class >  class TAttachment> 
# 806
class Attach< TAttachment, ProcInfoEnd>  { 
# 810
public: 
# 809
template< class Visitor> bool 
# 810
VisitAll(Visitor &visitor) 
# 811
{int volatile ___ = 1;(void)visitor;
# 813
::exit(___);}
#if 0
# 811
{ 
# 812
return false; 
# 813
} 
#endif
# 814 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class Visitor, class TargetProc> bool 
# 815
VisitSpecific(Visitor &visitor) 
# 816
{int volatile ___ = 1;(void)visitor;
# 818
::exit(___);}
#if 0
# 816
{ 
# 817
return false; 
# 818
} 
#endif
# 819 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
template< class Visitor> bool 
# 820
VisitSpecific(Visitor &visitor, int ProcId) 
# 821
{int volatile ___ = 1;(void)visitor;(void)ProcId;
# 823
::exit(___);}
#if 0
# 821
{ 
# 822
return false; 
# 823
} 
#endif
# 824 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 828
template< class TProcInfo, class TCustom = void> 
# 829
class ProcInfoVisitor { 
# 833
public: 
# 832
template< class Visitor> static bool 
# 833
HostVisit(Visitor &visitor) 
# 834
{ 
# 835
if ((visitor.template visit< typename TProcInfo::Procedure, TCustom> ())) { 
# 836
return true; }  
# 837
return ::ProcInfoVisitor< typename TProcInfo::Next, TCustom> ::template HostVisit< Visitor> (visitor); 
# 838
} 
# 841
template< class Visitor> static bool 
# 842
Visit(Visitor &visitor) 
# 843
{int volatile ___ = 1;(void)visitor;
# 847
::exit(___);}
#if 0
# 843
{ 
# 844
if ((visitor.template visit< typename TProcInfo::Procedure, TCustom> ())) { 
# 845
return true; }  
# 846
return ::ProcInfoVisitor< typename TProcInfo::Next, TCustom> ::template Visit< Visitor> (visitor); 
# 847
} 
#endif
# 848 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 850
template< class TCustom> 
# 851
class ProcInfoVisitor< ProcInfoEnd, TCustom>  { 
# 855
public: 
# 854
template< class Visitor> static bool 
# 855
HostVisit(Visitor &visitor) 
# 856
{ 
# 857
return false; 
# 858
} 
# 860
template< class Visitor> static bool 
# 861
Visit(Visitor &visitor) 
# 862
{int volatile ___ = 1;(void)visitor;
# 864
::exit(___);}
#if 0
# 862
{ 
# 863
return false; 
# 864
} 
#endif
# 865 "/home/zhengzhen/workspace/versapipe/procinfoTemplate.cuh"
}; 
# 42 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class PROCEDURE, int ProcId, int NumElements, bool TWarpOptimization> 
# 43
struct SharedBaseQueue { 
# 45
static const int HeaderSize = ((4) * sizeof(uint)); 
# 47
uint procId_maxnum; 
# 48
volatile int counter; 
# 49
uint headerVersatile0; 
# 50
uint headerVerstaile1; 
# 52
typename PROCEDURE::ExpectedData queueData[NumElements]; 
# 54
void clean(int tid, int threads) 
# 55
{int volatile ___ = 1;(void)tid;(void)threads;
# 61
::exit(___);}
#if 0
# 55
{ 
# 56
for (int i = tid; i < 4; i += threads) 
# 57
{ 
# 59
((reinterpret_cast< uint *>(this))[i]) = (0); 
# 60
}  
# 61
} 
#endif
# 62 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void writeHeader() 
# 63
{int volatile ___ = 1;
# 65
::exit(___);}
#if 0
# 63
{ 
# 64
(procId_maxnum) = ((ProcId << 16) | NumElements); 
# 65
} 
#endif
# 66 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
int procId() const 
# 67
{int volatile ___ = 1;
# 69
::exit(___);}
#if 0
# 67
{ 
# 68
return (procId_maxnum) >> 16; 
# 69
} 
#endif
# 70 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
uint numElement() const 
# 71
{int volatile ___ = 1;
# 73
::exit(___);}
#if 0
# 71
{ 
# 72
return (procId_maxnum) & (65535); 
# 73
} 
#endif
# 74 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
int num() const 
# 75
{int volatile ___ = 1;
# 77
::exit(___);}
#if 0
# 75
{ 
# 76
return min(counter, NumElements); 
# 77
} 
#endif
# 78 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
int count() const 
# 79
{int volatile ___ = 1;
# 81
::exit(___);}
#if 0
# 79
{ 
# 80
return counter; 
# 81
} 
#endif
# 83 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
bool enqueue(typename PROCEDURE::ExpectedData data) 
# 84
{int volatile ___ = 1;(void)data;
# 86
::exit(___);}
#if 0
# 84
{ 
# 85
return enqueue< 1> (&data); 
# 86
} 
#endif
# 90 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< uint ThreadsPerElement> bool 
# 91
enqueue(typename PROCEDURE::ExpectedData *data) 
# 92
{int volatile ___ = 1;(void)data;
# 152
::exit(___);}
#if 0
# 92
{ 
# 93
if (TWarpOptimization) 
# 94
{ 
# 95
uint mask = __ballot(1); 
# 96
int ourcount = (__popc(mask)) / ThreadsPerElement; 
# 97
if ((counter) >= NumElements) { 
# 98
return false; }  
# 99
int mypos = __popc(Tools::lanemask_lt() & mask); 
# 101
int spos = (-1); 
# 102
if (mypos == 0) 
# 103
{ 
# 104
spos = atomicAdd((int *)(&(counter)), ourcount); 
# 105
int canPut = max(0, min(NumElements - spos, ourcount)); 
# 106
if (canPut < ourcount) { 
# 107
atomicSub((int *)(&(counter)), ourcount - canPut); }  
# 108
}  
# 110
int src = __ffs(mask) - 1; 
# 112
spos = warpBroadcast< 32> (spos, src); 
# 114
int qpos = spos + (mypos / ThreadsPerElement); 
# 115
if (qpos >= NumElements) { 
# 116
return false; }  
# 119
for (int i = (__device_builtin_variable_threadIdx.x) % ThreadsPerElement; i < (sizeof(typename PROCEDURE::ExpectedData) / sizeof(uint)); i += ThreadsPerElement) { 
# 120
(*((reinterpret_cast< uint *>((queueData) + qpos)) + i)) = (*((reinterpret_cast< uint *>(data)) + i)); }  
# 121
return true; 
# 122
} else 
# 124
{ 
# 125
if ((counter) >= NumElements) { 
# 126
return false; }  
# 127
int spos = (-1); 
# 128
if (((__device_builtin_variable_threadIdx.x) % ThreadsPerElement) == (0)) 
# 129
{ 
# 130
spos = atomicAdd((int *)(&(counter)), 1); 
# 131
if (spos >= NumElements) { 
# 132
atomicSub((int *)(&(counter)), 1); }  
# 133
}  
# 134
if (ThreadsPerElement != (1)) { 
# 135
spos = warpBroadcast< ThreadsPerElement> (spos, 0); }  
# 138
if (spos >= NumElements) { 
# 139
return false; }  
# 142
for (int i = (__device_builtin_variable_threadIdx.x) % ThreadsPerElement; i < (sizeof(typename PROCEDURE::ExpectedData) / sizeof(uint)); i += ThreadsPerElement) 
# 145
{ 
# 146
(*(((reinterpret_cast< uint *>(queueData)) + ((sizeof(typename PROCEDURE::ExpectedData) / sizeof(uint)) * spos)) + i)) = (*((reinterpret_cast< uint *>(data)) + i)); 
# 149
}  
# 150
return true; 
# 151
}  
# 152
} 
#endif
# 157 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
int dequeue(void *data, int maxnum) 
# 158
{int volatile ___ = 1;(void)data;(void)maxnum;
# 176
::exit(___);}
#if 0
# 158
{ 
# 159
int n = counter; 
# 160
__syncthreads(); 
# 161
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 162
(counter) = max(0, n - maxnum); }  
# 163
int take = min(maxnum, n); 
# 164
int offset = n - take; 
# 166
for (int i = __device_builtin_variable_threadIdx.x; i < ((sizeof(typename PROCEDURE::ExpectedData) / sizeof(uint)) * take); i += (__device_builtin_variable_blockDim.x)) 
# 169
{ 
# 170
(*((reinterpret_cast< uint *>(data)) + i)) = (*(((reinterpret_cast< uint *>(queueData)) + ((sizeof(typename PROCEDURE::ExpectedData) / sizeof(uint)) * offset)) + i)); 
# 173
}  
# 175
return take; 
# 176
} 
#endif
# 180 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 181
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 187
::exit(___);}
#if 0
# 181
{ 
# 182
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueShared.cuh", 182); 
# 183
int n = counter; 
# 184
if (only_read_all && (n < maxnum)) { 
# 185
return 0; }  
# 186
return max(0, min(n, maxnum)); 
# 187
} 
#endif
# 191 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
int startRead(typename PROCEDURE::ExpectedData *&data, int num) 
# 192
{int volatile ___ = 1;(void)data;(void)num;
# 198
::exit(___);}
#if 0
# 192
{ 
# 193
int o = (counter) - num; 
# 196
data = ((queueData) + o); 
# 197
return o; 
# 198
} 
#endif
# 202 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void finishRead(int id, int num) 
# 203
{int volatile ___ = 1;(void)id;(void)num;
# 231
::exit(___);}
#if 0
# 203
{ 
# 204
__syncthreads(); 
# 205
int c = counter; 
# 206
int additional = ((c - (id + num)) * sizeof(typename PROCEDURE::ExpectedData)) / sizeof(uint); 
# 209
if (additional > 0) 
# 210
{ 
# 213
uint *cdata = ((reinterpret_cast< uint *>(queueData)) + ((id * sizeof(typename PROCEDURE::ExpectedData)) / sizeof(uint))) + (__device_builtin_variable_threadIdx.x); 
# 214
for (int i = 0; i < ((additional * sizeof(typename PROCEDURE::ExpectedData)) / sizeof(uint)); i += (__device_builtin_variable_blockDim.x)) 
# 215
{ 
# 216
uint d = (0); 
# 217
if ((i + (__device_builtin_variable_threadIdx.x)) < additional) { 
# 218
d = (*((cdata + ((num * sizeof(typename PROCEDURE::ExpectedData)) / sizeof(uint))) + i)); }  
# 219
__syncthreads(); 
# 220
if ((i + (__device_builtin_variable_threadIdx.x)) < additional) { 
# 221
(*(cdata + i)) = d; }  
# 222
}  
# 223
}  
# 224
__syncthreads(); 
# 225
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 226
{ 
# 228
(counter) = (c - num); 
# 229
}  
# 230
__syncthreads(); 
# 231
} 
#endif
# 233 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static std::__cxx11::string name() 
# 234
{ 
# 235
return (((std::__cxx11::string)("SharedBaseQueue")) + (TWarpOptimization ? "Warpoptimized" : (""))); 
# 236
} 
# 238
void printName() 
# 239
{int volatile ___ = 1;
# 241
::exit(___);}
#if 0
# 239
{ 
# 240
printf("%s\n", __PRETTY_FUNCTION__); 
# 241
} 
#endif
# 243 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
}; 
# 245
template< int Size> 
# 246
struct Make16 { 
# 248
static const int Res = (((Size + 15) / 16) * 16); 
# 249
}; 
# 251
class EndSharedQueue { 
# 254
public: typedef void Proc; 
# 255
template< class RootOverallNode, int MaxSize, int PrevSize = 0> 
# 256
struct Overall { 
# 258
static const int Size = 0; 
# 259
static const int FinalSize = 0; 
# 260
static const int FixedSize = 0; 
# 261
static const int SumSize = 0; 
# 262
static const int CountDynamicSize = 0; 
# 263
}; 
# 264
}; 
# 267
template< template< class >  class SQTraits, class Procedure> 
# 268
struct GetTraitQueueSize { 
# 270
static const int QueueSize = (SQTraits< Procedure> ::QueueSize); 
# 271
}; 
# 280
template< class ProcInfo, int numOverall, int numPeel, template< class >  class SQTraits, int TNumElements> 
# 281
class SQElementTraitsPeel { 
# 284
public: typedef typename Select< ProcInfo, numPeel> ::Procedure Proc; 
# 286
typedef ::SQElementTraitsPeel< ProcInfo, numOverall, numPeel + 1, SQTraits, GetTraitQueueSize< SQTraits, typename Select< ProcInfo, numPeel + 1> ::Procedure> ::QueueSize>  NextSQElement; 
# 288
template< class RootOverallNode, int MaxSize, int PrevSize = 0> 
# 289
struct Overall { 
# 291
static const int Size = (Make16< ((TNumElements) * sizeof(typename Select< ProcInfo, numPeel> ::Procedure::ExpectedData)) + SharedBaseQueue< typename Select< ProcInfo, numPeel> ::Procedure, 0, TNumElements, true> ::HeaderSize> ::Res); 
# 293
static const int NumElements = TNumElements; 
# 294
static const int SumSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::SumSize + Size); 
# 295
static const int FixedSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::FixedSize + Size); 
# 296
static const int CountDynamicSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::CountDynamicSize); 
# 297
}; 
# 299
}; 
# 303
template< class ProcInfo, int numOverall, int numPeel, template< class >  class SQTraits> 
# 304
class SQElementTraitsPeel< ProcInfo, numOverall, numPeel, SQTraits, 0>  : public SQElementTraitsPeel< ProcInfo, numOverall, numPeel + 1, SQTraits, GetTraitQueueSize< SQTraits, typename Select< ProcInfo, numPeel + 1> ::Procedure> ::QueueSize>  { 
# 307
}; 
# 310
template< class ProcInfo, int numOverall, template< class >  class SQTraits> 
# 311
class SQElementTraitsPeel< ProcInfo, numOverall, numOverall, SQTraits, 0>  : public EndSharedQueue { 
# 314
public: typedef void Proc; 
# 315
}; 
# 318
template< class ProcInfo, int numOverall, template< class >  class SQTraits, int TNumElements> 
# 319
class SQElementTraitsPeel< ProcInfo, numOverall, numOverall, SQTraits, TNumElements>  { 
# 322
public: typedef typename Select< ProcInfo, numOverall> ::Procedure Proc; 
# 323
typedef EndSharedQueue NextSQElement; 
# 325
template< class RootOverallNode, int MaxSize, int PrevSize = 0> 
# 326
struct Overall { 
# 328
static const int Size = (Make16< ((TNumElements) * sizeof(typename Select< ProcInfo, numOverall> ::Procedure::ExpectedData)) + SharedBaseQueue< typename Select< ProcInfo, numOverall> ::Procedure, 0, TNumElements, true> ::HeaderSize> ::Res); 
# 329
static const int NumElements = TNumElements; 
# 330
static const int SumSize = (NextSQElement::Overall< RootOverallNode, MaxSize, PrevSize + Size> ::SumSize + Size); 
# 331
static const int FixedSize = (NextSQElement::Overall< RootOverallNode, MaxSize, PrevSize + Size> ::FixedSize + Size); 
# 332
static const int CountDynamicSize = (NextSQElement::Overall< RootOverallNode, MaxSize, PrevSize + Size> ::CountDynamicSize); 
# 333
}; 
# 334
}; 
# 336
template< class TProc, int TNum, class TNextSizeSelection = EndSharedQueue> 
# 337
class SQElementFixedNum { 
# 340
public: typedef TProc Proc; 
# 341
typedef TNextSizeSelection NextSQElement; 
# 343
template< class RootOverallNode, int MaxSize, int PrevSize = 0> 
# 344
struct Overall { 
# 346
static const int Size = (Make16< ((TNum) * sizeof(typename TProc::ExpectedData)) + SharedBaseQueue< TProc, 0, TNum, true> ::HeaderSize> ::Res); 
# 347
static const int NumElements = TNum; 
# 348
static const int SumSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::SumSize + Size); 
# 349
static const int FixedSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::FixedSize + Size); 
# 350
static const int CountDynamicSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::CountDynamicSize); 
# 351
}; 
# 352
}; 
# 354
template< class TProc, int TSize, class TNextSizeSelection = EndSharedQueue> 
# 355
class SQElementFixedSize { 
# 358
public: typedef TProc Proc; 
# 359
typedef TNextSizeSelection NextSQElement; 
# 361
template< class RootOverallNode, int MaxSize, int PrevSize = 0> 
# 362
struct Overall { 
# 364
static const int Size = (Make16< TSize> ::Res); 
# 365
static const int NumElements = ((TSize - SharedBaseQueue< TProc, 0, 4, true> ::HeaderSize) / sizeof(typename TProc::ExpectedData)); 
# 366
static const int SumSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::SumSize + Size); 
# 367
static const int FixedSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::FixedSize + Size); 
# 368
static const int CountDynamicSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::CountDynamicSize); 
# 369
}; 
# 370
}; 
# 373
template< class TProc, int TRemainingSizeRatio, class TNextSizeSelection = EndSharedQueue> 
# 374
class SQElementDyn { 
# 377
public: typedef TProc Proc; 
# 378
typedef TNextSizeSelection NextSQElement; 
# 380
template< class RootOverallNode, int MaxSize, int PrevSize = 0> 
# 381
struct Overall { 
# 383
static const int CountDynamicSize = (Make16< TNextSizeSelection::template Overall< RootOverallNode, MaxSize, PrevSize> ::CountDynamicSize + TRemainingSizeRatio> ::Res); 
# 386
static const int FixedSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize> ::FixedSize); 
# 388
static const int Size = (Make16< (((((MaxSize - RootOverallNode::FixedSize) / RootOverallNode::CountDynamicSize) - SharedBaseQueue< TProc, 0, 4, true> ::HeaderSize) / sizeof(typename TProc::ExpectedData)) * sizeof(typename TProc::ExpectedData)) + SharedBaseQueue< TProc, 0, 4, true> ::HeaderSize> ::Res); 
# 393
static const int NumElements = ((Size - SharedBaseQueue< TProc, 0, 4, true> ::HeaderSize) / sizeof(typename TProc::ExpectedData)); 
# 395
static const int SumSize = (NextSQElement::template Overall< RootOverallNode, MaxSize, PrevSize + Size> ::SumSize + Size); 
# 397
}; 
# 398
}; 
# 403
template< class SelectProc, class ThisProc, class BaseQ, class NextSharedQueueElement> 
# 404
struct SQueueElementSelectAndForward { 
# 407
static bool enqueue(char *sQueueStartPointer, BaseQ *useQ, typename SelectProc::ExpectedData data) 
# 408
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)data;
# 411
::exit(___);}
#if 0
# 408
{ 
# 410
return NextSharedQueueElement::template enqueue< SelectProc> (sQueueStartPointer, data); 
# 411
} 
#endif
# 413 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< int NumThreads> static bool 
# 414
enqueue(char *sQueueStartPointer, BaseQ *useQ, typename SelectProc::ExpectedData *data) 
# 415
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)data;
# 418
::exit(___);}
#if 0
# 415
{ 
# 417
return NextSharedQueueElement::template enqueue< NumThreads, SelectProc> (sQueueStartPointer, data); 
# 418
} 
#endif
# 420 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static void finishRead(char *sQueueStartPointer, BaseQ *useQ, int id, int num) 
# 421
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)id;(void)num;
# 424
::exit(___);}
#if 0
# 421
{ 
# 423
return NextSharedQueueElement::template finishRead< SelectProc> (sQueueStartPointer, id, num); 
# 424
} 
#endif
# 425 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
}; 
# 428
template< class MatchProc, class BaseQ, class NextSharedQueueElement> 
# 429
struct SQueueElementSelectAndForward< MatchProc, MatchProc, BaseQ, NextSharedQueueElement>  { 
# 432
static bool enqueue(char *sQueueStartPointer, BaseQ *useQ, typename MatchProc::ExpectedData data) 
# 433
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)data;
# 436
::exit(___);}
#if 0
# 433
{ 
# 435
return (useQ->enqueue(data)); 
# 436
} 
#endif
# 437 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< int NumThreads> static bool 
# 438
enqueue(char *sQueueStartPointer, BaseQ *useQ, typename MatchProc::ExpectedData *data) 
# 439
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)data;
# 442
::exit(___);}
#if 0
# 439
{ 
# 441
return (useQ->template enqueue< NumThreads> (data)); 
# 442
} 
#endif
# 443 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static void finishRead(char *sQueueStartPointer, BaseQ *useQ, int id, int num) 
# 444
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)id;(void)num;
# 446
::exit(___);}
#if 0
# 444
{ 
# 445
return (useQ->finishRead(id, num)); 
# 446
} 
#endif
# 447 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
}; 
# 450
template< template< class >  class Wrapper, class MatchProc, class BaseQ, class NextSharedQueueElement> 
# 451
struct SQueueElementSelectAndForward< MatchProc, Wrapper< MatchProc> , BaseQ, NextSharedQueueElement>  { 
# 453
static bool enqueue(char *sQueueStartPointer, BaseQ *useQ, typename MatchProc::ExpectedData data) 
# 454
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)data;
# 457
::exit(___);}
#if 0
# 454
{ 
# 456
return (useQ->enqueue(data)); 
# 457
} 
#endif
# 458 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< int NumThreads> static bool 
# 459
enqueue(char *sQueueStartPointer, BaseQ *useQ, typename MatchProc::ExpectedData *data) 
# 460
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)data;
# 463
::exit(___);}
#if 0
# 460
{ 
# 462
return (useQ->template enqueue< NumThreads> (data)); 
# 463
} 
#endif
# 464 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static void finishRead(char *sQueueStartPointer, BaseQ *useQ, int id, int num) 
# 465
{int volatile ___ = 1;(void)sQueueStartPointer;(void)useQ;(void)id;(void)num;
# 467
::exit(___);}
#if 0
# 465
{ 
# 466
return (useQ->finishRead(id, num)); 
# 467
} 
#endif
# 468 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
}; 
# 471
template< class ProcInfo, class Procedure, int MaxSize, class TSQDescription, class RootOverallNode, bool WarpOptimization, int PrevSize = 0> 
# 472
class SharedQueueElement { 
# 474
typedef typename TSQDescription::Proc MyProc; 
# 475
static const int Size = (TSQDescription::template Overall< RootOverallNode, MaxSize, PrevSize> ::Size); 
# 476
static const int NumElements = (TSQDescription::template Overall< RootOverallNode, MaxSize, PrevSize> ::NumElements); 
# 481
typedef ::SharedQueueElement< ProcInfo, typename TSQDescription::NextSQElement::Proc, MaxSize, typename TSQDescription::NextSQElement, RootOverallNode, WarpOptimization, PrevSize + Size>  NextSharedQueueElement; 
# 483
typedef SharedBaseQueue< typename TSQDescription::Proc, findProcId< ProcInfo, typename TSQDescription::Proc> ::value, NumElements, WarpOptimization>  MyBaseQueue; 
# 487
static MyBaseQueue *myQ(char *sQueueStartPointer) 
# 488
{int volatile ___ = 1;(void)sQueueStartPointer;
# 490
::exit(___);}
#if 0
# 488
{ 
# 489
return reinterpret_cast< MyBaseQueue *>(sQueueStartPointer + PrevSize); 
# 490
} 
#endif
# 493 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
public: static const int requiredShared = (TSQDescription::template Overall< RootOverallNode, MaxSize, PrevSize> ::SumSize); 
# 495
static_assert((requiredShared <= MaxSize), "Shared Queue generated from traits is larger than specified max QueueSize");
# 497
static void init(char *sQueueStartPointer) 
# 498
{int volatile ___ = 1;(void)sQueueStartPointer;
# 502
::exit(___);}
#if 0
# 498
{ 
# 499
((myQ)(sQueueStartPointer)->clean(__device_builtin_variable_threadIdx.x, __device_builtin_variable_blockDim.x)); 
# 500
((myQ)(sQueueStartPointer)->writeHeader()); 
# 501
NextSharedQueueElement::init(sQueueStartPointer); 
# 502
} 
#endif
# 503 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static void maintain(char *sQueueStartPointer) 
# 504
{int volatile ___ = 1;(void)sQueueStartPointer;::exit(___);}
#if 0
# 504
{ } 
#endif
# 507 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class Procedure_> static bool 
# 508
enqueue(char *sQueueStartPointer, typename Procedure_::ExpectedData data) 
# 509
{int volatile ___ = 1;(void)sQueueStartPointer;(void)data;
# 511
::exit(___);}
#if 0
# 509
{ 
# 510
return SQueueElementSelectAndForward< Procedure_, typename TSQDescription::Proc, SharedBaseQueue< typename TSQDescription::Proc, findProcId< ProcInfo, typename TSQDescription::Proc> ::value, NumElements, WarpOptimization> , ::SharedQueueElement< ProcInfo, typename TSQDescription::NextSQElement::Proc, MaxSize, typename TSQDescription::NextSQElement, RootOverallNode, WarpOptimization, PrevSize + Size> > ::enqueue(sQueueStartPointer, (myQ)(sQueueStartPointer), data); 
# 511
} 
#endif
# 513 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< uint ThreadsPerElement, class Procedure_> static bool 
# 514
enqueue(char *sQueueStartPointer, typename Procedure_::ExpectedData *data) 
# 515
{int volatile ___ = 1;(void)sQueueStartPointer;(void)data;
# 518
::exit(___);}
#if 0
# 515
{ 
# 516
return SQueueElementSelectAndForward< Procedure_, typename TSQDescription::Proc, SharedBaseQueue< typename TSQDescription::Proc, findProcId< ProcInfo, typename TSQDescription::Proc> ::value, NumElements, WarpOptimization> , ::SharedQueueElement< ProcInfo, typename TSQDescription::NextSQElement::Proc, MaxSize, typename TSQDescription::NextSQElement, RootOverallNode, WarpOptimization, PrevSize + Size> > ::template enqueue< ThreadsPerElement> (sQueueStartPointer, (myQ)(sQueueStartPointer), data); 
# 518
} 
#endif
# 526 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> static int 
# 527
dequeue(char *sQueueStartPointer, void *&data, int *procId, int maxShared = -1, int minPercent = 80) 
# 528
{int volatile ___ = 1;(void)sQueueStartPointer;(void)data;(void)procId;(void)maxShared;(void)minPercent;
# 554
::exit(___);}
#if 0
# 528
{ 
# 530
int maxElements = getElementCount< MyProc, MultiProcedure> (); 
# 531
if (maxShared != (-1)) 
# 532
{ 
# 533
maxElements = min(maxElements, maxShared / (((int)sizeof(typename TSQDescription::Proc::ExpectedData)) + MyProc::sharedMemory)); 
# 536
}  
# 539
int DequeueThreshold = ((minPercent * NumElements) / 100) + 1; 
# 540
int c = ((myQ)(sQueueStartPointer)->count()); 
# 541
if (c >= min(maxElements, DequeueThreshold)) 
# 542
{ 
# 543
c = ((myQ)(sQueueStartPointer)->dequeue(data, maxElements)); 
# 544
if (c > 0) 
# 545
{ 
# 546
(*procId) = MyProc::ProcedureId; 
# 547
data = (((uint *)data) + (getThreadOffset< MyProc, MultiProcedure> () * sizeof(typename TSQDescription::Proc::ExpectedData))); 
# 548
}  
# 550
return c * getThreadCount< MyProc> (); 
# 551
}  
# 552
return ::SharedQueueElement< ProcInfo, typename TSQDescription::NextSQElement::Proc, MaxSize, typename TSQDescription::NextSQElement, RootOverallNode, WarpOptimization, PrevSize + Size> ::template dequeue< MultiProcedure> (sQueueStartPointer, data, procId, maxShared, minPercent); 
# 554
} 
#endif
# 558 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> static int 
# 559
dequeueSelected(char *sQueueStartPointer, void *&data, int procId, int maxNum = -1, int minPercent = 80) 
# 560
{int volatile ___ = 1;(void)sQueueStartPointer;(void)data;(void)procId;(void)maxNum;(void)minPercent;
# 578
::exit(___);}
#if 0
# 560
{ 
# 561
int maxElements = getElementCount< MyProc> (); 
# 562
if (maxNum != (-1)) { 
# 563
maxElements = min(maxElements, maxNum); }  
# 565
int DequeueThreshold = ((minPercent * NumElements) / 100) + 1; 
# 566
int c = ((myQ)(sQueueStartPointer)->count()); 
# 567
if (c >= min(maxElements, DequeueThreshold)) 
# 568
{ 
# 569
c = ((myQ)(sQueueStartPointer)->dequeue(data, maxElements)); 
# 570
if (c > 0) 
# 571
{ 
# 572
data = (((uint *)data) + (getThreadOffset< MyProc> () * sizeof(typename TSQDescription::Proc::ExpectedData))); 
# 573
}  
# 574
return c; 
# 575
}  
# 576
return ::SharedQueueElement< ProcInfo, typename TSQDescription::NextSQElement::Proc, MaxSize, typename TSQDescription::NextSQElement, RootOverallNode, WarpOptimization, PrevSize + Size> ::template dequeueSelected< MultiProcedure> (sQueueStartPointer, data, procId, maxNum, minPercent); 
# 578
} 
#endif
# 584 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> static int2 
# 585
dequeueStartRead(char *sQueueStartPointer, void *&data, int *procId, int maxShared = -1, int minPercent = 80) 
# 586
{int volatile ___ = 1;(void)sQueueStartPointer;(void)data;(void)procId;(void)maxShared;(void)minPercent;
# 607
::exit(___);}
#if 0
# 586
{ 
# 587
int maxElements = getElementCount< MyProc, MultiProcedure> (); 
# 588
if (maxShared != (-1)) { 
# 589
maxElements = min(maxElements, (MyProc::sharedMemory > 0) ? maxShared / MyProc::sharedMemory : (__device_builtin_variable_blockDim.x)); }  
# 590
int c = ((myQ)(sQueueStartPointer)->count()); 
# 591
int DequeueThreshold = ((minPercent * NumElements) / 100) + 1; 
# 592
if (c >= min(maxElements, DequeueThreshold)) 
# 593
{ 
# 594
c = ((myQ)(sQueueStartPointer)->reserveRead(maxElements)); 
# 595
int id = 0; 
# 596
if (c > 0) 
# 597
{ 
# 598
typename TSQDescription::Proc::ExpectedData *p; 
# 599
id = ((myQ)(sQueueStartPointer)->startRead(p, c)); 
# 600
c = (c * getThreadCount< MyProc> ()); 
# 601
data = (reinterpret_cast< void *>(p + getThreadOffset< MyProc, MultiProcedure> ())); 
# 602
(procId[0]) = findProcId< ProcInfo, typename TSQDescription::Proc> ::value; 
# 603
}  
# 604
return make_int2(c, id); 
# 605
}  
# 606
return ::SharedQueueElement< ProcInfo, typename TSQDescription::NextSQElement::Proc, MaxSize, typename TSQDescription::NextSQElement, RootOverallNode, WarpOptimization, PrevSize + Size> ::template dequeueStartRead< MultiProcedure> (sQueueStartPointer, data, procId, maxShared, minPercent); 
# 607
} 
#endif
# 610 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class Procedure_> static void 
# 611
finishRead(char *sQueueStartPointer, int id, int num) 
# 612
{int volatile ___ = 1;(void)sQueueStartPointer;(void)id;(void)num;
# 614
::exit(___);}
#if 0
# 612
{ 
# 613
SQueueElementSelectAndForward< Procedure_, typename TSQDescription::Proc, SharedBaseQueue< typename TSQDescription::Proc, findProcId< ProcInfo, typename TSQDescription::Proc> ::value, NumElements, WarpOptimization> , ::SharedQueueElement< ProcInfo, typename TSQDescription::NextSQElement::Proc, MaxSize, typename TSQDescription::NextSQElement, RootOverallNode, WarpOptimization, PrevSize + Size> > ::finishRead(sQueueStartPointer, (myQ)(sQueueStartPointer), id, num); 
# 614
} 
#endif
# 616 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static std::__cxx11::string name() 
# 617
{ 
# 618
return ((((std::to_string((long long)findProcId< ProcInfo, typename TSQDescription::Proc> ::value) + "(") + std::to_string((long long)NumElements)) + ")") + ",") + NextSharedQueueElement::name(); 
# 619
} 
# 621
void printName() 
# 622
{int volatile ___ = 1;
# 624
::exit(___);}
#if 0
# 622
{ 
# 623
printf("%s\n", __PRETTY_FUNCTION__); 
# 624
} 
#endif
# 625 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
}; 
# 629
template< class ProcInfo, int MaxSize, class TSQDescription, class RootOverallNode, bool WarpOptimization, int PrevSize> 
# 630
class SharedQueueElement< ProcInfo, void, MaxSize, TSQDescription, RootOverallNode, WarpOptimization, PrevSize>  { 
# 633
public: static const int requiredShared = 0; 
# 634
static void init(char *sQueueStartPointer) {int volatile ___ = 1;(void)sQueueStartPointer;::exit(___);}
#if 0
# 634
{ } 
#endif
# 635 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static void maintain(char *sQueueStartPointer) {int volatile ___ = 1;(void)sQueueStartPointer;::exit(___);}
#if 0
# 635
{ } 
#endif
# 636 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class Procedure> static bool 
# 637
enqueue(char *sQueueStartPointer, typename Procedure::ExpectedData otherdata) {int volatile ___ = 1;(void)sQueueStartPointer;(void)otherdata;::exit(___);}
#if 0
# 637
{ return false; } 
#endif
# 638 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< uint ThreadsPerElement, class Procedure> static bool 
# 639
enqueue(char *sQueueStartPointer, typename Procedure::ExpectedData *data) {int volatile ___ = 1;(void)sQueueStartPointer;(void)data;::exit(___);}
#if 0
# 639
{ return false; } 
#endif
# 640 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> static int 
# 641
dequeue(char *sQueueStartPointer, void *&data, int *procId, int maxShared = -1, int minPercent = 80) {int volatile ___ = 1;(void)sQueueStartPointer;(void)data;(void)procId;(void)maxShared;(void)minPercent;::exit(___);}
#if 0
# 641
{ return 0; } 
#endif
# 642 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> static int 
# 643
dequeueSelected(char *sQueueStartPointer, void *&data, int procId, int maxNum = -1, int minPercent = 80) {int volatile ___ = 1;(void)sQueueStartPointer;(void)data;(void)procId;(void)maxNum;(void)minPercent;::exit(___);}
#if 0
# 643
{ return 0; } 
#endif
# 644 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> static int2 
# 645
dequeueStartRead(char *sQueueStartPointer, void *&data, int *procId_info, int maxShared = -1, int minPercent = 80) {int volatile ___ = 1;(void)sQueueStartPointer;(void)data;(void)procId_info;(void)maxShared;(void)minPercent;::exit(___);}
#if 0
# 645
{ return make_int2(0, 0); } 
#endif
# 646 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class Procedure> static void 
# 647
finishRead(char *sQueueStartPointer, int id, int num) {int volatile ___ = 1;(void)sQueueStartPointer;(void)id;(void)num;::exit(___);}
#if 0
# 647
{ } 
#endif
# 648 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static std::__cxx11::string name() { return ""; } 
# 650
void printName() 
# 651
{int volatile ___ = 1;
# 653
::exit(___);}
#if 0
# 651
{ 
# 652
printf("%s\n", __PRETTY_FUNCTION__); 
# 653
} 
#endif
# 654 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
}; 
# 661
template< class ProcInfo, int MaxSize, template< class >  class SharedQTraits, bool 
# 662
WarpOptimization> 
# 663
class SharedStaticQueue : public SharedQueueElement< ProcInfo, typename SQElementTraitsPeel< ProcInfo, ProcInfo::NumProcedures - 1, 0, SharedQTraits, SharedQTraits< typename Select< ProcInfo, 0> ::Procedure> ::QueueSize> ::Proc, MaxSize, SQElementTraitsPeel< ProcInfo, ProcInfo::NumProcedures - 1, 0, SharedQTraits, SharedQTraits< typename Select< ProcInfo, 0> ::Procedure> ::QueueSize> , SQElementTraitsPeel< ProcInfo, ProcInfo::NumProcedures - 1, 0, SharedQTraits, SharedQTraits< typename Select< ProcInfo, 0> ::Procedure> ::QueueSize> , WarpOptimization>  { 
# 671
}; 
# 674
template< int MaxSize, template< class >  class SharedQTraits, bool WarpOptimization> 
# 675
class SharedStaticQueueTyping { 
# 677
template< class ProcInfo> 
# 678
class Type : public SharedQueueElement< ProcInfo, typename SQElementTraitsPeel< ProcInfo, ProcInfo::NumProcedures - 1, 0, SharedQTraits, SharedQTraits< typename Select< ProcInfo, 0> ::Procedure> ::QueueSize> ::Proc, MaxSize, SQElementTraitsPeel< ProcInfo, ProcInfo::NumProcedures - 1, 0, SharedQTraits, SharedQTraits< typename Select< ProcInfo, 0> ::Procedure> ::QueueSize> , SQElementTraitsPeel< ProcInfo, ProcInfo::NumProcedures - 1, 0, SharedQTraits, SharedQTraits< typename Select< ProcInfo, 0> ::Procedure> ::QueueSize> , WarpOptimization>  { 
# 683
}; 
# 684
}; 
# 689
template< class ProcedureInfo, template< class >  class ExternalQueue, template< class >  class SharedQueue, int SharedQueueFillupThreshold = 80, int GotoGlobalChance = 0> 
# 690
class SharedCombinerQueue : protected ExternalQueue< ProcedureInfo>  { 
# 692
typedef ExternalQueue< ProcedureInfo>  ExtQ; 
# 693
typedef SharedQueue< ProcedureInfo>  SharedQ; 
# 696
public: static const bool needTripleCall = false; 
# 697
static const bool supportReuseInit = (ExtQ::supportReuseInit); 
# 698
static const int requiredShared = (ExtQ::requiredShared + SharedQ::requiredShared); 
# 699
static const int globalMaintainMinThreads = (ExtQ::globalMaintainMinThreads); 
# 700
static int globalMaintainSharedMemory(int Threads) { return ExtQ::globalMaintainSharedMemory(Threads); } 
# 703
void init() 
# 704
{int volatile ___ = 1;
# 706
::exit(___);}
#if 0
# 704
{ 
# 705
ExtQ::init(); 
# 706
} 
#endif
# 708 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class PROCEDURE> bool 
# 709
enqueueInitial(typename PROCEDURE::ExpectedData data) 
# 710
{int volatile ___ = 1;(void)data;
# 712
::exit(___);}
#if 0
# 710
{ 
# 711
return ExternalQueue< ProcedureInfo> ::template enqueueInitial< PROCEDURE> (data); 
# 712
} 
#endif
# 716 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class PROCEDURE> bool 
# 717
enqueue(typename PROCEDURE::ExpectedData data) 
# 718
{int volatile ___ = 1;(void)data;
# 727
::exit(___);}
#if 0
# 718
{ 
# 719
__attribute__((unused)) extern ::uint s_data[]; 
# 720
if ((GotoGlobalChance == 0) || ::whippletree::random::warp_check(100 - GotoGlobalChance)) { 
# 721
if (SharedQueue< ProcedureInfo> ::template enqueue< PROCEDURE> (reinterpret_cast< char *>(s_data), data)) 
# 722
{ 
# 724
return true; 
# 725
}  }  
# 726
return ExternalQueue< ProcedureInfo> ::template enqueue< PROCEDURE> (data); 
# 727
} 
#endif
# 731 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< int threads, class PROCEDURE> bool 
# 732
enqueue(typename PROCEDURE::ExpectedData *data) 
# 733
{int volatile ___ = 1;(void)data;
# 742
::exit(___);}
#if 0
# 733
{ 
# 734
__attribute__((unused)) extern ::uint s_data[]; 
# 735
if ((GotoGlobalChance == 0) || ::whippletree::random::warp_check(100 - GotoGlobalChance)) { 
# 736
if (SharedQueue< ProcedureInfo> ::template enqueue< threads, PROCEDURE> (reinterpret_cast< char *>(s_data), data)) 
# 737
{ 
# 739
return true; 
# 740
}  }  
# 741
return ExternalQueue< ProcedureInfo> ::template enqueue< threads, PROCEDURE> (data); 
# 742
} 
#endif
# 747 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> int 
# 748
dequeue(void *&data, int *&procId, int maxShared = -1) 
# 749
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 756
::exit(___);}
#if 0
# 749
{ 
# 750
__attribute__((unused)) extern ::uint s_data[]; 
# 751
int d = SharedQueue< ProcedureInfo> ::template dequeue< MultiProcedure> (reinterpret_cast< char *>(s_data), data, procId, maxShared, SharedQueueFillupThreshold); 
# 752
if (d > 0) { return d; }  
# 753
d = ExternalQueue< ProcedureInfo> ::template dequeue< MultiProcedure> (data, procId, maxShared); 
# 754
if (d > 0) { return d; }  
# 755
return SharedQueue< ProcedureInfo> ::template dequeue< MultiProcedure> (reinterpret_cast< char *>(s_data), data, procId, maxShared, 0); 
# 756
} 
#endif
# 760 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> int 
# 761
dequeueSelected(void *&data, int procId, int maxShared = -1) 
# 762
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 769
::exit(___);}
#if 0
# 762
{ 
# 763
__attribute__((unused)) extern ::uint s_data[]; 
# 764
int d = (SharedQ::dequeueSelected < MultiProcedure) > (((((reinterpret_cast< char *>(s_data)), data), procId), maxShared), SharedQueueFillupThreshold); 
# 765
if (d > 0) { return d; }  
# 766
d = ExternalQueue< ProcedureInfo> ::template dequeueSelected< MultiProcedure> (data, procId, maxShared); 
# 767
if (d > 0) { return d; }  
# 768
return (SharedQ::dequeueSelected < MultiProcedure) > (((((reinterpret_cast< char *>(s_data)), data), procId), maxShared), 0); 
# 769
} 
#endif
# 777 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> int 
# 778
dequeueStartRead(void *&data, int *&procId, int maxShared = -1) 
# 779
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 803
::exit(___);}
#if 0
# 779
{ 
# 780
__attribute__((unused)) extern ::uint s_data[]; 
# 781
::int2 d = (SharedQ::dequeueStartRead < MultiProcedure) > (((((reinterpret_cast< char *>(s_data)), data), procId), maxShared), SharedQueueFillupThreshold); 
# 782
if ((d.x) > 0) 
# 783
{ 
# 785
(procId[1]) = ((d.y) | 1073741824); 
# 786
return d.x; 
# 787
}  
# 788
(d.x) = ExternalQueue< ProcedureInfo> ::template dequeueStartRead< MultiProcedure> (data, procId, maxShared); 
# 789
if ((d.x) > 0) 
# 790
{ 
# 793
return d.x; 
# 794
}  
# 795
d = ((SharedQ::dequeueStartRead < MultiProcedure) > (((((reinterpret_cast< char *>(s_data)), data), procId), maxShared), 0)); 
# 796
if ((d.x) > 0) 
# 797
{ 
# 799
(procId[1]) = ((d.y) | 1073741824); 
# 800
return d.x; 
# 801
}  
# 802
return 0; 
# 803
} 
#endif
# 806 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> int 
# 807
dequeueStartRead1(void *&data, int *&procId, int maxShared = -1) 
# 808
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 813
::exit(___);}
#if 0
# 808
{ 
# 809
__attribute__((unused)) extern ::uint s_data[]; 
# 810
::int2 d = (SharedQ::dequeueStartRead < MultiProcedure) > (((((reinterpret_cast< char *>(s_data)), data), procId), maxShared), SharedQueueFillupThreshold); 
# 811
(procId[1]) = ((d.y) | 1073741824); 
# 812
return d.x; 
# 813
} 
#endif
# 814 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> int 
# 815
dequeueStartRead2(void *&data, int *&procId, int maxShared = -1) 
# 816
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 820
::exit(___);}
#if 0
# 816
{ 
# 817
__attribute__((unused)) extern ::uint s_data[]; 
# 819
return ExternalQueue< ProcedureInfo> ::template dequeueStartRead< MultiProcedure> (reinterpret_cast< char *>(s_data), data, procId, maxShared); 
# 820
} 
#endif
# 821 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< bool MultiProcedure> int 
# 822
dequeueStartRead3(void *&data, int *&procId, int maxShared = -1) 
# 823
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 828
::exit(___);}
#if 0
# 823
{ 
# 824
__attribute__((unused)) extern ::uint s_data[]; 
# 825
::int2 d = (SharedQ::dequeueStartRead < MultiProcedure) > (((((reinterpret_cast< char *>(s_data)), data), procId), maxShared), 0); 
# 826
(procId[1]) = ((d.y) | 1073741824); 
# 827
return d.x; 
# 828
} 
#endif
# 832 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class PROCEDURE> void 
# 833
finishRead1(int id, int num) 
# 834
{int volatile ___ = 1;(void)id;(void)num;
# 837
::exit(___);}
#if 0
# 834
{ 
# 835
__attribute__((unused)) extern ::uint s_data[]; 
# 836
SharedQueue< ProcedureInfo> ::template finishRead< PROCEDURE> (reinterpret_cast< char *>(s_data), id & 1073741823, num); 
# 837
} 
#endif
# 838 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class PROCEDURE> void 
# 839
finishRead2(int id, int num) 
# 840
{int volatile ___ = 1;(void)id;(void)num;
# 842
::exit(___);}
#if 0
# 840
{ 
# 841
ExternalQueue< ProcedureInfo> ::template finishRead< PROCEDURE> (id, num); 
# 842
} 
#endif
# 843 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class PROCEDURE> void 
# 844
finishRead3(int id, int num) 
# 845
{int volatile ___ = 1;(void)id;(void)num;
# 847
::exit(___);}
#if 0
# 845
{ 
# 846
finishRead1< PROCEDURE> (id, num); 
# 847
} 
#endif
# 855 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class PROCEDURE> int 
# 856
startRead(void *&data, int num) 
# 857
{int volatile ___ = 1;(void)data;(void)num;
# 859
::exit(___);}
#if 0
# 857
{ 
# 858
return ExternalQueue< ProcedureInfo> ::template startRead< PROCEDURE> (data, num); 
# 859
} 
#endif
# 863 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
template< class PROCEDURE> void 
# 864
finishRead(int id, int num) 
# 865
{int volatile ___ = 1;(void)id;(void)num;
# 879
::exit(___);}
#if 0
# 865
{ 
# 866
__attribute__((unused)) extern ::uint s_data[]; 
# 867
if (id & 1073741824) 
# 868
{ 
# 869
SharedQueue< ProcedureInfo> ::template finishRead< PROCEDURE> (reinterpret_cast< char *>(s_data), id & 1073741823, num); 
# 872
} else 
# 874
{ 
# 875
ExternalQueue< ProcedureInfo> ::template finishRead< PROCEDURE> (id, num); 
# 878
}  
# 879
} 
#endif
# 881 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void numEntries(int *counts) 
# 882
{int volatile ___ = 1;(void)counts;
# 884
::exit(___);}
#if 0
# 882
{ 
# 883
ExtQ::numEntries(counts); 
# 884
} 
#endif
# 887 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void record() 
# 888
{int volatile ___ = 1;
# 890
::exit(___);}
#if 0
# 888
{ 
# 889
ExtQ::record(); 
# 890
} 
#endif
# 891 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void reset() 
# 892
{int volatile ___ = 1;
# 894
::exit(___);}
#if 0
# 892
{ 
# 893
ExtQ::reset(); 
# 894
} 
#endif
# 897 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void workerStart() 
# 898
{int volatile ___ = 1;
# 901
::exit(___);}
#if 0
# 898
{ 
# 899
__attribute__((unused)) extern ::uint s_data[]; 
# 900
SharedQ::init(reinterpret_cast< char *>(s_data)); 
# 901
} 
#endif
# 902 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void workerMaintain() 
# 903
{int volatile ___ = 1;
# 906
::exit(___);}
#if 0
# 903
{ 
# 904
__attribute__((unused)) extern ::uint s_data[]; 
# 905
SharedQ::maintain(reinterpret_cast< char *>(s_data)); 
# 906
} 
#endif
# 907 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void workerEnd() 
# 908
{int volatile ___ = 1;
# 910
::exit(___);}
#if 0
# 908
{ 
# 910
} 
#endif
# 911 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
void globalMaintain() 
# 912
{int volatile ___ = 1;
# 914
::exit(___);}
#if 0
# 912
{ 
# 913
ExtQ::globalMaintain(); 
# 914
} 
#endif
# 916 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
static ::std::__cxx11::string name() 
# 917
{ 
# 918
if (GotoGlobalChance > 0) { 
# 919
return ((((((::std::__cxx11::string)("SharedCombinedQueue_GolbalProp")) + ::std::to_string((unsigned long long)GotoGlobalChance)) + "_") + SharedQ::name()) + "/") + ExtQ::name(); }  
# 920
return ((((::std::__cxx11::string)("SharedCombinedQueue_")) + SharedQ::name()) + "/") + ExtQ::name(); 
# 921
} 
# 923
void printName() 
# 924
{int volatile ___ = 1;
# 926
::exit(___);}
#if 0
# 924
{ 
# 925
printf("%s\n", __PRETTY_FUNCTION__); 
# 926
} 
#endif
# 928 "/home/zhengzhen/workspace/versapipe/queueShared.cuh"
}; 
# 38 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
template< uint TElementSize, uint TQueueSize, class TAdditionalData> 
# 39
class QueueExternalFetch : public BasicQueue< void> , protected QueueStorage< TElementSize, void, TQueueSize>  { 
# 41
static const ::uint ElementSize = ((((TElementSize) + sizeof(::uint)) - (1)) / sizeof(::uint)); 
# 42
int count; 
# 43
int readCount; 
# 44
int maxcount; 
# 47
public: void printName() 
# 48
{int volatile ___ = 1;
# 50
::exit(___);}
#if 0
# 48
{ 
# 49
printf("%s\n", __PRETTY_FUNCTION__); 
# 50
} 
#endif
# 52 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
void init() 
# 53
{int volatile ___ = 1;
# 56
::exit(___);}
#if 0
# 53
{ 
# 54
QueueStorage< TElementSize, void, TQueueSize> ::init(); 
# 55
(maxcount) = ((readCount) = ((count) = 0)); 
# 56
} 
#endif
# 58 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
static ::std::__cxx11::string name() 
# 59
{ 
# 60
return "ExternalFetch"; 
# 61
} 
# 63
template< class Data> bool 
# 64
enqueueInitial(Data data) 
# 65
{int volatile ___ = 1;(void)data;
# 70
::exit(___);}
#if 0
# 65
{ 
# 66
int pos = atomicAdd(&(maxcount), 1); 
# 67
::uint info = prepareData(data); 
# 68
writeData(data, make_uint2(pos, info)); 
# 69
return true; 
# 70
} 
#endif
# 72 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
template< class Data> bool 
# 73
enqueue(Data data) 
# 74
{int volatile ___ = 1;(void)data;
# 77
::exit(___);}
#if 0
# 74
{ 
# 75
printf("ERROR QueueExternalFetch does not support enqueue\n"); 
# 76
return false; 
# 77
} 
#endif
# 81 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
int dequeue(void *data, int num) 
# 82
{int volatile ___ = 1;(void)data;(void)num;
# 106
::exit(___);}
#if 0
# 82
{ 
# 83
__attribute__((unused)) ::uint2 offset_take; 
# 84
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 85
{ 
# 86
int rc = atomicAdd(&(readCount), num); 
# 87
int available = (maxcount) - rc; 
# 88
if (available < num) { 
# 89
atomicSub(&(readCount), max(0, min(num - available, num))); }  
# 90
if (available > 0) { 
# 91
rc = atomicAdd((int *)(&(count)), min(available, num)); }  
# 93
(offset_take.x) = (max(0, rc)); 
# 94
(offset_take.y) = (max(0, min(available, num))); 
# 95
}  
# 96
__syncthreads(); 
# 99
if ((__device_builtin_variable_threadIdx.x) < (offset_take.y)) 
# 100
{ 
# 101
QueueStorage< TElementSize, void, TQueueSize> ::readData((reinterpret_cast< ::uint *>(data)) + ((__device_builtin_variable_threadIdx.x) * ElementSize), (offset_take.x) + (__device_builtin_variable_threadIdx.x)); 
# 102
__threadfence(); 
# 103
}  
# 104
__syncthreads(); 
# 105
return offset_take.y; 
# 106
} 
#endif
# 109 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
int reserveRead(int maxnum, bool only_read_all = false) 
# 110
{int volatile ___ = 1;(void)maxnum;(void)only_read_all;
# 131
::exit(___);}
#if 0
# 110
{ 
# 111
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh", 111); 
# 112
__attribute__((unused)) int num; 
# 113
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 114
{ 
# 115
int available = (maxcount) - atomicAdd(&(readCount), maxnum); 
# 116
if ((available < maxnum) && only_read_all) 
# 117
{ 
# 118
atomicSub(&(readCount), maxnum); 
# 119
num = 0; 
# 120
} else { 
# 121
if (available < maxnum) 
# 122
{ 
# 123
atomicSub((int *)(&(readCount)), max(0, min(maxnum, maxnum - available))); 
# 124
num = max(0, min(available, maxnum)); 
# 125
} else { 
# 127
num = maxnum; }  }  
# 128
}  
# 129
__syncthreads(); 
# 130
return num; 
# 131
} 
#endif
# 134 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
int startRead(void *&data, int pos, int num) 
# 135
{int volatile ___ = 1;(void)data;(void)pos;(void)num;
# 146
::exit(___);}
#if 0
# 135
{ 
# 136
__attribute__((unused)) int offset; 
# 137
if (num > 0) 
# 138
{ 
# 139
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 140
offset = atomicAdd((int *)(&(count)), num); }  
# 141
__syncthreads(); 
# 142
if (pos < num) { 
# 143
data = QueueStorage< TElementSize, void, TQueueSize> ::readDataPointers(offset + pos); }  
# 144
}  
# 145
return num; 
# 146
} 
#endif
# 148 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
void finishRead(int id, int num) 
# 149
{int volatile ___ = 1;(void)id;(void)num;
# 150
::exit(___);}
#if 0
# 149
{ 
# 150
} 
#endif
# 153 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
::uint size() 
# 154
{int volatile ___ = 1;
# 157
::exit(___);}
#if 0
# 154
{ 
# 155
printf("%s in %s, at line %d\n", __FUNCTION__, "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh", 155); 
# 156
return max((maxcount) - (readCount), 0); 
# 157
} 
#endif
# 159 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
void record() 
# 160
{int volatile ___ = 1;
# 161
::exit(___);}
#if 0
# 160
{ 
# 161
} 
#endif
# 162 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
void reset() 
# 163
{int volatile ___ = 1;
# 166
::exit(___);}
#if 0
# 163
{ 
# 164
(count) = 0; 
# 165
(readCount) = 0; 
# 166
} 
#endif
# 167 "/home/zhengzhen/workspace/versapipe/queueExternalFetch.cuh"
}; 
# 44 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class PROCINFO, class PROCEDURE, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalPackageQueue, uint PacakgeQueueSize, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalItemQueue, uint ItemQueueSize, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InitialDataQueue, uint InitialDataQueueSize, bool Itemized, bool InitialQueue> struct QueueSelector; 
# 47
template< class PROCINFO, class PROCEDURE, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalPackageQueue, uint PacakgeQueueSize, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalItemQueue, uint ItemQueueSize, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InitialDataQueue, uint InitialDataQueueSize> 
# 48
struct QueueSelector< PROCINFO, PROCEDURE, InternalPackageQueue, PacakgeQueueSize, InternalItemQueue, ItemQueueSize, InitialDataQueue, InitialDataQueueSize, true, false>  : public InternalItemQueue< sizeof(typename PROCEDURE::ExpectedData), ItemQueueSize, void>  { 
# 51
static const bool Itemized = true; 
# 52
typedef PROCINFO ProcInfo; 
# 53
typedef PROCEDURE Procedure; 
# 55
void record() {int volatile ___ = 1;::exit(___);}
#if 0
# 55
{ } 
#endif
# 56 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
void reset() {int volatile ___ = 1;::exit(___);}
#if 0
# 56
{ } 
#endif
# 57 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 58
template< class PROCINFO, class PROCEDURE, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalPackageQueue, uint PackageQueueSize, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalItemQueue, uint ItemQueueSize, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InitialDataQueue, uint InitialDataQueueSize> 
# 59
struct QueueSelector< PROCINFO, PROCEDURE, InternalPackageQueue, PackageQueueSize, InternalItemQueue, ItemQueueSize, InitialDataQueue, InitialDataQueueSize, false, false>  : public InternalPackageQueue< sizeof(typename PROCEDURE::ExpectedData), PackageQueueSize, void>  { 
# 62
static const bool Itemized = false; 
# 63
typedef PROCINFO ProcInfo; 
# 64
typedef PROCEDURE Procedure; 
# 66
void record() {int volatile ___ = 1;::exit(___);}
#if 0
# 66
{ } 
#endif
# 67 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
void reset() {int volatile ___ = 1;::exit(___);}
#if 0
# 67
{ } 
#endif
# 68 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 71
template< class PROCINFO, class PROCEDURE, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalPackageQueue, uint PackageQueueSize, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalItemQueue, uint ItemQueueSize, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InitialDataQueue, uint InitialDataQueueSize, bool TItemized> 
# 72
struct QueueSelector< PROCINFO, PROCEDURE, InternalPackageQueue, PackageQueueSize, InternalItemQueue, ItemQueueSize, InitialDataQueue, InitialDataQueueSize, TItemized, true>  : public InitialDataQueue< sizeof(typename PROCEDURE::ExpectedData), InitialDataQueueSize, void>  { 
# 75
static const bool Itemized = TItemized; 
# 76
typedef PROCINFO ProcInfo; 
# 77
typedef PROCEDURE Procedure; 
# 78
}; 
# 82
template< class ProcedureInfo, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalPackageQueue, uint PackageQueueSize, 
# 83
template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalItemQueue, uint ItemQueueSize, bool RandomSelect = false> 
# 84
class PerProcedureVersatileQueue : public Queue<>  { 
# 86
template< class TProcedure> 
# 87
struct QueueAttachment : public QueueSelector< ProcedureInfo, TProcedure, InternalPackageQueue, PackageQueueSize, InternalItemQueue, ItemQueueSize, QueueExternalFetch, 131072U, TProcedure::ItemInput, TProcedure::InitialProcedure>  { 
# 88
}; 
# 92
Attach< QueueAttachment, ProcedureInfo>  queues; 
# 94
int dummy[32]; 
# 96
template< bool MultiProcedure> 
# 97
class Visitor { 
# 99
uint _haveSomething; 
# 100
int *&_procId; 
# 101
void *&_data; 
# 104
const int _itemizedThreshold; 
# 105
int _maxShared; 
# 107
public: Visitor(int *&procId, void *&data, int minItems, int maxShared) : _haveSomething((0)), _procId(procId), _data(data), _itemizedThreshold(minItems), _maxShared(maxShared) 
# 109
{int *volatile ___ = 0;(void)procId;(void)data;(void)minItems;(void)maxShared;::free(___);}
#if 0
# 109
{ } 
#endif
# 110 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
uint haveSomething() const 
# 111
{int volatile ___ = 1;
# 113
::exit(___);}
#if 0
# 111
{ 
# 112
return _haveSomething; 
# 113
} 
#endif
# 119 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 120
visit(TQAttachment &q) 
# 121
{int volatile ___ = 1;(void)q;
# 163
::exit(___);}
#if 0
# 121
{ 
# 122
typedef typename TQAttachment::Procedure Procedure; 
# 123
const bool Itemized = (TQAttachment::Itemized); 
# 125
__attribute__((unused)) volatile int ssize; 
# 126
ssize = (q.size()); 
# 127
__syncthreads(); 
# 128
int size = ssize; 
# 129
__syncthreads(); 
# 130
if (size == 0) { 
# 131
return false; }  
# 134
if (Itemized || MultiProcedure) 
# 135
{ 
# 136
int itemThreadCount = (Procedure::NumThreads > 0) ? Procedure::NumThreads : (MultiProcedure ? __device_builtin_variable_blockDim.x : (1)); 
# 139
if ((size * itemThreadCount) >= (_itemizedThreshold)) 
# 140
{ 
# 141
int nItems = (Procedure::sharedMemory != 0) ? min((__device_builtin_variable_blockDim.x) / itemThreadCount, (_maxShared) / (((uint)sizeof(typename TQAttachment::Procedure::ExpectedData)) + Procedure::sharedMemory)) : min((__device_builtin_variable_blockDim.x) / itemThreadCount, (_maxShared) / ((uint)sizeof(typename TQAttachment::Procedure::ExpectedData))); 
# 145
nItems = min(nItems, getElementCount< typename TQAttachment::Procedure, MultiProcedure> ()); 
# 146
(_haveSomething) = (q.dequeue(_data, nItems)); 
# 147
if ((__device_builtin_variable_threadIdx.x) < ((_haveSomething) * itemThreadCount)) 
# 148
{ 
# 149
(_data) = ((reinterpret_cast< char *>(_data)) + (sizeof(typename TQAttachment::Procedure::ExpectedData) * ((__device_builtin_variable_threadIdx.x) / itemThreadCount))); 
# 150
(_haveSomething) *= itemThreadCount; 
# 151
((_procId)[0]) = findProcId< ProcedureInfo, typename TQAttachment::Procedure> ::value; 
# 152
}  
# 153
return (_haveSomething) > (0); 
# 154
}  
# 155
return false; 
# 156
} else 
# 158
{ 
# 159
(_haveSomething) = ((q.dequeue(_data, 1)) * ((Procedure::NumThreads > 0) ? Procedure::NumThreads : (__device_builtin_variable_blockDim.x))); 
# 160
((_procId)[0]) = findProcId< ProcedureInfo, typename TQAttachment::Procedure> ::value; 
# 161
return (_haveSomething) > (0); 
# 162
}  
# 163
} 
#endif
# 164 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 167
template< bool MultiProcedure> 
# 168
class ReadVisitor { 
# 170
uint _haveSomething; 
# 171
int *&_procId; 
# 172
void *&_data; 
# 173
int _itemizedThreshold; 
# 175
int _maxShared; 
# 177
public: ReadVisitor(int *&procId, void *&data, int minItems, int maxShared) : _haveSomething((0)), _procId(procId), _data(data), _itemizedThreshold(minItems), _maxShared(maxShared) 
# 179
{int *volatile ___ = 0;(void)procId;(void)data;(void)minItems;(void)maxShared;::free(___);}
#if 0
# 179
{ } 
#endif
# 180 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
uint haveSomething() const 
# 181
{int volatile ___ = 1;
# 183
::exit(___);}
#if 0
# 181
{ 
# 182
return _haveSomething; 
# 183
} 
#endif
# 185 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
void setMinItems(int minItems) 
# 186
{int volatile ___ = 1;(void)minItems;
# 188
::exit(___);}
#if 0
# 186
{ 
# 187
(_itemizedThreshold) = minItems; 
# 188
} 
#endif
# 193 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 194
visit(TQAttachment &q) 
# 195
{int volatile ___ = 1;(void)q;
# 242
::exit(___);}
#if 0
# 195
{ 
# 196
typedef typename TQAttachment::Procedure Procedure; 
# 198
__attribute__((unused)) volatile int ssize; 
# 199
ssize = (q.size()); 
# 200
__syncthreads(); 
# 201
int size = ssize; 
# 202
__syncthreads(); 
# 203
if (size == 0) { 
# 204
return false; }  
# 208
{ 
# 209
int itemThreadCount = (Procedure::NumThreads > 0) ? Procedure::NumThreads : (MultiProcedure ? __device_builtin_variable_blockDim.x : (1)); 
# 210
if ((size * itemThreadCount) >= (_itemizedThreshold)) 
# 211
{ 
# 212
int nItems = (Procedure::sharedMemory != 0) ? min((__device_builtin_variable_blockDim.x) / itemThreadCount, (_maxShared) / Procedure::sharedMemory) : ((__device_builtin_variable_blockDim.x) / itemThreadCount); 
# 213
nItems = min(nItems, getElementCount< typename TQAttachment::Procedure, MultiProcedure> ()); 
# 214
(_haveSomething) = (q.reserveRead(nItems)); 
# 215
if ((_haveSomething) != (0)) 
# 216
{ 
# 217
((_procId)[1]) = (q.startRead(_data, (__device_builtin_variable_threadIdx.x) / itemThreadCount, _haveSomething)); 
# 219
(_haveSomething) *= itemThreadCount; 
# 220
((_procId)[0]) = findProcId< ProcedureInfo, typename TQAttachment::Procedure> ::value; 
# 222
return true; 
# 223
}  
# 224
}  
# 225
} 
# 241
return false; 
# 242
} 
#endif
# 243 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 245
template< bool MultiProcedure> 
# 246
class ReadSelectedVisitor { 
# 248
uint _haveSomething; 
# 249
int *&_procId; 
# 250
void *&_data; 
# 251
const int _itemizedThreshold; 
# 252
int _maxShared; 
# 254
public: ReadSelectedVisitor(int *&procId, void *&data, int minItems, int maxShared) : _haveSomething((0)), _procId(procId), _data(data), _itemizedThreshold(minItems), _maxShared(maxShared) 
# 256
{int *volatile ___ = 0;(void)procId;(void)data;(void)minItems;(void)maxShared;::free(___);}
#if 0
# 256
{ } 
#endif
# 257 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
uint haveSomething() const 
# 258
{int volatile ___ = 1;
# 260
::exit(___);}
#if 0
# 258
{ 
# 259
return _haveSomething; 
# 260
} 
#endif
# 264 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 265
visit(TQAttachment &q) 
# 266
{int volatile ___ = 1;(void)q;
# 337
::exit(___);}
#if 0
# 266
{ 
# 275
typedef typename TQAttachment::Procedure Procedure; 
# 276
const bool Itemized = (TQAttachment::Itemized); 
# 278
__attribute__((unused)) volatile int ssize; 
# 279
ssize = (q.size()); 
# 280
__syncthreads(); 
# 281
int size = ssize; 
# 282
__syncthreads(); 
# 283
if (size == 0) { 
# 284
return false; }  
# 288
if (Itemized || MultiProcedure) 
# 289
{ 
# 290
int itemThreadCount = (Procedure::NumThreads > 0) ? Procedure::NumThreads : (MultiProcedure ? __device_builtin_variable_blockDim.x : (1)); 
# 292
if ((size * itemThreadCount) >= (_itemizedThreshold)) 
# 293
{ 
# 295
int nItems = (Procedure::sharedMemory != 0) ? min((__device_builtin_variable_blockDim.x) / itemThreadCount, (_maxShared) / Procedure::sharedMemory) : ((__device_builtin_variable_blockDim.x) / itemThreadCount); 
# 298
nItems = min(nItems, getElementCount< typename TQAttachment::Procedure, MultiProcedure> ()); 
# 299
(_haveSomething) = (q.reserveRead(nItems)); 
# 300
if ((_haveSomething) != (0)) 
# 301
{ 
# 307
int index = (q.startRead(_data, (__device_builtin_variable_threadIdx.x) / itemThreadCount, _haveSomething)); 
# 315
(_haveSomething) *= itemThreadCount; 
# 316
((_procId)[1]) = index; 
# 321
return true; 
# 322
}  
# 323
}  
# 324
} else 
# 326
{ 
# 328
(_haveSomething) = (q.reserveRead(1)); 
# 329
if ((_haveSomething) != (0)) 
# 330
{ 
# 331
int id = (q.startRead(_data, 0, _haveSomething)); 
# 332
(_haveSomething) *= ((Procedure::NumThreads > 0) ? Procedure::NumThreads : (__device_builtin_variable_blockDim.x)); 
# 333
return true; 
# 334
}  
# 335
}  
# 336
return false; 
# 337
} 
#endif
# 338 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 340
struct NameVisitor { 
# 342
std::__cxx11::string name; 
# 343
template< class Procedure> bool 
# 344
visit() 
# 345
{ 
# 346
if ((name).size() > (0)) { 
# 347
((name) += (",")); }  
# 348
(name) += Procedure::name(); 
# 349
return false; 
# 350
} 
# 351
}; 
# 353
struct InitVisitor { 
# 355
template< class TQAttachment> bool 
# 356
visit(TQAttachment &q) 
# 357
{int volatile ___ = 1;(void)q;
# 360
::exit(___);}
#if 0
# 357
{ 
# 358
(q.init()); 
# 359
return false; 
# 360
} 
#endif
# 361 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 363
template< class TProcedure> 
# 364
struct EnqueueInitialVisitor { 
# 366
typename TProcedure::ExpectedData &data; 
# 367
bool res; 
# 368
EnqueueInitialVisitor(typename TProcedure::ExpectedData &d) : data(d) {int *volatile ___ = 0;(void)d;::free(___);}
#if 0
# 368
{ } 
#endif
# 371 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 372
visit(TQAttachment &q) 
# 373
{int volatile ___ = 1;(void)q;
# 384
::exit(___);}
#if 0
# 373
{ 
# 375
(res) = (q.template enqueueInitial< typename TProcedure::ExpectedData> (data)); 
# 383
return true; 
# 384
} 
#endif
# 385 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 387
template< class TProcedure> 
# 388
struct EnqueueVisitor { 
# 390
typename TProcedure::ExpectedData &data; 
# 391
bool res; 
# 392
EnqueueVisitor(typename TProcedure::ExpectedData &d) : data(d) {int *volatile ___ = 0;(void)d;::free(___);}
#if 0
# 392
{ } 
#endif
# 393 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 394
visit(TQAttachment &q) 
# 395
{int volatile ___ = 1;(void)q;
# 398
::exit(___);}
#if 0
# 395
{ 
# 396
(res) = (q.template enqueue< typename TProcedure::ExpectedData> (data)); 
# 397
return true; 
# 398
} 
#endif
# 399 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 401
template< int Threads, class TProcedure> 
# 402
struct EnqueueThreadsVisitor { 
# 404
typename TProcedure::ExpectedData *data; 
# 405
bool res; 
# 406
EnqueueThreadsVisitor(typename TProcedure::ExpectedData *d) : data(d) {int *volatile ___ = 0;(void)d;::free(___);}
#if 0
# 406
{ } 
#endif
# 408 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 409
visit(TQAttachment &q) 
# 410
{int volatile ___ = 1;(void)q;
# 413
::exit(___);}
#if 0
# 410
{ 
# 411
(res) = (q.template enqueue< Threads, typename TProcedure::ExpectedData> (data)); 
# 412
return true; 
# 413
} 
#endif
# 414 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 416
template< bool MultiProcedure> 
# 417
struct DequeueSelectedVisitor { 
# 419
void *&data; 
# 420
int maxNum; 
# 421
int res; 
# 423
DequeueSelectedVisitor(void *&data, int maxNum) : data(data), maxNum(maxNum) {int *volatile ___ = 0;(void)data;(void)maxNum;::free(___);}
#if 0
# 423
{ } 
#endif
# 425 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 426
visit(TQAttachment &q) 
# 427
{int volatile ___ = 1;(void)q;
# 430
::exit(___);}
#if 0
# 427
{ 
# 428
(res) = (q.dequeueSelected(data, TQAttachment::ProcedureId, maxNum)); 
# 429
return true; 
# 430
} 
#endif
# 431 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 454
template< class TProcedure> 
# 455
struct ReserveReadVisitor { 
# 457
int maxNum; 
# 458
int res; 
# 460
ReserveReadVisitor(int maxNum) : maxNum(maxNum) {int *volatile ___ = 0;(void)maxNum;::free(___);}
#if 0
# 460
{ } 
#endif
# 462 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 463
visit(TQAttachment &q) 
# 464
{int volatile ___ = 1;(void)q;
# 467
::exit(___);}
#if 0
# 464
{ 
# 465
(res) = (q.reserveRead(maxNum)); 
# 466
return true; 
# 467
} 
#endif
# 468 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 470
template< class TProcedure> 
# 471
struct StartReadVisitor { 
# 473
void *&data; 
# 474
int num; 
# 475
int res; 
# 477
StartReadVisitor(void *&data, int num) : data(data), num(num) {int *volatile ___ = 0;(void)data;(void)num;::free(___);}
#if 0
# 477
{ } 
#endif
# 479 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 480
visit(TQAttachment &q) 
# 481
{int volatile ___ = 1;(void)q;
# 484
::exit(___);}
#if 0
# 481
{ 
# 482
(res) = (q.startRead(data, getThreadOffset< TProcedure, true> (), num)); 
# 483
return true; 
# 484
} 
#endif
# 485 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 487
template< class TProcedure> 
# 488
struct FinishReadVisitor { 
# 490
int id; 
# 491
int num; 
# 493
FinishReadVisitor(int id, int num) : id(id), num(num) {int *volatile ___ = 0;(void)id;(void)num;::free(___);}
#if 0
# 493
{ } 
#endif
# 495 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 496
visit(TQAttachment &q) 
# 497
{int volatile ___ = 1;(void)q;
# 500
::exit(___);}
#if 0
# 497
{ 
# 498
(q.finishRead(id, num)); 
# 499
return true; 
# 500
} 
#endif
# 501 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 503
struct IsEmptyVisitor { 
# 505
bool *res; 
# 507
IsEmptyVisitor(bool *isEmp) : res(isEmp) {int *volatile ___ = 0;(void)isEmp;::free(___);}
#if 0
# 507
{ } 
#endif
# 509 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 510
visit(TQAttachment &q) 
# 511
{int volatile ___ = 1;(void)q;
# 516
::exit(___);}
#if 0
# 511
{ 
# 513
(*(res)) &= ((q.size()) == 0); 
# 515
return false; 
# 516
} 
#endif
# 517 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 520
struct NumEntriesVisitor { 
# 522
int *counts; 
# 523
int i; 
# 525
NumEntriesVisitor(int *counts) : counts(counts), i(0) {int *volatile ___ = 0;(void)counts;::free(___);}
#if 0
# 525
{ } 
#endif
# 527 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 528
visit(TQAttachment &q) 
# 529
{int volatile ___ = 1;(void)q;
# 533
::exit(___);}
#if 0
# 529
{ 
# 530
((counts)[i]) = (q.size()); 
# 531
++(i); 
# 532
return false; 
# 533
} 
#endif
# 534 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 537
struct RecordVisitor { 
# 539
template< class TQAttachment> bool 
# 540
visit(TQAttachment &q) 
# 541
{int volatile ___ = 1;(void)q;
# 544
::exit(___);}
#if 0
# 541
{ 
# 542
(q.record()); 
# 543
return false; 
# 544
} 
#endif
# 545 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 547
struct ResetVisitor { 
# 549
template< class TQAttachment> bool 
# 550
visit(TQAttachment &q) 
# 551
{int volatile ___ = 1;(void)q;
# 554
::exit(___);}
#if 0
# 551
{ 
# 552
(q.reset()); 
# 553
return false; 
# 554
} 
#endif
# 555 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 557
template< class TProcedure> 
# 558
struct SizeVisitor { 
# 560
int res; 
# 561
SizeVisitor() {int *volatile ___ = 0;::free(___);}
#if 0
# 561
{ } 
#endif
# 564 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 565
visit(TQAttachment &q) 
# 566
{int volatile ___ = 1;(void)q;
# 571
::exit(___);}
#if 0
# 566
{ 
# 568
(res) = (q.size()); 
# 570
return true; 
# 571
} 
#endif
# 572 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 574
template< class TProcedure> 
# 575
struct CapacityVisitor { 
# 577
int res; 
# 578
CapacityVisitor() {int *volatile ___ = 0;::free(___);}
#if 0
# 578
{ } 
#endif
# 581 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 582
visit(TQAttachment &q) 
# 583
{int volatile ___ = 1;(void)q;
# 588
::exit(___);}
#if 0
# 583
{ 
# 585
(res) = (q.capacity()); 
# 587
return true; 
# 588
} 
#endif
# 589 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 591
template< class TProcedure> 
# 592
struct IsFillVisitor { 
# 594
bool res; 
# 595
float portion; 
# 596
IsFillVisitor(float pt) : portion(pt) {int *volatile ___ = 0;(void)pt;::free(___);}
#if 0
# 596
{ } 
#endif
# 599 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class TQAttachment> bool 
# 600
visit(TQAttachment &q) 
# 601
{int volatile ___ = 1;(void)q;
# 606
::exit(___);}
#if 0
# 601
{ 
# 603
(res) = (q.isFill(portion)); 
# 605
return true; 
# 606
} 
#endif
# 607 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 613
public: 
# 612
template< class PROCEDURE> int 
# 613
size() 
# 614
{int volatile ___ = 1;
# 619
::exit(___);}
#if 0
# 614
{ 
# 616
SizeVisitor< PROCEDURE>  visitor; 
# 617
((queues).template VisitSpecific< SizeVisitor< PROCEDURE> , PROCEDURE> (visitor)); 
# 618
return visitor.res; 
# 619
} 
#endif
# 622 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class PROCEDURE> int 
# 623
capacity() 
# 624
{int volatile ___ = 1;
# 629
::exit(___);}
#if 0
# 624
{ 
# 626
CapacityVisitor< PROCEDURE>  visitor; 
# 627
((queues).template VisitSpecific< CapacityVisitor< PROCEDURE> , PROCEDURE> (visitor)); 
# 628
return visitor.res; 
# 629
} 
#endif
# 633 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class PROCEDURE> bool 
# 634
isFill(float portion) 
# 635
{int volatile ___ = 1;(void)portion;
# 640
::exit(___);}
#if 0
# 635
{ 
# 637
IsFillVisitor< PROCEDURE>  visitor(portion); 
# 638
((queues).template VisitSpecific< IsFillVisitor< PROCEDURE> , PROCEDURE> (visitor)); 
# 639
return visitor.res; 
# 640
} 
#endif
# 642 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
Attach< QueueAttachment, ProcedureInfo>  &getAttach() 
# 643
{int volatile ___ = 1;
# 645
::exit(___);}
#if 0
# 643
{ 
# 644
return queues; 
# 645
} 
#endif
# 647 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
static const bool supportReuseInit = true; 
# 649
static std::__cxx11::string name() 
# 650
{ 
# 654
return (((((std::__cxx11::string)("DistributedPerProcedure[")) + InternalPackageQueue< 16U, PackageQueueSize, void> ::name()) + ",") + InternalItemQueue< 16U, ItemQueueSize, void> ::name()) + "]"; 
# 655
} 
# 657
void printName() 
# 658
{int volatile ___ = 1;
# 660
::exit(___);}
#if 0
# 658
{ 
# 659
printf("%s\n", __PRETTY_FUNCTION__); 
# 660
} 
#endif
# 662 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
void init() 
# 663
{int volatile ___ = 1;
# 666
::exit(___);}
#if 0
# 663
{ 
# 664
InitVisitor visitor; 
# 665
((queues).template VisitAll< InitVisitor> (visitor)); 
# 666
} 
#endif
# 670 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class PROCEDURE> bool 
# 671
enqueueInitial(typename PROCEDURE::ExpectedData data) 
# 672
{int volatile ___ = 1;(void)data;
# 699
::exit(___);}
#if 0
# 672
{ 
# 696
EnqueueInitialVisitor< PROCEDURE>  visitor(data); 
# 697
((queues).template VisitSpecific< EnqueueInitialVisitor< PROCEDURE> , PROCEDURE> (visitor)); 
# 698
return visitor.res; 
# 699
} 
#endif
# 702 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class PROCEDURE> bool 
# 703
enqueue(typename PROCEDURE::ExpectedData data) 
# 704
{int volatile ___ = 1;(void)data;
# 708
::exit(___);}
#if 0
# 704
{ 
# 705
EnqueueVisitor< PROCEDURE>  visitor(data); 
# 706
((queues).template VisitSpecific< EnqueueVisitor< PROCEDURE> , PROCEDURE> (visitor)); 
# 707
return visitor.res; 
# 708
} 
#endif
# 711 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< int threads, class PROCEDURE> bool 
# 712
enqueue(typename PROCEDURE::ExpectedData *data) 
# 713
{int volatile ___ = 1;(void)data;
# 717
::exit(___);}
#if 0
# 713
{ 
# 714
EnqueueThreadsVisitor< threads, PROCEDURE>  visitor(data); 
# 715
((queues).template VisitSpecific< EnqueueThreadsVisitor< threads, PROCEDURE> , PROCEDURE> (visitor)); 
# 716
return visitor.res; 
# 717
} 
#endif
# 723 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< bool MultiProcedure> int 
# 724
dequeue(void *&data, int *&procId, int maxShared = 100000) 
# 725
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 745
::exit(___);}
#if 0
# 725
{ 
# 726
if (!RandomSelect) 
# 727
{ 
# 728
Visitor< MultiProcedure>  visitor(procId, data, __device_builtin_variable_blockDim.x, maxShared); 
# 729
if (((queues).template visitAll< Visitor< MultiProcedure> > (visitor))) { 
# 730
return (visitor.haveSomething()); }  
# 731
Visitor< MultiProcedure>  visitor2(procId, data, 0, maxShared); 
# 732
if (((queues).template visitAll< Visitor< MultiProcedure> > (visitor2))) { 
# 733
return (visitor2.haveSomething()); }  
# 734
} else 
# 736
{ 
# 737
Visitor< MultiProcedure>  visitor(procId, data, __device_builtin_variable_blockDim.x, maxShared); 
# 738
if (((queues).template VisitAllRandStart< Visitor< MultiProcedure> > (visitor))) { 
# 739
return (visitor.haveSomething()); }  
# 740
Visitor< MultiProcedure>  visitor2(procId, data, 0, maxShared); 
# 741
if (((queues).template VisitAllRandStart< Visitor< MultiProcedure> > (visitor2))) { 
# 742
return (visitor2.haveSomething()); }  
# 743
}  
# 744
return 0; 
# 745
} 
#endif
# 748 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< bool MultiProcedure> int 
# 749
dequeueSelected(void *&data, int procId, int maxNum = -1) 
# 750
{int volatile ___ = 1;(void)data;(void)procId;(void)maxNum;
# 756
::exit(___);}
#if 0
# 750
{ 
# 752
DequeueSelectedVisitor< MultiProcedure>  visitor(data, maxNum); 
# 753
(visitor.res) = 0; 
# 754
((queues).template VisitSpecific< DequeueSelectedVisitor< MultiProcedure> > (visitor, procId)); 
# 755
return visitor.res; 
# 756
} 
#endif
# 762 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< bool MultiProcedure> int 
# 763
dequeueStartRead(void *&data, int *&procId, int maxShared = 100000) 
# 764
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 811
::exit(___);}
#if 0
# 764
{ 
# 766
if (!RandomSelect) 
# 767
{ 
# 768
ReadVisitor< MultiProcedure>  visitor(procId, data, __device_builtin_variable_blockDim.x, maxShared); 
# 769
if (((queues).template VisitAll< ReadVisitor< MultiProcedure> > (visitor))) { 
# 770
return (visitor.haveSomething()); }  
# 771
(visitor.setMinItems(0)); 
# 773
if (((queues).template VisitAll< ReadVisitor< MultiProcedure> > (visitor))) { 
# 774
return (visitor.haveSomething()); }  
# 777
}  
# 810
return 0; 
# 811
} 
#endif
# 814 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< bool MultiProcedure> int 
# 815
dequeueStartReadSelected(void *&data, int *&procId, int maxNum = -1) 
# 816
{int volatile ___ = 1;(void)data;(void)procId;(void)maxNum;
# 853
::exit(___);}
#if 0
# 816
{ 
# 819
ReadSelectedVisitor< MultiProcedure>  visitor(procId, data, __device_builtin_variable_blockDim.x, maxNum); 
# 820
if (((queues).template VisitSpecific< ReadSelectedVisitor< MultiProcedure> > (visitor, procId[0]))) 
# 821
{ 
# 836
return (visitor.haveSomething()); 
# 837
}  
# 838
ReadSelectedVisitor< MultiProcedure>  visitor2(procId, data, 0, maxNum); 
# 839
if (((queues).template VisitSpecific< ReadSelectedVisitor< MultiProcedure> > (visitor2, procId[0]))) 
# 840
{ 
# 849
return (visitor2.haveSomething()); 
# 850
}  
# 852
return 0; 
# 853
} 
#endif
# 857 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class PROCEDURE> int 
# 858
reserveRead(int maxNum = -1) 
# 859
{int volatile ___ = 1;(void)maxNum;
# 868
::exit(___);}
#if 0
# 859
{ 
# 862
if (maxNum == (-1)) { 
# 863
maxNum = ((__device_builtin_variable_blockDim.x) / ((PROCEDURE::NumThreads > 0) ? PROCEDURE::NumThreads : ((PROCEDURE::ItemInput) ? 1 : (__device_builtin_variable_blockDim.x)))); }  
# 865
ReserveReadVisitor< PROCEDURE>  visitor(maxNum); 
# 866
((queues).template VisitSpecific< ReserveReadVisitor< PROCEDURE> , PROCEDURE> (visitor)); 
# 867
return visitor.res; 
# 868
} 
#endif
# 871 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class PROCEDURE> int 
# 872
startRead(void *&data, int num) 
# 873
{int volatile ___ = 1;(void)data;(void)num;
# 877
::exit(___);}
#if 0
# 873
{ 
# 874
StartReadVisitor< PROCEDURE>  visitor(data, num); 
# 875
((queues).template VisitSpecific< StartReadVisitor< PROCEDURE> , PROCEDURE> (visitor)); 
# 876
return visitor.res; 
# 877
} 
#endif
# 880 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
template< class PROCEDURE> void 
# 881
finishRead(int id, int num) 
# 882
{int volatile ___ = 1;(void)id;(void)num;
# 885
::exit(___);}
#if 0
# 882
{ 
# 883
FinishReadVisitor< PROCEDURE>  visitor(id, num); 
# 884
((queues).template VisitSpecific< FinishReadVisitor< PROCEDURE> , PROCEDURE> (visitor)); 
# 885
} 
#endif
# 887 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
bool isEmpty() 
# 888
{int volatile ___ = 1;
# 894
::exit(___);}
#if 0
# 888
{ 
# 889
bool isEmpty = true; 
# 890
IsEmptyVisitor visitor(&isEmpty); 
# 891
((queues).template VisitAll< IsEmptyVisitor> (visitor)); 
# 893
return isEmpty; 
# 894
} 
#endif
# 896 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
void numEntries(int *counts) 
# 897
{int volatile ___ = 1;(void)counts;
# 900
::exit(___);}
#if 0
# 897
{ 
# 898
NumEntriesVisitor visitor(counts); 
# 899
((queues).template VisitAll< NumEntriesVisitor> (visitor)); 
# 900
} 
#endif
# 902 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
void record() 
# 903
{int volatile ___ = 1;
# 906
::exit(___);}
#if 0
# 903
{ 
# 904
RecordVisitor visitor; 
# 905
((queues).template VisitAll< RecordVisitor> (visitor)); 
# 906
} 
#endif
# 908 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
void reset() 
# 909
{int volatile ___ = 1;
# 912
::exit(___);}
#if 0
# 909
{ 
# 910
ResetVisitor visitor; 
# 911
((queues).template VisitAll< ResetVisitor> (visitor)); 
# 912
} 
#endif
# 913 "/home/zhengzhen/workspace/versapipe/queuingPerProc.cuh"
}; 
# 919
template< class ProcedureInfo, template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalQueue, uint QueueSize, bool RandomSelect = false> 
# 920
class PerProcedureQueue : public PerProcedureVersatileQueue< ProcedureInfo, InternalQueue, QueueSize, InternalQueue, QueueSize, RandomSelect>  { 
# 922
}; 
# 924
template< template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalQueue, uint PackageQueueSize, uint ItemQueueSize, bool RandomSelect = false> 
# 925
struct PerProcedureQueueDualSizeTyping { 
# 927
template< class ProcedureInfo> 
# 928
class Type : public PerProcedureVersatileQueue< ProcedureInfo, InternalQueue, PackageQueueSize, InternalQueue, ItemQueueSize, RandomSelect>  { }; 
# 929
}; 
# 932
template< template< uint TElementSize, uint TQueueSize, class TAdditionalData>  class InternalQueue, uint QueueSize, bool RandomSelect = false> 
# 933
struct PerProcedureQueueTyping { 
# 935
template< class ProcedureInfo> 
# 936
class Type : public PerProcedureVersatileQueue< ProcedureInfo, InternalQueue, QueueSize, InternalQueue, QueueSize, RandomSelect>  { }; 
# 937
}; 
# 59 "/usr/include/c++/5/bits/stl_raw_storage_iter.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 67
template< class _OutputIterator, class _Tp> 
# 68
class raw_storage_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 72
protected: _OutputIterator _M_iter; 
# 76
public: explicit raw_storage_iterator(_OutputIterator __x) : _M_iter(__x) 
# 77
{ } 
# 80
raw_storage_iterator &operator*() { return *this; } 
# 83
raw_storage_iterator &operator=(const _Tp &__element) 
# 84
{ 
# 85
std::_Construct(std::__addressof(*(_M_iter)), __element); 
# 86
return *this; 
# 87
} 
# 90
raw_storage_iterator &operator++() 
# 91
{ 
# 92
++(_M_iter); 
# 93
return *this; 
# 94
} 
# 97
raw_storage_iterator operator++(int) 
# 98
{ 
# 99
raw_storage_iterator __tmp = *this; 
# 100
++(_M_iter); 
# 101
return __tmp; 
# 102
} 
# 103
}; 
# 106
}
# 39 "/usr/include/c++/5/typeinfo" 3
#pragma GCC visibility push ( default )
# 41
extern "C++" {
# 43
namespace __cxxabiv1 { 
# 45
class __class_type_info; 
# 46
}
# 80
namespace std { 
# 88
class type_info { 
# 95
public: virtual ~type_info(); 
# 99
const char *name() const noexcept 
# 100
{ return (((__name)[0]) == ('*')) ? (__name) + 1 : (__name); } 
# 115
bool before(const type_info &__arg) const noexcept 
# 116
{ return ((((__name)[0]) == ('*')) && (((__arg.__name)[0]) == ('*'))) ? (__name) < (__arg.__name) : (__builtin_strcmp(__name, __arg.__name) < 0); 
# 118
} 
# 120
bool operator==(const type_info &__arg) const noexcept 
# 121
{ 
# 122
return ((__name) == (__arg.__name)) || ((((__name)[0]) != ('*')) && (__builtin_strcmp(__name, __arg.__name) == 0)); 
# 125
} 
# 136
bool operator!=(const type_info &__arg) const noexcept 
# 137
{ return !this->operator==(__arg); } 
# 140
size_t hash_code() const noexcept 
# 141
{ 
# 143
return _Hash_bytes(this->name(), __builtin_strlen(this->name()), static_cast< size_t>(3339675911UL)); 
# 148
} 
# 152
virtual bool __is_pointer_p() const; 
# 155
virtual bool __is_function_p() const; 
# 163
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 167
virtual bool __do_upcast(const __cxxabiv1::__class_type_info * __target, void ** __obj_ptr) const; 
# 171
protected: const char *__name; 
# 173
explicit type_info(const char *__n) : __name(__n) { } 
# 177
private: type_info &operator=(const type_info &); 
# 178
type_info(const type_info &); 
# 179
}; 
# 187
class bad_cast : public exception { 
# 190
public: bad_cast() noexcept { } 
# 194
virtual ~bad_cast() noexcept; 
# 197
virtual const char *what() const noexcept; 
# 198
}; 
# 204
class bad_typeid : public exception { 
# 207
public: bad_typeid() noexcept { } 
# 211
virtual ~bad_typeid() noexcept; 
# 214
virtual const char *what() const noexcept; 
# 215
}; 
# 216
}
# 218
}
# 220
#pragma GCC visibility pop
# 40 "/usr/include/c++/5/ext/concurrence.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 49
enum _Lock_policy { _S_single, _S_mutex, _S_atomic}; 
# 53
static const _Lock_policy __default_lock_policy = _S_atomic; 
# 67
class __concurrence_lock_error : public std::exception { 
# 71
public: virtual const char *what() const throw() 
# 72
{ return "__gnu_cxx::__concurrence_lock_error"; } 
# 73
}; 
# 75
class __concurrence_unlock_error : public std::exception { 
# 79
public: virtual const char *what() const throw() 
# 80
{ return "__gnu_cxx::__concurrence_unlock_error"; } 
# 81
}; 
# 83
class __concurrence_broadcast_error : public std::exception { 
# 87
public: virtual const char *what() const throw() 
# 88
{ return "__gnu_cxx::__concurrence_broadcast_error"; } 
# 89
}; 
# 91
class __concurrence_wait_error : public std::exception { 
# 95
public: virtual const char *what() const throw() 
# 96
{ return "__gnu_cxx::__concurrence_wait_error"; } 
# 97
}; 
# 101
inline void __throw_concurrence_lock_error() 
# 102
{ throw __concurrence_lock_error(); } 
# 105
inline void __throw_concurrence_unlock_error() 
# 106
{ throw __concurrence_unlock_error(); } 
# 110
inline void __throw_concurrence_broadcast_error() 
# 111
{ throw __concurrence_broadcast_error(); } 
# 114
inline void __throw_concurrence_wait_error() 
# 115
{ throw __concurrence_wait_error(); } 
# 118
class __mutex { 
# 122
__gthread_mutex_t _M_mutex = {{0, (0), 0, (0), 0, (0), (0), {(0), (0)}}}; 
# 127
__mutex(const __mutex &); 
# 128
__mutex &operator=(const __mutex &); 
# 131
public: __mutex() 
# 132
{ 
# 137
} 
# 147
void lock() 
# 148
{ 
# 150
if (__gthread_active_p()) 
# 151
{ 
# 152
if (__gthread_mutex_lock(&(_M_mutex)) != 0) { 
# 153
__throw_concurrence_lock_error(); }  
# 154
}  
# 156
} 
# 158
void unlock() 
# 159
{ 
# 161
if (__gthread_active_p()) 
# 162
{ 
# 163
if (__gthread_mutex_unlock(&(_M_mutex)) != 0) { 
# 164
__throw_concurrence_unlock_error(); }  
# 165
}  
# 167
} 
# 169
__gthread_mutex_t *gthread_mutex() 
# 170
{ return &(_M_mutex); } 
# 171
}; 
# 173
class __recursive_mutex { 
# 177
__gthread_recursive_mutex_t _M_mutex = {{0, (0), 0, (0), (PTHREAD_MUTEX_RECURSIVE_NP), (0), (0), {(0), (0)}}}; 
# 182
__recursive_mutex(const __recursive_mutex &); 
# 183
__recursive_mutex &operator=(const __recursive_mutex &); 
# 186
public: __recursive_mutex() 
# 187
{ 
# 192
} 
# 202
void lock() 
# 203
{ 
# 205
if (__gthread_active_p()) 
# 206
{ 
# 207
if (__gthread_recursive_mutex_lock(&(_M_mutex)) != 0) { 
# 208
__throw_concurrence_lock_error(); }  
# 209
}  
# 211
} 
# 213
void unlock() 
# 214
{ 
# 216
if (__gthread_active_p()) 
# 217
{ 
# 218
if (__gthread_recursive_mutex_unlock(&(_M_mutex)) != 0) { 
# 219
__throw_concurrence_unlock_error(); }  
# 220
}  
# 222
} 
# 224
__gthread_recursive_mutex_t *gthread_recursive_mutex() 
# 225
{ return &(_M_mutex); } 
# 226
}; 
# 231
class __scoped_lock { 
# 234
public: typedef __mutex __mutex_type; 
# 237
private: __mutex_type &_M_device; 
# 239
__scoped_lock(const __scoped_lock &); 
# 240
__scoped_lock &operator=(const __scoped_lock &); 
# 243
public: explicit __scoped_lock(__mutex_type &__name) : _M_device(__name) 
# 244
{ (_M_device).lock(); } 
# 246
~__scoped_lock() throw() 
# 247
{ (_M_device).unlock(); } 
# 248
}; 
# 251
class __cond { 
# 255
__gthread_cond_t _M_cond = {{0, (0), (0), (0), (0), ((void *)0), (0), (0)}}; 
# 260
__cond(const __cond &); 
# 261
__cond &operator=(const __cond &); 
# 264
public: __cond() 
# 265
{ 
# 270
} 
# 280
void broadcast() 
# 281
{ 
# 283
if (__gthread_active_p()) 
# 284
{ 
# 285
if (__gthread_cond_broadcast(&(_M_cond)) != 0) { 
# 286
__throw_concurrence_broadcast_error(); }  
# 287
}  
# 289
} 
# 291
void wait(__mutex *mutex) 
# 292
{ 
# 294
{ 
# 295
if (__gthread_cond_wait(&(_M_cond), mutex->gthread_mutex()) != 0) { 
# 296
__throw_concurrence_wait_error(); }  
# 297
} 
# 299
} 
# 301
void wait_recursive(__recursive_mutex *mutex) 
# 302
{ 
# 304
{ 
# 305
if (__gthread_cond_wait_recursive(&(_M_cond), mutex->gthread_recursive_mutex()) != 0) { 
# 308
__throw_concurrence_wait_error(); }  
# 309
} 
# 311
} 
# 312
}; 
# 316
}
# 60 "/usr/include/c++/5/functional" 3
namespace std __attribute((__visibility__("default"))) { 
# 64
template< class _MemberPointer> class _Mem_fn; 
# 66
template< class _Tp, class _Class> inline _Mem_fn< _Tp (_Class::*)>  mem_fn(_Tp (_Class::*)) noexcept; 
# 71
template< class _Functor, class  = __void_t< > > 
# 72
struct _Maybe_get_result_type { 
# 73
}; 
# 75
template< class _Functor> 
# 76
struct _Maybe_get_result_type< _Functor, __void_t< typename _Functor::result_type> >  { 
# 78
typedef typename _Functor::result_type result_type; }; 
# 84
template< class _Functor> 
# 85
struct _Weak_result_type_impl : public _Maybe_get_result_type< _Functor>  { 
# 87
}; 
# 90
template< class _Res, class ..._ArgTypes> 
# 91
struct _Weak_result_type_impl< _Res (_ArgTypes ...)>  { 
# 92
typedef _Res result_type; }; 
# 94
template< class _Res, class ..._ArgTypes> 
# 95
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...)>  { 
# 96
typedef _Res result_type; }; 
# 98
template< class _Res, class ..._ArgTypes> 
# 99
struct _Weak_result_type_impl< _Res (_ArgTypes ...) const>  { 
# 100
typedef _Res result_type; }; 
# 102
template< class _Res, class ..._ArgTypes> 
# 103
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...) const>  { 
# 104
typedef _Res result_type; }; 
# 106
template< class _Res, class ..._ArgTypes> 
# 107
struct _Weak_result_type_impl< _Res (_ArgTypes ...) volatile>  { 
# 108
typedef _Res result_type; }; 
# 110
template< class _Res, class ..._ArgTypes> 
# 111
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...) volatile>  { 
# 112
typedef _Res result_type; }; 
# 114
template< class _Res, class ..._ArgTypes> 
# 115
struct _Weak_result_type_impl< _Res (_ArgTypes ...) const volatile>  { 
# 116
typedef _Res result_type; }; 
# 118
template< class _Res, class ..._ArgTypes> 
# 119
struct _Weak_result_type_impl< _Res (_ArgTypes ..., ...) const volatile>  { 
# 120
typedef _Res result_type; }; 
# 123
template< class _Res, class ..._ArgTypes> 
# 124
struct _Weak_result_type_impl< _Res (&)(_ArgTypes ...)>  { 
# 125
typedef _Res result_type; }; 
# 127
template< class _Res, class ..._ArgTypes> 
# 128
struct _Weak_result_type_impl< _Res (&)(_ArgTypes ..., ...)>  { 
# 129
typedef _Res result_type; }; 
# 132
template< class _Res, class ..._ArgTypes> 
# 133
struct _Weak_result_type_impl< _Res (*)(_ArgTypes ...)>  { 
# 134
typedef _Res result_type; }; 
# 136
template< class _Res, class ..._ArgTypes> 
# 137
struct _Weak_result_type_impl< _Res (*)(_ArgTypes ..., ...)>  { 
# 138
typedef _Res result_type; }; 
# 141
template< class _Res, class _Class, class ..._ArgTypes> 
# 142
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ...)>  { 
# 143
typedef _Res result_type; }; 
# 145
template< class _Res, class _Class, class ..._ArgTypes> 
# 146
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ..., ...)>  { 
# 147
typedef _Res result_type; }; 
# 150
template< class _Res, class _Class, class ..._ArgTypes> 
# 151
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ...) const>  { 
# 152
typedef _Res result_type; }; 
# 154
template< class _Res, class _Class, class ..._ArgTypes> 
# 155
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ..., ...) const>  { 
# 156
typedef _Res result_type; }; 
# 159
template< class _Res, class _Class, class ..._ArgTypes> 
# 160
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ...) volatile>  { 
# 161
typedef _Res result_type; }; 
# 163
template< class _Res, class _Class, class ..._ArgTypes> 
# 164
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ..., ...) volatile>  { 
# 165
typedef _Res result_type; }; 
# 168
template< class _Res, class _Class, class ..._ArgTypes> 
# 169
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ...) const volatile>  { 
# 171
typedef _Res result_type; }; 
# 173
template< class _Res, class _Class, class ..._ArgTypes> 
# 174
struct _Weak_result_type_impl< _Res (_Class::*)(_ArgTypes ..., ...) const volatile>  { 
# 176
typedef _Res result_type; }; 
# 182
template< class _Functor> 
# 183
struct _Weak_result_type : public _Weak_result_type_impl< typename remove_cv< _Functor> ::type>  { 
# 185
}; 
# 191
template< class _Functor, class ..._Args> inline typename enable_if< (!is_member_pointer< _Functor> ::value) && (!is_function< _Functor> ::value) && (!is_function< typename remove_pointer< _Functor> ::type> ::value), typename result_of< _Functor &(_Args && ...)> ::type> ::type 
# 199
__invoke(_Functor &__f, _Args &&...__args) 
# 200
{ 
# 201
return __f(std::forward< _Args> (__args)...); 
# 202
} 
# 204
template< class _Functor, class ..._Args> inline typename enable_if< is_member_pointer< _Functor> ::value && (!is_function< _Functor> ::value) && (!is_function< typename remove_pointer< _Functor> ::type> ::value), typename result_of< _Functor (_Args && ...)> ::type> ::type 
# 212
__invoke(_Functor &__f, _Args &&...__args) 
# 213
{ 
# 214
return std::mem_fn(__f)(std::forward< _Args> (__args)...); 
# 215
} 
# 218
template< class _Functor, class ..._Args> inline typename enable_if< is_pointer< _Functor> ::value && is_function< typename remove_pointer< _Functor> ::type> ::value, typename result_of< _Functor (_Args && ...)> ::type> ::type 
# 225
__invoke(_Functor __f, _Args &&...__args) 
# 226
{ 
# 227
return __f(std::forward< _Args> (__args)...); 
# 228
} 
# 235
template< bool _Unary, bool _Binary, class _Tp> struct _Reference_wrapper_base_impl; 
# 239
template< class _Tp> 
# 240
struct _Reference_wrapper_base_impl< false, false, _Tp>  : public _Weak_result_type< _Tp>  { 
# 242
}; 
# 245
template< class _Tp> 
# 246
struct _Reference_wrapper_base_impl< true, false, _Tp>  : public _Weak_result_type< _Tp>  { 
# 249
typedef typename _Tp::argument_type argument_type; 
# 250
}; 
# 253
template< class _Tp> 
# 254
struct _Reference_wrapper_base_impl< false, true, _Tp>  : public _Weak_result_type< _Tp>  { 
# 257
typedef typename _Tp::first_argument_type first_argument_type; 
# 258
typedef typename _Tp::second_argument_type second_argument_type; 
# 259
}; 
# 262
template< class _Tp> 
# 263
struct _Reference_wrapper_base_impl< true, true, _Tp>  : public _Weak_result_type< _Tp>  { 
# 266
typedef typename _Tp::argument_type argument_type; 
# 267
typedef typename _Tp::first_argument_type first_argument_type; 
# 268
typedef typename _Tp::second_argument_type second_argument_type; 
# 269
}; 
# 271
template< class _Tp, class  = __void_t< > > struct __has_argument_type : public false_type { }; template< class _Tp> struct __has_argument_type< _Tp, __void_t< typename _Tp::argument_type> >  : public true_type { }; 
# 272
template< class _Tp, class  = __void_t< > > struct __has_first_argument_type : public false_type { }; template< class _Tp> struct __has_first_argument_type< _Tp, __void_t< typename _Tp::first_argument_type> >  : public true_type { }; 
# 273
template< class _Tp, class  = __void_t< > > struct __has_second_argument_type : public false_type { }; template< class _Tp> struct __has_second_argument_type< _Tp, __void_t< typename _Tp::second_argument_type> >  : public true_type { }; 
# 281
template< class _Tp> 
# 282
struct _Reference_wrapper_base : public _Reference_wrapper_base_impl< __has_argument_type< _Tp> ::value, __has_first_argument_type< _Tp> ::value && __has_second_argument_type< _Tp> ::value, _Tp>  { 
# 288
}; 
# 291
template< class _Res, class _T1> 
# 292
struct _Reference_wrapper_base< _Res (_T1)>  : public unary_function< _T1, _Res>  { 
# 294
}; 
# 296
template< class _Res, class _T1> 
# 297
struct _Reference_wrapper_base< _Res (_T1) const>  : public unary_function< _T1, _Res>  { 
# 299
}; 
# 301
template< class _Res, class _T1> 
# 302
struct _Reference_wrapper_base< _Res (_T1) volatile>  : public unary_function< _T1, _Res>  { 
# 304
}; 
# 306
template< class _Res, class _T1> 
# 307
struct _Reference_wrapper_base< _Res (_T1) const volatile>  : public unary_function< _T1, _Res>  { 
# 309
}; 
# 312
template< class _Res, class _T1, class _T2> 
# 313
struct _Reference_wrapper_base< _Res (_T1, _T2)>  : public binary_function< _T1, _T2, _Res>  { 
# 315
}; 
# 317
template< class _Res, class _T1, class _T2> 
# 318
struct _Reference_wrapper_base< _Res (_T1, _T2) const>  : public binary_function< _T1, _T2, _Res>  { 
# 320
}; 
# 322
template< class _Res, class _T1, class _T2> 
# 323
struct _Reference_wrapper_base< _Res (_T1, _T2) volatile>  : public binary_function< _T1, _T2, _Res>  { 
# 325
}; 
# 327
template< class _Res, class _T1, class _T2> 
# 328
struct _Reference_wrapper_base< _Res (_T1, _T2) const volatile>  : public binary_function< _T1, _T2, _Res>  { 
# 330
}; 
# 333
template< class _Res, class _T1> 
# 334
struct _Reference_wrapper_base< _Res (*)(_T1)>  : public unary_function< _T1, _Res>  { 
# 336
}; 
# 339
template< class _Res, class _T1, class _T2> 
# 340
struct _Reference_wrapper_base< _Res (*)(_T1, _T2)>  : public binary_function< _T1, _T2, _Res>  { 
# 342
}; 
# 345
template< class _Res, class _T1> 
# 346
struct _Reference_wrapper_base< _Res (_T1::*)(void)>  : public unary_function< _T1 *, _Res>  { 
# 348
}; 
# 351
template< class _Res, class _T1, class _T2> 
# 352
struct _Reference_wrapper_base< _Res (_T1::*)(_T2)>  : public binary_function< _T1 *, _T2, _Res>  { 
# 354
}; 
# 357
template< class _Res, class _T1> 
# 358
struct _Reference_wrapper_base< _Res (_T1::*)(void) const>  : public unary_function< const _T1 *, _Res>  { 
# 360
}; 
# 363
template< class _Res, class _T1, class _T2> 
# 364
struct _Reference_wrapper_base< _Res (_T1::*)(_T2) const>  : public binary_function< const _T1 *, _T2, _Res>  { 
# 366
}; 
# 369
template< class _Res, class _T1> 
# 370
struct _Reference_wrapper_base< _Res (_T1::*)(void) volatile>  : public unary_function< volatile _T1 *, _Res>  { 
# 372
}; 
# 375
template< class _Res, class _T1, class _T2> 
# 376
struct _Reference_wrapper_base< _Res (_T1::*)(_T2) volatile>  : public binary_function< volatile _T1 *, _T2, _Res>  { 
# 378
}; 
# 381
template< class _Res, class _T1> 
# 382
struct _Reference_wrapper_base< _Res (_T1::*)(void) const volatile>  : public unary_function< const volatile _T1 *, _Res>  { 
# 384
}; 
# 387
template< class _Res, class _T1, class _T2> 
# 388
struct _Reference_wrapper_base< _Res (_T1::*)(_T2) const volatile>  : public binary_function< const volatile _T1 *, _T2, _Res>  { 
# 390
}; 
# 397
template< class _Tp> 
# 398
class reference_wrapper : public _Reference_wrapper_base< typename remove_cv< _Tp> ::type>  { 
# 401
_Tp *_M_data; 
# 404
public: typedef _Tp type; 
# 406
reference_wrapper(_Tp &__indata) noexcept : _M_data(::std::__addressof(__indata)) 
# 408
{ } 
# 410
reference_wrapper(_Tp &&) = delete;
# 412
reference_wrapper(const reference_wrapper &) = default;
# 415
reference_wrapper &operator=(const reference_wrapper &) = default;
# 417
operator _Tp &() const noexcept 
# 418
{ return this->get(); } 
# 421
_Tp &get() const noexcept 
# 422
{ return *(_M_data); } 
# 424
template< class ..._Args> typename result_of< _Tp &(_Args && ...)> ::type 
# 426
operator()(_Args &&...__args) const 
# 427
{ 
# 428
return __invoke(get(), ::std::forward< _Args> (__args)...); 
# 429
} 
# 430
}; 
# 434
template< class _Tp> inline reference_wrapper< _Tp>  
# 436
ref(_Tp &__t) noexcept 
# 437
{ return ((reference_wrapper< _Tp> )(__t)); } 
# 440
template< class _Tp> inline reference_wrapper< const _Tp>  
# 442
cref(const _Tp &__t) noexcept 
# 443
{ return ((reference_wrapper< const _Tp> )(__t)); } 
# 445
template < typename _Tp >
    void ref ( const _Tp && ) = delete;
# 448
template < typename _Tp >
    void cref ( const _Tp && ) = delete;
# 452
template< class _Tp> inline reference_wrapper< _Tp>  
# 454
ref(reference_wrapper< _Tp>  __t) noexcept 
# 455
{ return ref((__t.get())); } 
# 458
template< class _Tp> inline reference_wrapper< const _Tp>  
# 460
cref(reference_wrapper< _Tp>  __t) noexcept 
# 461
{ return cref((__t.get())); } 
# 465
template< class ..._Types> 
# 466
struct _Pack : public integral_constant< unsigned long, sizeof...(_Types)>  { 
# 467
}; 
# 469
template< class _From, class _To, bool  = _From::value == _To::value> 
# 470
struct _AllConvertible : public false_type { 
# 471
}; 
# 473
template< class ..._From, class ..._To> 
# 474
struct _AllConvertible< _Pack< _From...> , _Pack< _To...> , true>  : public __and_< is_convertible< _From, _To> ...>  { 
# 476
}; 
# 478
template< class _Tp1, class _Tp2> using _NotSame = __not_< is_same< typename decay< _Tp1> ::type, typename decay< _Tp2> ::type> > ; 
# 487
template< class _Res, class ..._ArgTypes> 
# 488
struct _Maybe_unary_or_binary_function { }; 
# 491
template< class _Res, class _T1> 
# 492
struct _Maybe_unary_or_binary_function< _Res, _T1>  : public unary_function< _T1, _Res>  { 
# 493
}; 
# 496
template< class _Res, class _T1, class _T2> 
# 497
struct _Maybe_unary_or_binary_function< _Res, _T1, _T2>  : public binary_function< _T1, _T2, _Res>  { 
# 498
}; 
# 500
template< class _Signature> struct _Mem_fn_traits; 
# 503
template< class _Res, class _Class, class ..._ArgTypes> 
# 504
struct _Mem_fn_traits_base { 
# 506
using __result_type = _Res; 
# 507
using __class_type = _Class; 
# 508
using __arg_types = _Pack< _ArgTypes...> ; 
# 509
using __maybe_type = _Maybe_unary_or_binary_function< _Res, _Class *, _ArgTypes...> ; 
# 511
using __arity = integral_constant< unsigned long, sizeof...(_ArgTypes)> ; 
# 512
}; 
# 540
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...)>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...); using __lvalue = ::std::true_type; using __rvalue = ::std::true_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...)>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...); using __lvalue = ::std::true_type; using __rvalue = ::std::true_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) const; using __lvalue = ::std::true_type; using __rvalue = ::std::true_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) const; using __lvalue = ::std::true_type; using __rvalue = ::std::true_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) volatile; using __lvalue = ::std::true_type; using __rvalue = ::std::true_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) volatile; using __lvalue = ::std::true_type; using __rvalue = ::std::true_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) const volatile; using __lvalue = ::std::true_type; using __rvalue = ::std::true_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) const volatile; using __lvalue = ::std::true_type; using __rvalue = ::std::true_type; using __vararg = ::std::true_type; }; 
# 541
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) &>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) &; using __lvalue = ::std::true_type; using __rvalue = ::std::false_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) &>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) &; using __lvalue = ::std::true_type; using __rvalue = ::std::false_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const &>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) const &; using __lvalue = ::std::true_type; using __rvalue = ::std::false_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const &>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) const &; using __lvalue = ::std::true_type; using __rvalue = ::std::false_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile &>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) volatile &; using __lvalue = ::std::true_type; using __rvalue = ::std::false_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile &>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) volatile &; using __lvalue = ::std::true_type; using __rvalue = ::std::false_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile &>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) const volatile &; using __lvalue = ::std::true_type; using __rvalue = ::std::false_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile &>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) const volatile &; using __lvalue = ::std::true_type; using __rvalue = ::std::false_type; using __vararg = ::std::true_type; }; 
# 542
template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) &&>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) &&; using __lvalue = ::std::false_type; using __rvalue = ::std::true_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) &&>  : public _Mem_fn_traits_base< _Res, _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) &&; using __lvalue = ::std::false_type; using __rvalue = ::std::true_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const &&>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) const &&; using __lvalue = ::std::false_type; using __rvalue = ::std::true_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const &&>  : public _Mem_fn_traits_base< _Res, const _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) const &&; using __lvalue = ::std::false_type; using __rvalue = ::std::true_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) volatile &&>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) volatile &&; using __lvalue = ::std::false_type; using __rvalue = ::std::true_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) volatile &&>  : public _Mem_fn_traits_base< _Res, volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) volatile &&; using __lvalue = ::std::false_type; using __rvalue = ::std::true_type; using __vararg = ::std::true_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ...) const volatile &&>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ...) const volatile &&; using __lvalue = ::std::false_type; using __rvalue = ::std::true_type; using __vararg = ::std::false_type; }; template< class _Res, class _Class, class ..._ArgTypes> struct _Mem_fn_traits< _Res (_Class::*)(_ArgTypes ..., ...) const volatile &&>  : public _Mem_fn_traits_base< _Res, const volatile _Class, _ArgTypes...>  { using __pmf_type = _Res (_Class::*)(_ArgTypes ..., ...) const volatile &&; using __lvalue = ::std::false_type; using __rvalue = ::std::true_type; using __vararg = ::std::true_type; }; 
# 547
template< class _MemFunPtr, bool 
# 548
__is_mem_fn = is_member_function_pointer< _MemFunPtr> ::value> 
# 549
class _Mem_fn_base : public _Mem_fn_traits< _MemFunPtr> ::__maybe_type { 
# 552
using _Traits = _Mem_fn_traits< _MemFunPtr> ; 
# 554
using _Class = typename _Mem_fn_traits< _MemFunPtr> ::__class_type; 
# 555
using _ArgTypes = typename _Mem_fn_traits< _MemFunPtr> ::__arg_types; 
# 556
using _Pmf = typename _Mem_fn_traits< _MemFunPtr> ::__pmf_type; 
# 558
using _Arity = typename _Mem_fn_traits< _MemFunPtr> ::__arity; 
# 559
using _Varargs = typename _Mem_fn_traits< _MemFunPtr> ::__vararg; 
# 561
template< class _Func, class ..._BoundArgs> friend struct _Bind_check_arity; 
# 566
template< class _Args> using _CheckArgs = typename conditional< _Mem_fn_traits< _MemFunPtr> ::__vararg::value, ::std::__bool_constant< _Args::value >= _Mem_fn_traits< _MemFunPtr> ::__arg_types::value> , _AllConvertible< _Args, typename _Mem_fn_traits< _MemFunPtr> ::__arg_types> > ::type; 
# 573
public: using result_type = typename _Mem_fn_traits< _MemFunPtr> ::__result_type; 
# 575
explicit _Mem_fn_base(_Pmf __pmf) : _M_pmf(__pmf) { } 
# 578
template< class ..._Args, class _Req = ::std::_Require< typename _Mem_fn_traits< _MemFunPtr> ::__lvalue, _CheckArgs< _Pack< _Args...> > > > result_type 
# 582
operator()(_Class &__object, _Args &&...__args) const 
# 583
{ return (__object.*(_M_pmf))(::std::forward< _Args> (__args)...); } 
# 585
template< class ..._Args, class _Req = ::std::_Require< typename _Mem_fn_traits< _MemFunPtr> ::__rvalue, _CheckArgs< _Pack< _Args...> > > > result_type 
# 589
operator()(_Class &&__object, _Args &&...__args) const 
# 590
{ 
# 591
return (::std::move(__object).*(_M_pmf))(::std::forward< _Args> (__args)...); 
# 592
} 
# 595
template< class ..._Args, class _Req = ::std::_Require< typename _Mem_fn_traits< _MemFunPtr> ::__lvalue, _CheckArgs< _Pack< _Args...> > > > result_type 
# 599
operator()(_Class *__object, _Args &&...__args) const 
# 600
{ return (__object->*(_M_pmf))(::std::forward< _Args> (__args)...); } 
# 603
template< class _Tp, class ..._Args, class _Req = ::std::_Require< ::std::_NotSame< typename _Mem_fn_traits< _MemFunPtr> ::__class_type, _Tp> , ::std::_NotSame< typename _Mem_fn_traits< _MemFunPtr> ::__class_type *, _Tp> , _CheckArgs< _Pack< _Args...> > > > result_type 
# 607
operator()(_Tp &&__object, _Args &&...__args) const 
# 608
{ 
# 609
return _M_call(::std::forward< _Tp> (__object), &__object, ::std::forward< _Args> (__args)...); 
# 611
} 
# 614
template< class _Tp, class ..._Args, class _Req = ::std::_Require< is_base_of< typename _Mem_fn_traits< _MemFunPtr> ::__class_type, _Tp> , typename _Mem_fn_traits< _MemFunPtr> ::__lvalue, _CheckArgs< _Pack< _Args...> > > > result_type 
# 618
operator()(reference_wrapper< _Tp>  __ref, _Args &&...__args) const 
# 619
{ return operator()((__ref.get()), ::std::forward< _Args> (__args)...); } 
# 624
private: 
# 622
template< class _Tp, class ..._Args> result_type 
# 624
_M_call(_Tp &&__object, const volatile _Class *, _Args &&...
# 625
__args) const 
# 626
{ 
# 627
return (::std::forward< _Tp> (__object).*(_M_pmf))(::std::forward< _Args> (__args)...); 
# 629
} 
# 631
template< class _Tp, class ..._Args> result_type 
# 633
_M_call(_Tp &&__ptr, const volatile void *, _Args &&...__args) const 
# 634
{ return ((*__ptr).*(_M_pmf))(::std::forward< _Args> (__args)...); } 
# 636
_Pmf _M_pmf; 
# 637
}; 
# 640
template< class _Res, class _Class> 
# 641
class _Mem_fn_base< _Res (_Class::*), false>  { 
# 643
using __pm_type = _Res (_Class::*); 
# 648
template< class _Tp> auto 
# 650
_M_call(_Tp &&__object, const _Class *) const noexcept->__decltype((std::forward< _Tp> (__object).*std::declval< __pm_type &> ())) 
# 652
{ return std::forward< _Tp> (__object).*(_M_pm); } 
# 654
template< class _Tp, class _Up> auto 
# 656
_M_call(_Tp &&__object, _Up *const *) const noexcept->__decltype(((*std::forward< _Tp> (__object)).*std::declval< __pm_type &> ())) 
# 658
{ return (*std::forward< _Tp> (__object)).*(_M_pm); } 
# 660
template< class _Tp> auto 
# 662
_M_call(_Tp &&__ptr, const volatile void *) const noexcept(noexcept(((*__ptr).*std::declval< __pm_type &> ())))->__decltype(((*__ptr).*std::declval< __pm_type &> ())) 
# 665
{ return (*__ptr).*(_M_pm); } 
# 667
using _Arity = integral_constant< unsigned long, 0UL> ; 
# 668
using _Varargs = false_type; 
# 670
template< class _Func, class ..._BoundArgs> friend struct _Bind_check_arity; 
# 675
public: explicit _Mem_fn_base(_Res (_Class::*__pm)) noexcept : _M_pm(__pm) { } 
# 679
_Res &operator()(_Class &__object) const noexcept 
# 680
{ return __object.*(_M_pm); } 
# 683
const _Res &operator()(const _Class &__object) const noexcept 
# 684
{ return __object.*(_M_pm); } 
# 687
_Res &&operator()(_Class &&__object) const noexcept 
# 688
{ return std::forward< _Class> (__object).*(_M_pm); } 
# 691
const _Res &&operator()(const _Class &&__object) const noexcept 
# 692
{ return std::forward< const _Class> (__object).*(_M_pm); } 
# 696
_Res &operator()(_Class *__object) const noexcept 
# 697
{ return __object->*(_M_pm); } 
# 700
const _Res &operator()(const _Class *__object) const noexcept 
# 701
{ return __object->*(_M_pm); } 
# 704
template< class _Tp, class _Req = _Require< _NotSame< _Class *, _Tp> > > auto 
# 706
operator()(_Tp &&__unknown) const noexcept(noexcept((std::declval< std::_Mem_fn_base< _Res (_Class::*), false>  *> ()->_M_call(std::forward< _Tp> (__unknown), &__unknown))))->__decltype(((this->_M_call(std::forward< _Tp> (__unknown), &__unknown)))) 
# 710
{ return _M_call(std::forward< _Tp> (__unknown), &__unknown); } 
# 712
template< class _Tp, class _Req = _Require< is_base_of< _Class, _Tp> > > auto 
# 714
operator()(reference_wrapper< _Tp>  __ref) const noexcept(noexcept(std::declval< std::_Mem_fn_base< _Res (_Class::*), false>  &> ()((__ref.get()))))->__decltype(((*this)((__ref.get())))) 
# 717
{ return (*this)((__ref.get())); } 
# 720
private: _Res (_Class::*_M_pm); 
# 721
}; 
# 723
template< class _Res, class _Class> 
# 724
struct _Mem_fn< _Res (_Class::*)>  : public _Mem_fn_base< _Res (_Class::*)>  { 
# 727
using ::std::_Mem_fn_base< _Res (_Class::*)> ::_Mem_fn_base;
# 728
}; 
# 737
template< class _Tp, class _Class> inline _Mem_fn< _Tp (_Class::*)>  
# 739
mem_fn(_Tp (_Class::*__pm)) noexcept 
# 740
{ 
# 741
return ((_Mem_fn< _Tp (_Class::*)> )(__pm)); 
# 742
} 
# 750
template< class _Tp> 
# 751
struct is_bind_expression : public false_type { 
# 752
}; 
# 759
template< class _Tp> 
# 760
struct is_placeholder : public integral_constant< int, 0>  { 
# 762
}; 
# 767
template< int _Num> struct _Placeholder { }; 
# 775
namespace placeholders { 
# 782
extern const _Placeholder< 1>  _1; 
# 783
extern const _Placeholder< 2>  _2; 
# 784
extern const _Placeholder< 3>  _3; 
# 785
extern const _Placeholder< 4>  _4; 
# 786
extern const _Placeholder< 5>  _5; 
# 787
extern const _Placeholder< 6>  _6; 
# 788
extern const _Placeholder< 7>  _7; 
# 789
extern const _Placeholder< 8>  _8; 
# 790
extern const _Placeholder< 9>  _9; 
# 791
extern const _Placeholder< 10>  _10; 
# 792
extern const _Placeholder< 11>  _11; 
# 793
extern const _Placeholder< 12>  _12; 
# 794
extern const _Placeholder< 13>  _13; 
# 795
extern const _Placeholder< 14>  _14; 
# 796
extern const _Placeholder< 15>  _15; 
# 797
extern const _Placeholder< 16>  _16; 
# 798
extern const _Placeholder< 17>  _17; 
# 799
extern const _Placeholder< 18>  _18; 
# 800
extern const _Placeholder< 19>  _19; 
# 801
extern const _Placeholder< 20>  _20; 
# 802
extern const _Placeholder< 21>  _21; 
# 803
extern const _Placeholder< 22>  _22; 
# 804
extern const _Placeholder< 23>  _23; 
# 805
extern const _Placeholder< 24>  _24; 
# 806
extern const _Placeholder< 25>  _25; 
# 807
extern const _Placeholder< 26>  _26; 
# 808
extern const _Placeholder< 27>  _27; 
# 809
extern const _Placeholder< 28>  _28; 
# 810
extern const _Placeholder< 29>  _29; 
# 812
}
# 821
template< int _Num> 
# 822
struct is_placeholder< _Placeholder< _Num> >  : public integral_constant< int, _Num>  { 
# 824
}; 
# 826
template< int _Num> 
# 827
struct is_placeholder< const _Placeholder< _Num> >  : public integral_constant< int, _Num>  { 
# 829
}; 
# 835
struct _No_tuple_element; 
# 842
template< size_t __i, class _Tuple, bool _IsSafe> 
# 843
struct _Safe_tuple_element_impl : public tuple_element< __i, _Tuple>  { 
# 844
}; 
# 851
template< size_t __i, class _Tuple> 
# 852
struct _Safe_tuple_element_impl< __i, _Tuple, false>  { 
# 854
typedef _No_tuple_element type; 
# 855
}; 
# 861
template< size_t __i, class _Tuple> 
# 862
struct _Safe_tuple_element : public _Safe_tuple_element_impl< __i, _Tuple, __i < tuple_size< _Tuple> ::value>  { 
# 865
}; 
# 878
template< class _Arg, bool 
# 879
_IsBindExp = is_bind_expression< _Arg> ::value, bool 
# 880
_IsPlaceholder = (is_placeholder< _Arg> ::value > 0)> class _Mu; 
# 887
template< class _Tp> 
# 888
class _Mu< reference_wrapper< _Tp> , false, false>  { 
# 891
public: typedef _Tp &result_type; 
# 897
template< class _CVRef, class _Tuple> result_type 
# 899
operator()(_CVRef &__arg, _Tuple &) const volatile 
# 900
{ return (__arg.get()); } 
# 901
}; 
# 908
template< class _Arg> 
# 909
class _Mu< _Arg, true, false>  { 
# 914
public: 
# 912
template< class _CVArg, class ..._Args> auto 
# 914
operator()(_CVArg &__arg, tuple< _Args...>  &
# 915
__tuple) const volatile->__decltype((__arg(declval< _Args> ()...))) 
# 917
{ 
# 920
typedef typename _Build_index_tuple< sizeof...(_Args)> ::__type _Indexes; 
# 921
return (this->__call(__arg, __tuple, _Indexes())); 
# 922
} 
# 929
private: 
# 927
template< class _CVArg, class ..._Args, size_t ..._Indexes> auto 
# 929
__call(_CVArg &__arg, tuple< _Args...>  &__tuple, const _Index_tuple< _Indexes...>  &) const volatile->__decltype((__arg(declval< _Args> ()...))) 
# 932
{ 
# 933
return __arg(std::forward< _Args> (std::get< _Indexes> (__tuple))...); 
# 934
} 
# 935
}; 
# 942
template< class _Arg> 
# 943
class _Mu< _Arg, false, true>  { 
# 946
public: template< class _Signature> class result; 
# 948
template< class _CVMu, class _CVArg, class _Tuple> 
# 949
class result< _CVMu (_CVArg, _Tuple)>  { 
# 956
typedef typename _Safe_tuple_element< is_placeholder< _Arg> ::value - 1, _Tuple> ::type __base_type; 
# 959
public: typedef typename add_rvalue_reference< typename _Safe_tuple_element< is_placeholder< _Arg> ::value - 1, _Tuple> ::type> ::type type; 
# 960
}; 
# 962
template< class _Tuple> typename result< std::_Mu< _Arg, false, true>  (_Arg, _Tuple)> ::type 
# 964
operator()(const volatile _Arg &, _Tuple &__tuple) const volatile 
# 965
{ 
# 966
return std::forward< typename result< std::_Mu< _Arg, false, true>  (_Arg, _Tuple)> ::type> (std::get< is_placeholder< _Arg> ::value - 1> (__tuple)); 
# 968
} 
# 969
}; 
# 976
template< class _Arg> 
# 977
class _Mu< _Arg, false, false>  { 
# 980
public: template< class _Signature> struct result; 
# 982
template< class _CVMu, class _CVArg, class _Tuple> 
# 983
struct result< _CVMu (_CVArg, _Tuple)>  { 
# 985
typedef typename add_lvalue_reference< _CVArg> ::type type; 
# 986
}; 
# 989
template< class _CVArg, class _Tuple> _CVArg &&
# 991
operator()(_CVArg &&__arg, _Tuple &) const volatile 
# 992
{ return std::forward< _CVArg> (__arg); } 
# 993
}; 
# 1000
template< class _Tp> 
# 1001
struct _Maybe_wrap_member_pointer { 
# 1003
typedef _Tp type; 
# 1006
static const _Tp &__do_wrap(const _Tp &__x) 
# 1007
{ return __x; } 
# 1010
static _Tp &&__do_wrap(_Tp &&__x) 
# 1011
{ return static_cast< _Tp &&>(__x); } 
# 1012
}; 
# 1019
template< class _Tp, class _Class> 
# 1020
struct _Maybe_wrap_member_pointer< _Tp (_Class::*)>  { 
# 1022
typedef _Mem_fn< _Tp (_Class::*)>  type; 
# 1025
static type __do_wrap(_Tp (_Class::*__pm)) 
# 1026
{ return ((type)(__pm)); } 
# 1027
}; 
# 1034
template<> struct _Maybe_wrap_member_pointer< void>  { 
# 1036
typedef void type; 
# 1037
}; 
# 1040
template< size_t _Ind, class ..._Tp> inline auto 
# 1042
__volget(volatile tuple< _Tp...>  &__tuple)->volatile __tuple_element_t< _Ind, tuple< _Tp...> >  & 
# 1044
{ return std::get< _Ind> (const_cast< tuple< _Tp...>  &>(__tuple)); } 
# 1047
template< size_t _Ind, class ..._Tp> inline auto 
# 1049
__volget(const volatile tuple< _Tp...>  &__tuple)->const volatile __tuple_element_t< _Ind, tuple< _Tp...> >  & 
# 1051
{ return std::get< _Ind> (const_cast< const tuple< _Tp...>  &>(__tuple)); } 
# 1054
template< class _Signature> struct _Bind; 
# 1057
template< class _Functor, class ..._Bound_args> 
# 1058
class _Bind< _Functor (_Bound_args ...)>  : public _Weak_result_type< _Functor>  { 
# 1061
typedef ::std::_Bind< _Functor (_Bound_args ...)>  __self_type; 
# 1063
typedef typename _Build_index_tuple< sizeof...(_Bound_args)> ::__type _Bound_indexes; 
# 1065
_Functor _M_f; 
# 1066
tuple< _Bound_args...>  _M_bound_args; 
# 1069
template< class _Result, class ..._Args, ::std::size_t ..._Indexes> _Result 
# 1071
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) 
# 1072
{ 
# 1073
return (_M_f)(_Mu< _Bound_args> ()(::std::get< _Indexes> (_M_bound_args), __args)...); 
# 1075
} 
# 1078
template< class _Result, class ..._Args, ::std::size_t ..._Indexes> _Result 
# 1080
__call_c(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const 
# 1081
{ 
# 1082
return (_M_f)(_Mu< _Bound_args> ()(::std::get< _Indexes> (_M_bound_args), __args)...); 
# 1084
} 
# 1087
template< class _Result, class ..._Args, ::std::size_t ..._Indexes> _Result 
# 1089
__call_v(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) volatile 
# 1091
{ 
# 1092
return (_M_f)(_Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 1094
} 
# 1097
template< class _Result, class ..._Args, ::std::size_t ..._Indexes> _Result 
# 1099
__call_c_v(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> ) const volatile 
# 1101
{ 
# 1102
return (_M_f)(_Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 1104
} 
# 1108
public: 
# 1107
template< class ..._Args> explicit 
# 1108
_Bind(const _Functor &__f, _Args &&...__args) : _M_f(__f), _M_bound_args(::std::forward< _Args> (__args)...) 
# 1110
{ } 
# 1112
template< class ..._Args> explicit 
# 1113
_Bind(_Functor &&__f, _Args &&...__args) : _M_f(::std::move(__f)), _M_bound_args(::std::forward< _Args> (__args)...) 
# 1115
{ } 
# 1117
_Bind(const ::std::_Bind< _Functor (_Bound_args ...)>  &) = default;
# 1119
_Bind(::std::_Bind< _Functor (_Bound_args ...)>  &&__b) : _M_f(::std::move(__b._M_f)), _M_bound_args(::std::move(__b._M_bound_args)) 
# 1121
{ } 
# 1124
template< class ..._Args, class _Result = __decltype((::std::declval< _Functor &> ()(_Mu< _Bound_args> ()(::std::declval< _Bound_args &> (), ::std::declval< tuple< _Args...>  &> ())...)))> _Result 
# 1129
operator()(_Args &&...__args) 
# 1130
{ 
# 1131
return (this->template __call< _Result> (::std::forward_as_tuple(::std::forward< _Args> (__args)...), _Bound_indexes())); 
# 1134
} 
# 1137
template< class ..._Args, class _Result = __decltype((::std::declval< typename enable_if< sizeof...(_Args) >= (0), typename add_const< _Functor> ::type &> ::type> ()(_Mu< _Bound_args> ()(::std::declval< const _Bound_args &> (), ::std::declval< tuple< _Args...>  &> ())...)))> _Result 
# 1143
operator()(_Args &&...__args) const 
# 1144
{ 
# 1145
return (this->template __call_c< _Result> (::std::forward_as_tuple(::std::forward< _Args> (__args)...), _Bound_indexes())); 
# 1148
} 
# 1151
template< class ..._Args, class _Result = __decltype((::std::declval< typename enable_if< sizeof...(_Args) >= (0), typename add_volatile< _Functor> ::type &> ::type> ()(_Mu< _Bound_args> ()(::std::declval< volatile _Bound_args &> (), ::std::declval< tuple< _Args...>  &> ())...)))> _Result 
# 1157
operator()(_Args &&...__args) volatile 
# 1158
{ 
# 1159
return (this->template __call_v< _Result> (::std::forward_as_tuple(::std::forward< _Args> (__args)...), _Bound_indexes())); 
# 1162
} 
# 1165
template< class ..._Args, class _Result = __decltype((::std::declval< typename enable_if< sizeof...(_Args) >= (0), typename add_cv< _Functor> ::type &> ::type> ()(_Mu< _Bound_args> ()(::std::declval< const volatile _Bound_args &> (), ::std::declval< tuple< _Args...>  &> ())...)))> _Result 
# 1171
operator()(_Args &&...__args) const volatile 
# 1172
{ 
# 1173
return (this->template __call_c_v< _Result> (::std::forward_as_tuple(::std::forward< _Args> (__args)...), _Bound_indexes())); 
# 1176
} 
# 1177
}; 
# 1180
template< class _Result, class _Signature> struct _Bind_result; 
# 1183
template< class _Result, class _Functor, class ..._Bound_args> 
# 1184
class _Bind_result< _Result, _Functor (_Bound_args ...)>  { 
# 1186
typedef std::_Bind_result< _Result, _Functor (_Bound_args ...)>  __self_type; 
# 1188
typedef typename _Build_index_tuple< sizeof...(_Bound_args)> ::__type _Bound_indexes; 
# 1190
_Functor _M_f; 
# 1191
tuple< _Bound_args...>  _M_bound_args; 
# 1194
template< class _Res> 
# 1195
struct __enable_if_void : public enable_if< is_void< _Res> ::value, int>  { }; 
# 1196
template< class _Res> 
# 1197
struct __disable_if_void : public enable_if< !is_void< _Res> ::value, int>  { }; 
# 1200
template< class _Res, class ..._Args, size_t ..._Indexes> _Result 
# 1202
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> , typename __disable_if_void< _Res> ::type = 0) 
# 1204
{ 
# 1205
return (_M_f)(_Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 1207
} 
# 1210
template< class _Res, class ..._Args, size_t ..._Indexes> void 
# 1212
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> , typename __enable_if_void< _Res> ::type = 0) 
# 1214
{ 
# 1215
(_M_f)(_Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 1217
} 
# 1220
template< class _Res, class ..._Args, size_t ..._Indexes> _Result 
# 1222
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> , typename __disable_if_void< _Res> ::type = 0) const 
# 1224
{ 
# 1225
return (_M_f)(_Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 1227
} 
# 1230
template< class _Res, class ..._Args, size_t ..._Indexes> void 
# 1232
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> , typename __enable_if_void< _Res> ::type = 0) const 
# 1234
{ 
# 1235
(_M_f)(_Mu< _Bound_args> ()(std::get< _Indexes> (_M_bound_args), __args)...); 
# 1237
} 
# 1240
template< class _Res, class ..._Args, size_t ..._Indexes> _Result 
# 1242
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> , typename __disable_if_void< _Res> ::type = 0) volatile 
# 1244
{ 
# 1245
return (_M_f)(_Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 1247
} 
# 1250
template< class _Res, class ..._Args, size_t ..._Indexes> void 
# 1252
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> , typename __enable_if_void< _Res> ::type = 0) volatile 
# 1254
{ 
# 1255
(_M_f)(_Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 1257
} 
# 1260
template< class _Res, class ..._Args, size_t ..._Indexes> _Result 
# 1262
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> , typename __disable_if_void< _Res> ::type = 0) const volatile 
# 1264
{ 
# 1265
return (_M_f)(_Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 1267
} 
# 1270
template< class _Res, class ..._Args, size_t ..._Indexes> void 
# 1272
__call(tuple< _Args...>  &&__args, _Index_tuple< _Indexes...> , typename __enable_if_void< _Res> ::type = 0) const volatile 
# 1275
{ 
# 1276
(_M_f)(_Mu< _Bound_args> ()(__volget< _Indexes> (_M_bound_args), __args)...); 
# 1278
} 
# 1281
public: typedef _Result result_type; 
# 1283
template< class ..._Args> explicit 
# 1284
_Bind_result(const _Functor &__f, _Args &&...__args) : _M_f(__f), _M_bound_args(std::forward< _Args> (__args)...) 
# 1286
{ } 
# 1288
template< class ..._Args> explicit 
# 1289
_Bind_result(_Functor &&__f, _Args &&...__args) : _M_f(std::move(__f)), _M_bound_args(std::forward< _Args> (__args)...) 
# 1291
{ } 
# 1293
_Bind_result(const std::_Bind_result< _Result, _Functor (_Bound_args ...)>  &) = default;
# 1295
_Bind_result(std::_Bind_result< _Result, _Functor (_Bound_args ...)>  &&__b) : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args)) 
# 1297
{ } 
# 1300
template< class ..._Args> result_type 
# 1302
operator()(_Args &&...__args) 
# 1303
{ 
# 1304
return (this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes())); 
# 1307
} 
# 1310
template< class ..._Args> result_type 
# 1312
operator()(_Args &&...__args) const 
# 1313
{ 
# 1314
return (this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes())); 
# 1317
} 
# 1320
template< class ..._Args> result_type 
# 1322
operator()(_Args &&...__args) volatile 
# 1323
{ 
# 1324
return (this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes())); 
# 1327
} 
# 1330
template< class ..._Args> result_type 
# 1332
operator()(_Args &&...__args) const volatile 
# 1333
{ 
# 1334
return (this->template __call< _Result> (std::forward_as_tuple(std::forward< _Args> (__args)...), _Bound_indexes())); 
# 1337
} 
# 1338
}; 
# 1344
template< class _Signature> 
# 1345
struct is_bind_expression< _Bind< _Signature> >  : public true_type { 
# 1346
}; 
# 1352
template< class _Signature> 
# 1353
struct is_bind_expression< const _Bind< _Signature> >  : public true_type { 
# 1354
}; 
# 1360
template< class _Signature> 
# 1361
struct is_bind_expression< volatile _Bind< _Signature> >  : public true_type { 
# 1362
}; 
# 1368
template< class _Signature> 
# 1369
struct is_bind_expression< const volatile _Bind< _Signature> >  : public true_type { 
# 1370
}; 
# 1376
template< class _Result, class _Signature> 
# 1377
struct is_bind_expression< _Bind_result< _Result, _Signature> >  : public true_type { 
# 1378
}; 
# 1384
template< class _Result, class _Signature> 
# 1385
struct is_bind_expression< const _Bind_result< _Result, _Signature> >  : public true_type { 
# 1386
}; 
# 1392
template< class _Result, class _Signature> 
# 1393
struct is_bind_expression< volatile _Bind_result< _Result, _Signature> >  : public true_type { 
# 1394
}; 
# 1400
template< class _Result, class _Signature> 
# 1401
struct is_bind_expression< const volatile _Bind_result< _Result, _Signature> >  : public true_type { 
# 1402
}; 
# 1404
template< class _Func, class ..._BoundArgs> 
# 1405
struct _Bind_check_arity { }; 
# 1407
template< class _Ret, class ..._Args, class ..._BoundArgs> 
# 1408
struct _Bind_check_arity< _Ret (*)(_Args ...), _BoundArgs...>  { 
# 1410
static_assert((sizeof...(_BoundArgs) == sizeof...(_Args)), "Wrong number of arguments for function");
# 1412
}; 
# 1414
template< class _Ret, class ..._Args, class ..._BoundArgs> 
# 1415
struct _Bind_check_arity< _Ret (*)(_Args ..., ...), _BoundArgs...>  { 
# 1417
static_assert((sizeof...(_BoundArgs) >= sizeof...(_Args)), "Wrong number of arguments for function");
# 1419
}; 
# 1421
template< class _Tp, class _Class, class ..._BoundArgs> 
# 1422
struct _Bind_check_arity< _Tp (_Class::*), _BoundArgs...>  { 
# 1424
using _Arity = typename _Mem_fn< _Tp (_Class::*)> ::_Arity; 
# 1425
using _Varargs = typename _Mem_fn< _Tp (_Class::*)> ::_Varargs; 
# 1426
static_assert(((_Varargs::value) ? sizeof...(_BoundArgs) >= (_Arity::value + 1) : (sizeof...(_BoundArgs) == (_Arity::value + 1))), "Wrong number of arguments for pointer-to-member");
# 1430
}; 
# 1435
template< class _Tp, class _Tp2 = typename decay< _Tp> ::type> using __is_socketlike = __or_< is_integral< _Tp2> , is_enum< _Tp2> > ; 
# 1438
template< bool _SocketLike, class _Func, class ..._BoundArgs> 
# 1439
struct _Bind_helper : public _Bind_check_arity< typename decay< _Func> ::type, _BoundArgs...>  { 
# 1443
typedef _Maybe_wrap_member_pointer< typename decay< _Func> ::type>  __maybe_type; 
# 1444
typedef typename _Maybe_wrap_member_pointer< typename decay< _Func> ::type> ::type __func_type; 
# 1445
typedef _Bind< typename _Maybe_wrap_member_pointer< typename decay< _Func> ::type> ::type (typename decay< _BoundArgs> ::type ...)>  type; 
# 1446
}; 
# 1451
template< class _Func, class ..._BoundArgs> 
# 1452
struct _Bind_helper< true, _Func, _BoundArgs...>  { 
# 1453
}; 
# 1459
template< class _Func, class ..._BoundArgs> inline typename _Bind_helper< __or_< is_integral< typename decay< _Func> ::type> , is_enum< typename decay< _Func> ::type> > ::value, _Func, _BoundArgs...> ::type 
# 1462
bind(_Func &&__f, _BoundArgs &&...__args) 
# 1463
{ 
# 1464
typedef _Bind_helper< false, _Func, _BoundArgs...>  __helper_type; 
# 1465
typedef typename _Bind_helper< false, _Func, _BoundArgs...> ::__maybe_type __maybe_type; 
# 1466
typedef typename _Bind_helper< false, _Func, _BoundArgs...> ::type __result_type; 
# 1467
return __result_type(__maybe_type::__do_wrap(std::forward< _Func> (__f)), std::forward< _BoundArgs> (__args)...); 
# 1469
} 
# 1471
template< class _Result, class _Func, class ..._BoundArgs> 
# 1472
struct _Bindres_helper : public _Bind_check_arity< typename decay< _Func> ::type, _BoundArgs...>  { 
# 1476
typedef _Maybe_wrap_member_pointer< typename decay< _Func> ::type>  __maybe_type; 
# 1477
typedef typename _Maybe_wrap_member_pointer< typename decay< _Func> ::type> ::type __functor_type; 
# 1480
typedef _Bind_result< _Result, typename _Maybe_wrap_member_pointer< typename decay< _Func> ::type> ::type (typename decay< _BoundArgs> ::type ...)>  type; 
# 1481
}; 
# 1487
template< class _Result, class _Func, class ..._BoundArgs> inline typename _Bindres_helper< _Result, _Func, _BoundArgs...> ::type 
# 1490
bind(_Func &&__f, _BoundArgs &&...__args) 
# 1491
{ 
# 1492
typedef _Bindres_helper< _Result, _Func, _BoundArgs...>  __helper_type; 
# 1493
typedef typename _Bindres_helper< _Result, _Func, _BoundArgs...> ::__maybe_type __maybe_type; 
# 1494
typedef typename _Bindres_helper< _Result, _Func, _BoundArgs...> ::type __result_type; 
# 1495
return __result_type(__maybe_type::__do_wrap(std::forward< _Func> (__f)), std::forward< _BoundArgs> (__args)...); 
# 1497
} 
# 1499
template< class _Signature> struct _Bind_simple; 
# 1502
template< class _Callable, class ..._Args> 
# 1503
struct _Bind_simple< _Callable (_Args ...)>  { 
# 1505
typedef typename result_of< _Callable (_Args ...)> ::type result_type; 
# 1507
template< class _Tp, class ..._Up> explicit 
# 1509
_Bind_simple(_Tp &&__f, _Up &&...__args) : _M_bound(std::forward< _Tp> (__f), std::forward< _Up> (__args)...) 
# 1511
{ } 
# 1513
_Bind_simple(const std::_Bind_simple< _Callable (_Args ...)>  &) = default;
# 1514
_Bind_simple(std::_Bind_simple< _Callable (_Args ...)>  &&) = default;
# 1517
result_type operator()() 
# 1518
{ 
# 1519
typedef typename _Build_index_tuple< sizeof...(_Args)> ::__type _Indices; 
# 1520
return _M_invoke(_Indices()); 
# 1521
} 
# 1526
private: 
# 1524
template< size_t ..._Indices> typename result_of< _Callable (_Args ...)> ::type 
# 1526
_M_invoke(_Index_tuple< _Indices...> ) 
# 1527
{ 
# 1530
return std::forward< _Callable> (std::get< 0> (_M_bound))(std::forward< _Args> (std::get< _Indices + (1)> (_M_bound))...); 
# 1532
} 
# 1534
tuple< _Callable, _Args...>  _M_bound; 
# 1535
}; 
# 1537
template< class _Func, class ..._BoundArgs> 
# 1538
struct _Bind_simple_helper : public _Bind_check_arity< typename decay< _Func> ::type, _BoundArgs...>  { 
# 1542
typedef _Maybe_wrap_member_pointer< typename decay< _Func> ::type>  __maybe_type; 
# 1543
typedef typename _Maybe_wrap_member_pointer< typename decay< _Func> ::type> ::type __func_type; 
# 1545
typedef _Bind_simple< typename _Maybe_wrap_member_pointer< typename decay< _Func> ::type> ::type (typename decay< _BoundArgs> ::type ...)>  __type; 
# 1546
}; 
# 1550
template< class _Callable, class ..._Args> typename _Bind_simple_helper< _Callable, _Args...> ::__type 
# 1552
__bind_simple(_Callable &&__callable, _Args &&...__args) 
# 1553
{ 
# 1554
typedef _Bind_simple_helper< _Callable, _Args...>  __helper_type; 
# 1555
typedef typename _Bind_simple_helper< _Callable, _Args...> ::__maybe_type __maybe_type; 
# 1556
typedef typename _Bind_simple_helper< _Callable, _Args...> ::__type __result_type; 
# 1557
return __result_type(__maybe_type::__do_wrap(std::forward< _Callable> (__callable)), std::forward< _Args> (__args)...); 
# 1560
} 
# 1567
class bad_function_call : public exception { 
# 1570
public: virtual ~bad_function_call() noexcept; 
# 1572
virtual const char *what() const noexcept; 
# 1573
}; 
# 1581
template< class _Tp> 
# 1582
struct __is_location_invariant : public is_trivially_copyable< _Tp> ::type { 
# 1584
}; 
# 1586
class _Undefined_class; 
# 1588
union _Nocopy_types { 
# 1590
void *_M_object; 
# 1591
const void *_M_const_object; 
# 1592
void (*_M_function_pointer)(void); 
# 1593
void (_Undefined_class::*_M_member_pointer)(void); 
# 1594
}; 
# 1596
union _Any_data { 
# 1598
void *_M_access() { return &((_M_pod_data)[0]); } 
# 1599
const void *_M_access() const { return &((_M_pod_data)[0]); } 
# 1601
template< class _Tp> _Tp &
# 1603
_M_access() 
# 1604
{ return *(static_cast< _Tp *>(this->_M_access())); } 
# 1606
template< class _Tp> const _Tp &
# 1608
_M_access() const 
# 1609
{ return *(static_cast< const _Tp *>(this->_M_access())); } 
# 1611
_Nocopy_types _M_unused; 
# 1612
char _M_pod_data[sizeof(_Nocopy_types)]; 
# 1613
}; 
# 1615
enum _Manager_operation { 
# 1617
__get_type_info, 
# 1618
__get_functor_ptr, 
# 1619
__clone_functor, 
# 1620
__destroy_functor
# 1621
}; 
# 1625
template< class _Tp> 
# 1626
struct _Simple_type_wrapper { 
# 1628
_Simple_type_wrapper(_Tp __value) : __value(__value) { } 
# 1630
_Tp __value; 
# 1631
}; 
# 1633
template< class _Tp> 
# 1634
struct __is_location_invariant< _Simple_type_wrapper< _Tp> >  : public __is_location_invariant< _Tp>  { 
# 1636
}; 
# 1640
template< class _Functor> inline _Functor &
# 1642
__callable_functor(_Functor &__f) 
# 1643
{ return __f; } 
# 1645
template< class _Member, class _Class> inline _Mem_fn< _Member (_Class::*)>  
# 1647
__callable_functor(_Member (_Class::*&__p)) 
# 1648
{ return std::mem_fn(__p); } 
# 1650
template< class _Member, class _Class> inline _Mem_fn< _Member (_Class::*)>  
# 1652
__callable_functor(_Member (_Class::*const &__p)) 
# 1653
{ return std::mem_fn(__p); } 
# 1655
template< class _Member, class _Class> inline _Mem_fn< _Member (_Class::*)>  
# 1657
__callable_functor(_Member (_Class::*volatile &__p)) 
# 1658
{ return std::mem_fn(__p); } 
# 1660
template< class _Member, class _Class> inline _Mem_fn< _Member (_Class::*)>  
# 1662
__callable_functor(_Member (_Class::*const volatile &__p)) 
# 1663
{ return std::mem_fn(__p); } 
# 1665
template< class _Signature> class function; 
# 1669
class _Function_base { 
# 1672
public: static const size_t _M_max_size = sizeof(_Nocopy_types); 
# 1673
static const size_t _M_max_align = __alignof__(_Nocopy_types); 
# 1675
template< class _Functor> 
# 1676
class _Base_manager { 
# 1679
protected: static const bool __stored_locally = (__is_location_invariant< _Functor> ::value && (sizeof(_Functor) <= _M_max_size) && (__alignof__(_Functor) <= _M_max_align) && ((_M_max_align % __alignof__(_Functor)) == (0))); 
# 1685
typedef integral_constant< bool, __stored_locally>  _Local_storage; 
# 1689
static _Functor *_M_get_pointer(const _Any_data &__source) 
# 1690
{ 
# 1691
const _Functor *__ptr = __stored_locally ? std::__addressof((__source.template _M_access< _Functor> ())) : (__source.template _M_access< _Functor *> ()); 
# 1694
return const_cast< _Functor *>(__ptr); 
# 1695
} 
# 1700
static void _M_clone(_Any_data &__dest, const _Any_data &__source, true_type) 
# 1701
{ 
# 1702
new (__dest._M_access()) (_Functor)((__source.template _M_access< _Functor> ())); 
# 1703
} 
# 1708
static void _M_clone(_Any_data &__dest, const _Any_data &__source, false_type) 
# 1709
{ 
# 1710
(__dest.template _M_access< _Functor *> ()) = (new (_Functor)(*(__source.template _M_access< _Functor *> ()))); 
# 1712
} 
# 1717
static void _M_destroy(_Any_data &__victim, true_type) 
# 1718
{ 
# 1719
((__victim.template _M_access< _Functor> ()).~_Functor()); 
# 1720
} 
# 1724
static void _M_destroy(_Any_data &__victim, false_type) 
# 1725
{ 
# 1726
delete (__victim.template _M_access< _Functor *> ()); 
# 1727
} 
# 1731
public: static bool _M_manager(_Any_data &__dest, const _Any_data &__source, _Manager_operation 
# 1732
__op) 
# 1733
{ 
# 1734
switch (__op) 
# 1735
{ 
# 1737
case __get_type_info:  
# 1738
__dest.template _M_access< const type_info *> () = (&typeid(_Functor)); 
# 1739
break; 
# 1741
case __get_functor_ptr:  
# 1742
(__dest.template _M_access< _Functor *> ()) = (_M_get_pointer)(__source); 
# 1743
break; 
# 1745
case __clone_functor:  
# 1746
_M_clone(__dest, __source, _Local_storage()); 
# 1747
break; 
# 1749
case __destroy_functor:  
# 1750
_M_destroy(__dest, _Local_storage()); 
# 1751
break; 
# 1752
}  
# 1753
return false; 
# 1754
} 
# 1757
static void _M_init_functor(_Any_data &__functor, _Functor &&__f) 
# 1758
{ _M_init_functor(__functor, std::move(__f), _Local_storage()); } 
# 1760
template< class _Signature> static bool 
# 1762
_M_not_empty_function(const function< _Signature>  &__f) 
# 1763
{ return static_cast< bool>(__f); } 
# 1765
template< class _Tp> static bool 
# 1767
_M_not_empty_function(_Tp *const &__fp) 
# 1768
{ return __fp; } 
# 1770
template< class _Class, class _Tp> static bool 
# 1772
_M_not_empty_function(_Tp (_Class::*const &__mp)) 
# 1773
{ return __mp; } 
# 1775
template< class _Tp> static bool 
# 1777
_M_not_empty_function(const _Tp &) 
# 1778
{ return true; } 
# 1782
private: static void _M_init_functor(_Any_data &__functor, _Functor &&__f, true_type) 
# 1783
{ new (__functor._M_access()) (_Functor)(std::move(__f)); } 
# 1786
static void _M_init_functor(_Any_data &__functor, _Functor &&__f, false_type) 
# 1787
{ (__functor.template _M_access< _Functor *> ()) = (new (_Functor)(std::move(__f))); } 
# 1788
}; 
# 1790
template< class _Functor> 
# 1791
class _Ref_manager : public _Base_manager< _Functor *>  { 
# 1793
typedef typename ::std::_Function_base::template _Base_manager< _Functor *>  _Base; 
# 1797
public: static bool _M_manager(::std::_Any_data &__dest, const ::std::_Any_data &__source, ::std::_Manager_operation 
# 1798
__op) 
# 1799
{ 
# 1800
switch (__op) 
# 1801
{ 
# 1803
case __get_type_info:  
# 1804
__dest.template _M_access< const ::std::type_info *> () = (&typeid(_Functor)); 
# 1805
break; 
# 1807
case __get_functor_ptr:  
# 1808
(__dest.template _M_access< _Functor *> ()) = (*_Base::_M_get_pointer(__source)); 
# 1809
return is_const< _Functor> ::value; 
# 1810
break; 
# 1812
default:  
# 1813
_Base::_M_manager(__dest, __source, __op); 
# 1814
}  
# 1815
return false; 
# 1816
} 
# 1819
static void _M_init_functor(::std::_Any_data &__functor, reference_wrapper< _Functor>  __f) 
# 1820
{ 
# 1821
_Base::_M_init_functor(__functor, ::std::__addressof((__f.get()))); 
# 1822
} 
# 1823
}; 
# 1825
_Function_base() : _M_manager((nullptr)) { } 
# 1827
~_Function_base() 
# 1828
{ 
# 1829
if (_M_manager) { 
# 1830
(_M_manager)(_M_functor, _M_functor, __destroy_functor); }  
# 1831
} 
# 1834
bool _M_empty() const { return !(_M_manager); } 
# 1836
typedef bool (*_Manager_type)(_Any_data &, const _Any_data &, _Manager_operation); 
# 1839
_Any_data _M_functor; 
# 1840
_Manager_type _M_manager; 
# 1841
}; 
# 1843
template< class _Signature, class _Functor> class _Function_handler; 
# 1846
template< class _Res, class _Functor, class ..._ArgTypes> 
# 1847
class _Function_handler< _Res (_ArgTypes ...), _Functor>  : public _Function_base::_Base_manager< _Functor>  { 
# 1850
typedef typename ::std::_Function_base::template _Base_manager< _Functor>  _Base; 
# 1854
public: static _Res _M_invoke(const ::std::_Any_data &__functor, _ArgTypes &&...__args) 
# 1855
{ 
# 1856
return (*_Base::_M_get_pointer(__functor))(::std::forward< _ArgTypes> (__args)...); 
# 1858
} 
# 1859
}; 
# 1861
template< class _Functor, class ..._ArgTypes> 
# 1862
class _Function_handler< void (_ArgTypes ...), _Functor>  : public _Function_base::_Base_manager< _Functor>  { 
# 1865
typedef typename ::std::_Function_base::template _Base_manager< _Functor>  _Base; 
# 1869
public: static void _M_invoke(const ::std::_Any_data &__functor, _ArgTypes &&...__args) 
# 1870
{ 
# 1871
(*_Base::_M_get_pointer(__functor))(::std::forward< _ArgTypes> (__args)...); 
# 1873
} 
# 1874
}; 
# 1876
template< class _Res, class _Functor, class ..._ArgTypes> 
# 1877
class _Function_handler< _Res (_ArgTypes ...), reference_wrapper< _Functor> >  : public _Function_base::_Ref_manager< _Functor>  { 
# 1880
typedef typename ::std::_Function_base::template _Ref_manager< _Functor>  _Base; 
# 1884
public: static _Res _M_invoke(const ::std::_Any_data &__functor, _ArgTypes &&...__args) 
# 1885
{ 
# 1886
return ::std::__callable_functor(*(*_Base::_M_get_pointer(__functor)))(::std::forward< _ArgTypes> (__args)...); 
# 1888
} 
# 1889
}; 
# 1891
template< class _Functor, class ..._ArgTypes> 
# 1892
class _Function_handler< void (_ArgTypes ...), reference_wrapper< _Functor> >  : public _Function_base::_Ref_manager< _Functor>  { 
# 1895
typedef typename ::std::_Function_base::template _Ref_manager< _Functor>  _Base; 
# 1899
public: static void _M_invoke(const ::std::_Any_data &__functor, _ArgTypes &&...__args) 
# 1900
{ 
# 1901
::std::__callable_functor(*(*_Base::_M_get_pointer(__functor)))(::std::forward< _ArgTypes> (__args)...); 
# 1903
} 
# 1904
}; 
# 1906
template< class _Class, class _Member, class _Res, class ...
# 1907
_ArgTypes> 
# 1908
class _Function_handler< _Res (_ArgTypes ...), _Member (_Class::*)>  : public _Function_handler< void (_ArgTypes ...), _Member (_Class::*)>  { 
# 1912
typedef ::std::_Function_handler< void (_ArgTypes ...), _Member (_Class::*)>  _Base; 
# 1916
public: static _Res _M_invoke(const ::std::_Any_data &__functor, _ArgTypes &&...__args) 
# 1917
{ 
# 1918
return ::std::mem_fn((_Base::_M_get_pointer(__functor)->__value))(::std::forward< _ArgTypes> (__args)...); 
# 1920
} 
# 1921
}; 
# 1923
template< class _Class, class _Member, class ..._ArgTypes> 
# 1924
class _Function_handler< void (_ArgTypes ...), _Member (_Class::*)>  : public _Function_base::_Base_manager< _Simple_type_wrapper< _Member (_Class::*)> >  { 
# 1928
typedef _Member (_Class::*_Functor); 
# 1929
typedef _Simple_type_wrapper< _Member (_Class::*)>  _Wrapper; 
# 1930
typedef typename ::std::_Function_base::template _Base_manager< _Simple_type_wrapper< _Member (_Class::*)> >  _Base; 
# 1934
public: static bool _M_manager(::std::_Any_data &__dest, const ::std::_Any_data &__source, ::std::_Manager_operation 
# 1935
__op) 
# 1936
{ 
# 1937
switch (__op) 
# 1938
{ 
# 1940
case __get_type_info:  
# 1941
__dest.template _M_access< const ::std::type_info *> () = (&typeid(_Member (_Class::*))); 
# 1942
break; 
# 1944
case __get_functor_ptr:  
# 1945
(__dest.template _M_access< _Functor *> ()) = (&(_Base::_M_get_pointer(__source)->__value)); 
# 1947
break; 
# 1949
default:  
# 1950
_Base::_M_manager(__dest, __source, __op); 
# 1951
}  
# 1952
return false; 
# 1953
} 
# 1956
static void _M_invoke(const ::std::_Any_data &__functor, _ArgTypes &&...__args) 
# 1957
{ 
# 1958
::std::mem_fn((_Base::_M_get_pointer(__functor)->__value))(::std::forward< _ArgTypes> (__args)...); 
# 1960
} 
# 1961
}; 
# 1963
template< class _From, class _To> using __check_func_return_type = __or_< is_void< _To> , is_convertible< _From, _To> > ; 
# 1973
template< class _Res, class ..._ArgTypes> 
# 1974
class function< _Res (_ArgTypes ...)>  : public _Maybe_unary_or_binary_function< _Res, _ArgTypes...> , private _Function_base { 
# 1978
typedef _Res _Signature_type(_ArgTypes ...); 
# 1980
template< class _Func, class 
# 1981
_Res2 = typename result_of< _Func (_ArgTypes ...)> ::type> 
# 1982
struct _Callable : public ::std::__check_func_return_type< _Res2, _Res>  { }; 
# 1986
template< class _Tp> 
# 1987
struct _Callable< ::std::function< _Res (_ArgTypes ...)> , _Tp>  : public ::std::false_type { }; 
# 1989
template< class _Cond, class _Tp> using _Requires = typename enable_if< _Cond::value, _Tp> ::type; 
# 1993
public: typedef _Res result_type; 
# 2001
function() noexcept : ::std::_Function_base() 
# 2002
{ } 
# 2008
function(::std::nullptr_t) noexcept : ::std::_Function_base() 
# 2009
{ } 
# 2019
function(const ::std::function< _Res (_ArgTypes ...)>  & __x); 
# 2028
function(::std::function< _Res (_ArgTypes ...)>  &&__x) : ::std::_Function_base() 
# 2029
{ 
# 2030
__x.swap(*this); 
# 2031
} 
# 2051
template< class _Functor, class 
# 2052
 = _Requires< __not_< is_same< _Functor, ::std::function< _Res (_ArgTypes ...)> > > , void> , class 
# 2053
 = _Requires< _Callable< _Functor> , void> > 
# 2051
function(_Functor); 
# 2069
::std::function< _Res (_ArgTypes ...)>  &operator=(const ::std::function< _Res (_ArgTypes ...)>  &__x) 
# 2070
{ 
# 2071
((::std::function< _Res (_ArgTypes ...)> )(__x)).swap(*this); 
# 2072
return *this; 
# 2073
} 
# 2087
::std::function< _Res (_ArgTypes ...)>  &operator=(::std::function< _Res (_ArgTypes ...)>  &&__x) 
# 2088
{ 
# 2089
((::std::function< _Res (_ArgTypes ...)> )(::std::move(__x))).swap(*this); 
# 2090
return *this; 
# 2091
} 
# 2101
::std::function< _Res (_ArgTypes ...)>  &operator=(::std::nullptr_t) noexcept 
# 2102
{ 
# 2103
if (::std::_Function_base::_M_manager) 
# 2104
{ 
# 2105
(::std::_Function_base::_M_manager)(::std::_Function_base::_M_functor, ::std::_Function_base::_M_functor, __destroy_functor); 
# 2106
(::std::_Function_base::_M_manager) = (nullptr); 
# 2107
(_M_invoker) = nullptr; 
# 2108
}  
# 2109
return *this; 
# 2110
} 
# 2128
template< class _Functor> _Requires< _Callable< typename decay< _Functor> ::type> , ::std::function< _Res (_ArgTypes ...)>  &>  
# 2130
operator=(_Functor &&__f) 
# 2131
{ 
# 2132
((::std::function< _Res (_ArgTypes ...)> )(::std::forward< _Functor> (__f))).swap(*this); 
# 2133
return *this; 
# 2134
} 
# 2137
template< class _Functor> ::std::function< _Res (_ArgTypes ...)>  &
# 2139
operator=(reference_wrapper< _Functor>  __f) noexcept 
# 2140
{ 
# 2141
((::std::function< _Res (_ArgTypes ...)> )(__f)).swap(*this); 
# 2142
return *this; 
# 2143
} 
# 2154
void swap(::std::function< _Res (_ArgTypes ...)>  &__x) 
# 2155
{ 
# 2156
std::swap(::std::_Function_base::_M_functor, __x.::std::_Function_base::_M_functor); 
# 2157
std::swap(::std::_Function_base::_M_manager, __x.::std::_Function_base::_M_manager); 
# 2158
::std::swap(_M_invoker, __x._M_invoker); 
# 2159
} 
# 2182
explicit operator bool() const noexcept 
# 2183
{ return !this->::std::_Function_base::_M_empty(); } 
# 2195
_Res operator()(_ArgTypes ...__args) const; 
# 2208
const ::std::type_info &target_type() const noexcept; 
# 2219
template< class _Functor> _Functor *target() noexcept; 
# 2222
template< class _Functor> const _Functor *target() const noexcept; 
# 2226
private: using _Invoker_type = _Res (*)(const ::std::_Any_data &, _ArgTypes && ...); 
# 2227
_Invoker_type _M_invoker; 
# 2228
}; 
# 2231
template< class _Res, class ..._ArgTypes> 
# 2233
function< _Res (_ArgTypes ...)> ::function(const ::std::function< _Res (_ArgTypes ...)>  &__x) : ::std::_Function_base() 
# 2235
{ 
# 2236
if (static_cast< bool>(__x)) 
# 2237
{ 
# 2238
(__x.::std::_Function_base::_M_manager)(::std::_Function_base::_M_functor, __x.::std::_Function_base::_M_functor, __clone_functor); 
# 2239
(_M_invoker) = (__x._M_invoker); 
# 2240
(::std::_Function_base::_M_manager) = (__x.::std::_Function_base::_M_manager); 
# 2241
}  
# 2242
} 
# 2244
template< class _Res, class ..._ArgTypes> 
# 2245
template< class _Functor, class , class > 
# 2247
function< _Res (_ArgTypes ...)> ::function(_Functor __f) : ::std::_Function_base() 
# 2249
{ 
# 2250
typedef _Function_handler< _Res (_ArgTypes ...), _Functor>  _My_handler; 
# 2252
if (_My_handler::_M_not_empty_function(__f)) 
# 2253
{ 
# 2254
_My_handler::_M_init_functor(::std::_Function_base::_M_functor, ::std::move(__f)); 
# 2255
(_M_invoker) = (&_My_handler::_M_invoke); 
# 2256
(::std::_Function_base::_M_manager) = (&_My_handler::_M_manager); 
# 2257
}  
# 2258
} 
# 2260
template< class _Res, class ..._ArgTypes> _Res 
# 2263
function< _Res (_ArgTypes ...)> ::operator()(_ArgTypes ...__args) const 
# 2264
{ 
# 2265
if (this->::std::_Function_base::_M_empty()) { 
# 2266
__throw_bad_function_call(); }  
# 2267
return (_M_invoker)(::std::_Function_base::_M_functor, ::std::forward< _ArgTypes> (__args)...); 
# 2268
} 
# 2271
template< class _Res, class ..._ArgTypes> const type_info &
# 2274
function< _Res (_ArgTypes ...)> ::target_type() const noexcept 
# 2275
{ 
# 2276
if (::std::_Function_base::_M_manager) 
# 2277
{ 
# 2278
::std::_Any_data __typeinfo_result; 
# 2279
(::std::_Function_base::_M_manager)(__typeinfo_result, ::std::_Function_base::_M_functor, __get_type_info); 
# 2280
return *__typeinfo_result.template _M_access< const ::std::type_info *> (); 
# 2281
} else { 
# 2283
return typeid(void); }  
# 2284
} 
# 2286
template< class _Res, class ..._ArgTypes> 
# 2287
template< class _Functor> _Functor *
# 2290
function< _Res (_ArgTypes ...)> ::target() noexcept 
# 2291
{ 
# 2292
if ((typeid(_Functor) == target_type()) && (::std::_Function_base::_M_manager)) 
# 2293
{ 
# 2294
::std::_Any_data __ptr; 
# 2295
if ((::std::_Function_base::_M_manager)(__ptr, ::std::_Function_base::_M_functor, __get_functor_ptr) && (!is_const< _Functor> ::value)) { 
# 2297
return 0; } else { 
# 2299
return (__ptr.template _M_access< _Functor *> ()); }  
# 2300
} else { 
# 2302
return 0; }  
# 2303
} 
# 2305
template< class _Res, class ..._ArgTypes> 
# 2306
template< class _Functor> const _Functor *
# 2309
function< _Res (_ArgTypes ...)> ::target() const noexcept 
# 2310
{ 
# 2311
if ((typeid(_Functor) == target_type()) && (::std::_Function_base::_M_manager)) 
# 2312
{ 
# 2313
::std::_Any_data __ptr; 
# 2314
(::std::_Function_base::_M_manager)(__ptr, ::std::_Function_base::_M_functor, __get_functor_ptr); 
# 2315
return (__ptr.template _M_access< const _Functor *> ()); 
# 2316
} else { 
# 2318
return 0; }  
# 2319
} 
# 2331
template< class _Res, class ..._Args> inline bool 
# 2333
operator==(const function< _Res (_Args ...)>  &__f, nullptr_t) noexcept 
# 2334
{ return !(static_cast< bool>(__f)); } 
# 2337
template< class _Res, class ..._Args> inline bool 
# 2339
operator==(nullptr_t, const function< _Res (_Args ...)>  &__f) noexcept 
# 2340
{ return !(static_cast< bool>(__f)); } 
# 2349
template< class _Res, class ..._Args> inline bool 
# 2351
operator!=(const function< _Res (_Args ...)>  &__f, nullptr_t) noexcept 
# 2352
{ return static_cast< bool>(__f); } 
# 2355
template< class _Res, class ..._Args> inline bool 
# 2357
operator!=(nullptr_t, const function< _Res (_Args ...)>  &__f) noexcept 
# 2358
{ return static_cast< bool>(__f); } 
# 2367
template< class _Res, class ..._Args> inline void 
# 2369
swap(function< _Res (_Args ...)>  &__x, function< _Res (_Args ...)>  &__y) 
# 2370
{ (__x.swap(__y)); } 
# 2373
}
# 39 "/usr/include/c++/5/bits/unique_ptr.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class > class auto_ptr; 
# 53
template< class _Tp> 
# 54
struct default_delete { 
# 57
constexpr default_delete() noexcept = default;
# 64
template< class _Up, class  = typename enable_if< is_convertible< _Up *, _Tp *> ::value> ::type> 
# 66
default_delete(const std::default_delete< _Up>  &) noexcept { } 
# 70
void operator()(_Tp *__ptr) const 
# 71
{ 
# 72
static_assert((!is_void< _Tp> ::value), "can\'t delete pointer to incomplete type");
# 74
static_assert((sizeof(_Tp) > (0)), "can\'t delete pointer to incomplete type");
# 76
delete __ptr; 
# 77
} 
# 78
}; 
# 83
template< class _Tp> 
# 84
struct default_delete< _Tp []>  { 
# 88
private: 
# 87
template< class _Up> using __remove_cv = typename remove_cv< _Up> ::type; 
# 91
template< class _Up> using __is_derived_Tp = __and_< is_base_of< _Tp, _Up> , __not_< is_same< __remove_cv< _Tp> , __remove_cv< _Up> > > > ; 
# 98
public: constexpr default_delete() noexcept = default;
# 109
template< class _Up, class  = typename enable_if< !__and_< is_base_of< _Tp, _Up> , __not_< is_same< __remove_cv< _Tp> , __remove_cv< _Up> > > > ::value> ::type> 
# 111
default_delete(const std::default_delete< _Up []>  &) noexcept { } 
# 115
void operator()(_Tp *__ptr) const 
# 116
{ 
# 117
static_assert((sizeof(_Tp) > (0)), "can\'t delete pointer to incomplete type");
# 119
delete [] __ptr; 
# 120
} 
# 122
template < typename _Up >
 typename enable_if < __is_derived_Tp < _Up > :: value > :: type
 operator ( ) ( _Up * ) const = delete;
# 125
}; 
# 128
template< class _Tp, class _Dp = default_delete< _Tp> > 
# 129
class unique_ptr { 
# 132
class _Pointer { 
# 134
template< class _Up> static typename _Up::pointer __test(typename _Up::pointer *); 
# 137
template< class _Up> static _Tp *__test(...); 
# 140
typedef typename remove_reference< _Dp> ::type _Del; 
# 143
public: typedef __decltype((__test< _Del> (0))) type; 
# 144
}; 
# 146
typedef tuple< typename _Pointer::type, _Dp>  __tuple_type; 
# 147
__tuple_type _M_t; 
# 150
public: typedef typename _Pointer::type pointer; 
# 151
typedef _Tp element_type; 
# 152
typedef _Dp deleter_type; 
# 157
constexpr unique_ptr() noexcept : _M_t() 
# 159
{ static_assert((!is_pointer< _Dp> ::value), "constructed with null function pointer deleter");
# 160
} 
# 169
explicit unique_ptr(pointer __p) noexcept : _M_t(__p, deleter_type()) 
# 171
{ static_assert((!is_pointer< _Dp> ::value), "constructed with null function pointer deleter");
# 172
} 
# 181
unique_ptr(pointer __p, typename conditional< is_reference< _Dp> ::value, _Dp, const _Dp &> ::type 
# 183
__d) noexcept : _M_t(__p, __d) 
# 184
{ } 
# 193
unique_ptr(pointer __p, typename remove_reference< _Dp> ::type &&
# 194
__d) noexcept : _M_t(std::move(__p), std::move(__d)) 
# 196
{ static_assert((!std::is_reference< _Dp> ::value), "rvalue deleter bound to reference");
# 197
} 
# 200
constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { } 
# 205
unique_ptr(unique_ptr &&__u) noexcept : _M_t(__u.release(), std::forward< deleter_type> (__u.get_deleter())) 
# 206
{ } 
# 214
template< class _Up, class _Ep, class  = _Require< is_convertible< typename std::unique_ptr< _Up, _Ep> ::pointer, typename _Pointer::type> , __not_< is_array< _Up> > , typename conditional< is_reference< _Dp> ::value, is_same< _Ep, _Dp> , is_convertible< _Ep, _Dp> > ::type> > 
# 220
unique_ptr(std::unique_ptr< _Up, _Ep>  &&__u) noexcept : _M_t((__u.release()), std::forward< _Ep> ((__u.get_deleter()))) 
# 222
{ } 
# 226
template< class _Up, class  = _Require< is_convertible< _Up *, _Tp *> , is_same< _Dp, default_delete< _Tp> > > > inline unique_ptr(auto_ptr< _Up>  && __u) noexcept; 
# 232
~unique_ptr() noexcept 
# 233
{ 
# 234
auto &__ptr = std::get< 0> (_M_t); 
# 235
if (__ptr != nullptr) { 
# 236
this->get_deleter()(__ptr); }  
# 237
__ptr = pointer(); 
# 238
} 
# 249
unique_ptr &operator=(unique_ptr &&__u) noexcept 
# 250
{ 
# 251
reset(__u.release()); 
# 252
this->get_deleter() = std::forward< deleter_type> (__u.get_deleter()); 
# 253
return *this; 
# 254
} 
# 263
template< class _Up, class _Ep> typename enable_if< __and_< is_convertible< typename std::unique_ptr< _Up, _Ep> ::pointer, typename _Pointer::type> , __not_< is_array< _Up> > > ::value, unique_ptr &> ::type 
# 269
operator=(std::unique_ptr< _Up, _Ep>  &&__u) noexcept 
# 270
{ 
# 271
reset((__u.release())); 
# 272
this->get_deleter() = std::forward< _Ep> ((__u.get_deleter())); 
# 273
return *this; 
# 274
} 
# 278
unique_ptr &operator=(nullptr_t) noexcept 
# 279
{ 
# 280
reset(); 
# 281
return *this; 
# 282
} 
# 288
typename add_lvalue_reference< _Tp> ::type operator*() const 
# 289
{ 
# 290
; 
# 291
return *get(); 
# 292
} 
# 296
pointer operator->() const noexcept 
# 297
{ 
# 298
; 
# 299
return get(); 
# 300
} 
# 304
pointer get() const noexcept 
# 305
{ return std::get< 0> (_M_t); } 
# 309
deleter_type &get_deleter() noexcept 
# 310
{ return std::get< 1> (_M_t); } 
# 314
const deleter_type &get_deleter() const noexcept 
# 315
{ return std::get< 1> (_M_t); } 
# 318
explicit operator bool() const noexcept 
# 319
{ return (get() == pointer()) ? false : true; } 
# 325
pointer release() noexcept 
# 326
{ 
# 327
pointer __p = get(); 
# 328
std::get< 0> (_M_t) = pointer(); 
# 329
return __p; 
# 330
} 
# 339
void reset(pointer __p = pointer()) noexcept 
# 340
{ 
# 341
using std::swap;
# 342
swap(std::get< 0> (_M_t), __p); 
# 343
if (__p != pointer()) { 
# 344
this->get_deleter()(__p); }  
# 345
} 
# 349
void swap(unique_ptr &__u) noexcept 
# 350
{ 
# 351
using std::swap;
# 352
swap(_M_t, __u._M_t); 
# 353
} 
# 356
unique_ptr(const unique_ptr &) = delete;
# 357
unique_ptr &operator=(const unique_ptr &) = delete;
# 358
}; 
# 364
template< class _Tp, class _Dp> 
# 365
class unique_ptr< _Tp [], _Dp>  { 
# 368
class _Pointer { 
# 370
template< class _Up> static typename _Up::pointer __test(typename _Up::pointer *); 
# 373
template< class _Up> static _Tp *__test(...); 
# 376
typedef typename remove_reference< _Dp> ::type _Del; 
# 379
public: typedef __decltype((__test< _Del> (0))) type; 
# 380
}; 
# 382
typedef tuple< typename _Pointer::type, _Dp>  __tuple_type; 
# 383
__tuple_type _M_t; 
# 385
template< class _Up> using __remove_cv = typename remove_cv< _Up> ::type; 
# 389
template< class _Up> using __is_derived_Tp = __and_< is_base_of< _Tp, _Up> , __not_< is_same< __remove_cv< _Tp> , __remove_cv< _Up> > > > ; 
# 394
template< class _Up, class _Ep, class 
# 395
_Tp_pointer = typename _Pointer::type, class 
# 396
_Up_pointer = typename std::unique_ptr< _Up, _Ep> ::pointer> using __safe_conversion = __and_< is_convertible< _Up_pointer, _Tp_pointer> , is_array< _Up> , __or_< __not_< is_pointer< _Up_pointer> > , __not_< is_pointer< _Tp_pointer> > , __not_< __is_derived_Tp< typename remove_extent< _Up> ::type> > > > ; 
# 407
public: typedef typename _Pointer::type pointer; 
# 408
typedef _Tp element_type; 
# 409
typedef _Dp deleter_type; 
# 414
constexpr unique_ptr() noexcept : _M_t() 
# 416
{ static_assert((!std::is_pointer< _Dp> ::value), "constructed with null function pointer deleter");
# 417
} 
# 426
explicit unique_ptr(pointer __p) noexcept : _M_t(__p, deleter_type()) 
# 428
{ static_assert((!is_pointer< _Dp> ::value), "constructed with null function pointer deleter");
# 429
} 
# 432
template < typename _Up, typename = _Require < is_pointer < pointer >,
        is_convertible < _Up *, pointer >, __is_derived_Tp < _Up > > >
 explicit
 unique_ptr ( _Up * __p ) = delete;
# 444
unique_ptr(pointer __p, typename conditional< is_reference< _Dp> ::value, _Dp, const _Dp &> ::type 
# 446
__d) noexcept : _M_t(__p, __d) 
# 447
{ } 
# 456
unique_ptr(pointer __p, typename remove_reference< _Dp> ::type &&
# 457
__d) noexcept : _M_t(std::move(__p), std::move(__d)) 
# 459
{ static_assert((!is_reference< _Dp> ::value), "rvalue deleter bound to reference");
# 460
} 
# 463
unique_ptr(std::unique_ptr< _Tp [], _Dp>  &&__u) noexcept : _M_t(__u.release(), std::forward< deleter_type> (__u.get_deleter())) 
# 464
{ } 
# 467
constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { } 
# 469
template< class _Up, class _Ep, class 
# 470
 = _Require< __safe_conversion< _Up, _Ep, typename _Pointer::type, typename std::unique_ptr< _Up, _Ep> ::pointer> , typename conditional< is_reference< _Dp> ::value, is_same< _Ep, _Dp> , is_convertible< _Ep, _Dp> > ::type> > 
# 475
unique_ptr(std::unique_ptr< _Up, _Ep>  &&__u) noexcept : _M_t((__u.release()), std::forward< _Ep> ((__u.get_deleter()))) 
# 477
{ } 
# 480
~unique_ptr() 
# 481
{ 
# 482
auto &__ptr = std::get< 0> (_M_t); 
# 483
if (__ptr != nullptr) { 
# 484
this->get_deleter()(__ptr); }  
# 485
__ptr = pointer(); 
# 486
} 
# 497
std::unique_ptr< _Tp [], _Dp>  &operator=(std::unique_ptr< _Tp [], _Dp>  &&__u) noexcept 
# 498
{ 
# 499
reset(__u.release()); 
# 500
this->get_deleter() = std::forward< deleter_type> (__u.get_deleter()); 
# 501
return *this; 
# 502
} 
# 511
template< class _Up, class _Ep> typename enable_if< __and_< is_convertible< typename std::unique_ptr< _Up, _Ep> ::pointer, typename _Pointer::type> , is_array< _Up> , __or_< __not_< is_pointer< typename std::unique_ptr< _Up, _Ep> ::pointer> > , __not_< is_pointer< typename _Pointer::type> > , __not_< __is_derived_Tp< typename remove_extent< _Up> ::type> > > > ::value, std::unique_ptr< _Tp [], _Dp>  &> ::type 
# 514
operator=(std::unique_ptr< _Up, _Ep>  &&__u) noexcept 
# 515
{ 
# 516
reset((__u.release())); 
# 517
this->get_deleter() = std::forward< _Ep> ((__u.get_deleter())); 
# 518
return *this; 
# 519
} 
# 523
std::unique_ptr< _Tp [], _Dp>  &operator=(nullptr_t) noexcept 
# 524
{ 
# 525
reset(); 
# 526
return *this; 
# 527
} 
# 533
typename add_lvalue_reference< _Tp> ::type operator[](size_t __i) const 
# 534
{ 
# 535
; 
# 536
return get()[__i]; 
# 537
} 
# 541
pointer get() const noexcept 
# 542
{ return std::get< 0> (_M_t); } 
# 546
deleter_type &get_deleter() noexcept 
# 547
{ return std::get< 1> (_M_t); } 
# 551
const deleter_type &get_deleter() const noexcept 
# 552
{ return std::get< 1> (_M_t); } 
# 555
explicit operator bool() const noexcept 
# 556
{ return (get() == pointer()) ? false : true; } 
# 562
pointer release() noexcept 
# 563
{ 
# 564
pointer __p = get(); 
# 565
std::get< 0> (_M_t) = pointer(); 
# 566
return __p; 
# 567
} 
# 576
void reset(pointer __p = pointer()) noexcept 
# 577
{ 
# 578
using std::swap;
# 579
swap(std::get< 0> (_M_t), __p); 
# 580
if (__p != nullptr) { 
# 581
this->get_deleter()(__p); }  
# 582
} 
# 585
template < typename _Up, typename = _Require < is_pointer < pointer >,
        is_convertible < _Up *, pointer >, __is_derived_Tp < _Up > > >
 void reset ( _Up * ) = delete;
# 591
void swap(std::unique_ptr< _Tp [], _Dp>  &__u) noexcept 
# 592
{ 
# 593
using std::swap;
# 594
swap(_M_t, __u._M_t); 
# 595
} 
# 598
unique_ptr(const std::unique_ptr< _Tp [], _Dp>  &) = delete;
# 599
std::unique_ptr< _Tp [], _Dp>  &operator=(const std::unique_ptr< _Tp [], _Dp>  &) = delete;
# 602
template < typename _Up, typename = _Require < is_pointer < pointer >,
        is_convertible < _Up *, pointer >, __is_derived_Tp < _Up > > >
 unique_ptr ( _Up *, typename
     conditional < is_reference < deleter_type > :: value,
     deleter_type, const deleter_type & > :: type ) = delete;
# 609
template < typename _Up, typename = _Require < is_pointer < pointer >,
        is_convertible < _Up *, pointer >, __is_derived_Tp < _Up > > >
 unique_ptr ( _Up *, typename
     remove_reference < deleter_type > :: type && ) = delete;
# 613
}; 
# 615
template< class _Tp, class _Dp> inline void 
# 617
swap(unique_ptr< _Tp, _Dp>  &__x, unique_ptr< _Tp, _Dp>  &
# 618
__y) noexcept 
# 619
{ (__x.swap(__y)); } 
# 621
template< class _Tp, class _Dp, class 
# 622
_Up, class _Ep> inline bool 
# 624
operator==(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 625
__y) 
# 626
{ return (__x.get()) == (__y.get()); } 
# 628
template< class _Tp, class _Dp> inline bool 
# 630
operator==(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) noexcept 
# 631
{ return !__x; } 
# 633
template< class _Tp, class _Dp> inline bool 
# 635
operator==(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) noexcept 
# 636
{ return !__x; } 
# 638
template< class _Tp, class _Dp, class 
# 639
_Up, class _Ep> inline bool 
# 641
operator!=(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 642
__y) 
# 643
{ return (__x.get()) != (__y.get()); } 
# 645
template< class _Tp, class _Dp> inline bool 
# 647
operator!=(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) noexcept 
# 648
{ return (bool)__x; } 
# 650
template< class _Tp, class _Dp> inline bool 
# 652
operator!=(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) noexcept 
# 653
{ return (bool)__x; } 
# 655
template< class _Tp, class _Dp, class 
# 656
_Up, class _Ep> inline bool 
# 658
operator<(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 659
__y) 
# 660
{ 
# 663
typedef typename common_type< typename unique_ptr< _Tp, _Dp> ::pointer, typename unique_ptr< _Up, _Ep> ::pointer> ::type _CT; 
# 664
return less< typename common_type< typename unique_ptr< _Tp, _Dp> ::pointer, typename unique_ptr< _Up, _Ep> ::pointer> ::type> ()((__x.get()), (__y.get())); 
# 665
} 
# 667
template< class _Tp, class _Dp> inline bool 
# 669
operator<(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) 
# 670
{ return less< typename unique_ptr< _Tp, _Dp> ::pointer> ()((__x.get()), nullptr); 
# 671
} 
# 673
template< class _Tp, class _Dp> inline bool 
# 675
operator<(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) 
# 676
{ return less< typename unique_ptr< _Tp, _Dp> ::pointer> ()(nullptr, (__x.get())); 
# 677
} 
# 679
template< class _Tp, class _Dp, class 
# 680
_Up, class _Ep> inline bool 
# 682
operator<=(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 683
__y) 
# 684
{ return !(__y < __x); } 
# 686
template< class _Tp, class _Dp> inline bool 
# 688
operator<=(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) 
# 689
{ return !(nullptr < __x); } 
# 691
template< class _Tp, class _Dp> inline bool 
# 693
operator<=(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) 
# 694
{ return !(__x < nullptr); } 
# 696
template< class _Tp, class _Dp, class 
# 697
_Up, class _Ep> inline bool 
# 699
operator>(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 700
__y) 
# 701
{ return __y < __x; } 
# 703
template< class _Tp, class _Dp> inline bool 
# 705
operator>(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) 
# 706
{ return less< typename unique_ptr< _Tp, _Dp> ::pointer> ()(nullptr, (__x.get())); 
# 707
} 
# 709
template< class _Tp, class _Dp> inline bool 
# 711
operator>(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) 
# 712
{ return less< typename unique_ptr< _Tp, _Dp> ::pointer> ()((__x.get()), nullptr); 
# 713
} 
# 715
template< class _Tp, class _Dp, class 
# 716
_Up, class _Ep> inline bool 
# 718
operator>=(const unique_ptr< _Tp, _Dp>  &__x, const unique_ptr< _Up, _Ep>  &
# 719
__y) 
# 720
{ return !(__x < __y); } 
# 722
template< class _Tp, class _Dp> inline bool 
# 724
operator>=(const unique_ptr< _Tp, _Dp>  &__x, nullptr_t) 
# 725
{ return !(__x < nullptr); } 
# 727
template< class _Tp, class _Dp> inline bool 
# 729
operator>=(nullptr_t, const unique_ptr< _Tp, _Dp>  &__x) 
# 730
{ return !(nullptr < __x); } 
# 733
template< class _Tp, class _Dp> 
# 734
struct hash< unique_ptr< _Tp, _Dp> >  : public __hash_base< unsigned long, unique_ptr< _Tp, _Dp> >  { 
# 738
::std::size_t operator()(const unique_ptr< _Tp, _Dp>  &__u) const noexcept 
# 739
{ 
# 740
typedef unique_ptr< _Tp, _Dp>  _UP; 
# 741
return ::std::hash< typename unique_ptr< _Tp, _Dp> ::pointer> ()((__u.get())); 
# 742
} 
# 743
}; 
# 782
}
# 40 "/usr/include/c++/5/bits/allocated_ptr.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Alloc> 
# 46
struct __allocated_ptr { 
# 48
using pointer = typename allocator_traits< _Alloc> ::pointer; 
# 49
using value_type = typename allocator_traits< _Alloc> ::value_type; 
# 52
__allocated_ptr(_Alloc &__a, pointer __ptr) noexcept : _M_alloc((&__a)), _M_ptr(__ptr) 
# 54
{ } 
# 57
template< class _Ptr, class 
# 58
_Req = _Require< is_same< _Ptr, typename allocator_traits< _Alloc> ::value_type *> > > 
# 59
__allocated_ptr(_Alloc &__a, _Ptr __ptr) : _M_alloc((&__a)), _M_ptr(pointer_traits< typename allocator_traits< _Alloc> ::pointer> ::pointer_to(*__ptr)) 
# 61
{ } 
# 64
__allocated_ptr(__allocated_ptr &&__gd) noexcept : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr) 
# 66
{ (__gd._M_ptr) = nullptr; } 
# 69
~__allocated_ptr() 
# 70
{ 
# 71
if ((_M_ptr) != nullptr) { 
# 72
std::allocator_traits< _Alloc> ::deallocate(*(_M_alloc), _M_ptr, 1); }  
# 73
} 
# 77
__allocated_ptr &operator=(nullptr_t) noexcept 
# 78
{ 
# 79
(_M_ptr) = nullptr; 
# 80
return *this; 
# 81
} 
# 84
value_type *get() { return _S_raw_ptr(_M_ptr); } 
# 87
private: value_type *_S_raw_ptr(value_type *__ptr) { return __ptr; } 
# 89
template< class _Ptr> auto 
# 90
_S_raw_ptr(_Ptr __ptr)->__decltype((_S_raw_ptr((__ptr.operator->())))) 
# 91
{ return _S_raw_ptr((__ptr.operator->())); } 
# 93
_Alloc *_M_alloc; 
# 94
pointer _M_ptr; 
# 95
}; 
# 98
template< class _Alloc> __allocated_ptr< _Alloc>  
# 100
__allocate_guarded(_Alloc &__a) 
# 101
{ 
# 102
return {__a, std::allocator_traits< _Alloc> ::allocate(__a, 1)}; 
# 103
} 
# 106
}
# 55 "/usr/include/c++/5/bits/shared_ptr_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 60
template< class > class auto_ptr; 
# 67
class bad_weak_ptr : public exception { 
# 71
public: virtual const char *what() const noexcept; 
# 73
virtual ~bad_weak_ptr() noexcept; 
# 74
}; 
# 78
inline void __throw_bad_weak_ptr() 
# 79
{ throw bad_weak_ptr(); } 
# 81
using __gnu_cxx::_Lock_policy;
# 82
using __gnu_cxx::__default_lock_policy;
# 83
using __gnu_cxx::_S_single;
# 84
using __gnu_cxx::_S_mutex;
# 85
using __gnu_cxx::_S_atomic;
# 88
template< __gnu_cxx::_Lock_policy _Lp> 
# 89
class _Mutex_base { 
# 93
protected: enum { _S_need_barriers}; 
# 94
}; 
# 97
template<> class _Mutex_base< __gnu_cxx::_S_mutex>  : public __gnu_cxx::__mutex { 
# 104
protected: enum { _S_need_barriers = 1}; 
# 105
}; 
# 107
template< __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> 
# 108
class _Sp_counted_base : public _Mutex_base< _Lp>  { 
# 112
public: _Sp_counted_base() noexcept : _M_use_count(1), _M_weak_count(1) 
# 113
{ } 
# 116
virtual ~_Sp_counted_base() noexcept 
# 117
{ } 
# 122
virtual void _M_dispose() noexcept = 0; 
# 126
virtual void _M_destroy() noexcept 
# 127
{ delete this; } 
# 130
virtual void *_M_get_deleter(const ::std::type_info &) noexcept = 0; 
# 133
void _M_add_ref_copy() 
# 134
{ __gnu_cxx::__atomic_add_dispatch(&(_M_use_count), 1); } 
# 137
void _M_add_ref_lock(); 
# 140
bool _M_add_ref_lock_nothrow(); 
# 143
void _M_release() noexcept 
# 144
{ 
# 146
; 
# 147
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_use_count), -1) == 1) 
# 148
{ 
# 149
; 
# 150
_M_dispose(); 
# 155
if (_Mutex_base< _Lp> ::_S_need_barriers) 
# 156
{ 
# 157
__asm__ volatile("" : : : "memory"); 
# 158
__asm__ volatile("" : : : "memory"); 
# 159
}  
# 162
; 
# 163
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_weak_count), -1) == 1) 
# 165
{ 
# 166
; 
# 167
_M_destroy(); 
# 168
}  
# 169
}  
# 170
} 
# 173
void _M_weak_add_ref() noexcept 
# 174
{ __gnu_cxx::__atomic_add_dispatch(&(_M_weak_count), 1); } 
# 177
void _M_weak_release() noexcept 
# 178
{ 
# 180
; 
# 181
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_weak_count), -1) == 1) 
# 182
{ 
# 183
; 
# 184
if (_Mutex_base< _Lp> ::_S_need_barriers) 
# 185
{ 
# 188
__asm__ volatile("" : : : "memory"); 
# 189
__asm__ volatile("" : : : "memory"); 
# 190
}  
# 191
_M_destroy(); 
# 192
}  
# 193
} 
# 196
long _M_get_use_count() const noexcept 
# 197
{ 
# 200
return __atomic_load_n(&(_M_use_count), 0); 
# 201
} 
# 204
private: _Sp_counted_base(const _Sp_counted_base &) = delete;
# 205
_Sp_counted_base &operator=(const _Sp_counted_base &) = delete;
# 207
::_Atomic_word _M_use_count; 
# 208
::_Atomic_word _M_weak_count; 
# 209
}; 
# 214
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_add_ref_lock() 
# 215
{ 
# 216
if ((_M_use_count) == 0) { 
# 217
__throw_bad_weak_ptr(); }  
# 218
++(_M_use_count); 
# 219
} 
# 224
template<> inline void _Sp_counted_base< __gnu_cxx::_S_mutex> ::_M_add_ref_lock() 
# 225
{ 
# 226
__gnu_cxx::__scoped_lock sentry(*this); 
# 227
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_use_count), 1) == 0) 
# 228
{ 
# 229
(_M_use_count) = 0; 
# 230
__throw_bad_weak_ptr(); 
# 231
}  
# 232
} 
# 237
template<> inline void _Sp_counted_base< __gnu_cxx::_S_atomic> ::_M_add_ref_lock() 
# 238
{ 
# 240
_Atomic_word __count = this->_M_get_use_count(); 
# 241
do 
# 242
{ 
# 243
if (__count == 0) { 
# 244
__throw_bad_weak_ptr(); }  
# 247
} 
# 248
while (!__atomic_compare_exchange_n(&(_M_use_count), &__count, __count + 1, true, 4, 0)); 
# 251
} 
# 256
template<> inline bool _Sp_counted_base< __gnu_cxx::_S_single> ::_M_add_ref_lock_nothrow() 
# 257
{ 
# 258
if ((_M_use_count) == 0) { 
# 259
return false; }  
# 260
++(_M_use_count); 
# 261
return true; 
# 262
} 
# 267
template<> inline bool _Sp_counted_base< __gnu_cxx::_S_mutex> ::_M_add_ref_lock_nothrow() 
# 268
{ 
# 269
__gnu_cxx::__scoped_lock sentry(*this); 
# 270
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_use_count), 1) == 0) 
# 271
{ 
# 272
(_M_use_count) = 0; 
# 273
return false; 
# 274
}  
# 275
return true; 
# 276
} 
# 281
template<> inline bool _Sp_counted_base< __gnu_cxx::_S_atomic> ::_M_add_ref_lock_nothrow() 
# 282
{ 
# 284
_Atomic_word __count = this->_M_get_use_count(); 
# 285
do 
# 286
{ 
# 287
if (__count == 0) { 
# 288
return false; }  
# 291
} 
# 292
while (!__atomic_compare_exchange_n(&(_M_use_count), &__count, __count + 1, true, 4, 0)); 
# 295
return true; 
# 296
} 
# 300
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_add_ref_copy() 
# 301
{ ++(_M_use_count); } 
# 305
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_release() noexcept 
# 306
{ 
# 307
if ((--(_M_use_count)) == 0) 
# 308
{ 
# 309
this->_M_dispose(); 
# 310
if ((--(_M_weak_count)) == 0) { 
# 311
this->_M_destroy(); }  
# 312
}  
# 313
} 
# 317
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_weak_add_ref() noexcept 
# 318
{ ++(_M_weak_count); } 
# 322
template<> inline void _Sp_counted_base< __gnu_cxx::_S_single> ::_M_weak_release() noexcept 
# 323
{ 
# 324
if ((--(_M_weak_count)) == 0) { 
# 325
this->_M_destroy(); }  
# 326
} 
# 330
template<> inline long _Sp_counted_base< __gnu_cxx::_S_single> ::_M_get_use_count() const noexcept 
# 331
{ return _M_use_count; } 
# 335
template< class _Tp, __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __shared_ptr; 
# 338
template< class _Tp, __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __weak_ptr; 
# 341
template< class _Tp, __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __enable_shared_from_this; 
# 344
template< class _Tp> class shared_ptr; 
# 347
template< class _Tp> class weak_ptr; 
# 350
template< class _Tp> struct owner_less; 
# 353
template< class _Tp> class enable_shared_from_this; 
# 356
template< __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __weak_count; 
# 359
template< __gnu_cxx::_Lock_policy _Lp = __gnu_cxx::_S_atomic> class __shared_count; 
# 364
template< class _Ptr, __gnu_cxx::_Lock_policy _Lp> 
# 365
class _Sp_counted_ptr final : public _Sp_counted_base< _Lp>  { 
# 369
public: explicit _Sp_counted_ptr(_Ptr __p) noexcept : _M_ptr(__p) 
# 370
{ } 
# 373
virtual void _M_dispose() noexcept 
# 374
{ delete (_M_ptr); } 
# 377
virtual void _M_destroy() noexcept 
# 378
{ delete this; } 
# 381
virtual void *_M_get_deleter(const ::std::type_info &) noexcept 
# 382
{ return nullptr; } 
# 384
_Sp_counted_ptr(const _Sp_counted_ptr &) = delete;
# 385
_Sp_counted_ptr &operator=(const _Sp_counted_ptr &) = delete;
# 388
private: _Ptr _M_ptr; 
# 389
}; 
# 393
template<> inline void _Sp_counted_ptr< nullptr_t, __gnu_cxx::_S_single> ::_M_dispose() noexcept { } 
# 397
template<> inline void _Sp_counted_ptr< nullptr_t, __gnu_cxx::_S_mutex> ::_M_dispose() noexcept { } 
# 401
template<> inline void _Sp_counted_ptr< nullptr_t, __gnu_cxx::_S_atomic> ::_M_dispose() noexcept { } 
# 403
template< int _Nm, class _Tp, bool 
# 404
__use_ebo = (!__is_final(_Tp)) && __is_empty(_Tp)> struct _Sp_ebo_helper; 
# 408
template< int _Nm, class _Tp> 
# 409
struct _Sp_ebo_helper< _Nm, _Tp, true>  : private _Tp { 
# 411
explicit _Sp_ebo_helper(const _Tp &__tp) : _Tp(__tp) { } 
# 414
static _Tp &_S_get(::std::_Sp_ebo_helper< _Nm, _Tp, true>  &__eboh) { return static_cast< _Tp &>(__eboh); } 
# 415
}; 
# 418
template< int _Nm, class _Tp> 
# 419
struct _Sp_ebo_helper< _Nm, _Tp, false>  { 
# 421
explicit _Sp_ebo_helper(const _Tp &__tp) : _M_tp(__tp) { } 
# 424
static _Tp &_S_get(std::_Sp_ebo_helper< _Nm, _Tp, false>  &__eboh) 
# 425
{ return __eboh._M_tp; } 
# 428
private: _Tp _M_tp; 
# 429
}; 
# 432
template< class _Ptr, class _Deleter, class _Alloc, __gnu_cxx::_Lock_policy _Lp> 
# 433
class _Sp_counted_deleter final : public _Sp_counted_base< _Lp>  { 
# 435
class _Impl : private _Sp_ebo_helper< 0, _Deleter> , private _Sp_ebo_helper< 1, _Alloc>  { 
# 437
typedef _Sp_ebo_helper< 0, _Deleter>  _Del_base; 
# 438
typedef _Sp_ebo_helper< 1, _Alloc>  _Alloc_base; 
# 441
public: _Impl(_Ptr __p, _Deleter __d, const _Alloc &__a) noexcept : _Del_base(__d), _Alloc_base(__a), _M_ptr(__p) 
# 443
{ } 
# 445
_Deleter &_M_del() noexcept { return _Del_base::_S_get(*this); } 
# 446
_Alloc &_M_alloc() noexcept { return _Alloc_base::_S_get(*this); } 
# 448
_Ptr _M_ptr; 
# 449
}; 
# 452
public: using __allocator_type = ::std::__alloc_rebind< _Alloc, _Sp_counted_deleter> ; 
# 455
_Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept : _M_impl(__p, __d, _Alloc()) 
# 456
{ } 
# 459
_Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc &__a) noexcept : _M_impl(__p, __d, __a) 
# 460
{ } 
# 462
~_Sp_counted_deleter() noexcept { } 
# 465
virtual void _M_dispose() noexcept 
# 466
{ ((_M_impl)._M_del())(((_M_impl)._M_ptr)); } 
# 469
virtual void _M_destroy() noexcept 
# 470
{ 
# 471
__allocator_type __a(((_M_impl)._M_alloc())); 
# 472
__allocated_ptr< ::std::__alloc_rebind< _Alloc, _Sp_counted_deleter> >  __guard_ptr{__a, this}; 
# 473
(this->~_Sp_counted_deleter()); 
# 474
} 
# 477
virtual void *_M_get_deleter(const ::std::type_info &__ti) noexcept 
# 478
{ 
# 482
return (__ti == (typeid(_Deleter))) ? ::std::__addressof(((_M_impl)._M_del())) : nullptr; 
# 488
} 
# 491
private: _Impl _M_impl; 
# 492
}; 
# 496
struct _Sp_make_shared_tag { }; 
# 498
template< class _Tp, class _Alloc, __gnu_cxx::_Lock_policy _Lp> 
# 499
class _Sp_counted_ptr_inplace final : public _Sp_counted_base< _Lp>  { 
# 501
class _Impl : private _Sp_ebo_helper< 0, _Alloc>  { 
# 503
typedef _Sp_ebo_helper< 0, _Alloc>  _A_base; 
# 506
public: explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { } 
# 508
_Alloc &_M_alloc() noexcept { return _A_base::_S_get(*this); } 
# 510
::__gnu_cxx::__aligned_buffer< _Tp>  _M_storage; 
# 511
}; 
# 514
public: using __allocator_type = ::std::__alloc_rebind< _Alloc, _Sp_counted_ptr_inplace> ; 
# 516
template< class ..._Args> 
# 517
_Sp_counted_ptr_inplace(_Alloc __a, _Args &&...__args) : _M_impl(__a) 
# 519
{ 
# 522
allocator_traits< _Alloc> ::construct(__a, _M_ptr(), ::std::forward< _Args> (__args)...); 
# 524
} 
# 526
~_Sp_counted_ptr_inplace() noexcept { } 
# 529
virtual void _M_dispose() noexcept 
# 530
{ 
# 531
allocator_traits< _Alloc> ::destroy(((_M_impl)._M_alloc()), _M_ptr()); 
# 532
} 
# 536
virtual void _M_destroy() noexcept 
# 537
{ 
# 538
__allocator_type __a(((_M_impl)._M_alloc())); 
# 539
__allocated_ptr< ::std::__alloc_rebind< _Alloc, _Sp_counted_ptr_inplace> >  __guard_ptr{__a, this}; 
# 540
(this->~_Sp_counted_ptr_inplace()); 
# 541
} 
# 545
virtual void *_M_get_deleter(const ::std::type_info &__ti) noexcept 
# 546
{ 
# 548
if ((__ti == (typeid(::std::_Sp_make_shared_tag)))) { 
# 549
return const_cast< typename remove_cv< _Tp> ::type *>(_M_ptr()); }  
# 551
return nullptr; 
# 552
} 
# 555
private: _Tp *_M_ptr() noexcept { return (((_M_impl)._M_storage)._M_ptr()); } 
# 557
_Impl _M_impl; 
# 558
}; 
# 561
template< __gnu_cxx::_Lock_policy _Lp> 
# 562
class __shared_count { 
# 565
public: constexpr __shared_count() noexcept : _M_pi((0)) 
# 566
{ } 
# 568
template< class _Ptr> explicit 
# 570
__shared_count(_Ptr __p) : _M_pi((0)) 
# 571
{ 
# 572
try 
# 573
{ 
# 574
(_M_pi) = (new _Sp_counted_ptr< _Ptr, _Lp> (__p)); 
# 575
} 
# 576
catch (...) 
# 577
{ 
# 578
delete __p; 
# 579
throw; 
# 580
}  
# 581
} 
# 583
template< class _Ptr, class _Deleter> 
# 584
__shared_count(_Ptr __p, _Deleter __d) : __shared_count(__p, std::move(__d), allocator< void> ()) 
# 586
{ } 
# 588
template< class _Ptr, class _Deleter, class _Alloc> 
# 589
__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi((0)) 
# 590
{ 
# 591
typedef _Sp_counted_deleter< _Ptr, _Deleter, _Alloc, _Lp>  _Sp_cd_type; 
# 592
try 
# 593
{ 
# 594
typename _Sp_counted_deleter< _Ptr, _Deleter, _Alloc, _Lp> ::__allocator_type __a2(__a); 
# 595
auto __guard = std::__allocate_guarded(__a2); 
# 596
_Sp_cd_type *__mem = (__guard.get()); 
# 597
::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a)); 
# 598
(_M_pi) = __mem; 
# 599
__guard = nullptr; 
# 600
} 
# 601
catch (...) 
# 602
{ 
# 603
__d(__p); 
# 604
throw; 
# 605
}  
# 606
} 
# 608
template< class _Tp, class _Alloc, class ..._Args> 
# 609
__shared_count(_Sp_make_shared_tag, _Tp *, const _Alloc &__a, _Args &&...
# 610
__args) : _M_pi((0)) 
# 612
{ 
# 613
typedef _Sp_counted_ptr_inplace< _Tp, _Alloc, _Lp>  _Sp_cp_type; 
# 614
typename _Sp_counted_ptr_inplace< _Tp, _Alloc, _Lp> ::__allocator_type __a2(__a); 
# 615
auto __guard = std::__allocate_guarded(__a2); 
# 616
_Sp_cp_type *__mem = (__guard.get()); 
# 617
::new (__mem) _Sp_cp_type(std::move(__a), std::forward< _Args> (__args)...); 
# 619
(_M_pi) = __mem; 
# 620
__guard = nullptr; 
# 621
} 
# 625
template< class _Tp> inline explicit __shared_count(auto_ptr< _Tp>  && __r); 
# 631
template< class _Tp, class _Del> explicit 
# 633
__shared_count(unique_ptr< _Tp, _Del>  &&__r) : _M_pi((0)) 
# 634
{ 
# 635
using _Ptr = typename unique_ptr< _Tp, _Del> ::pointer; 
# 636
using _Del2 = typename conditional< is_reference< _Del> ::value, reference_wrapper< typename remove_reference< _Del> ::type> , _Del> ::type; 
# 639
using _Sp_cd_type = _Sp_counted_deleter< typename unique_ptr< _Tp, _Del> ::pointer, typename conditional< is_reference< _Del> ::value, reference_wrapper< typename remove_reference< _Del> ::type> , _Del> ::type, allocator< void> , _Lp> ; 
# 641
using _Alloc = allocator< _Sp_counted_deleter< typename unique_ptr< _Tp, _Del> ::pointer, typename conditional< is_reference< _Del> ::value, reference_wrapper< typename remove_reference< _Del> ::type> , _Del> ::type, allocator< void> , _Lp> > ; 
# 642
using _Alloc_traits = allocator_traits< allocator< _Sp_counted_deleter< typename unique_ptr< _Tp, _Del> ::pointer, typename conditional< is_reference< _Del> ::value, reference_wrapper< typename remove_reference< _Del> ::type> , _Del> ::type, allocator< void> , _Lp> > > ; 
# 643
_Alloc __a; 
# 644
_Sp_cd_type *__mem = _Alloc_traits::allocate(__a, 1); 
# 645
_Alloc_traits::construct(__a, __mem, (__r.release()), (__r.get_deleter())); 
# 647
(_M_pi) = __mem; 
# 648
} 
# 651
inline explicit __shared_count(const __weak_count< _Lp>  & __r); 
# 654
inline explicit __shared_count(const __weak_count< _Lp>  & __r, nothrow_t); 
# 656
~__shared_count() noexcept 
# 657
{ 
# 658
if ((_M_pi) != nullptr) { 
# 659
((_M_pi)->_M_release()); }  
# 660
} 
# 662
__shared_count(const __shared_count &__r) noexcept : _M_pi(__r._M_pi) 
# 664
{ 
# 665
if ((_M_pi) != 0) { 
# 666
((_M_pi)->_M_add_ref_copy()); }  
# 667
} 
# 670
__shared_count &operator=(const __shared_count &__r) noexcept 
# 671
{ 
# 672
_Sp_counted_base< _Lp>  *__tmp = __r._M_pi; 
# 673
if (__tmp != (_M_pi)) 
# 674
{ 
# 675
if (__tmp != 0) { 
# 676
(__tmp->_M_add_ref_copy()); }  
# 677
if ((_M_pi) != 0) { 
# 678
((_M_pi)->_M_release()); }  
# 679
(_M_pi) = __tmp; 
# 680
}  
# 681
return *this; 
# 682
} 
# 685
void _M_swap(__shared_count &__r) noexcept 
# 686
{ 
# 687
_Sp_counted_base< _Lp>  *__tmp = __r._M_pi; 
# 688
(__r._M_pi) = (_M_pi); 
# 689
(_M_pi) = __tmp; 
# 690
} 
# 693
long _M_get_use_count() const noexcept 
# 694
{ return ((_M_pi) != 0) ? ((_M_pi)->_M_get_use_count()) : 0; } 
# 697
bool _M_unique() const noexcept 
# 698
{ return this->_M_get_use_count() == (1); } 
# 701
void *_M_get_deleter(const type_info &__ti) const noexcept 
# 702
{ return (_M_pi) ? ((_M_pi)->_M_get_deleter(__ti)) : nullptr; } 
# 705
bool _M_less(const __shared_count &__rhs) const noexcept 
# 706
{ return less< _Sp_counted_base< _Lp>  *> ()(this->_M_pi, __rhs._M_pi); } 
# 709
bool _M_less(const __weak_count< _Lp>  &__rhs) const noexcept 
# 710
{ return less< _Sp_counted_base< _Lp>  *> ()(this->_M_pi, (__rhs._M_pi)); } 
# 714
friend inline bool operator==(const __shared_count &__a, const __shared_count &__b) noexcept 
# 715
{ return (__a._M_pi) == (__b._M_pi); } 
# 718
friend class __weak_count< _Lp> ; 
# 720
private: _Sp_counted_base< _Lp>  *_M_pi; 
# 721
}; 
# 724
template< __gnu_cxx::_Lock_policy _Lp> 
# 725
class __weak_count { 
# 728
public: constexpr __weak_count() noexcept : _M_pi((nullptr)) 
# 729
{ } 
# 731
__weak_count(const __shared_count< _Lp>  &__r) noexcept : _M_pi(((__r._M_pi))) 
# 733
{ 
# 734
if ((_M_pi) != nullptr) { 
# 735
((_M_pi)->_M_weak_add_ref()); }  
# 736
} 
# 738
__weak_count(const __weak_count &__r) noexcept : _M_pi(__r._M_pi) 
# 740
{ 
# 741
if ((_M_pi) != nullptr) { 
# 742
((_M_pi)->_M_weak_add_ref()); }  
# 743
} 
# 745
__weak_count(__weak_count &&__r) noexcept : _M_pi(__r._M_pi) 
# 747
{ (__r._M_pi) = nullptr; } 
# 749
~__weak_count() noexcept 
# 750
{ 
# 751
if ((_M_pi) != nullptr) { 
# 752
((_M_pi)->_M_weak_release()); }  
# 753
} 
# 756
__weak_count &operator=(const __shared_count< _Lp>  &__r) noexcept 
# 757
{ 
# 758
_Sp_counted_base< _Lp>  *__tmp = ((__r._M_pi)); 
# 759
if (__tmp != nullptr) { 
# 760
(__tmp->_M_weak_add_ref()); }  
# 761
if ((_M_pi) != nullptr) { 
# 762
((_M_pi)->_M_weak_release()); }  
# 763
(_M_pi) = __tmp; 
# 764
return *this; 
# 765
} 
# 768
__weak_count &operator=(const __weak_count &__r) noexcept 
# 769
{ 
# 770
_Sp_counted_base< _Lp>  *__tmp = __r._M_pi; 
# 771
if (__tmp != nullptr) { 
# 772
(__tmp->_M_weak_add_ref()); }  
# 773
if ((_M_pi) != nullptr) { 
# 774
((_M_pi)->_M_weak_release()); }  
# 775
(_M_pi) = __tmp; 
# 776
return *this; 
# 777
} 
# 780
__weak_count &operator=(__weak_count &&__r) noexcept 
# 781
{ 
# 782
if ((_M_pi) != nullptr) { 
# 783
((_M_pi)->_M_weak_release()); }  
# 784
(_M_pi) = (__r._M_pi); 
# 785
(__r._M_pi) = nullptr; 
# 786
return *this; 
# 787
} 
# 790
void _M_swap(__weak_count &__r) noexcept 
# 791
{ 
# 792
_Sp_counted_base< _Lp>  *__tmp = __r._M_pi; 
# 793
(__r._M_pi) = (_M_pi); 
# 794
(_M_pi) = __tmp; 
# 795
} 
# 798
long _M_get_use_count() const noexcept 
# 799
{ return ((_M_pi) != nullptr) ? ((_M_pi)->_M_get_use_count()) : 0; } 
# 802
bool _M_less(const __weak_count &__rhs) const noexcept 
# 803
{ return less< _Sp_counted_base< _Lp>  *> ()(this->_M_pi, __rhs._M_pi); } 
# 806
bool _M_less(const __shared_count< _Lp>  &__rhs) const noexcept 
# 807
{ return less< _Sp_counted_base< _Lp>  *> ()(this->_M_pi, (__rhs._M_pi)); } 
# 811
friend inline bool operator==(const __weak_count &__a, const __weak_count &__b) noexcept 
# 812
{ return (__a._M_pi) == (__b._M_pi); } 
# 815
friend class __shared_count< _Lp> ; 
# 817
private: _Sp_counted_base< _Lp>  *_M_pi; 
# 818
}; 
# 821
template< __gnu_cxx::_Lock_policy _Lp> inline 
# 823
__shared_count< _Lp> ::__shared_count(const __weak_count< _Lp>  &__r) : _M_pi(((__r._M_pi))) 
# 825
{ 
# 826
if ((_M_pi) != nullptr) { 
# 827
((_M_pi)->_M_add_ref_lock()); } else { 
# 829
__throw_bad_weak_ptr(); }  
# 830
} 
# 833
template< __gnu_cxx::_Lock_policy _Lp> inline 
# 836
__shared_count< _Lp> ::__shared_count(const __weak_count< _Lp>  &__r, nothrow_t) : _M_pi(((__r._M_pi))) 
# 838
{ 
# 839
if ((_M_pi) != nullptr) { 
# 840
if (!((_M_pi)->_M_add_ref_lock_nothrow())) { 
# 841
(_M_pi) = nullptr; }  }  
# 842
} 
# 847
template< __gnu_cxx::_Lock_policy _Lp, class _Tp1, class _Tp2> inline void __enable_shared_from_this_helper(const __shared_count< _Lp>  &, const __enable_shared_from_this< _Tp1, _Lp>  *, const _Tp2 *) noexcept; 
# 854
template< class _Tp1, class _Tp2> inline void __enable_shared_from_this_helper(const __shared_count< __gnu_cxx::_S_atomic>  &, const enable_shared_from_this< _Tp1>  *, const _Tp2 *) noexcept; 
# 860
template< __gnu_cxx::_Lock_policy _Lp> inline void 
# 862
__enable_shared_from_this_helper(const __shared_count< _Lp>  &, ...) noexcept 
# 863
{ } 
# 866
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 867
class __shared_ptr { 
# 869
template< class _Ptr> using _Convertible = typename enable_if< is_convertible< _Ptr, _Tp *> ::value> ::type; 
# 874
public: typedef _Tp element_type; 
# 876
constexpr __shared_ptr() noexcept : _M_ptr((0)), _M_refcount() 
# 878
{ } 
# 880
template< class _Tp1> explicit 
# 881
__shared_ptr(_Tp1 *__p) : _M_ptr(__p), _M_refcount(__p) 
# 883
{ 
# 885
static_assert((!is_void< _Tp1> ::value), "incomplete type");
# 886
static_assert((sizeof(_Tp1) > (0)), "incomplete type");
# 887
__enable_shared_from_this_helper(_M_refcount, __p, __p); 
# 888
} 
# 890
template< class _Tp1, class _Deleter> 
# 891
__shared_ptr(_Tp1 *__p, _Deleter __d) : _M_ptr(__p), _M_refcount(__p, __d) 
# 893
{ 
# 896
__enable_shared_from_this_helper(_M_refcount, __p, __p); 
# 897
} 
# 899
template< class _Tp1, class _Deleter, class _Alloc> 
# 900
__shared_ptr(_Tp1 *__p, _Deleter __d, _Alloc __a) : _M_ptr(__p), _M_refcount(__p, __d, std::move(__a)) 
# 902
{ 
# 905
__enable_shared_from_this_helper(_M_refcount, __p, __p); 
# 906
} 
# 908
template< class _Deleter> 
# 909
__shared_ptr(nullptr_t __p, _Deleter __d) : _M_ptr((0)), _M_refcount(__p, __d) 
# 911
{ } 
# 913
template< class _Deleter, class _Alloc> 
# 914
__shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a) : _M_ptr((0)), _M_refcount(__p, __d, std::move(__a)) 
# 916
{ } 
# 918
template< class _Tp1> 
# 919
__shared_ptr(const std::__shared_ptr< _Tp1, _Lp>  &__r, _Tp *__p) noexcept : _M_ptr(__p), _M_refcount((__r._M_refcount)) 
# 921
{ } 
# 923
__shared_ptr(const __shared_ptr &) noexcept = default;
# 924
__shared_ptr &operator=(const __shared_ptr &) noexcept = default;
# 925
~__shared_ptr() = default;
# 927
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 928
__shared_ptr(const std::__shared_ptr< _Tp1, _Lp>  &__r) noexcept : _M_ptr(((__r._M_ptr))), _M_refcount((__r._M_refcount)) 
# 930
{ } 
# 932
__shared_ptr(__shared_ptr &&__r) noexcept : _M_ptr(__r._M_ptr), _M_refcount() 
# 934
{ 
# 935
((_M_refcount)._M_swap(__r._M_refcount)); 
# 936
(__r._M_ptr) = 0; 
# 937
} 
# 939
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 940
__shared_ptr(std::__shared_ptr< _Tp1, _Lp>  &&__r) noexcept : _M_ptr(((__r._M_ptr))), _M_refcount() 
# 942
{ 
# 943
((_M_refcount)._M_swap((__r._M_refcount))); 
# 944
(__r._M_ptr) = 0; 
# 945
} 
# 947
template< class _Tp1> explicit 
# 948
__shared_ptr(const __weak_ptr< _Tp1, _Lp>  &__r) : _M_refcount((__r._M_refcount)) 
# 950
{ 
# 955
(_M_ptr) = (__r._M_ptr); 
# 956
} 
# 959
template< class _Tp1, class _Del, class 
# 960
 = _Convertible< typename unique_ptr< _Tp1, _Del> ::pointer> > 
# 961
__shared_ptr(unique_ptr< _Tp1, _Del>  &&__r) : _M_ptr((__r.get())), _M_refcount() 
# 963
{ 
# 965
auto __raw = _S_raw_ptr((__r.get())); 
# 966
(_M_refcount) = ((__shared_count< _Lp> )(std::move(__r))); 
# 967
__enable_shared_from_this_helper(_M_refcount, __raw, __raw); 
# 968
} 
# 972
template< class _Tp1> inline __shared_ptr(auto_ptr< _Tp1>  && __r); 
# 976
constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { } 
# 978
template< class _Tp1> __shared_ptr &
# 980
operator=(const std::__shared_ptr< _Tp1, _Lp>  &__r) noexcept 
# 981
{ 
# 982
(_M_ptr) = (__r._M_ptr); 
# 983
(_M_refcount) = (__r._M_refcount); 
# 984
return *this; 
# 985
} 
# 988
template< class _Tp1> __shared_ptr &
# 990
operator=(auto_ptr< _Tp1>  &&__r) 
# 991
{ 
# 992
((__shared_ptr)(std::move(__r))).swap(*this); 
# 993
return *this; 
# 994
} 
# 998
__shared_ptr &operator=(__shared_ptr &&__r) noexcept 
# 999
{ 
# 1000
((__shared_ptr)(std::move(__r))).swap(*this); 
# 1001
return *this; 
# 1002
} 
# 1004
template< class _Tp1> __shared_ptr &
# 1006
operator=(std::__shared_ptr< _Tp1, _Lp>  &&__r) noexcept 
# 1007
{ 
# 1008
((__shared_ptr)(std::move(__r))).swap(*this); 
# 1009
return *this; 
# 1010
} 
# 1012
template< class _Tp1, class _Del> __shared_ptr &
# 1014
operator=(unique_ptr< _Tp1, _Del>  &&__r) 
# 1015
{ 
# 1016
((__shared_ptr)(std::move(__r))).swap(*this); 
# 1017
return *this; 
# 1018
} 
# 1021
void reset() noexcept 
# 1022
{ __shared_ptr().swap(*this); } 
# 1024
template< class _Tp1> void 
# 1026
reset(_Tp1 *__p) 
# 1027
{ 
# 1029
; 
# 1030
((__shared_ptr)(__p)).swap(*this); 
# 1031
} 
# 1033
template< class _Tp1, class _Deleter> void 
# 1035
reset(_Tp1 *__p, _Deleter __d) 
# 1036
{ __shared_ptr(__p, __d).swap(*this); } 
# 1038
template< class _Tp1, class _Deleter, class _Alloc> void 
# 1040
reset(_Tp1 *__p, _Deleter __d, _Alloc __a) 
# 1041
{ __shared_ptr(__p, __d, std::move(__a)).swap(*this); } 
# 1045
typename add_lvalue_reference< _Tp> ::type operator*() const noexcept 
# 1046
{ 
# 1047
; 
# 1048
return *(_M_ptr); 
# 1049
} 
# 1052
_Tp *operator->() const noexcept 
# 1053
{ 
# 1054
; 
# 1055
return _M_ptr; 
# 1056
} 
# 1059
_Tp *get() const noexcept 
# 1060
{ return _M_ptr; } 
# 1062
explicit operator bool() const 
# 1063
{ return ((_M_ptr) == 0) ? false : true; } 
# 1066
bool unique() const noexcept 
# 1067
{ return ((_M_refcount)._M_unique()); } 
# 1070
long use_count() const noexcept 
# 1071
{ return ((_M_refcount)._M_get_use_count()); } 
# 1074
void swap(__shared_ptr &__other) noexcept 
# 1075
{ 
# 1076
std::swap(_M_ptr, __other._M_ptr); 
# 1077
((_M_refcount)._M_swap(__other._M_refcount)); 
# 1078
} 
# 1080
template< class _Tp1> bool 
# 1082
owner_before(const std::__shared_ptr< _Tp1, _Lp>  &__rhs) const 
# 1083
{ return ((_M_refcount)._M_less((__rhs._M_refcount))); } 
# 1085
template< class _Tp1> bool 
# 1087
owner_before(const __weak_ptr< _Tp1, _Lp>  &__rhs) const 
# 1088
{ return ((_M_refcount)._M_less((__rhs._M_refcount))); } 
# 1094
protected: 
# 1093
template< class _Alloc, class ..._Args> 
# 1094
__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc &__a, _Args &&...
# 1095
__args) : _M_ptr(), _M_refcount(__tag, (_Tp *)0, __a, std::forward< _Args> (__args)...) 
# 1098
{ 
# 1101
void *__p = ((_M_refcount)._M_get_deleter(typeid(_Sp_make_shared_tag))); 
# 1102
(_M_ptr) = (static_cast< _Tp *>(__p)); 
# 1103
__enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr); 
# 1104
} 
# 1139
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1, class _Alloc, class ...
# 1140
_Args> friend std::__shared_ptr< _Tp1, _Lp1>  
# 1139
__allocate_shared(const _Alloc & __a, _Args && ...__args); 
# 1146
__shared_ptr(const __weak_ptr< _Tp, _Lp>  &__r, nothrow_t) : _M_refcount((__r._M_refcount), std::nothrow) 
# 1148
{ 
# 1149
(_M_ptr) = ((((_M_refcount)._M_get_use_count())) ? __r._M_ptr : nullptr); 
# 1150
} 
# 1152
friend class __weak_ptr< _Tp, _Lp> ; 
# 1156
private: void *_M_get_deleter(const type_info &__ti) const noexcept 
# 1157
{ return ((_M_refcount)._M_get_deleter(__ti)); } 
# 1159
template< class _Tp1> static _Tp1 *
# 1161
_S_raw_ptr(_Tp1 *__ptr) 
# 1162
{ return __ptr; } 
# 1164
template< class _Tp1> static auto 
# 1166
_S_raw_ptr(_Tp1 __ptr)->__decltype((std::__addressof(*__ptr))) 
# 1167
{ return std::__addressof(*__ptr); } 
# 1169
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend class __shared_ptr; 
# 1170
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend class __weak_ptr; 
# 1172
template< class _Del, class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend _Del *get_deleter(const std::__shared_ptr< _Tp1, _Lp1>  &) noexcept; 
# 1175
_Tp *_M_ptr; 
# 1176
__shared_count< _Lp>  _M_refcount; 
# 1177
}; 
# 1181
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1183
operator==(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1184
__b) noexcept 
# 1185
{ return (__a.get()) == (__b.get()); } 
# 1187
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1189
operator==(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1190
{ return !__a; } 
# 1192
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1194
operator==(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1195
{ return !__a; } 
# 1197
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1199
operator!=(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1200
__b) noexcept 
# 1201
{ return (__a.get()) != (__b.get()); } 
# 1203
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1205
operator!=(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1206
{ return (bool)__a; } 
# 1208
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1210
operator!=(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1211
{ return (bool)__a; } 
# 1213
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1215
operator<(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1216
__b) noexcept 
# 1217
{ 
# 1218
typedef typename common_type< _Tp1 *, _Tp2 *> ::type _CT; 
# 1219
return less< typename common_type< _Tp1 *, _Tp2 *> ::type> ()((__a.get()), (__b.get())); 
# 1220
} 
# 1222
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1224
operator<(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1225
{ return less< _Tp *> ()((__a.get()), nullptr); } 
# 1227
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1229
operator<(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1230
{ return less< _Tp *> ()(nullptr, (__a.get())); } 
# 1232
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1234
operator<=(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1235
__b) noexcept 
# 1236
{ return !(__b < __a); } 
# 1238
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1240
operator<=(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1241
{ return !(nullptr < __a); } 
# 1243
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1245
operator<=(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1246
{ return !(__a < nullptr); } 
# 1248
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1250
operator>(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1251
__b) noexcept 
# 1252
{ return __b < __a; } 
# 1254
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1256
operator>(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1257
{ return less< _Tp *> ()(nullptr, (__a.get())); } 
# 1259
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1261
operator>(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1262
{ return less< _Tp *> ()((__a.get()), nullptr); } 
# 1264
template< class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1266
operator>=(const __shared_ptr< _Tp1, _Lp>  &__a, const __shared_ptr< _Tp2, _Lp>  &
# 1267
__b) noexcept 
# 1268
{ return !(__a < __b); } 
# 1270
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1272
operator>=(const __shared_ptr< _Tp, _Lp>  &__a, nullptr_t) noexcept 
# 1273
{ return !(__a < nullptr); } 
# 1275
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 1277
operator>=(nullptr_t, const __shared_ptr< _Tp, _Lp>  &__a) noexcept 
# 1278
{ return !(nullptr < __a); } 
# 1280
template< class _Sp> 
# 1281
struct _Sp_less : public binary_function< _Sp, _Sp, bool>  { 
# 1284
bool operator()(const _Sp &__lhs, const _Sp &__rhs) const noexcept 
# 1285
{ 
# 1286
typedef typename _Sp::element_type element_type; 
# 1287
return less< typename _Sp::element_type *> ()((__lhs.get()), (__rhs.get())); 
# 1288
} 
# 1289
}; 
# 1291
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1292
struct less< __shared_ptr< _Tp, _Lp> >  : public _Sp_less< __shared_ptr< _Tp, _Lp> >  { 
# 1294
}; 
# 1297
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline void 
# 1299
swap(__shared_ptr< _Tp, _Lp>  &__a, __shared_ptr< _Tp, _Lp>  &__b) noexcept 
# 1300
{ (__a.swap(__b)); } 
# 1309
template< class _Tp, class _Tp1, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 1311
static_pointer_cast(const __shared_ptr< _Tp1, _Lp>  &__r) noexcept 
# 1312
{ return __shared_ptr< _Tp, _Lp> (__r, static_cast< _Tp *>((__r.get()))); } 
# 1319
template< class _Tp, class _Tp1, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 1321
const_pointer_cast(const __shared_ptr< _Tp1, _Lp>  &__r) noexcept 
# 1322
{ return __shared_ptr< _Tp, _Lp> (__r, const_cast< _Tp *>((__r.get()))); } 
# 1329
template< class _Tp, class _Tp1, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 1331
dynamic_pointer_cast(const __shared_ptr< _Tp1, _Lp>  &__r) noexcept 
# 1332
{ 
# 1333
if (_Tp *__p = dynamic_cast< _Tp *>((__r.get()))) { 
# 1334
return __shared_ptr< _Tp, _Lp> (__r, __p); }  
# 1335
return __shared_ptr< _Tp, _Lp> (); 
# 1336
} 
# 1339
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1340
class __weak_ptr { 
# 1342
template< class _Ptr> using _Convertible = typename enable_if< is_convertible< _Ptr, _Tp *> ::value> ::type; 
# 1347
public: typedef _Tp element_type; 
# 1349
constexpr __weak_ptr() noexcept : _M_ptr((nullptr)), _M_refcount() 
# 1351
{ } 
# 1353
__weak_ptr(const __weak_ptr &) noexcept = default;
# 1355
~__weak_ptr() = default;
# 1371
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 1372
__weak_ptr(const std::__weak_ptr< _Tp1, _Lp>  &__r) noexcept : _M_refcount((__r._M_refcount)) 
# 1374
{ (_M_ptr) = ((__r.lock()).get()); } 
# 1376
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 1377
__weak_ptr(const __shared_ptr< _Tp1, _Lp>  &__r) noexcept : _M_ptr(((__r._M_ptr))), _M_refcount((__r._M_refcount)) 
# 1379
{ } 
# 1381
__weak_ptr(__weak_ptr &&__r) noexcept : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount)) 
# 1383
{ (__r._M_ptr) = nullptr; } 
# 1385
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 1386
__weak_ptr(std::__weak_ptr< _Tp1, _Lp>  &&__r) noexcept : _M_ptr(((__r.lock()).get())), _M_refcount(std::move((__r._M_refcount))) 
# 1388
{ (__r._M_ptr) = nullptr; } 
# 1391
__weak_ptr &operator=(const __weak_ptr & __r) noexcept = default;
# 1393
template< class _Tp1> __weak_ptr &
# 1395
operator=(const std::__weak_ptr< _Tp1, _Lp>  &__r) noexcept 
# 1396
{ 
# 1397
(_M_ptr) = ((__r.lock()).get()); 
# 1398
(_M_refcount) = (__r._M_refcount); 
# 1399
return *this; 
# 1400
} 
# 1402
template< class _Tp1> __weak_ptr &
# 1404
operator=(const __shared_ptr< _Tp1, _Lp>  &__r) noexcept 
# 1405
{ 
# 1406
(_M_ptr) = (__r._M_ptr); 
# 1407
(_M_refcount) = (__r._M_refcount); 
# 1408
return *this; 
# 1409
} 
# 1412
__weak_ptr &operator=(__weak_ptr &&__r) noexcept 
# 1413
{ 
# 1414
(_M_ptr) = (__r._M_ptr); 
# 1415
(_M_refcount) = std::move(__r._M_refcount); 
# 1416
(__r._M_ptr) = nullptr; 
# 1417
return *this; 
# 1418
} 
# 1420
template< class _Tp1> __weak_ptr &
# 1422
operator=(std::__weak_ptr< _Tp1, _Lp>  &&__r) noexcept 
# 1423
{ 
# 1424
(_M_ptr) = ((__r.lock()).get()); 
# 1425
(_M_refcount) = std::move((__r._M_refcount)); 
# 1426
(__r._M_ptr) = nullptr; 
# 1427
return *this; 
# 1428
} 
# 1431
__shared_ptr< _Tp, _Lp>  lock() const noexcept 
# 1432
{ return __shared_ptr< _Tp, _Lp> (*this, std::nothrow); } 
# 1435
long use_count() const noexcept 
# 1436
{ return ((_M_refcount)._M_get_use_count()); } 
# 1439
bool expired() const noexcept 
# 1440
{ return ((_M_refcount)._M_get_use_count()) == 0; } 
# 1442
template< class _Tp1> bool 
# 1444
owner_before(const __shared_ptr< _Tp1, _Lp>  &__rhs) const 
# 1445
{ return ((_M_refcount)._M_less((__rhs._M_refcount))); } 
# 1447
template< class _Tp1> bool 
# 1449
owner_before(const std::__weak_ptr< _Tp1, _Lp>  &__rhs) const 
# 1450
{ return ((_M_refcount)._M_less((__rhs._M_refcount))); } 
# 1453
void reset() noexcept 
# 1454
{ __weak_ptr().swap(*this); } 
# 1457
void swap(__weak_ptr &__s) noexcept 
# 1458
{ 
# 1459
std::swap(_M_ptr, __s._M_ptr); 
# 1460
((_M_refcount)._M_swap(__s._M_refcount)); 
# 1461
} 
# 1466
private: void _M_assign(_Tp *__ptr, const __shared_count< _Lp>  &__refcount) noexcept 
# 1467
{ 
# 1468
(_M_ptr) = __ptr; 
# 1469
(_M_refcount) = __refcount; 
# 1470
} 
# 1472
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend class __shared_ptr; 
# 1473
template< class _Tp1, __gnu_cxx::_Lock_policy _Lp1> friend class __weak_ptr; 
# 1474
friend class __enable_shared_from_this< _Tp, _Lp> ; 
# 1475
friend class enable_shared_from_this< _Tp> ; 
# 1477
_Tp *_M_ptr; 
# 1478
__weak_count< _Lp>  _M_refcount; 
# 1479
}; 
# 1482
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline void 
# 1484
swap(__weak_ptr< _Tp, _Lp>  &__a, __weak_ptr< _Tp, _Lp>  &__b) noexcept 
# 1485
{ (__a.swap(__b)); } 
# 1487
template< class _Tp, class _Tp1> 
# 1488
struct _Sp_owner_less : public binary_function< _Tp, _Tp, bool>  { 
# 1491
bool operator()(const _Tp &__lhs, const _Tp &__rhs) const 
# 1492
{ return (__lhs.owner_before(__rhs)); } 
# 1495
bool operator()(const _Tp &__lhs, const _Tp1 &__rhs) const 
# 1496
{ return (__lhs.owner_before(__rhs)); } 
# 1499
bool operator()(const _Tp1 &__lhs, const _Tp &__rhs) const 
# 1500
{ return (__lhs.owner_before(__rhs)); } 
# 1501
}; 
# 1503
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1504
struct owner_less< __shared_ptr< _Tp, _Lp> >  : public _Sp_owner_less< __shared_ptr< _Tp, _Lp> , __weak_ptr< _Tp, _Lp> >  { 
# 1506
}; 
# 1508
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1509
struct owner_less< __weak_ptr< _Tp, _Lp> >  : public _Sp_owner_less< __weak_ptr< _Tp, _Lp> , __shared_ptr< _Tp, _Lp> >  { 
# 1511
}; 
# 1514
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1515
class __enable_shared_from_this { 
# 1518
protected: constexpr __enable_shared_from_this() noexcept { } 
# 1520
__enable_shared_from_this(const __enable_shared_from_this &) noexcept { } 
# 1523
__enable_shared_from_this &operator=(const __enable_shared_from_this &) noexcept 
# 1524
{ return *this; } 
# 1526
~__enable_shared_from_this() { } 
# 1530
public: __shared_ptr< _Tp, _Lp>  shared_from_this() 
# 1531
{ return ((__shared_ptr< _Tp, _Lp> )(this->_M_weak_this)); } 
# 1534
__shared_ptr< const _Tp, _Lp>  shared_from_this() const 
# 1535
{ return ((__shared_ptr< const _Tp, _Lp> )(this->_M_weak_this)); } 
# 1540
private: 
# 1538
template< class _Tp1> void 
# 1540
_M_weak_assign(_Tp1 *__p, const __shared_count< _Lp>  &__n) const noexcept 
# 1541
{ ((_M_weak_this)._M_assign(__p, __n)); } 
# 1543
template< __gnu_cxx::_Lock_policy _Lp1, class _Tp1, class _Tp2> friend void __enable_shared_from_this_helper(const __shared_count< _Lp1>  &, const std::__enable_shared_from_this< _Tp1, _Lp1>  *, const _Tp2 *) noexcept; 
# 1549
mutable __weak_ptr< _Tp, _Lp>  _M_weak_this; 
# 1550
}; 
# 1552
template< __gnu_cxx::_Lock_policy _Lp1, class _Tp1, class _Tp2> inline void 
# 1554
__enable_shared_from_this_helper(const __shared_count< _Lp1>  &__pn, const __enable_shared_from_this< _Tp1, _Lp1>  *
# 1556
__pe, const _Tp2 *
# 1557
__px) noexcept 
# 1558
{ 
# 1559
if (__pe != nullptr) { 
# 1560
(__pe->_M_weak_assign(const_cast< _Tp2 *>(__px), __pn)); }  
# 1561
} 
# 1563
template< class _Tp, __gnu_cxx::_Lock_policy _Lp, class _Alloc, class ..._Args> inline __shared_ptr< _Tp, _Lp>  
# 1565
__allocate_shared(const _Alloc &__a, _Args &&...__args) 
# 1566
{ 
# 1567
return __shared_ptr< _Tp, _Lp> (_Sp_make_shared_tag(), __a, std::forward< _Args> (__args)...); 
# 1569
} 
# 1571
template< class _Tp, __gnu_cxx::_Lock_policy _Lp, class ..._Args> inline __shared_ptr< _Tp, _Lp>  
# 1573
__make_shared(_Args &&...__args) 
# 1574
{ 
# 1575
typedef typename remove_const< _Tp> ::type _Tp_nc; 
# 1576
return std::__allocate_shared< _Tp, _Lp> (allocator< typename remove_const< _Tp> ::type> (), std::forward< _Args> (__args)...); 
# 1578
} 
# 1581
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 1582
struct hash< __shared_ptr< _Tp, _Lp> >  : public __hash_base< unsigned long, __shared_ptr< _Tp, _Lp> >  { 
# 1586
::std::size_t operator()(const __shared_ptr< _Tp, _Lp>  &__s) const noexcept 
# 1587
{ return ::std::hash< _Tp *> ()((__s.get())); } 
# 1588
}; 
# 1591
}
# 54 "/usr/include/c++/5/bits/shared_ptr.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 64
template< class _Ch, class _Tr, class _Tp, __gnu_cxx::_Lock_policy _Lp> inline basic_ostream< _Ch, _Tr>  &
# 66
operator<<(basic_ostream< _Ch, _Tr>  &__os, const __shared_ptr< _Tp, _Lp>  &
# 67
__p) 
# 68
{ 
# 69
__os << (__p.get()); 
# 70
return __os; 
# 71
} 
# 74
template< class _Del, class _Tp, __gnu_cxx::_Lock_policy _Lp> inline _Del *
# 76
get_deleter(const __shared_ptr< _Tp, _Lp>  &__p) noexcept 
# 77
{ 
# 79
return static_cast< _Del *>((__p._M_get_deleter(typeid(_Del)))); 
# 83
} 
# 92
template< class _Tp> 
# 93
class shared_ptr : public __shared_ptr< _Tp, __gnu_cxx::_S_atomic>  { 
# 95
template< class _Ptr> using _Convertible = typename enable_if< is_convertible< _Ptr, _Tp *> ::value> ::type; 
# 104
public: constexpr shared_ptr() noexcept : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> () 
# 105
{ } 
# 107
shared_ptr(const shared_ptr &) noexcept = default;
# 115
template< class _Tp1> explicit 
# 116
shared_ptr(_Tp1 *__p) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__p) 
# 117
{ } 
# 132
template< class _Tp1, class _Deleter> 
# 133
shared_ptr(_Tp1 *__p, _Deleter __d) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__p, __d) 
# 134
{ } 
# 149
template< class _Deleter> 
# 150
shared_ptr(::std::nullptr_t __p, _Deleter __d) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__p, __d) 
# 151
{ } 
# 168
template< class _Tp1, class _Deleter, class _Alloc> 
# 169
shared_ptr(_Tp1 *__p, _Deleter __d, _Alloc __a) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__p, __d, ::std::move(__a)) 
# 170
{ } 
# 187
template< class _Deleter, class _Alloc> 
# 188
shared_ptr(::std::nullptr_t __p, _Deleter __d, _Alloc __a) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__p, __d, ::std::move(__a)) 
# 189
{ } 
# 209
template< class _Tp1> 
# 210
shared_ptr(const ::std::shared_ptr< _Tp1>  &__r, _Tp *__p) noexcept : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__r, __p) 
# 211
{ } 
# 220
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 221
shared_ptr(const ::std::shared_ptr< _Tp1>  &__r) noexcept : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__r) 
# 222
{ } 
# 229
shared_ptr(shared_ptr &&__r) noexcept : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (::std::move(__r)) 
# 230
{ } 
# 237
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 238
shared_ptr(::std::shared_ptr< _Tp1>  &&__r) noexcept : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (::std::move(__r)) 
# 239
{ } 
# 249
template< class _Tp1> explicit 
# 250
shared_ptr(const weak_ptr< _Tp1>  &__r) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__r) 
# 251
{ } 
# 254
template< class _Tp1> inline shared_ptr(auto_ptr< _Tp1>  && __r); 
# 260
template< class _Tp1, class _Del, class 
# 261
 = _Convertible< typename unique_ptr< _Tp1, _Del> ::pointer> > 
# 262
shared_ptr(unique_ptr< _Tp1, _Del>  &&__r) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (::std::move(__r)) 
# 263
{ } 
# 269
constexpr shared_ptr(::std::nullptr_t) noexcept : shared_ptr() { } 
# 271
shared_ptr &operator=(const shared_ptr &) noexcept = default;
# 273
template< class _Tp1> shared_ptr &
# 275
operator=(const ::std::shared_ptr< _Tp1>  &__r) noexcept 
# 276
{ 
# 277
(this->::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> ::operator=(__r)); 
# 278
return *this; 
# 279
} 
# 282
template< class _Tp1> shared_ptr &
# 284
operator=(auto_ptr< _Tp1>  &&__r) 
# 285
{ 
# 286
(this->::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> ::operator=(::std::move(__r))); 
# 287
return *this; 
# 288
} 
# 292
shared_ptr &operator=(shared_ptr &&__r) noexcept 
# 293
{ 
# 294
(this->::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> ::operator=(::std::move(__r))); 
# 295
return *this; 
# 296
} 
# 298
template< class _Tp1> shared_ptr &
# 300
operator=(::std::shared_ptr< _Tp1>  &&__r) noexcept 
# 301
{ 
# 302
(this->::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> ::operator=(::std::move(__r))); 
# 303
return *this; 
# 304
} 
# 306
template< class _Tp1, class _Del> shared_ptr &
# 308
operator=(unique_ptr< _Tp1, _Del>  &&__r) 
# 309
{ 
# 310
(this->::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> ::operator=(::std::move(__r))); 
# 311
return *this; 
# 312
} 
# 317
private: 
# 316
template< class _Alloc, class ..._Args> 
# 317
shared_ptr(::std::_Sp_make_shared_tag __tag, const _Alloc &__a, _Args &&...
# 318
__args) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__tag, __a, ::std::forward< _Args> (__args)...) 
# 320
{ } 
# 322
template< class _Tp1, class _Alloc, class ..._Args> friend ::std::shared_ptr< _Tp1>  allocate_shared(const _Alloc & __a, _Args && ...__args); 
# 327
shared_ptr(const weak_ptr< _Tp>  &__r, ::std::nothrow_t) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__r, std::nothrow) 
# 328
{ } 
# 330
friend class weak_ptr< _Tp> ; 
# 331
}; 
# 334
template< class _Tp1, class _Tp2> inline bool 
# 336
operator==(const shared_ptr< _Tp1>  &__a, const shared_ptr< _Tp2>  &
# 337
__b) noexcept 
# 338
{ return (__a.get()) == (__b.get()); } 
# 340
template< class _Tp> inline bool 
# 342
operator==(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 343
{ return !__a; } 
# 345
template< class _Tp> inline bool 
# 347
operator==(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 348
{ return !__a; } 
# 350
template< class _Tp1, class _Tp2> inline bool 
# 352
operator!=(const shared_ptr< _Tp1>  &__a, const shared_ptr< _Tp2>  &
# 353
__b) noexcept 
# 354
{ return (__a.get()) != (__b.get()); } 
# 356
template< class _Tp> inline bool 
# 358
operator!=(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 359
{ return (bool)__a; } 
# 361
template< class _Tp> inline bool 
# 363
operator!=(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 364
{ return (bool)__a; } 
# 366
template< class _Tp1, class _Tp2> inline bool 
# 368
operator<(const shared_ptr< _Tp1>  &__a, const shared_ptr< _Tp2>  &
# 369
__b) noexcept 
# 370
{ 
# 371
typedef typename common_type< _Tp1 *, _Tp2 *> ::type _CT; 
# 372
return less< typename common_type< _Tp1 *, _Tp2 *> ::type> ()((__a.get()), (__b.get())); 
# 373
} 
# 375
template< class _Tp> inline bool 
# 377
operator<(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 378
{ return less< _Tp *> ()((__a.get()), nullptr); } 
# 380
template< class _Tp> inline bool 
# 382
operator<(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 383
{ return less< _Tp *> ()(nullptr, (__a.get())); } 
# 385
template< class _Tp1, class _Tp2> inline bool 
# 387
operator<=(const shared_ptr< _Tp1>  &__a, const shared_ptr< _Tp2>  &
# 388
__b) noexcept 
# 389
{ return !(__b < __a); } 
# 391
template< class _Tp> inline bool 
# 393
operator<=(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 394
{ return !(nullptr < __a); } 
# 396
template< class _Tp> inline bool 
# 398
operator<=(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 399
{ return !(__a < nullptr); } 
# 401
template< class _Tp1, class _Tp2> inline bool 
# 403
operator>(const shared_ptr< _Tp1>  &__a, const shared_ptr< _Tp2>  &
# 404
__b) noexcept 
# 405
{ return __b < __a; } 
# 407
template< class _Tp> inline bool 
# 409
operator>(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 410
{ return less< _Tp *> ()(nullptr, (__a.get())); } 
# 412
template< class _Tp> inline bool 
# 414
operator>(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 415
{ return less< _Tp *> ()((__a.get()), nullptr); } 
# 417
template< class _Tp1, class _Tp2> inline bool 
# 419
operator>=(const shared_ptr< _Tp1>  &__a, const shared_ptr< _Tp2>  &
# 420
__b) noexcept 
# 421
{ return !(__a < __b); } 
# 423
template< class _Tp> inline bool 
# 425
operator>=(const shared_ptr< _Tp>  &__a, nullptr_t) noexcept 
# 426
{ return !(__a < nullptr); } 
# 428
template< class _Tp> inline bool 
# 430
operator>=(nullptr_t, const shared_ptr< _Tp>  &__a) noexcept 
# 431
{ return !(nullptr < __a); } 
# 433
template< class _Tp> 
# 434
struct less< shared_ptr< _Tp> >  : public _Sp_less< shared_ptr< _Tp> >  { 
# 435
}; 
# 438
template< class _Tp> inline void 
# 440
swap(shared_ptr< _Tp>  &__a, shared_ptr< _Tp>  &__b) noexcept 
# 441
{ (__a.swap(__b)); } 
# 444
template< class _Tp, class _Tp1> inline shared_ptr< _Tp>  
# 446
static_pointer_cast(const shared_ptr< _Tp1>  &__r) noexcept 
# 447
{ return shared_ptr< _Tp> (__r, static_cast< _Tp *>((__r.get()))); } 
# 449
template< class _Tp, class _Tp1> inline shared_ptr< _Tp>  
# 451
const_pointer_cast(const shared_ptr< _Tp1>  &__r) noexcept 
# 452
{ return shared_ptr< _Tp> (__r, const_cast< _Tp *>((__r.get()))); } 
# 454
template< class _Tp, class _Tp1> inline shared_ptr< _Tp>  
# 456
dynamic_pointer_cast(const shared_ptr< _Tp1>  &__r) noexcept 
# 457
{ 
# 458
if (_Tp *__p = dynamic_cast< _Tp *>((__r.get()))) { 
# 459
return shared_ptr< _Tp> (__r, __p); }  
# 460
return shared_ptr< _Tp> (); 
# 461
} 
# 469
template< class _Tp> 
# 470
class weak_ptr : public __weak_ptr< _Tp, __gnu_cxx::_S_atomic>  { 
# 472
template< class _Ptr> using _Convertible = typename enable_if< is_convertible< _Ptr, _Tp *> ::value> ::type; 
# 477
public: weak_ptr() noexcept = default;
# 479
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 480
weak_ptr(const shared_ptr< _Tp1>  &__r) noexcept : ::std::__weak_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__r) 
# 481
{ } 
# 483
weak_ptr(const weak_ptr &) noexcept = default;
# 485
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 486
weak_ptr(const ::std::weak_ptr< _Tp1>  &__r) noexcept : ::std::__weak_ptr< _Tp, ::__gnu_cxx::_S_atomic> (__r) 
# 487
{ } 
# 489
weak_ptr(weak_ptr &&) noexcept = default;
# 491
template< class _Tp1, class  = _Convertible< _Tp1 *> > 
# 492
weak_ptr(::std::weak_ptr< _Tp1>  &&__r) noexcept : ::std::__weak_ptr< _Tp, ::__gnu_cxx::_S_atomic> (::std::move(__r)) 
# 493
{ } 
# 496
weak_ptr &operator=(const weak_ptr & __r) noexcept = default;
# 498
template< class _Tp1> weak_ptr &
# 500
operator=(const ::std::weak_ptr< _Tp1>  &__r) noexcept 
# 501
{ 
# 502
(this->::std::__weak_ptr< _Tp, ::__gnu_cxx::_S_atomic> ::operator=(__r)); 
# 503
return *this; 
# 504
} 
# 506
template< class _Tp1> weak_ptr &
# 508
operator=(const shared_ptr< _Tp1>  &__r) noexcept 
# 509
{ 
# 510
(this->::std::__weak_ptr< _Tp, ::__gnu_cxx::_S_atomic> ::operator=(__r)); 
# 511
return *this; 
# 512
} 
# 515
weak_ptr &operator=(weak_ptr && __r) noexcept = default;
# 517
template< class _Tp1> weak_ptr &
# 519
operator=(::std::weak_ptr< _Tp1>  &&__r) noexcept 
# 520
{ 
# 521
(this->::std::__weak_ptr< _Tp, ::__gnu_cxx::_S_atomic> ::operator=(::std::move(__r))); 
# 522
return *this; 
# 523
} 
# 526
shared_ptr< _Tp>  lock() const noexcept 
# 527
{ return shared_ptr< _Tp> (*this, std::nothrow); } 
# 528
}; 
# 531
template< class _Tp> inline void 
# 533
swap(weak_ptr< _Tp>  &__a, weak_ptr< _Tp>  &__b) noexcept 
# 534
{ (__a.swap(__b)); } 
# 538
template< class _Tp> struct owner_less; 
# 542
template< class _Tp> 
# 543
struct owner_less< shared_ptr< _Tp> >  : public _Sp_owner_less< shared_ptr< _Tp> , weak_ptr< _Tp> >  { 
# 545
}; 
# 548
template< class _Tp> 
# 549
struct owner_less< weak_ptr< _Tp> >  : public _Sp_owner_less< weak_ptr< _Tp> , shared_ptr< _Tp> >  { 
# 551
}; 
# 556
template< class _Tp> 
# 557
class enable_shared_from_this { 
# 560
protected: constexpr enable_shared_from_this() noexcept { } 
# 562
enable_shared_from_this(const enable_shared_from_this &) noexcept { } 
# 565
enable_shared_from_this &operator=(const enable_shared_from_this &) noexcept 
# 566
{ return *this; } 
# 568
~enable_shared_from_this() { } 
# 572
public: shared_ptr< _Tp>  shared_from_this() 
# 573
{ return ((shared_ptr< _Tp> )(this->_M_weak_this)); } 
# 576
shared_ptr< const _Tp>  shared_from_this() const 
# 577
{ return ((shared_ptr< const _Tp> )(this->_M_weak_this)); } 
# 582
private: 
# 580
template< class _Tp1> void 
# 582
_M_weak_assign(_Tp1 *__p, const __shared_count< __gnu_cxx::_S_atomic>  &__n) const noexcept 
# 583
{ ((_M_weak_this)._M_assign(__p, __n)); } 
# 585
template< class _Tp1, class _Tp2> friend void __enable_shared_from_this_helper(const __shared_count< __gnu_cxx::_S_atomic>  &, const std::enable_shared_from_this< _Tp1>  *, const _Tp2 *) noexcept; 
# 591
mutable weak_ptr< _Tp>  _M_weak_this; 
# 592
}; 
# 594
template< class _Tp1, class _Tp2> inline void 
# 596
__enable_shared_from_this_helper(const __shared_count< __gnu_cxx::_S_atomic>  &__pn, const enable_shared_from_this< _Tp1>  *
# 598
__pe, const _Tp2 *__px) noexcept 
# 599
{ 
# 600
if (__pe != nullptr) { 
# 601
(__pe->_M_weak_assign(const_cast< _Tp2 *>(__px), __pn)); }  
# 602
} 
# 615
template< class _Tp, class _Alloc, class ..._Args> inline shared_ptr< _Tp>  
# 617
allocate_shared(const _Alloc &__a, _Args &&...__args) 
# 618
{ 
# 619
return shared_ptr< _Tp> (_Sp_make_shared_tag(), __a, std::forward< _Args> (__args)...); 
# 621
} 
# 630
template< class _Tp, class ..._Args> inline shared_ptr< _Tp>  
# 632
make_shared(_Args &&...__args) 
# 633
{ 
# 634
typedef typename remove_const< _Tp> ::type _Tp_nc; 
# 635
return std::allocate_shared< _Tp> (allocator< typename remove_const< _Tp> ::type> (), std::forward< _Args> (__args)...); 
# 637
} 
# 640
template< class _Tp> 
# 641
struct hash< shared_ptr< _Tp> >  : public __hash_base< unsigned long, shared_ptr< _Tp> >  { 
# 645
::std::size_t operator()(const shared_ptr< _Tp>  &__s) const noexcept 
# 646
{ return ::std::hash< _Tp *> ()((__s.get())); } 
# 647
}; 
# 652
}
# 43 "/usr/include/c++/5/bits/atomic_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63
typedef 
# 55
enum memory_order { 
# 57
memory_order_relaxed, 
# 58
memory_order_consume, 
# 59
memory_order_acquire, 
# 60
memory_order_release, 
# 61
memory_order_acq_rel, 
# 62
memory_order_seq_cst
# 63
} memory_order; 
# 65
enum __memory_order_modifier { 
# 67
__memory_order_mask = 65535U, 
# 68
__memory_order_modifier_mask = 4294901760U, 
# 69
__memory_order_hle_acquire = 65536U, 
# 70
__memory_order_hle_release = 131072U
# 71
}; 
# 74
constexpr memory_order operator|(memory_order __m, __memory_order_modifier __mod) 
# 75
{ 
# 76
return (memory_order)(__m | ((int)__mod)); 
# 77
} 
# 80
constexpr memory_order operator&(memory_order __m, __memory_order_modifier __mod) 
# 81
{ 
# 82
return (memory_order)(__m & ((int)__mod)); 
# 83
} 
# 87
constexpr memory_order __cmpexch_failure_order2(memory_order __m) noexcept 
# 88
{ 
# 89
return (__m == (memory_order_acq_rel)) ? memory_order_acquire : ((__m == (memory_order_release)) ? memory_order_relaxed : __m); 
# 91
} 
# 94
constexpr memory_order __cmpexch_failure_order(memory_order __m) noexcept 
# 95
{ 
# 96
return (memory_order)((__cmpexch_failure_order2((__m & (__memory_order_mask)))) | ((__m & (__memory_order_modifier_mask)))); 
# 98
} 
# 100
__attribute((__always_inline__)) inline void 
# 101
atomic_thread_fence(memory_order __m) noexcept 
# 102
{ __atomic_thread_fence(__m); } 
# 104
__attribute((__always_inline__)) inline void 
# 105
atomic_signal_fence(memory_order __m) noexcept 
# 106
{ __atomic_signal_fence(__m); } 
# 109
template< class _Tp> inline _Tp 
# 111
kill_dependency(_Tp __y) noexcept 
# 112
{ 
# 113
_Tp __ret(__y); 
# 114
return __ret; 
# 115
} 
# 119
template< class _IntTp> struct __atomic_base; 
# 125
template< class _Tp> struct atomic; 
# 128
template< class _Tp> struct atomic< _Tp *> ; 
# 133
typedef bool __atomic_flag_data_type; 
# 148
extern "C" {
# 150
struct __atomic_flag_base { 
# 152
__atomic_flag_data_type _M_i; 
# 153
}; 
# 155
}
# 160
struct atomic_flag : public __atomic_flag_base { 
# 162
atomic_flag() noexcept = default;
# 163
~atomic_flag() noexcept = default;
# 164
atomic_flag(const atomic_flag &) = delete;
# 165
atomic_flag &operator=(const atomic_flag &) = delete;
# 166
atomic_flag &operator=(const atomic_flag &) volatile = delete;
# 169
constexpr atomic_flag(bool __i) noexcept : __atomic_flag_base{_S_init(__i)} 
# 171
{ } 
# 173
__attribute((__always_inline__)) bool 
# 174
test_and_set(memory_order __m = memory_order_seq_cst) noexcept 
# 175
{ 
# 176
return __atomic_test_and_set(&(_M_i), __m); 
# 177
} 
# 179
__attribute((__always_inline__)) bool 
# 180
test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept 
# 181
{ 
# 182
return __atomic_test_and_set(&(_M_i), __m); 
# 183
} 
# 185
__attribute((__always_inline__)) void 
# 186
clear(memory_order __m = memory_order_seq_cst) noexcept 
# 187
{ 
# 188
memory_order __b = (__m & (__memory_order_mask)); 
# 189
; 
# 190
; 
# 191
; 
# 193
__atomic_clear(&(_M_i), __m); 
# 194
} 
# 196
__attribute((__always_inline__)) void 
# 197
clear(memory_order __m = memory_order_seq_cst) volatile noexcept 
# 198
{ 
# 199
memory_order __b = (__m & (__memory_order_mask)); 
# 200
; 
# 201
; 
# 202
; 
# 204
__atomic_clear(&(_M_i), __m); 
# 205
} 
# 209
private: static constexpr __atomic_flag_data_type _S_init(bool __i) 
# 210
{ return __i ? 1 : 0; } 
# 211
}; 
# 237
template< class _ITp> 
# 238
struct __atomic_base { 
# 241
private: typedef _ITp __int_type; 
# 243
static constexpr int _S_alignment = ((sizeof(_ITp) > __alignof__(_ITp)) ? sizeof(_ITp) : __alignof__(_ITp)); 
# 246
alignas(_S_alignment) __int_type _M_i; 
# 249
public: __atomic_base() noexcept = default;
# 250
~__atomic_base() noexcept = default;
# 251
__atomic_base(const __atomic_base &) = delete;
# 252
__atomic_base &operator=(const __atomic_base &) = delete;
# 253
__atomic_base &operator=(const __atomic_base &) volatile = delete;
# 256
constexpr __atomic_base(__int_type __i) noexcept : _M_i(__i) { } 
# 258
operator __int_type() const noexcept 
# 259
{ return load(); } 
# 261
operator __int_type() const volatile noexcept 
# 262
{ return load(); } 
# 265
__int_type operator=(__int_type __i) noexcept 
# 266
{ 
# 267
store(__i); 
# 268
return __i; 
# 269
} 
# 272
__int_type operator=(__int_type __i) volatile noexcept 
# 273
{ 
# 274
store(__i); 
# 275
return __i; 
# 276
} 
# 279
__int_type operator++(int) noexcept 
# 280
{ return fetch_add(1); } 
# 283
__int_type operator++(int) volatile noexcept 
# 284
{ return fetch_add(1); } 
# 287
__int_type operator--(int) noexcept 
# 288
{ return fetch_sub(1); } 
# 291
__int_type operator--(int) volatile noexcept 
# 292
{ return fetch_sub(1); } 
# 295
__int_type operator++() noexcept 
# 296
{ return __atomic_add_fetch(&(_M_i), 1, memory_order_seq_cst); } 
# 299
__int_type operator++() volatile noexcept 
# 300
{ return __atomic_add_fetch(&(_M_i), 1, memory_order_seq_cst); } 
# 303
__int_type operator--() noexcept 
# 304
{ return __atomic_sub_fetch(&(_M_i), 1, memory_order_seq_cst); } 
# 307
__int_type operator--() volatile noexcept 
# 308
{ return __atomic_sub_fetch(&(_M_i), 1, memory_order_seq_cst); } 
# 311
__int_type operator+=(__int_type __i) noexcept 
# 312
{ return __atomic_add_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 315
__int_type operator+=(__int_type __i) volatile noexcept 
# 316
{ return __atomic_add_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 319
__int_type operator-=(__int_type __i) noexcept 
# 320
{ return __atomic_sub_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 323
__int_type operator-=(__int_type __i) volatile noexcept 
# 324
{ return __atomic_sub_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 327
__int_type operator&=(__int_type __i) noexcept 
# 328
{ return __atomic_and_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 331
__int_type operator&=(__int_type __i) volatile noexcept 
# 332
{ return __atomic_and_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 335
__int_type operator|=(__int_type __i) noexcept 
# 336
{ return __atomic_or_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 339
__int_type operator|=(__int_type __i) volatile noexcept 
# 340
{ return __atomic_or_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 343
__int_type operator^=(__int_type __i) noexcept 
# 344
{ return __atomic_xor_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 347
__int_type operator^=(__int_type __i) volatile noexcept 
# 348
{ return __atomic_xor_fetch(&(_M_i), __i, memory_order_seq_cst); } 
# 351
bool is_lock_free() const noexcept 
# 352
{ 
# 354
return __atomic_is_lock_free(sizeof((_M_i)), reinterpret_cast< void *>(-__alignof__((_M_i)))); 
# 356
} 
# 359
bool is_lock_free() const volatile noexcept 
# 360
{ 
# 362
return __atomic_is_lock_free(sizeof((_M_i)), reinterpret_cast< void *>(-__alignof__((_M_i)))); 
# 364
} 
# 366
__attribute((__always_inline__)) void 
# 367
store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept 
# 368
{ 
# 369
memory_order __b = (__m & (__memory_order_mask)); 
# 370
; 
# 371
; 
# 372
; 
# 374
__atomic_store_n(&(_M_i), __i, __m); 
# 375
} 
# 377
__attribute((__always_inline__)) void 
# 378
store(__int_type __i, memory_order 
# 379
__m = memory_order_seq_cst) volatile noexcept 
# 380
{ 
# 381
memory_order __b = (__m & (__memory_order_mask)); 
# 382
; 
# 383
; 
# 384
; 
# 386
__atomic_store_n(&(_M_i), __i, __m); 
# 387
} 
# 389
__attribute((__always_inline__)) __int_type 
# 390
load(memory_order __m = memory_order_seq_cst) const noexcept 
# 391
{ 
# 392
memory_order __b = (__m & (__memory_order_mask)); 
# 393
; 
# 394
; 
# 396
return __atomic_load_n(&(_M_i), __m); 
# 397
} 
# 399
__attribute((__always_inline__)) __int_type 
# 400
load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 401
{ 
# 402
memory_order __b = (__m & (__memory_order_mask)); 
# 403
; 
# 404
; 
# 406
return __atomic_load_n(&(_M_i), __m); 
# 407
} 
# 409
__attribute((__always_inline__)) __int_type 
# 410
exchange(__int_type __i, memory_order 
# 411
__m = memory_order_seq_cst) noexcept 
# 412
{ 
# 413
return __atomic_exchange_n(&(_M_i), __i, __m); 
# 414
} 
# 417
__attribute((__always_inline__)) __int_type 
# 418
exchange(__int_type __i, memory_order 
# 419
__m = memory_order_seq_cst) volatile noexcept 
# 420
{ 
# 421
return __atomic_exchange_n(&(_M_i), __i, __m); 
# 422
} 
# 424
__attribute((__always_inline__)) bool 
# 425
compare_exchange_weak(__int_type &__i1, __int_type __i2, memory_order 
# 426
__m1, memory_order __m2) noexcept 
# 427
{ 
# 428
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 429
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 430
; 
# 431
; 
# 432
; 
# 434
return __atomic_compare_exchange_n(&(_M_i), &__i1, __i2, 1, __m1, __m2); 
# 435
} 
# 437
__attribute((__always_inline__)) bool 
# 438
compare_exchange_weak(__int_type &__i1, __int_type __i2, memory_order 
# 439
__m1, memory_order 
# 440
__m2) volatile noexcept 
# 441
{ 
# 442
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 443
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 444
; 
# 445
; 
# 446
; 
# 448
return __atomic_compare_exchange_n(&(_M_i), &__i1, __i2, 1, __m1, __m2); 
# 449
} 
# 451
__attribute((__always_inline__)) bool 
# 452
compare_exchange_weak(__int_type &__i1, __int_type __i2, memory_order 
# 453
__m = memory_order_seq_cst) noexcept 
# 454
{ 
# 455
return compare_exchange_weak(__i1, __i2, __m, __cmpexch_failure_order(__m)); 
# 457
} 
# 459
__attribute((__always_inline__)) bool 
# 460
compare_exchange_weak(__int_type &__i1, __int_type __i2, memory_order 
# 461
__m = memory_order_seq_cst) volatile noexcept 
# 462
{ 
# 463
return compare_exchange_weak(__i1, __i2, __m, __cmpexch_failure_order(__m)); 
# 465
} 
# 467
__attribute((__always_inline__)) bool 
# 468
compare_exchange_strong(__int_type &__i1, __int_type __i2, memory_order 
# 469
__m1, memory_order __m2) noexcept 
# 470
{ 
# 471
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 472
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 473
; 
# 474
; 
# 475
; 
# 477
return __atomic_compare_exchange_n(&(_M_i), &__i1, __i2, 0, __m1, __m2); 
# 478
} 
# 480
__attribute((__always_inline__)) bool 
# 481
compare_exchange_strong(__int_type &__i1, __int_type __i2, memory_order 
# 482
__m1, memory_order 
# 483
__m2) volatile noexcept 
# 484
{ 
# 485
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 486
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 488
; 
# 489
; 
# 490
; 
# 492
return __atomic_compare_exchange_n(&(_M_i), &__i1, __i2, 0, __m1, __m2); 
# 493
} 
# 495
__attribute((__always_inline__)) bool 
# 496
compare_exchange_strong(__int_type &__i1, __int_type __i2, memory_order 
# 497
__m = memory_order_seq_cst) noexcept 
# 498
{ 
# 499
return compare_exchange_strong(__i1, __i2, __m, __cmpexch_failure_order(__m)); 
# 501
} 
# 503
__attribute((__always_inline__)) bool 
# 504
compare_exchange_strong(__int_type &__i1, __int_type __i2, memory_order 
# 505
__m = memory_order_seq_cst) volatile noexcept 
# 506
{ 
# 507
return compare_exchange_strong(__i1, __i2, __m, __cmpexch_failure_order(__m)); 
# 509
} 
# 511
__attribute((__always_inline__)) __int_type 
# 512
fetch_add(__int_type __i, memory_order 
# 513
__m = memory_order_seq_cst) noexcept 
# 514
{ return __atomic_fetch_add(&(_M_i), __i, __m); } 
# 516
__attribute((__always_inline__)) __int_type 
# 517
fetch_add(__int_type __i, memory_order 
# 518
__m = memory_order_seq_cst) volatile noexcept 
# 519
{ return __atomic_fetch_add(&(_M_i), __i, __m); } 
# 521
__attribute((__always_inline__)) __int_type 
# 522
fetch_sub(__int_type __i, memory_order 
# 523
__m = memory_order_seq_cst) noexcept 
# 524
{ return __atomic_fetch_sub(&(_M_i), __i, __m); } 
# 526
__attribute((__always_inline__)) __int_type 
# 527
fetch_sub(__int_type __i, memory_order 
# 528
__m = memory_order_seq_cst) volatile noexcept 
# 529
{ return __atomic_fetch_sub(&(_M_i), __i, __m); } 
# 531
__attribute((__always_inline__)) __int_type 
# 532
fetch_and(__int_type __i, memory_order 
# 533
__m = memory_order_seq_cst) noexcept 
# 534
{ return __atomic_fetch_and(&(_M_i), __i, __m); } 
# 536
__attribute((__always_inline__)) __int_type 
# 537
fetch_and(__int_type __i, memory_order 
# 538
__m = memory_order_seq_cst) volatile noexcept 
# 539
{ return __atomic_fetch_and(&(_M_i), __i, __m); } 
# 541
__attribute((__always_inline__)) __int_type 
# 542
fetch_or(__int_type __i, memory_order 
# 543
__m = memory_order_seq_cst) noexcept 
# 544
{ return __atomic_fetch_or(&(_M_i), __i, __m); } 
# 546
__attribute((__always_inline__)) __int_type 
# 547
fetch_or(__int_type __i, memory_order 
# 548
__m = memory_order_seq_cst) volatile noexcept 
# 549
{ return __atomic_fetch_or(&(_M_i), __i, __m); } 
# 551
__attribute((__always_inline__)) __int_type 
# 552
fetch_xor(__int_type __i, memory_order 
# 553
__m = memory_order_seq_cst) noexcept 
# 554
{ return __atomic_fetch_xor(&(_M_i), __i, __m); } 
# 556
__attribute((__always_inline__)) __int_type 
# 557
fetch_xor(__int_type __i, memory_order 
# 558
__m = memory_order_seq_cst) volatile noexcept 
# 559
{ return __atomic_fetch_xor(&(_M_i), __i, __m); } 
# 560
}; 
# 564
template< class _PTp> 
# 565
struct __atomic_base< _PTp *>  { 
# 568
private: typedef _PTp *__pointer_type; 
# 570
__pointer_type _M_p; 
# 574
constexpr ptrdiff_t _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); } 
# 577
constexpr ptrdiff_t _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); } 
# 580
public: __atomic_base() noexcept = default;
# 581
~__atomic_base() noexcept = default;
# 582
__atomic_base(const std::__atomic_base< _PTp *>  &) = delete;
# 583
std::__atomic_base< _PTp *>  &operator=(const std::__atomic_base< _PTp *>  &) = delete;
# 584
std::__atomic_base< _PTp *>  &operator=(const std::__atomic_base< _PTp *>  &) volatile = delete;
# 587
constexpr __atomic_base(__pointer_type __p) noexcept : _M_p(__p) { } 
# 589
operator __pointer_type() const noexcept 
# 590
{ return load(); } 
# 592
operator __pointer_type() const volatile noexcept 
# 593
{ return load(); } 
# 596
__pointer_type operator=(__pointer_type __p) noexcept 
# 597
{ 
# 598
store(__p); 
# 599
return __p; 
# 600
} 
# 603
__pointer_type operator=(__pointer_type __p) volatile noexcept 
# 604
{ 
# 605
store(__p); 
# 606
return __p; 
# 607
} 
# 610
__pointer_type operator++(int) noexcept 
# 611
{ return fetch_add(1); } 
# 614
__pointer_type operator++(int) volatile noexcept 
# 615
{ return fetch_add(1); } 
# 618
__pointer_type operator--(int) noexcept 
# 619
{ return fetch_sub(1); } 
# 622
__pointer_type operator--(int) volatile noexcept 
# 623
{ return fetch_sub(1); } 
# 626
__pointer_type operator++() noexcept 
# 627
{ return __atomic_add_fetch(&(_M_p), this->_M_type_size(1), memory_order_seq_cst); 
# 628
} 
# 631
__pointer_type operator++() volatile noexcept 
# 632
{ return __atomic_add_fetch(&(_M_p), this->_M_type_size(1), memory_order_seq_cst); 
# 633
} 
# 636
__pointer_type operator--() noexcept 
# 637
{ return __atomic_sub_fetch(&(_M_p), this->_M_type_size(1), memory_order_seq_cst); 
# 638
} 
# 641
__pointer_type operator--() volatile noexcept 
# 642
{ return __atomic_sub_fetch(&(_M_p), this->_M_type_size(1), memory_order_seq_cst); 
# 643
} 
# 646
__pointer_type operator+=(ptrdiff_t __d) noexcept 
# 647
{ return __atomic_add_fetch(&(_M_p), this->_M_type_size(__d), memory_order_seq_cst); 
# 648
} 
# 651
__pointer_type operator+=(ptrdiff_t __d) volatile noexcept 
# 652
{ return __atomic_add_fetch(&(_M_p), this->_M_type_size(__d), memory_order_seq_cst); 
# 653
} 
# 656
__pointer_type operator-=(ptrdiff_t __d) noexcept 
# 657
{ return __atomic_sub_fetch(&(_M_p), this->_M_type_size(__d), memory_order_seq_cst); 
# 658
} 
# 661
__pointer_type operator-=(ptrdiff_t __d) volatile noexcept 
# 662
{ return __atomic_sub_fetch(&(_M_p), this->_M_type_size(__d), memory_order_seq_cst); 
# 663
} 
# 666
bool is_lock_free() const noexcept 
# 667
{ 
# 669
return __atomic_is_lock_free(sizeof((_M_p)), reinterpret_cast< void *>(-__alignof__((_M_p)))); 
# 671
} 
# 674
bool is_lock_free() const volatile noexcept 
# 675
{ 
# 677
return __atomic_is_lock_free(sizeof((_M_p)), reinterpret_cast< void *>(-__alignof__((_M_p)))); 
# 679
} 
# 681
__attribute((__always_inline__)) void 
# 682
store(__pointer_type __p, memory_order 
# 683
__m = memory_order_seq_cst) noexcept 
# 684
{ 
# 685
memory_order __b = (__m & (__memory_order_mask)); 
# 687
; 
# 688
; 
# 689
; 
# 691
__atomic_store_n(&(_M_p), __p, __m); 
# 692
} 
# 694
__attribute((__always_inline__)) void 
# 695
store(__pointer_type __p, memory_order 
# 696
__m = memory_order_seq_cst) volatile noexcept 
# 697
{ 
# 698
memory_order __b = (__m & (__memory_order_mask)); 
# 699
; 
# 700
; 
# 701
; 
# 703
__atomic_store_n(&(_M_p), __p, __m); 
# 704
} 
# 706
__attribute((__always_inline__)) __pointer_type 
# 707
load(memory_order __m = memory_order_seq_cst) const noexcept 
# 708
{ 
# 709
memory_order __b = (__m & (__memory_order_mask)); 
# 710
; 
# 711
; 
# 713
return __atomic_load_n(&(_M_p), __m); 
# 714
} 
# 716
__attribute((__always_inline__)) __pointer_type 
# 717
load(memory_order __m = memory_order_seq_cst) const volatile noexcept 
# 718
{ 
# 719
memory_order __b = (__m & (__memory_order_mask)); 
# 720
; 
# 721
; 
# 723
return __atomic_load_n(&(_M_p), __m); 
# 724
} 
# 726
__attribute((__always_inline__)) __pointer_type 
# 727
exchange(__pointer_type __p, memory_order 
# 728
__m = memory_order_seq_cst) noexcept 
# 729
{ 
# 730
return __atomic_exchange_n(&(_M_p), __p, __m); 
# 731
} 
# 734
__attribute((__always_inline__)) __pointer_type 
# 735
exchange(__pointer_type __p, memory_order 
# 736
__m = memory_order_seq_cst) volatile noexcept 
# 737
{ 
# 738
return __atomic_exchange_n(&(_M_p), __p, __m); 
# 739
} 
# 741
__attribute((__always_inline__)) bool 
# 742
compare_exchange_strong(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 743
__m1, memory_order 
# 744
__m2) noexcept 
# 745
{ 
# 746
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 747
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 748
; 
# 749
; 
# 750
; 
# 752
return __atomic_compare_exchange_n(&(_M_p), &__p1, __p2, 0, __m1, __m2); 
# 753
} 
# 755
__attribute((__always_inline__)) bool 
# 756
compare_exchange_strong(__pointer_type &__p1, __pointer_type __p2, memory_order 
# 757
__m1, memory_order 
# 758
__m2) volatile noexcept 
# 759
{ 
# 760
memory_order __b2 = (__m2 & (__memory_order_mask)); 
# 761
memory_order __b1 = (__m1 & (__memory_order_mask)); 
# 763
; 
# 764
; 
# 765
; 
# 767
return __atomic_compare_exchange_n(&(_M_p), &__p1, __p2, 0, __m1, __m2); 
# 768
} 
# 770
__attribute((__always_inline__)) __pointer_type 
# 771
fetch_add(ptrdiff_t __d, memory_order 
# 772
__m = memory_order_seq_cst) noexcept 
# 773
{ return __atomic_fetch_add(&(_M_p), this->_M_type_size(__d), __m); } 
# 775
__attribute((__always_inline__)) __pointer_type 
# 776
fetch_add(ptrdiff_t __d, memory_order 
# 777
__m = memory_order_seq_cst) volatile noexcept 
# 778
{ return __atomic_fetch_add(&(_M_p), this->_M_type_size(__d), __m); } 
# 780
__attribute((__always_inline__)) __pointer_type 
# 781
fetch_sub(ptrdiff_t __d, memory_order 
# 782
__m = memory_order_seq_cst) noexcept 
# 783
{ return __atomic_fetch_sub(&(_M_p), this->_M_type_size(__d), __m); } 
# 785
__attribute((__always_inline__)) __pointer_type 
# 786
fetch_sub(ptrdiff_t __d, memory_order 
# 787
__m = memory_order_seq_cst) volatile noexcept 
# 788
{ return __atomic_fetch_sub(&(_M_p), this->_M_type_size(__d), __m); } 
# 789
}; 
# 794
}
# 35 "/usr/include/c++/5/bits/shared_ptr_atomic.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
struct _Sp_locker { 
# 46
_Sp_locker(const _Sp_locker &) = delete;
# 47
_Sp_locker &operator=(const _Sp_locker &) = delete;
# 51
explicit _Sp_locker(const void *) noexcept; 
# 52
_Sp_locker(const void *, const void *) noexcept; 
# 53
~_Sp_locker(); 
# 56
private: unsigned char _M_key1; 
# 57
unsigned char _M_key2; 
# 61
}; 
# 69
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 71
atomic_is_lock_free(const __shared_ptr< _Tp, _Lp>  *__p) 
# 72
{ 
# 74
return __gthread_active_p() == 0; 
# 78
} 
# 80
template< class _Tp> inline bool 
# 82
atomic_is_lock_free(const shared_ptr< _Tp>  *__p) 
# 83
{ return std::atomic_is_lock_free< _Tp, __gnu_cxx::__default_lock_policy> (__p); } 
# 96
template< class _Tp> inline shared_ptr< _Tp>  
# 98
atomic_load_explicit(const shared_ptr< _Tp>  *__p, memory_order) 
# 99
{ 
# 100
_Sp_locker __lock{__p}; 
# 101
return *__p; 
# 102
} 
# 104
template< class _Tp> inline shared_ptr< _Tp>  
# 106
atomic_load(const shared_ptr< _Tp>  *__p) 
# 107
{ return std::atomic_load_explicit(__p, memory_order_seq_cst); } 
# 109
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 111
atomic_load_explicit(const __shared_ptr< _Tp, _Lp>  *__p, memory_order) 
# 112
{ 
# 113
_Sp_locker __lock{__p}; 
# 114
return *__p; 
# 115
} 
# 117
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 119
atomic_load(const __shared_ptr< _Tp, _Lp>  *__p) 
# 120
{ return std::atomic_load_explicit(__p, memory_order_seq_cst); } 
# 132
template< class _Tp> inline void 
# 134
atomic_store_explicit(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  __r, memory_order) 
# 136
{ 
# 137
_Sp_locker __lock{__p}; 
# 138
(__p->swap(__r)); 
# 139
} 
# 141
template< class _Tp> inline void 
# 143
atomic_store(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  __r) 
# 144
{ std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); } 
# 146
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline void 
# 148
atomic_store_explicit(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  
# 149
__r, memory_order) 
# 151
{ 
# 152
_Sp_locker __lock{__p}; 
# 153
(__p->swap(__r)); 
# 154
} 
# 156
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline void 
# 158
atomic_store(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  __r) 
# 159
{ std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); } 
# 169
template< class _Tp> inline shared_ptr< _Tp>  
# 171
atomic_exchange_explicit(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  __r, memory_order) 
# 173
{ 
# 174
_Sp_locker __lock{__p}; 
# 175
(__p->swap(__r)); 
# 176
return __r; 
# 177
} 
# 179
template< class _Tp> inline shared_ptr< _Tp>  
# 181
atomic_exchange(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  __r) 
# 182
{ 
# 183
return std::atomic_exchange_explicit(__p, std::move(__r), memory_order_seq_cst); 
# 185
} 
# 187
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 189
atomic_exchange_explicit(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  
# 190
__r, memory_order) 
# 192
{ 
# 193
_Sp_locker __lock{__p}; 
# 194
(__p->swap(__r)); 
# 195
return __r; 
# 196
} 
# 198
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline __shared_ptr< _Tp, _Lp>  
# 200
atomic_exchange(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  __r) 
# 201
{ 
# 202
return std::atomic_exchange_explicit(__p, std::move(__r), memory_order_seq_cst); 
# 204
} 
# 218
template< class _Tp> bool 
# 220
atomic_compare_exchange_strong_explicit(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  *
# 221
__v, shared_ptr< _Tp>  
# 222
__w, memory_order, memory_order) 
# 225
{ 
# 226
shared_ptr< _Tp>  __x; 
# 227
_Sp_locker __lock{__p, __v}; 
# 228
owner_less< shared_ptr< _Tp> >  __less; 
# 229
if (((*__p) == (*__v)) && (!__less(*__p, *__v)) && (!__less(*__v, *__p))) 
# 230
{ 
# 231
__x = std::move(*__p); 
# 232
(*__p) = std::move(__w); 
# 233
return true; 
# 234
}  
# 235
__x = std::move(*__v); 
# 236
(*__v) = (*__p); 
# 237
return false; 
# 238
} 
# 240
template< class _Tp> inline bool 
# 242
atomic_compare_exchange_strong(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  *__v, shared_ptr< _Tp>  
# 243
__w) 
# 244
{ 
# 245
return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst); 
# 247
} 
# 249
template< class _Tp> inline bool 
# 251
atomic_compare_exchange_weak_explicit(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  *
# 252
__v, shared_ptr< _Tp>  
# 253
__w, memory_order 
# 254
__success, memory_order 
# 255
__failure) 
# 256
{ 
# 257
return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), __success, __failure); 
# 259
} 
# 261
template< class _Tp> inline bool 
# 263
atomic_compare_exchange_weak(shared_ptr< _Tp>  *__p, shared_ptr< _Tp>  *__v, shared_ptr< _Tp>  
# 264
__w) 
# 265
{ 
# 266
return std::atomic_compare_exchange_weak_explicit(__p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst); 
# 268
} 
# 270
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> bool 
# 272
atomic_compare_exchange_strong_explicit(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  *
# 273
__v, __shared_ptr< _Tp, _Lp>  
# 274
__w, memory_order, memory_order) 
# 277
{ 
# 278
__shared_ptr< _Tp, _Lp>  __x; 
# 279
_Sp_locker __lock{__p, __v}; 
# 280
owner_less< __shared_ptr< _Tp, _Lp> >  __less; 
# 281
if (((*__p) == (*__v)) && (!__less(*__p, *__v)) && (!__less(*__v, *__p))) 
# 282
{ 
# 283
__x = std::move(*__p); 
# 284
(*__p) = std::move(__w); 
# 285
return true; 
# 286
}  
# 287
__x = std::move(*__v); 
# 288
(*__v) = (*__p); 
# 289
return false; 
# 290
} 
# 292
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 294
atomic_compare_exchange_strong(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  *
# 295
__v, __shared_ptr< _Tp, _Lp>  
# 296
__w) 
# 297
{ 
# 298
return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst); 
# 300
} 
# 302
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 304
atomic_compare_exchange_weak_explicit(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  *
# 305
__v, __shared_ptr< _Tp, _Lp>  
# 306
__w, memory_order 
# 307
__success, memory_order 
# 308
__failure) 
# 309
{ 
# 310
return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), __success, __failure); 
# 312
} 
# 314
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> inline bool 
# 316
atomic_compare_exchange_weak(__shared_ptr< _Tp, _Lp>  *__p, __shared_ptr< _Tp, _Lp>  *
# 317
__v, __shared_ptr< _Tp, _Lp>  
# 318
__w) 
# 319
{ 
# 320
return std::atomic_compare_exchange_weak_explicit(__p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst); 
# 322
} 
# 328
}
# 36 "/usr/include/c++/5/backward/auto_ptr.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
template< class _Tp1> 
# 48
struct auto_ptr_ref { 
# 50
_Tp1 *_M_ptr; 
# 53
explicit auto_ptr_ref(_Tp1 *__p) : _M_ptr(__p) { } 
# 54
} __attribute((__deprecated__)); 
# 86
template< class _Tp> 
# 87
class auto_ptr { 
# 90
_Tp *_M_ptr; 
# 94
public: typedef _Tp element_type; 
# 103
explicit auto_ptr(element_type *__p = 0) throw() : _M_ptr(__p) { } 
# 112
auto_ptr(auto_ptr &__a) throw() : _M_ptr(__a.release()) { } 
# 124
template< class _Tp1> 
# 125
auto_ptr(std::auto_ptr< _Tp1>  &__a) throw() : _M_ptr((__a.release())) { } 
# 136
auto_ptr &operator=(auto_ptr &__a) throw() 
# 137
{ 
# 138
reset(__a.release()); 
# 139
return *this; 
# 140
} 
# 152
template< class _Tp1> auto_ptr &
# 154
operator=(std::auto_ptr< _Tp1>  &__a) throw() 
# 155
{ 
# 156
reset((__a.release())); 
# 157
return *this; 
# 158
} 
# 170
~auto_ptr() { delete (_M_ptr); } 
# 181
element_type &operator*() const throw() 
# 182
{ 
# 183
; 
# 184
return *(_M_ptr); 
# 185
} 
# 194
element_type *operator->() const throw() 
# 195
{ 
# 196
; 
# 197
return _M_ptr; 
# 198
} 
# 211
element_type *get() const throw() { return _M_ptr; } 
# 225
element_type *release() throw() 
# 226
{ 
# 227
element_type *__tmp = _M_ptr; 
# 228
(_M_ptr) = 0; 
# 229
return __tmp; 
# 230
} 
# 240
void reset(element_type *__p = 0) throw() 
# 241
{ 
# 242
if (__p != (_M_ptr)) 
# 243
{ 
# 244
delete (_M_ptr); 
# 245
(_M_ptr) = __p; 
# 246
}  
# 247
} 
# 260
auto_ptr(auto_ptr_ref< _Tp>  __ref) throw() : _M_ptr(((__ref._M_ptr))) 
# 261
{ } 
# 264
auto_ptr &operator=(auto_ptr_ref< _Tp>  __ref) throw() 
# 265
{ 
# 266
if ((__ref._M_ptr) != this->get()) 
# 267
{ 
# 268
delete (_M_ptr); 
# 269
(_M_ptr) = (__ref._M_ptr); 
# 270
}  
# 271
return *this; 
# 272
} 
# 274
template< class _Tp1> 
# 275
operator auto_ptr_ref< _Tp1> () throw() 
# 276
{ return ((auto_ptr_ref< _Tp1> )(this->release())); } 
# 278
template< class _Tp1> 
# 279
operator std::auto_ptr< _Tp1> () throw() 
# 280
{ return ((std::auto_ptr< _Tp1> )(this->release())); } 
# 281
} __attribute((__deprecated__)); 
# 286
template<> class auto_ptr< void>  { 
# 289
public: typedef void element_type; 
# 290
} __attribute((__deprecated__)); 
# 293
template< __gnu_cxx::_Lock_policy _Lp> 
# 294
template< class _Tp> inline 
# 296
__shared_count< _Lp> ::__shared_count(auto_ptr< _Tp>  &&__r) : _M_pi(new _Sp_counted_ptr< _Tp *, _Lp> ((__r.get()))) 
# 298
{ (__r.release()); } 
# 300
template< class _Tp, __gnu_cxx::_Lock_policy _Lp> 
# 301
template< class _Tp1> inline 
# 303
__shared_ptr< _Tp, _Lp> ::__shared_ptr(auto_ptr< _Tp1>  &&__r) : _M_ptr((__r.get())), _M_refcount() 
# 305
{ 
# 307
static_assert((sizeof(_Tp1) > (0)), "incomplete type");
# 308
_Tp1 *__tmp = (__r.get()); 
# 309
(_M_refcount) = ((__shared_count< _Lp> )(std::move(__r))); 
# 310
__enable_shared_from_this_helper(_M_refcount, __tmp, __tmp); 
# 311
} 
# 313
template< class _Tp> 
# 314
template< class _Tp1> inline 
# 316
shared_ptr< _Tp> ::shared_ptr(auto_ptr< _Tp1>  &&__r) : ::std::__shared_ptr< _Tp, ::__gnu_cxx::_S_atomic> (::std::move(__r)) 
# 317
{ } 
# 319
template< class _Tp, class _Dp> 
# 320
template< class _Up, class > inline 
# 322
unique_ptr< _Tp, _Dp> ::unique_ptr(auto_ptr< _Up>  &&__u) noexcept : _M_t((__u.release()), deleter_type()) 
# 323
{ } 
# 327
}
# 94 "/usr/include/c++/5/memory" 3
namespace std __attribute((__visibility__("default"))) { 
# 115
inline void *align(size_t __align, size_t __size, void *&__ptr, size_t &__space) noexcept 
# 116
{ 
# 117
const auto __intptr = reinterpret_cast< uintptr_t>(__ptr); 
# 118
const auto __aligned = ((__intptr - (1U)) + __align) & (-__align); 
# 119
const auto __diff = __aligned - __intptr; 
# 120
if ((__size + __diff) > __space) { 
# 121
return nullptr; } else 
# 123
{ 
# 124
__space -= __diff; 
# 125
return __ptr = (reinterpret_cast< void *>(__aligned)); 
# 126
}  
# 127
} 
# 130
}
# 74 "/home/zhengzhen/workspace/versapipe/tools/cuda_memory.h"
template< class T> 
# 75
class cuda_ptr { 
# 78
cuda_ptr(const cuda_ptr & p); 
# 79
cuda_ptr &operator=(const cuda_ptr & p); 
# 81
T *ptr; 
# 83
static void release(T *ptr) 
# 84
{ 
# 85
if (ptr != nullptr) { 
# 86
cudaFree(ptr); }  
# 87
} 
# 90
public: explicit cuda_ptr(T *ptr = 0) : ptr(ptr) 
# 92
{ 
# 93
} 
# 95
cuda_ptr(cuda_ptr &&p) : ptr(p.ptr) 
# 97
{ 
# 98
(p.ptr) = nullptr; 
# 99
} 
# 101
~cuda_ptr() 
# 102
{ 
# 103
release(ptr); 
# 104
} 
# 106
cuda_ptr &operator=(cuda_ptr &&p) 
# 107
{ 
# 108
std::swap(ptr, p.ptr); 
# 109
return *this; 
# 110
} 
# 112
void release() 
# 113
{ 
# 114
release(ptr); 
# 115
(ptr) = nullptr; 
# 116
} 
# 118
T **bind() 
# 119
{ 
# 120
release(ptr); 
# 121
return &(ptr); 
# 122
} 
# 124
T *unbind() 
# 125
{ 
# 126
T *temp = ptr; 
# 127
(ptr) = nullptr; 
# 128
return temp; 
# 129
} 
# 131
T *operator->() const { return ptr; } 
# 133
T &operator*() const { return *(ptr); } 
# 135
operator T *() const { return ptr; } 
# 137
}; 
# 144
struct cuda_deleter { 
# 146
void operator()(void *ptr) 
# 147
{ 
# 148
cudaFree(ptr); 
# 149
} 
# 150
}; 
# 152
template< class T> inline std::unique_ptr< T, cuda_deleter>  
# 153
cudaAlloc() 
# 154
{ 
# 155
void *ptr; 
# 156
printf("trying to allocate %.2f MB cuda buffer (%zu bytes)\n", ((sizeof(T)) * (1.0)) / ((1024.0) * (1024.0)), sizeof(T)); 
# 157
Tools::checkError(cudaMalloc(&ptr, sizeof(T)), "/home/zhengzhen/workspace/versapipe/tools/cuda_memory.h", 157); 
# 158
return ((std::unique_ptr< T, cuda_deleter> )(static_cast< T *>(ptr))); 
# 159
} 
# 161
template< class T> inline std::unique_ptr< T [], cuda_deleter>  
# 162
cudaAllocArray(::size_t N) 
# 163
{ 
# 164
void *ptr; 
# 165
printf("trying to allocate %.2f MB cuda buffer (%zu * %zu bytes)\n", ((N * sizeof(T)) * (1.0)) / ((1024.0) * (1024.0)), N, sizeof(T)); 
# 166
Tools::checkError(cudaMalloc(&ptr, N * sizeof(T)), "/home/zhengzhen/workspace/versapipe/tools/cuda_memory.h", 166); 
# 167
return ((std::unique_ptr< T [], cuda_deleter> )(static_cast< T *>(ptr))); 
# 168
} 
# 27 "/usr/include/unistd.h" 3
extern "C" {
# 277
typedef __socklen_t socklen_t; 
# 290
extern int access(const char * __name, int __type) throw() __attribute((__nonnull__(1))); 
# 295
extern int euidaccess(const char * __name, int __type) throw()
# 296
 __attribute((__nonnull__(1))); 
# 299
extern int eaccess(const char * __name, int __type) throw()
# 300
 __attribute((__nonnull__(1))); 
# 307
extern int faccessat(int __fd, const char * __file, int __type, int __flag) throw()
# 308
 __attribute((__nonnull__(2))) __attribute((__warn_unused_result__)); 
# 337
extern __off_t lseek(int __fd, __off_t __offset, int __whence) throw(); 
# 348
extern __off64_t lseek64(int __fd, __off64_t __offset, int __whence) throw(); 
# 356
extern int close(int __fd); 
# 363
extern __attribute((gnu_inline)) inline ssize_t read(int __fd, void * __buf, ::size_t __nbytes) __attribute((__warn_unused_result__)); 
# 369
extern ssize_t write(int __fd, const void * __buf, ::size_t __n) __attribute((__warn_unused_result__)); 
# 379
extern __attribute((gnu_inline)) inline ssize_t pread(int __fd, void * __buf, ::size_t __nbytes, __off_t __offset)
# 380
 __attribute((__warn_unused_result__)); 
# 387
extern ssize_t pwrite(int __fd, const void * __buf, ::size_t __n, __off_t __offset)
# 388
 __attribute((__warn_unused_result__)); 
# 407
extern __attribute((gnu_inline)) inline ssize_t pread64(int __fd, void * __buf, ::size_t __nbytes, __off64_t __offset)
# 408
 __attribute((__warn_unused_result__)); 
# 411
extern ssize_t pwrite64(int __fd, const void * __buf, ::size_t __n, __off64_t __offset)
# 412
 __attribute((__warn_unused_result__)); 
# 420
extern int pipe(int  __pipedes[2]) throw() __attribute((__warn_unused_result__)); 
# 425
extern int pipe2(int  __pipedes[2], int __flags) throw() __attribute((__warn_unused_result__)); 
# 435
extern unsigned alarm(unsigned __seconds) throw(); 
# 447
extern unsigned sleep(unsigned __seconds); 
# 455
extern __useconds_t ualarm(__useconds_t __value, __useconds_t __interval) throw(); 
# 463
extern int usleep(__useconds_t __useconds); 
# 472
extern int pause(); 
# 476
extern int chown(const char * __file, __uid_t __owner, __gid_t __group) throw()
# 477
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 481
extern int fchown(int __fd, __uid_t __owner, __gid_t __group) throw() __attribute((__warn_unused_result__)); 
# 486
extern int lchown(const char * __file, __uid_t __owner, __gid_t __group) throw()
# 487
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 494
extern int fchownat(int __fd, const char * __file, __uid_t __owner, __gid_t __group, int __flag) throw()
# 496
 __attribute((__nonnull__(2))) __attribute((__warn_unused_result__)); 
# 500
extern int chdir(const char * __path) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 504
extern int fchdir(int __fd) throw() __attribute((__warn_unused_result__)); 
# 514
extern __attribute((gnu_inline)) inline char *getcwd(char * __buf, ::size_t __size) throw() __attribute((__warn_unused_result__)); 
# 520
extern char *get_current_dir_name() throw(); 
# 528
extern __attribute((gnu_inline)) inline char *getwd(char * __buf) throw()
# 529
 __attribute((__nonnull__(1))) __attribute((__deprecated__)) __attribute((__warn_unused_result__)); 
# 534
extern int dup(int __fd) throw() __attribute((__warn_unused_result__)); 
# 537
extern int dup2(int __fd, int __fd2) throw(); 
# 542
extern int dup3(int __fd, int __fd2, int __flags) throw(); 
# 546
extern char **__environ; 
# 548
extern char **environ; 
# 554
extern int execve(const char * __path, char *const  __argv[], char *const  __envp[]) throw()
# 555
 __attribute((__nonnull__(1, 2))); 
# 560
extern int fexecve(int __fd, char *const  __argv[], char *const  __envp[]) throw()
# 561
 __attribute((__nonnull__(2))); 
# 566
extern int execv(const char * __path, char *const  __argv[]) throw()
# 567
 __attribute((__nonnull__(1, 2))); 
# 571
extern int execle(const char * __path, const char * __arg, ...) throw()
# 572
 __attribute((__nonnull__(1, 2))); 
# 576
extern int execl(const char * __path, const char * __arg, ...) throw()
# 577
 __attribute((__nonnull__(1, 2))); 
# 581
extern int execvp(const char * __file, char *const  __argv[]) throw()
# 582
 __attribute((__nonnull__(1, 2))); 
# 587
extern int execlp(const char * __file, const char * __arg, ...) throw()
# 588
 __attribute((__nonnull__(1, 2))); 
# 593
extern int execvpe(const char * __file, char *const  __argv[], char *const  __envp[]) throw()
# 595
 __attribute((__nonnull__(1, 2))); 
# 601
extern int nice(int __inc) throw() __attribute((__warn_unused_result__)); 
# 606
extern void _exit(int __status) __attribute((__noreturn__)); 
# 25 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3
enum { 
# 26
_PC_LINK_MAX, 
# 28
_PC_MAX_CANON, 
# 30
_PC_MAX_INPUT, 
# 32
_PC_NAME_MAX, 
# 34
_PC_PATH_MAX, 
# 36
_PC_PIPE_BUF, 
# 38
_PC_CHOWN_RESTRICTED, 
# 40
_PC_NO_TRUNC, 
# 42
_PC_VDISABLE, 
# 44
_PC_SYNC_IO, 
# 46
_PC_ASYNC_IO, 
# 48
_PC_PRIO_IO, 
# 50
_PC_SOCK_MAXBUF, 
# 52
_PC_FILESIZEBITS, 
# 54
_PC_REC_INCR_XFER_SIZE, 
# 56
_PC_REC_MAX_XFER_SIZE, 
# 58
_PC_REC_MIN_XFER_SIZE, 
# 60
_PC_REC_XFER_ALIGN, 
# 62
_PC_ALLOC_SIZE_MIN, 
# 64
_PC_SYMLINK_MAX, 
# 66
_PC_2_SYMLINKS
# 68
}; 
# 72
enum { 
# 73
_SC_ARG_MAX, 
# 75
_SC_CHILD_MAX, 
# 77
_SC_CLK_TCK, 
# 79
_SC_NGROUPS_MAX, 
# 81
_SC_OPEN_MAX, 
# 83
_SC_STREAM_MAX, 
# 85
_SC_TZNAME_MAX, 
# 87
_SC_JOB_CONTROL, 
# 89
_SC_SAVED_IDS, 
# 91
_SC_REALTIME_SIGNALS, 
# 93
_SC_PRIORITY_SCHEDULING, 
# 95
_SC_TIMERS, 
# 97
_SC_ASYNCHRONOUS_IO, 
# 99
_SC_PRIORITIZED_IO, 
# 101
_SC_SYNCHRONIZED_IO, 
# 103
_SC_FSYNC, 
# 105
_SC_MAPPED_FILES, 
# 107
_SC_MEMLOCK, 
# 109
_SC_MEMLOCK_RANGE, 
# 111
_SC_MEMORY_PROTECTION, 
# 113
_SC_MESSAGE_PASSING, 
# 115
_SC_SEMAPHORES, 
# 117
_SC_SHARED_MEMORY_OBJECTS, 
# 119
_SC_AIO_LISTIO_MAX, 
# 121
_SC_AIO_MAX, 
# 123
_SC_AIO_PRIO_DELTA_MAX, 
# 125
_SC_DELAYTIMER_MAX, 
# 127
_SC_MQ_OPEN_MAX, 
# 129
_SC_MQ_PRIO_MAX, 
# 131
_SC_VERSION, 
# 133
_SC_PAGESIZE, 
# 136
_SC_RTSIG_MAX, 
# 138
_SC_SEM_NSEMS_MAX, 
# 140
_SC_SEM_VALUE_MAX, 
# 142
_SC_SIGQUEUE_MAX, 
# 144
_SC_TIMER_MAX, 
# 149
_SC_BC_BASE_MAX, 
# 151
_SC_BC_DIM_MAX, 
# 153
_SC_BC_SCALE_MAX, 
# 155
_SC_BC_STRING_MAX, 
# 157
_SC_COLL_WEIGHTS_MAX, 
# 159
_SC_EQUIV_CLASS_MAX, 
# 161
_SC_EXPR_NEST_MAX, 
# 163
_SC_LINE_MAX, 
# 165
_SC_RE_DUP_MAX, 
# 167
_SC_CHARCLASS_NAME_MAX, 
# 170
_SC_2_VERSION, 
# 172
_SC_2_C_BIND, 
# 174
_SC_2_C_DEV, 
# 176
_SC_2_FORT_DEV, 
# 178
_SC_2_FORT_RUN, 
# 180
_SC_2_SW_DEV, 
# 182
_SC_2_LOCALEDEF, 
# 185
_SC_PII, 
# 187
_SC_PII_XTI, 
# 189
_SC_PII_SOCKET, 
# 191
_SC_PII_INTERNET, 
# 193
_SC_PII_OSI, 
# 195
_SC_POLL, 
# 197
_SC_SELECT, 
# 199
_SC_UIO_MAXIOV, 
# 201
_SC_IOV_MAX = 60, 
# 203
_SC_PII_INTERNET_STREAM, 
# 205
_SC_PII_INTERNET_DGRAM, 
# 207
_SC_PII_OSI_COTS, 
# 209
_SC_PII_OSI_CLTS, 
# 211
_SC_PII_OSI_M, 
# 213
_SC_T_IOV_MAX, 
# 217
_SC_THREADS, 
# 219
_SC_THREAD_SAFE_FUNCTIONS, 
# 221
_SC_GETGR_R_SIZE_MAX, 
# 223
_SC_GETPW_R_SIZE_MAX, 
# 225
_SC_LOGIN_NAME_MAX, 
# 227
_SC_TTY_NAME_MAX, 
# 229
_SC_THREAD_DESTRUCTOR_ITERATIONS, 
# 231
_SC_THREAD_KEYS_MAX, 
# 233
_SC_THREAD_STACK_MIN, 
# 235
_SC_THREAD_THREADS_MAX, 
# 237
_SC_THREAD_ATTR_STACKADDR, 
# 239
_SC_THREAD_ATTR_STACKSIZE, 
# 241
_SC_THREAD_PRIORITY_SCHEDULING, 
# 243
_SC_THREAD_PRIO_INHERIT, 
# 245
_SC_THREAD_PRIO_PROTECT, 
# 247
_SC_THREAD_PROCESS_SHARED, 
# 250
_SC_NPROCESSORS_CONF, 
# 252
_SC_NPROCESSORS_ONLN, 
# 254
_SC_PHYS_PAGES, 
# 256
_SC_AVPHYS_PAGES, 
# 258
_SC_ATEXIT_MAX, 
# 260
_SC_PASS_MAX, 
# 263
_SC_XOPEN_VERSION, 
# 265
_SC_XOPEN_XCU_VERSION, 
# 267
_SC_XOPEN_UNIX, 
# 269
_SC_XOPEN_CRYPT, 
# 271
_SC_XOPEN_ENH_I18N, 
# 273
_SC_XOPEN_SHM, 
# 276
_SC_2_CHAR_TERM, 
# 278
_SC_2_C_VERSION, 
# 280
_SC_2_UPE, 
# 283
_SC_XOPEN_XPG2, 
# 285
_SC_XOPEN_XPG3, 
# 287
_SC_XOPEN_XPG4, 
# 290
_SC_CHAR_BIT, 
# 292
_SC_CHAR_MAX, 
# 294
_SC_CHAR_MIN, 
# 296
_SC_INT_MAX, 
# 298
_SC_INT_MIN, 
# 300
_SC_LONG_BIT, 
# 302
_SC_WORD_BIT, 
# 304
_SC_MB_LEN_MAX, 
# 306
_SC_NZERO, 
# 308
_SC_SSIZE_MAX, 
# 310
_SC_SCHAR_MAX, 
# 312
_SC_SCHAR_MIN, 
# 314
_SC_SHRT_MAX, 
# 316
_SC_SHRT_MIN, 
# 318
_SC_UCHAR_MAX, 
# 320
_SC_UINT_MAX, 
# 322
_SC_ULONG_MAX, 
# 324
_SC_USHRT_MAX, 
# 327
_SC_NL_ARGMAX, 
# 329
_SC_NL_LANGMAX, 
# 331
_SC_NL_MSGMAX, 
# 333
_SC_NL_NMAX, 
# 335
_SC_NL_SETMAX, 
# 337
_SC_NL_TEXTMAX, 
# 340
_SC_XBS5_ILP32_OFF32, 
# 342
_SC_XBS5_ILP32_OFFBIG, 
# 344
_SC_XBS5_LP64_OFF64, 
# 346
_SC_XBS5_LPBIG_OFFBIG, 
# 349
_SC_XOPEN_LEGACY, 
# 351
_SC_XOPEN_REALTIME, 
# 353
_SC_XOPEN_REALTIME_THREADS, 
# 356
_SC_ADVISORY_INFO, 
# 358
_SC_BARRIERS, 
# 360
_SC_BASE, 
# 362
_SC_C_LANG_SUPPORT, 
# 364
_SC_C_LANG_SUPPORT_R, 
# 366
_SC_CLOCK_SELECTION, 
# 368
_SC_CPUTIME, 
# 370
_SC_THREAD_CPUTIME, 
# 372
_SC_DEVICE_IO, 
# 374
_SC_DEVICE_SPECIFIC, 
# 376
_SC_DEVICE_SPECIFIC_R, 
# 378
_SC_FD_MGMT, 
# 380
_SC_FIFO, 
# 382
_SC_PIPE, 
# 384
_SC_FILE_ATTRIBUTES, 
# 386
_SC_FILE_LOCKING, 
# 388
_SC_FILE_SYSTEM, 
# 390
_SC_MONOTONIC_CLOCK, 
# 392
_SC_MULTI_PROCESS, 
# 394
_SC_SINGLE_PROCESS, 
# 396
_SC_NETWORKING, 
# 398
_SC_READER_WRITER_LOCKS, 
# 400
_SC_SPIN_LOCKS, 
# 402
_SC_REGEXP, 
# 404
_SC_REGEX_VERSION, 
# 406
_SC_SHELL, 
# 408
_SC_SIGNALS, 
# 410
_SC_SPAWN, 
# 412
_SC_SPORADIC_SERVER, 
# 414
_SC_THREAD_SPORADIC_SERVER, 
# 416
_SC_SYSTEM_DATABASE, 
# 418
_SC_SYSTEM_DATABASE_R, 
# 420
_SC_TIMEOUTS, 
# 422
_SC_TYPED_MEMORY_OBJECTS, 
# 424
_SC_USER_GROUPS, 
# 426
_SC_USER_GROUPS_R, 
# 428
_SC_2_PBS, 
# 430
_SC_2_PBS_ACCOUNTING, 
# 432
_SC_2_PBS_LOCATE, 
# 434
_SC_2_PBS_MESSAGE, 
# 436
_SC_2_PBS_TRACK, 
# 438
_SC_SYMLOOP_MAX, 
# 440
_SC_STREAMS, 
# 442
_SC_2_PBS_CHECKPOINT, 
# 445
_SC_V6_ILP32_OFF32, 
# 447
_SC_V6_ILP32_OFFBIG, 
# 449
_SC_V6_LP64_OFF64, 
# 451
_SC_V6_LPBIG_OFFBIG, 
# 454
_SC_HOST_NAME_MAX, 
# 456
_SC_TRACE, 
# 458
_SC_TRACE_EVENT_FILTER, 
# 460
_SC_TRACE_INHERIT, 
# 462
_SC_TRACE_LOG, 
# 465
_SC_LEVEL1_ICACHE_SIZE, 
# 467
_SC_LEVEL1_ICACHE_ASSOC, 
# 469
_SC_LEVEL1_ICACHE_LINESIZE, 
# 471
_SC_LEVEL1_DCACHE_SIZE, 
# 473
_SC_LEVEL1_DCACHE_ASSOC, 
# 475
_SC_LEVEL1_DCACHE_LINESIZE, 
# 477
_SC_LEVEL2_CACHE_SIZE, 
# 479
_SC_LEVEL2_CACHE_ASSOC, 
# 481
_SC_LEVEL2_CACHE_LINESIZE, 
# 483
_SC_LEVEL3_CACHE_SIZE, 
# 485
_SC_LEVEL3_CACHE_ASSOC, 
# 487
_SC_LEVEL3_CACHE_LINESIZE, 
# 489
_SC_LEVEL4_CACHE_SIZE, 
# 491
_SC_LEVEL4_CACHE_ASSOC, 
# 493
_SC_LEVEL4_CACHE_LINESIZE, 
# 497
_SC_IPV6 = 235, 
# 499
_SC_RAW_SOCKETS, 
# 502
_SC_V7_ILP32_OFF32, 
# 504
_SC_V7_ILP32_OFFBIG, 
# 506
_SC_V7_LP64_OFF64, 
# 508
_SC_V7_LPBIG_OFFBIG, 
# 511
_SC_SS_REPL_MAX, 
# 514
_SC_TRACE_EVENT_NAME_MAX, 
# 516
_SC_TRACE_NAME_MAX, 
# 518
_SC_TRACE_SYS_MAX, 
# 520
_SC_TRACE_USER_EVENT_MAX, 
# 523
_SC_XOPEN_STREAMS, 
# 526
_SC_THREAD_ROBUST_PRIO_INHERIT, 
# 528
_SC_THREAD_ROBUST_PRIO_PROTECT
# 530
}; 
# 534
enum { 
# 535
_CS_PATH, 
# 538
_CS_V6_WIDTH_RESTRICTED_ENVS, 
# 542
_CS_GNU_LIBC_VERSION, 
# 544
_CS_GNU_LIBPTHREAD_VERSION, 
# 547
_CS_V5_WIDTH_RESTRICTED_ENVS, 
# 551
_CS_V7_WIDTH_RESTRICTED_ENVS, 
# 555
_CS_LFS_CFLAGS = 1000, 
# 557
_CS_LFS_LDFLAGS, 
# 559
_CS_LFS_LIBS, 
# 561
_CS_LFS_LINTFLAGS, 
# 563
_CS_LFS64_CFLAGS, 
# 565
_CS_LFS64_LDFLAGS, 
# 567
_CS_LFS64_LIBS, 
# 569
_CS_LFS64_LINTFLAGS, 
# 572
_CS_XBS5_ILP32_OFF32_CFLAGS = 1100, 
# 574
_CS_XBS5_ILP32_OFF32_LDFLAGS, 
# 576
_CS_XBS5_ILP32_OFF32_LIBS, 
# 578
_CS_XBS5_ILP32_OFF32_LINTFLAGS, 
# 580
_CS_XBS5_ILP32_OFFBIG_CFLAGS, 
# 582
_CS_XBS5_ILP32_OFFBIG_LDFLAGS, 
# 584
_CS_XBS5_ILP32_OFFBIG_LIBS, 
# 586
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS, 
# 588
_CS_XBS5_LP64_OFF64_CFLAGS, 
# 590
_CS_XBS5_LP64_OFF64_LDFLAGS, 
# 592
_CS_XBS5_LP64_OFF64_LIBS, 
# 594
_CS_XBS5_LP64_OFF64_LINTFLAGS, 
# 596
_CS_XBS5_LPBIG_OFFBIG_CFLAGS, 
# 598
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS, 
# 600
_CS_XBS5_LPBIG_OFFBIG_LIBS, 
# 602
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS, 
# 605
_CS_POSIX_V6_ILP32_OFF32_CFLAGS, 
# 607
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS, 
# 609
_CS_POSIX_V6_ILP32_OFF32_LIBS, 
# 611
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS, 
# 613
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS, 
# 615
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS, 
# 617
_CS_POSIX_V6_ILP32_OFFBIG_LIBS, 
# 619
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS, 
# 621
_CS_POSIX_V6_LP64_OFF64_CFLAGS, 
# 623
_CS_POSIX_V6_LP64_OFF64_LDFLAGS, 
# 625
_CS_POSIX_V6_LP64_OFF64_LIBS, 
# 627
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS, 
# 629
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS, 
# 631
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS, 
# 633
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS, 
# 635
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS, 
# 638
_CS_POSIX_V7_ILP32_OFF32_CFLAGS, 
# 640
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS, 
# 642
_CS_POSIX_V7_ILP32_OFF32_LIBS, 
# 644
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS, 
# 646
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS, 
# 648
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS, 
# 650
_CS_POSIX_V7_ILP32_OFFBIG_LIBS, 
# 652
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS, 
# 654
_CS_POSIX_V7_LP64_OFF64_CFLAGS, 
# 656
_CS_POSIX_V7_LP64_OFF64_LDFLAGS, 
# 658
_CS_POSIX_V7_LP64_OFF64_LIBS, 
# 660
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS, 
# 662
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS, 
# 664
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS, 
# 666
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS, 
# 668
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS, 
# 671
_CS_V6_ENV, 
# 673
_CS_V7_ENV
# 675
}; 
# 615 "/usr/include/unistd.h" 3
extern long pathconf(const char * __path, int __name) throw()
# 616
 __attribute((__nonnull__(1))); 
# 619
extern long fpathconf(int __fd, int __name) throw(); 
# 622
extern long sysconf(int __name) throw(); 
# 626
extern __attribute((gnu_inline)) inline ::size_t confstr(int __name, char * __buf, ::size_t __len) throw(); 
# 631
extern __pid_t getpid() throw(); 
# 634
extern __pid_t getppid() throw(); 
# 637
extern __pid_t getpgrp() throw(); 
# 640
extern __pid_t __getpgid(__pid_t __pid) throw(); 
# 642
extern __pid_t getpgid(__pid_t __pid) throw(); 
# 649
extern int setpgid(__pid_t __pid, __pid_t __pgid) throw(); 
# 663
extern int setpgrp() throw(); 
# 670
extern __pid_t setsid() throw(); 
# 674
extern __pid_t getsid(__pid_t __pid) throw(); 
# 678
extern __uid_t getuid() throw(); 
# 681
extern __uid_t geteuid() throw(); 
# 684
extern __gid_t getgid() throw(); 
# 687
extern __gid_t getegid() throw(); 
# 692
extern __attribute((gnu_inline)) inline int getgroups(int __size, __gid_t  __list[]) throw() __attribute((__warn_unused_result__)); 
# 696
extern int group_member(__gid_t __gid) throw(); 
# 703
extern int setuid(__uid_t __uid) throw() __attribute((__warn_unused_result__)); 
# 708
extern int setreuid(__uid_t __ruid, __uid_t __euid) throw() __attribute((__warn_unused_result__)); 
# 713
extern int seteuid(__uid_t __uid) throw() __attribute((__warn_unused_result__)); 
# 720
extern int setgid(__gid_t __gid) throw() __attribute((__warn_unused_result__)); 
# 725
extern int setregid(__gid_t __rgid, __gid_t __egid) throw() __attribute((__warn_unused_result__)); 
# 730
extern int setegid(__gid_t __gid) throw() __attribute((__warn_unused_result__)); 
# 736
extern int getresuid(__uid_t * __ruid, __uid_t * __euid, __uid_t * __suid) throw(); 
# 741
extern int getresgid(__gid_t * __rgid, __gid_t * __egid, __gid_t * __sgid) throw(); 
# 746
extern int setresuid(__uid_t __ruid, __uid_t __euid, __uid_t __suid) throw()
# 747
 __attribute((__warn_unused_result__)); 
# 751
extern int setresgid(__gid_t __rgid, __gid_t __egid, __gid_t __sgid) throw()
# 752
 __attribute((__warn_unused_result__)); 
# 759
extern __pid_t fork() throw(); 
# 767
extern __pid_t vfork() throw(); 
# 773
extern char *ttyname(int __fd) throw(); 
# 777
extern __attribute((gnu_inline)) inline int ttyname_r(int __fd, char * __buf, ::size_t __buflen) throw()
# 778
 __attribute((__nonnull__(2))) __attribute((__warn_unused_result__)); 
# 782
extern int isatty(int __fd) throw(); 
# 788
extern int ttyslot() throw(); 
# 793
extern int link(const char * __from, const char * __to) throw()
# 794
 __attribute((__nonnull__(1, 2))) __attribute((__warn_unused_result__)); 
# 799
extern int linkat(int __fromfd, const char * __from, int __tofd, const char * __to, int __flags) throw()
# 801
 __attribute((__nonnull__(2, 4))) __attribute((__warn_unused_result__)); 
# 806
extern int symlink(const char * __from, const char * __to) throw()
# 807
 __attribute((__nonnull__(1, 2))) __attribute((__warn_unused_result__)); 
# 812
extern __attribute((gnu_inline)) inline ssize_t readlink(const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len) throw()
# 814
 __attribute((__nonnull__(1, 2))) __attribute((__warn_unused_result__)); 
# 819
extern int symlinkat(const char * __from, int __tofd, const char * __to) throw()
# 820
 __attribute((__nonnull__(1, 3))) __attribute((__warn_unused_result__)); 
# 823
extern __attribute((gnu_inline)) inline ssize_t readlinkat(int __fd, const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len) throw()
# 825
 __attribute((__nonnull__(2, 3))) __attribute((__warn_unused_result__)); 
# 829
extern int unlink(const char * __name) throw() __attribute((__nonnull__(1))); 
# 833
extern int unlinkat(int __fd, const char * __name, int __flag) throw()
# 834
 __attribute((__nonnull__(2))); 
# 838
extern int rmdir(const char * __path) throw() __attribute((__nonnull__(1))); 
# 842
extern __pid_t tcgetpgrp(int __fd) throw(); 
# 845
extern int tcsetpgrp(int __fd, __pid_t __pgrp_id) throw(); 
# 852
extern char *getlogin(); 
# 860
extern __attribute((gnu_inline)) inline int getlogin_r(char * __name, ::size_t __name_len) __attribute((__nonnull__(1))); 
# 865
extern int setlogin(const char * __name) throw() __attribute((__nonnull__(1))); 
# 48 "/usr/include/getopt.h" 3
extern "C" {
# 57
extern char *optarg; 
# 71
extern int optind; 
# 76
extern int opterr; 
# 80
extern int optopt; 
# 150
extern int getopt(int ___argc, char *const * ___argv, const char * __shortopts) throw(); 
# 185
}
# 882 "/usr/include/unistd.h" 3
extern __attribute((gnu_inline)) inline int gethostname(char * __name, ::size_t __len) throw() __attribute((__nonnull__(1))); 
# 889
extern int sethostname(const char * __name, ::size_t __len) throw()
# 890
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 894
extern int sethostid(long __id) throw() __attribute((__warn_unused_result__)); 
# 900
extern __attribute((gnu_inline)) inline int getdomainname(char * __name, ::size_t __len) throw()
# 901
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 902
extern int setdomainname(const char * __name, ::size_t __len) throw()
# 903
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 909
extern int vhangup() throw(); 
# 912
extern int revoke(const char * __file) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 920
extern int profil(unsigned short * __sample_buffer, ::size_t __size, ::size_t __offset, unsigned __scale) throw()
# 922
 __attribute((__nonnull__(1))); 
# 928
extern int acct(const char * __name) throw(); 
# 932
extern char *getusershell() throw(); 
# 933
extern void endusershell() throw(); 
# 934
extern void setusershell() throw(); 
# 940
extern int daemon(int __nochdir, int __noclose) throw() __attribute((__warn_unused_result__)); 
# 947
extern int chroot(const char * __path) throw() __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 951
extern char *getpass(const char * __prompt) __attribute((__nonnull__(1))); 
# 959
extern int fsync(int __fd); 
# 965
extern int syncfs(int __fd) throw(); 
# 972
extern long gethostid(); 
# 975
extern void sync() throw(); 
# 981
extern int getpagesize() throw() __attribute((const)); 
# 986
extern int getdtablesize() throw(); 
# 996
extern int truncate(const char * __file, __off_t __length) throw()
# 997
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 1008
extern int truncate64(const char * __file, __off64_t __length) throw()
# 1009
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 1019
extern int ftruncate(int __fd, __off_t __length) throw() __attribute((__warn_unused_result__)); 
# 1029
extern int ftruncate64(int __fd, __off64_t __length) throw() __attribute((__warn_unused_result__)); 
# 1040
extern int brk(void * __addr) throw() __attribute((__warn_unused_result__)); 
# 1046
extern void *sbrk(intptr_t __delta) throw(); 
# 1061
extern long syscall(long __sysno, ...) throw(); 
# 1084
extern int lockf(int __fd, int __cmd, __off_t __len) __attribute((__warn_unused_result__)); 
# 1094
extern int lockf64(int __fd, int __cmd, __off64_t __len) __attribute((__warn_unused_result__)); 
# 1115
extern int fdatasync(int __fildes); 
# 1123
extern char *crypt(const char * __key, const char * __salt) throw()
# 1124
 __attribute((__nonnull__(1, 2))); 
# 1128
extern void encrypt(char * __glibc_block, int __edflag) throw()
# 1129
 __attribute((__nonnull__(1))); 
# 1136
extern void swab(const void *__restrict__ __from, void *__restrict__ __to, ssize_t __n) throw()
# 1137
 __attribute((__nonnull__(1, 2))); 
# 23 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3
extern ssize_t __read_chk(int __fd, void * __buf, ::size_t __nbytes, ::size_t __buflen)
# 24
 __attribute((__warn_unused_result__)); 
# 25
extern ssize_t __read_alias(int __fd, void * __buf, ::size_t __nbytes) __asm__("read")
# 26
 __attribute((__warn_unused_result__)); 
# 27
extern ssize_t __read_chk_warn(int __fd, void * __buf, ::size_t __nbytes, ::size_t __buflen) __asm__("__read_chk")
# 30
 __attribute((__warn_unused_result__)) __attribute((__warning__("read called with bigger length than size of the destination buffer"))); 
# 33
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline ssize_t 
# 34
read(int __fd, void *__buf, ::size_t __nbytes) 
# 35
{ 
# 36
if (__builtin_object_size(__buf, 0) != ((::size_t)(-1))) 
# 37
{ 
# 38
if (!(0)) { 
# 39
return __read_chk(__fd, __buf, __nbytes, __builtin_object_size(__buf, 0)); }  
# 41
if (__nbytes > __builtin_object_size(__buf, 0)) { 
# 42
return __read_chk_warn(__fd, __buf, __nbytes, __builtin_object_size(__buf, 0)); }  
# 43
}  
# 44
return __read_alias(__fd, __buf, __nbytes); 
# 45
} 
# 48
extern ssize_t __pread_chk(int __fd, void * __buf, ::size_t __nbytes, __off_t __offset, ::size_t __bufsize)
# 49
 __attribute((__warn_unused_result__)); 
# 50
extern ssize_t __pread64_chk(int __fd, void * __buf, ::size_t __nbytes, __off64_t __offset, ::size_t __bufsize)
# 51
 __attribute((__warn_unused_result__)); 
# 52
extern ssize_t __pread_alias(int __fd, void * __buf, ::size_t __nbytes, __off_t __offset) __asm__("pread")
# 54
 __attribute((__warn_unused_result__)); 
# 55
extern ssize_t __pread64_alias(int __fd, void * __buf, ::size_t __nbytes, __off64_t __offset) __asm__("pread64")
# 57
 __attribute((__warn_unused_result__)); 
# 58
extern ssize_t __pread_chk_warn(int __fd, void * __buf, ::size_t __nbytes, __off_t __offset, ::size_t __bufsize) __asm__("__pread_chk")
# 61
 __attribute((__warn_unused_result__)) __attribute((__warning__("pread called with bigger length than size of the destination buffer"))); 
# 63
extern ssize_t __pread64_chk_warn(int __fd, void * __buf, ::size_t __nbytes, __off64_t __offset, ::size_t __bufsize) __asm__("__pread64_chk")
# 67
 __attribute((__warn_unused_result__)) __attribute((__warning__("pread64 called with bigger length than size of the destination buffer"))); 
# 71
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline ssize_t 
# 72
pread(int __fd, void *__buf, ::size_t __nbytes, __off_t __offset) 
# 73
{ 
# 74
if (__builtin_object_size(__buf, 0) != ((::size_t)(-1))) 
# 75
{ 
# 76
if (!(0)) { 
# 77
return __pread_chk(__fd, __buf, __nbytes, __offset, __builtin_object_size(__buf, 0)); }  
# 79
if (__nbytes > __builtin_object_size(__buf, 0)) { 
# 80
return __pread_chk_warn(__fd, __buf, __nbytes, __offset, __builtin_object_size(__buf, 0)); }  
# 82
}  
# 83
return __pread_alias(__fd, __buf, __nbytes, __offset); 
# 84
} 
# 104
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) extern inline ssize_t 
# 105
pread64(int __fd, void *__buf, ::size_t __nbytes, __off64_t __offset) 
# 106
{ 
# 107
if (__builtin_object_size(__buf, 0) != ((::size_t)(-1))) 
# 108
{ 
# 109
if (!(0)) { 
# 110
return __pread64_chk(__fd, __buf, __nbytes, __offset, __builtin_object_size(__buf, 0)); }  
# 112
if (__nbytes > __builtin_object_size(__buf, 0)) { 
# 113
return __pread64_chk_warn(__fd, __buf, __nbytes, __offset, __builtin_object_size(__buf, 0)); }  
# 115
}  
# 117
return __pread64_alias(__fd, __buf, __nbytes, __offset); 
# 118
} 
# 123
extern ssize_t __readlink_chk(const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len, ::size_t __buflen) throw()
# 126
 __attribute((__nonnull__(1, 2))) __attribute((__warn_unused_result__)); 
# 127
extern ssize_t __readlink_alias(const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len) throw() __asm__("readlink")
# 130
 __attribute((__nonnull__(1, 2))) __attribute((__warn_unused_result__)); 
# 131
extern ssize_t __readlink_chk_warn(const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len, ::size_t __buflen) throw() __asm__("__readlink_chk")
# 135
 __attribute((__nonnull__(1, 2))) __attribute((__warn_unused_result__)) __attribute((__warning__("readlink called with bigger length than size of destination buffer"))); 
# 138
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__nonnull__(1, 2))) __attribute((__warn_unused_result__)) extern inline ssize_t
# 139
 __attribute((__leaf__)) readlink(const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len) throw() 
# 141
{ 
# 142
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 143
{ 
# 144
if (!(0)) { 
# 145
return __readlink_chk(__path, __buf, __len, __builtin_object_size(__buf, 2 > 1)); }  
# 147
if (__len > __builtin_object_size(__buf, 2 > 1)) { 
# 148
return __readlink_chk_warn(__path, __buf, __len, __builtin_object_size(__buf, 2 > 1)); }  
# 149
}  
# 150
return __readlink_alias(__path, __buf, __len); 
# 151
} 
# 155
extern ssize_t __readlinkat_chk(int __fd, const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len, ::size_t __buflen) throw()
# 158
 __attribute((__nonnull__(2, 3))) __attribute((__warn_unused_result__)); 
# 159
extern ssize_t __readlinkat_alias(int __fd, const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len) throw() __asm__("readlinkat")
# 163
 __attribute((__nonnull__(2, 3))) __attribute((__warn_unused_result__)); 
# 164
extern ssize_t __readlinkat_chk_warn(int __fd, const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len, ::size_t __buflen) throw() __asm__("__readlinkat_chk")
# 168
 __attribute((__nonnull__(2, 3))) __attribute((__warn_unused_result__)) __attribute((__warning__("readlinkat called with bigger length than size of destination buffer"))); 
# 172
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__nonnull__(2, 3))) __attribute((__warn_unused_result__)) extern inline ssize_t
# 173
 __attribute((__leaf__)) readlinkat(int __fd, const char *__restrict__ __path, char *__restrict__ __buf, ::size_t __len) throw() 
# 175
{ 
# 176
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 177
{ 
# 178
if (!(0)) { 
# 179
return __readlinkat_chk(__fd, __path, __buf, __len, __builtin_object_size(__buf, 2 > 1)); }  
# 181
if (__len > __builtin_object_size(__buf, 2 > 1)) { 
# 182
return __readlinkat_chk_warn(__fd, __path, __buf, __len, __builtin_object_size(__buf, 2 > 1)); }  
# 184
}  
# 185
return __readlinkat_alias(__fd, __path, __buf, __len); 
# 186
} 
# 189
extern char *__getcwd_chk(char * __buf, ::size_t __size, ::size_t __buflen) throw()
# 190
 __attribute((__warn_unused_result__)); 
# 191
extern char *__getcwd_alias(char * __buf, ::size_t __size) throw() __asm__("getcwd")
# 192
 __attribute((__warn_unused_result__)); 
# 193
extern char *__getcwd_chk_warn(char * __buf, ::size_t __size, ::size_t __buflen) throw() __asm__("__getcwd_chk")
# 196
 __attribute((__warn_unused_result__)) __attribute((__warning__("getcwd caller with bigger length than size of destination buffer"))); 
# 199
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__warn_unused_result__)) 
# 200
__attribute((__leaf__)) extern inline char *getcwd(char *__buf, ::size_t __size) throw() 
# 201
{ 
# 202
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 203
{ 
# 204
if (!(0)) { 
# 205
return __getcwd_chk(__buf, __size, __builtin_object_size(__buf, 2 > 1)); }  
# 207
if (__size > __builtin_object_size(__buf, 2 > 1)) { 
# 208
return __getcwd_chk_warn(__buf, __size, __builtin_object_size(__buf, 2 > 1)); }  
# 209
}  
# 210
return __getcwd_alias(__buf, __size); 
# 211
} 
# 214
extern char *__getwd_chk(char * __buf, ::size_t buflen) throw()
# 215
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 216
extern char *__getwd_warn(char * __buf) throw() __asm__("getwd")
# 217
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)) __attribute((__warning__("please use getcwd instead, as getwd doesn\'t specify buffer size"))); 
# 220
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) __attribute((__nonnull__(1))) __attribute((__deprecated__)) __attribute((__warn_unused_result__)) 
# 221
__attribute((__leaf__)) extern inline char *getwd(char *__buf) throw() 
# 222
{ 
# 223
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) { 
# 224
return __getwd_chk(__buf, __builtin_object_size(__buf, 2 > 1)); }  
# 225
return __getwd_warn(__buf); 
# 226
} 
# 229
extern ::size_t __confstr_chk(int __name, char * __buf, ::size_t __len, ::size_t __buflen) throw(); 
# 231
extern ::size_t __confstr_alias(int __name, char * __buf, ::size_t __len) throw() __asm__("confstr"); 
# 233
extern ::size_t __confstr_chk_warn(int __name, char * __buf, ::size_t __len, ::size_t __buflen) throw() __asm__("__confstr_chk")
# 236
 __attribute((__warning__("confstr called with bigger length than size of destination buffer"))); 
# 239
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline ::size_t
# 240
 __attribute((__leaf__)) confstr(int __name, char *__buf, ::size_t __len) throw() 
# 241
{ 
# 242
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 243
{ 
# 244
if (!(0)) { 
# 245
return __confstr_chk(__name, __buf, __len, __builtin_object_size(__buf, 2 > 1)); }  
# 247
if (__builtin_object_size(__buf, 2 > 1) < __len) { 
# 248
return __confstr_chk_warn(__name, __buf, __len, __builtin_object_size(__buf, 2 > 1)); }  
# 249
}  
# 250
return __confstr_alias(__name, __buf, __len); 
# 251
} 
# 254
extern int __getgroups_chk(int __size, __gid_t  __list[], ::size_t __listlen) throw()
# 255
 __attribute((__warn_unused_result__)); 
# 256
extern int __getgroups_alias(int __size, __gid_t  __list[]) throw() __asm__("getgroups")
# 257
 __attribute((__warn_unused_result__)); 
# 258
extern int __getgroups_chk_warn(int __size, __gid_t  __list[], ::size_t __listlen) throw() __asm__("__getgroups_chk")
# 261
 __attribute((__warn_unused_result__)) __attribute((__warning__("getgroups called with bigger group count than what can fit into destination buffer"))); 
# 264
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 265
 __attribute((__leaf__)) getgroups(int __size, __gid_t __list[]) throw() 
# 266
{ 
# 267
if (__builtin_object_size(__list, 2 > 1) != ((::size_t)(-1))) 
# 268
{ 
# 269
if ((!(0)) || (__size < 0)) { 
# 270
return __getgroups_chk(__size, __list, __builtin_object_size(__list, 2 > 1)); }  
# 272
if ((__size * sizeof(__gid_t)) > __builtin_object_size(__list, 2 > 1)) { 
# 273
return __getgroups_chk_warn(__size, __list, __builtin_object_size(__list, 2 > 1)); }  
# 274
}  
# 275
return __getgroups_alias(__size, __list); 
# 276
} 
# 279
extern int __ttyname_r_chk(int __fd, char * __buf, ::size_t __buflen, ::size_t __nreal) throw()
# 280
 __attribute((__nonnull__(2))); 
# 281
extern int __ttyname_r_alias(int __fd, char * __buf, ::size_t __buflen) throw() __asm__("ttyname_r")
# 283
 __attribute((__nonnull__(2))); 
# 284
extern int __ttyname_r_chk_warn(int __fd, char * __buf, ::size_t __buflen, ::size_t __nreal) throw() __asm__("__ttyname_r_chk")
# 287
 __attribute((__nonnull__(2))) __attribute((__warning__("ttyname_r called with bigger buflen than size of destination buffer"))); 
# 290
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 291
 __attribute((__leaf__)) ttyname_r(int __fd, char *__buf, ::size_t __buflen) throw() 
# 292
{ 
# 293
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 294
{ 
# 295
if (!(0)) { 
# 296
return __ttyname_r_chk(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 298
if (__buflen > __builtin_object_size(__buf, 2 > 1)) { 
# 299
return __ttyname_r_chk_warn(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 300
}  
# 301
return __ttyname_r_alias(__fd, __buf, __buflen); 
# 302
} 
# 306
extern int __getlogin_r_chk(char * __buf, ::size_t __buflen, ::size_t __nreal)
# 307
 __attribute((__nonnull__(1))); 
# 308
extern int __getlogin_r_alias(char * __buf, ::size_t __buflen) __asm__("getlogin_r")
# 309
 __attribute((__nonnull__(1))); 
# 310
extern int __getlogin_r_chk_warn(char * __buf, ::size_t __buflen, ::size_t __nreal) __asm__("__getlogin_r_chk")
# 313
 __attribute((__nonnull__(1))) __attribute((__warning__("getlogin_r called with bigger buflen than size of destination buffer"))); 
# 316
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int 
# 317
getlogin_r(char *__buf, ::size_t __buflen) 
# 318
{ 
# 319
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 320
{ 
# 321
if (!(0)) { 
# 322
return __getlogin_r_chk(__buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 324
if (__buflen > __builtin_object_size(__buf, 2 > 1)) { 
# 325
return __getlogin_r_chk_warn(__buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 326
}  
# 327
return __getlogin_r_alias(__buf, __buflen); 
# 328
} 
# 333
extern int __gethostname_chk(char * __buf, ::size_t __buflen, ::size_t __nreal) throw()
# 334
 __attribute((__nonnull__(1))); 
# 335
extern int __gethostname_alias(char * __buf, ::size_t __buflen) throw() __asm__("gethostname")
# 336
 __attribute((__nonnull__(1))); 
# 337
extern int __gethostname_chk_warn(char * __buf, ::size_t __buflen, ::size_t __nreal) throw() __asm__("__gethostname_chk")
# 340
 __attribute((__nonnull__(1))) __attribute((__warning__("gethostname called with bigger buflen than size of destination buffer"))); 
# 343
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 344
 __attribute((__leaf__)) gethostname(char *__buf, ::size_t __buflen) throw() 
# 345
{ 
# 346
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 347
{ 
# 348
if (!(0)) { 
# 349
return __gethostname_chk(__buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 351
if (__buflen > __builtin_object_size(__buf, 2 > 1)) { 
# 352
return __gethostname_chk_warn(__buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 353
}  
# 354
return __gethostname_alias(__buf, __buflen); 
# 355
} 
# 360
extern int __getdomainname_chk(char * __buf, ::size_t __buflen, ::size_t __nreal) throw()
# 361
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 362
extern int __getdomainname_alias(char * __buf, ::size_t __buflen) throw() __asm__("getdomainname")
# 364
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)); 
# 365
extern int __getdomainname_chk_warn(char * __buf, ::size_t __buflen, ::size_t __nreal) throw() __asm__("__getdomainname_chk")
# 368
 __attribute((__nonnull__(1))) __attribute((__warn_unused_result__)) __attribute((__warning__("getdomainname called with bigger buflen than size of destination buffer"))); 
# 372
__attribute((__always_inline__)) __attribute((__gnu_inline__)) __attribute((__artificial__)) extern inline int
# 373
 __attribute((__leaf__)) getdomainname(char *__buf, ::size_t __buflen) throw() 
# 374
{ 
# 375
if (__builtin_object_size(__buf, 2 > 1) != ((::size_t)(-1))) 
# 376
{ 
# 377
if (!(0)) { 
# 378
return __getdomainname_chk(__buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 380
if (__buflen > __builtin_object_size(__buf, 2 > 1)) { 
# 381
return __getdomainname_chk_warn(__buf, __buflen, __builtin_object_size(__buf, 2 > 1)); }  
# 382
}  
# 383
return __getdomainname_alias(__buf, __buflen); 
# 384
} 
# 1154 "/usr/include/unistd.h" 3
}
# 46 "/usr/include/c++/5/cxxabi.h" 3
#pragma GCC visibility push ( default )
# 34 "/usr/include/x86_64-linux-gnu/c++/5/bits/cxxabi_tweaks.h" 3
namespace __cxxabiv1 { 
# 36
extern "C" {
# 46
__extension__ typedef long __guard __attribute((mode(__DI__))); 
# 49
typedef void __cxa_vec_ctor_return_type; 
# 52
typedef void __cxa_cdtor_return_type; 
# 55
}
# 56
}
# 58 "/usr/include/c++/5/cxxabi.h" 3
namespace __cxxabiv1 { 
# 60
extern "C" {
# 64
typedef __cxa_cdtor_return_type (*__cxa_cdtor_type)(void *); 
# 68
void *__cxa_vec_new(::size_t __element_count, ::size_t __element_size, ::size_t __padding_size, __cxa_cdtor_type __constructor, __cxa_cdtor_type __destructor); 
# 73
void *__cxa_vec_new2(::size_t __element_count, ::size_t __element_size, ::size_t __padding_size, __cxa_cdtor_type __constructor, __cxa_cdtor_type __destructor, void *(* __alloc)(::size_t), void (* __dealloc)(void *)); 
# 79
void *__cxa_vec_new3(::size_t __element_count, ::size_t __element_size, ::size_t __padding_size, __cxa_cdtor_type __constructor, __cxa_cdtor_type __destructor, void *(* __alloc)(::size_t), void (* __dealloc)(void *, ::size_t)); 
# 86
__cxa_vec_ctor_return_type __cxa_vec_ctor(void * __array_address, ::size_t __element_count, ::size_t __element_size, __cxa_cdtor_type __constructor, __cxa_cdtor_type __destructor); 
# 91
__cxa_vec_ctor_return_type __cxa_vec_cctor(void * __dest_array, void * __src_array, ::size_t __element_count, ::size_t __element_size, __cxa_cdtor_return_type (* __constructor)(void *, void *), __cxa_cdtor_type __destructor); 
# 98
void __cxa_vec_dtor(void * __array_address, ::size_t __element_count, ::size_t __element_size, __cxa_cdtor_type __destructor); 
# 102
void __cxa_vec_cleanup(void * __array_address, ::size_t __element_count, ::size_t __s, __cxa_cdtor_type __destructor) noexcept; 
# 107
void __cxa_vec_delete(void * __array_address, ::size_t __element_size, ::size_t __padding_size, __cxa_cdtor_type __destructor); 
# 111
void __cxa_vec_delete2(void * __array_address, ::size_t __element_size, ::size_t __padding_size, __cxa_cdtor_type __destructor, void (* __dealloc)(void *)); 
# 116
void __cxa_vec_delete3(void * __array_address, ::size_t __element_size, ::size_t __padding_size, __cxa_cdtor_type __destructor, void (* __dealloc)(void *, ::size_t)); 
# 121
int __cxa_guard_acquire(__guard *); 
# 124
void __cxa_guard_release(__guard *) noexcept; 
# 127
void __cxa_guard_abort(__guard *) noexcept; 
# 131
int __cxa_atexit(void (*)(void *), void *, void *) noexcept; 
# 134
int __cxa_finalize(void *); 
# 138
int __cxa_thread_atexit(void (*)(void *), void *, void *) noexcept; 
# 142
void __cxa_pure_virtual() __attribute((__noreturn__)); 
# 145
void __cxa_deleted_virtual() __attribute((__noreturn__)); 
# 149
void __cxa_bad_cast() __attribute((__noreturn__)); 
# 152
void __cxa_bad_typeid() __attribute((__noreturn__)); 
# 155
void __cxa_throw_bad_array_new_length() __attribute((__noreturn__)); 
# 198
char *__cxa_demangle(const char * __mangled_name, char * __output_buffer, ::size_t * __length, int * __status); 
# 202
}
# 203
}
# 210
namespace __cxxabiv1 { 
# 213
class __fundamental_type_info : public std::type_info { 
# 217
public: explicit __fundamental_type_info(const char *__n) : type_info(__n) { } 
# 220
virtual ~__fundamental_type_info(); 
# 221
}; 
# 224
class __array_type_info : public std::type_info { 
# 228
public: explicit __array_type_info(const char *__n) : type_info(__n) { } 
# 231
virtual ~__array_type_info(); 
# 232
}; 
# 235
class __function_type_info : public std::type_info { 
# 239
public: explicit __function_type_info(const char *__n) : type_info(__n) { } 
# 242
virtual ~__function_type_info(); 
# 247
protected: virtual bool __is_function_p() const; 
# 248
}; 
# 251
class __enum_type_info : public std::type_info { 
# 255
public: explicit __enum_type_info(const char *__n) : type_info(__n) { } 
# 258
virtual ~__enum_type_info(); 
# 259
}; 
# 262
class __pbase_type_info : public std::type_info { 
# 265
public: unsigned __flags; 
# 266
const type_info *__pointee; 
# 269
explicit __pbase_type_info(const char *__n, int __quals, const type_info *
# 270
__type) : type_info(__n), __flags(__quals), __pointee(__type) 
# 272
{ } 
# 275
virtual ~__pbase_type_info(); 
# 278
enum __masks { 
# 280
__const_mask = 1, 
# 281
__volatile_mask, 
# 282
__restrict_mask = 4, 
# 283
__incomplete_mask = 8, 
# 284
__incomplete_class_mask = 16
# 285
}; 
# 288
protected: __pbase_type_info(const __pbase_type_info &); 
# 291
__pbase_type_info &operator=(const __pbase_type_info &); 
# 295
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 299
inline virtual bool __pointer_catch(const __pbase_type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 301
}; 
# 304
inline bool __pbase_type_info::__pointer_catch(const __pbase_type_info *thrown_type, void **
# 305
thr_obj, unsigned 
# 306
outer) const 
# 307
{ 
# 308
return (__pointee)->__do_catch(thrown_type->__pointee, thr_obj, outer + (2)); 
# 309
} 
# 312
class __pointer_type_info : public __pbase_type_info { 
# 316
public: explicit __pointer_type_info(const char *__n, int __quals, const type_info *
# 317
__type) : __pbase_type_info(__n, __quals, __type) 
# 318
{ } 
# 322
virtual ~__pointer_type_info(); 
# 327
protected: virtual bool __is_pointer_p() const; 
# 330
virtual bool __pointer_catch(const __pbase_type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 332
}; 
# 334
class __class_type_info; 
# 337
class __pointer_to_member_type_info : public __pbase_type_info { 
# 340
public: __class_type_info *__context; 
# 343
explicit __pointer_to_member_type_info(const char *__n, int __quals, const type_info *
# 344
__type, __class_type_info *
# 345
__klass) : __pbase_type_info(__n, __quals, __type), __context(__klass) 
# 346
{ } 
# 349
virtual ~__pointer_to_member_type_info(); 
# 352
protected: __pointer_to_member_type_info(const __pointer_to_member_type_info &); 
# 355
__pointer_to_member_type_info &operator=(const __pointer_to_member_type_info &); 
# 359
virtual bool __pointer_catch(const __pbase_type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 361
}; 
# 364
class __base_class_type_info { 
# 367
public: const __class_type_info *__base_type; 
# 371
long __offset_flags; 
# 374
enum __offset_flags_masks { 
# 376
__virtual_mask = 1, 
# 377
__public_mask, 
# 378
__hwm_bit = 2, 
# 379
__offset_shift = 8
# 380
}; 
# 384
bool __is_virtual_p() const 
# 385
{ return (__offset_flags) & (__virtual_mask); } 
# 388
bool __is_public_p() const 
# 389
{ return (__offset_flags) & (__public_mask); } 
# 392
::ptrdiff_t __offset() const 
# 393
{ 
# 397
return (static_cast< ::ptrdiff_t>(__offset_flags)) >> (__offset_shift); 
# 398
} 
# 399
}; 
# 402
class __class_type_info : public std::type_info { 
# 406
public: explicit __class_type_info(const char *__n) : type_info(__n) { } 
# 409
virtual ~__class_type_info(); 
# 416
enum __sub_kind { 
# 419
__unknown, 
# 423
__not_contained, 
# 426
__contained_ambig, 
# 429
__contained_virtual_mask = 1, 
# 432
__contained_public_mask, 
# 435
__contained_mask = 4, 
# 437
__contained_private = 4, 
# 438
__contained_public = 6
# 439
}; 
# 441
struct __upcast_result; 
# 442
struct __dyncast_result; 
# 447
protected: virtual bool __do_upcast(const __class_type_info * __dst_type, void ** __obj_ptr) const; 
# 450
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 457
public: virtual bool __do_upcast(const __class_type_info * __dst, const void * __obj, __upcast_result &__restrict__ __result) const; 
# 467
inline __sub_kind __find_public_src(::ptrdiff_t __src2dst, const void * __obj_ptr, const __class_type_info * __src_type, const void * __src_ptr) const; 
# 479
virtual bool __do_dyncast(::ptrdiff_t __src2dst, __sub_kind __access_path, const __class_type_info * __dst_type, const void * __obj_ptr, const __class_type_info * __src_type, const void * __src_ptr, __dyncast_result & __result) const; 
# 489
virtual __sub_kind __do_find_public_src(::ptrdiff_t __src2dst, const void * __obj_ptr, const __class_type_info * __src_type, const void * __src_ptr) const; 
# 492
}; 
# 495
class __si_class_type_info : public __class_type_info { 
# 498
public: const __class_type_info *__base_type; 
# 501
explicit __si_class_type_info(const char *__n, const __class_type_info *__base) : __class_type_info(__n), __base_type(__base) 
# 502
{ } 
# 505
virtual ~__si_class_type_info(); 
# 508
protected: __si_class_type_info(const __si_class_type_info &); 
# 511
__si_class_type_info &operator=(const __si_class_type_info &); 
# 515
virtual bool __do_dyncast(::ptrdiff_t __src2dst, __sub_kind __access_path, const __class_type_info * __dst_type, const void * __obj_ptr, const __class_type_info * __src_type, const void * __src_ptr, __dyncast_result & __result) const; 
# 521
virtual __sub_kind __do_find_public_src(::ptrdiff_t __src2dst, const void * __obj_ptr, const __class_type_info * __src_type, const void * __sub_ptr) const; 
# 526
virtual bool __do_upcast(const __class_type_info * __dst, const void * __obj, __upcast_result &__restrict__ __result) const; 
# 528
}; 
# 531
class __vmi_class_type_info : public __class_type_info { 
# 534
public: unsigned __flags; 
# 535
unsigned __base_count; 
# 540
__base_class_type_info __base_info[1]; 
# 543
explicit __vmi_class_type_info(const char *__n, int ___flags) : __class_type_info(__n), __flags(___flags), __base_count((0)) 
# 544
{ } 
# 547
virtual ~__vmi_class_type_info(); 
# 550
enum __flags_masks { 
# 552
__non_diamond_repeat_mask = 1, 
# 553
__diamond_shaped_mask, 
# 554
__flags_unknown_mask = 16
# 555
}; 
# 560
protected: virtual bool __do_dyncast(::ptrdiff_t __src2dst, __sub_kind __access_path, const __class_type_info * __dst_type, const void * __obj_ptr, const __class_type_info * __src_type, const void * __src_ptr, __dyncast_result & __result) const; 
# 566
virtual __sub_kind __do_find_public_src(::ptrdiff_t __src2dst, const void * __obj_ptr, const __class_type_info * __src_type, const void * __src_ptr) const; 
# 571
virtual bool __do_upcast(const __class_type_info * __dst, const void * __obj, __upcast_result &__restrict__ __result) const; 
# 573
}; 
# 576
struct __cxa_exception; 
# 577
struct __cxa_refcounted_exception; 
# 578
struct __cxa_dependent_exception; 
# 579
struct __cxa_eh_globals; 
# 581
extern "C" {
# 592
void *__dynamic_cast(const void * __src_ptr, const __class_type_info * __src_type, const __class_type_info * __dst_type, ::ptrdiff_t __src2dst); 
# 605
__cxa_eh_globals *__cxa_get_globals() noexcept __attribute((const)); 
# 608
__cxa_eh_globals *__cxa_get_globals_fast() noexcept __attribute((const)); 
# 612
void *__cxa_allocate_exception(::size_t) noexcept; 
# 616
void __cxa_free_exception(void *) noexcept; 
# 620
void __cxa_throw(void *, std::type_info *, void (*)(void *))
# 621
 __attribute((__noreturn__)); 
# 625
void *__cxa_get_exception_ptr(void *) noexcept __attribute((__pure__)); 
# 628
void *__cxa_begin_catch(void *) noexcept; 
# 631
void __cxa_end_catch(); 
# 634
void __cxa_rethrow() __attribute((__noreturn__)); 
# 639
std::type_info *__cxa_current_exception_type() noexcept __attribute((__pure__)); 
# 645
__cxa_dependent_exception *__cxa_allocate_dependent_exception() noexcept; 
# 649
void __cxa_free_dependent_exception(__cxa_dependent_exception *) noexcept; 
# 651
}
# 655
class __foreign_exception { 
# 657
virtual ~__foreign_exception() throw(); 
# 658
virtual void __pure_dummy() = 0; 
# 659
}; 
# 661
}
# 683
namespace abi = __cxxabiv1;
# 685
namespace __gnu_cxx { 
# 699
class recursive_init_error : public std::exception { 
# 702
public: recursive_init_error() throw() { } 
# 703
virtual ~recursive_init_error() throw(); 
# 704
}; 
# 705
}
# 708
#pragma GCC visibility pop
# 44 "/home/zhengzhen/workspace/versapipe/timing.h"
class PointInTime { 
# 46
timeval tv; 
# 48
public: PointInTime() 
# 49
{ 
# 50
gettimeofday(&(tv), 0); 
# 51
} 
# 52
double operator-(const PointInTime &o) const 
# 53
{ 
# 54
return (((tv).tv_sec) - ((o.tv).tv_sec)) + ((((tv).tv_usec) - ((o.tv).tv_usec)) / (1000000.0)); 
# 55
} 
# 56
}; 
# 36 "/home/zhengzhen/workspace/versapipe/delay.cuh"
extern volatile float BigData[1024 * 1024]; 
# 38
template< int ITS, int REGS = 16> 
# 39
class DelayClock { 
# 43
public: static void delay() 
# 44
{int volatile ___ = 1;
# 67
::exit(___);}
#if 0
# 44
{ 
# 45
clock_t t = clock(); 
# 46
__threadfence_block(); 
# 48
float values[REGS - 2]; 
# 50
#pragma unroll
for (
# 50
int r = 0; r < REGS; ++r) { 
# 51
((values)[r]) = ((BigData)[(__device_builtin_variable_threadIdx.x) + (r * 32)]); }  
# 52
__threadfence_block(); 
# 54
#pragma unroll
for (
# 54
int r = 0; r < REGS; ++r) { 
# 55
((values)[r]) += (((values)[r]) * ((values)[r])); }  
# 56
__threadfence_block(); 
# 58
while (true) 
# 59
{ 
# 60
clock_t diff = clock() - t; 
# 61
if (diff > (ITS)) { 
# 62
break; }  
# 63
}  
# 65
#pragma unroll
for (
# 65
int r = 0; r < REGS; ++r) { 
# 66
((BigData)[(__device_builtin_variable_threadIdx.x) + (r * 32)]) = ((values)[r]); }  
# 67
} 
#endif
# 68 "/home/zhengzhen/workspace/versapipe/delay.cuh"
static std::__cxx11::string name() { return "DelayClock"; } 
# 69
static std::__cxx11::string performanceName() { return ("available Giga Cycles (" + std::to_string((long long)REGS)) + "regs)"; } 
# 70
static double performancePerSec(int executedThreads, double s) { return ((((1.0) * executedThreads) * (ITS)) / (1000000000.0)) / s; } 
# 71
}; 
# 72
template< int ITS> 
# 73
class DelayClock< ITS, 0>  { 
# 77
public: static void delay() 
# 78
{int volatile ___ = 1;
# 79
::exit(___);}
#if 0
# 78
{ 
# 79
} 
#endif
# 80 "/home/zhengzhen/workspace/versapipe/delay.cuh"
static std::__cxx11::string name() { return "DelayNone"; } 
# 81
static std::__cxx11::string performanceName() { return "Nothing"; } 
# 82
static double performancePerSec(int executedThreads, double s) { return (0.0); } 
# 83
}; 
# 85
template< int ITS, int REGS = 16> 
# 86
class DelayFMADS { 
# 90
public: static void delay() 
# 91
{int volatile ___ = 1;
# 107
::exit(___);}
#if 0
# 91
{ 
# 92
float values[REGS]; 
# 94
#pragma unroll
for (
# 94
int r = 0; r < REGS; ++r) { 
# 95
((values)[r]) = ((BigData)[(__device_builtin_variable_threadIdx.x) + (r * 32)]); }  
# 97
#pragma unroll
for (
# 97
int i = 0; i < (((ITS + REGS) - 1) / REGS); ++i) 
# 98
{ 
# 100
#pragma unroll
for (
# 100
int r = 0; r < REGS; ++r) { 
# 101
((values)[r]) += (((values)[r]) * ((values)[r])); }  
# 102
__threadfence_block(); 
# 103
}  
# 105
#pragma unroll
for (
# 105
int r = 0; r < REGS; ++r) { 
# 106
((BigData)[(__device_builtin_variable_threadIdx.x) + (r * 32)]) = ((values)[r]); }  
# 107
} 
#endif
# 108 "/home/zhengzhen/workspace/versapipe/delay.cuh"
static std::__cxx11::string name() { return "DelayFMADS"; } 
# 109
static std::__cxx11::string performanceName() { return ("GFLOPS (" + std::to_string((long long)REGS)) + "regs)"; } 
# 110
static double performancePerSec(int executedThreads, double s) { return ((((2.0) * executedThreads) * (ITS)) / (1000000000.0)) / s; } 
# 111
}; 
# 113
template< int ITS> 
# 114
class DelayFMADS< ITS, 0>  { 
# 118
public: static void delay() 
# 119
{int volatile ___ = 1;
# 120
::exit(___);}
#if 0
# 119
{ 
# 120
} 
#endif
# 121 "/home/zhengzhen/workspace/versapipe/delay.cuh"
static std::__cxx11::string name() { return "DelayNone"; } 
# 122
static std::__cxx11::string performanceName() { return "Nothing"; } 
# 123
static double performancePerSec(int executedThreads, double s) { return (0.0); } 
# 124
}; 
# 127
template< int ITS, int REGS = 16> 
# 128
class DelayMem { 
# 132
public: static void delay() 
# 133
{int volatile ___ = 1;
# 146
::exit(___);}
#if 0
# 133
{ 
# 134
float values[REGS]; 
# 136
#pragma unroll
for (
# 136
int r = 0; r < REGS; ++r) { 
# 137
((values)[r]) = ((BigData)[(__device_builtin_variable_threadIdx.x) + (r * 32)]); }  
# 139
#pragma unroll
for (
# 139
int i = 0; i < ((((ITS - 1) + REGS) - 1) / REGS); ++i) 
# 140
{ 
# 142
#pragma unroll
for (
# 142
int r = 0; r < REGS; ++r) { 
# 143
((BigData)[(__device_builtin_variable_threadIdx.x) + (r * 32)]) = (((values)[r]) * ((values)[r])); }  
# 144
__threadfence_block(); 
# 145
}  
# 146
} 
#endif
# 147 "/home/zhengzhen/workspace/versapipe/delay.cuh"
static std::__cxx11::string name() { return ((std::__cxx11::string)("DelayMem")); } 
# 148
static std::__cxx11::string performanceName() { return ("transfer rate GB/s(" + std::to_string((long long)REGS)) + "regs)"; } 
# 149
static double performancePerSec(int executedThreads, double s) { return ((((4.0) * executedThreads) * (ITS)) / (1000000000.0)) / s; } 
# 150
}; 
# 152
template< int ITS> 
# 153
class DelayMem< ITS, 0>  { 
# 157
public: static void delay() 
# 158
{int volatile ___ = 1;
# 159
::exit(___);}
#if 0
# 158
{ 
# 159
} 
#endif
# 160 "/home/zhengzhen/workspace/versapipe/delay.cuh"
static std::__cxx11::string name() { return "DelayNone"; } 
# 161
static std::__cxx11::string performanceName() { return "Nothing"; } 
# 162
static double performancePerSec(int executedThreads, double s) { return (0.0); } 
# 163
}; 
# 51 "/home/zhengzhen/workspace/versapipe/techniqueInterface.h"
template< class Technique, class FillFunc> 
# 52
class TechniqueWrapper { 
# 55
protected: TechniqueWrapper() { } 
# 56
TechniqueWrapper(const TechniqueWrapper &) { } 
# 57
TechniqueWrapper &operator=(const TechniqueWrapper &) { return *this; } 
# 58
~TechniqueWrapper() { } 
# 61
public: void init(); 
# 62
void fillQueue(int num); 
# 63
double execute(int phase = 0, double timelimit = 0); 
# 64
std::__cxx11::string name() const; 
# 65
void release(); 
# 67
int BlockSize(int phase = 0) const; 
# 68
int Blocks(int phase = 0) const; 
# 69
uint SharedMem(int phase = 0) const; 
# 70
}; 
# 72
template< template< int >  class LaunchTimelimitMicorSecondsTraits, class Technique, class FillFunc> 
# 73
class TechniqueTimedWrapper { 
# 76
protected: TechniqueTimedWrapper() { } 
# 77
TechniqueTimedWrapper(const TechniqueTimedWrapper &) { } 
# 78
TechniqueTimedWrapper &operator=(const TechniqueTimedWrapper &) { return *this; } 
# 79
~TechniqueTimedWrapper() { } 
# 82
public: void init(); 
# 83
void fillQueue(int num); 
# 84
double execute(int phase = 0); 
# 85
std::__cxx11::string name() const; 
# 86
void release(); 
# 88
int BlockSize(int phase = 0) const; 
# 89
int Blocks(int phase = 0) const; 
# 90
uint SharedMem(int phase = 0) const; 
# 91
}; 
# 94
struct technique_deleter { 
# 96
template< class Technique> void 
# 97
operator()(Technique *t) 
# 98
{ 
# 99
if (t) { 
# 100
(t->release()); }  
# 101
} 
# 102
}; 
# 39 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< template< class , int >  class TPhaseTraits, class NextOrig, int Phase, bool MatchPhase> struct PhaseProcInfoInter; 
# 45
template< template< class , int >  class TPhaseTraits, class NextOrig, int Phase> 
# 46
struct PhaseProcInfoInter< TPhaseTraits, NextOrig, Phase, true>  : public ProcInfo< typename NextOrig::Procedure, NextOrig::ProcedureId, PhaseProcInfoInter< TPhaseTraits, typename NextOrig::Next, Phase, TPhaseTraits< typename NextOrig::Next::Procedure, Phase> ::Active> >  { 
# 55
}; 
# 57
template< template< class , int >  class TPhaseTraits, class NextOrig, int Phase> 
# 58
struct PhaseProcInfoInter< TPhaseTraits, NextOrig, Phase, false>  : public PhaseProcInfoInter< TPhaseTraits, typename NextOrig::Next, Phase, TPhaseTraits< typename NextOrig::Next::Procedure, Phase> ::Active>  { 
# 67
}; 
# 69
template< template< class , int >  class TPhaseTraits, int Phase> 
# 70
struct PhaseProcInfoInter< TPhaseTraits, ProcInfoEnd, Phase, true>  : public ProcInfoEnd { 
# 76
}; 
# 78
template< template< class , int >  class TPhaseTraits, int Phase> 
# 79
struct PhaseProcInfoInter< TPhaseTraits, ProcInfoEnd, Phase, false>  : public ProcInfoEnd { 
# 85
}; 
# 87
template< class Priority, template< class , int >  class TPhaseTraits, class 
# 88
ProcedureInfoOrig, int Phase, bool MatchPhase> struct PhaseProcInfo; 
# 92
template< class Priority, template< class , int >  class TPhaseTraits, class ProcedureInfoOrig, int Phase> 
# 93
struct PhaseProcInfo< Priority, TPhaseTraits, ProcedureInfoOrig, Phase, true>  : public ProcInfoWithPriority< Priority, PhaseProcInfoInter< TPhaseTraits, ProcedureInfoOrig, Phase, true> >  { 
# 101
}; 
# 103
template< class TPriority, template< class , int >  class TPhaseTraits, class ProcedureInfoOrig, int Phase> 
# 104
struct PhaseProcInfo< TPriority, TPhaseTraits, ProcedureInfoOrig, Phase, false>  : public PhaseProcInfo< TPriority, TPhaseTraits, typename ProcedureInfoOrig::Next, Phase, TPhaseTraits< typename ProcedureInfoOrig::Next::Procedure, Phase> ::Active>  { 
# 113
}; 
# 115
template< class Priority, template< class , int >  class PhaseTraits, int Phase> 
# 116
struct PhaseProcInfo< Priority, PhaseTraits, ProcInfoEnd, Phase, true>  : public ProcInfoEnd { 
# 122
}; 
# 124
template< class Priority, template< class , int >  class PhaseTraits, int Phase> 
# 125
struct PhaseProcInfo< Priority, PhaseTraits, ProcInfoEnd, Phase, false>  : public ProcInfoEnd { 
# 132
}; 
# 138
template< template< class >  class InternalQueue, class ProcedureInfo, int Phase, int NumPhases> 
# 139
struct PhaseQueues { 
# 142
template< class TProc, int Phase_> 
# 143
class MyPhaseTraits : public ProcedureInfo::template PhaseTraits< TProc, Phase_>  { }; 
# 150
typedef PhaseProcInfo< typename ProcedureInfo::template Priority< Phase> , MyPhaseTraits, ProcedureInfo, Phase, ProcedureInfo::template PhaseTraits< typename ProcedureInfo::Procedure, Phase> ::Active>  TProcInfo; 
# 153
typedef InternalQueue< PhaseProcInfo< typename ProcedureInfo::template Priority< Phase> , MyPhaseTraits, ProcedureInfo, Phase, ProcedureInfo::template PhaseTraits< typename ProcedureInfo::Procedure, Phase> ::Active> >  TQueue; 
# 155
TQueue q; 
# 158
template< class Visitor> bool visit(Visitor & visitor); 
# 161
template< class Visitor> static bool staticVisit(Visitor & visitor); 
# 165
void printName() 
# 166
{int volatile ___ = 1;
# 168
::exit(___);}
#if 0
# 166
{ 
# 167
printf("%s\n", __PRETTY_FUNCTION__); 
# 168
} 
#endif
# 171 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> int 
# 172
size() 
# 173
{int volatile ___ = 1;
# 176
::exit(___);}
#if 0
# 173
{ 
# 175
return ((q).template size< PROCEDURE> ()); 
# 176
} 
#endif
# 179 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> int 
# 180
capacity() 
# 181
{int volatile ___ = 1;
# 184
::exit(___);}
#if 0
# 181
{ 
# 183
return ((q).template capacity< PROCEDURE> ()); 
# 184
} 
#endif
# 188 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> bool 
# 189
isFill(float portion) 
# 190
{int volatile ___ = 1;(void)portion;
# 193
::exit(___);}
#if 0
# 190
{ 
# 192
return ((q).template isFill< PROCEDURE> (portion)); 
# 193
} 
#endif
# 195 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void init() 
# 196
{int volatile ___ = 1;
# 199
::exit(___);}
#if 0
# 196
{ 
# 197
((q).init()); 
# 199
} 
#endif
# 201 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void record() 
# 202
{int volatile ___ = 1;
# 205
::exit(___);}
#if 0
# 202
{ 
# 203
((q).record()); 
# 205
} 
#endif
# 207 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void reset() 
# 208
{int volatile ___ = 1;
# 211
::exit(___);}
#if 0
# 208
{ 
# 209
((q).reset()); 
# 211
} 
#endif
# 213 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> bool 
# 214
enqueueInitial(typename PROCEDURE::ExpectedData data, int phase = 0) 
# 215
{int volatile ___ = 1;(void)data;(void)phase;
# 222
::exit(___);}
#if 0
# 215
{ 
# 220
return ((q).template enqueueInitial< PROCEDURE> (data)); 
# 222
} 
#endif
# 224 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int Threads, class PROCEDURE> bool 
# 225
enqueueInitial(typename PROCEDURE::ExpectedData *data, int phase = 0) 
# 226
{int volatile ___ = 1;(void)data;(void)phase;
# 230
::exit(___);}
#if 0
# 226
{ 
# 228
return ((q).template enqueueInitial< Threads, PROCEDURE> (data)); 
# 230
} 
#endif
# 232 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE, int CurrentPhase> bool 
# 233
enqueue(typename PROCEDURE::ExpectedData data, int phase = 0) 
# 234
{int volatile ___ = 1;(void)data;(void)phase;
# 246
::exit(___);}
#if 0
# 234
{ 
# 237
{ 
# 240
if (Phase == CurrentPhase) { 
# 241
return ((q).template enqueue< PROCEDURE> (data)); } else { 
# 243
return ((q).template enqueueInitial< PROCEDURE> (data)); }  
# 244
} 
# 246
} 
#endif
# 248 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int threads, class PROCEDURE, int CurrentPhase> bool 
# 249
enqueue(typename PROCEDURE::ExpectedData *data, int phase = 0) 
# 250
{int volatile ___ = 1;(void)data;(void)phase;
# 260
::exit(___);}
#if 0
# 250
{ 
# 253
{ 
# 254
if (Phase == CurrentPhase) { 
# 255
return ((q).template enqueue< threads, PROCEDURE> (data)); } else { 
# 257
return ((q).template enqueueInitial< threads, PROCEDURE> (data)); }  
# 258
} 
# 260
} 
#endif
# 262 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure, int CurrentPhase> int 
# 263
dequeue(void *&data, int *&procId, int maxShared = -1) 
# 264
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 268
::exit(___);}
#if 0
# 264
{ 
# 266
return ((q).template dequeue< MultiProcedure> (data, procId, maxShared)); 
# 268
} 
#endif
# 270 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure, int CurrentPhase> int 
# 271
dequeueSelected(void *&data, int procId, int maxNum = -1) 
# 272
{int volatile ___ = 1;(void)data;(void)procId;(void)maxNum;
# 276
::exit(___);}
#if 0
# 272
{ 
# 274
return ((q).template dequeueSelected< MultiProcedure> (data, procId, maxNum)); 
# 276
} 
#endif
# 279 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure, int CurrentPhase> int 
# 280
dequeueStartRead(void *&data, int *&procId, int maxShared = -1) 
# 281
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 285
::exit(___);}
#if 0
# 281
{ 
# 283
return ((q).template dequeueStartRead< MultiProcedure> (data, procId, maxShared)); 
# 285
} 
#endif
# 288 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure, int CurrentPhase> int 
# 289
dequeueStartReadSelected(void *&data, int *&procId, int maxShared = -1) 
# 290
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 304
::exit(___);}
#if 0
# 290
{ 
# 302
return ((q).template dequeueStartReadSelected< MultiProcedure> (data, procId, maxShared)); 
# 304
} 
#endif
# 306 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE, int CurrentPhase> int 
# 307
reserveRead(int maxNum = -1) 
# 308
{int volatile ___ = 1;(void)maxNum;
# 313
::exit(___);}
#if 0
# 308
{ 
# 311
return ((q).template reserveRead< PROCEDURE> (maxNum)); 
# 313
} 
#endif
# 314 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE, int CurrentPhase> int 
# 315
startRead(void *&data, int num) 
# 316
{int volatile ___ = 1;(void)data;(void)num;
# 320
::exit(___);}
#if 0
# 316
{ 
# 318
return ((q).template startRead< PROCEDURE> (data, num)); 
# 320
} 
#endif
# 321 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE, int CurrentPhase> void 
# 322
finishRead(int id, int num) 
# 323
{int volatile ___ = 1;(void)id;(void)num;
# 327
::exit(___);}
#if 0
# 323
{ 
# 325
return ((q).template finishRead< PROCEDURE> (id, num)); 
# 327
} 
#endif
# 330 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
bool isEmpty() 
# 331
{int volatile ___ = 1;
# 333
::exit(___);}
#if 0
# 331
{ 
# 332
return ((q).isEmpty()); 
# 333
} 
#endif
# 335 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 336
numEntries(int *counts) 
# 337
{int volatile ___ = 1;(void)counts;
# 341
::exit(___);}
#if 0
# 337
{ 
# 339
return ((q).numEntries(counts)); 
# 341
} 
#endif
# 343 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 344
workerStart() 
# 345
{int volatile ___ = 1;
# 349
::exit(___);}
#if 0
# 345
{ 
# 347
return ((q).workerStart()); 
# 349
} 
#endif
# 350 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 351
workerMaintain() 
# 352
{int volatile ___ = 1;
# 356
::exit(___);}
#if 0
# 352
{ 
# 354
return ((q).workerMaintain()); 
# 356
} 
#endif
# 357 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 358
workerEnd() 
# 359
{int volatile ___ = 1;
# 363
::exit(___);}
#if 0
# 359
{ 
# 361
return ((q).workerEnd()); 
# 363
} 
#endif
# 364 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 365
globalMaintain() 
# 366
{int volatile ___ = 1;
# 370
::exit(___);}
#if 0
# 366
{ 
# 368
return ((q).globalMaintain()); 
# 370
} 
#endif
# 371 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
}; 
# 374
template< template< class >  class InternalQueue, class ProcedureInfo, int EndPhase> 
# 375
struct PhaseQueues< InternalQueue, ProcedureInfo, EndPhase, EndPhase>  { 
# 377
void printName() 
# 378
{int volatile ___ = 1;
# 380
::exit(___);}
#if 0
# 378
{ 
# 379
printf("%s\n", __PRETTY_FUNCTION__); 
# 380
} 
#endif
# 383 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> int 
# 384
size() 
# 385
{int volatile ___ = 1;
# 387
::exit(___);}
#if 0
# 385
{ 
# 386
return 0; 
# 387
} 
#endif
# 390 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> int 
# 391
capacity() 
# 392
{int volatile ___ = 1;
# 394
::exit(___);}
#if 0
# 392
{ 
# 393
return 0; 
# 394
} 
#endif
# 399 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> bool 
# 400
isFill(float portion) 
# 401
{int volatile ___ = 1;(void)portion;
# 403
::exit(___);}
#if 0
# 401
{ 
# 402
return true; 
# 403
} 
#endif
# 406 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void init() 
# 407
{int volatile ___ = 1;::exit(___);}
#if 0
# 407
{ } 
#endif
# 408 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void record() 
# 409
{int volatile ___ = 1;::exit(___);}
#if 0
# 409
{ } 
#endif
# 410 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void reset() 
# 411
{int volatile ___ = 1;::exit(___);}
#if 0
# 411
{ } 
#endif
# 413 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class Visitor> bool 
# 414
visit(Visitor &visitor) 
# 415
{int volatile ___ = 1;(void)visitor;
# 417
::exit(___);}
#if 0
# 415
{ 
# 416
return false; 
# 417
} 
#endif
# 419 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class Visitor> static bool 
# 420
staticVisit(Visitor &visitor) 
# 421
{ 
# 422
return false; 
# 423
} 
# 425
template< class PROCEDURE> bool 
# 426
enqueueInitial(typename PROCEDURE::ExpectedData data, int phase = 0) 
# 427
{int volatile ___ = 1;(void)data;(void)phase;
# 429
::exit(___);}
#if 0
# 427
{ 
# 428
return false; 
# 429
} 
#endif
# 431 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int Threads, class PROCEDURE> bool 
# 432
enqueueInitial(typename PROCEDURE::ExpectedData *data, int phase = 0) 
# 433
{int volatile ___ = 1;(void)data;(void)phase;
# 435
::exit(___);}
#if 0
# 433
{ 
# 434
return false; 
# 435
} 
#endif
# 437 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE, int CurrentPhase> bool 
# 438
enqueue(typename PROCEDURE::ExpectedData data, int phase = 0) 
# 439
{int volatile ___ = 1;(void)data;(void)phase;
# 441
::exit(___);}
#if 0
# 439
{ 
# 440
return false; 
# 441
} 
#endif
# 443 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int threads, class PROCEDURE, int CurrentPhase> bool 
# 444
enqueue(typename PROCEDURE::ExpectedData *data, int phase = 0) 
# 445
{int volatile ___ = 1;(void)data;(void)phase;
# 447
::exit(___);}
#if 0
# 445
{ 
# 446
return false; 
# 447
} 
#endif
# 449 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure, int CurrentPhase> int 
# 450
dequeue(void *&data, int *&procId, int maxShared) 
# 451
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 453
::exit(___);}
#if 0
# 451
{ 
# 452
return 0; 
# 453
} 
#endif
# 455 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure, int CurrentPhase> int 
# 456
dequeueSelected(void *&data, int procId, int maxNum) 
# 457
{int volatile ___ = 1;(void)data;(void)procId;(void)maxNum;
# 459
::exit(___);}
#if 0
# 457
{ 
# 458
return 0; 
# 459
} 
#endif
# 461 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure, int CurrentPhase> int 
# 462
dequeueStartRead(void *&data, int *&procId, int maxShared) 
# 463
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 465
::exit(___);}
#if 0
# 463
{ 
# 464
return 0; 
# 465
} 
#endif
# 467 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure, int CurrentPhase> int 
# 468
dequeueStartReadSelected(void *&data, int *&procId, int maxShared) 
# 469
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 472
::exit(___);}
#if 0
# 469
{ 
# 471
return 0; 
# 472
} 
#endif
# 475 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE, int CurrentPhase> int 
# 476
reserveRead(int maxNum) 
# 477
{int volatile ___ = 1;(void)maxNum;
# 480
::exit(___);}
#if 0
# 477
{ 
# 479
return 0; 
# 480
} 
#endif
# 481 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE, int CurrentPhase> int 
# 482
startRead(void *&data, int num) 
# 483
{int volatile ___ = 1;(void)data;(void)num;
# 485
::exit(___);}
#if 0
# 483
{ 
# 484
return -1; 
# 485
} 
#endif
# 487 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE, int CurrentPhase> void 
# 488
finishRead(int id, int num) 
# 489
{int volatile ___ = 1;(void)id;(void)num;::exit(___);}
#if 0
# 489
{ } 
#endif
# 492 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
bool isEmpty() 
# 493
{int volatile ___ = 1;
# 495
::exit(___);}
#if 0
# 493
{ 
# 494
return true; 
# 495
} 
#endif
# 497 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 498
numEntries(int *counts) 
# 499
{int volatile ___ = 1;(void)counts;::exit(___);}
#if 0
# 499
{ } 
#endif
# 501 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 502
workerStart() 
# 503
{int volatile ___ = 1;::exit(___);}
#if 0
# 503
{ } 
#endif
# 504 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 505
workerMaintain() 
# 506
{int volatile ___ = 1;::exit(___);}
#if 0
# 506
{ } 
#endif
# 507 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 508
workerEnd() 
# 509
{int volatile ___ = 1;::exit(___);}
#if 0
# 509
{ } 
#endif
# 510 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int CurrentPhase> void 
# 511
globalMaintain() 
# 512
{int volatile ___ = 1;::exit(___);}
#if 0
# 512
{ } 
#endif
# 514 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
}; 
# 517
template< class TProcedureInfo, template< class >  class TInternalQueue, class TMultiPhaseQueue = void> 
# 518
class MultiPhaseQueue { 
# 523
public: 
# 522
template< class ProcInfo> 
# 523
class InternalQueue : public TInternalQueue< ProcInfo>  { }; 
# 525
typedef TProcedureInfo ProcedureInfo; 
# 527
typedef PhaseQueues< InternalQueue, TProcedureInfo, 0, TProcedureInfo::NumPhases>  MPhaseQueues; 
# 528
MPhaseQueues qs; 
# 530
template< class Visitor> bool 
# 531
visit(Visitor &visitor) 
# 532
{int volatile ___ = 1;(void)visitor;
# 534
::exit(___);}
#if 0
# 532
{ 
# 533
return ((qs).template visit< Visitor> (visitor)); 
# 534
} 
#endif
# 536 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class Visitor> static bool 
# 537
staticVisit(Visitor &visitor) 
# 538
{ 
# 539
return PhaseQueues< InternalQueue, TProcedureInfo, 0, TProcedureInfo::NumPhases> ::template staticVisit< Visitor> (visitor); 
# 540
} 
# 543
void init() 
# 544
{int volatile ___ = 1;
# 546
::exit(___);}
#if 0
# 544
{ 
# 545
((qs).init()); 
# 546
} 
#endif
# 548 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void record() 
# 549
{int volatile ___ = 1;
# 551
::exit(___);}
#if 0
# 549
{ 
# 550
((qs).record()); 
# 551
} 
#endif
# 552 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void reset() 
# 553
{int volatile ___ = 1;
# 555
::exit(___);}
#if 0
# 553
{ 
# 554
((qs).reset()); 
# 555
} 
#endif
# 558 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
static std::__cxx11::string name() 
# 559
{ 
# 560
return ((std::__cxx11::string)("MultiPhaseQueue")) + InternalQueue< TProcedureInfo> ::name(); 
# 561
} 
# 563
void printName() 
# 564
{int volatile ___ = 1;
# 566
::exit(___);}
#if 0
# 564
{ 
# 565
printf("%s\n", __PRETTY_FUNCTION__); 
# 566
} 
#endif
# 567 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
}; 
# 572
template< class MultiPhaseInstance, int CurrentPhase> 
# 573
class CurrentMultiphaseQueue : public MultiPhaseInstance { 
# 576
public: static const int Phase = CurrentPhase; 
# 578
void printName() 
# 579
{int volatile ___ = 1;
# 581
::exit(___);}
#if 0
# 579
{ 
# 580
printf("%s\n", __PRETTY_FUNCTION__); 
# 581
} 
#endif
# 584 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> int 
# 585
size() 
# 586
{int volatile ___ = 1;
# 588
::exit(___);}
#if 0
# 586
{ 
# 587
return (MultiPhaseInstance::qs.template size< PROCEDURE> ()); 
# 588
} 
#endif
# 591 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> int 
# 592
capacity() 
# 593
{int volatile ___ = 1;
# 595
::exit(___);}
#if 0
# 593
{ 
# 594
return (MultiPhaseInstance::qs.template capacity< PROCEDURE> ()); 
# 595
} 
#endif
# 599 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> bool 
# 600
isFill(float portion) 
# 601
{int volatile ___ = 1;(void)portion;
# 603
::exit(___);}
#if 0
# 601
{ 
# 602
return (MultiPhaseInstance::qs.template isFill< PROCEDURE> (portion)); 
# 603
} 
#endif
# 605 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class TProc, int Phase> 
# 606
class MyPhaseTraits : public MultiPhaseInstance::ProcedureInfo::template PhaseTraits< TProc, Phase>  { }; 
# 613
typedef PhaseProcInfo< typename MultiPhaseInstance::ProcedureInfo::template Priority< Phase> , MyPhaseTraits, typename MultiPhaseInstance::ProcedureInfo, Phase, MultiPhaseInstance::ProcedureInfo::template PhaseTraits< typename MultiPhaseInstance::ProcedureInfo::Procedure, Phase> ::Active>  CurrentPhaseProcInfo; 
# 625
static const bool needTripleCall = (MultiPhaseInstance::template InternalQueue< PhaseProcInfo< typename MultiPhaseInstance::ProcedureInfo::template Priority< Phase> , MyPhaseTraits, typename MultiPhaseInstance::ProcedureInfo, Phase, MultiPhaseInstance::ProcedureInfo::template PhaseTraits< typename MultiPhaseInstance::ProcedureInfo::Procedure, Phase> ::Active> > ::needTripleCall); 
# 626
static const bool supportReuseInit = (MultiPhaseInstance::template InternalQueue< PhaseProcInfo< typename MultiPhaseInstance::ProcedureInfo::template Priority< Phase> , MyPhaseTraits, typename MultiPhaseInstance::ProcedureInfo, Phase, MultiPhaseInstance::ProcedureInfo::template PhaseTraits< typename MultiPhaseInstance::ProcedureInfo::Procedure, Phase> ::Active> > ::supportReuseInit); 
# 627
static const int globalMaintainMinThreads = (MultiPhaseInstance::template InternalQueue< PhaseProcInfo< typename MultiPhaseInstance::ProcedureInfo::template Priority< Phase> , MyPhaseTraits, typename MultiPhaseInstance::ProcedureInfo, Phase, MultiPhaseInstance::ProcedureInfo::template PhaseTraits< typename MultiPhaseInstance::ProcedureInfo::Procedure, Phase> ::Active> > ::globalMaintainMinThreads); 
# 628
static int globalMaintainSharedMemory(int Threads) { return MultiPhaseInstance::template InternalQueue< PhaseProcInfo< typename MultiPhaseInstance::ProcedureInfo::template Priority< Phase> , MyPhaseTraits, typename MultiPhaseInstance::ProcedureInfo, Phase, MultiPhaseInstance::ProcedureInfo::template PhaseTraits< typename MultiPhaseInstance::ProcedureInfo::Procedure, Phase> ::Active> > ::globalMaintainSharedMemory(Threads); } 
# 629
static const int requiredShared = (MultiPhaseInstance::template InternalQueue< PhaseProcInfo< typename MultiPhaseInstance::ProcedureInfo::template Priority< Phase> , MyPhaseTraits, typename MultiPhaseInstance::ProcedureInfo, Phase, MultiPhaseInstance::ProcedureInfo::template PhaseTraits< typename MultiPhaseInstance::ProcedureInfo::Procedure, Phase> ::Active> > ::requiredShared); 
# 632
template< class PROCEDURE> bool 
# 633
enqueueInitial(typename PROCEDURE::ExpectedData data, int phase = 0) 
# 634
{int volatile ___ = 1;(void)data;(void)phase;
# 637
::exit(___);}
#if 0
# 634
{ 
# 636
return (MultiPhaseInstance::qs.template enqueueInitial< PROCEDURE> (data, phase)); 
# 637
} 
#endif
# 639 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int threads, class PROCEDURE> bool 
# 640
enqueueInitial(typename PROCEDURE::ExpectedData *data, int phase = 0) 
# 641
{int volatile ___ = 1;(void)data;(void)phase;
# 643
::exit(___);}
#if 0
# 641
{ 
# 642
return (MultiPhaseInstance::qs.template enqueueInitial< threads, PROCEDURE> (data, phase)); 
# 643
} 
#endif
# 645 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> bool 
# 646
enqueue(typename PROCEDURE::ExpectedData data, int phase = 0) 
# 647
{int volatile ___ = 1;(void)data;(void)phase;
# 649
::exit(___);}
#if 0
# 647
{ 
# 648
return (MultiPhaseInstance::qs.template enqueue< PROCEDURE, CurrentPhase> (data, phase)); 
# 649
} 
#endif
# 651 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< int threads, class PROCEDURE> bool 
# 652
enqueue(typename PROCEDURE::ExpectedData *data, int phase = 0) 
# 653
{int volatile ___ = 1;(void)data;(void)phase;
# 655
::exit(___);}
#if 0
# 653
{ 
# 654
return (MultiPhaseInstance::qs.template enqueue< threads, PROCEDURE, CurrentPhase> (data, phase)); 
# 655
} 
#endif
# 657 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure> int 
# 658
dequeue(void *&data, int *&procId, int maxShared = -1) 
# 659
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 661
::exit(___);}
#if 0
# 659
{ 
# 660
return (MultiPhaseInstance::qs.template dequeue< MultiProcedure, CurrentPhase> (data, procId, maxShared)); 
# 661
} 
#endif
# 663 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure> int 
# 664
dequeueSelected(void *&data, int procId, int maxNum = -1) 
# 665
{int volatile ___ = 1;(void)data;(void)procId;(void)maxNum;
# 667
::exit(___);}
#if 0
# 665
{ 
# 666
return (MultiPhaseInstance::qs.template dequeueSelected< MultiProcedure, CurrentPhase> (data, procId, maxNum)); 
# 667
} 
#endif
# 670 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure> int 
# 671
dequeueStartRead(void *&data, int *&procId, int maxShared = -1) 
# 672
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 674
::exit(___);}
#if 0
# 672
{ 
# 673
return (MultiPhaseInstance::qs.template dequeueStartRead< MultiProcedure, CurrentPhase> (data, procId, maxShared)); 
# 674
} 
#endif
# 677 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< bool MultiProcedure> int 
# 678
dequeueStartReadSelected(void *&data, int *&procId, int maxShared = -1) 
# 679
{int volatile ___ = 1;(void)data;(void)procId;(void)maxShared;
# 698
::exit(___);}
#if 0
# 679
{ 
# 696
return (MultiPhaseInstance::qs.template dequeueStartReadSelected< MultiProcedure, CurrentPhase> (data, procId, maxShared)); 
# 698
} 
#endif
# 701 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> int 
# 702
reserveRead(int maxNum = -1) 
# 703
{int volatile ___ = 1;(void)maxNum;
# 706
::exit(___);}
#if 0
# 703
{ 
# 705
return (MultiPhaseInstance::qs.template reserveRead< PROCEDURE, CurrentPhase> (maxNum)); 
# 706
} 
#endif
# 707 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> int 
# 708
startRead(void *&data, int num) 
# 709
{int volatile ___ = 1;(void)data;(void)num;
# 711
::exit(___);}
#if 0
# 709
{ 
# 710
return (MultiPhaseInstance::qs.template startRead< PROCEDURE, CurrentPhase> (data, num)); 
# 711
} 
#endif
# 712 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< class PROCEDURE> void 
# 713
finishRead(int id, int num) 
# 714
{int volatile ___ = 1;(void)id;(void)num;
# 716
::exit(___);}
#if 0
# 714
{ 
# 715
return (MultiPhaseInstance::qs.template finishRead< PROCEDURE, CurrentPhase> (id, num)); 
# 716
} 
#endif
# 719 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
bool isEmpty() 
# 720
{int volatile ___ = 1;
# 722
::exit(___);}
#if 0
# 720
{ 
# 721
return (MultiPhaseInstance::qs.isEmpty)(); 
# 722
} 
#endif
# 724 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void numEntries(int *counts) 
# 725
{int volatile ___ = 1;(void)counts;
# 727
::exit(___);}
#if 0
# 725
{ 
# 726
return (MultiPhaseInstance::qs.template numEntries< CurrentPhase> (counts)); 
# 727
} 
#endif
# 729 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void workerStart() 
# 730
{int volatile ___ = 1;
# 732
::exit(___);}
#if 0
# 730
{ 
# 731
return (MultiPhaseInstance::qs.template workerStart< CurrentPhase> ()); 
# 732
} 
#endif
# 733 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void workerMaintain() 
# 734
{int volatile ___ = 1;
# 736
::exit(___);}
#if 0
# 734
{ 
# 735
return (MultiPhaseInstance::qs.template workerMaintain< CurrentPhase> ()); 
# 736
} 
#endif
# 737 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void workerEnd() 
# 738
{int volatile ___ = 1;
# 740
::exit(___);}
#if 0
# 738
{ 
# 739
return (MultiPhaseInstance::qs.template workerEnd< CurrentPhase> ()); 
# 740
} 
#endif
# 741 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
void globalMaintain() 
# 742
{int volatile ___ = 1;
# 744
::exit(___);}
#if 0
# 742
{ 
# 743
return (MultiPhaseInstance::qs.template globalMaintain< CurrentPhase> ()); 
# 744
} 
#endif
# 745 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
}; 
# 750
template< template< class >  class InternalQueue, class ProcedureInfo, int Phase, int NumPhases> 
# 751
template< class Visitor> bool 
# 752
PhaseQueues< InternalQueue, ProcedureInfo, Phase, NumPhases> ::visit(Visitor &visitor) 
# 753
{int volatile ___ = 1;(void)visitor;
# 758
::exit(___);}
#if 0
# 753
{ 
# 754
typedef CurrentMultiphaseQueue< MultiPhaseQueue< ProcedureInfo, InternalQueue> , Phase>  VisibleQ; 
# 755
if (!(visitor.template visit< TProcInfo, CurrentMultiphaseQueue< MultiPhaseQueue< ProcedureInfo, InternalQueue> , Phase> , Phase> (q))) { 
# 756
return false; }  
# 757
return true; 
# 758
} 
#endif
# 760 "/home/zhengzhen/workspace/versapipe/queuingMultiPhase.cuh"
template< template< class >  class InternalQueue, class ProcedureInfo, int Phase, int NumPhases> 
# 761
template< class Visitor> bool 
# 762
PhaseQueues< InternalQueue, ProcedureInfo, Phase, NumPhases> ::staticVisit(Visitor &visitor) 
# 763
{ 
# 764
typedef CurrentMultiphaseQueue< MultiPhaseQueue< ProcedureInfo, InternalQueue> , Phase>  VisibleQ; 
# 765
if (!(visitor.template visit< TProcInfo, CurrentMultiphaseQueue< MultiPhaseQueue< ProcedureInfo, InternalQueue> , Phase> , Phase> ())) { 
# 766
return false; }  
# 767
return true; 
# 768
} 
# 56 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
int streamIndex; 
# 59
namespace SegmentedStorage { 
# 61
void checkReinitStorage(); 
# 62
}
# 69
template< int type> struct UserQueueType; 
# 72
template< class A> void 
# 73
printClassName() 
# 74
{ 
# 75
int status; 
# 76
printf("%s\n", abi::__cxa_demangle(typeid(A).name(), 0, 0, &status)); 
# 77
} 
# 80
extern void *queuePointers[64]; 
# 82
namespace Megakernel { 
# 86
__attribute__((unused)) inline uint zz_smid() 
# 87
{int volatile ___ = 1;
# 91
::exit(___);}
#if 0
# 87
{ 
# 88
uint mysmid; 
# 89
__asm__("mov.u32 %0, %smid;" : "=r" (mysmid) :); 
# 90
return mysmid; 
# 91
} 
#endif
# 94 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
cudaStream_t streamArray[64]; 
# 96
enum MegakernelStopCriteria { 
# 99
EmptyQueue, 
# 103
ShutdownIndicator
# 104
}; 
# 107
extern volatile int doneCounter[64]; 
# 108
extern volatile int endCounter[64]; 
# 111
extern volatile int sm_flag[64 * 50]; 
# 114
extern int block_count[64 * 50]; 
# 116
extern int group_done_flag[64]; 
# 121
extern int taskCountArray[64]; 
# 123
extern int resultCounter[64]; 
# 125
template< class InitProc, class Q> static void 
# 126
__wrapper__device_stub_initData(Q *&q, int &num) {exit(1);}
#if 0
# 127
{ 
# 128
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 129
for (; id < num; id += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) 
# 130
{ 
# 131
InitProc::template init< Q> (q, id); 
# 132
}  
# 133
} 
#endif
# 125 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class InitProc, class Q> void 
# 126
initData(Q *q, int num) 
# 127
{__wrapper__device_stub_initData<InitProc,Q>(q,num);
# 133
return;}
#if 0
# 127
{ 
# 128
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 129
for (; id < num; id += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) 
# 130
{ 
# 131
InitProc::template init< Q> (q, id); 
# 132
}  
# 133
} 
#endif
# 136 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class InitProc, class Q, class ExpectedData> static void 
# 137
__wrapper__device_stub_initData(Q *&q, int &num, ExpectedData *&data) {exit(1);}
#if 0
# 138
{ 
# 140
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 141
for (; id < num; id += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) 
# 142
{ 
# 143
InitProc::template init< Q> (q, id, data); 
# 147
}  
# 148
} 
#endif
# 136 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class InitProc, class Q, class ExpectedData> void 
# 137
initData(Q *q, int num, ExpectedData *data) 
# 138
{__wrapper__device_stub_initData<InitProc,Q,ExpectedData>(q,num,data);
# 148
return;}
#if 0
# 138
{ 
# 140
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 141
for (; id < num; id += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) 
# 142
{ 
# 143
InitProc::template init< Q> (q, id, data); 
# 147
}  
# 148
} 
#endif
# 150 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class Q> static void 
# 151
__wrapper__device_stub_recordData(Q *&q) {exit(1);}
#if 0
# 152
{ 
# 153
(q->record()); 
# 154
} 
#endif
# 150 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class Q> void 
# 151
recordData(Q *q) 
# 152
{__wrapper__device_stub_recordData<Q>(q);
# 154
return;}
#if 0
# 152
{ 
# 153
(q->record()); 
# 154
} 
#endif
# 156 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class Q> static void 
# 157
__wrapper__device_stub_resetData(Q *&q) {exit(1);}
#if 0
# 158
{ 
# 159
(q->reset()); 
# 160
} 
#endif
# 156 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class Q> void 
# 157
resetData(Q *q) 
# 158
{__wrapper__device_stub_resetData<Q>(q);
# 160
return;}
#if 0
# 158
{ 
# 159
(q->reset()); 
# 160
} 
#endif
# 162 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class Q, class ProcInfo, class PROC, class CUSTOM, bool Itemized, bool MultiElement> class FuncCaller; 
# 167
template< class Q, class ProcInfo, class PROC, class CUSTOM> 
# 168
class FuncCaller< Q, ProcInfo, PROC, CUSTOM, false, false>  { 
# 172
public: static void call(Q *queue, void *data, int hasData, uint *shared) 
# 173
{int volatile ___ = 1;(void)queue;(void)data;(void)hasData;(void)shared;
# 188
::exit(___);}
#if 0
# 173
{ 
# 177
int nThreads; 
# 178
if (PROC::NumThreads != 0) { 
# 179
nThreads = PROC::NumThreads; } else { 
# 181
nThreads = (__device_builtin_variable_blockDim.x); }  
# 182
if ((PROC::NumThreads == 0) || ((__device_builtin_variable_threadIdx.x) < nThreads)) 
# 183
{ 
# 184
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, nThreads, queue, reinterpret_cast< typename PROC::ExpectedData *>(data), shared); 
# 187
}  
# 188
} 
#endif
# 189 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 192
template< class Q, class ProcInfo, class PROC, class CUSTOM> 
# 193
class FuncCaller< Q, ProcInfo, PROC, CUSTOM, false, true>  { 
# 197
public: static void call(Q *queue, void *data, int hasData, uint *shared) 
# 198
{int volatile ___ = 1;(void)queue;(void)data;(void)hasData;(void)shared;
# 221
::exit(___);}
#if 0
# 198
{ 
# 201
if (PROC::NumThreads != 0) 
# 202
{ 
# 203
int nThreads; 
# 204
nThreads = PROC::NumThreads; 
# 205
int tid = (__device_builtin_variable_threadIdx.x) % PROC::NumThreads; 
# 206
int offset = (__device_builtin_variable_threadIdx.x) / PROC::NumThreads; 
# 207
if ((__device_builtin_variable_threadIdx.x) < hasData) 
# 208
{ 
# 209
PROC::template execute< Q, Context< PROC::NumThreads, true, CUSTOM> > (tid, nThreads, queue, reinterpret_cast< typename PROC::ExpectedData *>(data), shared + ((offset * PROC::sharedMemory) / sizeof(uint))); 
# 212
}  
# 213
} else 
# 215
{ 
# 216
PROC::template execute< Q, Context< PROC::NumThreads, true, CUSTOM> > (__device_builtin_variable_threadIdx.x, __device_builtin_variable_blockDim.x, queue, reinterpret_cast< typename PROC::ExpectedData *>(data), shared); 
# 219
}  
# 221
} 
#endif
# 222 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 225
template< class Q, class ProcInfo, class PROC, class CUSTOM, bool MultiElement> 
# 226
class FuncCaller< Q, ProcInfo, PROC, CUSTOM, true, MultiElement>  { 
# 230
public: static void call(Q *queue, void *data, int numData, uint *shared) 
# 231
{int volatile ___ = 1;(void)queue;(void)data;(void)numData;(void)shared;
# 241
::exit(___);}
#if 0
# 231
{ 
# 235
if ((__device_builtin_variable_threadIdx.x) < numData) 
# 236
{ 
# 237
PROC::template execute< Q, Context< PROC::NumThreads, MultiElement, CUSTOM> > (__device_builtin_variable_threadIdx.x, numData, queue, reinterpret_cast< typename PROC::ExpectedData *>(data), shared); 
# 240
}  
# 241
} 
#endif
# 242 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 247
template< class Q, class ProcInfo, bool MultiElement> 
# 248
struct ProcCallCopyVisitor { 
# 250
int *execproc; 
# 251
const uint4 &sharedMem; 
# 252
Q *q; 
# 253
void *execData; 
# 254
uint *s_data; 
# 255
int hasResult; 
# 256
ProcCallCopyVisitor(Q *q, int *execproc, void *
# 257
execData, uint *s_data, const uint4 &sharedMem, int hasResult) : execproc(execproc), sharedMem(sharedMem), q(q), execData(execData), s_data(s_data) 
# 258
{int *volatile ___ = 0;(void)q;(void)execproc;(void)execData;(void)s_data;(void)sharedMem;(void)hasResult;::free(___);}
#if 0
# 258
{ } 
#endif
# 261 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class TProcedure, class CUSTOM> bool 
# 262
visit() 
# 263
{int volatile ___ = 1;
# 271
::exit(___);}
#if 0
# 263
{ 
# 264
if ((*(execproc)) == findProcId< ProcInfo, TProcedure> ::value) 
# 265
{ 
# 266
FuncCaller< Q, ProcInfo, TProcedure, CUSTOM, TProcedure::ItemInput, MultiElement> ::call(q, execData, hasResult, (((s_data) + ((sharedMem).x)) + ((sharedMem).y)) + ((sharedMem).w)); 
# 268
return true; 
# 269
}  
# 270
return false; 
# 271
} 
#endif
# 272 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 275
template< class Q, class ProcInfo, bool MultiElement> 
# 276
struct ProcCallNoCopyVisitor { 
# 278
int *execproc; 
# 279
const uint4 &sharedMem; 
# 280
Q *q; 
# 281
void *execData; 
# 282
uint *s_data; 
# 283
int hasResult; 
# 284
int processCount; 
# 285
ProcCallNoCopyVisitor(Q *q, int *execproc, void *
# 286
execData, uint *s_data, const uint4 &sharedMem, int hasResult) : execproc(execproc), sharedMem(sharedMem), q(q), execData(execData), s_data(s_data), hasResult(hasResult) 
# 287
{int *volatile ___ = 0;(void)q;(void)execproc;(void)execData;(void)s_data;(void)sharedMem;(void)hasResult;::free(___);}
#if 0
# 287
{ } 
#endif
# 289 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class TProcedure, class CUSTOM> bool 
# 290
visit() 
# 291
{int volatile ___ = 1;
# 305
::exit(___);}
#if 0
# 291
{ 
# 292
if ((*(execproc)) == findProcId< ProcInfo, TProcedure> ::value) 
# 293
{ 
# 296
FuncCaller< Q, ProcInfo, TProcedure, CUSTOM, TProcedure::ItemInput, MultiElement> ::call(q, execData, hasResult, (((s_data) + ((sharedMem).x)) + ((sharedMem).y)) + ((sharedMem).w)); 
# 298
int n = (TProcedure::NumThreads != 0) ? (hasResult) / TProcedure::NumThreads : ((TProcedure::ItemInput) ? hasResult : 1); 
# 300
(processCount) = n; 
# 301
((q)->template finishRead< TProcedure> ((execproc)[1], n)); 
# 302
return true; 
# 303
}  
# 304
return false; 
# 305
} 
#endif
# 306 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 333
template< class Q, class ProcInfo, bool MultiElement> struct ProcCallNoCopyVisitorPart1 { int *execproc; const uint4 &sharedMem; Q *q; void *execData; uint *s_data; int hasResult; ProcCallNoCopyVisitorPart1(Q *q, int *execproc, void *execData, uint *s_data, const uint4 &sharedMem, int hasResult) : execproc(execproc), sharedMem(sharedMem), q(q), execData(execData), s_data(s_data), hasResult(hasResult) {int *volatile ___ = 0;(void)q;(void)execproc;(void)execData;(void)s_data;(void)sharedMem;(void)hasResult;::free(___);}
#if 0
# 333
{ } 
#endif
# 333 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class TProcedure, class CUSTOM> bool visit() {int volatile ___ = 1;::exit(___);}
#if 0
# 333
{ if ((*(execproc)) == TProcedure::ProcedureId) { FuncCaller< Q, ProcInfo, TProcedure, CUSTOM, TProcedure::ItemInput, MultiElement> ::call(q, execData, hasResult, (((s_data) + ((sharedMem).x)) + ((sharedMem).y)) + ((sharedMem).w)); int n = (TProcedure::NumThreads != 0) ? (hasResult) / TProcedure::NumThreads : ((TProcedure::ItemInput) ? hasResult : 1); ((q)->template finishRead1< TProcedure> ((execproc)[1], n)); return true; }  return false; } 
#endif
# 333 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 334
template< class Q, class ProcInfo, bool MultiElement> struct ProcCallNoCopyVisitorPart2 { int *execproc; const uint4 &sharedMem; Q *q; void *execData; uint *s_data; int hasResult; ProcCallNoCopyVisitorPart2(Q *q, int *execproc, void *execData, uint *s_data, const uint4 &sharedMem, int hasResult) : execproc(execproc), sharedMem(sharedMem), q(q), execData(execData), s_data(s_data), hasResult(hasResult) {int *volatile ___ = 0;(void)q;(void)execproc;(void)execData;(void)s_data;(void)sharedMem;(void)hasResult;::free(___);}
#if 0
# 334
{ } 
#endif
# 334 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class TProcedure, class CUSTOM> bool visit() {int volatile ___ = 1;::exit(___);}
#if 0
# 334
{ if ((*(execproc)) == TProcedure::ProcedureId) { FuncCaller< Q, ProcInfo, TProcedure, CUSTOM, TProcedure::ItemInput, MultiElement> ::call(q, execData, hasResult, (((s_data) + ((sharedMem).x)) + ((sharedMem).y)) + ((sharedMem).w)); int n = (TProcedure::NumThreads != 0) ? (hasResult) / TProcedure::NumThreads : ((TProcedure::ItemInput) ? hasResult : 1); ((q)->template finishRead2< TProcedure> ((execproc)[1], n)); return true; }  return false; } 
#endif
# 334 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 335
template< class Q, class ProcInfo, bool MultiElement> struct ProcCallNoCopyVisitorPart3 { int *execproc; const uint4 &sharedMem; Q *q; void *execData; uint *s_data; int hasResult; ProcCallNoCopyVisitorPart3(Q *q, int *execproc, void *execData, uint *s_data, const uint4 &sharedMem, int hasResult) : execproc(execproc), sharedMem(sharedMem), q(q), execData(execData), s_data(s_data), hasResult(hasResult) {int *volatile ___ = 0;(void)q;(void)execproc;(void)execData;(void)s_data;(void)sharedMem;(void)hasResult;::free(___);}
#if 0
# 335
{ } 
#endif
# 335 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class TProcedure, class CUSTOM> bool visit() {int volatile ___ = 1;::exit(___);}
#if 0
# 335
{ if ((*(execproc)) == TProcedure::ProcedureId) { FuncCaller< Q, ProcInfo, TProcedure, CUSTOM, TProcedure::ItemInput, MultiElement> ::call(q, execData, hasResult, (((s_data) + ((sharedMem).x)) + ((sharedMem).y)) + ((sharedMem).w)); int n = (TProcedure::NumThreads != 0) ? (hasResult) / TProcedure::NumThreads : ((TProcedure::ItemInput) ? hasResult : 1); ((q)->template finishRead3< TProcedure> ((execproc)[1], n)); return true; }  return false; } 
#endif
# 335 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 339
extern int maxConcurrentBlocks[64]; 
# 340
extern volatile int maxConcurrentBlockEvalDone[64]; 
# 342
void initAll() 
# 343
{ 
# 344
int nblocks[64]; 
# 345
memset(nblocks, 0, sizeof(int) * (64)); 
# 346
Tools::checkError(cudaMemcpyToSymbol(maxConcurrentBlocks, nblocks, sizeof(int) * (64)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 347); 
# 348
Tools::checkError(cudaMemcpyToSymbol(maxConcurrentBlockEvalDone, nblocks, sizeof(int) * (64)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 349); 
# 350
} 
# 355
template< class Q, MegakernelStopCriteria StopCriteria, bool Maintainer> class MaintainerCaller; 
# 358
template< class Q, MegakernelStopCriteria StopCriteria> 
# 359
class MaintainerCaller< Q, StopCriteria, true>  { 
# 362
public: static bool RunMaintainer(Q *q, int *shutdown) 
# 363
{int volatile ___ = 1;(void)q;(void)shutdown;
# 394
::exit(___);}
#if 0
# 363
{ 
# 365
if ((__device_builtin_variable_blockIdx.x) == (1)) 
# 366
{ 
# 367
__attribute__((unused)) bool run; 
# 368
run = true; 
# 369
__syncthreads(); 
# 370
int runs = 0; 
# 371
while (run) 
# 372
{ 
# 373
(q->globalMaintain()); 
# 374
__syncthreads(); 
# 375
if (runs > 10) 
# 376
{ 
# 377
if (((endCounter)[0]) == 0) 
# 378
{ 
# 379
if ((StopCriteria) == (MegakernelStopCriteria::EmptyQueue)) { 
# 380
run = false; } else { 
# 381
if (shutdown) 
# 382
{ 
# 383
if (*shutdown) { 
# 384
run = false; }  
# 385
}  }  
# 386
}  
# 387
__syncthreads(); 
# 388
} else { 
# 390
++runs; }  
# 391
}  
# 392
}  
# 393
return false; 
# 394
} 
#endif
# 396 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
static bool RunMaintainerSpecific(Q *q, int *shutdown, int procId) 
# 397
{int volatile ___ = 1;(void)q;(void)shutdown;(void)procId;
# 428
::exit(___);}
#if 0
# 397
{ 
# 399
if ((__device_builtin_variable_blockIdx.x) == (1)) 
# 400
{ 
# 401
__attribute__((unused)) bool run; 
# 402
run = true; 
# 403
__syncthreads(); 
# 404
int runs = 0; 
# 405
while (run) 
# 406
{ 
# 407
(q->globalMaintain()); 
# 408
__syncthreads(); 
# 409
if (runs > 10) 
# 410
{ 
# 411
if (((endCounter)[procId]) == 0) 
# 412
{ 
# 413
if ((StopCriteria) == (MegakernelStopCriteria::EmptyQueue)) { 
# 414
run = false; } else { 
# 415
if (shutdown) 
# 416
{ 
# 417
if (*shutdown) { 
# 418
run = false; }  
# 419
}  }  
# 420
}  
# 421
__syncthreads(); 
# 422
} else { 
# 424
++runs; }  
# 425
}  
# 426
}  
# 427
return false; 
# 428
} 
#endif
# 429 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 431
template< class Q, MegakernelStopCriteria StopCriteria> 
# 432
class MaintainerCaller< Q, StopCriteria, false>  { 
# 435
public: static bool RunMaintainer(Q *q, int *shutdown) 
# 436
{int volatile ___ = 1;(void)q;(void)shutdown;
# 438
::exit(___);}
#if 0
# 436
{ 
# 437
return false; 
# 438
} 
#endif
# 440 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
static bool RunMaintainerSpecific(Q *q, int *shutdown, int procId) 
# 441
{int volatile ___ = 1;(void)q;(void)shutdown;(void)procId;
# 443
::exit(___);}
#if 0
# 441
{ 
# 442
return false; 
# 443
} 
#endif
# 444 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 446
template< class Q, class PROCINFO, class CUSTOM, bool CopyToShared, bool MultiElement, bool tripleCall> class MegakernelLogics; 
# 449
template< class Q, class PROCINFO, class CUSTOM, bool MultiElement, bool tripleCall> 
# 450
class MegakernelLogics< Q, PROCINFO, CUSTOM, true, MultiElement, tripleCall>  { 
# 455
public: static int run(Q *q, uint4 sharedMemDist) 
# 456
{int volatile ___ = 1;(void)q;(void)sharedMemDist;
# 474
::exit(___);}
#if 0
# 456
{ 
# 457
__attribute__((unused)) extern uint s_data[]; 
# 459
void *execData = reinterpret_cast< void *>(((s_data) + (sharedMemDist.x)) + (sharedMemDist.w)); 
# 460
int *execproc = reinterpret_cast< int *>((s_data) + (sharedMemDist.w)); 
# 462
int hasResult = (q->template dequeue< MultiElement> (execData, execproc, sizeof(uint) * ((sharedMemDist.y) + (sharedMemDist.z)))); 
# 465
__syncthreads(); 
# 467
if (hasResult) 
# 468
{ 
# 469
ProcCallCopyVisitor< Q, PROCINFO, MultiElement>  visitor(q, execproc, execData, s_data, sharedMemDist, hasResult); 
# 471
ProcInfoVisitor< PROCINFO, CUSTOM> ::template Visit< ProcCallCopyVisitor< Q, PROCINFO, MultiElement> > (visitor); 
# 472
}  
# 473
return hasResult; 
# 474
} 
#endif
# 477 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
static int runSpecific(Q *q, uint4 sharedMemDist) 
# 478
{int volatile ___ = 1;(void)q;(void)sharedMemDist;
# 497
::exit(___);}
#if 0
# 478
{ 
# 479
__attribute__((unused)) extern uint s_data[]; 
# 481
void *execData = reinterpret_cast< void *>(((s_data) + (sharedMemDist.x)) + (sharedMemDist.w)); 
# 482
int *execproc = reinterpret_cast< int *>((s_data) + (sharedMemDist.w)); 
# 484
int hasResult = (q->template dequeue< MultiElement> (execData, *execproc, sizeof(uint) * ((sharedMemDist.y) + (sharedMemDist.z)))); 
# 487
__syncthreads(); 
# 489
if (hasResult) 
# 490
{ 
# 491
ProcCallCopyVisitor< Q, PROCINFO, MultiElement>  visitor(q, execproc, execData, s_data, sharedMemDist, hasResult); 
# 493
ProcInfoVisitor< PROCINFO, CUSTOM> ::template Visit< ProcCallCopyVisitor< Q, PROCINFO, MultiElement> > (visitor); 
# 495
}  
# 496
return hasResult; 
# 497
} 
#endif
# 498 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 500
template< class Q, class PROCINFO, class CUSTOM, bool MultiElement> 
# 501
class MegakernelLogics< Q, PROCINFO, CUSTOM, false, MultiElement, false>  { 
# 505
public: static int run(Q *q, uint4 sharedMemDist) 
# 506
{int volatile ___ = 1;(void)q;(void)sharedMemDist;
# 531
::exit(___);}
#if 0
# 506
{ 
# 507
__attribute__((unused)) extern uint s_data[]; 
# 508
void *execData = reinterpret_cast< void *>(((s_data) + (sharedMemDist.x)) + (sharedMemDist.w)); 
# 509
int *execproc = reinterpret_cast< int *>((s_data) + (sharedMemDist.w)); 
# 512
int hasResult = (q->template dequeueStartRead< MultiElement> (execData, execproc, sizeof(uint) * (sharedMemDist.z))); 
# 518
__syncthreads(); 
# 521
if (hasResult) 
# 522
{ 
# 523
ProcCallNoCopyVisitor< Q, PROCINFO, MultiElement>  visitor(q, execproc, execData, s_data, sharedMemDist, hasResult); 
# 525
ProcInfoVisitor< PROCINFO, CUSTOM> ::template Visit< ProcCallNoCopyVisitor< Q, PROCINFO, MultiElement> > (visitor); 
# 527
hasResult = (visitor.processCount); 
# 528
}  
# 530
return hasResult; 
# 531
} 
#endif
# 534 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
static int runSpecific(Q *q, uint4 sharedMemDist) 
# 535
{int volatile ___ = 1;(void)q;(void)sharedMemDist;
# 566
::exit(___);}
#if 0
# 535
{ 
# 547
__attribute__((unused)) extern uint s_data[]; 
# 548
void *execData = reinterpret_cast< void *>(((s_data) + (sharedMemDist.x)) + (sharedMemDist.w)); 
# 549
int *execproc = reinterpret_cast< int *>((s_data) + (sharedMemDist.w)); 
# 551
int hasResult = (q->template dequeueStartRead< MultiElement> (execData, execproc, sizeof(uint) * (sharedMemDist.z))); 
# 556
__syncthreads(); 
# 558
if (hasResult) 
# 559
{ 
# 560
ProcCallNoCopyVisitor< Q, PROCINFO, MultiElement>  visitor(q, execproc, execData, s_data, sharedMemDist, hasResult); 
# 562
ProcInfoVisitor< PROCINFO, CUSTOM> ::template Visit< ProcCallNoCopyVisitor< Q, PROCINFO, MultiElement> > (visitor); 
# 564
}  
# 565
return hasResult; 
# 566
} 
#endif
# 567 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 664
template< unsigned long long StaticLimit, bool Dynamic> struct TimeLimiter; 
# 668
template<> struct TimeLimiter< 0ULL, false>  { 
# 670
TimeLimiter() {int *volatile ___ = 0;::free(___);}
#if 0
# 670
{ } 
#endif
# 671 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
bool stop(int tval) 
# 672
{int volatile ___ = 1;(void)tval;
# 674
::exit(___);}
#if 0
# 672
{ 
# 673
return false; 
# 674
} 
#endif
# 675 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 677
template< unsigned long long StaticLimit> 
# 678
struct TimeLimiter< StaticLimit, false>  { 
# 680
unsigned long long TimeLimiter_start; 
# 681
TimeLimiter() 
# 682
{int *volatile ___ = 0;
# 686
::free(___);}
#if 0
# 682
{ 
# 684
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 685
(TimeLimiter_start) = (clock64()); }  
# 686
} 
#endif
# 687 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
bool stop(int tval) 
# 688
{int volatile ___ = 1;(void)tval;
# 690
::exit(___);}
#if 0
# 688
{ 
# 689
return ((clock64()) - (TimeLimiter_start)) > StaticLimit; 
# 690
} 
#endif
# 691 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 694
template<> struct TimeLimiter< 0ULL, true>  { 
# 696
unsigned long long TimeLimiter_start; 
# 697
TimeLimiter() 
# 698
{int *volatile ___ = 0;
# 701
::free(___);}
#if 0
# 698
{ 
# 699
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 700
(TimeLimiter_start) = (clock64()); }  
# 701
} 
#endif
# 702 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
bool stop(int tval) 
# 703
{int volatile ___ = 1;(void)tval;
# 705
::exit(___);}
#if 0
# 703
{ 
# 704
return (((clock64()) - (TimeLimiter_start)) / (1024)) > tval; 
# 705
} 
#endif
# 706 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
}; 
# 708
template< class Q, class PROCINFO, class CUSTOM, bool CopyToShared, bool MultiElement, bool 
# 709
Maintainer, class TimeLimiter, MegakernelStopCriteria StopCriteria> static void 
# 710
__wrapper__device_stub_megakernel(Q *&q, uint4 &sharedMemDist, int &t, int *&shutdown) {exit(1);}
#if 0
# 711
{ 
# 712
if (q == 0) 
# 713
{ 
# 714
if (((maxConcurrentBlockEvalDone)[0]) != 0) { 
# 715
return; }  
# 716
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 717
{ 
# 718
atomicAdd(&((maxConcurrentBlocks)[0]), 1); 
# 721
}  
# 728
DelayFMADS< 10000, 4> ::delay(); 
# 729
__syncthreads(); 
# 730
((maxConcurrentBlockEvalDone)[0]) = 1; 
# 731
__threadfence(); 
# 732
return; 
# 733
}  
# 735
__attribute__((unused)) volatile int runState; 
# 741
if (MaintainerCaller< Q, StopCriteria, Maintainer> ::RunMaintainer(q, shutdown)) { 
# 742
return; }  
# 744
__attribute__((unused)) TimeLimiter timelimiter; 
# 746
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 747
{ 
# 751
if (((endCounter)[0]) == 0) { 
# 752
runState = 0; } else 
# 754
{ 
# 755
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 756
if (atomicAdd((int *)(&((endCounter)[0])), 1) == 2597) { 
# 757
atomicSub((int *)(&((endCounter)[0])), 2597); }  
# 758
runState = 1; 
# 759
}  
# 760
}  
# 761
(q->workerStart()); 
# 762
__syncthreads(); 
# 764
while (runState) 
# 765
{ 
# 767
int hasResult = MegakernelLogics< Q, PROCINFO, CUSTOM, CopyToShared, MultiElement, Q::needTripleCall> ::run(q, sharedMemDist); 
# 775
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 776
{ 
# 784
if ((timelimiter.stop(t))) 
# 785
{ 
# 786
runState = 0; 
# 787
} else { 
# 788
if (hasResult) 
# 789
{ 
# 790
if (runState == 3) 
# 791
{ 
# 793
runState = 1; 
# 794
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 795
atomicAdd((int *)(&((endCounter)[0])), 1); 
# 796
} else { 
# 797
if (runState == 2) 
# 798
{ 
# 800
runState = 1; 
# 801
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 802
}  }  
# 803
} else 
# 805
{ 
# 807
if (runState == 1) 
# 808
{ 
# 810
atomicSub((int *)(&((doneCounter)[0])), 1); 
# 811
runState = 2; 
# 812
} else { 
# 813
if (runState == 2) 
# 814
{ 
# 815
if (((doneCounter)[0]) == 0) 
# 816
{ 
# 818
atomicSub((int *)(&((endCounter)[0])), 1); 
# 819
runState = 3; 
# 820
}  
# 821
} else { 
# 822
if (runState == 3) 
# 823
{ 
# 827
if (((doneCounter)[0]) != 0) 
# 828
{ 
# 830
atomicAdd((int *)(&((endCounter)[0])), 1); 
# 831
runState = 2; 
# 832
} else { 
# 833
if (((endCounter)[0]) == 0) 
# 834
{ 
# 836
if ((StopCriteria) == (MegakernelStopCriteria::EmptyQueue)) { 
# 837
runState = 0; } else { 
# 838
if (shutdown) 
# 839
{ 
# 840
if (*shutdown) { 
# 841
runState = 0; }  
# 842
}  }  
# 843
}  }  
# 844
}  }  }  
# 845
}  }  
# 846
}  
# 848
__syncthreads(); 
# 849
(q->workerMaintain()); 
# 850
}  
# 851
(q->workerEnd()); 
# 852
} 
#endif
# 708 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class Q, class PROCINFO, class CUSTOM, bool CopyToShared, bool MultiElement, bool 
# 709
Maintainer, class TimeLimiter, MegakernelStopCriteria StopCriteria> void 
# 710
megakernel(Q *q, uint4 sharedMemDist, int t, int *shutdown) 
# 711
{__wrapper__device_stub_megakernel<Q,PROCINFO,CUSTOM,CopyToShared,MultiElement,Maintainer,TimeLimiter,StopCriteria>(q,sharedMemDist,t,shutdown);
# 852
return;}
#if 0
# 711
{ 
# 712
if (q == 0) 
# 713
{ 
# 714
if (((maxConcurrentBlockEvalDone)[0]) != 0) { 
# 715
return; }  
# 716
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 717
{ 
# 718
atomicAdd(&((maxConcurrentBlocks)[0]), 1); 
# 721
}  
# 728
DelayFMADS< 10000, 4> ::delay(); 
# 729
__syncthreads(); 
# 730
((maxConcurrentBlockEvalDone)[0]) = 1; 
# 731
__threadfence(); 
# 732
return; 
# 733
}  
# 735
__attribute__((unused)) volatile int runState; 
# 741
if (MaintainerCaller< Q, StopCriteria, Maintainer> ::RunMaintainer(q, shutdown)) { 
# 742
return; }  
# 744
__attribute__((unused)) TimeLimiter timelimiter; 
# 746
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 747
{ 
# 751
if (((endCounter)[0]) == 0) { 
# 752
runState = 0; } else 
# 754
{ 
# 755
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 756
if (atomicAdd((int *)(&((endCounter)[0])), 1) == 2597) { 
# 757
atomicSub((int *)(&((endCounter)[0])), 2597); }  
# 758
runState = 1; 
# 759
}  
# 760
}  
# 761
(q->workerStart()); 
# 762
__syncthreads(); 
# 764
while (runState) 
# 765
{ 
# 767
int hasResult = MegakernelLogics< Q, PROCINFO, CUSTOM, CopyToShared, MultiElement, Q::needTripleCall> ::run(q, sharedMemDist); 
# 775
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 776
{ 
# 784
if ((timelimiter.stop(t))) 
# 785
{ 
# 786
runState = 0; 
# 787
} else { 
# 788
if (hasResult) 
# 789
{ 
# 790
if (runState == 3) 
# 791
{ 
# 793
runState = 1; 
# 794
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 795
atomicAdd((int *)(&((endCounter)[0])), 1); 
# 796
} else { 
# 797
if (runState == 2) 
# 798
{ 
# 800
runState = 1; 
# 801
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 802
}  }  
# 803
} else 
# 805
{ 
# 807
if (runState == 1) 
# 808
{ 
# 810
atomicSub((int *)(&((doneCounter)[0])), 1); 
# 811
runState = 2; 
# 812
} else { 
# 813
if (runState == 2) 
# 814
{ 
# 815
if (((doneCounter)[0]) == 0) 
# 816
{ 
# 818
atomicSub((int *)(&((endCounter)[0])), 1); 
# 819
runState = 3; 
# 820
}  
# 821
} else { 
# 822
if (runState == 3) 
# 823
{ 
# 827
if (((doneCounter)[0]) != 0) 
# 828
{ 
# 830
atomicAdd((int *)(&((endCounter)[0])), 1); 
# 831
runState = 2; 
# 832
} else { 
# 833
if (((endCounter)[0]) == 0) 
# 834
{ 
# 836
if ((StopCriteria) == (MegakernelStopCriteria::EmptyQueue)) { 
# 837
runState = 0; } else { 
# 838
if (shutdown) 
# 839
{ 
# 840
if (*shutdown) { 
# 841
runState = 0; }  
# 842
}  }  
# 843
}  }  
# 844
}  }  }  
# 845
}  }  
# 846
}  
# 848
__syncthreads(); 
# 849
(q->workerMaintain()); 
# 850
}  
# 851
(q->workerEnd()); 
# 852
} 
#endif
# 854 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class Q, class PROCINFO, class CUSTOM, bool CopyToShared, bool MultiElement, bool 
# 855
Maintainer, class TimeLimiter, MegakernelStopCriteria StopCriteria> static void 
# 856
__wrapper__device_stub_megakernelSpecific(int &groupId, int &taskCount, Q *&q, uint4 &sharedMemDist, int &t, int *&shutdown) {exit(1);}
#if 0
# 857
{ 
# 858
if (q == 0) 
# 859
{ 
# 860
if (((maxConcurrentBlockEvalDone)[groupId]) != 0) { 
# 861
return; }  
# 863
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 864
{ 
# 865
atomicAdd(&((maxConcurrentBlocks)[groupId]), 1); 
# 866
}  
# 868
DelayFMADS< 10000, 4> ::delay(); 
# 869
__syncthreads(); 
# 870
((maxConcurrentBlockEvalDone)[groupId]) = 1; 
# 871
__threadfence(); 
# 873
return; 
# 874
}  
# 877
__attribute__((unused)) volatile int runState; 
# 878
__attribute__((unused)) TimeLimiter timelimiter; 
# 879
__attribute__((unused)) int blockReturn; 
# 886
int smid = zz_smid(); 
# 887
if (((sm_flag)[(groupId * 50) + smid]) == 0) 
# 889
{ 
# 890
return; 
# 891
}  
# 893
blockReturn = 0; 
# 894
__syncthreads(); 
# 896
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 897
{ 
# 898
int blockLeft = atomicSub(&((block_count)[(groupId * 50) + smid]), 1); 
# 899
if (blockLeft <= 0) 
# 900
{ 
# 901
blockReturn = 1; 
# 902
}  
# 911
runState = 1; 
# 915
}  
# 916
__syncthreads(); 
# 918
if (blockReturn == 1) 
# 919
{ 
# 920
return; 
# 921
}  
# 923
while (runState) 
# 924
{ 
# 926
int hasResult = MegakernelLogics< Q, PROCINFO, CUSTOM, CopyToShared, MultiElement, Q::needTripleCall> ::run(q, sharedMemDist); 
# 929
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 930
{ 
# 942
if (taskCount > 0) 
# 943
{ 
# 944
int a = (hasResult) ? atomicAdd(&((resultCounter)[groupId]), hasResult) + hasResult : ((resultCounter)[groupId]); 
# 945
if (a >= taskCount) 
# 947
{ 
# 948
runState = 0; 
# 949
}  
# 950
} else { 
# 951
if (hasResult) 
# 952
{ 
# 953
if (runState == 3) 
# 954
{ 
# 956
runState = 1; 
# 957
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 958
atomicAdd((int *)(&((endCounter)[0])), 1); 
# 959
} else { 
# 960
if (runState == 2) 
# 961
{ 
# 963
runState = 1; 
# 964
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 965
}  }  
# 966
} else 
# 969
{ 
# 971
if (runState == 1) 
# 972
{ 
# 974
atomicSub((int *)(&((doneCounter)[0])), 1); 
# 975
runState = 2; 
# 976
} else { 
# 977
if (runState == 2) 
# 978
{ 
# 979
if (((doneCounter)[0]) <= 0) 
# 980
{ 
# 982
atomicSub((int *)(&((endCounter)[0])), 1); 
# 983
runState = 3; 
# 984
}  
# 985
} else { 
# 986
if (runState == 3) 
# 987
{ 
# 991
if (((doneCounter)[0]) > 0) 
# 992
{ 
# 994
atomicAdd((int *)(&((endCounter)[0])), 1); 
# 995
runState = 2; 
# 996
} else 
# 998
{ 
# 999
atomicSub((int *)(&((endCounter)[0])), 1); 
# 1000
}  
# 1002
if (((endCounter)[0]) <= 0) 
# 1003
{ 
# 1004
runState = 0; 
# 1021
}  
# 1022
}  }  }  
# 1023
}  }  
# 1025
}  
# 1027
__syncthreads(); 
# 1029
}  
# 1034
} 
#endif
# 854 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< class Q, class PROCINFO, class CUSTOM, bool CopyToShared, bool MultiElement, bool 
# 855
Maintainer, class TimeLimiter, MegakernelStopCriteria StopCriteria> void 
# 856
megakernelSpecific(int groupId, int taskCount, Q *q, uint4 sharedMemDist, int t, int *shutdown) 
# 857
{__wrapper__device_stub_megakernelSpecific<Q,PROCINFO,CUSTOM,CopyToShared,MultiElement,Maintainer,TimeLimiter,StopCriteria>(groupId,taskCount,q,sharedMemDist,t,shutdown);
# 1034
return;}
#if 0
# 857
{ 
# 858
if (q == 0) 
# 859
{ 
# 860
if (((maxConcurrentBlockEvalDone)[groupId]) != 0) { 
# 861
return; }  
# 863
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 864
{ 
# 865
atomicAdd(&((maxConcurrentBlocks)[groupId]), 1); 
# 866
}  
# 868
DelayFMADS< 10000, 4> ::delay(); 
# 869
__syncthreads(); 
# 870
((maxConcurrentBlockEvalDone)[groupId]) = 1; 
# 871
__threadfence(); 
# 873
return; 
# 874
}  
# 877
__attribute__((unused)) volatile int runState; 
# 878
__attribute__((unused)) TimeLimiter timelimiter; 
# 879
__attribute__((unused)) int blockReturn; 
# 886
int smid = zz_smid(); 
# 887
if (((sm_flag)[(groupId * 50) + smid]) == 0) 
# 889
{ 
# 890
return; 
# 891
}  
# 893
blockReturn = 0; 
# 894
__syncthreads(); 
# 896
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 897
{ 
# 898
int blockLeft = atomicSub(&((block_count)[(groupId * 50) + smid]), 1); 
# 899
if (blockLeft <= 0) 
# 900
{ 
# 901
blockReturn = 1; 
# 902
}  
# 911
runState = 1; 
# 915
}  
# 916
__syncthreads(); 
# 918
if (blockReturn == 1) 
# 919
{ 
# 920
return; 
# 921
}  
# 923
while (runState) 
# 924
{ 
# 926
int hasResult = MegakernelLogics< Q, PROCINFO, CUSTOM, CopyToShared, MultiElement, Q::needTripleCall> ::run(q, sharedMemDist); 
# 929
if ((__device_builtin_variable_threadIdx.x) == (0)) 
# 930
{ 
# 942
if (taskCount > 0) 
# 943
{ 
# 944
int a = (hasResult) ? atomicAdd(&((resultCounter)[groupId]), hasResult) + hasResult : ((resultCounter)[groupId]); 
# 945
if (a >= taskCount) 
# 947
{ 
# 948
runState = 0; 
# 949
}  
# 950
} else { 
# 951
if (hasResult) 
# 952
{ 
# 953
if (runState == 3) 
# 954
{ 
# 956
runState = 1; 
# 957
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 958
atomicAdd((int *)(&((endCounter)[0])), 1); 
# 959
} else { 
# 960
if (runState == 2) 
# 961
{ 
# 963
runState = 1; 
# 964
atomicAdd((int *)(&((doneCounter)[0])), 1); 
# 965
}  }  
# 966
} else 
# 969
{ 
# 971
if (runState == 1) 
# 972
{ 
# 974
atomicSub((int *)(&((doneCounter)[0])), 1); 
# 975
runState = 2; 
# 976
} else { 
# 977
if (runState == 2) 
# 978
{ 
# 979
if (((doneCounter)[0]) <= 0) 
# 980
{ 
# 982
atomicSub((int *)(&((endCounter)[0])), 1); 
# 983
runState = 3; 
# 984
}  
# 985
} else { 
# 986
if (runState == 3) 
# 987
{ 
# 991
if (((doneCounter)[0]) > 0) 
# 992
{ 
# 994
atomicAdd((int *)(&((endCounter)[0])), 1); 
# 995
runState = 2; 
# 996
} else 
# 998
{ 
# 999
atomicSub((int *)(&((endCounter)[0])), 1); 
# 1000
}  
# 1002
if (((endCounter)[0]) <= 0) 
# 1003
{ 
# 1004
runState = 0; 
# 1021
}  
# 1022
}  }  }  
# 1023
}  }  
# 1025
}  
# 1027
__syncthreads(); 
# 1029
}  
# 1034
} 
#endif
# 1037 "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh"
template< int groupId, template< class >  class QUEUE, class PROCINFO, class ApplicationContext = void, int 
# 1038
maxShared = 16336, bool LoadToShared = true, bool MultiElement = true, bool 
# 1039
StaticTimelimit = false, bool DynamicTimelimit = false> 
# 1040
class TechniqueCore { 
# 1042
friend struct InitPhaseVisitor; 
# 1043
friend struct InitPhaseSpecificVisitor; 
# 1047
public: typedef typename UserQueueType< groupId> ::Type Q; 
# 1056
Q *q; 
# 1058
int blockSize[PROCINFO::NumPhases]; 
# 1059
int blocks[PROCINFO::NumPhases]; 
# 1060
uint4 sharedMem[PROCINFO::NumPhases]; 
# 1061
uint sharedMemSum[PROCINFO::NumPhases]; 
# 1063
int freq; 
# 1065
struct InitPhaseVisitor { 
# 1067
TechniqueCore &technique; 
# 1068
InitPhaseVisitor(TechniqueCore &technique) : technique(technique) { } 
# 1071
template< class TProcInfo, class TQueue, int Phase> bool 
# 1072
visit() 
# 1073
{ 
# 1075
(((technique).blockSize)[Phase]) = TProcInfo::template OptimalThreadCount< MultiElement> ::Num; 
# 1077
if (TQueue::globalMaintainMinThreads > 0) { 
# 1078
(((technique).blockSize)[Phase]) = max(((technique).blockSize)[Phase], TQueue::globalMaintainMinThreads); }  
# 1080
uint queueSharedMem = (TQueue::requiredShared); 
# 1083
(((technique).sharedMem)[Phase]) = TProcInfo::template requiredShared< MultiElement> (((technique).blockSize)[Phase], LoadToShared, (maxShared) - queueSharedMem, false); 
# 1088
((((technique).sharedMem)[Phase]).x) /= 4; 
# 1089
((((technique).sharedMem)[Phase]).y) = (((((technique).sharedMem)[Phase]).y) / 4); 
# 1090
((((technique).sharedMem)[Phase]).z) = (((((technique).sharedMem)[Phase]).z) / 4); 
# 1099
(((technique).sharedMemSum)[Phase]) = (((((technique).sharedMem)[Phase]).w) + queueSharedMem); 
# 1100
((((technique).sharedMem)[Phase]).w) = (queueSharedMem / (4)); 
# 1102
if (TQueue::globalMaintainMinThreads > 0) { 
# 1103
(((technique).sharedMemSum)[Phase]) = max(((technique).sharedMemSum)[Phase], TQueue::globalMaintainSharedMemory(((technique).blockSize)[Phase])); }  
# 1107
(cudaConfigureCall(512, ((technique).blockSize)[Phase], ((technique).sharedMemSum)[Phase])) ? (void)0 : (megakernel< TQueue, TProcInfo, ApplicationContext, LoadToShared, MultiElement, ((TQueue::globalMaintainMinThreads > 0) ? true : false), TimeLimiter< StaticTimelimit ? 1000 : 0, DynamicTimelimit> , EmptyQueue> )(0, ((technique).sharedMem)[Phase], 0, __null); 
# 1114
int nblocks[64]; 
# 1115
cudaMemset(nblocks, 0, sizeof nblocks); 
# 1116
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1116); 
# 1117
Tools::checkError(cudaGetLastError(), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1117); 
# 1118
Tools::checkError(cudaMemcpyFromSymbol(nblocks, maxConcurrentBlocks, sizeof(int) * (64)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1118); 
# 1119
for (int i = (TProcInfo::NumProcedures); i > 0; i--) 
# 1120
{ 
# 1125
(((technique).blocks)[Phase]) = ((nblocks)[i]); 
# 1127
if ((((technique).blocks)[Phase]) == 0) { 
# 1128
printf("ERROR: in Megakernel confguration: dummy launch failed. Check shared memory consumption\?\n"); }  
# 1129
}  
# 1133
return false; 
# 1134
} 
# 1135
}; 
# 1137
struct InitPhaseSpecificVisitor { 
# 1139
int tGroupId; 
# 1140
TechniqueCore &technique; 
# 1141
InitPhaseSpecificVisitor(TechniqueCore &technique, int tGroupId) : tGroupId(tGroupId), technique(technique) 
# 1142
{ } 
# 1145
template< class TProcInfo, class TQueue, int Phase> bool 
# 1146
visit() 
# 1147
{ 
# 1149
(((technique).blockSize)[Phase]) = TProcInfo::template OptimalThreadCount< MultiElement> ::Num; 
# 1151
if (TQueue::globalMaintainMinThreads > 0) { 
# 1152
(((technique).blockSize)[Phase]) = max(((technique).blockSize)[Phase], TQueue::globalMaintainMinThreads); }  
# 1154
uint queueSharedMem = (TQueue::requiredShared); 
# 1157
(((technique).sharedMem)[Phase]) = TProcInfo::template requiredShared< MultiElement> (((technique).blockSize)[Phase], LoadToShared, (maxShared) - queueSharedMem, false); 
# 1162
((((technique).sharedMem)[Phase]).x) /= 4; 
# 1163
((((technique).sharedMem)[Phase]).y) = (((((technique).sharedMem)[Phase]).y) / 4); 
# 1164
((((technique).sharedMem)[Phase]).z) = (((((technique).sharedMem)[Phase]).z) / 4); 
# 1173
(((technique).sharedMemSum)[Phase]) = (((((technique).sharedMem)[Phase]).w) + queueSharedMem); 
# 1174
((((technique).sharedMem)[Phase]).w) = (queueSharedMem / (4)); 
# 1176
if (TQueue::globalMaintainMinThreads > 0) { 
# 1177
(((technique).sharedMemSum)[Phase]) = max(((technique).sharedMemSum)[Phase], TQueue::globalMaintainSharedMemory(((technique).blockSize)[Phase])); }  
# 1198
int i = tGroupId; 
# 1199
(cudaConfigureCall(512, ((technique).blockSize)[Phase], ((technique).sharedMemSum)[Phase])) ? (void)0 : (megakernelSpecific< TQueue, TProcInfo, ApplicationContext, LoadToShared, MultiElement, ((TQueue::globalMaintainMinThreads > (-1)) ? true : false), TimeLimiter< StaticTimelimit ? 1000 : 0, DynamicTimelimit> , EmptyQueue> )(tGroupId, (taskCountArray)[i], 0, ((technique).sharedMem)[Phase], 0, __null); 
# 1211
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1211); 
# 1212
Tools::checkError(cudaGetLastError(), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1212); 
# 1215
int nblocks[64]; 
# 1216
Tools::checkError(cudaMemcpyFromSymbol(nblocks, maxConcurrentBlocks, sizeof(int) * (64)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1217); 
# 1221
(((technique).blocks)[Phase]) = ((nblocks)[groupId]); 
# 1223
printf("nblocks: %d\n", (nblocks)[groupId]); 
# 1224
if ((((technique).blocks)[Phase]) == 0) { 
# 1225
printf("ERROR: in Megakernel confguration: dummy launch failed. Check shared memory consumption\?\n"); }  
# 1230
return false; 
# 1231
} 
# 1232
}; 
# 1237
void preCall(cudaStream_t stream) 
# 1238
{ 
# 1255
} 
# 1257
void postCall(cudaStream_t stream) 
# 1258
{ 
# 1259
} 
# 1263
template< class ProcInfoType> void 
# 1264
initProc() 
# 1265
{ 
# 1266
typedef MultiPhaseQueue< ProcInfoType, QUEUE>  curQ; 
# 1268
InitPhaseSpecificVisitor v(*this, groupId); 
# 1269
MultiPhaseQueue< ProcInfoType, QUEUE> ::template staticVisit< InitPhaseSpecificVisitor> (v); 
# 1270
} 
# 1273
void init() 
# 1274
{ 
# 1275
streamIndex = 0; 
# 1277
int resCount_h[64]; 
# 1278
memset(&((resCount_h)[0]), 0, sizeof(int) * (64)); 
# 1279
Tools::checkError(cudaMemcpyToSymbol(resultCounter, resCount_h, sizeof(int) * (64)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1279); 
# 1284
Tools::checkError(cudaMalloc((void **)(&(q)), sizeof(Q)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1284); 
# 1286
Tools::checkError(cudaMemcpyToSymbol(queuePointers, &(q), sizeof(void *), sizeof(void *) * (groupId)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1287); 
# 1288
printf("groupId:  %d\n", groupId); 
# 1290
int groupDone[64]; 
# 1291
memset(groupDone, 0, sizeof(int) * (64)); 
# 1292
((groupDone)[0]) = 1; 
# 1293
Tools::checkError(cudaMemcpyToSymbol(group_done_flag, groupDone, sizeof(int) * (64)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1293); 
# 1295
void *test_pointers[64]; 
# 1296
Tools::checkError(cudaMemcpyFromSymbol(test_pointers, queuePointers, sizeof(void *) * (groupId + 1)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1297); 
# 1312
int magic[64], null[64]; 
# 1313
for (int i = 0; i < 64; i++) 
# 1314
{ 
# 1315
((magic)[i]) = 2597; 
# 1316
((null)[i]) = 0; 
# 1317
}  
# 1320
Tools::checkError(cudaMemcpyToSymbol(doneCounter, null, sizeof(int) * (64)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1320); 
# 1321
Tools::checkError(cudaMemcpyToSymbol(endCounter, magic, sizeof(int) * (64)), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1321); 
# 1324
SegmentedStorage::checkReinitStorage(); 
# 1325
(cudaConfigureCall(512, 512)) ? (void)0 : (initQueue< Q> )(q); 
# 1327
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1327); 
# 1332
InitPhaseSpecificVisitor v(*this, groupId); 
# 1333
UserQueueType< groupId> ::Type::template staticVisit< InitPhaseSpecificVisitor> (v); 
# 1335
cudaDeviceProp props; 
# 1336
int dev; 
# 1337
Tools::checkError(cudaGetDevice(&dev), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1337); 
# 1338
Tools::checkError(cudaGetDeviceProperties(&props, dev), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1338); 
# 1339
(freq) = (static_cast< int>(((static_cast< unsigned long long>(props.clockRate)) * (1000)) / (1024))); 
# 1341
} 
# 1343
void resetQueue() 
# 1344
{ 
# 1345
init(); 
# 1346
} 
# 1348
void recordQueue() 
# 1349
{ 
# 1350
if (!Q::supportReuseInit) { 
# 1351
(std::cout << ("ERROR Megakernel::recordQueue(): queue does not support reuse init\n")); } else 
# 1353
{ 
# 1354
(cudaConfigureCall(1, 1)) ? (void)0 : (recordData< Q> )(q); 
# 1356
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1356); 
# 1357
}  
# 1358
} 
# 1360
void restoreQueue() 
# 1361
{ 
# 1362
if (!Q::supportReuseInit) { 
# 1363
(std::cout << ("ERROR Megakernel::restoreQueue(): queue does not support reuse init\n")); } else { 
# 1366
(cudaConfigureCall(1, 1)) ? (void)0 : (resetData< Q> )(q); }  
# 1367
} 
# 1370
template< class InsertFunc> void 
# 1371
insertIntoQueue(int num, cudaStream_t stream = 0) 
# 1372
{ 
# 1373
typedef CurrentMultiphaseQueue< typename UserQueueType< groupId> ::Type, 0>  Phase0Q; 
# 1380
int blockSize = 32; 
# 1381
int b = min(((num + blockSize) - 1) / blockSize, 104); 
# 1382
(cudaConfigureCall(b, blockSize, 0, stream)) ? (void)0 : (initData< InsertFunc, CurrentMultiphaseQueue< typename UserQueueType< groupId> ::Type, 0> > )(reinterpret_cast< Phase0Q *>(q), num); 
# 1385
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1385); 
# 1386
} 
# 1389
template< class InsertFunc, class ExpectedData> void 
# 1390
insertIntoQueue(int num, ExpectedData *data, cudaStream_t stream = 0) 
# 1391
{ 
# 1392
typedef CurrentMultiphaseQueue< typename UserQueueType< groupId> ::Type, 0>  Phase0Q; 
# 1394
int b = min(((num + 512) - 1) / 512, 104); 
# 1396
(cudaConfigureCall(b, 512, 0, stream)) ? (void)0 : (initData< InsertFunc, CurrentMultiphaseQueue< typename UserQueueType< groupId> ::Type, 0> , ExpectedData> )(reinterpret_cast< Phase0Q *>(q), num, data); 
# 1399
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueMegakernel.cuh", 1399); 
# 1400
} 
# 1402
int BlockSize(int phase = 0) const 
# 1403
{ 
# 1404
return (blockSize)[phase]; 
# 1405
} 
# 1407
int Blocks(int phase = 0) const 
# 1408
{ 
# 1409
return (blocks)[phase]; 
# 1410
} 
# 1412
uint SharedMem(int phase = 0) const 
# 1413
{ 
# 1414
return (sharedMemSum)[phase]; 
# 1415
} 
# 1417
std::__cxx11::string name() const 
# 1418
{ 
# 1419
return ((((((((std::__cxx11::string)("Megakernel")) + (MultiElement ? "Dynamic" : ("Simple")))) + (LoadToShared ? "" : ("Globaldata")))) + (">"))) + Q::name(); 
# 1420
} 
# 1422
void release() 
# 1423
{ 
# 1424
delete this; 
# 1425
} 
# 1426
}; 
# 1430
template< int groupId, template< class >  class QUEUE, class PROCINFO, class ApplicationContext = void, MegakernelStopCriteria 
# 1431
StopCriteria = EmptyQueue, int maxShared = 16336, bool LoadToShared = true, bool 
# 1432
MultiElement = true, bool StaticTimelimit = false, bool DynamicTimelimit = false> class Technique; 
# 1436
template< int groupId, template< class >  class QUEUE, class PROCINFO, class ApplicationContext, MegakernelStopCriteria 
# 1437
StopCriteria, int maxShared, bool LoadToShared, bool MultiElement> 
# 1438
class Technique< groupId, QUEUE, PROCINFO, ApplicationContext, StopCriteria, maxShared, LoadToShared, MultiElement, false, false>  : public TechniqueCore< groupId, QUEUE, PROCINFO, ApplicationContext, maxShared, LoadToShared, MultiElement, false, false>  { 
# 1441
typedef MultiPhaseQueue< PROCINFO, QUEUE>  Q; 
# 1443
struct LaunchVisitor { 
# 1445
int phase; 
# 1446
int blocks, blockSize, sharedMemSum; 
# 1447
::uint4 sharedMem; 
# 1448
Q *q; 
# 1449
::cudaStream_t stream; 
# 1450
int *shutdown; 
# 1451
LaunchVisitor(Q *q, int phase, int blocks, int blockSize, int sharedMemSum, ::uint4 
# 1452
sharedMem, ::cudaStream_t stream, int *shutdown) : phase(phase), blocks(blocks), blockSize(blockSize), sharedMemSum(sharedMemSum), sharedMem(sharedMem), q(q), stream(stream), shutdown(shutdown) 
# 1454
{ } 
# 1456
template< class TProcInfo, class TQueue, int Phase> bool 
# 1457
visit() 
# 1458
{ 
# 1459
if ((phase) == Phase) 
# 1460
{ 
# 1461
(::cudaConfigureCall(blocks, blockSize, sharedMemSum, stream)) ? (void)0 : (megakernel< TQueue, TProcInfo, ApplicationContext, LoadToShared, MultiElement, ((TQueue::globalMaintainMinThreads > 0) ? true : false), ::Megakernel::TimeLimiter< 0ULL, false> , StopCriteria> )(reinterpret_cast< TQueue *>(q), sharedMem, 0, shutdown); 
# 1465
return true; 
# 1466
}  
# 1467
return false; 
# 1468
} 
# 1469
}; 
# 1471
struct LaunchVisitorSpecific { 
# 1473
int phase; 
# 1474
int blocks, blockSize, sharedMemSum; 
# 1475
::uint4 sharedMem; 
# 1476
Q *q; 
# 1477
::cudaStream_t stream; 
# 1478
int *shutdown; 
# 1481
int taskCount; 
# 1482
int tGroupId; 
# 1483
LaunchVisitorSpecific(Q *q, int phase, int blocks, int blockSize, int sharedMemSum, ::uint4 
# 1484
sharedMem, ::cudaStream_t stream, int *shutdown, int 
# 1486
taskCount, int tGroupId) : phase(phase), blocks(blocks), blockSize(blockSize), sharedMemSum(sharedMemSum), sharedMem(sharedMem), q(q), stream(stream), shutdown(shutdown), taskCount(taskCount), tGroupId(tGroupId) 
# 1490
{ } 
# 1492
template< class TProcInfo, class TQueue, int Phase> bool 
# 1493
visit() 
# 1494
{ 
# 1495
if ((phase) == Phase) 
# 1496
{ 
# 1506
(::cudaConfigureCall(blocks, blockSize, sharedMemSum, stream)) ? (void)0 : (megakernelSpecific< TQueue, TProcInfo, ApplicationContext, LoadToShared, MultiElement, ((TQueue::globalMaintainMinThreads > 0) ? true : false), ::Megakernel::TimeLimiter< 0ULL, false> , StopCriteria> )(tGroupId, taskCount, reinterpret_cast< TQueue *>(q), sharedMem, 0, shutdown); 
# 1513
return true; 
# 1514
}  
# 1515
return false; 
# 1516
} 
# 1517
}; 
# 1522
public: void execute(int phase = 0, ::cudaStream_t stream = 0, int *shutdown = 0) 
# 1523
{ 
# 1524
typedef ::Megakernel::TechniqueCore< groupId, QUEUE, PROCINFO, ApplicationContext, maxShared, LoadToShared, MultiElement, false, false>  TCore; 
# 1526
TCore::preCall(stream); 
# 1529
LaunchVisitor v(TCore::q, phase, TCore::blocks[phase], TCore::blockSize[phase], TCore::sharedMemSum[phase], TCore::sharedMem[phase], stream, shutdown); 
# 1531
MultiPhaseQueue< PROCINFO, QUEUE> ::template staticVisit< LaunchVisitor> (v); 
# 1533
TCore::postCall(stream); 
# 1534
} 
# 1575
::cudaStream_t executeStreams(int phase = 0, int *shutdown = 0) 
# 1576
{ 
# 1583
int procNum = (PROCINFO::NumProcedures); 
# 1585
typedef ::Megakernel::TechniqueCore< groupId, QUEUE, PROCINFO, ApplicationContext, maxShared, LoadToShared, MultiElement, false, false>  TCore; 
# 1596
int i = streamIndex++; 
# 1599
cudaStreamCreate(&((streamArray)[i])); 
# 1600
TCore::preCall((streamArray)[i]); 
# 1602
LaunchVisitorSpecific v(TCore::q, phase, TCore::blocks[phase], TCore::blockSize[phase], TCore::sharedMemSum[phase], TCore::sharedMem[phase], (streamArray)[i], shutdown, (taskCountArray)[i], groupId); 
# 1606
MultiPhaseQueue< PROCINFO, QUEUE> ::template staticVisit< LaunchVisitorSpecific> (v); 
# 1608
TCore::postCall((streamArray)[i]); 
# 1610
return (streamArray)[i]; 
# 1611
} 
# 1630
}; 
# 1632
template< int groupId, template< class >  class QUEUE, class PROCINFO, class ApplicationContext, MegakernelStopCriteria 
# 1633
StopCriteria, int maxShared, bool LoadToShared, bool MultiElement> 
# 1634
class Technique< groupId, QUEUE, PROCINFO, ApplicationContext, StopCriteria, maxShared, LoadToShared, MultiElement, true, false>  : public TechniqueCore< groupId, QUEUE, PROCINFO, ApplicationContext, maxShared, LoadToShared, MultiElement, true, false>  { 
# 1637
typedef MultiPhaseQueue< PROCINFO, QUEUE>  Q; 
# 1641
public: 
# 1640
template< int Phase, int TimeLimitInKCycles> void 
# 1641
execute(::cudaStream_t stream = 0, int *shutdown = 0) 
# 1642
{ 
# 1643
typedef CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , Phase>  ThisQ; 
# 1645
typedef ::Megakernel::TechniqueCore< groupId, QUEUE, PROCINFO, ApplicationContext, maxShared, LoadToShared, MultiElement, true, false>  TCore; 
# 1647
TCore::preCall(stream); 
# 1649
(::cudaConfigureCall(TCore::blocks[Phase], TCore::blockSize[Phase], TCore::sharedMemSum[Phase], stream)) ? (void)0 : (megakernel< CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , Phase> , typename CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , Phase> ::CurrentPhaseProcInfo, ApplicationContext, LoadToShared, MultiElement, ((CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , Phase> ::globalMaintainMinThreads > 0) ? true : false), TimeLimiter< TimeLimitInKCycles, false> , StopCriteria> )(TCore::q, TCore::sharedMem[Phase], 0, shutdown); 
# 1656
TCore::postCall(stream); 
# 1657
} 
# 1693
template< int Phase> void 
# 1694
execute(::cudaStream_t stream = 0) 
# 1695
{ 
# 1696
return execute< Phase, 0> (stream); 
# 1697
} 
# 1699
template< int Phase> void 
# 1700
executeStreams() 
# 1701
{ 
# 1704
return executeStreams< Phase, 0> (); 
# 1705
} 
# 1706
}; 
# 1708
template< int groupId, template< class >  class QUEUE, class PROCINFO, class ApplicationContext, MegakernelStopCriteria 
# 1709
StopCriteria, int maxShared, bool LoadToShared, bool MultiElement> 
# 1710
class Technique< groupId, QUEUE, PROCINFO, ApplicationContext, StopCriteria, maxShared, LoadToShared, MultiElement, false, true>  : public TechniqueCore< groupId, QUEUE, PROCINFO, ApplicationContext, maxShared, LoadToShared, MultiElement, false, true>  { 
# 1713
typedef MultiPhaseQueue< PROCINFO, QUEUE>  Q; 
# 1715
struct LaunchVisitor { 
# 1717
int phase; 
# 1718
int blocks, blockSize, sharedMemSum; 
# 1719
::uint4 sharedMem; 
# 1720
int timeLimit; 
# 1721
Q *q; 
# 1722
int *shutdown; 
# 1723
LaunchVisitor(Q *q, int phase, int blocks, int blockSize, int sharedMemSum, ::uint4 
# 1724
sharedMem, int timeLimit, int *shutdown) : phase(phase), blocks(blocks), blockSize(blockSize), sharedMemSum(sharedMemSum), sharedMem(sharedMem), timeLimit(timeLimit), q(q), shutdown(shutdown) 
# 1726
{ } 
# 1728
template< class TProcInfo, class TQueue, int Phase> bool 
# 1729
visit() 
# 1730
{ 
# 1731
if ((phase) == Phase) 
# 1732
{ 
# 1733
(::cudaConfigureCall(blocks, blockSize, sharedMemSum)) ? (void)0 : (megakernel< TQueue, TProcInfo, ApplicationContext, LoadToShared, MultiElement, ((TQueue::globalMaintainMinThreads > 0) ? true : false), ::Megakernel::TimeLimiter< 0ULL, true> , StopCriteria> )(reinterpret_cast< TQueue *>(q), sharedMem, timeLimit, shutdown); 
# 1738
return true; 
# 1739
}  
# 1740
return false; 
# 1741
} 
# 1742
}; 
# 1744
struct LaunchVisitorSpecific { 
# 1746
int phase; 
# 1747
int blocks, blockSize, sharedMemSum; 
# 1748
::uint4 sharedMem; 
# 1749
int timeLimit; 
# 1750
Q *q; 
# 1751
int *shutdown; 
# 1752
int *procIdA; 
# 1753
int procNum; 
# 1754
int taskCount; 
# 1755
int tGroupId; 
# 1756
LaunchVisitorSpecific(Q *q, int phase, int blocks, int blockSize, int sharedMemSum, ::uint4 
# 1757
sharedMem, int timeLimit, int *shutdown, int *
# 1758
procIdA, int procNum, int taskCount, int tGroupId) : phase(phase), blocks(blocks), blockSize(blockSize), sharedMemSum(sharedMemSum), sharedMem(sharedMem), timeLimit(timeLimit), q(q), shutdown(shutdown), procIdA(procIdA), procNum(procNum), taskCount(taskCount), tGroupId(tGroupId) 
# 1761
{ } 
# 1763
template< class TProcInfo, class TQueue, int Phase> bool 
# 1764
visit() 
# 1765
{ 
# 1766
if ((phase) == Phase) 
# 1767
{ 
# 1769
(::cudaConfigureCall(blocks, blockSize, sharedMemSum)) ? (void)0 : (megakernelSpecific< TQueue, TProcInfo, ApplicationContext, LoadToShared, MultiElement, ((TQueue::globalMaintainMinThreads > 0) ? true : false), ::Megakernel::TimeLimiter< 0ULL, true> , StopCriteria> )(tGroupId, taskCount, reinterpret_cast< TQueue *>(q), sharedMem, timeLimit, shutdown); 
# 1776
return true; 
# 1777
}  
# 1778
return false; 
# 1779
} 
# 1780
}; 
# 1783
public: void execute(int phase = 0, ::cudaStream_t stream = 0, double timelimitInMs = 0, int *shutdown = 0) 
# 1784
{ 
# 1785
typedef ::Megakernel::TechniqueCore< groupId, QUEUE, PROCINFO, ApplicationContext, maxShared, LoadToShared, MultiElement, false, true>  TCore; 
# 1787
TCore::preCall(stream); 
# 1790
LaunchVisitor v(TCore::q, phase, TCore::blocks[phase], TCore::blockSize[phase], TCore::sharedMemSum[phase], TCore::sharedMem[phase], (timelimitInMs / (1000)) * TCore::freq, stream, shutdown); 
# 1793
MultiPhaseQueue< PROCINFO, QUEUE> ::template staticVisit< LaunchVisitor> (v); 
# 1795
TCore::postCall(stream); 
# 1796
} 
# 1824
}; 
# 1828
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM, MegakernelStopCriteria StopCriteria = EmptyQueue, int maxShared = 16336> 
# 1829
class SimpleShared : public Technique< groupId, Q, PROCINFO, CUSTOM, StopCriteria, maxShared, true, false>  { 
# 1830
}; 
# 1831
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM, MegakernelStopCriteria StopCriteria = EmptyQueue, int maxShared = 16336> 
# 1832
class SimplePointed : public Technique< groupId, Q, PROCINFO, CUSTOM, StopCriteria, maxShared, false, false>  { 
# 1833
}; 
# 1834
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM, MegakernelStopCriteria StopCriteria = EmptyQueue, int maxShared = 16336> 
# 1835
class DynamicShared : public Technique< groupId, Q, PROCINFO, CUSTOM, StopCriteria, maxShared, true, true>  { 
# 1836
}; 
# 1837
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM, MegakernelStopCriteria StopCriteria = EmptyQueue, int maxShared = 16336> 
# 1838
class DynamicPointed : public Technique< groupId, Q, PROCINFO, CUSTOM, StopCriteria, maxShared, false, true>  { 
# 1839
}; 
# 1841
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1842
class SimpleShared16336 : public SimpleShared< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 16336>  { 
# 1843
}; 
# 1845
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1846
class SimpleShared49000 : public SimpleShared< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 49000>  { 
# 1847
}; 
# 1849
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1850
class SimplePointed24576 : public SimplePointed< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 24576>  { 
# 1851
}; 
# 1852
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1853
class SimplePointed16336 : public SimplePointed< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 16336>  { 
# 1854
}; 
# 1855
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1856
class SimplePointed12000 : public SimplePointed< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 12000>  { 
# 1857
}; 
# 1860
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1861
class DynamicShared16336 : public DynamicShared< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 16336>  { 
# 1862
}; 
# 1863
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1864
class DynamicPointed16336 : public DynamicPointed< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 16336>  { 
# 1865
}; 
# 1866
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1867
class DynamicPointed12000 : public DynamicPointed< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 12000>  { 
# 1868
}; 
# 1869
template< int groupId, template< class >  class Q, class PROCINFO, class CUSTOM = void, MegakernelStopCriteria StopCriteria = EmptyQueue> 
# 1870
class DynamicPointed11000 : public DynamicPointed< groupId, Q, PROCINFO, CUSTOM, StopCriteria, 11000>  { 
# 1871
}; 
# 1872
}
# 48 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
namespace SegmentedStorage { 
# 50
void checkReinitStorage(); 
# 51
}
# 53
namespace KernelLaunches { 
# 55
static const int MaxProcs = 1024; 
# 56
extern int queueCounts[MaxProcs]; 
# 59
template< class InitProc, class Q> static void 
# 60
__wrapper__device_stub_initData(Q *&q, int &num) {exit(1);}
#if 0
# 61
{ 
# 62
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 63
for (; id < num; id += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) 
# 64
{ 
# 65
InitProc::template init< Q> (q, id); 
# 66
}  
# 67
} 
#endif
# 59 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class InitProc, class Q> void 
# 60
initData(Q *q, int num) 
# 61
{__wrapper__device_stub_initData<InitProc,Q>(q,num);
# 67
return;}
#if 0
# 61
{ 
# 62
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 63
for (; id < num; id += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) 
# 64
{ 
# 65
InitProc::template init< Q> (q, id); 
# 66
}  
# 67
} 
#endif
# 69 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class Q> static void 
# 70
__wrapper__device_stub_recordData(Q *&q) {exit(1);}
#if 0
# 71
{ 
# 72
(q->record()); 
# 73
} 
#endif
# 69 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class Q> void 
# 70
recordData(Q *q) 
# 71
{__wrapper__device_stub_recordData<Q>(q);
# 73
return;}
#if 0
# 71
{ 
# 72
(q->record()); 
# 73
} 
#endif
# 74 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class Q> static void 
# 75
__wrapper__device_stub_resetData(Q *&q) {exit(1);}
#if 0
# 76
{ 
# 77
(q->reset()); 
# 78
} 
#endif
# 74 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class Q> void 
# 75
resetData(Q *q) 
# 76
{__wrapper__device_stub_resetData<Q>(q);
# 78
return;}
#if 0
# 76
{ 
# 77
(q->reset()); 
# 78
} 
#endif
# 79 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class Q> static void 
# 80
__wrapper__device_stub_readCounts(Q *&q) {exit(1);}
#if 0
# 81
{ 
# 82
(q->numEntries(queueCounts)); 
# 83
} 
#endif
# 79 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class Q> void 
# 80
readCounts(Q *q) 
# 81
{__wrapper__device_stub_readCounts<Q>(q);
# 83
return;}
#if 0
# 81
{ 
# 82
(q->numEntries(queueCounts)); 
# 83
} 
#endif
# 87 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class PROC, class CUSTOM, class Q, bool NoCopy> static void 
# 88
__wrapper__device_stub_executeProc(Q *&q, int &pullElements, int &N, int &prevLaunchedBlocks) {exit(1);}
#if 0
# 89
{ 
# 90
__attribute__((unused)) extern uint s_data[]; 
# 92
int elements = ((pullElements + N) - 1) / N; 
# 94
elements = (max(0, min(elements, pullElements - (elements * (prevLaunchedBlocks + (__device_builtin_variable_blockIdx.x)))))); 
# 96
if (elements == 0) { 
# 97
return; }  
# 98
void *execData = (nullptr); 
# 99
int num, id; 
# 100
const int threads = getThreadCount< PROC> (); 
# 102
num = (q->template reserveRead< PROC> (elements)); 
# 103
id = (q->template startRead< PROC> (execData, num)); 
# 104
__syncthreads(); 
# 107
if (NoCopy) 
# 108
{ 
# 109
if ((__device_builtin_variable_threadIdx.x) < (threads * num)) { 
# 110
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, threads * num, q, reinterpret_cast< typename PROC::ExpectedData *>(execData), s_data); }  
# 112
} else 
# 114
{ 
# 116
if ((__device_builtin_variable_threadIdx.x) < (num * threads)) 
# 117
{ 
# 118
typename PROC::ExpectedData *pdata = reinterpret_cast< typename PROC::ExpectedData *>(execData); 
# 119
(*((typename PROC::ExpectedData *)(s_data + ((sizeof(typename PROC::ExpectedData) / sizeof(uint)) * getThreadOffset< PROC, false> ())))) = (*pdata); 
# 122
}  
# 124
if ((__device_builtin_variable_threadIdx.x) < (threads * num)) 
# 125
{ 
# 127
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, threads * num, q, reinterpret_cast< typename PROC::ExpectedData *>((s_data) + ((((__device_builtin_variable_threadIdx.x) / threads) * sizeof(typename PROC::ExpectedData)) / sizeof(uint))), (s_data) + ((sizeof(typename PROC::ExpectedData) / sizeof(uint)) * num)); 
# 131
}  
# 132
}  
# 134
__syncthreads(); 
# 135
(q->template finishRead< PROC> (id, num)); 
# 136
} 
#endif
# 87 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class PROC, class CUSTOM, class Q, bool NoCopy> void 
# 88
executeProc(Q *q, int pullElements, int N, int prevLaunchedBlocks) 
# 89
{__wrapper__device_stub_executeProc<PROC,CUSTOM,Q,NoCopy>(q,pullElements,N,prevLaunchedBlocks);
# 136
return;}
#if 0
# 89
{ 
# 90
__attribute__((unused)) extern uint s_data[]; 
# 92
int elements = ((pullElements + N) - 1) / N; 
# 94
elements = (max(0, min(elements, pullElements - (elements * (prevLaunchedBlocks + (__device_builtin_variable_blockIdx.x)))))); 
# 96
if (elements == 0) { 
# 97
return; }  
# 98
void *execData = (nullptr); 
# 99
int num, id; 
# 100
const int threads = getThreadCount< PROC> (); 
# 102
num = (q->template reserveRead< PROC> (elements)); 
# 103
id = (q->template startRead< PROC> (execData, num)); 
# 104
__syncthreads(); 
# 107
if (NoCopy) 
# 108
{ 
# 109
if ((__device_builtin_variable_threadIdx.x) < (threads * num)) { 
# 110
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, threads * num, q, reinterpret_cast< typename PROC::ExpectedData *>(execData), s_data); }  
# 112
} else 
# 114
{ 
# 116
if ((__device_builtin_variable_threadIdx.x) < (num * threads)) 
# 117
{ 
# 118
typename PROC::ExpectedData *pdata = reinterpret_cast< typename PROC::ExpectedData *>(execData); 
# 119
(*((typename PROC::ExpectedData *)(s_data + ((sizeof(typename PROC::ExpectedData) / sizeof(uint)) * getThreadOffset< PROC, false> ())))) = (*pdata); 
# 122
}  
# 124
if ((__device_builtin_variable_threadIdx.x) < (threads * num)) 
# 125
{ 
# 127
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, threads * num, q, reinterpret_cast< typename PROC::ExpectedData *>((s_data) + ((((__device_builtin_variable_threadIdx.x) / threads) * sizeof(typename PROC::ExpectedData)) / sizeof(uint))), (s_data) + ((sizeof(typename PROC::ExpectedData) / sizeof(uint)) * num)); 
# 131
}  
# 132
}  
# 134
__syncthreads(); 
# 135
(q->template finishRead< PROC> (id, num)); 
# 136
} 
#endif
# 139 "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh"
template< class PROC, class CUSTOM, class Q, bool NoCopy> int 
# 140
launchKernel(Q *q, int elements, cudaStream_t stream, bool multipleItemsAtOnce) 
# 141
{ 
# 142
if (elements != 0) 
# 143
{ 
# 144
int nThreads = (PROC::NumThreads); 
# 145
if (nThreads == 0) { 
# 146
nThreads = ((PROC::ItemInput) ? 1 : 256); }  
# 148
int blockSize = nThreads; 
# 149
int blocks = 1; 
# 150
int smem = 16; 
# 151
if ((!PROC::ItemInput) || (!multipleItemsAtOnce)) 
# 152
{ 
# 153
blocks = elements; 
# 154
smem = (sizeof(PROC::ExpectedData) + PROC::sharedMemory); 
# 155
} else 
# 157
{ 
# 158
blockSize = (nThreads * elements); 
# 159
if (blockSize > 256) { 
# 160
blockSize = ((256 / nThreads) * nThreads); }  
# 161
blocks = ((((elements * nThreads) + blockSize) - 1) / blockSize); 
# 162
if (NoCopy) { 
# 163
smem = ((blockSize / nThreads) * PROC::sharedMemory); } else { 
# 165
smem = (((((sizeof(PROC::ExpectedData) * (blockSize / nThreads)) + (15)) / (16)) * (16)) + ((blockSize / nThreads) * PROC::sharedMemory)); }  
# 166
}  
# 169
int prevLaunched = 0; 
# 170
int leftblocks = blocks; 
# 171
while (leftblocks > 0) 
# 172
{ 
# 173
int launchblocks = min(leftblocks, 65535); 
# 174
(cudaConfigureCall(launchblocks, blockSize, smem, stream)) ? (void)0 : (executeProc< PROC, CUSTOM, Q, NoCopy> )(q, elements, blocks, prevLaunched); 
# 175
leftblocks -= launchblocks; 
# 176
prevLaunched += launchblocks; 
# 177
}  
# 178
return blocks; 
# 179
}  
# 180
return 0; 
# 181
} 
# 185
template< class Q, class ProcInfo, bool NoCopy> 
# 186
struct ProcLaunchEntry { 
# 188
int &work; 
# 189
std::vector< int>  &procCounts; 
# 190
std::vector< CUstream_st *>  &streams; 
# 191
bool MultipleItemsAtOnce; 
# 192
Q *q; 
# 193
int i; 
# 195
ProcLaunchEntry(Q *q, int &work, std::vector< int>  &procCounts, std::vector< CUstream_st *>  &
# 196
streams, bool MultipleItemsAtOnce) : work(work), procCounts(procCounts), streams(streams), MultipleItemsAtOnce(MultipleItemsAtOnce), q(q), i(0) 
# 197
{ } 
# 198
template< class TProcedure, class CUSTOM> bool 
# 199
visit() 
# 200
{ 
# 202
if ((i) >= (procCounts).size()) { 
# 203
return false; }  
# 204
(work) += launchKernel< TProcedure, CUSTOM, Q, NoCopy> (q, (procCounts)[i], (streams)[i], MultipleItemsAtOnce); 
# 205
++(i); 
# 206
return false; 
# 207
} 
# 208
}; 
# 211
template< template< class >  class QUEUE, class PROCINFO, class ApplicationContext = void, bool 
# 212
Streams = false, bool MultipleItemsAtOnce = true, bool NoCopy = false> 
# 213
class Technique { 
# 215
friend class PhaseVisitor; 
# 217
public: typedef MultiPhaseQueue< PROCINFO, QUEUE>  Q; 
# 220
protected: std::vector< CUstream_st *>  streams; 
# 221
std::unique_ptr< MultiPhaseQueue< PROCINFO, QUEUE> , cuda_deleter>  q; 
# 223
int freq; 
# 226
class PhaseVisitor { 
# 228
Technique &technique; 
# 229
int execPhase; 
# 230
double timeLimitInS; 
# 231
double execT; 
# 234
public: PhaseVisitor(Technique &t, int phase, double timeLimitInS) : technique(t), execPhase(phase), timeLimitInS(timeLimitInS) 
# 235
{ } 
# 237
template< class TProcInfo, class TQ, int Phase> bool 
# 238
visit() 
# 239
{ 
# 240
if (Phase != (execPhase)) { 
# 241
return false; }  
# 243
int numProcs = (TProcInfo::NumProcedures); 
# 246
PointInTime start; 
# 248
std::vector< int>  procCounts(numProcs); 
# 249
int work = 1; 
# 250
while (work > 0) 
# 251
{ 
# 252
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 252); 
# 253
(cudaConfigureCall(1, 1)) ? (void)0 : (readCounts< TQ> )(reinterpret_cast< TQ *>((((technique).q).get()))); 
# 254
Tools::checkError(cudaMemcpyFromSymbol(&procCounts[0], queueCounts, sizeof(int) * numProcs), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 254); 
# 255
work = 0; 
# 257
typedef ProcLaunchEntry< TQ, TProcInfo, NoCopy>  MyProcLaunchEntry; 
# 258
MyProcLaunchEntry visitor(reinterpret_cast< TQ *>((((technique).q).get())), work, procCounts, (technique).streams, MultipleItemsAtOnce); 
# 260
ProcInfoVisitor< TProcInfo, ApplicationContext> ::template HostVisit< ProcLaunchEntry< TQ, TProcInfo, NoCopy> > (visitor); 
# 262
if ((timeLimitInS) > (0)) 
# 263
{ 
# 264
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 264); 
# 265
(execT) = (PointInTime() - start); 
# 266
if ((execT) > (timeLimitInS)) { 
# 267
return true; }  
# 269
}  
# 270
}  
# 272
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 272); 
# 274
PointInTime end; 
# 275
(execT) = (end - start); 
# 276
return true; 
# 277
} 
# 279
double getT() { return execT; } 
# 280
}; 
# 283
public: Technique() { } 
# 285
~Technique() { } 
# 287
void init() 
# 288
{ 
# 289
int numProcs = (PROCINFO::NumProcedures); 
# 290
if (numProcs > MaxProcs) 
# 291
{ 
# 292
printf("ERROR: in KernelLaunches: MaxProcs < NumProcs!\n"); 
# 293
return; 
# 294
}  
# 296
(q) = ((std::unique_ptr< MultiPhaseQueue< PROCINFO, QUEUE> , cuda_deleter> )(cudaAlloc< Q> ())); 
# 297
SegmentedStorage::checkReinitStorage(); 
# 298
(cudaConfigureCall(512, 512)) ? (void)0 : (initQueue< Q> )(((q).get())); 
# 299
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 299); 
# 300
if ((streams).size() < numProcs) 
# 301
{ 
# 302
(streams).resize(numProcs, 0); 
# 303
if (Streams) { 
# 304
for (int i = 0; i < (streams).size(); ++i) { 
# 305
Tools::checkError(cudaStreamCreate(&(streams)[i]), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 305); }  }  
# 306
}  
# 308
int dev; 
# 309
cudaDeviceProp props; 
# 310
Tools::checkError(cudaGetDevice(&dev), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 310); 
# 311
Tools::checkError(cudaGetDeviceProperties(&props, dev), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 311); 
# 312
(freq) = (props.clockRate); 
# 313
} 
# 315
void resetQueue() 
# 316
{ 
# 317
init(); 
# 318
} 
# 320
void recordQueue() 
# 321
{ 
# 322
if (!Q::supportReuseInit) { 
# 323
(std::cout << ("ERROR KernelLaunches::recordQueue(): queue does not support reuse init\n")); } else 
# 325
{ 
# 326
(cudaConfigureCall(1, 1)) ? (void)0 : (recordData< Q> )(((q).get())); 
# 327
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 327); 
# 328
}  
# 329
} 
# 331
void restoreQueue() 
# 332
{ 
# 333
if (!Q::supportReuseInit) { 
# 334
(std::cout << ("ERROR KernelLaunches::restoreQueue(): queue does not support reuse init\n")); } else { 
# 336
(cudaConfigureCall(1, 1)) ? (void)0 : (resetData< Q> )(((q).get())); }  
# 337
} 
# 340
template< class InsertFunc> void 
# 341
insertIntoQueue(int num) 
# 342
{ 
# 343
typedef CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , 0>  Phase0Q; 
# 345
int b = min(((num + 512) - 1) / 512, 104); 
# 346
(cudaConfigureCall(b, 512)) ? (void)0 : (initData< InsertFunc, CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , 0> > )(reinterpret_cast< Phase0Q *>(((q).get())), num); 
# 347
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueKernels.cuh", 347); 
# 348
} 
# 351
std::__cxx11::string name() const 
# 352
{ 
# 353
return ((((((std::__cxx11::string)((Streams && MultipleItemsAtOnce) ? "KernelsMultipleStreams" : (Streams ? "KernelsStreams" : (MultipleItemsAtOnce ? "KernelsMultiple" : ("Kernels"))))) + (NoCopy ? "Global" : ("")))) + (">"))) + Q::name(); 
# 354
} 
# 356
void release() 
# 357
{ 
# 358
delete this; 
# 359
} 
# 362
double execute(int phase = 0, double timelimitInMs = 0) 
# 363
{ 
# 364
PhaseVisitor v(*this, phase, timelimitInMs / (1000.0)); 
# 365
MultiPhaseQueue< PROCINFO, QUEUE> ::template staticVisit< PhaseVisitor> (v); 
# 367
return (v.getT()); 
# 368
} 
# 370
template< int Phase, int TimeLimitInKCycles> double 
# 371
execute() 
# 372
{ 
# 373
return execute(Phase, ((TimeLimitInKCycles) / (static_cast< double>(freq))) * (1000)); 
# 374
} 
# 376
template< int Phase> double 
# 377
execute() 
# 378
{ 
# 379
return execute(Phase, 0); 
# 380
} 
# 382
}; 
# 386
template< template< class >  class QUEUE, class PROCINFO, class ApplicationContext = void> 
# 387
class TechniqueStandard : public Technique< QUEUE, PROCINFO, ApplicationContext, false, false, false>  { }; 
# 389
template< template< class >  class QUEUE, class PROCINFO, class ApplicationContext = void> 
# 390
class TechniqueMultiple : public Technique< QUEUE, PROCINFO, ApplicationContext, false, true, false>  { }; 
# 392
template< template< class >  class QUEUE, class PROCINFO, class ApplicationContext = void> 
# 393
class TechniqueNoCopy : public Technique< QUEUE, PROCINFO, ApplicationContext, false, true, true>  { }; 
# 395
template< template< class >  class QUEUE, class PROCINFO, class ApplicationContext = void> 
# 396
class TechniqueStreams : public Technique< QUEUE, PROCINFO, ApplicationContext, true, true, true>  { }; 
# 398
}
# 47 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
namespace DynamicParallelism { 
# 49
inline uint divup(uint a, uint b) 
# 50
{ 
# 51
return ((a + b) - (1)) / b; 
# 52
} 
# 55
template< class InitProc, class Q> static void 
# 56
__wrapper__device_stub_initData(Q *&q, int &num, int &frame) {exit(1);}
#if 0
# 57
{ 
# 58
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 59
for (; id < num; id += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) 
# 60
{ 
# 61
InitProc::template init< Q> (q, id, frame); 
# 62
}  
# 63
} 
#endif
# 55 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class InitProc, class Q> void 
# 56
initData(Q *q, int num, int frame) 
# 57
{__wrapper__device_stub_initData<InitProc,Q>(q,num,frame);
# 63
return;}
#if 0
# 57
{ 
# 58
int id = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
# 59
for (; id < num; id += ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_gridDim.x))) 
# 60
{ 
# 61
InitProc::template init< Q> (q, id, frame); 
# 62
}  
# 63
} 
#endif
# 65 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class Q> static void 
# 66
__wrapper__device_stub_recordData(Q *&q) {exit(1);}
#if 0
# 67
{ 
# 68
(q->record()); 
# 69
} 
#endif
# 65 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class Q> void 
# 66
recordData(Q *q) 
# 67
{__wrapper__device_stub_recordData<Q>(q);
# 69
return;}
#if 0
# 67
{ 
# 68
(q->record()); 
# 69
} 
#endif
# 70 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class Q> static void 
# 71
__wrapper__device_stub_resetData(Q *&q) {exit(1);}
#if 0
# 72
{ 
# 73
(q->reset()); 
# 74
} 
#endif
# 70 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class Q> void 
# 71
resetData(Q *q) 
# 72
{__wrapper__device_stub_resetData<Q>(q);
# 74
return;}
#if 0
# 72
{ 
# 73
(q->reset()); 
# 74
} 
#endif
# 76 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class PROC, class CUSTOM> void 
# 77
launchKernel(typename PROC::ExpectedData data) 
# 78
{ 
# 80
int nThreads = (PROC::NumThreads); 
# 81
if (nThreads == 0) { 
# 82
nThreads = ((PROC::ItemInput) ? 1 : 256); }  
# 88
} 
# 90
class DynQueue : public Queue<>  { 
# 94
public: 
# 93
template< class PROCEDURE> bool 
# 94
enqueue(typename PROCEDURE::ExpectedData data) 
# 95
{int volatile ___ = 1;(void)data;
# 98
::exit(___);}
#if 0
# 95
{ 
# 96
launchKernel< PROCEDURE> (data); 
# 97
return true; 
# 98
} 
#endif
# 100 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< int threads, class PROCEDURE> bool 
# 101
enqueue(typename PROCEDURE::ExpectedData *data) 
# 102
{int volatile ___ = 1;(void)data;
# 106
::exit(___);}
#if 0
# 102
{ 
# 103
if (((__device_builtin_variable_threadIdx.x) % (threads)) == (0)) { 
# 104
enqueue< PROCEDURE> (*data); }  
# 105
return true; 
# 106
} 
#endif
# 107 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
}; 
# 109
template< class PROC, class CUSTOM> static void 
# 110
__wrapper__device_stub_executeProc(typename PROC::ExpectedData &data) {exit(1);}
#if 0
# 111
{ 
# 112
__attribute__((unused)) extern uint s_data[]; 
# 113
int num = (PROC::NumThreads); 
# 114
if (num == 0) 
# 115
{ 
# 116
if (PROC::ItemInput) { 
# 117
num = 1; } else { 
# 119
num = (__device_builtin_variable_blockDim.x); }  
# 120
}  
# 121
if ((__device_builtin_variable_threadIdx.x) < num) { 
# 122
PROC::template execute< DynQueue, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, num, nullptr, &data, s_data); }  
# 123
} 
#endif
# 109 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class PROC, class CUSTOM> void 
# 110
executeProc(typename PROC::ExpectedData data) 
# 111
{__wrapper__device_stub_executeProc<PROC,CUSTOM>(data);
# 123
return;}
#if 0
# 111
{ 
# 112
__attribute__((unused)) extern uint s_data[]; 
# 113
int num = (PROC::NumThreads); 
# 114
if (num == 0) 
# 115
{ 
# 116
if (PROC::ItemInput) { 
# 117
num = 1; } else { 
# 119
num = (__device_builtin_variable_blockDim.x); }  
# 120
}  
# 121
if ((__device_builtin_variable_threadIdx.x) < num) { 
# 122
PROC::template execute< DynQueue, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, num, nullptr, &data, s_data); }  
# 123
} 
#endif
# 136 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class ProcInfo> 
# 137
struct InitLaunchVisitor { 
# 139
int procId; 
# 140
void *execData; 
# 142
InitLaunchVisitor(int pid, void *data) : procId(pid), execData(data) {int *volatile ___ = 0;(void)pid;(void)data;::free(___);}
#if 0
# 142
{ } 
#endif
# 144 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class TProcedure, class CUSTOM> bool 
# 145
visit() 
# 146
{int volatile ___ = 1;
# 155
::exit(___);}
#if 0
# 146
{ 
# 147
if (findProcId< ProcInfo, TProcedure> ::value == (procId)) 
# 148
{ 
# 149
int nThreads = ((TProcedure::NumThreads == 0) ? Procedure::ItemInput ? 1 : 256 : TProcedure::NumThreads); 
# 150
if (((__device_builtin_variable_threadIdx.x) % nThreads) == (0)) { 
# 151
launchKernel< TProcedure, CUSTOM> (*(reinterpret_cast< typename TProcedure::ExpectedData *>(execData))); }  
# 152
return true; 
# 153
}  
# 154
return false; 
# 155
} 
#endif
# 156 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
}; 
# 158
template< class Q, class PROCINFO, class CUSTOM> static void 
# 159
__wrapper__device_stub_initLaunch(Q *&q, uint4 &sharedMemDist, int &timeLimit) {exit(1);}
#if 0
# 160
{ 
# 165
int arch = 0; 
# 167
if (((__device_builtin_variable_blockIdx.x) == (0)) && ((__device_builtin_variable_threadIdx.x) == (0))) { 
# 168
printf("Error: Dynamic Parallelism needs Compute Capability 3.5 or higher (using %d)\n", arch); }  
# 192
} 
#endif
# 158 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class Q, class PROCINFO, class CUSTOM> void 
# 159
initLaunch(Q *q, uint4 sharedMemDist, int timeLimit) 
# 160
{__wrapper__device_stub_initLaunch<Q,PROCINFO,CUSTOM>(q,sharedMemDist,timeLimit);
# 192
return;}
#if 0
# 160
{ 
# 165
int arch = 0; 
# 167
if (((__device_builtin_variable_blockIdx.x) == (0)) && ((__device_builtin_variable_threadIdx.x) == (0))) { 
# 168
printf("Error: Dynamic Parallelism needs Compute Capability 3.5 or higher (using %d)\n", arch); }  
# 192
} 
#endif
# 195 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< template< class >  class QUEUE, class PROCINFO, class CUSTOM, bool UseQueue = false, bool NoCopy = false> class Technique; 
# 198
template< template< class >  class QUEUE, class PROCINFO, class CUSTOM> 
# 199
class Technique< QUEUE, PROCINFO, CUSTOM, false, false>  { 
# 201
friend struct InitPhaseVisitor; 
# 202
friend class PhaseVisitor; 
# 205
public: typedef MultiPhaseQueue< PROCINFO, QUEUE>  Q; 
# 209
protected: struct InitPhaseVisitor { 
# 211
DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, false, false>  &technique; 
# 212
InitPhaseVisitor(DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, false, false>  &technique) : technique(technique) { } 
# 213
template< class TProcInfo, class TQueue, int Phase> bool 
# 214
visit() 
# 215
{ 
# 217
(((technique).blockSize)[Phase]) = TProcInfo::combMaxNumThreads(); 
# 218
if (((((technique).blockSize)[Phase]) == 0) || TProcInfo::ItemizedOnly()) { 
# 219
(((technique).blockSize)[Phase]) = max(((technique).blockSize)[Phase], 256); }  
# 222
(((technique).sharedMem)[Phase]) = TProcInfo::requiredShared(((technique).blockSize)[Phase], false); 
# 223
((((technique).sharedMem)[Phase]).x) /= 4; 
# 224
((((technique).sharedMem)[Phase]).y) = ((((((technique).sharedMem)[Phase]).y) / 4) + ((((technique).sharedMem)[Phase]).x)); 
# 225
((((technique).sharedMem)[Phase]).z) = ((((((technique).sharedMem)[Phase]).z) / 4) + ((((technique).sharedMem)[Phase]).y)); 
# 227
return false; 
# 228
} 
# 229
}; 
# 232
class PhaseVisitor { 
# 234
DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, false, false>  &technique; 
# 235
int execPhase; 
# 236
double execT; 
# 239
public: PhaseVisitor(DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, false, false>  &t, int phase, double timeLimitInKCycles) : technique(t), execPhase(phase) { } 
# 241
template< class TProcInfo, class TQ, int Phase> bool 
# 242
visit() 
# 243
{ 
# 244
if (Phase != (execPhase)) { 
# 245
return false; }  
# 247
PointInTime start; 
# 250
(cudaConfigureCall(4, ((technique).blockSize)[Phase], ((((technique).sharedMem)[Phase]).y) * 4)) ? (void)0 : (initLaunch< TQ, TProcInfo, CUSTOM> )(reinterpret_cast< TQ *>(((DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, false, false> ::q).get())), ((technique).sharedMem)[Phase]); 
# 251
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 251); 
# 253
PointInTime end; 
# 255
(execT) = (end - start); 
# 256
return true; 
# 257
} 
# 259
double getT() { return execT; } 
# 260
}; 
# 264
int blockSize[PROCINFO::NumPhases]; 
# 265
uint4 sharedMem[PROCINFO::NumPhases]; 
# 267
std::unique_ptr< MultiPhaseQueue< PROCINFO, QUEUE> , cuda_deleter>  q; 
# 269
int freq; 
# 272
public: Technique() 
# 273
{ 
# 274
} 
# 276
void init() 
# 277
{ 
# 278
int d; 
# 279
Tools::checkError(cudaGetDevice(&d), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 279); 
# 280
cudaDeviceProp prop; 
# 281
Tools::checkError(cudaGetDeviceProperties(&prop, d), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 281); 
# 282
(freq) = (static_cast< int>(((static_cast< unsigned long long>(prop.clockRate)) * (1000)) / (1024))); 
# 283
if ((((prop.major) * 10) + (prop.minor)) < 35) 
# 284
{ 
# 285
(((((((((((((std::cout << ("Error Dynamic Parallelism requires CC3.5 or higher (only CC"))) << (prop.major))) << ("."))) << (prop.minor))) << (" available on "))) << (prop.name))) << (std::endl)); 
# 286
return; 
# 287
}  
# 289
(q) = ((std::unique_ptr< MultiPhaseQueue< PROCINFO, QUEUE> , cuda_deleter> )(cudaAlloc< Q> ())); 
# 291
(cudaConfigureCall(512, 512)) ? (void)0 : (initQueue< Q> )(((q).get())); 
# 292
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 292); 
# 294
InitPhaseVisitor v(*this); 
# 295
MultiPhaseQueue< PROCINFO, QUEUE> ::template staticVisit< InitPhaseVisitor> (v); 
# 297
} 
# 299
void resetQueue() 
# 300
{ 
# 301
init(); 
# 302
} 
# 304
void recordQueue() 
# 305
{ 
# 306
if (!Q::supportReuseInit) { 
# 307
(std::cout << ("ERROR DynamicParallelism::recordQueue(): queue does not support reuse init\n")); } else 
# 309
{ 
# 310
(cudaConfigureCall(1, 1)) ? (void)0 : (recordData< Q> )(((q).get())); 
# 311
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 311); 
# 312
}  
# 313
} 
# 315
void restoreQueue() 
# 316
{ 
# 317
if (!Q::supportReuseInit) { 
# 318
(std::cout << ("ERROR DynamicParallelism::restoreQueue(): queue does not support reuse init\n")); } else { 
# 320
(cudaConfigureCall(1, 1)) ? (void)0 : (resetData< Q> )(((q).get())); }  
# 321
} 
# 324
template< class InsertFunc> void 
# 325
insertIntoQueue(int num) 
# 326
{ 
# 327
typedef CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , 0>  Phase0Q; 
# 329
int b = min(((num + 512) - 1) / 512, 104); 
# 330
(cudaConfigureCall(b, 512)) ? (void)0 : (initData< InsertFunc, CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , 0> > )(reinterpret_cast< Phase0Q *>(((q).get())), num); 
# 331
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 331); 
# 332
} 
# 334
std::__cxx11::string name() const 
# 335
{ 
# 336
return "DynamicParallelism>" + Q::name(); 
# 337
} 
# 339
void release() 
# 340
{ 
# 341
delete this; 
# 342
} 
# 345
double execute(int phase = 0, double timelimitInMs = 0) 
# 346
{ 
# 347
if (timelimitInMs != (0)) 
# 348
{ 
# 349
(std::cout << ("ERROR dynamic parallelism does not support a time limit!\n")); 
# 350
return 0; 
# 351
}  
# 352
PhaseVisitor v(*this, phase); 
# 353
MultiPhaseQueue< PROCINFO, QUEUE> ::template staticVisit< PhaseVisitor> (v); 
# 355
return (v.getT()); 
# 356
} 
# 358
template< int Phase, int TimeLimitInKCycles> double 
# 359
execute() 
# 360
{ 
# 361
return execute(Phase, ((TimeLimitInKCycles) / (static_cast< double>(freq))) * (1000)); 
# 362
} 
# 364
template< int Phase> double 
# 365
execute() 
# 366
{ 
# 367
return execute(Phase, 0); 
# 368
} 
# 370
}; 
# 373
int inFlightBlocks; 
# 376
template< class PROC, class CUSTOM, class Q, bool NoCopy> static void 
# 377
__wrapper__device_stub_executeProcPull(Q *&q, int &pullElements) {exit(1);}
#if 0
# 378
{ 
# 379
__attribute__((unused)) extern uint s_data[]; 
# 380
uint *sdata = (uint *)(((((unsigned long long)(s_data)) + (15)) / (16)) * (16)); 
# 381
int elements = ((pullElements + (__device_builtin_variable_gridDim.x)) - (1)) / (__device_builtin_variable_gridDim.x); 
# 382
elements = (max(0, min(elements, pullElements - (elements * (__device_builtin_variable_blockIdx.x))))); 
# 385
if (elements > 0) 
# 386
{ 
# 387
void *execData = (nullptr); 
# 388
int id = (q->template startRead< PROC> (execData, elements)); 
# 389
__syncthreads(); 
# 391
const int threads = getThreadCount< PROC> (); 
# 392
if (NoCopy) 
# 393
{ 
# 394
if ((__device_builtin_variable_threadIdx.x) < (threads * elements)) { 
# 395
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, threads * elements, q, reinterpret_cast< typename PROC::ExpectedData *>(execData), sdata); }  
# 396
} else 
# 398
{ 
# 399
if ((__device_builtin_variable_threadIdx.x) < (elements * threads)) 
# 400
{ 
# 401
typename PROC::ExpectedData *pdata = reinterpret_cast< typename PROC::ExpectedData *>(execData); 
# 402
(*((typename PROC::ExpectedData *)(sdata + ((sizeof(typename PROC::ExpectedData) / sizeof(uint)) * getThreadOffset< PROC, false> ())))) = (*pdata); 
# 403
}  
# 405
if ((__device_builtin_variable_threadIdx.x) < (threads * elements)) { 
# 406
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, threads * elements, q, reinterpret_cast< typename PROC::ExpectedData *>(sdata + ((((__device_builtin_variable_threadIdx.x) / threads) * sizeof(typename PROC::ExpectedData)) / sizeof(uint))), sdata + ((sizeof(typename PROC::ExpectedData) / sizeof(uint)) * elements)); }  
# 407
}  
# 408
__syncthreads(); 
# 409
(q->template finishRead< PROC> (id, elements)); 
# 410
}  
# 411
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 412
atomicSub(&inFlightBlocks, 1); }  
# 413
} 
#endif
# 376 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class PROC, class CUSTOM, class Q, bool NoCopy> void 
# 377
executeProcPull(Q *q, int pullElements) 
# 378
{__wrapper__device_stub_executeProcPull<PROC,CUSTOM,Q,NoCopy>(q,pullElements);
# 413
return;}
#if 0
# 378
{ 
# 379
__attribute__((unused)) extern uint s_data[]; 
# 380
uint *sdata = (uint *)(((((unsigned long long)(s_data)) + (15)) / (16)) * (16)); 
# 381
int elements = ((pullElements + (__device_builtin_variable_gridDim.x)) - (1)) / (__device_builtin_variable_gridDim.x); 
# 382
elements = (max(0, min(elements, pullElements - (elements * (__device_builtin_variable_blockIdx.x))))); 
# 385
if (elements > 0) 
# 386
{ 
# 387
void *execData = (nullptr); 
# 388
int id = (q->template startRead< PROC> (execData, elements)); 
# 389
__syncthreads(); 
# 391
const int threads = getThreadCount< PROC> (); 
# 392
if (NoCopy) 
# 393
{ 
# 394
if ((__device_builtin_variable_threadIdx.x) < (threads * elements)) { 
# 395
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, threads * elements, q, reinterpret_cast< typename PROC::ExpectedData *>(execData), sdata); }  
# 396
} else 
# 398
{ 
# 399
if ((__device_builtin_variable_threadIdx.x) < (elements * threads)) 
# 400
{ 
# 401
typename PROC::ExpectedData *pdata = reinterpret_cast< typename PROC::ExpectedData *>(execData); 
# 402
(*((typename PROC::ExpectedData *)(sdata + ((sizeof(typename PROC::ExpectedData) / sizeof(uint)) * getThreadOffset< PROC, false> ())))) = (*pdata); 
# 403
}  
# 405
if ((__device_builtin_variable_threadIdx.x) < (threads * elements)) { 
# 406
PROC::template execute< Q, Context< PROC::NumThreads, false, CUSTOM> > (__device_builtin_variable_threadIdx.x, threads * elements, q, reinterpret_cast< typename PROC::ExpectedData *>(sdata + ((((__device_builtin_variable_threadIdx.x) / threads) * sizeof(typename PROC::ExpectedData)) / sizeof(uint))), sdata + ((sizeof(typename PROC::ExpectedData) / sizeof(uint)) * elements)); }  
# 407
}  
# 408
__syncthreads(); 
# 409
(q->template finishRead< PROC> (id, elements)); 
# 410
}  
# 411
if ((__device_builtin_variable_threadIdx.x) == (0)) { 
# 412
atomicSub(&inFlightBlocks, 1); }  
# 413
} 
#endif
# 415 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class ProcInfo, class PROC, class CUSTOM, class Q, bool ExecStats, bool NoCopy> __attribute__((unused)) int 
# 416
launchDynKernel(Q *q, int &elements, cudaStream_t stream, int2 &execStat, bool fullonly) 
# 417
{int volatile ___ = 1;(void)q;(void)elements;(void)stream;(void)execStat;(void)fullonly;
# 461
::exit(___);}
#if 0
# 417
{ 
# 460
return 0; 
# 461
} 
#endif
# 463 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class ProcInfo, class Q, bool ExecStats, bool NoCopy> 
# 464
struct LaunchVisitor { 
# 466
bool fullonly; 
# 467
int launched; 
# 468
int i; 
# 469
int *queueCounts; 
# 470
int2 *execStats; 
# 471
cudaStream_t *streams; 
# 472
Q *q; 
# 474
LaunchVisitor(int *_queueCounts, int2 *_execStats, cudaStream_t *_streams, Q *queue) : fullonly(true), launched(0), i(0), queueCounts(_queueCounts), execStats(_execStats), streams(_streams), q(queue) {int *volatile ___ = 0;(void)_queueCounts;(void)_execStats;(void)_streams;(void)queue;::free(___);}
#if 0
# 474
{ } 
#endif
# 476 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
bool runSecondPass() 
# 477
{int volatile ___ = 1;
# 485
::exit(___);}
#if 0
# 477
{ 
# 478
if ((launched) == 0) 
# 479
{ 
# 480
(fullonly) = false; 
# 481
(i) = 0; 
# 482
return true; 
# 483
}  
# 484
return false; 
# 485
} 
#endif
# 486 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class TProcedure, class CUSTOM> bool 
# 487
visit() 
# 488
{int volatile ___ = 1;
# 492
::exit(___);}
#if 0
# 488
{ 
# 489
(launched) += launchDynKernel< ProcInfo, TProcedure, CUSTOM, Q, ExecStats, NoCopy> (q, (queueCounts)[i], (streams)[i], (execStats)[i], fullonly); 
# 490
++(i); 
# 491
return false; 
# 492
} 
#endif
# 493 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
}; 
# 495
template< class PROCINFO, class CUSTOM, class Q, bool ExecStats, bool NoCopy, bool SupportTimelimit> static void 
# 496
__wrapper__device_stub_dynamicParallelismController(Q *&q, int &timeLimitInKCycles) {exit(1);}
#if 0
# 497
{ 
# 502
int arch = 0; 
# 504
if (((__device_builtin_variable_blockIdx.x) == (0)) && ((__device_builtin_variable_threadIdx.x) == (0))) { 
# 505
printf("Error: Dynamic Parallelism needs Compute Capability 3.5 or higher (using %d)\n", arch); }  
# 583
} 
#endif
# 495 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< class PROCINFO, class CUSTOM, class Q, bool ExecStats, bool NoCopy, bool SupportTimelimit> void 
# 496
dynamicParallelismController(Q *q, int timeLimitInKCycles) 
# 497
{__wrapper__device_stub_dynamicParallelismController<PROCINFO,CUSTOM,Q,ExecStats,NoCopy,SupportTimelimit>(q,timeLimitInKCycles);
# 583
return;}
#if 0
# 497
{ 
# 502
int arch = 0; 
# 504
if (((__device_builtin_variable_blockIdx.x) == (0)) && ((__device_builtin_variable_threadIdx.x) == (0))) { 
# 505
printf("Error: Dynamic Parallelism needs Compute Capability 3.5 or higher (using %d)\n", arch); }  
# 583
} 
#endif
# 586 "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh"
template< template< class >  class QUEUE, class PROCINFO, class CUSTOM, bool NoCopy> 
# 587
class Technique< QUEUE, PROCINFO, CUSTOM, true, NoCopy>  { 
# 589
friend class PhaseVisitor; 
# 592
public: typedef MultiPhaseQueue< PROCINFO, QUEUE>  Q; 
# 595
protected: std::unique_ptr< MultiPhaseQueue< PROCINFO, QUEUE> , cuda_deleter>  q; 
# 597
int freq; 
# 599
class PhaseVisitor { 
# 601
DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, true, NoCopy>  &technique; 
# 602
int execPhase; 
# 603
int timeLimitInKCycles; 
# 604
double execT; 
# 607
public: PhaseVisitor(DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, true, NoCopy>  &t, int phase, int timeLimitInKCycles) : technique(t), execPhase(phase), timeLimitInKCycles(timeLimitInKCycles) { } 
# 609
template< class TProcInfo, class TQ, int Phase> bool 
# 610
visit() 
# 611
{ 
# 612
if (Phase != (execPhase)) { 
# 613
return false; }  
# 616
PointInTime start; 
# 618
if ((timeLimitInKCycles) != 0) { 
# 619
(cudaConfigureCall(1, 32)) ? (void)0 : (dynamicParallelismController< TProcInfo, CUSTOM, TQ, NoCopy, 1> )(reinterpret_cast< TQ *>(((DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, true, NoCopy> ::q).get())), timeLimitInKCycles); } else { 
# 621
(cudaConfigureCall(1, 32)) ? (void)0 : (dynamicParallelismController< TProcInfo, CUSTOM, TQ, NoCopy, 0> )(reinterpret_cast< TQ *>(((DynamicParallelism::Technique< QUEUE, PROCINFO, CUSTOM, true, NoCopy> ::q).get())), timeLimitInKCycles); }  
# 622
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 622); 
# 624
PointInTime end; 
# 626
(execT) = (end - start); 
# 627
return true; 
# 628
} 
# 630
double getT() { return execT; } 
# 631
}; 
# 635
public: Technique() { } 
# 637
void init() 
# 638
{ 
# 639
int d; 
# 640
Tools::checkError(cudaGetDevice(&d), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 640); 
# 641
cudaDeviceProp prop; 
# 642
Tools::checkError(cudaGetDeviceProperties(&prop, d), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 642); 
# 643
(freq) = (static_cast< int>(((static_cast< unsigned long long>(prop.clockRate)) * (1000)) / (1024))); 
# 644
if ((((prop.major) * 10) + (prop.minor)) < 35) 
# 645
{ 
# 646
(((((((((((((std::cout << ("Error Dynamic Parallelism requires CC3.5 or higher (only CC"))) << (prop.major))) << ("."))) << (prop.minor))) << (" available on "))) << (prop.name))) << (std::endl)); 
# 647
return; 
# 648
}  
# 650
(q) = ((std::unique_ptr< MultiPhaseQueue< PROCINFO, QUEUE> , cuda_deleter> )(cudaAlloc< Q> ())); 
# 652
(cudaConfigureCall(512, 512)) ? (void)0 : (initQueue< Q> )(((q).get())); 
# 653
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 653); 
# 654
} 
# 656
void resetQueue() 
# 657
{ 
# 658
init(); 
# 659
} 
# 661
void recordQueue() 
# 662
{ 
# 663
if (!Q::supportReuseInit) { 
# 664
(std::cout << ("ERROR DynamicParallelism::recordQueue(): queue does not support reuse init\n")); } else 
# 666
{ 
# 667
(cudaConfigureCall(1, 1)) ? (void)0 : (recordData< Q> )(((q).get())); 
# 668
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 668); 
# 669
}  
# 670
} 
# 672
void restoreQueue() 
# 673
{ 
# 674
if (!Q::supportReuseInit) { 
# 675
(std::cout << ("ERROR DynamicParallelism::restoreQueue(): queue does not support reuse init\n")); } else { 
# 677
(cudaConfigureCall(1, 1)) ? (void)0 : (resetData< Q> )(((q).get())); }  
# 678
} 
# 681
template< class InsertFunc> void 
# 682
insertIntoQueue(int num) 
# 683
{ 
# 684
typedef CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , 0>  Phase0Q; 
# 686
int b = min(((num + 512) - 1) / 512, 104); 
# 687
(cudaConfigureCall(b, 512)) ? (void)0 : (initData< InsertFunc, CurrentMultiphaseQueue< MultiPhaseQueue< PROCINFO, QUEUE> , 0> > )(reinterpret_cast< Phase0Q *>(((q).get())), num); 
# 688
Tools::checkError(cudaDeviceSynchronize(), "/home/zhengzhen/workspace/versapipe/techniqueDynamicParallelism.cuh", 688); 
# 689
} 
# 691
std::__cxx11::string name() const 
# 692
{ 
# 693
return ((((((std::__cxx11::string)("DynamicParallelismWithController")) + (NoCopy ? "NoCopy" : ("")))) + (">"))) + Q::name(); 
# 694
} 
# 696
void release() 
# 697
{ 
# 698
delete (*this); 
# 699
} 
# 704
double execute(int phase = 0, double timelimitInMs = 0) 
# 705
{ 
# 707
PhaseVisitor v(*this, phase, (timelimitInMs / (1000)) * (freq)); 
# 708
MultiPhaseQueue< PROCINFO, QUEUE> ::template staticVisit< PhaseVisitor> (v); 
# 710
return (v.getT()); 
# 711
} 
# 713
template< int Phase, int TimeLimitInKCycles> double 
# 714
execute() 
# 715
{ 
# 716
return execute(Phase, ((TimeLimitInKCycles) / (static_cast< double>(freq))) * (1000)); 
# 717
} 
# 719
template< int Phase> double 
# 720
execute() 
# 721
{ 
# 722
return execute(Phase, 0); 
# 723
} 
# 725
}; 
# 727
template< template< class >  class QUEUE, class PROCINFO, class CUSTOM = void> 
# 728
class TechniqueStandard : public Technique< QUEUE, PROCINFO, CUSTOM, false, false>  { }; 
# 729
template< template< class >  class QUEUE, class PROCINFO, class CUSTOM = void> 
# 730
class TechniqueQueued : public Technique< QUEUE, PROCINFO, CUSTOM, true, false>  { }; 
# 731
template< template< class >  class QUEUE, class PROCINFO, class CUSTOM = void> 
# 732
class TechniqueQueuedNoCopy : public Technique< QUEUE, PROCINFO, CUSTOM, true, true>  { }; 
# 733
}
# 41 "/home/zhengzhen/workspace/versapipe/examples/rasterization/pipeline.cuh"
Pixel pixels_d[50000000]; 
# 42
int numPixs; 
# 44
class Vertex : public Procedure { 
# 47
public: typedef raster_wtri ExpectedData; 
# 48
static const int NumThreads = 1; 
# 49
static const bool ItemInput = true; 
# 51
template< class Q, class Context> static inline void execute(int threadId, int numThreads, Q * queue, ExpectedData * data, volatile uint * shared); 
# 54
}; 
# 56
class Raster : public Procedure { 
# 59
public: typedef raster_stri ExpectedData; 
# 60
static const int NumThreads = 1; 
# 61
static const bool ItemInput = true; 
# 63
template< class Q, class Context> static inline void execute(int threadId, int numThreads, Q * queue, ExpectedData * data, volatile uint * shared); 
# 66
}; 
# 68
class InitProc { 
# 71
public: typedef raster_wtri ExpectedData; 
# 72
template< class Q> static void 
# 74
init(Q *q, int id, ExpectedData *data) 
# 75
{int volatile ___ = 1;(void)q;(void)id;(void)data;
# 84
::exit(___);}
#if 0
# 75
{ 
# 82
(q->template enqueueInitial< Vertex> (*data)); 
# 84
} 
#endif
# 85 "/home/zhengzhen/workspace/versapipe/examples/rasterization/pipeline.cuh"
}; 
# 88
typedef ProcInfo< Vertex, 2, N< Raster, 1> >  procInfo; 
# 89
template< class ProcInfo> 
# 90
class MyQueue : public PerProcedureQueueTyping< QueueDistLocksOpt_t, 10485760U, false> ::Type< ProcInfo>  { }; 
# 91
typedef Megakernel::DynamicPointed16336< 0, MyQueue, ProcInfo< Vertex, 2, N< Raster, 1> > >  MyTechnique; 
# 114
template<> class UserQueueType< 0>  { 
# 119
public: typedef CurrentMultiphaseQueue< MultiPhaseQueue< ProcInfo< Vertex, 2, N< Raster, 1> > , MyQueue> , 0>  Type; 
# 126
}; 
# 169
__attribute__((unused)) inline void enqueueFromVertexToRaster(raster_stri p) {int volatile ___ = 1;(void)p;
# 264
::exit(___);}
#if 0
# 169
{ 
# 170
boundingBoxFixPt bb; 
# 171
computePixelBoundingBoxFixPt_cuda(p, bb); 
# 173
int binSize = (1 << 3); 
# 174
int binsizebits = (4 + 3); 
# 175
int bx1 = ((bb.lo).x) >> binsizebits; 
# 176
int bx2 = ((bb.hi).x) >> binsizebits; 
# 177
int by1 = ((bb.lo).y) >> binsizebits; 
# 178
int by2 = ((bb.hi).y) >> binsizebits; 
# 183
int nBx = (constState_d.screenSizeX) / binSize; 
# 184
int nBy = (constState_d.screenSizeY) / binSize; 
# 190
bx1 = max(0, bx1); 
# 191
by1 = max(0, by1); 
# 192
bx2 = min(bx2, nBx - 1); 
# 193
by2 = min(by2, nBy - 1); 
# 195
{ 
# 196
int x1mx0 = (p.x1) - (p.x0); 
# 197
int x2mx1 = (p.x2) - (p.x1); 
# 198
int x0mx2 = (p.x0) - (p.x2); 
# 199
int y1my0 = (p.y1) - (p.y0); 
# 200
int y2my1 = (p.y2) - (p.y1); 
# 201
int y0my2 = (p.y0) - (p.y2); 
# 203
int startx = bx1 << binsizebits; 
# 204
int starty = by1 << binsizebits; 
# 206
int step0x = -(y1my0 << binsizebits); 
# 207
int step1x = -(y2my1 << binsizebits); 
# 208
int step2x = -(y0my2 << binsizebits); 
# 210
int step0y = +(x1mx0 << binsizebits); 
# 211
int step1y = +(x2mx1 << binsizebits); 
# 212
int step2y = +(x0mx2 << binsizebits); 
# 214
int TRoffset0 = GetTrivialRejectOffset_cuda(x1mx0, y1my0, step0x, step0y); 
# 215
int TRoffset1 = GetTrivialRejectOffset_cuda(x2mx1, y2my1, step1x, step1y); 
# 216
int TRoffset2 = GetTrivialRejectOffset_cuda(x0mx2, y0my2, step2x, step2y); 
# 218
int rowsume0 = (TRoffset0 + ((starty - (p.y0)) * x1mx0)) - ((startx - (p.x0)) * y1my0); 
# 219
int rowsume1 = (TRoffset1 + ((starty - (p.y1)) * x2mx1)) - ((startx - (p.x1)) * y2my1); 
# 220
int rowsume2 = (TRoffset2 + ((starty - (p.y2)) * x0mx2)) - ((startx - (p.x2)) * y0my2); 
# 222
raster_stri newP; 
# 225
#pragma unroll 1
for (
# 225
int by = by1; by <= by2; by += 1) { 
# 227
int trivialRe0 = rowsume0; 
# 228
int trivialRe1 = rowsume1; 
# 229
int trivialRe2 = rowsume2; 
# 232
#pragma unroll 1
for (
# 232
int bx = bx1; bx <= bx2; bx += 1) { 
# 234
if (((trivialRe0 | trivialRe1) | trivialRe2) >= 0) 
# 235
{ 
# 236
(newP = p); 
# 239
(newP.binID) = ((by * nBx) + bx); 
# 244
((UserQueueType< 0> ::Type *)((queuePointers)[0]))->enqueue< Raster> (newP, 0); 
# 252
}  
# 254
trivialRe0 += step0x; 
# 255
trivialRe1 += step1x; 
# 256
trivialRe2 += step2x; 
# 257
}  
# 258
rowsume0 += step0y; 
# 259
rowsume1 += step1y; 
# 260
rowsume2 += step2y; 
# 261
}  
# 262
} 
# 264
} 
#endif
# 266 "/home/zhengzhen/workspace/versapipe/examples/rasterization/pipeline.cuh"
int hahacount; 
# 267
template< class Q, class Context> inline void 
# 268
Vertex::execute(int threadId, int numThreads, Q *
# 269
queue, ExpectedData *data, volatile uint *shared) 
# 270
{int volatile ___ = 1;(void)threadId;(void)numThreads;(void)queue;(void)data;(void)shared;
# 361
::exit(___);}
#if 0
# 270
{ 
# 271
int tmpcnt = atomicAdd(&hahacount, 1); 
# 283
ExpectedData p = *data; 
# 286
float W = (float)(constState_d.screenSizeX); 
# 287
float H = (float)(constState_d.screenSizeY); 
# 289
raster_stri ps; 
# 290
float maxZ, minZ; 
# 294
(ps.x0) = ((int)(((p.worldPos0).x) * (16.0F))); 
# 295
(ps.y0) = ((int)(((p.worldPos0).y) * (16.0F))); 
# 296
(ps.z0) = ((p.worldPos0).z); 
# 297
(ps.x1) = ((int)(((p.worldPos1).x) * (16.0F))); 
# 298
(ps.y1) = ((int)(((p.worldPos1).y) * (16.0F))); 
# 299
(ps.z1) = ((p.worldPos1).z); 
# 300
(ps.x2) = ((int)(((p.worldPos2).x) * (16.0F))); 
# 301
(ps.y2) = ((int)(((p.worldPos2).y) * (16.0F))); 
# 302
(ps.z2) = ((p.worldPos2).z); 
# 303
(ps.icol0) = (p.icol0); 
# 304
(ps.icol1) = (p.icol1); 
# 305
(ps.icol2) = (p.icol2); 
# 333
if (isFrontFacingFixPt_cuda(ps) && isInsideFrustumFixPt_cuda(ps, minZ, maxZ, W * (16), H * (16))) 
# 334
{ 
# 335
boundingBoxFixPt bb; 
# 336
computeBoundingBoxFixPt_cuda(ps, bb); 
# 337
if (!isBBBetweenSamples_cuda(bb)) 
# 338
{ 
# 355
enqueueFromVertexToRaster(ps); 
# 357
}  
# 358
}  
# 361
} 
#endif
# 363 "/home/zhengzhen/workspace/versapipe/examples/rasterization/pipeline.cuh"
__attribute__((unused)) inline float rcp_approx_cuda(float a) {int volatile ___ = 1;(void)a;::exit(___);}
#if 0
# 363
{ float v; __asm__ volatile("rcp.approx.ftz.f32 %0, %1;" : "=f" (v) : "f" (a)); return v; } 
#endif
# 366 "/home/zhengzhen/workspace/versapipe/examples/rasterization/pipeline.cuh"
__attribute__((unused)) inline cvec3f fromABGR_cuda(unsigned color) 
# 367
{int volatile ___ = 1;(void)color;
# 373
::exit(___);}
#if 0
# 367
{ 
# 368
cvec3f ret; 
# 369
(ret.x) = (((float)((color >> 0) & (255))) / (255.0F)); 
# 370
(ret.y) = (((float)((color >> 8) & (255))) / (255.0F)); 
# 371
(ret.z) = (((float)((color >> 16) & (255))) / (255.0F)); 
# 372
return ret; 
# 373
} 
#endif
# 375 "/home/zhengzhen/workspace/versapipe/examples/rasterization/pipeline.cuh"
__attribute__((unused)) inline int imad_cuda(int a, int b, int c) {int volatile ___ = 1;(void)a;(void)b;(void)c;::exit(___);}
#if 0
# 375
{ int v; __asm__ volatile("vmad.s32.s32.s32.sat %0, %1, %2, %3;" : "=r" (v) : "r" (a), "r" (b), "r" (c)); return v; } 
#endif
# 377 "/home/zhengzhen/workspace/versapipe/examples/rasterization/pipeline.cuh"
__attribute__((unused)) inline unsigned toABGR_cuda(cvec3f color) 
# 378
{int volatile ___ = 1;(void)color;
# 380
::exit(___);}
#if 0
# 378
{ 
# 379
return (((255 << 24) | (((unsigned)((color.z) * (255.0F))) << 16)) | (((unsigned)((color.y) * (255.0F))) << 8)) | ((unsigned)((color.x) * (255.0F))); 
# 380
} 
#endif
# 382 "/home/zhengzhen/workspace/versapipe/examples/rasterization/pipeline.cuh"
template< class Q, class Context> inline void 
# 383
Raster::execute(int threadId, int numThreads, Q *
# 384
queue, ExpectedData *data, volatile uint *shared) 
# 385
{int volatile ___ = 1;(void)threadId;(void)numThreads;(void)queue;(void)data;(void)shared;
# 591
::exit(___);}
#if 0
# 385
{ 
# 393
ExpectedData p = *data; 
# 397
boundingBoxFixPt bb; 
# 398
computePixelBoundingBoxFixPt_cuda(p, bb); 
# 402
cvec2i binBeg, binEnd; 
# 403
computeBinExtent_cuda(binBeg, binEnd, (1 << 3) << 4, (constState_d.screenSizeX) / (1 << 3), p.binID); 
# 407
cvec2i pixelBeg, pixelEnd; 
# 408
intersectBBi_cuda(bb.lo, bb.hi, binBeg, binEnd, pixelBeg, pixelEnd); 
# 415
int x1mx0 = (p.x1) - (p.x0); 
# 416
int x2mx1 = (p.x2) - (p.x1); 
# 417
int x0mx2 = (p.x0) - (p.x2); 
# 418
int y1my0 = (p.y1) - (p.y0); 
# 419
int y2my1 = (p.y2) - (p.y1); 
# 420
int y0my2 = (p.y0) - (p.y2); 
# 422
int barydenom = ((-y0my2) * x1mx0) + (x0mx2 * y1my0); 
# 423
float onebybary = rcp_approx_cuda((float)barydenom); 
# 427
cvec2i pixelBegCenter = gencvec2i((pixelBeg.x) + 8, (pixelBeg.y) + 8); 
# 431
int rowsume0 = (((pixelBegCenter.y) - (p.y0)) * x1mx0) - (((pixelBegCenter.x) - (p.x0)) * y1my0); 
# 432
int rowsume1 = (((pixelBegCenter.y) - (p.y1)) * x2mx1) - (((pixelBegCenter.x) - (p.x1)) * y2my1); 
# 433
int rowsume2 = (((pixelBegCenter.y) - (p.y2)) * x0mx2) - (((pixelBegCenter.x) - (p.x2)) * y0my2); 
# 438
cvec3f vcol0 = fromABGR_cuda(p.icol0); 
# 439
cvec3f vcol1 = fromABGR_cuda(p.icol1); 
# 440
cvec3f vcol2 = fromABGR_cuda(p.icol2); 
# 450
int step0x = -(y1my0 << 4); 
# 451
int step1x = -(y2my1 << 4); 
# 452
int step2x = -(y0my2 << 4); 
# 454
int step0y = +(x1mx0 << 4); 
# 455
int step1y = +(x2mx1 << 4); 
# 456
int step2y = +(x0mx2 << 4); 
# 458
bool bFullCov = false; 
# 459
{ 
# 460
int TAoffset0 = GetTrivialAcceptOffset_cuda(x1mx0, y1my0, step0x, step0y); 
# 461
int TAoffset1 = GetTrivialAcceptOffset_cuda(x2mx1, y2my1, step1x, step1y); 
# 462
int TAoffset2 = GetTrivialAcceptOffset_cuda(x0mx2, y0my2, step2x, step2y); 
# 464
int trivialA0 = rowsume0 + (TAoffset0 << 3); 
# 465
int trivialA1 = rowsume1 + (TAoffset1 << 3); 
# 466
int trivialA2 = rowsume2 + (TAoffset2 << 3); 
# 467
bFullCov = ((((trivialA0 | trivialA1) | trivialA2) & 2147483648U) == (0)); 
# 468
} 
# 473
unsigned long long sampleMask; 
# 475
if (bFullCov) 
# 476
{ 
# 477
sampleMask = (18446744073709551615UL); 
# 478
} else 
# 480
{ 
# 481
sampleMask = (0); 
# 484
#pragma unroll 1
for (
# 484
int y = pixelBeg.y; y < (pixelEnd.y); y += 16) { 
# 485
int e0test = rowsume0; 
# 486
int e1test = rowsume1; 
# 487
int e2test = rowsume2; 
# 490
#pragma unroll 1
for (
# 490
int x = pixelBeg.x; x < (pixelEnd.x); x += 16) { 
# 491
if (((e0test | e1test) | e2test) >= 0) 
# 492
{ 
# 494
int bitID = ((x - (binBeg.x)) + ((y - (binBeg.y)) << 3)) >> 4; 
# 496
sampleMask |= (1LL << bitID); 
# 497
}  
# 498
e0test += step0x; 
# 499
e1test += step1x; 
# 500
e2test += step2x; 
# 501
}  
# 502
rowsume0 += step0y; 
# 503
rowsume1 += step1y; 
# 504
rowsume2 += step2y; 
# 505
}  
# 506
}  
# 510
if (sampleMask != (0LL)) 
# 511
{ 
# 512
int covCount = __popcll(sampleMask); 
# 513
unsigned long long tempMask = sampleMask; 
# 515
int rowsume1 = ((((binBeg.y) + 8) - (p.y1)) * x2mx1) - ((((binBeg.x) + 8) - (p.x1)) * y2my1); 
# 517
int rowsume2 = ((((binBeg.y) + 8) - (p.y2)) * x0mx2) - ((((binBeg.x) + 8) - (p.x2)) * y0my2); 
# 519
float z0mz2 = (p.z0) - (p.z2); 
# 520
float z1mz2 = (p.z1) - (p.z2); 
# 522
cvec3f dcol0mcol2 = (vcol0 - vcol2); 
# 523
cvec3f dcol1mcol2 = (vcol1 - vcol2); 
# 526
#pragma unroll 1
for (
# 526
int fragID = 0; fragID < covCount; fragID++) 
# 527
{ 
# 528
int x, y; 
# 529
getSampleIdFromMask_cuda(tempMask, x, y); 
# 530
int e1test = (rowsume1 + (x * step1x)) + (y * step1y); 
# 531
int e2test = (rowsume2 + (x * step2x)) + (y * step2y); 
# 536
x = ((x << 4) + (binBeg.x)); 
# 538
y = ((y << 4) + (binBeg.y)); 
# 540
float alpha = ((float)e1test) * onebybary; 
# 541
float beta = ((float)e2test) * onebybary; 
# 543
float _zbyw = interpolate_alphabeta(z0mz2, z1mz2, p.z2, alpha, beta); 
# 545
int pixelID = imad_cuda(y, constState_d.screenSizeX, x) >> 4; 
# 546
int remoteZi = float_as_int((1.0F)); 
# 547
int _zbywi = float_as_int(_zbyw); 
# 548
int *depthintptr = (int *)(&((mutableState_d.zBuffer)[pixelID])); 
# 551
do { 
# 553
remoteZi = atomicMin(depthintptr, _zbywi); 
# 554
} while (remoteZi > _zbywi); 
# 556
bool depthPassed = remoteZi >= _zbywi; 
# 558
if (depthPassed) 
# 559
{ 
# 560
cvec3f colorf; 
# 563
(colorf.x) = interpolate_alphabeta(dcol0mcol2.x, dcol1mcol2.x, vcol2.x, alpha, beta); 
# 564
(colorf.y) = interpolate_alphabeta(dcol0mcol2.y, dcol1mcol2.y, vcol2.y, alpha, beta); 
# 565
(colorf.z) = interpolate_alphabeta(dcol0mcol2.z, dcol1mcol2.z, vcol2.z, alpha, beta); 
# 578
Pixel pi; 
# 579
((pi.pos).x) = (x >> 4); 
# 580
((pi.pos).y) = (y >> 4); 
# 581
(pi.color) = toABGR_cuda(colorf); 
# 584
(((pixels_d)[atomicAdd(&numPixs, 1)]) = pi); 
# 585
}  
# 586
tempMask &= (tempMask - (1)); 
# 587
}  
# 588
}  
# 591
} 
#endif
# 109 "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h"
thread_local int threadIdx_x = 0; 
# 110
thread_local int blockIdx_x = 0; 
# 111
int blockDim_x = 0; 
# 71 "/usr/include/c++/5/cstring" 3
namespace std __attribute((__visibility__("default"))) { 
# 75
using ::memchr;
# 76
using ::memcmp;
# 77
using ::memcpy;
# 78
using ::memmove;
# 79
using ::memset;
# 80
using ::strcat;
# 81
using ::strcmp;
# 82
using ::strcoll;
# 83
using ::strcpy;
# 84
using ::strcspn;
# 85
using ::strerror;
# 86
using ::strlen;
# 87
using ::strncat;
# 88
using ::strncmp;
# 89
using ::strncpy;
# 90
using ::strspn;
# 91
using ::strtok;
# 92
using ::strxfrm;
# 93
using ::strchr;
# 94
using ::strpbrk;
# 95
using ::strrchr;
# 96
using ::strstr;
# 121
}
# 58 "/usr/include/c++/5/ctime" 3
namespace std { 
# 60
using ::clock_t;
# 61
using ::time_t;
# 62
using ::tm;
# 64
using ::clock;
# 65
using ::difftime;
# 66
using ::mktime;
# 67
using ::time;
# 68
using ::asctime;
# 69
using ::ctime;
# 70
using ::gmtime;
# 71
using ::localtime;
# 72
using ::strftime;
# 73
}
# 43 "/usr/include/c++/5/ratio" 3
namespace std __attribute((__visibility__("default"))) { 
# 55
template< intmax_t _Pn> 
# 56
struct __static_sign : public integral_constant< long, (_Pn < (0)) ? -1 : 1>  { 
# 58
}; 
# 60
template< intmax_t _Pn> 
# 61
struct __static_abs : public integral_constant< long, _Pn * __static_sign< _Pn> ::value>  { 
# 63
}; 
# 65
template< intmax_t _Pn, intmax_t _Qn> 
# 66
struct __static_gcd : public __static_gcd< _Qn, _Pn % _Qn>  { 
# 68
}; 
# 70
template< intmax_t _Pn> 
# 71
struct __static_gcd< _Pn, 0>  : public integral_constant< long, __static_abs< _Pn> ::value>  { 
# 73
}; 
# 75
template< intmax_t _Qn> 
# 76
struct __static_gcd< 0, _Qn>  : public integral_constant< long, __static_abs< _Qn> ::value>  { 
# 78
}; 
# 86
template< intmax_t _Pn, intmax_t _Qn> 
# 87
struct __safe_multiply { 
# 90
private: static const uintmax_t __c = (((uintmax_t)1) << (sizeof(intmax_t) * (4))); 
# 92
static const uintmax_t __a0 = (__static_abs< _Pn> ::value % __c); 
# 93
static const uintmax_t __a1 = (__static_abs< _Pn> ::value / __c); 
# 94
static const uintmax_t __b0 = (__static_abs< _Qn> ::value % __c); 
# 95
static const uintmax_t __b1 = (__static_abs< _Qn> ::value / __c); 
# 97
static_assert(((__a1 == (0)) || (__b1 == (0))), "overflow in multiplication");
# 99
static_assert((((__a0 * __b1) + (__b0 * __a1)) < (__c >> 1)), "overflow in multiplication");
# 101
static_assert(((__b0 * __a0) <= (9223372036854775807L)), "overflow in multiplication");
# 103
static_assert(((((__a0 * __b1) + (__b0 * __a1)) * __c) <= ((9223372036854775807L) - (__b0 * __a0))), "overflow in multiplication");
# 108
public: static const intmax_t value = (_Pn * _Qn); 
# 109
}; 
# 113
template< uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2> 
# 114
struct __big_less : public integral_constant< bool, (__hi1 < __hi2) || ((__hi1 == __hi2) && (__lo1 < __lo2))>  { 
# 117
}; 
# 119
template< uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2> 
# 120
struct __big_add { 
# 122
static constexpr uintmax_t __lo = (__lo1 + __lo2); 
# 123
static constexpr uintmax_t __hi = ((__hi1 + __hi2) + ((__lo1 + __lo2) < __lo1)); 
# 125
}; 
# 128
template< uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2> 
# 129
struct __big_sub { 
# 131
static_assert((!__big_less< __hi1, __lo1, __hi2, __lo2> ::value), "Internal library error");
# 133
static constexpr uintmax_t __lo = (__lo1 - __lo2); 
# 134
static constexpr uintmax_t __hi = ((__hi1 - __hi2) - (__lo1 < __lo2)); 
# 136
}; 
# 139
template< uintmax_t __x, uintmax_t __y> 
# 140
struct __big_mul { 
# 143
private: static constexpr uintmax_t __c = (((uintmax_t)1) << (sizeof(intmax_t) * (4))); 
# 144
static constexpr uintmax_t __x0 = (__x % __c); 
# 145
static constexpr uintmax_t __x1 = (__x / __c); 
# 146
static constexpr uintmax_t __y0 = (__y % __c); 
# 147
static constexpr uintmax_t __y1 = (__y / __c); 
# 148
static constexpr uintmax_t __x0y0 = (__x0 * __y0); 
# 149
static constexpr uintmax_t __x0y1 = (__x0 * __y1); 
# 150
static constexpr uintmax_t __x1y0 = (__x1 * __y0); 
# 151
static constexpr uintmax_t __x1y1 = (__x1 * __y1); 
# 152
static constexpr uintmax_t __mix = (__x0y1 + __x1y0); 
# 153
static constexpr uintmax_t __mix_lo = (__mix * __c); 
# 154
static constexpr uintmax_t __mix_hi = ((__mix / __c) + ((__mix < __x0y1) ? __c : (0))); 
# 156
typedef __big_add< __mix_hi, __mix_lo, __x1y1, __x0y0>  _Res; 
# 158
public: static constexpr uintmax_t __hi = (_Res::__hi); 
# 159
static constexpr uintmax_t __lo = (_Res::__lo); 
# 160
}; 
# 164
template< uintmax_t __n1, uintmax_t __n0, uintmax_t __d> 
# 165
struct __big_div_impl { 
# 168
static_assert((__d >= (((uintmax_t)1) << ((sizeof(intmax_t) * (8)) - (1)))), "Internal library error");
# 170
static_assert((__n1 < __d), "Internal library error");
# 171
private: static constexpr uintmax_t __c = (((uintmax_t)1) << (sizeof(intmax_t) * (4))); 
# 172
static constexpr uintmax_t __d1 = (__d / __c); 
# 173
static constexpr uintmax_t __d0 = (__d % __c); 
# 175
static constexpr uintmax_t __q1x = (__n1 / __d1); 
# 176
static constexpr uintmax_t __r1x = (__n1 % __d1); 
# 177
static constexpr uintmax_t __m = (__q1x * __d0); 
# 178
static constexpr uintmax_t __r1y = ((__r1x * __c) + (__n0 / __c)); 
# 179
static constexpr uintmax_t __r1z = (__r1y + __d); 
# 180
static constexpr uintmax_t __r1 = (((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m)) ? __r1z + __d : __r1z : __r1y) - __m); 
# 183
static constexpr uintmax_t __q1 = (__q1x - ((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m)) ? 2 : 1 : 0)); 
# 186
static constexpr uintmax_t __q0x = (__r1 / __d1); 
# 187
static constexpr uintmax_t __r0x = (__r1 % __d1); 
# 188
static constexpr uintmax_t __n = (__q0x * __d0); 
# 189
static constexpr uintmax_t __r0y = ((__r0x * __c) + (__n0 % __c)); 
# 190
static constexpr uintmax_t __r0z = (__r0y + __d); 
# 191
static constexpr uintmax_t __r0 = (((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n)) ? __r0z + __d : __r0z : __r0y) - __n); 
# 194
static constexpr uintmax_t __q0 = (__q0x - ((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n)) ? 2 : 1 : 0)); 
# 199
public: static constexpr uintmax_t __quot = ((__q1 * __c) + __q0); 
# 200
static constexpr uintmax_t __rem = __r0; 
# 203
private: typedef __big_mul< __quot, __d>  _Prod; 
# 204
typedef __big_add< __big_mul< __quot, __d> ::__hi, __big_mul< __quot, __d> ::__lo, 0UL, __rem>  _Sum; 
# 205
static_assert(((_Sum::__hi == __n1) && (_Sum::__lo == __n0)), "Internal library error");
# 207
}; 
# 209
template< uintmax_t __n1, uintmax_t __n0, uintmax_t __d> 
# 210
struct __big_div { 
# 213
static_assert((__d != (0)), "Internal library error");
# 214
static_assert((sizeof(uintmax_t) == sizeof(unsigned long long)), "This library calls __builtin_clzll on uintmax_t, which is unsafe on your platform. Please complain to http://gcc.gnu.org/bugzill" "a/");
# 218
private: static constexpr int __shift = __builtin_clzll(__d); 
# 219
static constexpr int __coshift_ = ((sizeof(uintmax_t) * (8)) - __shift); 
# 220
static constexpr int __coshift = ((__shift != 0) ? __coshift_ : 0); 
# 221
static constexpr uintmax_t __c1 = (((uintmax_t)1) << __shift); 
# 222
static constexpr uintmax_t __c2 = (((uintmax_t)1) << __coshift); 
# 223
static constexpr uintmax_t __new_d = (__d * __c1); 
# 224
static constexpr uintmax_t __new_n0 = (__n0 * __c1); 
# 225
static constexpr uintmax_t __n1_shifted = ((__n1 % __d) * __c1); 
# 226
static constexpr uintmax_t __n0_top = ((__shift != 0) ? __n0 / __c2 : (0)); 
# 227
static constexpr uintmax_t __new_n1 = (__n1_shifted + __n0_top); 
# 228
typedef __big_div_impl< __new_n1, __new_n0, __new_d>  _Res; 
# 231
public: static constexpr uintmax_t __quot_hi = (__n1 / __d); 
# 232
static constexpr uintmax_t __quot_lo = (_Res::__quot); 
# 233
static constexpr uintmax_t __rem = (_Res::__rem / __c1); 
# 236
private: typedef __big_mul< __quot_lo, __d>  _P0; 
# 237
typedef __big_mul< __quot_hi, __d>  _P1; 
# 238
typedef __big_add< __big_mul< __quot_lo, __d> ::__hi, __big_mul< __quot_lo, __d> ::__lo, __big_mul< __quot_hi, __d> ::__lo, __rem>  _Sum; 
# 240
static_assert((_P1::__hi == 0), "Internal library error");
# 241
static_assert((_Sum::__hi >= _P0::__hi), "Internal library error");
# 243
static_assert(((_Sum::__hi == __n1) && (_Sum::__lo == __n0)), "Internal library error");
# 245
static_assert((__rem < __d), "Internal library error");
# 246
}; 
# 262
template< intmax_t _Num, intmax_t _Den = 1L> 
# 263
struct ratio { 
# 265
static_assert((_Den != (0)), "denominator cannot be zero");
# 266
static_assert(((_Num >= (-9223372036854775807L)) && (_Den >= (-9223372036854775807L))), "out of range");
# 270
static constexpr intmax_t num = ((_Num * __static_sign< _Den> ::value) / __static_gcd< _Num, _Den> ::value); 
# 273
static constexpr intmax_t den = (__static_abs< _Den> ::value / __static_gcd< _Num, _Den> ::value); 
# 276
typedef std::ratio< num, den>  type; 
# 277
}; 
# 279
template< intmax_t _Num, intmax_t _Den> constexpr intmax_t 
# 280
ratio< _Num, _Den> ::num; 
# 282
template< intmax_t _Num, intmax_t _Den> constexpr intmax_t 
# 283
ratio< _Num, _Den> ::den; 
# 285
template< class _R1, class _R2> 
# 286
struct __ratio_multiply { 
# 289
private: static const intmax_t __gcd1 = (__static_gcd< _R1::num, _R2::den> ::value); 
# 291
static const intmax_t __gcd2 = (__static_gcd< _R2::num, _R1::den> ::value); 
# 299
public: typedef ratio< __safe_multiply< _R1::num / __gcd1, _R2::num / __gcd2> ::value, __safe_multiply< _R1::den / __gcd2, _R2::den / __gcd1> ::value>  type; 
# 301
static constexpr intmax_t num = (type::num); 
# 302
static constexpr intmax_t den = (type::den); 
# 303
}; 
# 305
template< class _R1, class _R2> constexpr intmax_t 
# 306
__ratio_multiply< _R1, _R2> ::num; 
# 308
template< class _R1, class _R2> constexpr intmax_t 
# 309
__ratio_multiply< _R1, _R2> ::den; 
# 312
template< class _R1, class _R2> using ratio_multiply = typename __ratio_multiply< _R1, _R2> ::type; 
# 315
template< class _R1, class _R2> 
# 316
struct __ratio_divide { 
# 318
static_assert((_R2::num != 0), "division by 0");
# 322
typedef typename __ratio_multiply< _R1, ratio< _R2::den, _R2::num> > ::type type; 
# 324
static constexpr intmax_t num = (type::num); 
# 325
static constexpr intmax_t den = (type::den); 
# 326
}; 
# 328
template< class _R1, class _R2> constexpr intmax_t 
# 329
__ratio_divide< _R1, _R2> ::num; 
# 331
template< class _R1, class _R2> constexpr intmax_t 
# 332
__ratio_divide< _R1, _R2> ::den; 
# 335
template< class _R1, class _R2> using ratio_divide = typename __ratio_divide< _R1, _R2> ::type; 
# 339
template< class _R1, class _R2> 
# 340
struct ratio_equal : public integral_constant< bool, (_R1::num == _R2::num) && (_R1::den == _R2::den)>  { 
# 342
}; 
# 345
template< class _R1, class _R2> 
# 346
struct ratio_not_equal : public integral_constant< bool, !ratio_equal< _R1, _R2> ::value>  { 
# 348
}; 
# 351
template< class _R1, class _R2, class 
# 352
_Left = __big_mul< _R1::num, _R2::den> , class 
# 353
_Right = __big_mul< _R2::num, _R1::den> > 
# 354
struct __ratio_less_impl_1 : public integral_constant< bool, __big_less< _Left::__hi, _Left::__lo, _Right::__hi, _Right::__lo> ::value>  { 
# 357
}; 
# 359
template< class _R1, class _R2, bool 
# 360
 = ((_R1::num == 0) || (_R2::num == 0)) || (__static_sign< _R1::num> ::value != __static_sign< _R2::num> ::value), bool 
# 363
 = (__static_sign< _R1::num> ::value == (-1)) && (__static_sign< _R2::num> ::value == (-1))> 
# 365
struct __ratio_less_impl : public __ratio_less_impl_1< _R1, _R2> ::type { 
# 367
}; 
# 369
template< class _R1, class _R2> 
# 370
struct __ratio_less_impl< _R1, _R2, true, false>  : public integral_constant< bool, _R1::num < _R2::num>  { 
# 372
}; 
# 374
template< class _R1, class _R2> 
# 375
struct __ratio_less_impl< _R1, _R2, false, true>  : public __ratio_less_impl_1< ratio< -_R2::num, _R2::den> , ratio< -_R1::num, _R1::den> > ::type { 
# 378
}; 
# 381
template< class _R1, class _R2> 
# 382
struct ratio_less : public __ratio_less_impl< _R1, _R2> ::type { 
# 384
}; 
# 387
template< class _R1, class _R2> 
# 388
struct ratio_less_equal : public integral_constant< bool, !ratio_less< _R2, _R1> ::value>  { 
# 390
}; 
# 393
template< class _R1, class _R2> 
# 394
struct ratio_greater : public integral_constant< bool, ratio_less< _R2, _R1> ::value>  { 
# 396
}; 
# 399
template< class _R1, class _R2> 
# 400
struct ratio_greater_equal : public integral_constant< bool, !ratio_less< _R1, _R2> ::value>  { 
# 402
}; 
# 404
template< class _R1, class _R2, bool 
# 405
 = _R1::num >= 0, bool 
# 406
 = _R2::num >= 0, bool 
# 407
 = ratio_less< ratio< __static_abs< _R1::num> ::value, _R1::den> , ratio< __static_abs< _R2::num> ::value, _R2::den> > ::value> 
# 409
struct __ratio_add_impl { 
# 414
private: typedef typename std::__ratio_add_impl< ratio< -_R1::num, _R1::den> , ratio< -_R2::num, _R2::den> > ::type __t; 
# 416
public: typedef ratio< -std::__ratio_add_impl< ratio< -_R1::num, _R1::den> , ratio< -_R2::num, _R2::den> > ::type::num, std::__ratio_add_impl< ratio< -_R1::num, _R1::den> , ratio< -_R2::num, _R2::den> > ::type::den>  type; 
# 417
}; 
# 420
template< class _R1, class _R2, bool __b> 
# 421
struct __ratio_add_impl< _R1, _R2, true, true, __b>  { 
# 424
private: static constexpr uintmax_t __g = (__static_gcd< _R1::den, _R2::den> ::value); 
# 425
static constexpr uintmax_t __d2 = (_R2::den / __g); 
# 426
typedef __big_mul< _R1::den, __d2>  __d; 
# 427
typedef __big_mul< _R1::num, _R2::den / __g>  __x; 
# 428
typedef __big_mul< _R2::num, _R1::den / __g>  __y; 
# 429
typedef __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo>  __n; 
# 430
static_assert((__n::__hi >= __x::__hi), "Internal library error");
# 431
typedef __big_div< __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__hi, __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__lo, __g>  __ng; 
# 432
static constexpr uintmax_t __g2 = (__static_gcd< __big_div< __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__hi, __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__lo, __g> ::__rem, __g> ::value); 
# 433
typedef __big_div< __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__hi, __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__lo, __g2>  __n_final; 
# 434
static_assert((__n_final::__rem == 0), "Internal library error");
# 435
static_assert(((__n_final::__quot_hi == 0) && (__n_final::__quot_lo <= 9223372036854775807L)), "overflow in addition");
# 437
typedef __big_mul< _R1::den / __g2, __d2>  __d_final; 
# 438
static_assert(((__d_final::__hi == 0) && (__d_final::__lo <= 9223372036854775807L)), "overflow in addition");
# 441
public: typedef ratio< __big_div< __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__hi, __big_add< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< _R2::num, _R1::den / __g> ::__hi, __big_mul< _R2::num, _R1::den / __g> ::__lo> ::__lo, __g2> ::__quot_lo, __big_mul< _R1::den / __g2, __d2> ::__lo>  type; 
# 442
}; 
# 444
template< class _R1, class _R2> 
# 445
struct __ratio_add_impl< _R1, _R2, false, true, true>  : public __ratio_add_impl< _R2, _R1>  { 
# 447
}; 
# 450
template< class _R1, class _R2> 
# 451
struct __ratio_add_impl< _R1, _R2, true, false, false>  { 
# 454
private: static constexpr uintmax_t __g = (__static_gcd< _R1::den, _R2::den> ::value); 
# 455
static constexpr uintmax_t __d2 = (_R2::den / __g); 
# 456
typedef __big_mul< _R1::den, __d2>  __d; 
# 457
typedef __big_mul< _R1::num, _R2::den / __g>  __x; 
# 458
typedef __big_mul< -_R2::num, _R1::den / __g>  __y; 
# 459
typedef __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo>  __n; 
# 460
typedef __big_div< __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__hi, __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__lo, __g>  __ng; 
# 461
static constexpr uintmax_t __g2 = (__static_gcd< __big_div< __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__hi, __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__lo, __g> ::__rem, __g> ::value); 
# 462
typedef __big_div< __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__hi, __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__lo, __g2>  __n_final; 
# 463
static_assert((__n_final::__rem == 0), "Internal library error");
# 464
static_assert(((__n_final::__quot_hi == 0) && (__n_final::__quot_lo <= 9223372036854775807L)), "overflow in addition");
# 466
typedef __big_mul< _R1::den / __g2, __d2>  __d_final; 
# 467
static_assert(((__d_final::__hi == 0) && (__d_final::__lo <= 9223372036854775807L)), "overflow in addition");
# 470
public: typedef ratio< __big_div< __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__hi, __big_sub< __big_mul< _R1::num, _R2::den / __g> ::__hi, __big_mul< _R1::num, _R2::den / __g> ::__lo, __big_mul< -_R2::num, _R1::den / __g> ::__hi, __big_mul< -_R2::num, _R1::den / __g> ::__lo> ::__lo, __g2> ::__quot_lo, __big_mul< _R1::den / __g2, __d2> ::__lo>  type; 
# 471
}; 
# 473
template< class _R1, class _R2> 
# 474
struct __ratio_add { 
# 476
typedef typename __ratio_add_impl< _R1, _R2> ::type type; 
# 477
static constexpr intmax_t num = (type::num); 
# 478
static constexpr intmax_t den = (type::den); 
# 479
}; 
# 481
template< class _R1, class _R2> constexpr intmax_t 
# 482
__ratio_add< _R1, _R2> ::num; 
# 484
template< class _R1, class _R2> constexpr intmax_t 
# 485
__ratio_add< _R1, _R2> ::den; 
# 488
template< class _R1, class _R2> using ratio_add = typename __ratio_add< _R1, _R2> ::type; 
# 491
template< class _R1, class _R2> 
# 492
struct __ratio_subtract { 
# 496
typedef typename __ratio_add< _R1, ratio< -_R2::num, _R2::den> > ::type type; 
# 498
static constexpr intmax_t num = (type::num); 
# 499
static constexpr intmax_t den = (type::den); 
# 500
}; 
# 502
template< class _R1, class _R2> constexpr intmax_t 
# 503
__ratio_subtract< _R1, _R2> ::num; 
# 505
template< class _R1, class _R2> constexpr intmax_t 
# 506
__ratio_subtract< _R1, _R2> ::den; 
# 509
template< class _R1, class _R2> using ratio_subtract = typename __ratio_subtract< _R1, _R2> ::type; 
# 513
typedef ratio< 1L, 1000000000000000000L>  atto; 
# 514
typedef ratio< 1L, 1000000000000000L>  femto; 
# 515
typedef ratio< 1L, 1000000000000L>  pico; 
# 516
typedef ratio< 1L, 1000000000L>  nano; 
# 517
typedef ratio< 1L, 1000000L>  micro; 
# 518
typedef ratio< 1L, 1000L>  milli; 
# 519
typedef ratio< 1L, 100L>  centi; 
# 520
typedef ratio< 1L, 10L>  deci; 
# 521
typedef ratio< 10L, 1L>  deca; 
# 522
typedef ratio< 100L, 1L>  hecto; 
# 523
typedef ratio< 1000L, 1L>  kilo; 
# 524
typedef ratio< 1000000L, 1L>  mega; 
# 525
typedef ratio< 1000000000L, 1L>  giga; 
# 526
typedef ratio< 1000000000000L, 1L>  tera; 
# 527
typedef ratio< 1000000000000000L, 1L>  peta; 
# 528
typedef ratio< 1000000000000000000L, 1L>  exa; 
# 532
}
# 46 "/usr/include/c++/5/chrono" 3
namespace std __attribute((__visibility__("default"))) { 
# 59
namespace chrono { 
# 63
template< class _Rep, class _Period = ratio< 1> > struct duration; 
# 66
template< class _Clock, class _Dur = typename _Clock::duration> struct time_point; 
# 70
}
# 76
template< class _CT, class _Period1, class _Period2> 
# 77
struct __duration_common_type_wrapper { 
# 80
private: typedef __static_gcd< _Period1::num, _Period2::num>  __gcd_num; 
# 81
typedef __static_gcd< _Period1::den, _Period2::den>  __gcd_den; 
# 82
typedef typename _CT::type __cr; 
# 84
typedef ratio< __static_gcd< _Period1::num, _Period2::num> ::value, (_Period1::den / __static_gcd< _Period1::den, _Period2::den> ::value) * _Period2::den>  __r; 
# 86
public: typedef __success_type< chrono::duration< typename _CT::type, ratio< __static_gcd< _Period1::num, _Period2::num> ::value, (_Period1::den / __static_gcd< _Period1::den, _Period2::den> ::value) * _Period2::den> > >  type; 
# 87
}; 
# 89
template< class _Period1, class _Period2> 
# 90
struct __duration_common_type_wrapper< __failure_type, _Period1, _Period2>  { 
# 91
typedef __failure_type type; }; 
# 93
template< class _Rep1, class _Period1, class _Rep2, class _Period2> 
# 94
struct common_type< chrono::duration< _Rep1, _Period1> , chrono::duration< _Rep2, _Period2> >  : public __duration_common_type_wrapper< typename __member_type_wrapper< common_type< _Rep1, _Rep2> > ::type, _Period1, _Period2> ::type { 
# 98
}; 
# 102
template< class _CT, class _Clock> 
# 103
struct __timepoint_common_type_wrapper { 
# 106
typedef __success_type< chrono::time_point< _Clock, typename _CT::type> >  type; 
# 107
}; 
# 109
template< class _Clock> 
# 110
struct __timepoint_common_type_wrapper< __failure_type, _Clock>  { 
# 111
typedef __failure_type type; }; 
# 113
template< class _Clock, class _Duration1, class _Duration2> 
# 114
struct common_type< chrono::time_point< _Clock, _Duration1> , chrono::time_point< _Clock, _Duration2> >  : public __timepoint_common_type_wrapper< typename __member_type_wrapper< common_type< _Duration1, _Duration2> > ::type, _Clock> ::type { 
# 118
}; 
# 122
namespace chrono { 
# 127
template< class _ToDur, class _CF, class _CR, bool 
# 128
_NumIsOne = false, bool _DenIsOne = false> 
# 129
struct __duration_cast_impl { 
# 131
template< class _Rep, class _Period> static constexpr _ToDur 
# 133
__cast(const duration< _Rep, _Period>  &__d) 
# 134
{ 
# 135
typedef typename _ToDur::rep __to_rep; 
# 136
return (_ToDur)(static_cast< __to_rep>(((static_cast< _CR>((__d.count()))) * (static_cast< _CR>(_CF::num))) / (static_cast< _CR>(_CF::den)))); 
# 139
} 
# 140
}; 
# 142
template< class _ToDur, class _CF, class _CR> 
# 143
struct __duration_cast_impl< _ToDur, _CF, _CR, true, true>  { 
# 145
template< class _Rep, class _Period> static constexpr _ToDur 
# 147
__cast(const duration< _Rep, _Period>  &__d) 
# 148
{ 
# 149
typedef typename _ToDur::rep __to_rep; 
# 150
return (_ToDur)(static_cast< __to_rep>((__d.count()))); 
# 151
} 
# 152
}; 
# 154
template< class _ToDur, class _CF, class _CR> 
# 155
struct __duration_cast_impl< _ToDur, _CF, _CR, true, false>  { 
# 157
template< class _Rep, class _Period> static constexpr _ToDur 
# 159
__cast(const duration< _Rep, _Period>  &__d) 
# 160
{ 
# 161
typedef typename _ToDur::rep __to_rep; 
# 162
return (_ToDur)(static_cast< __to_rep>((static_cast< _CR>((__d.count()))) / (static_cast< _CR>(_CF::den)))); 
# 164
} 
# 165
}; 
# 167
template< class _ToDur, class _CF, class _CR> 
# 168
struct __duration_cast_impl< _ToDur, _CF, _CR, false, true>  { 
# 170
template< class _Rep, class _Period> static constexpr _ToDur 
# 172
__cast(const duration< _Rep, _Period>  &__d) 
# 173
{ 
# 174
typedef typename _ToDur::rep __to_rep; 
# 175
return (_ToDur)(static_cast< __to_rep>((static_cast< _CR>((__d.count()))) * (static_cast< _CR>(_CF::num)))); 
# 177
} 
# 178
}; 
# 180
template< class _Tp> 
# 181
struct __is_duration : public false_type { 
# 183
}; 
# 185
template< class _Rep, class _Period> 
# 186
struct __is_duration< duration< _Rep, _Period> >  : public true_type { 
# 188
}; 
# 191
template< class _ToDur, class _Rep, class _Period> constexpr typename enable_if< __is_duration< _ToDur> ::value, _ToDur> ::type 
# 194
duration_cast(const duration< _Rep, _Period>  &__d) 
# 195
{ 
# 196
typedef typename _ToDur::period __to_period; 
# 197
typedef typename _ToDur::rep __to_rep; 
# 198
typedef ratio_divide< _Period, typename _ToDur::period>  __cf; 
# 200
typedef typename common_type< typename _ToDur::rep, _Rep, long> ::type __cr; 
# 202
typedef __duration_cast_impl< _ToDur, ratio_divide< _Period, typename _ToDur::period> , typename common_type< typename _ToDur::rep, _Rep, long> ::type, __ratio_divide< _Period, typename _ToDur::period> ::type::num == 1, __ratio_divide< _Period, typename _ToDur::period> ::type::den == 1>  __dc; 
# 203
return __dc::__cast(__d); 
# 204
} 
# 207
template< class _Rep> 
# 208
struct treat_as_floating_point : public is_floating_point< _Rep>  { 
# 210
}; 
# 213
template< class _Rep> 
# 214
struct duration_values { 
# 217
static constexpr _Rep zero() 
# 218
{ return (_Rep)0; } 
# 221
static constexpr _Rep max() 
# 222
{ return numeric_limits< _Rep> ::max(); } 
# 225
static constexpr _Rep min() 
# 226
{ return numeric_limits< _Rep> ::lowest(); } 
# 227
}; 
# 229
template< class _Tp> 
# 230
struct __is_ratio : public false_type { 
# 232
}; 
# 234
template< intmax_t _Num, intmax_t _Den> 
# 235
struct __is_ratio< ratio< _Num, _Den> >  : public true_type { 
# 237
}; 
# 240
template< class _Rep, class _Period> 
# 241
struct duration { 
# 243
typedef _Rep rep; 
# 244
typedef _Period period; 
# 246
static_assert((!__is_duration< _Rep> ::value), "rep cannot be a duration");
# 247
static_assert((__is_ratio< _Period> ::value), "period must be a specialization of ratio");
# 249
static_assert((_Period::num > 0), "period must be positive");
# 252
duration() = default;
# 257
duration(const duration &) = default;
# 259
template< class _Rep2, class  = typename enable_if< is_convertible< _Rep2, _Rep> ::value && (treat_as_floating_point< _Rep> ::value || (!treat_as_floating_point< _Rep2> ::value))> ::type> constexpr explicit 
# 263
duration(const _Rep2 &__rep) : __r(static_cast< rep>(__rep)) 
# 264
{ } 
# 266
template< class _Rep2, class _Period2, class  = typename enable_if< treat_as_floating_point< _Rep> ::value || ((__ratio_divide< _Period2, _Period> ::type::den == 1) && (!treat_as_floating_point< _Rep2> ::value))> ::type> constexpr 
# 270
duration(const chrono::duration< _Rep2, _Period2>  &__d) : __r((duration_cast< duration> (__d).count())) 
# 271
{ } 
# 273
~duration() = default;
# 274
duration &operator=(const duration &) = default;
# 278
constexpr rep count() const 
# 279
{ return __r; } 
# 283
constexpr duration operator+() const 
# 284
{ return *this; } 
# 287
constexpr duration operator-() const 
# 288
{ return ((duration)(-(__r))); } 
# 291
duration &operator++() 
# 292
{ 
# 293
++(__r); 
# 294
return *this; 
# 295
} 
# 298
duration operator++(int) 
# 299
{ return ((duration)((__r)++)); } 
# 302
duration &operator--() 
# 303
{ 
# 304
--(__r); 
# 305
return *this; 
# 306
} 
# 309
duration operator--(int) 
# 310
{ return ((duration)((__r)--)); } 
# 313
duration &operator+=(const duration &__d) 
# 314
{ 
# 315
(__r) += __d.count(); 
# 316
return *this; 
# 317
} 
# 320
duration &operator-=(const duration &__d) 
# 321
{ 
# 322
(__r) -= __d.count(); 
# 323
return *this; 
# 324
} 
# 327
duration &operator*=(const rep &__rhs) 
# 328
{ 
# 329
(__r) *= __rhs; 
# 330
return *this; 
# 331
} 
# 334
duration &operator/=(const rep &__rhs) 
# 335
{ 
# 336
(__r) /= __rhs; 
# 337
return *this; 
# 338
} 
# 341
template< class _Rep2 = rep> typename enable_if< !treat_as_floating_point< _Rep2> ::value, duration &> ::type 
# 344
operator%=(const rep &__rhs) 
# 345
{ 
# 346
(__r) %= __rhs; 
# 347
return *this; 
# 348
} 
# 350
template< class _Rep2 = rep> typename enable_if< !treat_as_floating_point< _Rep2> ::value, duration &> ::type 
# 353
operator%=(const duration &__d) 
# 354
{ 
# 355
(__r) %= __d.count(); 
# 356
return *this; 
# 357
} 
# 361
static constexpr duration zero() 
# 362
{ return ((duration)(duration_values< _Rep> ::zero())); } 
# 365
static constexpr duration min() 
# 366
{ return ((duration)(duration_values< _Rep> ::min())); } 
# 369
static constexpr duration max() 
# 370
{ return ((duration)(duration_values< _Rep> ::max())); } 
# 373
private: rep __r; 
# 374
}; 
# 376
template< class _Rep1, class _Period1, class 
# 377
_Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 380
operator+(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 381
__rhs) 
# 382
{ 
# 383
typedef duration< _Rep1, _Period1>  __dur1; 
# 384
typedef duration< _Rep2, _Period2>  __dur2; 
# 385
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __cd; 
# 386
return (__cd)((((__cd)__lhs).count()) + (((__cd)__rhs).count())); 
# 387
} 
# 389
template< class _Rep1, class _Period1, class 
# 390
_Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 393
operator-(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 394
__rhs) 
# 395
{ 
# 396
typedef duration< _Rep1, _Period1>  __dur1; 
# 397
typedef duration< _Rep2, _Period2>  __dur2; 
# 398
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __cd; 
# 399
return (__cd)((((__cd)__lhs).count()) - (((__cd)__rhs).count())); 
# 400
} 
# 402
template< class _Rep1, class _Rep2, bool  = is_convertible< _Rep2, typename common_type< _Rep1, _Rep2> ::type> ::value> 
# 405
struct __common_rep_type { }; 
# 407
template< class _Rep1, class _Rep2> 
# 408
struct __common_rep_type< _Rep1, _Rep2, true>  { 
# 409
typedef typename common_type< _Rep1, _Rep2> ::type type; }; 
# 411
template< class _Rep1, class _Period, class _Rep2> constexpr duration< typename __common_rep_type< _Rep1, _Rep2> ::type, _Period>  
# 414
operator*(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 415
{ 
# 417
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  __cd; 
# 418
return ((__cd)((((__cd)(__d)).count()) * __s)); 
# 419
} 
# 421
template< class _Rep1, class _Rep2, class _Period> constexpr duration< typename __common_rep_type< _Rep2, _Rep1> ::type, _Period>  
# 424
operator*(const _Rep1 &__s, const duration< _Rep2, _Period>  &__d) 
# 425
{ return __d * __s; } 
# 427
template< class _Rep1, class _Period, class _Rep2> constexpr duration< typename __common_rep_type< _Rep1, typename enable_if< !__is_duration< _Rep2> ::value, _Rep2> ::type> ::type, _Period>  
# 430
operator/(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 431
{ 
# 433
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  __cd; 
# 434
return ((__cd)((((__cd)(__d)).count()) / __s)); 
# 435
} 
# 437
template< class _Rep1, class _Period1, class 
# 438
_Rep2, class _Period2> constexpr typename common_type< _Rep1, _Rep2> ::type 
# 440
operator/(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 441
__rhs) 
# 442
{ 
# 443
typedef duration< _Rep1, _Period1>  __dur1; 
# 444
typedef duration< _Rep2, _Period2>  __dur2; 
# 445
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __cd; 
# 446
return (((__cd)__lhs).count()) / (((__cd)__rhs).count()); 
# 447
} 
# 450
template< class _Rep1, class _Period, class _Rep2> constexpr duration< typename __common_rep_type< _Rep1, typename enable_if< !__is_duration< _Rep2> ::value, _Rep2> ::type> ::type, _Period>  
# 453
operator%(const duration< _Rep1, _Period>  &__d, const _Rep2 &__s) 
# 454
{ 
# 456
typedef duration< typename common_type< _Rep1, _Rep2> ::type, _Period>  __cd; 
# 457
return ((__cd)((((__cd)(__d)).count()) % __s)); 
# 458
} 
# 460
template< class _Rep1, class _Period1, class 
# 461
_Rep2, class _Period2> constexpr typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type 
# 464
operator%(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 465
__rhs) 
# 466
{ 
# 467
typedef duration< _Rep1, _Period1>  __dur1; 
# 468
typedef duration< _Rep2, _Period2>  __dur2; 
# 469
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __cd; 
# 470
return (__cd)((((__cd)__lhs).count()) % (((__cd)__rhs).count())); 
# 471
} 
# 474
template< class _Rep1, class _Period1, class 
# 475
_Rep2, class _Period2> constexpr bool 
# 477
operator==(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 478
__rhs) 
# 479
{ 
# 480
typedef duration< _Rep1, _Period1>  __dur1; 
# 481
typedef duration< _Rep2, _Period2>  __dur2; 
# 482
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __ct; 
# 483
return (((__ct)__lhs).count()) == (((__ct)__rhs).count()); 
# 484
} 
# 486
template< class _Rep1, class _Period1, class 
# 487
_Rep2, class _Period2> constexpr bool 
# 489
operator<(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 490
__rhs) 
# 491
{ 
# 492
typedef duration< _Rep1, _Period1>  __dur1; 
# 493
typedef duration< _Rep2, _Period2>  __dur2; 
# 494
typedef typename common_type< duration< _Rep1, _Period1> , duration< _Rep2, _Period2> > ::type __ct; 
# 495
return (((__ct)__lhs).count()) < (((__ct)__rhs).count()); 
# 496
} 
# 498
template< class _Rep1, class _Period1, class 
# 499
_Rep2, class _Period2> constexpr bool 
# 501
operator!=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 502
__rhs) 
# 503
{ return !(__lhs == __rhs); } 
# 505
template< class _Rep1, class _Period1, class 
# 506
_Rep2, class _Period2> constexpr bool 
# 508
operator<=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 509
__rhs) 
# 510
{ return !(__rhs < __lhs); } 
# 512
template< class _Rep1, class _Period1, class 
# 513
_Rep2, class _Period2> constexpr bool 
# 515
operator>(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 516
__rhs) 
# 517
{ return __rhs < __lhs; } 
# 519
template< class _Rep1, class _Period1, class 
# 520
_Rep2, class _Period2> constexpr bool 
# 522
operator>=(const duration< _Rep1, _Period1>  &__lhs, const duration< _Rep2, _Period2>  &
# 523
__rhs) 
# 524
{ return !(__lhs < __rhs); } 
# 527
typedef duration< long, ratio< 1L, 1000000000L> >  nanoseconds; 
# 530
typedef duration< long, ratio< 1L, 1000000L> >  microseconds; 
# 533
typedef duration< long, ratio< 1L, 1000L> >  milliseconds; 
# 536
typedef duration< long, ratio< 1L> >  seconds; 
# 539
typedef duration< long, ratio< 60L> >  minutes; 
# 542
typedef duration< long, ratio< 3600L> >  hours; 
# 545
template< class _Clock, class _Dur> 
# 546
struct time_point { 
# 548
typedef _Clock clock; 
# 549
typedef _Dur duration; 
# 550
typedef typename _Dur::rep rep; 
# 551
typedef typename _Dur::period period; 
# 553
constexpr time_point() : __d(duration::zero()) 
# 554
{ } 
# 556
constexpr explicit time_point(const duration &__dur) : __d(__dur) 
# 558
{ } 
# 561
template< class _Dur2> constexpr 
# 562
time_point(const chrono::time_point< _Clock, _Dur2>  &__t) : __d((__t.time_since_epoch())) 
# 564
{ } 
# 568
constexpr duration time_since_epoch() const 
# 569
{ return __d; } 
# 573
time_point &operator+=(const duration &__dur) 
# 574
{ 
# 575
(__d) += __dur; 
# 576
return *this; 
# 577
} 
# 580
time_point &operator-=(const duration &__dur) 
# 581
{ 
# 582
(__d) -= __dur; 
# 583
return *this; 
# 584
} 
# 588
static constexpr time_point min() 
# 589
{ return ((time_point)(duration::min())); } 
# 592
static constexpr time_point max() 
# 593
{ return ((time_point)(duration::max())); } 
# 596
private: duration __d; 
# 597
}; 
# 600
template< class _ToDur, class _Clock, class _Dur> constexpr typename enable_if< __is_duration< _ToDur> ::value, time_point< _Clock, _ToDur> > ::type 
# 603
time_point_cast(const time_point< _Clock, _Dur>  &__t) 
# 604
{ 
# 605
typedef time_point< _Clock, _ToDur>  __time_point; 
# 606
return ((__time_point)(duration_cast< _ToDur> ((__t.time_since_epoch())))); 
# 607
} 
# 609
template< class _Clock, class _Dur1, class 
# 610
_Rep2, class _Period2> constexpr time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type>  
# 613
operator+(const time_point< _Clock, _Dur1>  &__lhs, const duration< _Rep2, _Period2>  &
# 614
__rhs) 
# 615
{ 
# 616
typedef duration< _Rep2, _Period2>  __dur2; 
# 617
typedef typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type __ct; 
# 618
typedef time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type>  __time_point; 
# 619
return ((__time_point)((__lhs.time_since_epoch()) + __rhs)); 
# 620
} 
# 622
template< class _Rep1, class _Period1, class 
# 623
_Clock, class _Dur2> constexpr time_point< _Clock, typename common_type< duration< _Rep1, _Period1> , _Dur2> ::type>  
# 626
operator+(const duration< _Rep1, _Period1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 627
__rhs) 
# 628
{ 
# 629
typedef duration< _Rep1, _Period1>  __dur1; 
# 630
typedef typename common_type< duration< _Rep1, _Period1> , _Dur2> ::type __ct; 
# 631
typedef time_point< _Clock, typename common_type< duration< _Rep1, _Period1> , _Dur2> ::type>  __time_point; 
# 632
return ((__time_point)((__rhs.time_since_epoch()) + __lhs)); 
# 633
} 
# 635
template< class _Clock, class _Dur1, class 
# 636
_Rep2, class _Period2> constexpr time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type>  
# 639
operator-(const time_point< _Clock, _Dur1>  &__lhs, const duration< _Rep2, _Period2>  &
# 640
__rhs) 
# 641
{ 
# 642
typedef duration< _Rep2, _Period2>  __dur2; 
# 643
typedef typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type __ct; 
# 644
typedef time_point< _Clock, typename common_type< _Dur1, duration< _Rep2, _Period2> > ::type>  __time_point; 
# 645
return ((__time_point)((__lhs.time_since_epoch()) - __rhs)); 
# 646
} 
# 648
template< class _Clock, class _Dur1, class _Dur2> constexpr typename common_type< _Dur1, _Dur2> ::type 
# 650
operator-(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 651
__rhs) 
# 652
{ return (__lhs.time_since_epoch()) - (__rhs.time_since_epoch()); } 
# 654
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 656
operator==(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 657
__rhs) 
# 658
{ return (__lhs.time_since_epoch()) == (__rhs.time_since_epoch()); } 
# 660
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 662
operator!=(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 663
__rhs) 
# 664
{ return !(__lhs == __rhs); } 
# 666
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 668
operator<(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 669
__rhs) 
# 670
{ return (__lhs.time_since_epoch()) < (__rhs.time_since_epoch()); } 
# 672
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 674
operator<=(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 675
__rhs) 
# 676
{ return !(__rhs < __lhs); } 
# 678
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 680
operator>(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 681
__rhs) 
# 682
{ return __rhs < __lhs; } 
# 684
template< class _Clock, class _Dur1, class _Dur2> constexpr bool 
# 686
operator>=(const time_point< _Clock, _Dur1>  &__lhs, const time_point< _Clock, _Dur2>  &
# 687
__rhs) 
# 688
{ return !(__lhs < __rhs); } 
# 709
inline namespace _V2 { 
# 716
struct system_clock { 
# 718
typedef nanoseconds duration; 
# 719
typedef chrono::duration< long, ratio< 1L, 1000000000L> > ::rep rep; 
# 720
typedef chrono::duration< long, ratio< 1L, 1000000000L> > ::period period; 
# 721
typedef chrono::time_point< system_clock, chrono::duration< long, ratio< 1L, 1000000000L> > >  time_point; 
# 723
static_assert((((system_clock::duration::min()) < (system_clock::duration::zero()))), "a clock\'s minimum duration cannot be less than its epoch");
# 727
static constexpr bool is_steady = false; 
# 730
static time_point now() noexcept; 
# 734
static time_t to_time_t(const time_point &__t) noexcept 
# 735
{ 
# 736
return (time_t)duration_cast< chrono::duration< long, ratio< 1L> > > (__t.time_since_epoch()).count(); 
# 738
} 
# 741
static time_point from_time_t(time_t __t) noexcept 
# 742
{ 
# 743
typedef chrono::time_point< system_clock, chrono::duration< long, ratio< 1L> > >  __from; 
# 744
return time_point_cast< chrono::duration< long, ratio< 1L, 1000000000L> > > (((__from)(((seconds)(__t))))); 
# 746
} 
# 747
}; 
# 755
struct steady_clock { 
# 757
typedef nanoseconds duration; 
# 758
typedef chrono::duration< long, ratio< 1L, 1000000000L> > ::rep rep; 
# 759
typedef chrono::duration< long, ratio< 1L, 1000000000L> > ::period period; 
# 760
typedef chrono::time_point< steady_clock, chrono::duration< long, ratio< 1L, 1000000000L> > >  time_point; 
# 762
static constexpr bool is_steady = true; 
# 765
static time_point now() noexcept; 
# 766
}; 
# 776
using high_resolution_clock = system_clock; 
# 778
}
# 781
}
# 881
}
# 47 "/usr/include/c++/5/thread" 3
namespace std __attribute((__visibility__("default"))) { 
# 60
class thread { 
# 63
public: typedef __gthread_t native_handle_type; 
# 64
struct _Impl_base; 
# 65
typedef shared_ptr< _Impl_base>  __shared_base_type; 
# 68
class id { 
# 70
native_handle_type _M_thread; 
# 73
public: id() noexcept : _M_thread() { } 
# 76
explicit id(native_handle_type __id) : _M_thread(__id) { } 
# 79
friend class thread; 
# 80
friend struct hash< id> ; 
# 83
friend inline bool operator==(id __x, id __y) noexcept 
# 84
{ return __gthread_equal(__x._M_thread, __y._M_thread); } 
# 87
friend inline bool operator<(id __x, id __y) noexcept 
# 88
{ return (__x._M_thread) < (__y._M_thread); } 
# 90
template< class _CharT, class _Traits> friend inline basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __out, id __id); 
# 93
}; 
# 97
struct _Impl_base { 
# 99
__shared_base_type _M_this_ptr; 
# 101
virtual ~_Impl_base(); 
# 103
virtual void _M_run() = 0; 
# 104
}; 
# 106
template< class _Callable> 
# 107
struct _Impl : public _Impl_base { 
# 109
_Callable _M_func; 
# 111
_Impl(_Callable &&__f) : _M_func(std::forward< _Callable> (__f)) 
# 112
{ } 
# 115
virtual void _M_run() { (_M_func)(); } 
# 116
}; 
# 119
private: id _M_id; 
# 122
public: thread() noexcept = default;
# 125
thread(thread &) = delete;
# 126
thread(const thread &) = delete;
# 128
thread(thread &&__t) noexcept 
# 129
{ this->swap(__t); } 
# 131
template< class _Callable, class ..._Args> explicit 
# 133
thread(_Callable &&__f, _Args &&...__args) 
# 134
{ 
# 137
_M_start_thread(_M_make_routine(std::__bind_simple(std::forward< _Callable> (__f), std::forward< _Args> (__args)...)), reinterpret_cast< void (*)(void)>(&pthread_create)); 
# 146
} 
# 148
~thread() 
# 149
{ 
# 150
if (this->joinable()) { 
# 151
std::terminate(); }  
# 152
} 
# 154
thread &operator=(const thread &) = delete;
# 156
thread &operator=(thread &&__t) noexcept 
# 157
{ 
# 158
if (this->joinable()) { 
# 159
std::terminate(); }  
# 160
this->swap(__t); 
# 161
return *this; 
# 162
} 
# 165
void swap(thread &__t) noexcept 
# 166
{ std::swap(_M_id, __t._M_id); } 
# 169
bool joinable() const noexcept 
# 170
{ return !(((_M_id) == id())); } 
# 173
void join(); 
# 176
void detach(); 
# 179
id get_id() const noexcept 
# 180
{ return _M_id; } 
# 185
native_handle_type native_handle() 
# 186
{ return (_M_id)._M_thread; } 
# 190
static unsigned hardware_concurrency() noexcept; 
# 194
private: void _M_start_thread(__shared_base_type, void (*)(void)); 
# 197
void _M_start_thread(__shared_base_type); 
# 199
template< class _Callable> shared_ptr< _Impl< _Callable> >  
# 201
_M_make_routine(_Callable &&__f) 
# 202
{ 
# 204
return std::make_shared< _Impl< _Callable> > (std::forward< _Callable> (__f)); 
# 205
} 
# 206
}; 
# 208
inline thread::_Impl_base::~_Impl_base() = default;
# 211
inline void swap(thread &__x, thread &__y) noexcept 
# 212
{ __x.swap(__y); } 
# 215
inline bool operator!=(thread::id __x, thread::id __y) noexcept 
# 216
{ return !((__x == __y)); } 
# 219
inline bool operator<=(thread::id __x, thread::id __y) noexcept 
# 220
{ return !((__y < __x)); } 
# 223
inline bool operator>(thread::id __x, thread::id __y) noexcept 
# 224
{ return (__y < __x); } 
# 227
inline bool operator>=(thread::id __x, thread::id __y) noexcept 
# 228
{ return !((__x < __y)); } 
# 233
template<> struct hash< thread::id>  : public __hash_base< unsigned long, thread::id>  { 
# 237
size_t operator()(const thread::id &__id) const noexcept 
# 238
{ return std::_Hash_impl::hash(__id._M_thread); } 
# 239
}; 
# 241
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 243
operator<<(basic_ostream< _CharT, _Traits>  &__out, thread::id __id) 
# 244
{ 
# 245
if ((__id == thread::id())) { 
# 246
return __out << "thread::id of a non-executing thread"; } else { 
# 248
return __out << (__id._M_thread); }  
# 249
} 
# 257
namespace this_thread { 
# 263
inline thread::id get_id() noexcept { return ((thread::id)(__gthread_self())); } 
# 267
inline void yield() noexcept 
# 268
{ 
# 270
__gthread_yield(); 
# 272
} 
# 275
void __sleep_for(chrono::seconds, chrono::nanoseconds); 
# 278
template< class _Rep, class _Period> inline void 
# 280
sleep_for(const chrono::duration< _Rep, _Period>  &__rtime) 
# 281
{ 
# 282
if (__rtime <= (__rtime.zero())) { 
# 283
return; }  
# 284
auto __s = chrono::duration_cast< chrono::seconds> (__rtime); 
# 285
auto __ns = chrono::duration_cast< chrono::nanoseconds> (__rtime - __s); 
# 287
__gthread_time_t __ts = {static_cast< time_t>((__s.count())), static_cast< long>((__ns.count()))}; 
# 292
::nanosleep(&__ts, 0); 
# 296
} 
# 299
template< class _Clock, class _Duration> inline void 
# 301
sleep_until(const chrono::time_point< _Clock, _Duration>  &__atime) 
# 302
{ 
# 303
auto __now = _Clock::now(); 
# 304
if (__now < __atime) { 
# 305
sleep_for(__atime - __now); }  
# 306
} 
# 309
}
# 313
}
# 124 "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h"
unsigned *pixelData; 
# 136
void RasterPipe::allocate(ConstantState &h_constState, MutableState &h_mutableState, raster_wtri *inputData, int count) 
# 137
{ 
# 138
printf("Allocating...\n"); 
# 139
(constState_) = (&h_constState); 
# 140
(mutableState_) = (&h_mutableState); 
# 141
(constState_)->isConstantState(); 
# 142
(mutableState_)->isMutableState(); 
# 144
(count_) = count; 
# 147
std::map< void *, StageFloor *>  stgMap; 
# 155
(pikoScreen).allocate(constState_); 
# 156
(d_pikoScreen) = (&(pikoScreen)); 
# 157
stgMap[&(pikoScreen)] = (d_pikoScreen); 
# 162
(h_input).allocate(); 
# 163
(h_input).copyData(inputData, count); 
# 164
(d_mutableState) = ((MutableState *)malloc(sizeof(MutableState))); 
# 165
(d_input) = (&(h_input)); 
# 181
printf("Done...\n"); 
# 182
} 
# 184
void RasterPipe::prepare() 
# 185
{ 
# 186
memcpy(d_mutableState, mutableState_, sizeof(MutableState)); 
# 187
constState = (*(constState_)); 
# 189
check(cudaMemcpyToSymbol(constState_d, constState_, sizeof constState_d), "cudaMemcpyToSymbol(constState_d, constState_, sizeof(constState_d))", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 189); 
# 190
check(cudaMemcpyToSymbol(mutableState_d, mutableState_, sizeof mutableState_d), "cudaMemcpyToSymbol(mutableState_d, mutableState_, sizeof(mutableState_d))", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 190); 
# 192
} 
# 194
void timePrint(timeval time) 
# 195
{ 
# 196
printf("%ld.%06ld\n", time.tv_sec, time.tv_usec); 
# 197
} 
# 199
timeval timeDelta(timeval start, timeval end) 
# 200
{ 
# 201
timeval delta; 
# 202
(delta.tv_sec) = ((end.tv_sec) - (start.tv_sec)); 
# 203
(delta.tv_usec) = ((end.tv_usec) - (start.tv_usec)); 
# 204
if ((delta.tv_usec) < (0)) 
# 205
{ 
# 206
(delta.tv_usec) += (1000000.0); 
# 207
(delta.tv_sec)--; 
# 208
}  
# 210
return delta; 
# 211
} 
# 213
void RasterPipe::run_single() 
# 214
{ 
# 219
raster_wtri *primArray_h = (d_input)->getData(); 
# 220
int numPrims = (d_input)->getNumPrims(); 
# 223
printf("numPrims: %d\n", numPrims); 
# 225
int zero = 0; 
# 226
check(cudaMemcpyToSymbol(numPixs, &zero, sizeof(int)), "cudaMemcpyToSymbol(numPixs, &zero, sizeof(int))", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 226); 
# 232
int h_sm_flags[64 * 50]; 
# 233
memset(h_sm_flags, 0, (sizeof(int) * (64)) * (50)); 
# 237
int h_block_count[64 * 50]; 
# 238
for (int i = 0; i < (64 * 50); i++) 
# 239
{ 
# 240
((h_block_count)[i]) = 100; 
# 241
}  
# 4 "/home/zhengzhen/workspace/versapipe/examples/rasterization/block_count.cuh"
((h_sm_flags)[(0 * 50) + 0]) = 1; 
# 5
((h_sm_flags)[(0 * 50) + 1]) = 1; 
# 6
((h_sm_flags)[(0 * 50) + 2]) = 1; 
# 7
((h_sm_flags)[(0 * 50) + 3]) = 1; 
# 8
((h_sm_flags)[(0 * 50) + 4]) = 1; 
# 24
((h_sm_flags)[(1 * 50) + 5]) = 1; 
# 25
((h_sm_flags)[(1 * 50) + 6]) = 1; 
# 26
((h_sm_flags)[(1 * 50) + 7]) = 1; 
# 27
((h_sm_flags)[(1 * 50) + 8]) = 1; 
# 28
((h_sm_flags)[(1 * 50) + 9]) = 1; 
# 29
((h_sm_flags)[(1 * 50) + 10]) = 1; 
# 30
((h_sm_flags)[(1 * 50) + 11]) = 1; 
# 31
((h_sm_flags)[(1 * 50) + 12]) = 1; 
# 245 "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h"
cudaMemcpyToSymbol(Megakernel::sm_flag, h_sm_flags, (sizeof(int) * (64)) * (50)); 
# 247
cudaMemcpyToSymbol(Megakernel::block_count, h_block_count, (sizeof(int) * (64)) * (50)); 
# 249
((Megakernel::taskCountArray)[0]) = (-1); 
# 250
((Megakernel::taskCountArray)[1]) = (-1); 
# 262
check(cudaGetLastError(), "cudaGetLastError()", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 262); 
# 263
check(cudaDeviceSynchronize(), "cudaDeviceSynchronize()", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 263); 
# 272
printf("After init\n"); 
# 275
MyTechnique technique; 
# 276
technique.init(); 
# 279
InitProc::ExpectedData *data_d; 
# 281
check(cudaMalloc((void **)(&data_d), sizeof(InitProc::ExpectedData) * numPrims), "cudaMalloc((void **)&data_d, sizeof(InitProc::ExpectedData) * numPrims)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 281); 
# 282
check(cudaMemcpy(data_d, primArray_h, sizeof(InitProc::ExpectedData) * numPrims, cudaMemcpyHostToDevice), "cudaMemcpy(data_d, primArray_h, sizeof(InitProc::ExpectedData) * numPrims, cudaMemcpyHostToDevice)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 282); 
# 284
for (int i = 0; i < numPrims; i++) 
# 285
{ 
# 292
technique.insertIntoQueue< InitProc, raster_wtri> (100, data_d + i); 
# 298
}  
# 307
timeval beginTime, endTime; 
# 309
check(cudaDeviceSynchronize(), "cudaDeviceSynchronize()", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 309); 
# 310
gettimeofday(&beginTime, __null); 
# 312
technique.execute(0); 
# 325
check(cudaGetLastError(), "cudaGetLastError()", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 325); 
# 326
check(cudaDeviceSynchronize(), "cudaDeviceSynchronize()", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 326); 
# 328
gettimeofday(&endTime, __null); 
# 330
timeval delta = timeDelta(beginTime, endTime); 
# 331
timePrint(delta); 
# 333
int numPixs_h; 
# 334
check(cudaMemcpyFromSymbol(&numPixs_h, numPixs, sizeof(int)), "cudaMemcpyFromSymbol(&numPixs_h, numPixs, sizeof(int))", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 334); 
# 335
printf("numPixs_h: %d\n", numPixs_h); 
# 337
Pixel *resultPixel_h = (Pixel *)malloc(sizeof(Pixel) * numPixs_h); 
# 338
if (resultPixel_h == (__null)) 
# 339
{ 
# 340
printf("can not malloc for resultPixel_h\n"); 
# 341
exit(1); 
# 342
}  
# 343
check(cudaMemcpyFromSymbol(resultPixel_h, pixels_d, sizeof(Pixel) * numPixs_h), "cudaMemcpyFromSymbol(resultPixel_h, pixels_d, sizeof(Pixel) * numPixs_h)", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 343); 
# 345
check(cudaGetLastError(), "cudaGetLastError()", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 345); 
# 346
check(cudaDeviceSynchronize(), "cudaDeviceSynchronize()", "/home/zhengzhen/workspace/versapipe/examples/rasterization/__pikoCompiledPipe.h", 346); 
# 348
for (int i = 0; i < numPixs_h; i++) 
# 349
{ 
# 350
(pikoScreen).assignBin(resultPixel_h[i]); 
# 351
}  
# 353
free(resultPixel_h); 
# 355
printf("run_single done\n\n"); 
# 356
} 
# 358
void RasterPipe::destroy() 
# 359
{ 
# 360
printf("Freeing...\n"); 
# 362
(h_input).free(); 
# 366
(pikoScreen).free(); 
# 367
std::free(d_mutableState); 
# 368
printf("Done...\n"); 
# 369
} 
# 16 "/home/zhengzhen/workspace/versapipe/examples/rasterization/util/host_math.h"
namespace HOST { 
# 19
cvec3f cross(const cvec3f & v1, const cvec3f & v2); 
# 20
float magnitude(cvec3f vec); 
# 21
float dot(const cvec3f & v1, const cvec3f & v2); 
# 23
void matmultvec4f(const float * matrix, const cvec4f & v, cvec4f & ssv); 
# 24
float dot(const cvec4f & v1, const cvec4f & v2); 
# 25
void matmult4x4(const float * i, const float * j, float * k); 
# 29
cvec3f cross(const cvec3f &v1, const cvec3f &v2) 
# 30
{ 
# 31
return gencvec3f(((v1.y) * (v2.z)) - ((v1.z) * (v2.y)), ((v1.z) * (v2.x)) - ((v1.x) * (v2.z)), ((v1.x) * (v2.y)) - ((v1.y) * (v2.x))); 
# 34
} 
# 37
float magnitude(cvec3f vec) 
# 38
{ 
# 39
float sum = (((vec.x) * (vec.x)) + ((vec.y) * (vec.y))) + ((vec.z) * (vec.z)); 
# 40
return sqrt(sum); 
# 41
} 
# 43
float dot(const cvec3f &v1, const cvec3f &v2) { 
# 44
return (((v1.x) * (v2.x)) + ((v1.y) * (v2.y))) + ((v1.z) * (v2.z)); 
# 47
} 
# 51
cvec3f normalize(cvec3f vec) 
# 52
{ 
# 53
float mag = magnitude(vec); 
# 54
(vec.x) /= mag; 
# 55
(vec.y) /= mag; 
# 56
(vec.z) /= mag; 
# 58
return vec; 
# 59
} 
# 63
void matmultvec4f(const float *matrix, const cvec4f &v, cvec4f &ssv) 
# 64
{ 
# 65
(ssv.x) = (((((matrix[0]) * (v.x)) + ((matrix[4]) * (v.y))) + ((matrix[8]) * (v.z))) + ((matrix[12]) * (v.w))); 
# 66
(ssv.y) = (((((matrix[1]) * (v.x)) + ((matrix[5]) * (v.y))) + ((matrix[9]) * (v.z))) + ((matrix[13]) * (v.w))); 
# 67
(ssv.z) = (((((matrix[2]) * (v.x)) + ((matrix[6]) * (v.y))) + ((matrix[10]) * (v.z))) + ((matrix[14]) * (v.w))); 
# 68
(ssv.w) = (((((matrix[3]) * (v.x)) + ((matrix[7]) * (v.y))) + ((matrix[11]) * (v.z))) + ((matrix[15]) * (v.w))); 
# 69
} 
# 71
float dot(const cvec4f &v1, const cvec4f &v2) { 
# 72
return (((v1.x) * (v2.x)) + ((v1.y) * (v2.y))) + ((v1.z) * (v2.z)); 
# 75
} 
# 79
void matmult4x4(const float *i, const float *j, float *k) 
# 80
{ 
# 81
for (int x = 0; x < 4; x++) { 
# 82
for (int y = 0; y < 4; y++) { 
# 83
(k[(4 * x) + y]) = (0); 
# 84
for (int z = 0; z < 4; z++) { 
# 85
(k[(4 * x) + y]) += ((i[(4 * x) + z]) * (j[(4 * z) + y])); 
# 86
}  
# 87
}  
# 88
}  
# 89
} 
# 91
}
# 22 "/home/zhengzhen/workspace/versapipe/examples/rasterization/common_code/FPSMeter.h"
class FPSMeter { 
# 25
public: clock_t ticks_per_sec; 
# 26
clock_t cur_tick; 
# 27
clock_t last_tick; 
# 28
clock_t counter_tick; 
# 29
float frame_diff_sec, counter_diff_sec; 
# 30
int counter; 
# 31
bool started; 
# 32
float fps; 
# 34
FPSMeter() 
# 35
{ 
# 36
(started) = false; 
# 37
{ (ticks_per_sec) = ((clock_t)1000000); } ; 
# 38
} 
# 40
void RegisterFrame() 
# 41
{ 
# 42
{ (cur_tick) = clock(); } ; 
# 44
if (!(started)) 
# 45
{ 
# 46
(started) = true; 
# 47
(counter) = 0; 
# 48
(counter_tick) = (cur_tick); 
# 49
(last_tick) = (cur_tick); 
# 50
} else 
# 52
{ 
# 53
(frame_diff_sec) = ((float)(((double)((cur_tick) - (last_tick))) / ((double)(ticks_per_sec)))); 
# 54
(counter_diff_sec) = ((float)(((double)((cur_tick) - (counter_tick))) / ((double)(ticks_per_sec)))); 
# 56
if (((counter_diff_sec) >= (3.0F)) && ((counter) > 0)) 
# 57
{ 
# 58
(fps) = (((float)(counter)) / (counter_diff_sec)); 
# 59
printf("%0.1f fps\n", fps); 
# 60
(counter_tick) = (cur_tick); 
# 61
(counter) = 0; 
# 62
} else { 
# 63
(counter)++; 
# 64
}  
# 65
(last_tick) = (cur_tick); 
# 66
}  
# 67
} 
# 68
}; 
# 70
class Stopwatch { 
# 73
public: clock_t ticks_per_sec; 
# 74
clock_t cur_tick; 
# 75
clock_t start_tick; 
# 77
bool started; 
# 79
Stopwatch() 
# 80
{ 
# 81
(started) = false; 
# 82
{ (ticks_per_sec) = ((clock_t)1000000); } ; 
# 83
} 
# 85
float GetTime() 
# 86
{ 
# 87
if (started) 
# 88
{ 
# 89
{ (cur_tick) = clock(); } ; 
# 90
return (float)(((double)((cur_tick) - (start_tick))) / ((double)(ticks_per_sec))); 
# 91
} else 
# 93
{ 
# 94
printf("stopwatch not running!\n"); 
# 95
return (0.0F); 
# 96
}  
# 97
} 
# 99
void Reset() 
# 100
{ 
# 101
(started) = true; 
# 102
{ (start_tick) = clock(); } ; 
# 103
} 
# 105
void Stop() 
# 106
{ 
# 107
(started) = false; 
# 108
} 
# 109
}; 
# 6 "/home/zhengzhen/workspace/versapipe/examples/rasterization/api/include/piko/matrices.h"
inline void dispMat(float mat[], int size, int cols) { 
# 7
printf("showing matrix:\n"); 
# 8
for (int i = 0; i < size; i++) { 
# 9
printf("% 0.3f ", mat[i]); 
# 10
if ((i % cols) == (cols - 1)) { printf("\n"); }  
# 11
}  
# 12
} 
# 15
inline float Determinant4f(const float m[16]) 
# 16
{ 
# 17
return ((((((((((((((((((((((((((m[12]) * (m[9])) * (m[6])) * (m[3])) - ((((m[8]) * (m[13])) * (m[6])) * (m[3]))) - ((((m[12]) * (m[5])) * (m[10])) * (m[3]))) + ((((m[4]) * (m[13])) * (m[10])) * (m[3]))) + ((((m[8]) * (m[5])) * (m[14])) * (m[3]))) - ((((m[4]) * (m[9])) * (m[14])) * (m[3]))) - ((((m[12]) * (m[9])) * (m[2])) * (m[7]))) + ((((m[8]) * (m[13])) * (m[2])) * (m[7]))) + ((((m[12]) * (m[1])) * (m[10])) * (m[7]))) - ((((m[0]) * (m[13])) * (m[10])) * (m[7]))) - ((((m[8]) * (m[1])) * (m[14])) * (m[7]))) + ((((m[0]) * (m[9])) * (m[14])) * (m[7]))) + ((((m[12]) * (m[5])) * (m[2])) * (m[11]))) - ((((m[4]) * (m[13])) * (m[2])) * (m[11]))) - ((((m[12]) * (m[1])) * (m[6])) * (m[11]))) + ((((m[0]) * (m[13])) * (m[6])) * (m[11]))) + ((((m[4]) * (m[1])) * (m[14])) * (m[11]))) - ((((m[0]) * (m[5])) * (m[14])) * (m[11]))) - ((((m[8]) * (m[5])) * (m[2])) * (m[15]))) + ((((m[4]) * (m[9])) * (m[2])) * (m[15]))) + ((((m[8]) * (m[1])) * (m[6])) * (m[15]))) - ((((m[0]) * (m[9])) * (m[6])) * (m[15]))) - ((((m[4]) * (m[1])) * (m[10])) * (m[15]))) + ((((m[0]) * (m[5])) * (m[10])) * (m[15])); 
# 42
} 
# 44
inline int GenerateInverseMatrix4f(float i[16], const float m[16]) 
# 45
{ 
# 46
float x = Determinant4f(m); 
# 47
if (x == (0)) { return 0; }  
# 49
(i[0]) = (((((((((-(m[13])) * (m[10])) * (m[7])) + (((m[9]) * (m[14])) * (m[7]))) + (((m[13]) * (m[6])) * (m[11]))) - (((m[5]) * (m[14])) * (m[11]))) - (((m[9]) * (m[6])) * (m[15]))) + (((m[5]) * (m[10])) * (m[15]))) / x); 
# 51
(i[4]) = (((((((((m[12]) * (m[10])) * (m[7])) - (((m[8]) * (m[14])) * (m[7]))) - (((m[12]) * (m[6])) * (m[11]))) + (((m[4]) * (m[14])) * (m[11]))) + (((m[8]) * (m[6])) * (m[15]))) - (((m[4]) * (m[10])) * (m[15]))) / x); 
# 53
(i[8]) = (((((((((-(m[12])) * (m[9])) * (m[7])) + (((m[8]) * (m[13])) * (m[7]))) + (((m[12]) * (m[5])) * (m[11]))) - (((m[4]) * (m[13])) * (m[11]))) - (((m[8]) * (m[5])) * (m[15]))) + (((m[4]) * (m[9])) * (m[15]))) / x); 
# 55
(i[12]) = (((((((((m[12]) * (m[9])) * (m[6])) - (((m[8]) * (m[13])) * (m[6]))) - (((m[12]) * (m[5])) * (m[10]))) + (((m[4]) * (m[13])) * (m[10]))) + (((m[8]) * (m[5])) * (m[14]))) - (((m[4]) * (m[9])) * (m[14]))) / x); 
# 57
(i[1]) = (((((((((m[13]) * (m[10])) * (m[3])) - (((m[9]) * (m[14])) * (m[3]))) - (((m[13]) * (m[2])) * (m[11]))) + (((m[1]) * (m[14])) * (m[11]))) + (((m[9]) * (m[2])) * (m[15]))) - (((m[1]) * (m[10])) * (m[15]))) / x); 
# 59
(i[5]) = (((((((((-(m[12])) * (m[10])) * (m[3])) + (((m[8]) * (m[14])) * (m[3]))) + (((m[12]) * (m[2])) * (m[11]))) - (((m[0]) * (m[14])) * (m[11]))) - (((m[8]) * (m[2])) * (m[15]))) + (((m[0]) * (m[10])) * (m[15]))) / x); 
# 61
(i[9]) = (((((((((m[12]) * (m[9])) * (m[3])) - (((m[8]) * (m[13])) * (m[3]))) - (((m[12]) * (m[1])) * (m[11]))) + (((m[0]) * (m[13])) * (m[11]))) + (((m[8]) * (m[1])) * (m[15]))) - (((m[0]) * (m[9])) * (m[15]))) / x); 
# 63
(i[13]) = (((((((((-(m[12])) * (m[9])) * (m[2])) + (((m[8]) * (m[13])) * (m[2]))) + (((m[12]) * (m[1])) * (m[10]))) - (((m[0]) * (m[13])) * (m[10]))) - (((m[8]) * (m[1])) * (m[14]))) + (((m[0]) * (m[9])) * (m[14]))) / x); 
# 65
(i[2]) = (((((((((-(m[13])) * (m[6])) * (m[3])) + (((m[5]) * (m[14])) * (m[3]))) + (((m[13]) * (m[2])) * (m[7]))) - (((m[1]) * (m[14])) * (m[7]))) - (((m[5]) * (m[2])) * (m[15]))) + (((m[1]) * (m[6])) * (m[15]))) / x); 
# 67
(i[6]) = (((((((((m[12]) * (m[6])) * (m[3])) - (((m[4]) * (m[14])) * (m[3]))) - (((m[12]) * (m[2])) * (m[7]))) + (((m[0]) * (m[14])) * (m[7]))) + (((m[4]) * (m[2])) * (m[15]))) - (((m[0]) * (m[6])) * (m[15]))) / x); 
# 69
(i[10]) = (((((((((-(m[12])) * (m[5])) * (m[3])) + (((m[4]) * (m[13])) * (m[3]))) + (((m[12]) * (m[1])) * (m[7]))) - (((m[0]) * (m[13])) * (m[7]))) - (((m[4]) * (m[1])) * (m[15]))) + (((m[0]) * (m[5])) * (m[15]))) / x); 
# 71
(i[14]) = (((((((((m[12]) * (m[5])) * (m[2])) - (((m[4]) * (m[13])) * (m[2]))) - (((m[12]) * (m[1])) * (m[6]))) + (((m[0]) * (m[13])) * (m[6]))) + (((m[4]) * (m[1])) * (m[14]))) - (((m[0]) * (m[5])) * (m[14]))) / x); 
# 73
(i[3]) = (((((((((m[9]) * (m[6])) * (m[3])) - (((m[5]) * (m[10])) * (m[3]))) - (((m[9]) * (m[2])) * (m[7]))) + (((m[1]) * (m[10])) * (m[7]))) + (((m[5]) * (m[2])) * (m[11]))) - (((m[1]) * (m[6])) * (m[11]))) / x); 
# 75
(i[7]) = (((((((((-(m[8])) * (m[6])) * (m[3])) + (((m[4]) * (m[10])) * (m[3]))) + (((m[8]) * (m[2])) * (m[7]))) - (((m[0]) * (m[10])) * (m[7]))) - (((m[4]) * (m[2])) * (m[11]))) + (((m[0]) * (m[6])) * (m[11]))) / x); 
# 77
(i[11]) = (((((((((m[8]) * (m[5])) * (m[3])) - (((m[4]) * (m[9])) * (m[3]))) - (((m[8]) * (m[1])) * (m[7]))) + (((m[0]) * (m[9])) * (m[7]))) + (((m[4]) * (m[1])) * (m[11]))) - (((m[0]) * (m[5])) * (m[11]))) / x); 
# 79
(i[15]) = (((((((((-(m[8])) * (m[5])) * (m[2])) + (((m[4]) * (m[9])) * (m[2]))) + (((m[8]) * (m[1])) * (m[6]))) - (((m[0]) * (m[9])) * (m[6]))) - (((m[4]) * (m[1])) * (m[10]))) + (((m[0]) * (m[5])) * (m[10]))) / x); 
# 82
return 1; 
# 83
} 
# 105
inline void vtransform(const float m[16], const cvec4f &vin, cvec4f &vout) { 
# 106
(vout.x) = (((((vin.x) * (m[0])) + ((vin.y) * (m[4]))) + ((vin.z) * (m[8]))) + ((vin.w) * (m[12]))); 
# 107
(vout.y) = (((((vin.x) * (m[1])) + ((vin.y) * (m[5]))) + ((vin.z) * (m[9]))) + ((vin.w) * (m[13]))); 
# 108
(vout.z) = (((((vin.x) * (m[2])) + ((vin.y) * (m[6]))) + ((vin.z) * (m[10]))) + ((vin.w) * (m[14]))); 
# 109
(vout.w) = (((((vin.x) * (m[3])) + ((vin.y) * (m[7]))) + ((vin.z) * (m[11]))) + ((vin.w) * (m[15]))); 
# 110
} 
# 112
inline void vtransform(const float m[16], const cvec3f &vin, cvec4f &vout) { 
# 113
(vout.x) = (((((vin.x) * (m[0])) + ((vin.y) * (m[4]))) + ((vin.z) * (m[8]))) + (m[12])); 
# 114
(vout.y) = (((((vin.x) * (m[1])) + ((vin.y) * (m[5]))) + ((vin.z) * (m[9]))) + (m[13])); 
# 115
(vout.z) = (((((vin.x) * (m[2])) + ((vin.y) * (m[6]))) + ((vin.z) * (m[10]))) + (m[14])); 
# 116
(vout.w) = (((((vin.x) * (m[3])) + ((vin.y) * (m[7]))) + ((vin.z) * (m[11]))) + (m[15])); 
# 117
} 
# 119
inline void ntransform(const float m[16], const cvec3f &vin, cvec3f &vout) { 
# 120
(vout.x) = ((((vin.x) * (m[0])) + ((vin.y) * (m[1]))) + ((vin.z) * (m[2]))); 
# 121
(vout.y) = ((((vin.x) * (m[4])) + ((vin.y) * (m[5]))) + ((vin.z) * (m[6]))); 
# 122
(vout.z) = ((((vin.x) * (m[8])) + ((vin.y) * (m[9]))) + ((vin.z) * (m[10]))); 
# 123
} 
# 126
inline void mat4fSetRow(float m[16], const int row, const float c0, const float c1, const float c2, const float c3) { 
# 127
(m[(row * 4) + 0]) = c0; 
# 128
(m[(row * 4) + 1]) = c1; 
# 129
(m[(row * 4) + 2]) = c2; 
# 130
(m[(row * 4) + 3]) = c3; 
# 131
} 
# 133
inline void mat4fSetIdentity(float m[16]) { 
# 134
mat4fSetRow(m, 0, (1.0F), (0.0F), (0.0F), (0.0F)); 
# 135
mat4fSetRow(m, 1, (0.0F), (1.0F), (0.0F), (0.0F)); 
# 136
mat4fSetRow(m, 2, (0.0F), (0.0F), (1.0F), (0.0F)); 
# 137
mat4fSetRow(m, 3, (0.0F), (0.0F), (0.0F), (1.0F)); 
# 138
} 
# 140
inline void mat4fDisplay(float m[16]) { 
# 141
dispMat(m, 16, 4); 
# 142
} 
# 144
inline int mat4fIdx(int r, int c) { 
# 145
return (r * 4) + c; 
# 146
} 
# 148
inline float &mat4fval(float m[16], int r, int c) { 
# 149
return m[(r * 4) + c]; 
# 150
} 
# 152
inline void mat4fMult(float out[16], const float m1[16], const float m2[16]) { 
# 154
for (int r = 0; r < 4; r++) { 
# 155
for (int c = 0; c < 4; c++) { 
# 156
(out[(r * 4) + c]) = (0.0F); 
# 157
for (int k = 0; k < 4; k++) { 
# 158
(out[(r * 4) + c]) += ((m1[(4 * r) + k]) * (m2[(4 * k) + c])); 
# 159
}  
# 160
}  
# 161
}  
# 183
} 
# 185
inline void mat4fMultInplace(float m1[16], const float m2[16]) { 
# 187
float tmp[16]; 
# 188
mat4fMult(tmp, m1, m2); 
# 189
memcpy(m1, tmp, (16) * sizeof(float)); 
# 190
} 
# 192
inline void mat4fTranslate(float m[16], const float &x, const float &y, const float &z) { 
# 194
(m[12]) += (((x * (m[0])) + (y * (m[4]))) + (z * (m[8]))); 
# 195
(m[13]) += (((x * (m[1])) + (y * (m[5]))) + (z * (m[9]))); 
# 196
(m[14]) += (((x * (m[2])) + (y * (m[6]))) + (z * (m[10]))); 
# 197
(m[15]) += (((x * (m[3])) + (y * (m[7]))) + (z * (m[11]))); 
# 198
} 
# 10 "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/camera.h"
class camera { 
# 14
public: cvec3f _eye, _target, _up; 
# 15
float _fovy; 
# 18
bool initialized; 
# 20
cvec3f _camDir, _xdir, _ydir; 
# 22
float _px, _py; 
# 24
float _focallength; 
# 25
float _aperture; 
# 26
float _focalplane; 
# 28
int _W, _H; 
# 29
float _zNear, _zFar; 
# 31
float viewmat[16]; 
# 32
float invViewmat[16]; 
# 34
camera() { } 
# 36
camera(const cvec3f &
# 37
eye, const cvec3f &
# 38
target = gencvec3f((0.0F), (0.0F), (0.0F)), const cvec3f &
# 39
up = gencvec3f((0.0F), (1.0F), (0.0F)), const float &
# 40
fovy = (3.141592653589793116) / ((3.0F)), float 
# 41
focallength = (1.0F), float 
# 42
aperture = (0.0F), float 
# 43
focalplane = (1.0F), float 
# 44
zNear = (0.01999999955F), float 
# 45
zFar = (100.0F)) : _eye(eye), _target(target), _up(up), _fovy(fovy), _focallength(focallength), _aperture(aperture), _focalplane(focalplane), _zNear(zNear), _zFar(zFar) 
# 50
{ 
# 51
(_W) = ((_H) = (-1)); 
# 52
this->updateCam(); 
# 53
(initialized) = false; 
# 54
} 
# 56
cvec3f &eye() { return _eye; } 
# 57
cvec3f &target() { return _target; } 
# 58
cvec3f &up() { return _up; } 
# 59
const cvec3f &camDir() { return _camDir; } 
# 60
const cvec3f &xdir() { return _xdir; } 
# 61
const cvec3f &ydir() { return _ydir; } 
# 62
float aspect() { return ((float)(_W)) / ((float)(_H)); } 
# 63
float &fovyRad() { return _fovy; } 
# 64
float fovyDeg() { return ((_fovy) * (180.0F)) / (3.141592653589793116); } 
# 65
float &focallength() { return _focallength; } 
# 66
float &aperture() { return _aperture; } 
# 67
float &focalplane() { return _focalplane; } 
# 68
int &W() { return _W; } 
# 69
int &H() { return _H; } 
# 70
float &zNear() { return _zNear; } 
# 71
float &zFar() { return _zFar; } 
# 73
void updateCam() { 
# 75
if (((_W) <= 0) || ((_H) <= 0)) { return; }  
# 77
float _aspect = this->aspect(); 
# 79
float tanFovBy2 = tan((_fovy) / (2.0F)); 
# 81
normalizeInplace(_up); 
# 83
(_camDir) = (((_target) - (_eye))); normalizeInplace(_camDir); 
# 84
(_xdir) = cross(_camDir, _up); normalizeInplace(_xdir); 
# 85
(_ydir) = cross(_xdir, _camDir); normalizeInplace(_ydir); 
# 87
(_py) = (magvec(((_target) - (_eye))) * tanFovBy2); 
# 88
(_px) = ((_py) * _aspect); 
# 91
float f = (1.0F) / tanFovBy2; 
# 92
float a = this->aspect(); 
# 93
float d = (1.0F) / ((_zNear) - (_zFar)); 
# 95
float lookmat[16], pmat[16]; 
# 98
mat4fSetRow(pmat, 0, f / a, (0.0F), (0.0F), (0.0F)); 
# 99
mat4fSetRow(pmat, 1, (0.0F), f, (0.0F), (0.0F)); 
# 100
mat4fSetRow(pmat, 2, (0.0F), (0.0F), ((_zNear) + (_zFar)) * d, -(1.0F)); 
# 101
mat4fSetRow(pmat, 3, (0.0F), (0.0F), (((2.0F) * (_zNear)) * (_zFar)) * d, (0.0F)); 
# 104
mat4fSetRow(lookmat, 0, (_xdir).x, (_ydir).x, -((_camDir).x), (0.0F)); 
# 105
mat4fSetRow(lookmat, 1, (_xdir).y, (_ydir).y, -((_camDir).y), (0.0F)); 
# 106
mat4fSetRow(lookmat, 2, (_xdir).z, (_ydir).z, -((_camDir).z), (0.0F)); 
# 107
mat4fSetRow(lookmat, 3, (0.0F), (0.0F), (0.0F), (1.0F)); 
# 109
mat4fTranslate(lookmat, -((_eye).x), -((_eye).y), -((_eye).z)); 
# 111
mat4fMult(viewmat, lookmat, pmat); 
# 113
GenerateInverseMatrix4f(invViewmat, viewmat); 
# 119
(initialized) = true; 
# 120
} 
# 121
void updateCam(const cvec3f &
# 122
eye, const cvec3f &
# 123
target, const cvec3f &
# 124
up, const float &
# 125
fovy, const float &
# 126
focallength = (1.0F), const float &
# 127
aperture = (0.0F), const float &
# 128
focalplane = (1.0F), float 
# 129
zNear = (0.01999999955F), float 
# 130
zFar = (100.0F)) { 
# 132
(_eye) = eye; 
# 133
(_target) = target; 
# 134
(_up) = up; 
# 135
(_fovy) = fovy; 
# 136
(_focallength) = focallength; 
# 137
(_aperture) = aperture; 
# 138
(_focalplane) = focalplane; 
# 139
(_zNear) = zNear; 
# 140
(_zFar) = zFar; 
# 142
this->updateCam(); 
# 143
} 
# 146
void getThetaPhi(float &theta, float &phi, float &camdist) { 
# 148
cvec3f delVec = ((_target) - (_eye)); 
# 151
theta = getAngle(sqrt(((delVec.x) * (delVec.x)) + ((delVec.z) * (delVec.z))), delVec.y); 
# 154
phi = getAngle(delVec.z, delVec.x); 
# 157
camdist = magvec(delVec); 
# 158
} 
# 160
float getCoC(cvec4f clipSpacePoint) { 
# 165
float objectdistance = clipSpacePoint.w; 
# 167
float coc = ((_aperture) * ((_focallength) * (objectdistance - (_focalplane)))) / (objectdistance * ((_focalplane) - (_focallength))); 
# 170
return coc; 
# 171
} 
# 172
void display() { 
# 173
printf("camera [ %0.2f %0.2f %0.2f ] # eye\n", (_eye).x, (_eye).y, (_eye).z); 
# 174
printf("       [ %0.2f %0.2f %0.2f ] # center\n", (_target).x, (_target).y, (_target).z); 
# 175
printf("       [ %0.2f %0.2f %0.2f ] # up\n", (_up).x, (_up).y, (_up).z); 
# 176
printf("       [ %0.2f %0.2f %0.2f ] # aper foc foc-plane\n", _aperture, _focallength, _focalplane); 
# 177
printf("#      [ %d %d ]       # W H\n", _W, _H); 
# 178
printf("#      [ %0.2f %0.2f %0.2f ] # fovy zNear zFar\n", this->fovyDeg(), _zNear, _zFar); 
# 179
} 
# 180
}; 
# 11 "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/light.h"
class light { 
# 14
public: cvec3f _pos, _amb, _dif, _spec; 
# 15
float _n; 
# 18
light(cvec3f pos = gencvec3f((0.0), (10000.0F), (0.0F)), cvec3f 
# 19
dif = gencvec3f((1.0F), (1.0F), (1.0F)), cvec3f 
# 20
amb = gencvec3f((0.200000003F), (0.200000003F), (0.200000003F)), cvec3f 
# 21
spec = gencvec3f((1.0F), (1.0F), (1.0F)), float 
# 22
n = (5.0F)) : _pos(pos), _amb(amb), _dif(dif), _spec(spec), _n(n) 
# 24
{ } 
# 26
cvec3f &pos() { return _pos; } 
# 27
cvec3f &amb() { return _amb; } 
# 28
cvec3f &dif() { return _dif; } 
# 29
cvec3f &spec() { return _spec; } 
# 30
float &n() { return _n; } 
# 32
}; 
# 14 "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/material.h"
class material { 
# 17
public: cvec3f _amb, _dif, _spec; 
# 18
float _n; 
# 19
int _type; 
# 21
material(int type = 1, cvec3f 
# 22
dif = gencvec3f((0.8999999762F), (0.8999999762F), (0.8999999762F)), cvec3f 
# 23
amb = gencvec3f((0.3000000119F), (0.3000000119F), (0.3000000119F)), cvec3f 
# 24
spec = gencvec3f((1.0F), (1.0F), (1.0F)), float 
# 25
n = (5.0F)) : _amb(amb), _dif(dif), _spec(spec), _n(n), _type(type) 
# 27
{ } 
# 29
int &type() { return _type; } 
# 30
cvec3f &amb() { return _amb; } 
# 31
cvec3f &dif() { return _dif; } 
# 32
cvec3f &spec() { return _spec; } 
# 33
float &n() { return _n; } 
# 35
}; 
# 50 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiVector3D.h"
extern "C" {
# 55
struct aiMatrix3x3; 
# 56
struct aiMatrix4x4; 
# 60
struct aiVector3D { 
# 63
aiVector3D() : x((0.0F)), y((0.0F)), z((0.0F)) { } 
# 64
aiVector3D(float _x, float _y, float _z) : x(_x), y(_y), z(_z) { } 
# 65
aiVector3D(float _xyz) : x(_xyz), y(_xyz), z(_xyz) { } 
# 66
aiVector3D(const aiVector3D &o) : x(o.x), y(o.y), z(o.z) { } 
# 71
inline const aiVector3D &operator+=(const aiVector3D & o); 
# 72
inline const aiVector3D &operator-=(const aiVector3D & o); 
# 73
inline const aiVector3D &operator*=(float f); 
# 74
inline const aiVector3D &operator/=(float f); 
# 77
inline aiVector3D &operator*=(const aiMatrix3x3 & mat); 
# 78
inline aiVector3D &operator*=(const aiMatrix4x4 & mat); 
# 81
inline float operator[](unsigned i) const; 
# 82
inline float &operator[](unsigned i); 
# 85
inline bool operator==(const aiVector3D & other) const; 
# 86
inline bool operator!=(const aiVector3D & other) const; 
# 94
inline void Set(float pX, float pY, float pZ = (0.0F)); 
# 98
inline float SquareLength() const; 
# 103
inline float Length() const; 
# 107
inline aiVector3D &Normalize(); 
# 114
inline const aiVector3D SymMul(const aiVector3D & o); 
# 118
float x, y, z; 
# 119
} __attribute((packed)); 
# 124
}
# 50 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiVector2D.h"
extern "C" {
# 58
struct aiVector2D { 
# 61
aiVector2D() : x((0.0F)), y((0.0F)) { } 
# 62
aiVector2D(float _x, float _y) : x(_x), y(_y) { } 
# 63
aiVector2D(float _xyz) : x(_xyz), y(_xyz) { } 
# 64
aiVector2D(const aiVector2D &o) : x(o.x), y(o.y) { } 
# 66
void Set(float pX, float pY) { 
# 67
(x) = pX; (y) = pY; 
# 68
} 
# 70
float SquareLength() const { 
# 71
return ((x) * (x)) + ((y) * (y)); 
# 72
} 
# 74
float Length() const { 
# 75
return ::sqrt(this->SquareLength()); 
# 76
} 
# 78
aiVector2D &Normalize() { 
# 79
((*this) /= (this->Length())); return *this; 
# 80
} 
# 82
const aiVector2D &operator+=(const aiVector2D &o) { 
# 83
(x) += (o.x); (y) += (o.y); return *this; 
# 84
} 
# 85
const aiVector2D &operator-=(const aiVector2D &o) { 
# 86
(x) -= (o.x); (y) -= (o.y); return *this; 
# 87
} 
# 88
const aiVector2D &operator*=(float f) { 
# 89
(x) *= f; (y) *= f; return *this; 
# 90
} 
# 91
const aiVector2D &operator/=(float f) { 
# 92
(x) /= f; (y) /= f; return *this; 
# 93
} 
# 95
float operator[](unsigned i) const { 
# 96
return *((&(x)) + i); 
# 97
} 
# 99
float &operator[](unsigned i) { 
# 100
return *((&(x)) + i); 
# 101
} 
# 103
bool operator==(const aiVector2D &other) const { 
# 104
return ((x) == (other.x)) && ((y) == (other.y)); 
# 105
} 
# 107
bool operator!=(const aiVector2D &other) const { 
# 108
return ((x) != (other.x)) || ((y) != (other.y)); 
# 109
} 
# 111
aiVector2D &operator=(float f) { 
# 112
(x) = ((y) = f); return *this; 
# 113
} 
# 115
const aiVector2D SymMul(const aiVector2D &o) { 
# 116
return aiVector2D((x) * (o.x), (y) * (o.y)); 
# 117
} 
# 121
float x, y; 
# 122
} __attribute((packed)); 
# 127
}
# 131
inline aiVector2D operator+(const aiVector2D &v1, const aiVector2D &v2) 
# 132
{ 
# 133
return aiVector2D((v1.x) + (v2.x), (v1.y) + (v2.y)); 
# 134
} 
# 138
inline aiVector2D operator-(const aiVector2D &v1, const aiVector2D &v2) 
# 139
{ 
# 140
return aiVector2D((v1.x) - (v2.x), (v1.y) - (v2.y)); 
# 141
} 
# 145
inline float operator*(const aiVector2D &v1, const aiVector2D &v2) 
# 146
{ 
# 147
return ((v1.x) * (v2.x)) + ((v1.y) * (v2.y)); 
# 148
} 
# 152
inline aiVector2D operator*(float f, const aiVector2D &v) 
# 153
{ 
# 154
return aiVector2D(f * (v.x), f * (v.y)); 
# 155
} 
# 159
inline aiVector2D operator*(const aiVector2D &v, float f) 
# 160
{ 
# 161
return aiVector2D(f * (v.x), f * (v.y)); 
# 162
} 
# 166
inline aiVector2D operator/(const aiVector2D &v, float f) 
# 167
{ 
# 169
return (v * ((1) / f)); 
# 170
} 
# 174
inline aiVector2D operator/(const aiVector2D &v, const aiVector2D &v2) 
# 175
{ 
# 176
return aiVector2D((v.x) / (v2.x), (v.y) / (v2.y)); 
# 177
} 
# 181
inline aiVector2D operator-(const aiVector2D &v) 
# 182
{ 
# 183
return aiVector2D(-(v.x), -(v.y)); 
# 184
} 
# 48 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiColor4D.h"
extern "C" {
# 56
struct aiColor4D { 
# 59
aiColor4D() : r((0.0F)), g((0.0F)), b((0.0F)), a((0.0F)) { } 
# 60
aiColor4D(float _r, float _g, float _b, float _a) : r(_r), g(_g), b(_b), a(_a) 
# 61
{ } 
# 62
aiColor4D(float _r) : r(_r), g(_r), b(_r), a(_r) { } 
# 63
aiColor4D(const aiColor4D &o) : r(o.r), g(o.g), b(o.b), a(o.a) 
# 64
{ } 
# 67
inline const aiColor4D &operator+=(const aiColor4D & o); 
# 68
inline const aiColor4D &operator-=(const aiColor4D & o); 
# 69
inline const aiColor4D &operator*=(float f); 
# 70
inline const aiColor4D &operator/=(float f); 
# 73
inline bool operator==(const aiColor4D & other) const; 
# 74
inline bool operator!=(const aiColor4D & other) const; 
# 77
inline float operator[](unsigned i) const; 
# 78
inline float &operator[](unsigned i); 
# 81
inline bool IsBlack() const; 
# 86
float r, g, b, a; 
# 87
} __attribute((packed)); 
# 91
}
# 49 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiMatrix3x3.h"
extern "C" {
# 52
struct aiMatrix4x4; 
# 53
struct aiVector2D; 
# 62
struct aiMatrix3x3 { 
# 66
aiMatrix3x3() : a1((1.0F)), a2((0.0F)), a3((0.0F)), b1((0.0F)), b2((1.0F)), b3((0.0F)), c1((0.0F)), c2((0.0F)), c3((1.0F)) 
# 69
{ } 
# 71
aiMatrix3x3(float _a1, float _a2, float _a3, float 
# 72
_b1, float _b2, float _b3, float 
# 73
_c1, float _c2, float _c3) : a1(_a1), a2(_a2), a3(_a3), b1(_b1), b2(_b2), b3(_b3), c1(_c1), c2(_c2), c3(_c3) 
# 77
{ } 
# 82
inline aiMatrix3x3 &operator*=(const aiMatrix3x3 & m); 
# 83
inline aiMatrix3x3 operator*(const aiMatrix3x3 & m) const; 
# 86
inline float *operator[](unsigned p_iIndex); 
# 87
inline const float *operator[](unsigned p_iIndex) const; 
# 90
inline bool operator==(const aiMatrix4x4 m) const; 
# 91
inline bool operator!=(const aiMatrix4x4 m) const; 
# 99
inline explicit aiMatrix3x3(const aiMatrix4x4 & pMatrix); 
# 104
inline aiMatrix3x3 &Transpose(); 
# 111
inline aiMatrix3x3 &Inverse(); 
# 112
inline float Determinant() const; 
# 121
static inline aiMatrix3x3 &RotationZ(float a, aiMatrix3x3 & out); 
# 131
static inline aiMatrix3x3 &Rotation(float a, const aiVector3D & axis, aiMatrix3x3 & out); 
# 140
static inline aiMatrix3x3 &Translation(const aiVector2D & v, aiMatrix3x3 & out); 
# 151
static inline aiMatrix3x3 &FromToMatrix(const aiVector3D & from, const aiVector3D & to, aiMatrix3x3 & out); 
# 157
float a1, a2, a3; 
# 158
float b1, b2, b3; 
# 159
float c1, c2, c3; 
# 160
}; 
# 163
}
# 48 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiMatrix4x4.h"
extern "C" {
# 51
struct aiMatrix3x3; 
# 52
struct aiQuaternion; 
# 64
struct aiMatrix4x4 { 
# 69
aiMatrix4x4() : a1((1.0F)), a2((0.0F)), a3((0.0F)), a4((0.0F)), b1((0.0F)), b2((1.0F)), b3((0.0F)), b4((0.0F)), c1((0.0F)), c2((0.0F)), c3((1.0F)), c4((0.0F)), d1((0.0F)), d2((0.0F)), d3((0.0F)), d4((1.0F)) 
# 74
{ } 
# 77
aiMatrix4x4(float _a1, float _a2, float _a3, float _a4, float 
# 78
_b1, float _b2, float _b3, float _b4, float 
# 79
_c1, float _c2, float _c3, float _c4, float 
# 80
_d1, float _d2, float _d3, float _d4) : a1(_a1), a2(_a2), a3(_a3), a4(_a4), b1(_b1), b2(_b2), b3(_b3), b4(_b4), c1(_c1), c2(_c2), c3(_c3), c4(_c4), d1(_d1), d2(_d2), d3(_d3), d4(_d4) 
# 85
{ } 
# 92
inline explicit aiMatrix4x4(const aiMatrix3x3 & m); 
# 97
inline float *operator[](unsigned p_iIndex); 
# 98
inline const float *operator[](unsigned p_iIndex) const; 
# 101
inline bool operator==(const aiMatrix4x4 m) const; 
# 102
inline bool operator!=(const aiMatrix4x4 m) const; 
# 105
inline aiMatrix4x4 &operator*=(const aiMatrix4x4 & m); 
# 106
inline aiMatrix4x4 operator*(const aiMatrix4x4 & m) const; 
# 113
inline aiMatrix4x4 &Transpose(); 
# 120
inline aiMatrix4x4 &Inverse(); 
# 121
inline float Determinant() const; 
# 128
inline bool IsIdentity() const; 
# 137
inline void Decompose(aiVector3D & scaling, aiQuaternion & rotation, aiVector3D & position) const; 
# 147
inline void DecomposeNoScaling(aiQuaternion & rotation, aiVector3D & position) const; 
# 157
inline aiMatrix4x4 &FromEulerAnglesXYZ(float x, float y, float z); 
# 158
inline aiMatrix4x4 &FromEulerAnglesXYZ(const aiVector3D & blubb); 
# 167
static inline aiMatrix4x4 &RotationX(float a, aiMatrix4x4 & out); 
# 175
static inline aiMatrix4x4 &RotationY(float a, aiMatrix4x4 & out); 
# 183
static inline aiMatrix4x4 &RotationZ(float a, aiMatrix4x4 & out); 
# 192
static inline aiMatrix4x4 &Rotation(float a, const aiVector3D & axis, aiMatrix4x4 & out); 
# 201
static inline aiMatrix4x4 &Translation(const aiVector3D & v, aiMatrix4x4 & out); 
# 209
static inline aiMatrix4x4 &Scaling(const aiVector3D & v, aiMatrix4x4 & out); 
# 220
static inline aiMatrix4x4 &FromToMatrix(const aiVector3D & from, const aiVector3D & to, aiMatrix4x4 & out); 
# 225
float a1, a2, a3, a4; 
# 226
float b1, b2, b3, b4; 
# 227
float c1, c2, c3, c4; 
# 228
float d1, d2, d3, d4; 
# 230
} __attribute((packed)); 
# 236
}
# 51 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiQuaternion.h"
extern "C" {
# 56
struct aiQuaternion { 
# 59
aiQuaternion() : w((0.0F)), x((0.0F)), y((0.0F)), z((0.0F)) { } 
# 60
aiQuaternion(float _w, float _x, float _y, float _z) : w(_w), x(_x), y(_y), z(_z) { } 
# 63
inline aiQuaternion(const aiMatrix3x3 & pRotMatrix); 
# 66
inline aiQuaternion(float rotx, float roty, float rotz); 
# 69
inline aiQuaternion(aiVector3D axis, float angle); 
# 72
inline aiQuaternion(aiVector3D normalized); 
# 75
inline aiMatrix3x3 GetMatrix() const; 
# 78
bool operator==(const aiQuaternion &o) const 
# 79
{ return ((x) == (o.x)) && ((y) == (o.y)) && ((z) == (o.z)) && ((w) == (o.w)); } 
# 81
bool operator!=(const aiQuaternion &o) const 
# 82
{ return !((*this) == o); } 
# 85
inline aiQuaternion &Normalize(); 
# 88
inline aiQuaternion &Conjugate(); 
# 91
inline aiVector3D Rotate(const aiVector3D & in); 
# 94
inline aiQuaternion operator*(const aiQuaternion & two) const; 
# 102
static inline void Interpolate(aiQuaternion & pOut, const aiQuaternion & pStart, const aiQuaternion & pEnd, float pFactor); 
# 107
float w, x, y, z; 
# 108
}; 
# 115
inline aiQuaternion::aiQuaternion(const aiMatrix3x3 &pRotMatrix) 
# 116
{ 
# 117
float t = (((1) + (pRotMatrix.a1)) + (pRotMatrix.b2)) + (pRotMatrix.c3); 
# 120
if (t > (0.001000000047F)) 
# 121
{ 
# 122
float s = sqrt(t) * (2.0F); 
# 123
(x) = (((pRotMatrix.c2) - (pRotMatrix.b3)) / s); 
# 124
(y) = (((pRotMatrix.a3) - (pRotMatrix.c1)) / s); 
# 125
(z) = (((pRotMatrix.b1) - (pRotMatrix.a2)) / s); 
# 126
(w) = ((0.25F) * s); 
# 127
} else { 
# 128
if (((pRotMatrix.a1) > (pRotMatrix.b2)) && ((pRotMatrix.a1) > (pRotMatrix.c3))) 
# 129
{ 
# 131
float s = sqrt((((1.0F) + (pRotMatrix.a1)) - (pRotMatrix.b2)) - (pRotMatrix.c3)) * (2.0F); 
# 132
(x) = ((0.25F) * s); 
# 133
(y) = (((pRotMatrix.b1) + (pRotMatrix.a2)) / s); 
# 134
(z) = (((pRotMatrix.a3) + (pRotMatrix.c1)) / s); 
# 135
(w) = (((pRotMatrix.c2) - (pRotMatrix.b3)) / s); 
# 136
} else { 
# 137
if ((pRotMatrix.b2) > (pRotMatrix.c3)) 
# 138
{ 
# 140
float s = sqrt((((1.0F) + (pRotMatrix.b2)) - (pRotMatrix.a1)) - (pRotMatrix.c3)) * (2.0F); 
# 141
(x) = (((pRotMatrix.b1) + (pRotMatrix.a2)) / s); 
# 142
(y) = ((0.25F) * s); 
# 143
(z) = (((pRotMatrix.c2) + (pRotMatrix.b3)) / s); 
# 144
(w) = (((pRotMatrix.a3) - (pRotMatrix.c1)) / s); 
# 145
} else 
# 146
{ 
# 148
float s = sqrt((((1.0F) + (pRotMatrix.c3)) - (pRotMatrix.a1)) - (pRotMatrix.b2)) * (2.0F); 
# 149
(x) = (((pRotMatrix.a3) + (pRotMatrix.c1)) / s); 
# 150
(y) = (((pRotMatrix.c2) + (pRotMatrix.b3)) / s); 
# 151
(z) = ((0.25F) * s); 
# 152
(w) = (((pRotMatrix.b1) - (pRotMatrix.a2)) / s); 
# 153
}  }  }  
# 154
} 
# 158
inline aiQuaternion::aiQuaternion(float fPitch, float fYaw, float fRoll) 
# 159
{ 
# 160
const float fSinPitch(sin(fPitch * (0.5F))); 
# 161
const float fCosPitch(cos(fPitch * (0.5F))); 
# 162
const float fSinYaw(sin(fYaw * (0.5F))); 
# 163
const float fCosYaw(cos(fYaw * (0.5F))); 
# 164
const float fSinRoll(sin(fRoll * (0.5F))); 
# 165
const float fCosRoll(cos(fRoll * (0.5F))); 
# 166
const float fCosPitchCosYaw(fCosPitch * fCosYaw); 
# 167
const float fSinPitchSinYaw(fSinPitch * fSinYaw); 
# 168
(x) = ((fSinRoll * fCosPitchCosYaw) - (fCosRoll * fSinPitchSinYaw)); 
# 169
(y) = (((fCosRoll * fSinPitch) * fCosYaw) + ((fSinRoll * fCosPitch) * fSinYaw)); 
# 170
(z) = (((fCosRoll * fCosPitch) * fSinYaw) - ((fSinRoll * fSinPitch) * fCosYaw)); 
# 171
(w) = ((fCosRoll * fCosPitchCosYaw) + (fSinRoll * fSinPitchSinYaw)); 
# 172
} 
# 176
inline aiMatrix3x3 aiQuaternion::GetMatrix() const 
# 177
{ 
# 178
aiMatrix3x3 resMatrix; 
# 179
(resMatrix.a1) = ((1.0F) - ((2.0F) * (((y) * (y)) + ((z) * (z))))); 
# 180
(resMatrix.a2) = ((2.0F) * (((x) * (y)) - ((z) * (w)))); 
# 181
(resMatrix.a3) = ((2.0F) * (((x) * (z)) + ((y) * (w)))); 
# 182
(resMatrix.b1) = ((2.0F) * (((x) * (y)) + ((z) * (w)))); 
# 183
(resMatrix.b2) = ((1.0F) - ((2.0F) * (((x) * (x)) + ((z) * (z))))); 
# 184
(resMatrix.b3) = ((2.0F) * (((y) * (z)) - ((x) * (w)))); 
# 185
(resMatrix.c1) = ((2.0F) * (((x) * (z)) - ((y) * (w)))); 
# 186
(resMatrix.c2) = ((2.0F) * (((y) * (z)) + ((x) * (w)))); 
# 187
(resMatrix.c3) = ((1.0F) - ((2.0F) * (((x) * (x)) + ((y) * (y))))); 
# 189
return resMatrix; 
# 190
} 
# 194
inline aiQuaternion::aiQuaternion(aiVector3D axis, float angle) 
# 195
{ 
# 196
axis.Normalize(); 
# 198
const float sin_a = sin(angle / (2)); 
# 199
const float cos_a = cos(angle / (2)); 
# 200
(x) = ((axis.x) * sin_a); 
# 201
(y) = ((axis.y) * sin_a); 
# 202
(z) = ((axis.z) * sin_a); 
# 203
(w) = cos_a; 
# 204
} 
# 207
inline aiQuaternion::aiQuaternion(aiVector3D normalized) 
# 208
{ 
# 209
(x) = (normalized.x); 
# 210
(y) = (normalized.y); 
# 211
(z) = (normalized.z); 
# 213
const float t = (((1.0F) - ((x) * (x))) - ((y) * (y))) - ((z) * (z)); 
# 215
if (t < (0.0F)) { 
# 216
(w) = (0.0F); } else { 
# 217
(w) = sqrt(t); }  
# 218
} 
# 224
inline void aiQuaternion::Interpolate(aiQuaternion &pOut, const aiQuaternion &pStart, const aiQuaternion &pEnd, float pFactor) 
# 225
{ 
# 227
float cosom = ((((pStart.x) * (pEnd.x)) + ((pStart.y) * (pEnd.y))) + ((pStart.z) * (pEnd.z))) + ((pStart.w) * (pEnd.w)); 
# 230
aiQuaternion end = pEnd; 
# 231
if (cosom < (0.0F)) 
# 232
{ 
# 233
cosom = (-cosom); 
# 234
(end.x) = (-(end.x)); 
# 235
(end.y) = (-(end.y)); 
# 236
(end.z) = (-(end.z)); 
# 237
(end.w) = (-(end.w)); 
# 238
}  
# 241
float sclp, sclq; 
# 242
if (((1.0F) - cosom) > (9.999999747e-05F)) 
# 243
{ 
# 245
float omega, sinom; 
# 246
omega = acos(cosom); 
# 247
sinom = sin(omega); 
# 248
sclp = (sin(((1.0F) - pFactor) * omega) / sinom); 
# 249
sclq = (sin(pFactor * omega) / sinom); 
# 250
} else 
# 251
{ 
# 253
sclp = ((1.0F) - pFactor); 
# 254
sclq = pFactor; 
# 255
}  
# 257
(pOut.x) = ((sclp * (pStart.x)) + (sclq * (end.x))); 
# 258
(pOut.y) = ((sclp * (pStart.y)) + (sclq * (end.y))); 
# 259
(pOut.z) = ((sclp * (pStart.z)) + (sclq * (end.z))); 
# 260
(pOut.w) = ((sclp * (pStart.w)) + (sclq * (end.w))); 
# 261
} 
# 264
inline aiQuaternion &aiQuaternion::Normalize() 
# 265
{ 
# 267
const float mag = ((((x) * (x)) + ((y) * (y))) + ((z) * (z))) + ((w) * (w)); 
# 268
if (mag) 
# 269
{ 
# 270
(x) /= mag; 
# 271
(y) /= mag; 
# 272
(z) /= mag; 
# 273
(w) /= mag; 
# 274
}  
# 275
return *this; 
# 276
} 
# 279
inline aiQuaternion aiQuaternion::operator*(const aiQuaternion &t) const 
# 280
{ 
# 281
return aiQuaternion(((((w) * (t.w)) - ((x) * (t.x))) - ((y) * (t.y))) - ((z) * (t.z)), ((((w) * (t.x)) + ((x) * (t.w))) + ((y) * (t.z))) - ((z) * (t.y)), ((((w) * (t.y)) + ((y) * (t.w))) + ((z) * (t.x))) - ((x) * (t.z)), ((((w) * (t.z)) + ((z) * (t.w))) + ((x) * (t.y))) - ((y) * (t.x))); 
# 285
} 
# 288
inline aiQuaternion &aiQuaternion::Conjugate() 
# 289
{ 
# 290
(x) = (-(x)); 
# 291
(y) = (-(y)); 
# 292
(z) = (-(z)); 
# 293
return *this; 
# 294
} 
# 297
inline aiVector3D aiQuaternion::Rotate(const aiVector3D &v) 
# 298
{ 
# 299
aiQuaternion q2((0.0F), v.x, v.y, v.z), q = *this, qinv = q; 
# 300
q.Conjugate(); 
# 302
q = (((q * q2)) * qinv); 
# 303
return aiVector3D(q.x, q.y, q.z); 
# 305
} 
# 307
}
# 69 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiTypes.h"
namespace Assimp { 
# 71
namespace Intern { 
# 86
struct AllocateFromAssimpHeap { 
# 90
void *operator new(::size_t num_bytes); 
# 91
void *operator new(::size_t num_bytes, const std::nothrow_t &) throw(); 
# 92
static void operator delete(void * data); 
# 95
void *operator new[](::size_t num_bytes); 
# 96
void *operator new[](::size_t num_bytes, const std::nothrow_t &) throw(); 
# 97
static void operator delete[](void * data); 
# 99
}; 
# 101
}
# 103
}
# 105
extern "C" {
# 110
const ::size_t MAXLEN = (1024); 
# 120
struct aiPlane { 
# 123
aiPlane() : a((0.0F)), b((0.0F)), c((0.0F)), d((0.0F)) { } 
# 124
aiPlane(float _a, float _b, float _c, float _d) : a(_a), b(_b), c(_c), d(_d) 
# 125
{ } 
# 127
aiPlane(const aiPlane &o) : a(o.a), b(o.b), c(o.c), d(o.d) { } 
# 132
float a, b, c, d; 
# 133
} __attribute((packed)); 
# 138
struct aiRay { 
# 141
aiRay() { } 
# 142
aiRay(const aiVector3D &_pos, const aiVector3D &_dir) : pos(_pos), dir(_dir) 
# 143
{ } 
# 145
aiRay(const aiRay &o) : pos(o.pos), dir(o.dir) { } 
# 150
aiVector3D pos, dir; 
# 151
} __attribute((packed)); 
# 156
struct aiColor3D { 
# 159
aiColor3D() : r((0.0F)), g((0.0F)), b((0.0F)) { } 
# 160
aiColor3D(float _r, float _g, float _b) : r(_r), g(_g), b(_b) { } 
# 161
aiColor3D(float _r) : r(_r), g(_r), b(_r) { } 
# 162
aiColor3D(const aiColor3D &o) : r(o.r), g(o.g), b(o.b) { } 
# 166
bool operator==(const aiColor3D &other) const 
# 167
{ return ((r) == (other.r)) && ((g) == (other.g)) && ((b) == (other.b)); } 
# 171
bool operator!=(const aiColor3D &other) const 
# 172
{ return (((r) != (other.r)) || ((g) != (other.g))) || ((b) != (other.b)); } 
# 175
aiColor3D operator+(const aiColor3D &c) const { 
# 176
return aiColor3D((r) + (c.r), (g) + (c.g), (b) + (c.b)); 
# 177
} 
# 180
aiColor3D operator-(const aiColor3D &c) const { 
# 181
return aiColor3D((r) + (c.r), (g) + (c.g), (b) + (c.b)); 
# 182
} 
# 185
aiColor3D operator*(const aiColor3D &c) const { 
# 186
return aiColor3D((r) * (c.r), (g) * (c.g), (b) * (c.b)); 
# 187
} 
# 190
aiColor3D operator*(float f) const { 
# 191
return aiColor3D((r) * f, (g) * f, (b) * f); 
# 192
} 
# 195
float operator[](unsigned i) const { 
# 196
return *((&(r)) + i); 
# 197
} 
# 200
float &operator[](unsigned i) { 
# 201
return *((&(r)) + i); 
# 202
} 
# 205
bool IsBlack() const { 
# 206
static const float epsilon = (0.009999999776F); 
# 207
return (fabs(r) < epsilon) && (fabs(g) < epsilon) && (fabs(b) < epsilon); 
# 208
} 
# 213
float r, g, b; 
# 214
} __attribute((packed)); 
# 238
struct aiString { 
# 242
aiString() : length((0)) 
# 244
{ 
# 245
((data)[0]) = '\000'; 
# 251
} 
# 254
aiString(const aiString &rOther) : length(rOther.length) 
# 256
{ 
# 258
(length) = (((length) >= MAXLEN) ? MAXLEN - (1) : (length)); 
# 259
memcpy(data, rOther.data, length); 
# 260
((data)[length]) = '\000'; 
# 261
} 
# 264
aiString(const std::__cxx11::string &pString) : length(pString.length()) 
# 266
{ 
# 267
(length) = (((length) >= MAXLEN) ? MAXLEN - (1) : (length)); 
# 268
memcpy(data, pString.c_str(), length); 
# 269
((data)[length]) = '\000'; 
# 270
} 
# 273
void Set(const std::__cxx11::string &pString) { 
# 274
if (pString.length() > (MAXLEN - (1))) { 
# 275
return; 
# 276
}  
# 277
(length) = pString.length(); 
# 278
::memcpy(data, pString.c_str(), length); 
# 279
((data)[length]) = (0); 
# 280
} 
# 283
void Set(const char *sz) { 
# 284
const ::size_t len = ::strlen(sz); 
# 285
if (len > (MAXLEN - (1))) { 
# 286
return; 
# 287
}  
# 288
(length) = len; 
# 289
::memcpy(data, sz, len); 
# 290
((data)[len]) = (0); 
# 291
} 
# 294
aiString &operator=(const char *sz) { 
# 295
this->Set(sz); 
# 296
return *this; 
# 297
} 
# 300
aiString &operator=(const std::__cxx11::string &pString) { 
# 301
this->Set(pString); 
# 302
return *this; 
# 303
} 
# 306
bool operator==(const aiString &other) const { 
# 307
return ((length) == (other.length)) && (0 == strcmp(this->data, other.data)); 
# 308
} 
# 311
bool operator!=(const aiString &other) const { 
# 312
return ((length) != (other.length)) || (0 != ::strcmp(this->data, other.data)); 
# 313
} 
# 316
void Append(const char *app) { 
# 317
const ::size_t len = ::strlen(app); 
# 318
if (!len) { 
# 319
return; 
# 320
}  
# 321
if (((length) + len) >= MAXLEN) { 
# 322
return; 
# 323
}  
# 325
memcpy(&((data)[length]), app, len + (1)); 
# 326
(length) += len; 
# 327
} 
# 330
void Clear() { 
# 331
(length) = (0); 
# 332
((data)[0]) = '\000'; 
# 338
} 
# 345
::size_t length; 
# 348
char data[MAXLEN]; 
# 349
}; 
# 356
enum aiReturn { 
# 359
aiReturn_SUCCESS, 
# 362
aiReturn_FAILURE = (-1), 
# 367
aiReturn_OUTOFMEMORY = (-3), 
# 372
_AI_ENFORCE_ENUM_SIZE = 2147483647
# 373
}; 
# 384
enum aiOrigin { 
# 387
aiOrigin_SET, 
# 390
aiOrigin_CUR, 
# 393
aiOrigin_END, 
# 398
_AI_ORIGIN_ENFORCE_ENUM_SIZE = 2147483647
# 399
}; 
# 407
enum aiDefaultLogStream { 
# 410
aiDefaultLogStream_FILE = 1, 
# 413
aiDefaultLogStream_STDOUT, 
# 416
aiDefaultLogStream_STDERR = 4, 
# 421
aiDefaultLogStream_DEBUGGER = 8, 
# 426
_AI_DLS_ENFORCE_ENUM_SIZE = 2147483647
# 427
}; 
# 440
struct aiMemoryInfo { 
# 445
aiMemoryInfo() : textures((0)), materials((0)), meshes((0)), nodes((0)), animations((0)), cameras((0)), lights((0)), total((0)) 
# 454
{ } 
# 459
unsigned textures; 
# 462
unsigned materials; 
# 465
unsigned meshes; 
# 468
unsigned nodes; 
# 471
unsigned animations; 
# 474
unsigned cameras; 
# 477
unsigned lights; 
# 480
unsigned total; 
# 481
}; 
# 484
}
# 53 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiVector3D.inl"
inline aiVector3D operator*(const aiMatrix3x3 &pMatrix, const aiVector3D &pVector) 
# 54
{ 
# 55
aiVector3D res; 
# 56
(res.x) = ((((pMatrix.a1) * (pVector.x)) + ((pMatrix.a2) * (pVector.y))) + ((pMatrix.a3) * (pVector.z))); 
# 57
(res.y) = ((((pMatrix.b1) * (pVector.x)) + ((pMatrix.b2) * (pVector.y))) + ((pMatrix.b3) * (pVector.z))); 
# 58
(res.z) = ((((pMatrix.c1) * (pVector.x)) + ((pMatrix.c2) * (pVector.y))) + ((pMatrix.c3) * (pVector.z))); 
# 59
return res; 
# 60
} 
# 64
inline aiVector3D operator*(const aiMatrix4x4 &pMatrix, const aiVector3D &pVector) 
# 65
{ 
# 66
aiVector3D res; 
# 67
(res.x) = (((((pMatrix.a1) * (pVector.x)) + ((pMatrix.a2) * (pVector.y))) + ((pMatrix.a3) * (pVector.z))) + (pMatrix.a4)); 
# 68
(res.y) = (((((pMatrix.b1) * (pVector.x)) + ((pMatrix.b2) * (pVector.y))) + ((pMatrix.b3) * (pVector.z))) + (pMatrix.b4)); 
# 69
(res.z) = (((((pMatrix.c1) * (pVector.x)) + ((pMatrix.c2) * (pVector.y))) + ((pMatrix.c3) * (pVector.z))) + (pMatrix.c4)); 
# 70
return res; 
# 71
} 
# 73
inline void aiVector3D::Set(float pX, float pY, float pZ) { 
# 74
(x) = pX; (y) = pY; (z) = pZ; 
# 75
} 
# 77
inline float aiVector3D::SquareLength() const { 
# 78
return (((x) * (x)) + ((y) * (y))) + ((z) * (z)); 
# 79
} 
# 81
inline float aiVector3D::Length() const { 
# 82
return sqrt(this->SquareLength()); 
# 83
} 
# 85
inline aiVector3D &aiVector3D::Normalize() { 
# 86
((*this) /= (this->Length())); return *this; 
# 87
} 
# 89
inline const aiVector3D &aiVector3D::operator+=(const aiVector3D &o) { 
# 90
(x) += (o.x); (y) += (o.y); (z) += (o.z); return *this; 
# 91
} 
# 93
inline const aiVector3D &aiVector3D::operator-=(const aiVector3D &o) { 
# 94
(x) -= (o.x); (y) -= (o.y); (z) -= (o.z); return *this; 
# 95
} 
# 97
inline const aiVector3D &aiVector3D::operator*=(float f) { 
# 98
(x) *= f; (y) *= f; (z) *= f; return *this; 
# 99
} 
# 101
inline const aiVector3D &aiVector3D::operator/=(float f) { 
# 102
(x) /= f; (y) /= f; (z) /= f; return *this; 
# 103
} 
# 105
inline aiVector3D &aiVector3D::operator*=(const aiMatrix3x3 &mat) { 
# 106
return (*this) = ((mat * (*this))); 
# 107
} 
# 109
inline aiVector3D &aiVector3D::operator*=(const aiMatrix4x4 &mat) { 
# 110
return (*this) = ((mat * (*this))); 
# 111
} 
# 113
inline float aiVector3D::operator[](unsigned i) const { 
# 114
return *((&(x)) + i); 
# 115
} 
# 117
inline float &aiVector3D::operator[](unsigned i) { 
# 118
return *((&(x)) + i); 
# 119
} 
# 121
inline bool aiVector3D::operator==(const aiVector3D &other) const { 
# 122
return ((x) == (other.x)) && ((y) == (other.y)) && ((z) == (other.z)); 
# 123
} 
# 125
inline bool aiVector3D::operator!=(const aiVector3D &other) const { 
# 126
return (((x) != (other.x)) || ((y) != (other.y))) || ((z) != (other.z)); 
# 127
} 
# 129
inline const aiVector3D aiVector3D::SymMul(const aiVector3D &o) { 
# 130
return aiVector3D((x) * (o.x), (y) * (o.y), (z) * (o.z)); 
# 131
} 
# 134
inline aiVector3D operator+(const aiVector3D &v1, const aiVector3D &v2) { 
# 135
return aiVector3D((v1.x) + (v2.x), (v1.y) + (v2.y), (v1.z) + (v2.z)); 
# 136
} 
# 139
inline aiVector3D operator-(const aiVector3D &v1, const aiVector3D &v2) { 
# 140
return aiVector3D((v1.x) - (v2.x), (v1.y) - (v2.y), (v1.z) - (v2.z)); 
# 141
} 
# 144
inline float operator*(const aiVector3D &v1, const aiVector3D &v2) { 
# 145
return (((v1.x) * (v2.x)) + ((v1.y) * (v2.y))) + ((v1.z) * (v2.z)); 
# 146
} 
# 149
inline aiVector3D operator*(float f, const aiVector3D &v) { 
# 150
return aiVector3D(f * (v.x), f * (v.y), f * (v.z)); 
# 151
} 
# 154
inline aiVector3D operator*(const aiVector3D &v, float f) { 
# 155
return aiVector3D(f * (v.x), f * (v.y), f * (v.z)); 
# 156
} 
# 159
inline aiVector3D operator/(const aiVector3D &v, float f) { 
# 160
return (v * ((1) / f)); 
# 161
} 
# 164
inline aiVector3D operator/(const aiVector3D &v, const aiVector3D &v2) { 
# 165
return aiVector3D((v.x) / (v2.x), (v.y) / (v2.y), (v.z) / (v2.z)); 
# 166
} 
# 169
inline aiVector3D operator^(const aiVector3D &v1, const aiVector3D &v2) { 
# 170
return aiVector3D(((v1.y) * (v2.z)) - ((v1.z) * (v2.y)), ((v1.z) * (v2.x)) - ((v1.x) * (v2.z)), ((v1.x) * (v2.y)) - ((v1.y) * (v2.x))); 
# 171
} 
# 174
inline aiVector3D operator-(const aiVector3D &v) { 
# 175
return aiVector3D(-(v.x), -(v.y), -(v.z)); 
# 176
} 
# 52 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiColor4D.inl"
inline const aiColor4D &aiColor4D::operator+=(const aiColor4D &o) { 
# 53
(r) += (o.r); (g) += (o.g); (b) += (o.b); (a) += (o.a); return *this; 
# 54
} 
# 56
inline const aiColor4D &aiColor4D::operator-=(const aiColor4D &o) { 
# 57
(r) -= (o.r); (g) -= (o.g); (b) -= (o.b); (a) -= (o.a); return *this; 
# 58
} 
# 60
inline const aiColor4D &aiColor4D::operator*=(float f) { 
# 61
(r) *= f; (g) *= f; (b) *= f; (a) *= f; return *this; 
# 62
} 
# 64
inline const aiColor4D &aiColor4D::operator/=(float f) { 
# 65
(r) /= f; (g) /= f; (b) /= f; (a) /= f; return *this; 
# 66
} 
# 68
inline float aiColor4D::operator[](unsigned i) const { 
# 69
return *((&(r)) + i); 
# 70
} 
# 72
inline float &aiColor4D::operator[](unsigned i) { 
# 73
return *((&(r)) + i); 
# 74
} 
# 76
inline bool aiColor4D::operator==(const aiColor4D &other) const { 
# 77
return ((r) == (other.r)) && ((g) == (other.g)) && ((b) == (other.b)) && ((a) == (other.a)); 
# 78
} 
# 80
inline bool aiColor4D::operator!=(const aiColor4D &other) const { 
# 81
return ((((r) != (other.r)) || ((g) != (other.g))) || ((b) != (other.b))) || ((a) != (other.a)); 
# 82
} 
# 84
inline aiColor4D operator+(const aiColor4D &v1, const aiColor4D &v2) { 
# 85
return aiColor4D((v1.r) + (v2.r), (v1.g) + (v2.g), (v1.b) + (v2.b), (v1.a) + (v2.a)); 
# 86
} 
# 88
inline aiColor4D operator-(const aiColor4D &v1, const aiColor4D &v2) { 
# 89
return aiColor4D((v1.r) - (v2.r), (v1.g) - (v2.g), (v1.b) - (v2.b), (v1.a) - (v2.a)); 
# 90
} 
# 92
inline aiColor4D operator*(const aiColor4D &v1, const aiColor4D &v2) { 
# 93
return aiColor4D((v1.r) * (v2.r), (v1.g) * (v2.g), (v1.b) * (v2.b), (v1.a) * (v2.a)); 
# 94
} 
# 96
inline aiColor4D operator/(const aiColor4D &v1, const aiColor4D &v2) { 
# 97
return aiColor4D((v1.r) / (v2.r), (v1.g) / (v2.g), (v1.b) / (v2.b), (v1.a) / (v2.a)); 
# 98
} 
# 100
inline aiColor4D operator*(float f, const aiColor4D &v) { 
# 101
return aiColor4D(f * (v.r), f * (v.g), f * (v.b), f * (v.a)); 
# 102
} 
# 104
inline aiColor4D operator*(const aiColor4D &v, float f) { 
# 105
return aiColor4D(f * (v.r), f * (v.g), f * (v.b), f * (v.a)); 
# 106
} 
# 108
inline aiColor4D operator/(const aiColor4D &v, float f) { 
# 109
return (v * ((1) / f)); 
# 110
} 
# 112
inline aiColor4D operator/(float f, const aiColor4D &v) { 
# 113
return (aiColor4D(f, f, f, f) / v); 
# 114
} 
# 116
inline aiColor4D operator+(const aiColor4D &v, float f) { 
# 117
return aiColor4D(f + (v.r), f + (v.g), f + (v.b), f + (v.a)); 
# 118
} 
# 120
inline aiColor4D operator-(const aiColor4D &v, float f) { 
# 121
return aiColor4D((v.r) - f, (v.g) - f, (v.b) - f, (v.a) - f); 
# 122
} 
# 124
inline aiColor4D operator+(float f, const aiColor4D &v) { 
# 125
return aiColor4D(f + (v.r), f + (v.g), f + (v.b), f + (v.a)); 
# 126
} 
# 128
inline aiColor4D operator-(float f, const aiColor4D &v) { 
# 129
return aiColor4D(f - (v.r), f - (v.g), f - (v.b), f - (v.a)); 
# 130
} 
# 133
inline bool aiColor4D::IsBlack() const { 
# 135
static const float epsilon = (0.009999999776F); 
# 136
return (fabs(r) < epsilon) && (fabs(g) < epsilon) && (fabs(b) < epsilon); 
# 137
} 
# 16 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiMatrix3x3.inl"
inline aiMatrix3x3::aiMatrix3x3(const aiMatrix4x4 &pMatrix) 
# 17
{ 
# 18
(a1) = (pMatrix.a1); (a2) = (pMatrix.a2); (a3) = (pMatrix.a3); 
# 19
(b1) = (pMatrix.b1); (b2) = (pMatrix.b2); (b3) = (pMatrix.b3); 
# 20
(c1) = (pMatrix.c1); (c2) = (pMatrix.c2); (c3) = (pMatrix.c3); 
# 21
} 
# 24
inline aiMatrix3x3 &aiMatrix3x3::operator*=(const aiMatrix3x3 &m) 
# 25
{ 
# 26
(*this) = aiMatrix3x3((((m.a1) * (a1)) + ((m.b1) * (a2))) + ((m.c1) * (a3)), (((m.a2) * (a1)) + ((m.b2) * (a2))) + ((m.c2) * (a3)), (((m.a3) * (a1)) + ((m.b3) * (a2))) + ((m.c3) * (a3)), (((m.a1) * (b1)) + ((m.b1) * (b2))) + ((m.c1) * (b3)), (((m.a2) * (b1)) + ((m.b2) * (b2))) + ((m.c2) * (b3)), (((m.a3) * (b1)) + ((m.b3) * (b2))) + ((m.c3) * (b3)), (((m.a1) * (c1)) + ((m.b1) * (c2))) + ((m.c1) * (c3)), (((m.a2) * (c1)) + ((m.b2) * (c2))) + ((m.c2) * (c3)), (((m.a3) * (c1)) + ((m.b3) * (c2))) + ((m.c3) * (c3))); 
# 35
return *this; 
# 36
} 
# 39
inline aiMatrix3x3 aiMatrix3x3::operator*(const aiMatrix3x3 &m) const 
# 40
{ 
# 41
aiMatrix3x3 temp(*this); 
# 42
(temp *= m); 
# 43
return temp; 
# 44
} 
# 47
inline float *aiMatrix3x3::operator[](unsigned p_iIndex) 
# 48
{ 
# 49
return (&(this->a1)) + (p_iIndex * (3)); 
# 50
} 
# 53
inline const float *aiMatrix3x3::operator[](unsigned p_iIndex) const 
# 54
{ 
# 55
return (&(this->a1)) + (p_iIndex * (3)); 
# 56
} 
# 59
inline bool aiMatrix3x3::operator==(const aiMatrix4x4 m) const 
# 60
{ 
# 61
return ((a1) == (m.a1)) && ((a2) == (m.a2)) && ((a3) == (m.a3)) && ((b1) == (m.b1)) && ((b2) == (m.b2)) && ((b3) == (m.b3)) && ((c1) == (m.c1)) && ((c2) == (m.c2)) && ((c3) == (m.c3)); 
# 64
} 
# 67
inline bool aiMatrix3x3::operator!=(const aiMatrix4x4 m) const 
# 68
{ 
# 69
return !((*this) == m); 
# 70
} 
# 73
inline aiMatrix3x3 &aiMatrix3x3::Transpose() 
# 74
{ 
# 76
std::swap((float &)(a2), (float &)(b1)); 
# 77
std::swap((float &)(a3), (float &)(c1)); 
# 78
std::swap((float &)(b3), (float &)(c2)); 
# 79
return *this; 
# 80
} 
# 83
inline float aiMatrix3x3::Determinant() const 
# 84
{ 
# 85
return (((((((a1) * (b2)) * (c3)) - (((a1) * (b3)) * (c2))) + (((a2) * (b3)) * (c1))) - (((a2) * (b1)) * (c3))) + (((a3) * (b1)) * (c2))) - (((a3) * (b2)) * (c1)); 
# 86
} 
# 89
inline aiMatrix3x3 &aiMatrix3x3::Inverse() 
# 90
{ 
# 92
float det = this->Determinant(); 
# 93
if (det == (0.0F)) 
# 94
{ 
# 98
const float nan = std::numeric_limits< float> ::quiet_NaN(); 
# 99
(*this) = aiMatrix3x3(nan, nan, nan, nan, nan, nan, nan, nan, nan); 
# 101
return *this; 
# 102
}  
# 104
float invdet = (1.0F) / det; 
# 106
aiMatrix3x3 res; 
# 107
(res.a1) = (invdet * (((b2) * (c3)) - ((b3) * (c2)))); 
# 108
(res.a2) = ((-invdet) * (((a2) * (c3)) - ((a3) * (c2)))); 
# 109
(res.a3) = (invdet * (((a2) * (b3)) - ((a3) * (b2)))); 
# 110
(res.b1) = ((-invdet) * (((b1) * (c3)) - ((b3) * (c1)))); 
# 111
(res.b2) = (invdet * (((a1) * (c3)) - ((a3) * (c1)))); 
# 112
(res.b3) = ((-invdet) * (((a1) * (b3)) - ((a3) * (b1)))); 
# 113
(res.c1) = (invdet * (((b1) * (c2)) - ((b2) * (c1)))); 
# 114
(res.c2) = ((-invdet) * (((a1) * (c2)) - ((a2) * (c1)))); 
# 115
(res.c3) = (invdet * (((a1) * (b2)) - ((a2) * (b1)))); 
# 116
(*this) = res; 
# 118
return *this; 
# 119
} 
# 122
inline aiMatrix3x3 &aiMatrix3x3::RotationZ(float a, aiMatrix3x3 &out) 
# 123
{ 
# 124
(out.a1) = ((out.b2) = ::cos(a)); 
# 125
(out.b1) = ::sin(a); 
# 126
(out.a2) = (-(out.b1)); 
# 128
(out.a3) = ((out.b3) = ((out.c1) = ((out.c2) = (0.0F)))); 
# 129
(out.c3) = (1.0F); 
# 131
return out; 
# 132
} 
# 136
inline aiMatrix3x3 &aiMatrix3x3::Rotation(float a, const aiVector3D &axis, aiMatrix3x3 &out) 
# 137
{ 
# 138
float c = cos(a), s = sin(a), t = (1) - c; 
# 139
float x = axis.x, y = axis.y, z = axis.z; 
# 142
(out.a1) = (((t * x) * x) + c); (out.a2) = (((t * x) * y) - (s * z)); (out.a3) = (((t * x) * z) + (s * y)); 
# 143
(out.b1) = (((t * x) * y) + (s * z)); (out.b2) = (((t * y) * y) + c); (out.b3) = (((t * y) * z) - (s * x)); 
# 144
(out.c1) = (((t * x) * z) - (s * y)); (out.c2) = (((t * y) * z) + (s * x)); (out.c3) = (((t * z) * z) + c); 
# 146
return out; 
# 147
} 
# 150
inline aiMatrix3x3 &aiMatrix3x3::Translation(const aiVector2D &v, aiMatrix3x3 &out) 
# 151
{ 
# 152
out = aiMatrix3x3(); 
# 153
(out.a3) = (v.x); 
# 154
(out.b3) = (v.y); 
# 155
return out; 
# 156
} 
# 168
inline aiMatrix3x3 &aiMatrix3x3::FromToMatrix(const aiVector3D &from, const aiVector3D &
# 169
to, aiMatrix3x3 &mtx) 
# 170
{ 
# 171
const float e = (from * to); 
# 172
const float f = (e < (0)) ? -e : e; 
# 174
if (f > ((1.0) - ((9.999999747e-06F)))) 
# 175
{ 
# 176
aiVector3D u, v; 
# 177
aiVector3D x; 
# 179
(x.x) = (((from.x) > (0.0)) ? from.x : (-(from.x))); 
# 180
(x.y) = (((from.y) > (0.0)) ? from.y : (-(from.y))); 
# 181
(x.z) = (((from.z) > (0.0)) ? from.z : (-(from.z))); 
# 183
if ((x.x) < (x.y)) 
# 184
{ 
# 185
if ((x.x) < (x.z)) 
# 186
{ 
# 187
(x.x) = ((1.0)); (x.y) = ((x.z) = ((0.0))); 
# 188
} else 
# 190
{ 
# 191
(x.z) = ((1.0)); (x.y) = ((x.z) = ((0.0))); 
# 192
}  
# 193
} else 
# 195
{ 
# 196
if ((x.y) < (x.z)) 
# 197
{ 
# 198
(x.y) = ((1.0)); (x.x) = ((x.z) = ((0.0))); 
# 199
} else 
# 201
{ 
# 202
(x.z) = ((1.0)); (x.x) = ((x.y) = ((0.0))); 
# 203
}  
# 204
}  
# 206
(u.x) = ((x.x) - (from.x)); (u.y) = ((x.y) - (from.y)); (u.z) = ((x.z) - (from.z)); 
# 207
(v.x) = ((x.x) - (to.x)); (v.y) = ((x.y) - (to.y)); (v.z) = ((x.z) - (to.z)); 
# 209
const float c1 = (2.0F) / ((u * u)); 
# 210
const float c2 = (2.0F) / ((v * v)); 
# 211
const float c3 = (c1 * c2) * ((u * v)); 
# 213
for (unsigned i = (0); i < (3); i++) 
# 214
{ 
# 215
for (unsigned j = (0); j < (3); j++) 
# 216
{ 
# 217
(mtx[i][j]) = (((((-c1) * u[i]) * u[j]) - ((c2 * v[i]) * v[j])) + ((c3 * v[i]) * u[j])); 
# 219
}  
# 220
(mtx[i][i]) += (1.0); 
# 221
}  
# 222
} else 
# 224
{ 
# 225
const aiVector3D v = (from ^ to); 
# 227
const float h = (1.0F) / ((1.0F) + e); 
# 228
const float hvx = h * (v.x); 
# 229
const float hvz = h * (v.z); 
# 230
const float hvxy = hvx * (v.y); 
# 231
const float hvxz = hvx * (v.z); 
# 232
const float hvyz = hvz * (v.y); 
# 233
(mtx[0][0]) = (e + (hvx * (v.x))); 
# 234
(mtx[0][1]) = (hvxy - (v.z)); 
# 235
(mtx[0][2]) = (hvxz + (v.y)); 
# 237
(mtx[1][0]) = (hvxy + (v.z)); 
# 238
(mtx[1][1]) = (e + ((h * (v.y)) * (v.y))); 
# 239
(mtx[1][2]) = (hvyz - (v.x)); 
# 241
(mtx[2][0]) = (hvxz - (v.y)); 
# 242
(mtx[2][1]) = (hvyz + (v.x)); 
# 243
(mtx[2][2]) = (e + (hvz * (v.z))); 
# 244
}  
# 245
return mtx; 
# 246
} 
# 12 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiAssert.h"
namespace Assimp { 
# 17
void aiAssert(const std::__cxx11::string & message, unsigned uiLine, const std::__cxx11::string & file); 
# 28
}
# 61 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiMatrix4x4.inl"
inline aiMatrix4x4::aiMatrix4x4(const aiMatrix3x3 &m) 
# 62
{ 
# 63
(a1) = (m.a1); (a2) = (m.a2); (a3) = (m.a3); (a4) = (0.0F); 
# 64
(b1) = (m.b1); (b2) = (m.b2); (b3) = (m.b3); (b4) = (0.0F); 
# 65
(c1) = (m.c1); (c2) = (m.c2); (c3) = (m.c3); (c4) = (0.0F); 
# 66
(d1) = (0.0F); (d2) = (0.0F); (d3) = (0.0F); (d4) = (1.0F); 
# 67
} 
# 70
inline aiMatrix4x4 &aiMatrix4x4::operator*=(const aiMatrix4x4 &m) 
# 71
{ 
# 72
(*this) = aiMatrix4x4(((((m.a1) * (a1)) + ((m.b1) * (a2))) + ((m.c1) * (a3))) + ((m.d1) * (a4)), ((((m.a2) * (a1)) + ((m.b2) * (a2))) + ((m.c2) * (a3))) + ((m.d2) * (a4)), ((((m.a3) * (a1)) + ((m.b3) * (a2))) + ((m.c3) * (a3))) + ((m.d3) * (a4)), ((((m.a4) * (a1)) + ((m.b4) * (a2))) + ((m.c4) * (a3))) + ((m.d4) * (a4)), ((((m.a1) * (b1)) + ((m.b1) * (b2))) + ((m.c1) * (b3))) + ((m.d1) * (b4)), ((((m.a2) * (b1)) + ((m.b2) * (b2))) + ((m.c2) * (b3))) + ((m.d2) * (b4)), ((((m.a3) * (b1)) + ((m.b3) * (b2))) + ((m.c3) * (b3))) + ((m.d3) * (b4)), ((((m.a4) * (b1)) + ((m.b4) * (b2))) + ((m.c4) * (b3))) + ((m.d4) * (b4)), ((((m.a1) * (c1)) + ((m.b1) * (c2))) + ((m.c1) * (c3))) + ((m.d1) * (c4)), ((((m.a2) * (c1)) + ((m.b2) * (c2))) + ((m.c2) * (c3))) + ((m.d2) * (c4)), ((((m.a3) * (c1)) + ((m.b3) * (c2))) + ((m.c3) * (c3))) + ((m.d3) * (c4)), ((((m.a4) * (c1)) + ((m.b4) * (c2))) + ((m.c4) * (c3))) + ((m.d4) * (c4)), ((((m.a1) * (d1)) + ((m.b1) * (d2))) + ((m.c1) * (d3))) + ((m.d1) * (d4)), ((((m.a2) * (d1)) + ((m.b2) * (d2))) + ((m.c2) * (d3))) + ((m.d2) * (d4)), ((((m.a3) * (d1)) + ((m.b3) * (d2))) + ((m.c3) * (d3))) + ((m.d3) * (d4)), ((((m.a4) * (d1)) + ((m.b4) * (d2))) + ((m.c4) * (d3))) + ((m.d4) * (d4))); 
# 89
return *this; 
# 90
} 
# 93
inline aiMatrix4x4 aiMatrix4x4::operator*(const aiMatrix4x4 &m) const 
# 94
{ 
# 95
aiMatrix4x4 temp(*this); 
# 96
(temp *= m); 
# 97
return temp; 
# 98
} 
# 102
inline aiMatrix4x4 &aiMatrix4x4::Transpose() 
# 103
{ 
# 105
std::swap((float &)(b1), (float &)(a2)); 
# 106
std::swap((float &)(c1), (float &)(a3)); 
# 107
std::swap((float &)(c2), (float &)(b3)); 
# 108
std::swap((float &)(d1), (float &)(a4)); 
# 109
std::swap((float &)(d2), (float &)(b4)); 
# 110
std::swap((float &)(d3), (float &)(c4)); 
# 111
return *this; 
# 112
} 
# 116
inline float aiMatrix4x4::Determinant() const 
# 117
{ 
# 118
return ((((((((((((((((((((((((((a1) * (b2)) * (c3)) * (d4)) - ((((a1) * (b2)) * (c4)) * (d3))) + ((((a1) * (b3)) * (c4)) * (d2))) - ((((a1) * (b3)) * (c2)) * (d4))) + ((((a1) * (b4)) * (c2)) * (d3))) - ((((a1) * (b4)) * (c3)) * (d2))) - ((((a2) * (b3)) * (c4)) * (d1))) + ((((a2) * (b3)) * (c1)) * (d4))) - ((((a2) * (b4)) * (c1)) * (d3))) + ((((a2) * (b4)) * (c3)) * (d1))) - ((((a2) * (b1)) * (c3)) * (d4))) + ((((a2) * (b1)) * (c4)) * (d3))) + ((((a3) * (b4)) * (c1)) * (d2))) - ((((a3) * (b4)) * (c2)) * (d1))) + ((((a3) * (b1)) * (c2)) * (d4))) - ((((a3) * (b1)) * (c4)) * (d2))) + ((((a3) * (b2)) * (c4)) * (d1))) - ((((a3) * (b2)) * (c1)) * (d4))) - ((((a4) * (b1)) * (c2)) * (d3))) + ((((a4) * (b1)) * (c3)) * (d2))) - ((((a4) * (b2)) * (c3)) * (d1))) + ((((a4) * (b2)) * (c1)) * (d3))) - ((((a4) * (b3)) * (c1)) * (d2))) + ((((a4) * (b3)) * (c2)) * (d1)); 
# 124
} 
# 127
inline aiMatrix4x4 &aiMatrix4x4::Inverse() 
# 128
{ 
# 130
float det = this->Determinant(); 
# 131
if (det == (0.0F)) 
# 132
{ 
# 136
const float nan = std::numeric_limits< float> ::quiet_NaN(); 
# 137
(*this) = aiMatrix4x4(nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan); 
# 143
return *this; 
# 144
}  
# 146
float invdet = (1.0F) / det; 
# 148
aiMatrix4x4 res; 
# 149
(res.a1) = (invdet * ((((b2) * (((c3) * (d4)) - ((c4) * (d3)))) + ((b3) * (((c4) * (d2)) - ((c2) * (d4))))) + ((b4) * (((c2) * (d3)) - ((c3) * (d2)))))); 
# 150
(res.a2) = ((-invdet) * ((((a2) * (((c3) * (d4)) - ((c4) * (d3)))) + ((a3) * (((c4) * (d2)) - ((c2) * (d4))))) + ((a4) * (((c2) * (d3)) - ((c3) * (d2)))))); 
# 151
(res.a3) = (invdet * ((((a2) * (((b3) * (d4)) - ((b4) * (d3)))) + ((a3) * (((b4) * (d2)) - ((b2) * (d4))))) + ((a4) * (((b2) * (d3)) - ((b3) * (d2)))))); 
# 152
(res.a4) = ((-invdet) * ((((a2) * (((b3) * (c4)) - ((b4) * (c3)))) + ((a3) * (((b4) * (c2)) - ((b2) * (c4))))) + ((a4) * (((b2) * (c3)) - ((b3) * (c2)))))); 
# 153
(res.b1) = ((-invdet) * ((((b1) * (((c3) * (d4)) - ((c4) * (d3)))) + ((b3) * (((c4) * (d1)) - ((c1) * (d4))))) + ((b4) * (((c1) * (d3)) - ((c3) * (d1)))))); 
# 154
(res.b2) = (invdet * ((((a1) * (((c3) * (d4)) - ((c4) * (d3)))) + ((a3) * (((c4) * (d1)) - ((c1) * (d4))))) + ((a4) * (((c1) * (d3)) - ((c3) * (d1)))))); 
# 155
(res.b3) = ((-invdet) * ((((a1) * (((b3) * (d4)) - ((b4) * (d3)))) + ((a3) * (((b4) * (d1)) - ((b1) * (d4))))) + ((a4) * (((b1) * (d3)) - ((b3) * (d1)))))); 
# 156
(res.b4) = (invdet * ((((a1) * (((b3) * (c4)) - ((b4) * (c3)))) + ((a3) * (((b4) * (c1)) - ((b1) * (c4))))) + ((a4) * (((b1) * (c3)) - ((b3) * (c1)))))); 
# 157
(res.c1) = (invdet * ((((b1) * (((c2) * (d4)) - ((c4) * (d2)))) + ((b2) * (((c4) * (d1)) - ((c1) * (d4))))) + ((b4) * (((c1) * (d2)) - ((c2) * (d1)))))); 
# 158
(res.c2) = ((-invdet) * ((((a1) * (((c2) * (d4)) - ((c4) * (d2)))) + ((a2) * (((c4) * (d1)) - ((c1) * (d4))))) + ((a4) * (((c1) * (d2)) - ((c2) * (d1)))))); 
# 159
(res.c3) = (invdet * ((((a1) * (((b2) * (d4)) - ((b4) * (d2)))) + ((a2) * (((b4) * (d1)) - ((b1) * (d4))))) + ((a4) * (((b1) * (d2)) - ((b2) * (d1)))))); 
# 160
(res.c4) = ((-invdet) * ((((a1) * (((b2) * (c4)) - ((b4) * (c2)))) + ((a2) * (((b4) * (c1)) - ((b1) * (c4))))) + ((a4) * (((b1) * (c2)) - ((b2) * (c1)))))); 
# 161
(res.d1) = ((-invdet) * ((((b1) * (((c2) * (d3)) - ((c3) * (d2)))) + ((b2) * (((c3) * (d1)) - ((c1) * (d3))))) + ((b3) * (((c1) * (d2)) - ((c2) * (d1)))))); 
# 162
(res.d2) = (invdet * ((((a1) * (((c2) * (d3)) - ((c3) * (d2)))) + ((a2) * (((c3) * (d1)) - ((c1) * (d3))))) + ((a3) * (((c1) * (d2)) - ((c2) * (d1)))))); 
# 163
(res.d3) = ((-invdet) * ((((a1) * (((b2) * (d3)) - ((b3) * (d2)))) + ((a2) * (((b3) * (d1)) - ((b1) * (d3))))) + ((a3) * (((b1) * (d2)) - ((b2) * (d1)))))); 
# 164
(res.d4) = (invdet * ((((a1) * (((b2) * (c3)) - ((b3) * (c2)))) + ((a2) * (((b3) * (c1)) - ((b1) * (c3))))) + ((a3) * (((b1) * (c2)) - ((b2) * (c1)))))); 
# 165
(*this) = res; 
# 167
return *this; 
# 168
} 
# 171
inline float *aiMatrix4x4::operator[](unsigned p_iIndex) 
# 172
{ 
# 173
return (&(this->a1)) + (p_iIndex * (4)); 
# 174
} 
# 177
inline const float *aiMatrix4x4::operator[](unsigned p_iIndex) const 
# 178
{ 
# 179
return (&(this->a1)) + (p_iIndex * (4)); 
# 180
} 
# 183
inline bool aiMatrix4x4::operator==(const aiMatrix4x4 m) const 
# 184
{ 
# 185
return ((a1) == (m.a1)) && ((a2) == (m.a2)) && ((a3) == (m.a3)) && ((a4) == (m.a4)) && ((b1) == (m.b1)) && ((b2) == (m.b2)) && ((b3) == (m.b3)) && ((b4) == (m.b4)) && ((c1) == (m.c1)) && ((c2) == (m.c2)) && ((c3) == (m.c3)) && ((c4) == (m.c4)) && ((d1) == (m.d1)) && ((d2) == (m.d2)) && ((d3) == (m.d3)) && ((d4) == (m.d4)); 
# 189
} 
# 192
inline bool aiMatrix4x4::operator!=(const aiMatrix4x4 m) const 
# 193
{ 
# 194
return !((*this) == m); 
# 195
} 
# 198
inline void aiMatrix4x4::Decompose(aiVector3D &scaling, aiQuaternion &rotation, aiVector3D &
# 199
position) const 
# 200
{ 
# 201
const aiMatrix4x4 &_this = *this; 
# 204
(position.x) = (_this[0][3]); 
# 205
(position.y) = (_this[1][3]); 
# 206
(position.z) = (_this[2][3]); 
# 209
aiVector3D vRows[3] = {aiVector3D(_this[0][0], _this[1][0], _this[2][0]), aiVector3D(_this[0][1], _this[1][1], _this[2][1]), aiVector3D(_this[0][2], _this[1][2], _this[2][2])}; 
# 216
(scaling.x) = ((vRows)[0]).Length(); 
# 217
(scaling.y) = ((vRows)[1]).Length(); 
# 218
(scaling.z) = ((vRows)[2]).Length(); 
# 221
if (scaling.x) 
# 222
{ 
# 223
(((vRows)[0]) /= (scaling.x)); 
# 224
}  
# 225
if (scaling.y) 
# 226
{ 
# 227
(((vRows)[1]) /= (scaling.y)); 
# 228
}  
# 229
if (scaling.z) 
# 230
{ 
# 231
(((vRows)[2]) /= (scaling.z)); 
# 232
}  
# 235
aiMatrix3x3 m(((vRows)[0]).x, ((vRows)[1]).x, ((vRows)[2]).x, ((vRows)[0]).y, ((vRows)[1]).y, ((vRows)[2]).y, ((vRows)[0]).z, ((vRows)[1]).z, ((vRows)[2]).z); 
# 240
rotation = ((aiQuaternion)(m)); 
# 241
} 
# 244
inline void aiMatrix4x4::DecomposeNoScaling(aiQuaternion &rotation, aiVector3D &
# 245
position) const 
# 246
{ 
# 247
const aiMatrix4x4 &_this = *this; 
# 250
(position.x) = (_this[0][3]); 
# 251
(position.y) = (_this[1][3]); 
# 252
(position.z) = (_this[2][3]); 
# 255
rotation = ((aiQuaternion)(((aiMatrix3x3)(_this)))); 
# 256
} 
# 259
inline aiMatrix4x4 &aiMatrix4x4::FromEulerAnglesXYZ(const aiVector3D &blubb) 
# 260
{ 
# 261
return this->FromEulerAnglesXYZ(blubb.x, blubb.y, blubb.z); 
# 262
} 
# 265
inline aiMatrix4x4 &aiMatrix4x4::FromEulerAnglesXYZ(float x, float y, float z) 
# 266
{ 
# 267
aiMatrix4x4 &_this = *this; 
# 269
float cr = cos(x); 
# 270
float sr = sin(x); 
# 271
float cp = cos(y); 
# 272
float sp = sin(y); 
# 273
float cy = cos(z); 
# 274
float sy = sin(z); 
# 276
(_this.a1) = (cp * cy); 
# 277
(_this.a2) = (cp * sy); 
# 278
(_this.a3) = (-sp); 
# 280
float srsp = sr * sp; 
# 281
float crsp = cr * sp; 
# 283
(_this.b1) = ((srsp * cy) - (cr * sy)); 
# 284
(_this.b2) = ((srsp * sy) + (cr * cy)); 
# 285
(_this.b3) = (sr * cp); 
# 287
(_this.c1) = ((crsp * cy) + (sr * sy)); 
# 288
(_this.c2) = ((crsp * sy) - (sr * cy)); 
# 289
(_this.c3) = (cr * cp); 
# 291
return *this; 
# 292
} 
# 295
inline bool aiMatrix4x4::IsIdentity() const 
# 296
{ 
# 298
static const float epsilon = (0.009999999776F); 
# 300
return ((a2) <= epsilon) && ((a2) >= (-epsilon)) && ((a3) <= epsilon) && ((a3) >= (-epsilon)) && ((a4) <= epsilon) && ((a4) >= (-epsilon)) && ((b1) <= epsilon) && ((b1) >= (-epsilon)) && ((b3) <= epsilon) && ((b3) >= (-epsilon)) && ((b4) <= epsilon) && ((b4) >= (-epsilon)) && ((c1) <= epsilon) && ((c1) >= (-epsilon)) && ((c2) <= epsilon) && ((c2) >= (-epsilon)) && ((c4) <= epsilon) && ((c4) >= (-epsilon)) && ((d1) <= epsilon) && ((d1) >= (-epsilon)) && ((d2) <= epsilon) && ((d2) >= (-epsilon)) && ((d3) <= epsilon) && ((d3) >= (-epsilon)) && ((a1) <= ((1.0F) + epsilon)) && ((a1) >= ((1.0F) - epsilon)) && ((b2) <= ((1.0F) + epsilon)) && ((b2) >= ((1.0F) - epsilon)) && ((c3) <= ((1.0F) + epsilon)) && ((c3) >= ((1.0F) - epsilon)) && ((d4) <= ((1.0F) + epsilon)) && ((d4) >= ((1.0F) - epsilon)); 
# 316
} 
# 319
inline aiMatrix4x4 &aiMatrix4x4::RotationX(float a, aiMatrix4x4 &out) 
# 320
{ 
# 326
out = aiMatrix4x4(); 
# 327
(out.b2) = ((out.c3) = cos(a)); 
# 328
(out.b3) = (-((out.c2) = sin(a))); 
# 329
return out; 
# 330
} 
# 333
inline aiMatrix4x4 &aiMatrix4x4::RotationY(float a, aiMatrix4x4 &out) 
# 334
{ 
# 341
out = aiMatrix4x4(); 
# 342
(out.a1) = ((out.c3) = cos(a)); 
# 343
(out.c1) = (-((out.a3) = sin(a))); 
# 344
return out; 
# 345
} 
# 348
inline aiMatrix4x4 &aiMatrix4x4::RotationZ(float a, aiMatrix4x4 &out) 
# 349
{ 
# 355
out = aiMatrix4x4(); 
# 356
(out.a1) = ((out.b2) = cos(a)); 
# 357
(out.a2) = (-((out.b1) = sin(a))); 
# 358
return out; 
# 359
} 
# 363
inline aiMatrix4x4 &aiMatrix4x4::Rotation(float a, const aiVector3D &axis, aiMatrix4x4 &out) 
# 364
{ 
# 365
float c = cos(a), s = sin(a), t = (1) - c; 
# 366
float x = axis.x, y = axis.y, z = axis.z; 
# 369
(out.a1) = (((t * x) * x) + c); (out.a2) = (((t * x) * y) - (s * z)); (out.a3) = (((t * x) * z) + (s * y)); 
# 370
(out.b1) = (((t * x) * y) + (s * z)); (out.b2) = (((t * y) * y) + c); (out.b3) = (((t * y) * z) - (s * x)); 
# 371
(out.c1) = (((t * x) * z) - (s * y)); (out.c2) = (((t * y) * z) + (s * x)); (out.c3) = (((t * z) * z) + c); 
# 372
(out.a4) = ((out.b4) = ((out.c4) = (0.0F))); 
# 373
(out.d1) = ((out.d2) = ((out.d3) = (0.0F))); 
# 374
(out.d4) = (1.0F); 
# 376
return out; 
# 377
} 
# 380
inline aiMatrix4x4 &aiMatrix4x4::Translation(const aiVector3D &v, aiMatrix4x4 &out) 
# 381
{ 
# 382
out = aiMatrix4x4(); 
# 383
(out.a4) = (v.x); 
# 384
(out.b4) = (v.y); 
# 385
(out.c4) = (v.z); 
# 386
return out; 
# 387
} 
# 390
inline aiMatrix4x4 &aiMatrix4x4::Scaling(const aiVector3D &v, aiMatrix4x4 &out) 
# 391
{ 
# 392
out = aiMatrix4x4(); 
# 393
(out.a1) = (v.x); 
# 394
(out.b2) = (v.y); 
# 395
(out.c3) = (v.z); 
# 396
return out; 
# 397
} 
# 409
inline aiMatrix4x4 &aiMatrix4x4::FromToMatrix(const aiVector3D &from, const aiVector3D &
# 410
to, aiMatrix4x4 &mtx) 
# 411
{ 
# 412
aiMatrix3x3 m3; 
# 413
aiMatrix3x3::FromToMatrix(from, to, m3); 
# 414
mtx = ((aiMatrix4x4)(m3)); 
# 415
return mtx; 
# 416
} 
# 297 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiConfig.h"
enum aiComponent { 
# 303
aiComponent_NORMALS = 2U, 
# 310
aiComponent_TANGENTS_AND_BITANGENTS = 4U, 
# 315
aiComponent_COLORS = 8U, 
# 319
aiComponent_TEXCOORDS = 16U, 
# 324
aiComponent_BONEWEIGHTS = 32U, 
# 329
aiComponent_ANIMATIONS = 64U, 
# 332
aiComponent_TEXTURES = 128U, 
# 337
aiComponent_LIGHTS = 256U, 
# 342
aiComponent_CAMERAS = 512U, 
# 345
aiComponent_MESHES = 1024U, 
# 349
aiComponent_MATERIALS = 2048U, 
# 355
_aiComponent_Force32Bit = 2684354559U
# 357
}; 
# 57 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/assimp.hpp"
namespace Assimp { 
# 60
class Importer; 
# 61
class IOStream; 
# 62
class IOSystem; 
# 63
class ProgressHandler; 
# 71
class BaseImporter; 
# 72
class BaseProcess; 
# 73
class SharedPostProcessInfo; 
# 74
class BatchLoader; 
# 78
class ImporterPimpl; 
# 79
}
# 83
struct aiScene; 
# 84
struct aiFileIO; 
# 85
extern "C" const aiScene *aiImportFileEx(const char *, unsigned, aiFileIO *); 
# 86
extern "C" const aiScene *aiImportFileFromMemory(const char *, unsigned, unsigned, const char *); 
# 90
namespace Assimp { 
# 116
class Importer { 
# 119
friend class BaseProcess; 
# 120
friend class BatchLoader; 
# 121
friend const aiScene *(::aiImportFileEx)(const char *, unsigned, aiFileIO *); 
# 122
friend const aiScene *(::aiImportFileFromMemory)(const char *, unsigned, unsigned, const char *); 
# 133
public: Importer(); 
# 142
Importer(const Importer & other); 
# 148
~Importer(); 
# 160
aiReturn RegisterLoader(BaseImporter * pImp); 
# 171
aiReturn UnregisterLoader(BaseImporter * pImp); 
# 184
aiReturn RegisterPPStep(BaseProcess * pImp); 
# 195
aiReturn UnregisterPPStep(BaseProcess * pImp); 
# 212
void SetPropertyInteger(const char * szName, int iValue, bool * bWasExisting = 0); 
# 222
void SetPropertyBool(const char *szName, bool value, bool *bWasExisting = 0) { 
# 223
this->SetPropertyInteger(szName, value); 
# 224
} 
# 230
void SetPropertyFloat(const char * szName, float fValue, bool * bWasExisting = 0); 
# 237
void SetPropertyString(const char * szName, const std::__cxx11::string & sValue, bool * bWasExisting = 0); 
# 253
int GetPropertyInteger(const char * szName, int iErrorReturn = 4294967295U) const; 
# 263
bool GetPropertyBool(const char *szName, bool bErrorReturn = false) const { 
# 264
return this->GetPropertyInteger(szName, bErrorReturn) != 0; 
# 265
} 
# 271
float GetPropertyFloat(const char * szName, float fErrorReturn = (9.999999795e+10F)) const; 
# 280
const std::__cxx11::string &GetPropertyString(const char * szName, const std::__cxx11::string & sErrorReturn = "") const; 
# 298
void SetIOHandler(IOSystem * pIOHandler); 
# 308
IOSystem *GetIOHandler() const; 
# 316
bool IsDefaultIOHandler() const; 
# 329
void SetProgressHandler(ProgressHandler * pHandler); 
# 339
ProgressHandler *GetProgressHandler() const; 
# 347
bool IsDefaultProgressHandler() const; 
# 361
bool ValidateFlags(unsigned pFlags) const; 
# 385
const aiScene *ReadFile(const char * pFile, unsigned pFlags); 
# 425
const aiScene *ReadFileFromMemory(const void * pBuffer, ::size_t pLength, unsigned pFlags, const char * pHint = ""); 
# 449
const aiScene *ApplyPostProcessing(unsigned pFlags); 
# 457
inline const aiScene *ReadFile(const std::__cxx11::string & pFile, unsigned pFlags); 
# 467
void FreeScene(); 
# 478
const char *GetErrorString() const; 
# 488
bool IsExtensionSupported(const char * szExtension) const; 
# 496
inline bool IsExtensionSupported(const std::__cxx11::string & szExtension) const; 
# 509
void GetExtensionList(aiString & szOut) const; 
# 517
inline void GetExtensionList(std::__cxx11::string & szOut) const; 
# 530
BaseImporter *FindLoader(const char * szExtension) const; 
# 537
const aiScene *GetScene() const; 
# 558
aiScene *GetOrphanedScene(); 
# 569
void GetMemoryRequirements(aiMemoryInfo & in) const; 
# 578
void SetExtraVerbose(bool bDo); 
# 583
protected: ImporterPimpl *pimpl; 
# 584
}; 
# 594
inline const aiScene *Importer::ReadFile(const std::__cxx11::string &pFile, unsigned pFlags) { 
# 595
return this->ReadFile(pFile.c_str(), pFlags); 
# 596
} 
# 598
inline void Importer::GetExtensionList(std::__cxx11::string &szOut) const { 
# 599
aiString s; 
# 600
this->GetExtensionList(s); 
# 601
(szOut = (s.data)); 
# 602
} 
# 604
inline bool Importer::IsExtensionSupported(const std::__cxx11::string &szExtension) const { 
# 605
return this->IsExtensionSupported(szExtension.c_str()); 
# 606
} 
# 608
}
# 57 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiTexture.h"
extern "C" {
# 80
struct aiTexel { 
# 82
unsigned char b, g, r, a; 
# 86
bool operator==(const aiTexel &other) const 
# 87
{ 
# 88
return ((b) == (other.b)) && ((r) == (other.r)) && ((g) == (other.g)) && ((a) == (other.a)); 
# 90
} 
# 93
bool operator!=(const aiTexel &other) const 
# 94
{ 
# 95
return ((((b) != (other.b)) || ((r) != (other.r))) || ((g) != (other.g))) || ((a) != (other.a)); 
# 97
} 
# 100
operator aiColor4D() const 
# 101
{ 
# 102
return aiColor4D((r) / (255.0F), (g) / (255.0F), (b) / (255.0F), (a) / (255.0F)); 
# 103
} 
# 106
} __attribute((packed)); 
# 120
struct aiTexture { 
# 128
unsigned mWidth; 
# 135
unsigned mHeight; 
# 149
char achFormatHint[4]; 
# 160
aiTexel *pcData; 
# 169
bool CheckFormat(const char *s) const 
# 170
{ 
# 171
; 
# 172
return 0 == ::strncmp(achFormatHint, s, 3); 
# 173
} 
# 176
aiTexture() : mWidth((0)), mHeight((0)), pcData((__null)) 
# 180
{ 
# 181
((achFormatHint)[0]) = (((achFormatHint)[1]) = (0)); 
# 182
((achFormatHint)[2]) = (((achFormatHint)[3]) = (0)); 
# 183
} 
# 186
~aiTexture() 
# 187
{ 
# 188
delete [] (pcData); 
# 189
} 
# 191
}; 
# 195
}
# 52 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiMesh.h"
extern "C" {
# 125
struct aiFace { 
# 129
unsigned mNumIndices; 
# 132
unsigned *mIndices; 
# 137
aiFace() 
# 138
{ 
# 139
(mNumIndices) = (0); (mIndices) = (__null); 
# 140
} 
# 143
~aiFace() 
# 144
{ 
# 145
delete [] (mIndices); 
# 146
} 
# 149
aiFace(const aiFace &o) 
# 150
{ 
# 151
(mIndices) = (__null); 
# 152
((*this) = o); 
# 153
} 
# 156
const aiFace &operator=(const aiFace &o) 
# 157
{ 
# 158
if ((&o) == this) { 
# 159
return *this; }  
# 161
delete [] (mIndices); 
# 162
(mNumIndices) = (o.mNumIndices); 
# 163
(mIndices) = (new unsigned [mNumIndices]); 
# 164
::memcpy(mIndices, o.mIndices, (mNumIndices) * sizeof(unsigned)); 
# 165
return *this; 
# 166
} 
# 170
bool operator==(const aiFace &o) const 
# 171
{ 
# 172
if ((mIndices) == (o.mIndices)) { return true; } else { 
# 173
if ((mIndices) && ((mNumIndices) == (o.mNumIndices))) 
# 174
{ 
# 175
for (unsigned i = (0); i < (this->mNumIndices); ++i) { 
# 176
if (((mIndices)[i]) != ((o.mIndices)[i])) { return false; }  }  
# 177
return true; 
# 178
}  }  
# 179
return false; 
# 180
} 
# 184
bool operator!=(const aiFace &o) const 
# 185
{ 
# 186
return !((*this) == o); 
# 187
} 
# 189
}; 
# 195
struct aiVertexWeight { 
# 198
unsigned mVertexId; 
# 202
float mWeight; 
# 207
aiVertexWeight() { } 
# 212
aiVertexWeight(unsigned pID, float pWeight) : mVertexId(pID), mWeight(pWeight) 
# 214
{ } 
# 217
}; 
# 227
struct aiBone { 
# 230
aiString mName; 
# 234
unsigned mNumWeights; 
# 237
aiVertexWeight *mWeights; 
# 240
aiMatrix4x4 mOffsetMatrix; 
# 245
aiBone() 
# 246
{ 
# 247
(mNumWeights) = (0); (mWeights) = (__null); 
# 248
} 
# 251
aiBone(const aiBone &other) 
# 252
{ 
# 253
(mNumWeights) = (other.mNumWeights); 
# 254
(mOffsetMatrix) = (other.mOffsetMatrix); 
# 255
(mName) = (other.mName); 
# 257
if ((other.mWeights) && (other.mNumWeights)) 
# 258
{ 
# 259
(mWeights) = (new aiVertexWeight [mNumWeights]); 
# 260
::memcpy(mWeights, other.mWeights, (mNumWeights) * sizeof(aiVertexWeight)); 
# 261
}  
# 262
} 
# 265
~aiBone() 
# 266
{ 
# 267
delete [] (mWeights); 
# 268
} 
# 270
}; 
# 281
enum aiPrimitiveType { 
# 288
aiPrimitiveType_POINT = 1U, 
# 295
aiPrimitiveType_LINE, 
# 301
aiPrimitiveType_TRIANGLE = 4U, 
# 310
aiPrimitiveType_POLYGON = 8U, 
# 317
_aiPrimitiveType_Force32Bit = 2684354559U
# 319
}; 
# 338
struct aiAnimMesh { 
# 346
aiVector3D *mVertices; 
# 349
aiVector3D *mNormals; 
# 352
aiVector3D *mTangents; 
# 355
aiVector3D *mBitangents; 
# 358
aiColor4D *mColors[4]; 
# 361
aiVector3D *mTextureCoords[4]; 
# 371
unsigned mNumVertices; 
# 375
aiAnimMesh() : mVertices(), mNormals(), mTangents(), mBitangents() 
# 380
{ 
# 382
for (unsigned a = (0); a < (4); a++) { 
# 383
((mTextureCoords)[a]) = (__null); 
# 384
}  
# 385
for (unsigned a = (0); a < (4); a++) { 
# 386
((mColors)[a]) = (__null); 
# 387
}  
# 388
} 
# 390
~aiAnimMesh() 
# 391
{ 
# 392
delete [] (mVertices); 
# 393
delete [] (mNormals); 
# 394
delete [] (mTangents); 
# 395
delete [] (mBitangents); 
# 396
for (unsigned a = (0); a < (4); a++) { 
# 397
delete [] ((mTextureCoords)[a]); 
# 398
}  
# 399
for (unsigned a = (0); a < (4); a++) { 
# 400
delete [] ((mColors)[a]); 
# 401
}  
# 402
} 
# 406
bool HasPositions() const { 
# 407
return (mVertices) != (__null); 
# 408
} 
# 412
bool HasNormals() const { 
# 413
return (mNormals) != (__null); 
# 414
} 
# 419
bool HasTangentsAndBitangents() const { 
# 420
return (mTangents) != (__null); 
# 421
} 
# 426
bool HasVertexColors(unsigned pIndex) const { 
# 427
return (pIndex >= (4)) ? false : (((mColors)[pIndex]) != (__null)); 
# 428
} 
# 433
bool HasTextureCoords(unsigned pIndex) const { 
# 434
return (pIndex >= (4)) ? false : (((mTextureCoords)[pIndex]) != (__null)); 
# 435
} 
# 438
}; 
# 460
struct aiMesh { 
# 467
unsigned mPrimitiveTypes; 
# 473
unsigned mNumVertices; 
# 479
unsigned mNumFaces; 
# 485
aiVector3D *mVertices; 
# 507
aiVector3D *mNormals; 
# 522
aiVector3D *mTangents; 
# 531
aiVector3D *mBitangents; 
# 538
aiColor4D *mColors[4]; 
# 544
aiVector3D *mTextureCoords[4]; 
# 553
unsigned mNumUVComponents[4]; 
# 561
aiFace *mFaces; 
# 566
unsigned mNumBones; 
# 572
aiBone **mBones; 
# 579
unsigned mMaterialIndex; 
# 592
aiString mName; 
# 596
unsigned mNumAnimMeshes; 
# 601
aiAnimMesh **mAnimMeshes; 
# 607
aiMesh() 
# 608
{ 
# 609
(mNumVertices) = (0); 
# 610
(mNumFaces) = (0); 
# 612
(mNumAnimMeshes) = (0); 
# 614
(mPrimitiveTypes) = (0); 
# 615
(mVertices) = (__null); (mFaces) = (__null); 
# 616
(mNormals) = (__null); (mTangents) = (__null); 
# 617
(mBitangents) = (__null); 
# 618
(mAnimMeshes) = (__null); 
# 620
for (unsigned a = (0); a < (4); a++) 
# 621
{ 
# 622
((mNumUVComponents)[a]) = (0); 
# 623
((mTextureCoords)[a]) = (__null); 
# 624
}  
# 625
for (unsigned a = (0); a < (4); a++) { 
# 626
((mColors)[a]) = (__null); }  
# 627
(mNumBones) = (0); (mBones) = (__null); 
# 628
(mMaterialIndex) = (0); 
# 629
} 
# 632
~aiMesh() 
# 633
{ 
# 634
delete [] (mVertices); 
# 635
delete [] (mNormals); 
# 636
delete [] (mTangents); 
# 637
delete [] (mBitangents); 
# 638
for (unsigned a = (0); a < (4); a++) { 
# 639
delete [] ((mTextureCoords)[a]); 
# 640
}  
# 641
for (unsigned a = (0); a < (4); a++) { 
# 642
delete [] ((mColors)[a]); 
# 643
}  
# 646
if ((mNumBones) && (mBones)) { 
# 647
for (unsigned a = (0); a < (mNumBones); a++) { 
# 648
delete ((mBones)[a]); 
# 649
}  
# 650
delete [] (mBones); 
# 651
}  
# 653
if ((mNumAnimMeshes) && (mAnimMeshes)) { 
# 654
for (unsigned a = (0); a < (mNumAnimMeshes); a++) { 
# 655
delete ((mAnimMeshes)[a]); 
# 656
}  
# 657
delete [] (mAnimMeshes); 
# 658
}  
# 660
delete [] (mFaces); 
# 661
} 
# 666
bool HasPositions() const 
# 667
{ return ((mVertices) != (__null)) && ((mNumVertices) > (0)); } 
# 671
bool HasFaces() const 
# 672
{ return ((mFaces) != (__null)) && ((mNumFaces) > (0)); } 
# 675
bool HasNormals() const 
# 676
{ return ((mNormals) != (__null)) && ((mNumVertices) > (0)); } 
# 682
bool HasTangentsAndBitangents() const 
# 683
{ return ((mTangents) != (__null)) && ((mBitangents) != (__null)) && ((mNumVertices) > (0)); } 
# 687
bool HasVertexColors(unsigned pIndex) const 
# 688
{ 
# 689
if (pIndex >= (4)) { 
# 690
return false; } else { 
# 692
return (((mColors)[pIndex]) != (__null)) && ((mNumVertices) > (0)); }  
# 693
} 
# 697
bool HasTextureCoords(unsigned pIndex) const 
# 698
{ 
# 699
if (pIndex >= (4)) { 
# 700
return false; } else { 
# 702
return (((mTextureCoords)[pIndex]) != (__null)) && ((mNumVertices) > (0)); }  
# 703
} 
# 706
unsigned GetNumUVChannels() const 
# 707
{ 
# 708
unsigned n = (0); 
# 709
while ((n < (4)) && ((mTextureCoords)[n])) { ++n; }  
# 710
return n; 
# 711
} 
# 714
unsigned GetNumColorChannels() const 
# 715
{ 
# 716
unsigned n = (0); 
# 717
while ((n < (4)) && ((mColors)[n])) { ++n; }  
# 718
return n; 
# 719
} 
# 722
bool HasBones() const 
# 723
{ return ((mBones) != (__null)) && ((mNumBones) > (0)); } 
# 726
}; 
# 730
}
# 52 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiLight.h"
extern "C" {
# 58
enum aiLightSourceType { 
# 60
aiLightSource_UNDEFINED, 
# 65
aiLightSource_DIRECTIONAL, 
# 70
aiLightSource_POINT, 
# 76
aiLightSource_SPOT, 
# 83
_aiLightSource_Force32Bit = 2684354559U
# 85
}; 
# 100
struct aiLight { 
# 108
aiString mName; 
# 114
aiLightSourceType mType; 
# 121
aiVector3D mPosition; 
# 129
aiVector3D mDirection; 
# 141
float mAttenuationConstant; 
# 153
float mAttenuationLinear; 
# 165
float mAttenuationQuadratic; 
# 173
aiColor3D mColorDiffuse; 
# 181
aiColor3D mColorSpecular; 
# 191
aiColor3D mColorAmbient; 
# 199
float mAngleInnerCone; 
# 211
float mAngleOuterCone; 
# 215
aiLight() : mType(aiLightSource_UNDEFINED), mAttenuationConstant((0.0F)), mAttenuationLinear((1.0F)), mAttenuationQuadratic((0.0F)), mAngleInnerCone(((float)((3.141592653589793116) * (2.0)))), mAngleOuterCone(((float)((3.141592653589793116) * (2.0)))) 
# 222
{ 
# 223
} 
# 226
}; 
# 229
}
# 52 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiCamera.h"
extern "C" {
# 98
struct aiCamera { 
# 106
aiString mName; 
# 113
aiVector3D mPosition; 
# 124
aiVector3D mUp; 
# 134
aiVector3D mLookAt; 
# 143
float mHorizontalFOV; 
# 150
float mClipPlaneNear; 
# 160
float mClipPlaneFar; 
# 170
float mAspect; 
# 174
aiCamera() : mUp((0.0F), (1.0F), (0.0F)), mLookAt((0.0F), (0.0F), (1.0F)), mHorizontalFOV(((0.25F) * ((float)(3.141592653589793116)))), mClipPlaneNear((0.1000000015F)), mClipPlaneFar((1000.0F)), mAspect((0.0F)) 
# 181
{ } 
# 186
void GetCameraMatrix(aiMatrix4x4 &out) const 
# 187
{ 
# 191
aiVector3D zaxis = mLookAt; zaxis.Normalize(); 
# 192
aiVector3D yaxis = mUp; yaxis.Normalize(); 
# 193
aiVector3D xaxis = ((mUp) ^ (mLookAt)); xaxis.Normalize(); 
# 195
(out.a4) = (-((xaxis * (mPosition)))); 
# 196
(out.b4) = (-((yaxis * (mPosition)))); 
# 197
(out.c4) = (-((zaxis * (mPosition)))); 
# 199
(out.a1) = (xaxis.x); 
# 200
(out.a2) = (xaxis.y); 
# 201
(out.a3) = (xaxis.z); 
# 203
(out.b1) = (yaxis.x); 
# 204
(out.b2) = (yaxis.y); 
# 205
(out.b3) = (yaxis.z); 
# 207
(out.c1) = (zaxis.x); 
# 208
(out.c2) = (zaxis.y); 
# 209
(out.c3) = (zaxis.z); 
# 211
(out.d1) = ((out.d2) = ((out.d3) = (0.0F))); 
# 212
(out.d4) = (1.0F); 
# 213
} 
# 216
}; 
# 220
}
# 52 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiMaterial.h"
extern "C" {
# 78
enum aiTextureOp { 
# 81
aiTextureOp_Multiply, 
# 84
aiTextureOp_Add, 
# 87
aiTextureOp_Subtract, 
# 90
aiTextureOp_Divide, 
# 93
aiTextureOp_SmoothAdd, 
# 96
aiTextureOp_SignedAdd, 
# 104
_aiTextureOp_Force32Bit = 2684354559U
# 107
}; 
# 114
enum aiTextureMapMode { 
# 118
aiTextureMapMode_Wrap, 
# 123
aiTextureMapMode_Clamp, 
# 128
aiTextureMapMode_Decal = 3U, 
# 133
aiTextureMapMode_Mirror = 2U, 
# 140
_aiTextureMapMode_Force32Bit = 2684354559U
# 143
}; 
# 154
enum aiTextureMapping { 
# 162
aiTextureMapping_UV, 
# 165
aiTextureMapping_SPHERE, 
# 168
aiTextureMapping_CYLINDER, 
# 171
aiTextureMapping_BOX, 
# 174
aiTextureMapping_PLANE, 
# 177
aiTextureMapping_OTHER, 
# 185
_aiTextureMapping_Force32Bit = 2684354559U
# 188
}; 
# 205
enum aiTextureType { 
# 213
aiTextureType_NONE, 
# 220
aiTextureType_DIFFUSE, 
# 225
aiTextureType_SPECULAR, 
# 230
aiTextureType_AMBIENT, 
# 235
aiTextureType_EMISSIVE, 
# 242
aiTextureType_HEIGHT, 
# 250
aiTextureType_NORMALS, 
# 259
aiTextureType_SHININESS, 
# 266
aiTextureType_OPACITY, 
# 273
aiTextureType_DISPLACEMENT, 
# 282
aiTextureType_LIGHTMAP, 
# 289
aiTextureType_REFLECTION, 
# 297
aiTextureType_UNKNOWN, 
# 305
_aiTextureType_Force32Bit = 2684354559U
# 308
}; 
# 324
enum aiShadingMode { 
# 329
aiShadingMode_Flat = 1U, 
# 333
aiShadingMode_Gouraud, 
# 337
aiShadingMode_Phong, 
# 341
aiShadingMode_Blinn, 
# 347
aiShadingMode_Toon, 
# 354
aiShadingMode_OrenNayar, 
# 361
aiShadingMode_Minnaert, 
# 367
aiShadingMode_CookTorrance, 
# 371
aiShadingMode_NoShading, 
# 375
aiShadingMode_Fresnel, 
# 383
_aiShadingMode_Force32Bit = 2684354559U
# 386
}; 
# 400
enum aiTextureFlags { 
# 404
aiTextureFlags_Invert = 1U, 
# 415
aiTextureFlags_UseAlpha, 
# 422
aiTextureFlags_IgnoreAlpha = 4U, 
# 429
_aiTextureFlags_Force32Bit = 2684354559U
# 432
}; 
# 451
enum aiBlendMode { 
# 459
aiBlendMode_Default, 
# 468
aiBlendMode_Additive, 
# 478
_aiBlendMode_Force32Bit = 2684354559U
# 481
}; 
# 496
struct aiUVTransform { 
# 502
aiVector2D mTranslation; 
# 508
aiVector2D mScaling; 
# 516
float mRotation; 
# 520
aiUVTransform() : mScaling((1.0F), (1.0F)), mRotation((0.0F)) 
# 523
{ 
# 525
} 
# 528
} __attribute((packed)); 
# 537
enum aiPropertyTypeInfo { 
# 545
aiPTI_Float = 1U, 
# 552
aiPTI_String = 3U, 
# 560
aiPTI_Integer, 
# 565
aiPTI_Buffer, 
# 572
_aiPTI_Force32Bit = 2684354559U
# 574
}; 
# 596
struct aiMaterialProperty { 
# 601
aiString mKey; 
# 607
unsigned mSemantic; 
# 612
unsigned mIndex; 
# 617
unsigned mDataLength; 
# 626
aiPropertyTypeInfo mType; 
# 631
char *mData; 
# 635
aiMaterialProperty() { 
# 636
(mData) = (__null); 
# 637
(mIndex) = ((mSemantic) = (0)); 
# 638
} 
# 640
~aiMaterialProperty() { 
# 641
delete [] (mData); 
# 642
} 
# 645
}; 
# 649
}
# 661
struct aiMaterial { 
# 667
aiMaterial() { } 
# 671
~aiMaterial(); 
# 685
template< class Type> inline aiReturn Get(const char * pKey, unsigned type, unsigned idx, Type * pOut, unsigned * pMax) const; 
# 699
template< class Type> inline aiReturn Get(const char * pKey, unsigned type, unsigned idx, Type & pOut) const; 
# 708
inline unsigned GetTextureCount(aiTextureType type) const; 
# 738
inline aiReturn GetTexture(aiTextureType type, unsigned index, aiString * path, aiTextureMapping * mapping = 0, unsigned * uvindex = 0, float * blend = 0, aiTextureOp * op = 0, aiTextureMapMode * mapmode = 0) const; 
# 750
aiMaterialProperty **mProperties; 
# 753
unsigned mNumProperties; 
# 756
unsigned mNumAllocated; 
# 757
}; 
# 761
extern "C" {
# 1206
aiReturn aiGetMaterialProperty(const aiMaterial * pMat, const char * pKey, unsigned type, unsigned index, const aiMaterialProperty ** pPropOut); 
# 1239
aiReturn aiGetMaterialFloatArray(const aiMaterial * pMat, const char * pKey, unsigned type, unsigned index, float * pOut, unsigned * pMax); 
# 1269
inline aiReturn aiGetMaterialFloat(const aiMaterial *pMat, const char *
# 1270
pKey, unsigned 
# 1271
type, unsigned 
# 1272
index, float *
# 1273
pOut) 
# 1274
{ 
# 1275
return aiGetMaterialFloatArray(pMat, pKey, type, index, pOut, (unsigned *)0); 
# 1276
} 
# 1292
aiReturn aiGetMaterialIntegerArray(const aiMaterial * pMat, const char * pKey, unsigned type, unsigned index, int * pOut, unsigned * pMax); 
# 1307
inline aiReturn aiGetMaterialInteger(const aiMaterial *pMat, const char *
# 1308
pKey, unsigned 
# 1309
type, unsigned 
# 1310
index, int *
# 1311
pOut) 
# 1312
{ 
# 1313
return aiGetMaterialIntegerArray(pMat, pKey, type, index, pOut, (unsigned *)0); 
# 1314
} 
# 1331
aiReturn aiGetMaterialColor(const aiMaterial * pMat, const char * pKey, unsigned type, unsigned index, aiColor4D * pOut); 
# 1343
aiReturn aiGetMaterialString(const aiMaterial * pMat, const char * pKey, unsigned type, unsigned index, aiString * pOut); 
# 1356
unsigned aiGetMaterialTextureCount(const aiMaterial * pMat, aiTextureType type); 
# 1393
aiReturn aiGetMaterialTexture(const aiMaterial * mat, aiTextureType type, unsigned index, aiString * path, aiTextureMapping * mapping = 0, unsigned * uvindex = 0, float * blend = 0, aiTextureOp * op = 0, aiTextureMapMode * mapmode = 0, unsigned * flags = 0); 
# 1417
}
# 52 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiMaterial.inl"
inline aiReturn aiMaterial::GetTexture(aiTextureType type, unsigned 
# 53
index, aiString *
# 54
path, aiTextureMapping *
# 55
mapping, unsigned *
# 56
uvindex, float *
# 57
blend, aiTextureOp *
# 58
op, aiTextureMapMode *
# 59
mapmode) const 
# 60
{ 
# 61
return ::aiGetMaterialTexture(this, type, index, path, mapping, uvindex, blend, op, mapmode); 
# 62
} 
# 65
inline unsigned aiMaterial::GetTextureCount(aiTextureType type) const 
# 66
{ 
# 67
return ::aiGetMaterialTextureCount(this, type); 
# 68
} 
# 71
template< class Type> inline aiReturn 
# 72
aiMaterial::Get(const char *pKey, unsigned type, unsigned 
# 73
idx, Type *pOut, unsigned *
# 74
pMax) const 
# 75
{ 
# 76
unsigned iNum = (pMax) ? *pMax : (1); 
# 78
const aiMaterialProperty *prop; 
# 79
const aiReturn ret = ::aiGetMaterialProperty(this, pKey, type, idx, (const aiMaterialProperty **)(&prop)); 
# 81
if ((aiReturn_SUCCESS) == ret) { 
# 83
if ((prop->mDataLength) < (sizeof(Type) * iNum)) { 
# 84
return aiReturn_FAILURE; 
# 85
}  
# 90
iNum = (std::min((::size_t)iNum, (prop->mDataLength) / sizeof(Type))); 
# 91
memcpy(pOut, prop->mData, iNum * sizeof(Type)); 
# 92
if (pMax) { 
# 93
(*pMax) = iNum; 
# 94
}  
# 95
}  
# 96
return ret; 
# 97
} 
# 100
template< class Type> inline aiReturn 
# 101
aiMaterial::Get(const char *pKey, unsigned type, unsigned 
# 102
idx, Type &pOut) const 
# 103
{ 
# 104
const aiMaterialProperty *prop; 
# 105
const aiReturn ret = ::aiGetMaterialProperty(this, pKey, type, idx, (const aiMaterialProperty **)(&prop)); 
# 107
if ((aiReturn_SUCCESS) == ret) { 
# 109
if ((prop->mDataLength) < sizeof(Type)) { 
# 110
return aiReturn_FAILURE; 
# 111
}  
# 113
if (strcmp(prop->mData, (char *)aiPTI_Buffer) != 0) { 
# 114
return aiReturn_FAILURE; 
# 115
}  
# 117
memcpy(&pOut, prop->mData, sizeof(Type)); 
# 118
}  
# 119
return ret; 
# 120
} 
# 124
template<> inline aiReturn aiMaterial::Get< float> (const char *pKey, unsigned type, unsigned 
# 125
idx, float *pOut, unsigned *
# 126
pMax) const 
# 127
{ 
# 128
return ::aiGetMaterialFloatArray(this, pKey, type, idx, pOut, pMax); 
# 129
} 
# 132
template<> inline aiReturn aiMaterial::Get< int> (const char *pKey, unsigned type, unsigned 
# 133
idx, int *pOut, unsigned *
# 134
pMax) const 
# 135
{ 
# 136
return ::aiGetMaterialIntegerArray(this, pKey, type, idx, pOut, pMax); 
# 137
} 
# 140
template<> inline aiReturn aiMaterial::Get< float> (const char *pKey, unsigned type, unsigned 
# 141
idx, float &pOut) const 
# 142
{ 
# 143
return aiGetMaterialFloat(this, pKey, type, idx, &pOut); 
# 144
} 
# 147
template<> inline aiReturn aiMaterial::Get< int> (const char *pKey, unsigned type, unsigned 
# 148
idx, int &pOut) const 
# 149
{ 
# 150
return aiGetMaterialInteger(this, pKey, type, idx, &pOut); 
# 151
} 
# 154
template<> inline aiReturn aiMaterial::Get< aiColor4D> (const char *pKey, unsigned type, unsigned 
# 155
idx, aiColor4D &pOut) const 
# 156
{ 
# 157
return aiGetMaterialColor(this, pKey, type, idx, &pOut); 
# 158
} 
# 161
template<> inline aiReturn aiMaterial::Get< aiColor3D> (const char *pKey, unsigned type, unsigned 
# 162
idx, aiColor3D &pOut) const 
# 163
{ 
# 164
aiColor4D c; 
# 165
const aiReturn ret = aiGetMaterialColor(this, pKey, type, idx, &c); 
# 166
pOut = aiColor3D(c.r, c.g, c.b); 
# 167
return ret; 
# 168
} 
# 171
template<> inline aiReturn aiMaterial::Get< aiString> (const char *pKey, unsigned type, unsigned 
# 172
idx, aiString &pOut) const 
# 173
{ 
# 174
return aiGetMaterialString(this, pKey, type, idx, &pOut); 
# 175
} 
# 53 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiAnim.h"
extern "C" {
# 58
struct aiVectorKey { 
# 61
double mTime; 
# 64
aiVector3D mValue; 
# 69
aiVectorKey() { } 
# 72
aiVectorKey(double time, const aiVector3D &value) : mTime(time), mValue(value) 
# 75
{ } 
# 78
typedef aiVector3D elem_type; 
# 81
bool operator==(const aiVectorKey &o) const { 
# 82
return ((o.mValue) == (this->mValue)); 
# 83
} 
# 84
bool operator!=(const aiVectorKey &o) const { 
# 85
return ((o.mValue) != (this->mValue)); 
# 86
} 
# 89
bool operator<(const aiVectorKey &o) const { 
# 90
return (mTime) < (o.mTime); 
# 91
} 
# 92
bool operator>(const aiVectorKey &o) const { 
# 93
return (mTime) > (o.mTime); 
# 94
} 
# 96
}; 
# 101
struct aiQuatKey { 
# 104
double mTime; 
# 107
aiQuaternion mValue; 
# 110
aiQuatKey() { 
# 111
} 
# 114
aiQuatKey(double time, const aiQuaternion &value) : mTime(time), mValue(value) 
# 117
{ } 
# 119
typedef aiQuaternion elem_type; 
# 122
bool operator==(const aiQuatKey &o) const { 
# 123
return ((o.mValue) == (this->mValue)); 
# 124
} 
# 125
bool operator!=(const aiQuatKey &o) const { 
# 126
return ((o.mValue) != (this->mValue)); 
# 127
} 
# 130
bool operator<(const aiQuatKey &o) const { 
# 131
return (mTime) < (o.mTime); 
# 132
} 
# 133
bool operator>(const aiQuatKey &o) const { 
# 134
return (mTime) > (o.mTime); 
# 135
} 
# 137
}; 
# 141
struct aiMeshKey { 
# 144
double mTime; 
# 150
unsigned mValue; 
# 154
aiMeshKey() { 
# 155
} 
# 158
aiMeshKey(double time, const unsigned value) : mTime(time), mValue(value) 
# 161
{ } 
# 163
typedef unsigned elem_type; 
# 166
bool operator==(const aiMeshKey &o) const { 
# 167
return (o.mValue) == (this->mValue); 
# 168
} 
# 169
bool operator!=(const aiMeshKey &o) const { 
# 170
return (o.mValue) != (this->mValue); 
# 171
} 
# 174
bool operator<(const aiMeshKey &o) const { 
# 175
return (mTime) < (o.mTime); 
# 176
} 
# 177
bool operator>(const aiMeshKey &o) const { 
# 178
return (mTime) > (o.mTime); 
# 179
} 
# 182
}; 
# 188
enum aiAnimBehaviour { 
# 191
aiAnimBehaviour_DEFAULT, 
# 194
aiAnimBehaviour_CONSTANT, 
# 198
aiAnimBehaviour_LINEAR, 
# 204
aiAnimBehaviour_REPEAT, 
# 211
_aiAnimBehaviour_Force32Bit = 2415919103U
# 213
}; 
# 230
struct aiNodeAnim { 
# 234
aiString mNodeName; 
# 237
unsigned mNumPositionKeys; 
# 244
aiVectorKey *mPositionKeys; 
# 247
unsigned mNumRotationKeys; 
# 255
aiQuatKey *mRotationKeys; 
# 259
unsigned mNumScalingKeys; 
# 266
aiVectorKey *mScalingKeys; 
# 274
aiAnimBehaviour mPreState; 
# 281
aiAnimBehaviour mPostState; 
# 284
aiNodeAnim() 
# 285
{ 
# 286
(mNumPositionKeys) = (0); (mPositionKeys) = (__null); 
# 287
(mNumRotationKeys) = (0); (mRotationKeys) = (__null); 
# 288
(mNumScalingKeys) = (0); (mScalingKeys) = (__null); 
# 290
(mPreState) = ((mPostState) = aiAnimBehaviour_DEFAULT); 
# 291
} 
# 293
~aiNodeAnim() 
# 294
{ 
# 295
delete [] (mPositionKeys); 
# 296
delete [] (mRotationKeys); 
# 297
delete [] (mScalingKeys); 
# 298
} 
# 300
}; 
# 308
struct aiMeshAnim { 
# 314
aiString mName; 
# 317
unsigned mNumKeys; 
# 320
aiMeshKey *mKeys; 
# 324
aiMeshAnim() : mNumKeys(), mKeys() 
# 327
{ } 
# 329
~aiMeshAnim() 
# 330
{ 
# 331
delete [] (mKeys); 
# 332
} 
# 335
}; 
# 340
struct aiAnimation { 
# 345
aiString mName; 
# 348
double mDuration; 
# 351
double mTicksPerSecond; 
# 355
unsigned mNumChannels; 
# 359
aiNodeAnim **mChannels; 
# 364
unsigned mNumMeshChannels; 
# 368
aiMeshAnim **mMeshChannels; 
# 371
aiAnimation() : mDuration((-(1.0))), mTicksPerSecond(), mNumChannels(), mChannels(), mNumMeshChannels(), mMeshChannels() 
# 378
{ 
# 379
} 
# 381
~aiAnimation() 
# 382
{ 
# 384
if ((mNumChannels) && (mChannels)) { 
# 385
for (unsigned a = (0); a < (mNumChannels); a++) { 
# 386
delete ((mChannels)[a]); 
# 387
}  
# 389
delete [] (mChannels); 
# 390
}  
# 391
if ((mNumMeshChannels) && (mMeshChannels)) { 
# 392
for (unsigned a = (0); a < (mNumMeshChannels); a++) { 
# 393
delete ((mMeshChannels)[a]); 
# 394
}  
# 396
delete [] (mMeshChannels); 
# 397
}  
# 398
} 
# 400
}; 
# 403
}
# 407
namespace Assimp { 
# 414
template< class T> 
# 415
struct Interpolator { 
# 423
void operator()(T &out, const T &a, const T &b, float d) const { 
# 424
out = (a + ((b - a) * d)); 
# 425
} 
# 426
}; 
# 431
template<> struct Interpolator< aiQuaternion>  { 
# 432
void operator()(aiQuaternion &out, const aiQuaternion &a, const aiQuaternion &
# 433
b, float d) const 
# 434
{ 
# 435
aiQuaternion::Interpolate(out, a, b, d); 
# 436
} 
# 437
}; 
# 440
template<> struct Interpolator< unsigned>  { 
# 441
void operator()(unsigned &out, unsigned a, unsigned 
# 442
b, float d) const 
# 443
{ 
# 444
out = ((d > (0.5F)) ? b : a); 
# 445
} 
# 446
}; 
# 449
template<> struct Interpolator< aiVectorKey>  { 
# 450
void operator()(aiVector3D &out, const aiVectorKey &a, const aiVectorKey &
# 451
b, float d) const 
# 452
{ 
# 453
Assimp::Interpolator< aiVector3D>  ipl; 
# 454
ipl(out, a.mValue, b.mValue, d); 
# 455
} 
# 456
}; 
# 459
template<> struct Interpolator< aiQuatKey>  { 
# 460
void operator()(aiQuaternion &out, const aiQuatKey a, const aiQuatKey &
# 461
b, float d) const 
# 462
{ 
# 463
Assimp::Interpolator< aiQuaternion>  ipl; 
# 464
ipl(out, a.mValue, b.mValue, d); 
# 465
} 
# 466
}; 
# 469
template<> struct Interpolator< aiMeshKey>  { 
# 470
void operator()(unsigned &out, const aiMeshKey a, const aiMeshKey &
# 471
b, float d) const 
# 472
{ 
# 473
Assimp::Interpolator< unsigned>  ipl; 
# 474
ipl(out, a.mValue, b.mValue, d); 
# 475
} 
# 476
}; 
# 479
}
# 57 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiScene.h"
extern "C" {
# 69
struct aiNode { 
# 85
aiString mName; 
# 88
aiMatrix4x4 mTransformation; 
# 91
aiNode *mParent; 
# 94
unsigned mNumChildren; 
# 97
aiNode **mChildren; 
# 100
unsigned mNumMeshes; 
# 103
unsigned *mMeshes; 
# 107
aiNode() 
# 108
{ 
# 110
(mParent) = (__null); 
# 111
(mNumChildren) = (0); (mChildren) = (__null); 
# 112
(mNumMeshes) = (0); (mMeshes) = (__null); 
# 113
} 
# 116
aiNode(const std::__cxx11::string &name) 
# 117
{ 
# 119
(mParent) = (__null); 
# 120
(mNumChildren) = (0); (mChildren) = (__null); 
# 121
(mNumMeshes) = (0); (mMeshes) = (__null); 
# 122
((mName) = name); 
# 123
} 
# 126
~aiNode() 
# 127
{ 
# 130
if ((mChildren) && (mNumChildren)) 
# 131
{ 
# 132
for (unsigned a = (0); a < (mNumChildren); a++) { 
# 133
delete ((mChildren)[a]); }  
# 134
}  
# 135
delete [] (mChildren); 
# 136
delete [] (mMeshes); 
# 137
} 
# 146
aiNode *FindNode(const aiString &name) 
# 147
{ 
# 148
return this->FindNode(name.data); 
# 149
} 
# 153
aiNode *FindNode(const char *name) 
# 154
{ 
# 155
if (!(::strcmp((mName).data, name))) { return this; }  
# 156
for (unsigned i = (0); i < (mNumChildren); ++i) 
# 157
{ 
# 158
aiNode *p = ((mChildren)[i])->FindNode(name); 
# 159
if (p) { return p; }  
# 160
}  
# 162
return __null; 
# 163
} 
# 166
}; 
# 227
struct aiScene { 
# 235
unsigned mFlags; 
# 245
aiNode *mRootNode; 
# 250
unsigned mNumMeshes; 
# 259
aiMesh **mMeshes; 
# 264
unsigned mNumMaterials; 
# 273
aiMaterial **mMaterials; 
# 278
unsigned mNumAnimations; 
# 285
aiAnimation **mAnimations; 
# 290
unsigned mNumTextures; 
# 298
aiTexture **mTextures; 
# 304
unsigned mNumLights; 
# 311
aiLight **mLights; 
# 317
unsigned mNumCameras; 
# 326
aiCamera **mCameras; 
# 331
aiScene() 
# 332
{ 
# 334
(mRootNode) = (__null); 
# 335
(mNumMeshes) = (0); (mMeshes) = (__null); 
# 336
(mNumMaterials) = (0); (mMaterials) = (__null); 
# 337
(mNumAnimations) = (0); (mAnimations) = (__null); 
# 338
(mNumTextures) = (0); (mTextures) = (__null); 
# 339
(mNumCameras) = (0); (mCameras) = (__null); 
# 340
(mNumLights) = (0); (mLights) = (__null); 
# 341
(mFlags) = (0); 
# 342
} 
# 345
~aiScene() 
# 346
{ 
# 348
delete (mRootNode); 
# 353
if ((mNumMeshes) && (mMeshes)) { 
# 354
for (unsigned a = (0); a < (mNumMeshes); a++) { 
# 355
delete ((mMeshes)[a]); }  }  
# 356
delete [] (mMeshes); 
# 358
if ((mNumMaterials) && (mMaterials)) { 
# 359
for (unsigned a = (0); a < (mNumMaterials); a++) { 
# 360
delete ((mMaterials)[a]); }  }  
# 361
delete [] (mMaterials); 
# 363
if ((mNumAnimations) && (mAnimations)) { 
# 364
for (unsigned a = (0); a < (mNumAnimations); a++) { 
# 365
delete ((mAnimations)[a]); }  }  
# 366
delete [] (mAnimations); 
# 368
if ((mNumTextures) && (mTextures)) { 
# 369
for (unsigned a = (0); a < (mNumTextures); a++) { 
# 370
delete ((mTextures)[a]); }  }  
# 371
delete [] (mTextures); 
# 373
if ((mNumLights) && (mLights)) { 
# 374
for (unsigned a = (0); a < (mNumLights); a++) { 
# 375
delete ((mLights)[a]); }  }  
# 376
delete [] (mLights); 
# 378
if ((mNumCameras) && (mCameras)) { 
# 379
for (unsigned a = (0); a < (mNumCameras); a++) { 
# 380
delete ((mCameras)[a]); }  }  
# 381
delete [] (mCameras); 
# 382
} 
# 386
bool HasMeshes() const 
# 387
{ return ((mMeshes) != (__null)) && ((mNumMeshes) > (0)); } 
# 391
bool HasMaterials() const 
# 392
{ return ((mMaterials) != (__null)) && ((mNumMaterials) > (0)); } 
# 395
bool HasLights() const 
# 396
{ return ((mLights) != (__null)) && ((mNumLights) > (0)); } 
# 399
bool HasTextures() const 
# 400
{ return ((mTextures) != (__null)) && ((mNumTextures) > (0)); } 
# 403
bool HasCameras() const 
# 404
{ return ((mCameras) != (__null)) && ((mNumCameras) > (0)); } 
# 407
bool HasAnimations() const 
# 408
{ return ((mAnimations) != (__null)) && ((mNumAnimations) > (0)); } 
# 411
}; 
# 414
}
# 50 "/home/zhengzhen/workspace/versapipe/examples/rasterization/assimp/include/aiPostProcess.h"
extern "C" {
# 62
enum aiPostProcessSteps { 
# 75
aiProcess_CalcTangentSpace = 1, 
# 88
aiProcess_JoinIdenticalVertices, 
# 104
aiProcess_MakeLeftHanded = 4, 
# 120
aiProcess_Triangulate = 8, 
# 146
aiProcess_RemoveComponent = 16, 
# 160
aiProcess_GenNormals = 32, 
# 177
aiProcess_GenSmoothNormals = 64, 
# 196
aiProcess_SplitLargeMeshes = 128, 
# 216
aiProcess_PreTransformVertices = 256, 
# 232
aiProcess_LimitBoneWeights = 512, 
# 260
aiProcess_ValidateDataStructure = 1024, 
# 275
aiProcess_ImproveCacheLocality = 2048, 
# 296
aiProcess_RemoveRedundantMaterials = 4096, 
# 308
aiProcess_FixInfacingNormals = 8192, 
# 322
aiProcess_SortByPType = 32768, 
# 360
aiProcess_FindDegenerates = 65536, 
# 375
aiProcess_FindInvalidData = 131072, 
# 392
aiProcess_GenUVCoords = 262144, 
# 409
aiProcess_TransformUVCoords = 524288, 
# 424
aiProcess_FindInstances = 1048576, 
# 435
aiProcess_OptimizeMeshes = 2097152, 
# 464
aiProcess_OptimizeGraph = 4194304, 
# 483
aiProcess_FlipUVs = 8388608, 
# 497
aiProcess_FlipWindingOrder = 16777216
# 502
}; 
# 601
}
# 8 "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/triangle.h"
class trimesh; 
# 10
struct triangle { 
# 11
unsigned i0, i1, i2; 
# 12
trimesh *meshPtr; 
# 13
}; 
# 15
struct triptr { 
# 16
unsigned meshID, triID; 
# 17
}; 
# 19
class triSetup { 
# 23
protected: cvec2f _v0; 
# 24
cvec2f _v1; 
# 25
cvec2f _v2; 
# 28
float _z0, _z1, _z2; 
# 29
float _w0, _w1, _w2; 
# 30
float _coc0, _coc1, _coc2; 
# 34
float _xs[3]; 
# 35
float _ys[3]; 
# 38
float baryDenom; 
# 41
public: triSetup(cvec2f &v0, cvec2f &v1, cvec2f &v2, const float &
# 42
z0, const float &z1, const float &z2, const float &
# 43
w0, const float &w1, const float &w2, const float &
# 44
coc0, const float &coc1, const float &coc2) 
# 45
{ 
# 46
(_v0) = v0; (_v1) = v1; (_v2) = v2; 
# 47
(_z0) = z0; (_z1) = z1; (_z2) = z2; 
# 48
(_w0) = w0; (_w1) = w1; (_w2) = w2; 
# 49
(_coc0) = coc0; (_coc1) = coc1; (_coc2) = coc2; 
# 54
((_xs)[0]) = (((_v1).x) - ((_v0).x)); ((_ys)[0]) = (((_v1).y) - ((_v0).y)); 
# 55
((_xs)[1]) = (((_v2).x) - ((_v1).x)); ((_ys)[1]) = (((_v2).y) - ((_v1).y)); 
# 56
((_xs)[2]) = (((_v0).x) - ((_v2).x)); ((_ys)[2]) = (((_v0).y) - ((_v2).y)); 
# 59
(baryDenom) = this->edgeSum(0, _v2); 
# 60
} 
# 62
float edgeSum(const int &eID, const cvec2f &pos) { 
# 63
float esum = (-(1.0F)); 
# 64
((eID < 3) && (eID >= 0)) ? static_cast< void>(0) : __assert_fail("eID < 3 && eID >= 0", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/triangle.h", 64, __PRETTY_FUNCTION__); 
# 65
if (eID == 0) { esum = ((((pos.y) - ((_v0).y)) * (((_v1).x) - ((_v0).x))) - (((pos.x) - ((_v0).x)) * (((_v1).y) - ((_v0).y)))); } else { 
# 67
if (eID == 1) { esum = ((((pos.y) - ((_v1).y)) * (((_v2).x) - ((_v1).x))) - (((pos.x) - ((_v1).x)) * (((_v2).y) - ((_v1).y)))); } else { 
# 69
if (eID == 2) { esum = ((((pos.y) - ((_v2).y)) * (((_v0).x) - ((_v2).x))) - (((pos.x) - ((_v2).x)) * (((_v0).y) - ((_v2).y)))); }  }  }  
# 72
return esum; 
# 73
} 
# 75
bool edgeTest(const int &eID, const cvec2f &pos) { 
# 76
return this->edgeSum(eID, pos) > (0.0F); 
# 77
} 
# 79
virtual bool insideTest(const cvec2f &pos, float &alpha, float &beta) { 
# 81
if ((baryDenom) == (0.0F)) { 
# 82
alpha = (beta = (0.0F)); 
# 83
return false; 
# 84
}  
# 88
float es0 = this->edgeSum(0, pos); 
# 89
float es1 = this->edgeSum(1, pos); 
# 90
float es2 = this->edgeSum(2, pos); 
# 92
alpha = (es1 / (baryDenom)); 
# 93
beta = (es2 / (baryDenom)); 
# 95
return (es0 > (0.0F)) && (es1 > (0.0F)) && (es2 > (0.0F)); 
# 96
} 
# 99
virtual bool insideTest(const float &u, const float &v, const cvec2f &pos, float &alpha, float &beta) { 
# 101
((u >= (-(0.5F))) && (u <= (0.5F))) ? static_cast< void>(0) : __assert_fail("u>=-0.5f && u<=0.5f", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/triangle.h", 101, __PRETTY_FUNCTION__); 
# 102
((v >= (-(0.5F))) && (v <= (0.5F))) ? static_cast< void>(0) : __assert_fail("v>=-0.5f && v<=0.5f", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/triangle.h", 102, __PRETTY_FUNCTION__); 
# 104
if ((baryDenom) == (0.0F)) { 
# 105
alpha = (beta = (0.0F)); 
# 106
return false; 
# 107
}  
# 111
float es0 = this->edgeSum(0, pos); 
# 112
float es1 = this->edgeSum(1, pos); 
# 113
float es2 = this->edgeSum(2, pos); 
# 115
float es0uv = (es0 + (u * (((_coc1) * ((pos.y) - ((_v0).y))) - ((_coc0) * ((pos.y) - ((_v1).y)))))) - (v * (((_coc1) * ((pos.x) - ((_v0).x))) - ((_coc0) * ((pos.x) - ((_v1).x))))); 
# 117
float es1uv = (es1 + (u * (((_coc2) * ((pos.y) - ((_v1).y))) - ((_coc1) * ((pos.y) - ((_v2).y)))))) - (v * (((_coc2) * ((pos.x) - ((_v1).x))) - ((_coc1) * ((pos.x) - ((_v2).x))))); 
# 119
float es2uv = (es2 + (u * (((_coc0) * ((pos.y) - ((_v2).y))) - ((_coc2) * ((pos.y) - ((_v0).y)))))) - (v * (((_coc0) * ((pos.x) - ((_v2).x))) - ((_coc2) * ((pos.x) - ((_v0).x))))); 
# 122
alpha = (es1uv / (baryDenom)); 
# 123
beta = (es2uv / (baryDenom)); 
# 125
return (es0uv > (0.0F)) && (es1uv > (0.0F)) && (es2uv > (0.0F)); 
# 126
} 
# 129
}; 
# 132
class triSetupDof : public triSetup { 
# 168
protected: float _Ay0[3]; 
# 169
float _Bx0[3]; 
# 170
float _c1minusc0, 
# 171
_c2minusc1, 
# 172
_c0minusc2; 
# 176
public: triSetupDof(cvec2f &v0, cvec2f &v1, cvec2f &v2, const float &
# 177
z0, const float &z1, const float &z2, const float &
# 178
w0, const float &w1, const float &w2, const float &
# 179
coc0, const float &coc1, const float &coc2) : triSetup(v0, v1, v2, z0, z1, z2, w0, w1, w2, coc0, coc1, coc2) 
# 184
{ 
# 185
((_Ay0)[0]) = (((_coc0) * ((_v1).y)) - ((_coc1) * ((_v0).y))); ((_Bx0)[0]) = (((_coc0) * ((_v1).x)) - ((_coc1) * ((_v0).x))); 
# 186
((_Ay0)[1]) = (((_coc1) * ((_v2).y)) - ((_coc2) * ((_v1).y))); ((_Bx0)[1]) = (((_coc1) * ((_v2).x)) - ((_coc2) * ((_v1).x))); 
# 187
((_Ay0)[2]) = (((_coc2) * ((_v0).y)) - ((_coc0) * ((_v2).y))); ((_Bx0)[2]) = (((_coc2) * ((_v0).x)) - ((_coc0) * ((_v2).x))); 
# 189
(_c1minusc0) = ((_coc1) - (_coc0)); 
# 190
(_c2minusc1) = ((_coc2) - (_coc1)); 
# 191
(_c0minusc2) = ((_coc0) - (_coc2)); 
# 192
} 
# 194
virtual bool insideTest(const cvec2f &pos, float &alpha, float &beta) { 
# 195
return this->insideTest((0.0F), (0.0F), pos, alpha, beta); 
# 196
} 
# 198
virtual bool insideTest(const float &u, const float &v, const cvec2f &pos, float &alpha, float &beta) { 
# 199
((u >= (-(0.5F))) && (u <= (0.5F))) ? static_cast< void>(0) : __assert_fail("u>=-0.5f && u<=0.5f", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/triangle.h", 199, __PRETTY_FUNCTION__); 
# 200
((v >= (-(0.5F))) && (v <= (0.5F))) ? static_cast< void>(0) : __assert_fail("v>=-0.5f && v<=0.5f", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/triangle.h", 200, __PRETTY_FUNCTION__); 
# 202
if ((baryDenom) == (0.0F)) { 
# 203
alpha = (beta = (0.0F)); 
# 204
return false; 
# 205
}  
# 207
float A[3] = {((_Ay0)[0]) + ((pos.y) * (_c1minusc0)), ((_Ay0)[1]) + ((pos.y) * (_c2minusc1)), ((_Ay0)[2]) + ((pos.y) * (_c0minusc2))}; 
# 208
float B[3] = {((_Bx0)[0]) + ((pos.x) * (_c1minusc0)), ((_Bx0)[1]) + ((pos.x) * (_c2minusc1)), ((_Bx0)[2]) + ((pos.x) * (_c0minusc2))}; 
# 209
float C[3] = {this->edgeSum(0, pos), +this->edgeSum(1, pos), +this->edgeSum(2, pos)}; 
# 211
float es0uv = ((u * ((A)[0])) - (v * ((B)[0]))) + ((C)[0]); 
# 212
float es1uv = ((u * ((A)[1])) - (v * ((B)[1]))) + ((C)[1]); 
# 213
float es2uv = ((u * ((A)[2])) - (v * ((B)[2]))) + ((C)[2]); 
# 215
alpha = (es1uv / (baryDenom)); 
# 216
beta = (es2uv / (baryDenom)); 
# 218
return (es0uv > (0.0F)) && (es1uv > (0.0F)) && (es2uv > (0.0F)); 
# 219
} 
# 221
}; 
# 18 "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/trimesh.h"
using namespace std;
# 20
class trimesh { 
# 23
Assimp::Importer ao; 
# 25
std::vector< cvec3f>  _vertices; 
# 26
std::vector< cvec3f>  _tVertices; 
# 27
std::vector< cvec3f>  _normals; 
# 28
std::vector< cvec3f>  _tangents; 
# 29
std::vector< cvec3f>  _bitangents; 
# 30
std::vector< cvec2f>  _texcoords; 
# 31
std::vector< triangle>  _tris; 
# 33
unsigned _nvertices; 
# 34
unsigned _ntris; 
# 35
unsigned _matID; 
# 37
std::map< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > , int>  _attrs; 
# 39
cvec3f _bbmin; 
# 40
cvec3f _bbmax; 
# 43
float _Viewmat[16]; 
# 44
float _invViewmat[16]; 
# 47
public: trimesh(const std::__cxx11::string filename) { 
# 49
(_ntris) = (0); 
# 50
(_nvertices) = (0); 
# 51
const aiScene *sc1 = (ao).ReadFile(filename.c_str(), ((aiProcess_GenSmoothNormals) | (aiProcess_Triangulate)) | (aiProcess_JoinIdenticalVertices)); 
# 56
if (sc1 == (__null)) { 
# 57
printf("Scene is NULL!"); 
# 58
return; 
# 59
}  
# 61
for (unsigned m = (0); m < (sc1->mNumMeshes); m++) { 
# 62
(_ntris) += (((sc1->mMeshes)[m])->mNumFaces); 
# 63
(_nvertices) += (((sc1->mMeshes)[m])->mNumVertices); 
# 64
}  
# 66
(_vertices).resize(_nvertices); 
# 67
(_tVertices).resize(_nvertices); 
# 68
(_normals).resize(_nvertices); 
# 69
(_tangents).resize(_nvertices); 
# 70
(_bitangents).resize(_nvertices); 
# 71
(_texcoords).resize(_nvertices); 
# 72
(_tris).resize(_ntris); 
# 74
unsigned triIdx = (0); 
# 75
unsigned vIdx = (0); 
# 80
(_bbmin) = gencvec3f((3.402823466e+38F), (3.402823466e+38F), (3.402823466e+38F)); 
# 81
(_bbmax) = gencvec3f(-(3.402823466e+38F), -(3.402823466e+38F), -(3.402823466e+38F)); 
# 83
for (unsigned m = (0); m < (sc1->mNumMeshes); m++) { 
# 85
unsigned meshStartV = vIdx; 
# 88
for (unsigned i = (0); i < (((sc1->mMeshes)[m])->mNumVertices); i++) { 
# 90
(_vertices)[vIdx] = gencvec3f(((((sc1->mMeshes)[m])->mVertices)[i]).x, ((((sc1->mMeshes)[m])->mVertices)[i]).y, ((((sc1->mMeshes)[m])->mVertices)[i]).z); 
# 93
(_normals)[vIdx] = gencvec3f(((((sc1->mMeshes)[m])->mNormals)[i]).x, ((((sc1->mMeshes)[m])->mNormals)[i]).y, ((((sc1->mMeshes)[m])->mNormals)[i]).z); 
# 96
if (((sc1->mMeshes)[m])->HasTextureCoords(0)) { 
# 97
(_texcoords)[vIdx] = gencvec2f((((((sc1->mMeshes)[m])->mTextureCoords)[0])[i]).x, (((((sc1->mMeshes)[m])->mTextureCoords)[0])[i]).y); 
# 99
}  
# 103
vIdx++; 
# 104
}  
# 106
for (unsigned i = (0); i < (((sc1->mMeshes)[m])->mNumFaces); i++) { 
# 108
((_tris)[triIdx].i0) = (meshStartV + ((((((sc1->mMeshes)[m])->mFaces)[i]).mIndices)[0])); 
# 109
((_tris)[triIdx].i1) = (meshStartV + ((((((sc1->mMeshes)[m])->mFaces)[i]).mIndices)[1])); 
# 110
((_tris)[triIdx].i2) = (meshStartV + ((((((sc1->mMeshes)[m])->mFaces)[i]).mIndices)[2])); 
# 111
((_tris)[triIdx].meshPtr) = this; 
# 151
triIdx++; 
# 152
}  
# 153
}  
# 157
for (unsigned i = (0); i < (_vertices).size(); i++) { 
# 158
normalizeInplace((_tangents)[i]); 
# 159
normalizeInplace((_bitangents)[i]); 
# 160
}  
# 163
printf("\t[V=%d T=%d]\n", _nvertices, _ntris); fflush(stdout); 
# 164
} 
# 167
void applyTransformation(float Viewmat[16], float invViewmat[16]) { 
# 168
memcpy(_Viewmat, Viewmat, (16) * sizeof(float)); 
# 169
memcpy(_invViewmat, invViewmat, (16) * sizeof(float)); 
# 171
for (unsigned i = (0); i < (_vertices).size(); i++) { 
# 173
cvec4f a; 
# 174
a = gencvec4f((_vertices)[i].x, (_vertices)[i].y, (_vertices)[i].z, (1.0F)); 
# 177
cvec4f ta; 
# 178
matmultvec4f(_Viewmat, a, ta); 
# 180
if ((ta.x) > ((_bbmax).x)) { ((_bbmax).x) = (ta.x); }  
# 181
if ((ta.y) > ((_bbmax).y)) { ((_bbmax).y) = (ta.y); }  
# 182
if ((ta.z) > ((_bbmax).z)) { ((_bbmax).z) = (ta.z); }  
# 184
if ((ta.x) < ((_bbmin).x)) { ((_bbmin).x) = (ta.x); }  
# 185
if ((ta.y) < ((_bbmin).y)) { ((_bbmin).y) = (ta.y); }  
# 186
if ((ta.z) < ((_bbmin).z)) { ((_bbmin).z) = (ta.z); }  
# 188
(_tVertices)[i] = gencvec3f(ta.x, ta.y, ta.z); 
# 190
cvec3f n, tn; 
# 191
n = gencvec3f((_normals)[i].x, (_normals)[i].y, (_normals)[i].z); 
# 192
ntransform(_invViewmat, n, tn); 
# 193
normalizeInplace(tn); 
# 194
(_normals)[i] = n; 
# 195
}  
# 196
} 
# 198
unsigned &matID() { return _matID; } 
# 199
std::vector< cvec3f>  &vertices() { return _vertices; } 
# 200
std::vector< cvec3f>  &tVertices() { return _tVertices; } 
# 201
std::vector< cvec3f>  &normals() { return _normals; } 
# 202
std::vector< cvec3f>  &tangents() { return _tangents; } 
# 203
std::vector< cvec3f>  &bitangents() { return _bitangents; } 
# 204
std::vector< cvec2f>  &texcoords() { return _texcoords; } 
# 205
std::vector< triangle>  &tris() { return _tris; } 
# 207
cvec3f &bbmin() { return _bbmin; } 
# 208
cvec3f &bbmax() { return _bbmax; } 
# 210
float *Viewmat() { return _Viewmat; } 
# 211
float *invViewmat() { return _invViewmat; } 
# 213
int getattr(const std::__cxx11::string &attrname) { 
# 214
if ((_attrs).count(attrname) > (0)) { 
# 215
return (_attrs)[attrname]; 
# 216
} else { 
# 217
return -1; 
# 218
}  
# 219
} 
# 221
std::map< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > , int>  &attributes() { return _attrs; } 
# 223
}; 
# 22 "/home/zhengzhen/workspace/versapipe/examples/rasterization/bezmesh/bezmesh.h"
using namespace std;
# 25
inline float B(int i, float t) { 
# 26
if (i == 0) { return (((1.0F) - t) * ((1.0F) - t)) * ((1.0F) - t); } else { 
# 27
if (i == 1) { return (((3.0F) * t) * ((1.0F) - t)) * ((1.0F) - t); } else { 
# 28
if (i == 2) { return (((3.0F) * t) * t) * ((1.0F) - t); } else { 
# 29
if (i == 3) { return (t * t) * t; }  }  }  }  
# 30
return (0.0F); 
# 31
} 
# 33
inline float dB(int i, float t) { 
# 34
if (i == 0) { return ((-(3.0F)) * ((1.0F) - t)) * ((1.0F) - t); } else { 
# 35
if (i == 1) { return ((3.0F) * ((1.0F) - t)) * ((1.0F) - ((3.0F) * t)); } else { 
# 36
if (i == 2) { return ((3.0F) * t) * ((2.0F) - ((3.0F) * t)); } else { 
# 37
if (i == 3) { return ((3.0F) * t) * t; }  }  }  }  
# 38
return (0.0F); 
# 39
} 
# 41
inline float B0(float u) { return (((1.0F) - u) * ((1.0F) - u)) * ((1.0F) - u); } 
# 42
inline float B1(float u) { return (((3.0F) * u) * ((1.0F) - u)) * ((1.0F) - u); } 
# 43
inline float B2(float u) { return ((3.0F) * u) * (u - (u * u)); } 
# 44
inline float B3(float u) { return u * (u * u); } 
# 46
inline float dB0(float u) { return ((-(3.0F)) * ((1.0F) - u)) * ((1.0F) - u); } 
# 47
inline float dB1(float u) { return ((3.0F) * ((1.0F) - u)) * ((1.0F) - ((3.0F) * u)); } 
# 48
inline float dB2(float u) { return ((3.0F) * u) * ((2.0F) - ((3.0F) * u)); } 
# 49
inline float dB3(float u) { return ((3.0F) * u) * u; } 
# 52
inline int pow2roundup(int x) 
# 53
{ 
# 54
if (x < 0) { 
# 55
return 0; }  
# 56
--x; 
# 57
x |= (x >> 1); 
# 58
x |= (x >> 2); 
# 59
x |= (x >> 4); 
# 60
x |= (x >> 8); 
# 61
x |= (x >> 16); 
# 62
return x + 1; 
# 63
} 
# 65
inline cvec3f bezier_eval(cvec3f *pos, float u, float v) { 
# 66
cvec3f pt; 
# 67
for (int j = 0; j < 4; j++) { 
# 68
for (int i = 0; i < 4; i++) { 
# 69
(pt += (((((pos[(j * 4) + i]) * (B(i, u)))) * (B(j, v))))); 
# 70
}  
# 71
}  
# 72
return pt; 
# 73
} 
# 76
class bezmesh; 
# 78
class patch { 
# 81
public: patch() { } 
# 84
patch(const patch &p) 
# 85
{ 
# 86
for (int u = 0; u < 4; u++) { 
# 87
for (int v = 0; v < 4; v++) 
# 88
{ 
# 89
(((cp)[u])[v]) = (((p.cp)[u])[v]); 
# 90
(((realcp)[u])[v]) = (((p.realcp)[u])[v]); 
# 91
}  }  
# 92
((bbox) = (p.bbox)); 
# 94
(parent) = (p.parent); 
# 95
} 
# 97
cvec4f cp[4][4]; 
# 98
std::vector< cvec3f>  bbox; 
# 99
cvec4f realcp[4][4]; 
# 100
bezmesh *parent; 
# 101
cvec3f patch_val(cvec4f & input); 
# 102
cvec4f pos_at_uv(float u, float v); 
# 103
cvec3f nor_at_uv(float u, float v); 
# 104
cvec3f patch_val(float u, float v); 
# 105
cvec4f patch_valw(float u, float v); 
# 106
cvec3f normal(cvec4f & parameters, float u, float v); 
# 165
}; 
# 167
class bezmesh { 
# 170
std::vector< patch>  _patches; 
# 171
float *control_points; 
# 172
unsigned _matID; 
# 173
std::map< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > , int>  _attrs; 
# 175
float _Viewmat[16]; 
# 176
float _invViewmat[16]; 
# 179
public: bezmesh() { } 
# 180
bezmesh(const std::__cxx11::string filename) { this->read_bez(filename.c_str(), (1.0)); } 
# 181
int read_bez(const char * filename, float scale, bool swapyz = false); 
# 182
void vtokenize(const std::__cxx11::string & str, const std::__cxx11::string & delimiters, std::vector< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > >  & tokens); 
# 183
void patches_normalize(float scale); 
# 185
float *get_patches(); 
# 186
void get_patches(float * control_points); 
# 188
patch &get_patches(int i); 
# 190
void applyTransformation(float Viewmat[16], float invViewmat[16]) { 
# 191
memcpy(_Viewmat, Viewmat, (16) * sizeof(float)); 
# 192
memcpy(_invViewmat, invViewmat, (16) * sizeof(float)); 
# 194
for (unsigned i = (0); i < (_patches).size(); i++) { 
# 195
for (int j = 0; j < 4; j++) { 
# 196
for (int k = 0; k < 4; k++) { 
# 198
cvec4f ta; 
# 199
matmultvec4f(_Viewmat, (((_patches)[i].cp)[j])[k], ta); 
# 200
((((_patches)[i].cp)[j])[k]) = ta; 
# 201
}  
# 202
}  
# 203
}  
# 204
} 
# 206
unsigned numPatches() { return (_patches).size(); } 
# 207
unsigned numPoints() { return (_patches).size() * (16); } 
# 209
unsigned &matID() { return _matID; } 
# 210
std::map< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > , int>  &attributes() { return _attrs; } 
# 211
float *Viewmat() { return _Viewmat; } 
# 212
float *invViewmat() { return _invViewmat; } 
# 213
std::vector< patch>  &patches() { return _patches; } 
# 215
}; 
# 17 "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/scene.h"
using namespace std;
# 22
class scene { 
# 24
camera _cam; 
# 25
std::vector< light>  _lights; 
# 26
std::vector< material>  _mats; 
# 27
std::vector< trimesh *>  _meshes; 
# 28
std::vector< bezmesh *>  _bezmeshes; 
# 32
public: cvec3f *_flattVertices; 
# 33
cvec3f *_flattNormals; 
# 34
cvec4i *_flatTriangles; 
# 35
cvec4f *_flatPatches; 
# 37
int _flatnVertices; 
# 38
int _flatnTriangles; 
# 39
int _flatnPatches; 
# 41
scene() { 
# 42
(_flattVertices) = (__null); 
# 43
(_flattNormals) = (__null); 
# 44
(_flatTriangles) = (__null); 
# 45
} 
# 47
scene(const scene &sc) { 
# 48
printf("ERROR: copy constructor not supported for scene class!\n"); 
# 49
exit(1); 
# 50
} 
# 52
~scene() { 
# 53
for (unsigned i = (0); i < (_meshes).size(); i++) { 
# 54
{ if ((_meshes)[i] != (__null)) { delete (_meshes)[i]; (_meshes)[i] = (__null); }  } ; 
# 55
}  
# 57
{ if ((_flattVertices) != (__null)) { delete [] (_flattVertices); (_flattVertices) = (__null); }  } ; 
# 58
{ if ((_flattNormals) != (__null)) { delete [] (_flattNormals); (_flattNormals) = (__null); }  } ; 
# 59
{ if ((_flatTriangles) != (__null)) { delete [] (_flatTriangles); (_flatTriangles) = (__null); }  } ; 
# 60
{ if ((_flatPatches) != (__null)) { delete [] (_flatPatches); (_flatPatches) = (__null); }  } ; 
# 61
} 
# 63
void addMesh(trimesh *m) { 
# 64
(_meshes).push_back(m); 
# 65
} 
# 66
void addBezmesh(bezmesh *b) { 
# 67
(_bezmeshes).push_back(b); 
# 68
} 
# 70
std::vector< trimesh *>  &meshes() { return _meshes; } 
# 71
std::vector< bezmesh *>  &bezmeshes() { return _bezmeshes; } 
# 72
std::vector< light>  &lights() { return _lights; } 
# 73
std::vector< material>  &mats() { return _mats; } 
# 74
camera &cam() { return _cam; } 
# 76
triangle &getTriWithPrimID(int id) { 
# 77
int base = 0; 
# 78
int end = 0; 
# 80
for (unsigned i = (0); i < (_meshes).size(); i++) 
# 81
{ 
# 82
end += (_meshes)[i]->tris().size(); 
# 83
if ((id >= base) && (id < end)) { 
# 84
return ((_meshes)[i]->tris())[id - base]; } else { 
# 86
base = end; }  
# 87
}  
# 90
false ? static_cast< void>(0) : __assert_fail("false", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/scene.h", 90, __PRETTY_FUNCTION__); 
# 91
return ((_meshes)[0]->tris())[0]; 
# 92
} 
# 94
trimesh *getMeshPtrWithPrimID(int id) 
# 95
{ 
# 96
int base = 0; 
# 97
int end = 0; 
# 99
for (unsigned i = (0); i < (_meshes).size(); i++) 
# 100
{ 
# 101
end += (_meshes)[i]->tris().size(); 
# 102
if ((id >= base) && (id < end)) { 
# 103
return (_meshes)[i]; } else { 
# 105
base = end; }  
# 106
}  
# 109
false ? static_cast< void>(0) : __assert_fail("false", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/scene.h", 109, __PRETTY_FUNCTION__); 
# 110
return __null; 
# 111
} 
# 113
int getMeshIDWithPtr(trimesh *ptr) 
# 114
{ 
# 115
for (unsigned i = (0); i < (_meshes).size(); i++) { 
# 116
if ((_meshes)[i] == ptr) { return i; }  }  
# 117
false ? static_cast< void>(0) : __assert_fail("false", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/scene.h", 117, __PRETTY_FUNCTION__); 
# 118
return -1; 
# 119
} 
# 121
int getTriIDWithMeshID(int meshID, triangle &tri) 
# 122
{ 
# 123
for (unsigned i = (0); i < (_meshes)[meshID]->tris().size(); i++) { 
# 124
if (((((_meshes)[meshID]->tris())[i].i0) == (tri.i0)) && ((((_meshes)[meshID]->tris())[i].i1) == (tri.i1)) && ((((_meshes)[meshID]->tris())[i].i2) == (tri.i2))) { 
# 127
return i; }  
# 128
}  
# 130
false ? static_cast< void>(0) : __assert_fail("false", "/home/zhengzhen/workspace/versapipe/examples/rasterization/basicTypes/scene.h", 130, __PRETTY_FUNCTION__); 
# 131
return -1; 
# 132
} 
# 134
void flatten(int &numTriangles, int &numVertices, int &numPatches) { 
# 136
numTriangles = 0; 
# 137
numVertices = 0; 
# 138
numPatches = 0; 
# 141
for (uint mi = (0); mi < (_meshes).size(); mi++) { 
# 142
numVertices += (_meshes)[mi]->tVertices().size(); 
# 143
numTriangles += (_meshes)[mi]->tris().size(); 
# 144
}  
# 145
for (uint bi = (0); bi < (_bezmeshes).size(); bi++) { 
# 146
numPatches += (_bezmeshes)[bi]->patches().size(); 
# 147
}  
# 149
(_flatnVertices) = numVertices; 
# 150
(_flatnTriangles) = numTriangles; 
# 151
(_flatnPatches) = numPatches; 
# 153
(_flattVertices) = (new cvec3f [numVertices]); 
# 154
(_flattNormals) = (new cvec3f [numVertices]); 
# 155
(_flatTriangles) = (new cvec4i [numTriangles]); 
# 156
(_flatPatches) = (new cvec4f [numPatches * 16]); 
# 158
int flatTidx = 0; 
# 159
int flatVidx = 0; 
# 161
for (uint mi = (0); mi < (_meshes).size(); mi++) { 
# 162
int meshVstart = flatVidx; 
# 164
for (uint vi = (0); vi < (_meshes)[mi]->tVertices().size(); vi++) { 
# 165
((_flattVertices)[flatVidx]) = ((_meshes)[mi]->tVertices())[vi]; 
# 166
ntransform((this->meshes())[mi]->invViewmat(), ((_meshes)[mi]->normals())[vi], (_flattNormals)[flatVidx]); 
# 170
normalizeInplace((_flattNormals)[flatVidx]); 
# 171
flatVidx++; 
# 172
}  
# 173
for (uint ti = (0); ti < (_meshes)[mi]->tris().size(); ti++) { 
# 174
(((_flatTriangles)[flatTidx]).x) = ((((_meshes)[mi]->tris())[ti].i0) + meshVstart); 
# 175
(((_flatTriangles)[flatTidx]).y) = ((((_meshes)[mi]->tris())[ti].i1) + meshVstart); 
# 176
(((_flatTriangles)[flatTidx]).z) = ((((_meshes)[mi]->tris())[ti].i2) + meshVstart); 
# 177
(((_flatTriangles)[flatTidx]).w) = ((_meshes)[mi]->matID()); 
# 178
flatTidx++; 
# 179
}  
# 180
}  
# 182
int flatPidx = 0; 
# 183
for (uint bi = (0); bi < (_bezmeshes).size(); bi++) { 
# 185
for (uint pi = (0); pi < (_bezmeshes)[bi]->patches().size(); pi++) { 
# 186
patch &p = ((_bezmeshes)[bi]->patches())[pi]; 
# 187
for (int j = 0; j < 4; j++) { 
# 188
for (int k = 0; k < 4; k++) { 
# 189
(((_flatPatches)[((flatPidx * 16) + (j * 4)) + k]).x) = ((((p.cp)[j])[k]).x); 
# 190
(((_flatPatches)[((flatPidx * 16) + (j * 4)) + k]).y) = ((((p.cp)[j])[k]).y); 
# 191
(((_flatPatches)[((flatPidx * 16) + (j * 4)) + k]).z) = ((((p.cp)[j])[k]).z); 
# 192
(((_flatPatches)[((flatPidx * 16) + (j * 4)) + k]).w) = ((((p.cp)[j])[k]).w); 
# 193
}  
# 194
}  
# 195
flatPidx++; 
# 196
}  
# 197
}  
# 198
} 
# 200
}; 
# 17 "/home/zhengzhen/workspace/versapipe/examples/rasterization/sceneParser/sceneParser.h"
using namespace std;
# 19
class sceneParser { 
# 22
std::ifstream sceneFile; 
# 23
std::__cxx11::string basepath_; 
# 25
std::__cxx11::string curLine; 
# 26
std::__cxx11::list< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > >  curTokens; 
# 27
scene *curScene; 
# 28
material curMat; 
# 29
std::map< std::__cxx11::basic_string< char, std::char_traits< char> , std::allocator< char> > , int>  curAttrs; 
# 32
bool fetchLine(); 
# 33
void processLine(); 
# 34
bool fetchCommand(); 
# 35
bool fetchNextToken(std::__cxx11::string & token); 
# 37
bool fetchLeftBrace(); 
# 38
bool fetchRightBrace(); 
# 40
bool fetchString(std::__cxx11::string & s); 
# 42
bool fetch1f(float & x); 
# 43
bool fetch2f(float & x, float & y); 
# 44
bool fetch3f(float & x, float & y, float & z); 
# 46
bool fetchCamera(); 
# 47
bool fetchLight(); 
# 48
bool fetchMaterial(); 
# 49
bool fetchTranslate(); 
# 50
bool fetchRotate(); 
# 51
bool fetchScale(); 
# 52
bool fetchLoadmesh(); 
# 53
bool fetchLoadbez(); 
# 54
bool fetchReset(); 
# 55
bool fetchMeshAttribute(); 
# 56
bool fetchTexture(); 
# 57
bool fetchCameraFov(); 
# 58
bool fetchZnear(); 
# 59
bool fetchZfar(); 
# 63
public: sceneParser() { 
# 65
} 
# 67
~sceneParser() { 
# 68
if ((sceneFile).is_open()) { (sceneFile).close(); }  
# 69
} 
# 71
void parseFile(std::__cxx11::string basepath, std::__cxx11::string filename, scene * sc); 
# 73
}; 
# 39 "/home/zhengzhen/workspace/versapipe/examples/rasterization/main.cu"
using namespace std;
# 47
void initScreen(int W, int H); 
# 48
void initScene(int argc, char * argv[]); 
# 49
void initPipe(); 
# 50
void display(); 
# 51
void destroyApp(); 
# 52
void doPerfTest(int n_runs = 10); 
# 53
void mouseHandler(int button, int state, int x, int y); 
# 54
void keypressed(unsigned char key, int x, int y); 
# 57
void buildProjectionMatrix(); 
# 58
void loadTriangleBuffer(int start, int end); 
# 59
void resetDepthBuffer(); 
# 60
void findCameraZrange(); 
# 67
scene sMain; 
# 71
float theta, phi, camdist; 
# 73
raster_wtri *triangleBuffer = (__null); 
# 76
ConstantState pipelineConstantState; 
# 77
MutableState pipelineMutableState; 
# 78
int nTris, nVerts, nPatches; 
# 81
int n_test_runs = 0; 
# 83
cvec3f bbmin = gencvec3f((3.402823466e+38F), (3.402823466e+38F), (3.402823466e+38F)); 
# 84
cvec3f bbmax = gencvec3f(-(3.402823466e+38F), -(3.402823466e+38F), -(3.402823466e+38F)); 
# 88
RasterPipe piko_pipe; 
# 90
int main(int argc, char *argv[]) 
# 91
{ 
# 93
initScreen(1024, 768); 
# 94
initScene(argc, argv); 
# 95
initPipe(); 
# 96
display(); return 0; 
# 101
} 
# 103
void initScreen(int W, int H) 
# 104
{ 
# 106
sMain.cam().W() = W; 
# 107
sMain.cam().H() = H; 
# 110
(pipelineConstantState.screenSizeX) = W; 
# 111
(pipelineConstantState.screenSizeY) = H; 
# 113
(pipelineConstantState.halfW) = ((0.5F) * ((float)W)); 
# 114
(pipelineConstantState.halfH) = ((0.5F) * ((float)H)); 
# 122
} 
# 125
void initScene(int argc, char *argv[]) 
# 126
{ 
# 130
sceneParser scp; 
# 132
if (argc == 2) 
# 133
{ 
# 134
n_test_runs = 0; 
# 135
scp.parseFile(".", argv[1], &sMain); 
# 136
} else { 
# 137
if (argc == 3) 
# 138
{ 
# 139
n_test_runs = atoi(argv[2]); 
# 140
scp.parseFile(".", argv[1], &sMain); 
# 141
} else 
# 143
{ 
# 144
scp.parseFile(".", "fairyforest.scene", &sMain); 
# 145
n_test_runs = 100; 
# 146
}  }  
# 148
printf("Flattening scene assets: "); fflush(stdout); 
# 149
sMain.flatten(nTris, nVerts, nPatches); 
# 150
printf("T: %d, V: %d\n", nTris, nVerts, nPatches); 
# 153
buildProjectionMatrix(); 
# 156
} 
# 158
void initPipe() 
# 159
{ 
# 160
camera &cam = sMain.cam(); 
# 174
loadTriangleBuffer(0, nTris); 
# 175
resetDepthBuffer(); 
# 176
piko_pipe.allocate(pipelineConstantState, pipelineMutableState, triangleBuffer, nTris); 
# 177
} 
# 179
void display() 
# 180
{ 
# 181
printf("display()\n"); 
# 184
buildProjectionMatrix(); 
# 185
resetDepthBuffer(); 
# 187
piko_pipe.prepare(); 
# 188
piko_pipe.run_single(); 
# 190
unsigned *data = (piko_pipe.pikoScreen).getData(); 
# 197
int x = pipelineConstantState.screenSizeX, y = pipelineConstantState.screenSizeY; 
# 198
FILE *fp = fopen("result", "w"); 
# 199
for (int i = 0; i < y; i++) 
# 200
{ 
# 201
for (int j = 0; j < (x * 4); j++) 
# 202
{ 
# 203
fprintf(fp, "%d", ((char *)data)[((i * x) * 4) + j]); 
# 204
if (j != ((x * 4) - 1)) 
# 205
{ 
# 206
fprintf(fp, "\t"); 
# 207
}  
# 208
}  
# 209
if (i != (y - 1)) 
# 210
{ 
# 211
fprintf(fp, "\n"); 
# 212
}  
# 213
}  
# 214
fclose(fp); 
# 223
} 
# 225
void doPerfTest(int n_runs) 
# 226
{ 
# 227
printf("Running perf test (%d runs)...\n", n_runs); 
# 229
if (n_runs == 0) { return; }  
# 231
buildProjectionMatrix(); 
# 232
resetDepthBuffer(); 
# 233
piko_pipe.prepare(); 
# 234
piko_pipe.run_single(); 
# 236
Stopwatch mywatch; 
# 238
mywatch.Reset(); 
# 239
for (int run = 0; run < n_runs; run++) 
# 240
{ 
# 241
buildProjectionMatrix(); 
# 242
resetDepthBuffer(); 
# 243
piko_pipe.prepare(); 
# 244
}  
# 245
float prepTime = mywatch.GetTime(); 
# 247
mywatch.Reset(); 
# 248
for (int run = 0; run < n_runs; run++) 
# 249
{ 
# 250
buildProjectionMatrix(); 
# 251
resetDepthBuffer(); 
# 252
piko_pipe.prepare(); 
# 253
piko_pipe.run_single(); 
# 254
}  
# 255
float fullrunTime = mywatch.GetTime(); 
# 257
float total_time_to_ms = (1000.0F) / ((float)n_runs); 
# 259
printf("Prep time     = %0.2f ms\n", total_time_to_ms * prepTime); 
# 260
printf("Full run time = %0.2f ms\n", total_time_to_ms * fullrunTime); 
# 261
printf("Raster time   = %0.2f ms\n", total_time_to_ms * (fullrunTime - prepTime)); 
# 262
} 
# 264
void findCameraZrange() 
# 265
{ 
# 266
for (int i = 0; i < (sMain._flatnVertices); i++) 
# 267
{ 
# 268
(bbmin.x) = min(bbmin.x, ((sMain._flattVertices)[i]).x); 
# 269
(bbmin.y) = min(bbmin.y, ((sMain._flattVertices)[i]).y); 
# 270
(bbmin.z) = min(bbmin.z, ((sMain._flattVertices)[i]).z); 
# 272
(bbmax.x) = max(bbmax.x, ((sMain._flattVertices)[i]).x); 
# 273
(bbmax.y) = max(bbmax.y, ((sMain._flattVertices)[i]).y); 
# 274
(bbmax.z) = max(bbmax.z, ((sMain._flattVertices)[i]).z); 
# 275
}  
# 277
camera &cam = sMain.cam(); 
# 279
float d0 = magvec(((cam.eye()) - (gencvec3f(bbmin.x, bbmin.y, bbmin.z)))); 
# 280
float d1 = magvec(((cam.eye()) - (gencvec3f(bbmin.x, bbmin.y, bbmax.z)))); 
# 281
float d2 = magvec(((cam.eye()) - (gencvec3f(bbmin.x, bbmax.y, bbmin.z)))); 
# 282
float d3 = magvec(((cam.eye()) - (gencvec3f(bbmin.x, bbmax.y, bbmax.z)))); 
# 283
float d4 = magvec(((cam.eye()) - (gencvec3f(bbmax.x, bbmin.y, bbmin.z)))); 
# 284
float d5 = magvec(((cam.eye()) - (gencvec3f(bbmax.x, bbmin.y, bbmax.z)))); 
# 285
float d6 = magvec(((cam.eye()) - (gencvec3f(bbmax.x, bbmax.y, bbmin.z)))); 
# 286
float d7 = magvec(((cam.eye()) - (gencvec3f(bbmax.x, bbmax.y, bbmax.z)))); 
# 288
float mind = min(min(min(d0, d1), min(d2, d3)), min(min(d4, d5), min(d6, d7))); 
# 289
float maxd = max(max(max(d0, d1), max(d2, d3)), max(max(d4, d5), max(d6, d7))); 
# 291
cam.zNear() = max((0.009999999776F), mind * (0.5F)); 
# 292
cam.zFar() = min(maxd * (2.0F), mind * (10000.0F)); 
# 294
printf("z range %f to %f\n", cam.zNear(), cam.zFar()); 
# 296
} 
# 299
void getPerspectiveMat(float *mat, float fovy, float 
# 300
aspect, float n, float f) 
# 301
{ 
# 302
float l, r, b, t; 
# 303
float pi = (4.0) * atan(1); 
# 304
float jiao = (fovy * pi) / (360); 
# 305
t = (n * tanf(jiao)); 
# 306
b = (-t); 
# 307
l = (b * aspect); 
# 308
r = (t * aspect); 
# 310
memset(mat, 0, sizeof(float) * (16)); 
# 311
(mat[0]) = (((2.0F) * n) / (r - l)); 
# 312
(mat[2]) = ((r + l) / (r - l)); 
# 313
(mat[5]) = (((2.0F) * n) / (t - b)); 
# 314
(mat[6]) = ((t + b) / (t - b)); 
# 315
(mat[10]) = ((-(f + n)) / (f - n)); 
# 316
(mat[11]) = ((-(((2.0F) * f) * n)) / (f - n)); 
# 317
(mat[14]) = (-(1.0)); 
# 318
} 
# 320
void getLookUpMat(float *res, float ex, float ey, float ez, float 
# 321
tx, float ty, float tz, float ux, float uy, float uz) 
# 322
{ 
# 323
float fx = tx - ex; 
# 324
float fy = ty - ey; 
# 325
float fz = tz - ez; 
# 326
float flength = sqrt(((fx * fx) + (fy * fy)) + (fz * fz)); 
# 327
fx /= flength; 
# 328
fy /= flength; 
# 329
fz /= flength; 
# 331
float sx, sy, sz; 
# 332
sx = ((fy * uz) - (fz * uy)); 
# 333
sy = ((fz * ux) - (fx * uz)); 
# 334
sz = ((fx * uy) - (fy * ux)); 
# 335
float slength = sqrt(((sx * sx) + (sy * sy)) + (sz * sz)); 
# 336
sx /= slength; 
# 337
sy /= slength; 
# 338
sz /= slength; 
# 340
ux = ((sy * fz) - (sz * fy)); 
# 341
uy = ((sz * fx) - (sx * fz)); 
# 342
uz = ((sx * fy) - (sy * fx)); 
# 344
float mat[16]; 
# 345
memset(mat, 0, sizeof(float) * (16)); 
# 346
((mat)[0]) = (1); 
# 347
((mat)[5]) = (1); 
# 348
((mat)[10]) = (1); 
# 349
((mat)[15]) = (1); 
# 351
((mat)[0]) = sx; 
# 352
((mat)[1]) = sy; 
# 353
((mat)[2]) = sz; 
# 354
((mat)[4]) = ux; 
# 355
((mat)[5]) = uy; 
# 356
((mat)[6]) = uz; 
# 357
((mat)[8]) = (-fx); 
# 358
((mat)[9]) = (-fy); 
# 359
((mat)[10]) = (-fz); 
# 361
float trans[16]; 
# 362
memset(trans, 0, sizeof(float) * (16)); 
# 363
((trans)[0]) = (1); 
# 364
((trans)[5]) = (1); 
# 365
((trans)[10]) = (1); 
# 366
((trans)[15]) = (1); 
# 367
((trans)[3]) = (-ex); 
# 368
((trans)[7]) = (-ey); 
# 369
((trans)[11]) = (-ez); 
# 371
memset(res, 0, sizeof(float) * (16)); 
# 372
for (int i = 0; i < 4; i++) 
# 373
{ 
# 374
for (int j = 0; j < 4; j++) 
# 375
{ 
# 376
for (int k = 0; k < 4; k++) 
# 377
{ 
# 378
(res[(i * 4) + j]) += (((mat)[(i * 4) + k]) * ((trans)[(k * 4) + j])); 
# 379
}  
# 380
}  
# 381
}  
# 384
} 
# 388
void buildProjectionMatrix() 
# 389
{ 
# 391
camera &cam = sMain.cam(); 
# 392
float viewmat[16], mat[16], resProj[16], resView[16]; 
# 397
memset(viewmat, 0, sizeof(float) * (16)); 
# 398
((viewmat)[0]) = (1); 
# 399
((viewmat)[5]) = (1); 
# 400
((viewmat)[10]) = (1); 
# 401
((viewmat)[15]) = (1); 
# 402
getPerspectiveMat(mat, cam.fovyDeg(), cam.aspect(), cam.zNear(), cam.zFar()); 
# 405
memset(resProj, 0, sizeof resProj); 
# 406
for (int i = 0; i < 4; i++) 
# 407
{ 
# 408
for (int j = 0; j < 4; j++) 
# 409
{ 
# 410
for (int k = 0; k < 4; k++) 
# 411
{ 
# 413
((resProj)[(j * 4) + i]) += (((viewmat)[(k * 4) + i]) * ((mat)[(k * 4) + j])); 
# 414
}  
# 415
}  
# 416
}  
# 423
memset(viewmat, 0, sizeof(float) * (16)); 
# 424
((viewmat)[0]) = (1); 
# 425
((viewmat)[5]) = (1); 
# 426
((viewmat)[10]) = (1); 
# 427
((viewmat)[15]) = (1); 
# 429
float lu[16]; 
# 430
getLookUpMat(lu, cam.eye().x, cam.eye().y, cam.eye().z, cam.target().x, cam.target().y, cam.target().z, cam.up().x, cam.up().y, cam.up().z); 
# 433
memset(resView, 0, sizeof resView); 
# 434
for (int i = 0; i < 4; i++) 
# 435
{ 
# 436
for (int j = 0; j < 4; j++) 
# 437
{ 
# 438
for (int k = 0; k < 4; k++) 
# 439
{ 
# 441
((resView)[(j * 4) + i]) += (((viewmat)[(k * 4) + i]) * ((lu)[(k * 4) + j])); 
# 442
}  
# 443
}  
# 444
}  
# 484
memcpy(pipelineConstantState.viewMatrix, resView, sizeof(float) * (16)); 
# 486
float newProj[16]; 
# 487
memset(newProj, 0, sizeof newProj); 
# 488
for (int i = 0; i < 4; i++) 
# 489
{ 
# 490
for (int j = 0; j < 4; j++) 
# 491
{ 
# 492
for (int k = 0; k < 4; k++) 
# 493
{ 
# 494
((newProj)[(j * 4) + i]) += (((resProj)[(k * 4) + i]) * ((resView)[(j * 4) + k])); 
# 495
}  
# 496
}  
# 497
}  
# 498
memcpy(pipelineConstantState.viewProjMatrix, newProj, sizeof(float) * (16)); 
# 515
} 
# 550
void inPlaceTransform(cvec3f &v, float viewmat[16]) 
# 551
{ 
# 552
cvec4f tv; 
# 553
vtransform(viewmat, v, tv); 
# 554
float onebyw = (1.0F) / (tv.w); 
# 555
(tv.x) = ((((tv.x) * onebyw) + (1.0F)) * (pipelineConstantState.halfW)); 
# 556
(tv.y) = ((((tv.y) * onebyw) + (1.0F)) * (pipelineConstantState.halfH)); 
# 557
(tv.z) = ((tv.z) * onebyw); 
# 558
v = gencvec3f(tv.x, tv.y, tv.z); 
# 559
} 
# 561
inline void saturatePixelHost(cvec3f &_p) 
# 562
{ 
# 563
(_p.x) = (((_p.x) > (1.0F)) ? (1.0F) : (((_p.x) < (0.0F)) ? (0.0F) : (_p.x))); 
# 564
(_p.y) = (((_p.y) > (1.0F)) ? (1.0F) : (((_p.y) < (0.0F)) ? (0.0F) : (_p.y))); 
# 565
(_p.z) = (((_p.z) > (1.0F)) ? (1.0F) : (((_p.z) < (0.0F)) ? (0.0F) : (_p.z))); 
# 566
} 
# 568
inline cvec3f computeLightingHost(const cvec3f &_mynor, cvec3f &_lightvec, cvec3f &_matcol) 
# 569
{ 
# 570
cvec3f out; 
# 571
float _diffuse = (((_mynor.x) * (_lightvec.x)) + ((_mynor.y) * (_lightvec.y))) + ((_mynor.z) * (_lightvec.z)); 
# 573
_diffuse = ((_diffuse < (0.0F)) ? (0.0F) : _diffuse); 
# 574
(out.x) = ((_diffuse * (_matcol.x)) + (0.150000006F)); 
# 575
(out.y) = ((_diffuse * (_matcol.y)) + (0.150000006F)); 
# 576
(out.z) = ((_diffuse * (_matcol.z)) + (0.3000000119F)); 
# 577
saturatePixelHost(out); 
# 578
return out; 
# 579
} 
# 581
inline unsigned toABGRHost(cvec3f color) 
# 582
{ 
# 584
return (((255 << 24) | (((unsigned)((color.z) * (255.0F))) << 16)) | (((unsigned)((color.y) * (255.0F))) << 8)) | ((unsigned)((color.x) * (255.0F))); 
# 585
} 
# 587
void loadTriangleBuffer(int start, int end) 
# 588
{ 
# 591
printf("Pretransforming vertices\n"); 
# 594
printf("111111\n"); 
# 595
fflush(__null); 
# 598
if (triangleBuffer == (__null)) 
# 599
{ 
# 600
triangleBuffer = (new raster_wtri [1048576 * 35]); 
# 601
}  
# 604
printf("222222\n"); 
# 605
fflush(__null); 
# 607
int size = end - start; 
# 609
if (size <= 0) { return; }  
# 611
int counter = 0; 
# 612
for (int i = start; i < end; i++) 
# 613
{ 
# 614
int t0 = ((sMain._flatTriangles)[i]).x; 
# 615
int t1 = ((sMain._flatTriangles)[i]).y; 
# 616
int t2 = ((sMain._flatTriangles)[i]).z; 
# 617
((triangleBuffer[counter]).worldPos0) = gencvec3f(((sMain._flattVertices)[t0]).x, ((sMain._flattVertices)[t0]).y, ((sMain._flattVertices)[t0]).z); 
# 618
((triangleBuffer[counter]).worldPos1) = gencvec3f(((sMain._flattVertices)[t1]).x, ((sMain._flattVertices)[t1]).y, ((sMain._flattVertices)[t1]).z); 
# 619
((triangleBuffer[counter]).worldPos2) = gencvec3f(((sMain._flattVertices)[t2]).x, ((sMain._flattVertices)[t2]).y, ((sMain._flattVertices)[t2]).z); 
# 621
((sMain._flattNormals)[t0]) = HOST::normalize((sMain._flattNormals)[t0]); 
# 622
((sMain._flattNormals)[t1]) = HOST::normalize((sMain._flattNormals)[t1]); 
# 623
((sMain._flattNormals)[t2]) = HOST::normalize((sMain._flattNormals)[t2]); 
# 626
cvec3f lightvec0 = ((sMain.cam().eye()) - ((triangleBuffer[counter]).worldPos0)); 
# 627
cvec3f lightvec1 = ((sMain.cam().eye()) - ((triangleBuffer[counter]).worldPos1)); 
# 628
cvec3f lightvec2 = ((sMain.cam().eye()) - ((triangleBuffer[counter]).worldPos2)); 
# 630
normalizeInplace(lightvec0); 
# 631
normalizeInplace(lightvec1); 
# 632
normalizeInplace(lightvec2); 
# 634
inPlaceTransform((triangleBuffer[counter]).worldPos0, pipelineConstantState.viewProjMatrix); 
# 635
inPlaceTransform((triangleBuffer[counter]).worldPos1, pipelineConstantState.viewProjMatrix); 
# 636
inPlaceTransform((triangleBuffer[counter]).worldPos2, pipelineConstantState.viewProjMatrix); 
# 638
cvec3f matcol = gencvec3f((0.8999999762F), (0.8999999762F), (0.6000000238F)); 
# 639
cvec3f lightvec = gencvec3f((0.5773000121F), (0.5773000121F), (0.5773000121F)); 
# 642
((triangleBuffer[counter]).icol0) = toABGRHost(computeLightingHost((sMain._flattNormals)[t0], lightvec0, matcol)); 
# 643
((triangleBuffer[counter]).icol1) = toABGRHost(computeLightingHost((sMain._flattNormals)[t1], lightvec1, matcol)); 
# 644
((triangleBuffer[counter]).icol2) = toABGRHost(computeLightingHost((sMain._flattNormals)[t2], lightvec2, matcol)); 
# 650
((triangleBuffer[counter]).id) = counter; 
# 651
counter++; 
# 652
}  
# 654
printf("Added %d triangles\n", counter); 
# 659
} 
# 661
void resetDepthBuffer() 
# 662
{ 
# 663
int nPixels = (pipelineConstantState.screenSizeX) * (pipelineConstantState.screenSizeY); 
# 664
for (int i = 0; i < nPixels; i++) 
# 665
{ 
# 666
((pipelineMutableState.zBuffer)[i]) = (1.0F); 
# 667
}  
# 668
} 
# 670
void destroyApp() 
# 671
{ 
# 672
piko_pipe.destroy(); 
# 673
} 

# 1 "main.compute_61.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__23_main_compute_61_cpp1_ii_7ed080b1
# 1 "main.compute_61.cudafe1.stub.c"
#include "main.compute_61.cudafe1.stub.c"
# 1 "main.compute_61.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
